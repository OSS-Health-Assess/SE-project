type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/apache/fury/issues/1,https://api.github.com/repos/apache/fury/issues/1,fury,1687916225,1,[Java] setup basic java code structure,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-04-28T05:16:42Z,2023-04-28T07:10:22Z,"Setup basic java code structure:
- fury-core: core memory/collection/jit/serialization support
- fury-format: readable/writable binary format
- fury-test-core: reusable test utils across modules
- fury-testsuite: complex test suites beyond unit tests","{""url"": ""https://api.github.com/repos/apache/fury/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/7,https://api.github.com/repos/apache/fury/issues/7,fury,1688168329,7,[Doc] debugging doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-04-28T08:55:05Z,2023-04-28T08:55:35Z,"**Is your feature request related to a problem? Please describe.**
Binary protocol bug is hard to debug, when there is a bug in implementation, crash will happen sometimes. A detailed debugging  doc is necessary for trouble shotting.

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/9,https://api.github.com/repos/apache/fury/issues/9,fury,1688241597,9,[Docs] fix readme syntax,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-04-28T09:42:50Z,2023-04-28T09:43:14Z,"**Is your feature request related to a problem? Please describe.**
Readme has some syntax and not readable

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/11,https://api.github.com/repos/apache/fury/issues/11,fury,1688369830,11,[Community] Getting involved guide,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-04-28T11:11:12Z,2023-04-28T11:12:45Z,"**Is your feature request related to a problem? Please describe.**
There should be a way to guide users to get involved

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/13,https://api.github.com/repos/apache/fury/issues/13,fury,1691771153,13,[Java] CI support for java,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-02T04:48:49Z,2023-05-02T04:54:54Z,"**Is your feature request related to a problem? Please describe.**
Add java ci support
**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/15,https://api.github.com/repos/apache/fury/issues/15,fury,1694217563,15,[Java] java license auto format has no blank line before package declation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-03T14:43:00Z,2023-05-03T14:59:05Z,"**Describe the bug**
Java license auto format has no blank line before package declation, which conflict with checkstyle plugin
**To Reproduce**
```
mvn -T10  clean license:format                            
mvn -T10  clean checkstyle:check                       
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
 - OS: [e.g. Linux/Ubuntu]
 - JDK [e.g. jdk8]
 - Python
 - Gcc/Clang
 - Go
 - NodeJS
 - Fury Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/17,https://api.github.com/repos/apache/fury/issues/17,fury,1694273560,17,[Java] add unsafe memory util support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-03T15:10:11Z,2023-05-03T15:10:52Z,"**Is your feature request related to a problem? Please describe.**
Serialization has frequent memory operations, efficient memory access is necessary for performance, JDK unsafe is an efficient util for this case

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/19,https://api.github.com/repos/apache/fury/issues/19,fury,1695143357,19,[Java] add tuples support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T02:42:00Z,2023-05-04T02:44:53Z,"**Is your feature request related to a problem? Please describe.**
Java lacks of tuple support, which is common in other languages such as cpp/python/golang, and is useful as an common data structure for use by users and by fury itself. 

**Describe the solution you'd like**
Add tuple2/tuple3 support for now, other tuple classes can be added later.

**Describe alternatives you've considered**

**Additional context**
","{""url"": ""https://api.github.com/repos/apache/fury/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/21,https://api.github.com/repos/apache/fury/issues/21,fury,1695151411,21,[Java] disable fury java logging more easily,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T02:52:12Z,2023-05-04T02:54:49Z,"**Is your feature request related to a problem? Please describe.**
Fuy will print some logs for diagnostics, although it's useful, but sometimes may be annoying. We should support disabling logging.

**Describe the solution you'd like**
When logging disabled, switch to `org.slf4j.helpers.NOPLogger#NOP_LOGGER`

**Describe alternatives you've considered**
configure log4j2.xml/log4j2.properties for `io.fury` package

**Additional context**","{""url"": ""https://api.github.com/repos/apache/fury/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/23,https://api.github.com/repos/apache/fury/issues/23,fury,1695210409,23,[Java] add string utils,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T03:45:19Z,2023-05-04T03:47:22Z,"**Is your feature request related to a problem? Please describe.**
The java jit codegen needs to generate java code string, which need some string utils such as `format/stripBlankLines/capitalize/uncapitalize/isBlank`.
**Describe the solution you'd like**
Copy `capitalize/uncapitalize/isBlank` from common-lang, implement others.

**Describe alternatives you've considered**
Add `common-lang` is OK, but will introduce an dependency which we try to avoid since serialziation is so commonly used.

**Additional context**
","{""url"": ""https://api.github.com/repos/apache/fury/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/25,https://api.github.com/repos/apache/fury/issues/25,fury,1695430570,25,[Java] memory read/write buffer support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T07:32:28Z,2023-05-04T07:52:11Z,"**Is your feature request related to a problem? Please describe.**
Serialization will contain much memory read/write, a convinient and highly-efficient util is necessary:
- provide read/write index
- support heap/off-heap memory.
- support varint.
- binary compare, swap, and copy methods.
- little-endian access.


**Describe the solution you'd like**
Using `sun.misc.Unsafe` for efficient memory operations, combine off-heap/heap memory together to avoid viritual methods call cost.
If heap buffer is null, `Unsafe` will locate to off-heap memory offset, otherwise locate to heap memory address.


**Describe alternatives you've considered**
Make memory buffer as an interface and off-heap/heap buffer as implementation is feasible, but will incur viritual methods call which is unaccepable for such perf-critical scene.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/28,https://api.github.com/repos/apache/fury/issues/28,fury,1695575197,28,[Java] JIT codegen framework,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T08:58:54Z,2023-05-16T09:39:03Z,"**Is your feature request related to a problem? Please describe.**
Add java jit framework for speed serialization.

**Describe the solution you'd like**
![image](https://user-images.githubusercontent.com/12445254/236157469-29bdb35c-bc6f-4001-b7bf-b39302fbe13e.png)
The implementation will be divided into:
- [x] #29
- [x] #30
- [x] #32
- [x] #33

**Describe alternatives you've considered**


**Additional context**

","{""url"": ""https://api.github.com/repos/apache/fury/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/29,https://api.github.com/repos/apache/fury/issues/29,fury,1695579055,29,[Java] Type inference based on java class fields types and generics,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:01:09Z,2023-05-16T09:38:54Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/30,https://api.github.com/repos/apache/fury/issues/30,fury,1695579185,30,Expression IR for express code logic,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:01:14Z,2023-05-05T06:29:45Z,Common IR: ValueExpression、ListExpression、Literal、Reference、Empty、Block、FieldValue、SetField、Cast、Invoke、StaticInvoke、NewInstance、NewArray、AssignArrayElem、If、IsNull、Not、Comparator、Arithmetic、Add、Subtract、ForEach、ZipForEach、ForLoop、ListFromIterable、Return,"{""url"": ""https://api.github.com/repos/apache/fury/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/31,https://api.github.com/repos/apache/fury/issues/31,fury,1695579292,31,Serialization primitives such as all kinds of basic serializers and memory operations,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:01:18Z,2023-05-04T09:02:42Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/32,https://api.github.com/repos/apache/fury/issues/32,fury,1695579411,32,[Java] Expression Tree optimizer for method split and inline,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:01:22Z,2023-05-15T13:17:58Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/33,https://api.github.com/repos/apache/fury/issues/33,fury,1695579619,33,[Java] Code generator for compile and generate class,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:01:27Z,2023-05-05T05:59:22Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/34,https://api.github.com/repos/apache/fury/issues/34,fury,1695589999,34,[Java] cross-language type id,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:07:22Z,2023-05-04T09:09:33Z,"**Is your feature request related to a problem? Please describe.**
Add type id consisitent between languages

**Describe the solution you'd like**
Based on arrow type id: arrow/type_fwd.h 
**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/36,https://api.github.com/repos/apache/fury/issues/36,fury,1695644187,36,[Java] add java api annotation to mark api stability,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:37:44Z,2023-05-04T09:38:28Z,"**Is your feature request related to a problem? Please describe.**
Fury is in rapid development, and serialization is used commonly.
we need a way to remind the users which api are stable and which is expected to change.

**Describe the solution you'd like**
add java api annotation to mark api stability：
- `@Public` is stable
- `@Internal` is subject to change

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/38,https://api.github.com/repos/apache/fury/issues/38,fury,1695666421,38,[Java] add int array to avoid boxing cost,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:48:50Z,2023-05-04T09:50:57Z,"**Is your feature request related to a problem? Please describe.**
JDK `ArrayList<Integer>` has boxing overhead, which is unacceptable for perf critical serialization scene. An auto-growing IntArray is needed in such cases.

**Describe the solution you'd like**
Implement an  auto-growing IntArray which hold a `int[]` internally.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/40,https://api.github.com/repos/apache/fury/issues/40,fury,1695686926,40,[Java] faster auto-growing object array,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T09:59:49Z,2023-05-04T10:01:35Z,"**Is your feature request related to a problem? Please describe.**
Java `ArrayList` is slower:
- get/set index checks which may be unnecessary sometimes.
- clear is not fast if list is too long
- Allocate a new arraylist will grow from the bigining which may incur extra copy and memory allocation cost.

We should implement a  faster auto-growing object array.

**Describe the solution you'd like**
- Implement an `ObjectArray` which hold `Object[]` array inernally. 
- Skip index checks
- Use `System.arraycopy` from an null elemente array for clear 

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/42,https://api.github.com/repos/apache/fury/issues/42,fury,1695725460,42,[Java] add optimized map implementation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T10:22:49Z,2023-05-04T10:31:20Z,"**Is your feature request related to a problem? Please describe.**
Serialziation will have many hash loopup:
- look up serializer based on object type
- loop up reference if ref tracking is enabled

We need a very fast map implementation to avoid map lookup become bottleneck

**Describe the solution you'd like**
Use linear probing and fib rehash

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/44,https://api.github.com/repos/apache/fury/issues/44,fury,1695892165,44,[Java] basic type inferrence support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T12:14:06Z,2023-05-04T12:17:52Z,"**Is your feature request related to a problem? Please describe.**
Java is a strong-typed language, class fields have types and generics. By using those type info, serialization performance and size can be improved notably.

Type inferrence performance is critical, since first serialziation will infer object fields type info. If inferrence is slow, there may be burr when serving requests, which is unacceptable.

**Describe the solution you'd like**
- extract java generics based on guava `TypeToken`
- parallel mutil-threaded generics parsing  
- guava generics parsing speedup
- descriptors cache
- ignore fields annotated by `@Ignore`

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
#29 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/46,https://api.github.com/repos/apache/fury/issues/46,fury,1695920127,46,[Java] add long map support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T12:32:36Z,2023-05-04T12:33:37Z,"**Is your feature request related to a problem? Please describe.**
Map with long type key using `java.util.HashMap` will incur boxing cost, a new map implementation is needed. 

**Describe the solution you'd like**
Implement a new map with `long[]` key array and `Object[]` value array. Using linear probing and Fibonacci hashing.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
#42","{""url"": ""https://api.github.com/repos/apache/fury/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/49,https://api.github.com/repos/apache/fury/issues/49,fury,1695972856,49,[Java] fast MurmurHash3 implementation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T13:04:03Z,2023-05-04T13:04:25Z,"**Is your feature request related to a problem? Please describe.**
MurmurHash3 in guava is too slow for perf-critical scene, we need a new implementation

**Describe the solution you'd like**
Implementation in https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java is pretty fast for our use

**Describe alternatives you've considered**


**Additional context**

","{""url"": ""https://api.github.com/repos/apache/fury/issues/49/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/51,https://api.github.com/repos/apache/fury/issues/51,fury,1696009403,51,[Java] add reflection common utils support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T13:24:44Z,2023-05-04T13:25:37Z,"**Is your feature request related to a problem? Please describe.**
Serialization will use reflections frequently in codegen or serialization, a  reflection utils will be convinient for code reuse

","{""url"": ""https://api.github.com/repos/apache/fury/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/53,https://api.github.com/repos/apache/fury/issues/53,fury,1696032114,53,[Java] unsafe field accessor,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-04T13:36:59Z,2023-05-04T13:37:33Z,"**Is your feature request related to a problem? Please describe.**
Getting field value by reflection is slow, using unsafe `sun.misc.Unsafe#getXXX(java.lang.Object, long)` is much faster
","{""url"": ""https://api.github.com/repos/apache/fury/issues/53/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/55,https://api.github.com/repos/apache/fury/issues/55,fury,1696934205,55,[Java] Janino compiler backend,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T02:53:41Z,2023-05-05T02:58:17Z,"**Is your feature request related to a problem? Please describe.**
Fury jit will generate java code based expression tree, we need a way to compile java code into bytecode.

**Describe the solution you'd like**
We can use janino compiler to compile  java code into bytecode since it's faster than jdk compiler.

**Describe alternatives you've considered**
`javax.tools.JavaCompiler` is also feasible, but too slow and generated classfile only.

**Additional context**
Janino compiler doesn't support generics, the generated code shouldn't contains generics.

#28 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/57,https://api.github.com/repos/apache/fury/issues/57,fury,1696959987,57,[Java] Extensible classloader support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T03:40:12Z,2023-05-05T03:51:27Z,"**Is your feature request related to a problem? Please describe.**
Fury Java JIT will genereate byte codes for generated serializer class, which will be loaded as an class in a new or existed classloader.

Class define and loading should ensure it won't create too much new classloaders, and new classes are eligiable to gc, and doesn't pollute exsting classloaders. 

**Additional context**

#28 #33","{""url"": ""https://api.github.com/repos/apache/fury/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/59,https://api.github.com/repos/apache/fury/issues/59,fury,1697006117,59,[Java] multi-key weak map support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T04:55:17Z,2023-05-05T04:56:13Z,"**Is your feature request related to a problem? Please describe.**
JDK `java.util.WeakHashMap` only support one key as weak key, but sometimes we may need a weak map with key is an array of multiple weak items. In such cases, creating a temporary weak key and putting it into WeakHashMap is not feasible, because the temporary key is not strongly-referenced. We need a new weak map which support  multi-key weak key natively.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/62,https://api.github.com/repos/apache/fury/issues/62,fury,1697071873,62,[Java] extract captured variables in lambda,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T06:19:33Z,2023-05-05T06:20:47Z,"**Is your feature request related to a problem? Please describe.**
Support extract captured variables in lambda, we can use this feature in codegen to extract dependent expressions when split big methods into small methods.

**Describe the solution you'd like**
When lambda is  Serializable, we can use `java.lang.invoke.SerializedLambda#getCapturedArg` to extract captured variables ","{""url"": ""https://api.github.com/repos/apache/fury/issues/62/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/65,https://api.github.com/repos/apache/fury/issues/65,fury,1697118952,65,[Java] IllgealArgumentException when IF operator has Return child,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T07:05:28Z,2023-05-05T07:07:32Z,"**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
```
 String code = new Expression.If(
        ExpressionUtils.eq(Expression.Literal.ofInt(1), new Expression.Reference(""classId"", PRIMITIVE_SHORT_TYPE, false)),
        new Expression.Return(Expression.Literal.True),
        new Expression.Return(Expression.Literal.False)).genCode(new CodegenContext()).code();
```

**Screenshots**
![image](https://user-images.githubusercontent.com/12445254/236395751-b877cced-38dc-404e-80c5-4e19e26d3c76.png)
**Environment (please complete the following information):**
 - OS: [e.g. Linux/Ubuntu]
 - JDK [e.g. jdk8]
 - Python
 - Gcc/Clang
 - Go
 - NodeJS
 - Fury Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/65/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/67,https://api.github.com/repos/apache/fury/issues/67,fury,1697162292,67,[Java] Expression tree traverse and node update,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T07:42:45Z,2023-05-05T07:43:43Z,"**Is your feature request related to a problem? Please describe.**
Add tool for traverse expression tree and update node by specified action at expression site


**Additional context**
#32 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/70,https://api.github.com/repos/apache/fury/issues/70,fury,1697226627,70,[Java] basic serialization framework,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T08:33:51Z,2023-05-07T08:13:38Z,"**Is your feature request related to a problem? Please describe.**
Implement java serialization framework for fury. JIT serialization are not contained in this issue.

**Describe the solution you'd like**
Serialization framework includes following classes:
- Fury: serialization entrance for the users
- ClassResolver: read/write class
- ReferenceResolver: tracking reference
- EnumStringResolver: write/read duplciated string only once
- SerializationContext: add some context-related information, so that the serializers can set up relation between serializing different objects
- Generics: Java generics to speed up serialzation and reduce size

","{""url"": ""https://api.github.com/repos/apache/fury/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/71,https://api.github.com/repos/apache/fury/issues/71,fury,1697230734,71,[Java] write/read duplciated enum string only once,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T08:37:05Z,2023-05-06T03:03:10Z,"**Is your feature request related to a problem? Please describe.**
When serializing multiple objects of same type, classname will be written to buffer multiple times. There should be a way to write classname only once, and in later classname writing, an id should be written.

Such classname are enumable string, there should be an abstraction to write such string only once.

**Additional context**
#70 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/73,https://api.github.com/repos/apache/fury/issues/73,fury,1697256182,73,[Java] Reference tracking support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T08:58:02Z,2023-05-05T09:29:27Z,"**Is your feature request related to a problem? Please describe.**
Java object graph may have shared or circular reference between each other.
Serialization should support tracking such reference to avoid writing duplciate data or recursion error.

At the same time, reference tracking will need a map to track ref, which is pretty slow, althogh we can use optimized map in `io.fury.collection`. So there should be an option to disable ref tracking.

**Describe the solution you'd like**
ReferenceResolver is an abstract interface.   MapReferenceResolver tracking reference by map, NoReferenceResolver just ignore reference.

**Describe alternatives you've considered**
Binding a reference resolver for every type, i.e. implement a hierarchical resolver may have better performance at some cases?

**Additional context**
#70 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/73/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/75,https://api.github.com/repos/apache/fury/issues/75,fury,1697458576,75,[Java] add java serializer interface,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-05T11:27:47Z,2023-05-05T11:28:43Z,"**Is your feature request related to a problem? Please describe.**
add java serializer interface, a new inter type support will only need to implement the serializer for that type.

**Describe the solution you'd like**
```java
public abstract class Serializer<T> {
  public void write(MemoryBuffer buffer, T value) {
    throw new UnsupportedOperationException();
  }

  public T read(MemoryBuffer buffer) {
    throw new UnsupportedOperationException();
  }
  public void crossLanguageWrite(MemoryBuffer buffer, T value) {
    throw new UnsupportedOperationException();
  }

  public T crossLanguageRead(MemoryBuffer buffer) {
    throw new UnsupportedOperationException();
  }
}
```

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
#70 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/78,https://api.github.com/repos/apache/fury/issues/78,fury,1698394964,78,[Java] support speedup inner serialization by using outer generics info,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-06T02:53:45Z,2023-05-06T03:02:57Z,"**Is your feature request related to a problem? Please describe.**
For class with nested generics such as:
```java
class Foo {
  List<Integer> intLists;
  Map<String, List<Long>> map;
}
```

If we push `Integer` type to `ListSerializer` and `String, List<Long>` to `MapSerializer`, then `ListSerializer` will know every element is an `Integer`, there will be no need to query element serializer and write element type every time serializing those elements, thus much space/time efficient.

`MapSerializer` can use same mechanism. Also when serializing `List<Long>` value, `MapSerializer` can push `Long` to `ListSerializer`, which make nested list serialization more  efficient too.

Java generics is erasured at runtime,`List` type won't have element type. We need a way to push and propagate those erasured generics along the serialization.

**Describe the solution you'd like**
- Using guava `TypeToken` to extract generics
- Create an `Generics` to record generics hierarchy and current generics
- Create an `GenericType` to tracking children  generics and binding serializer to reduce map loopup cost

**Additional context**
#70 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/80,https://api.github.com/repos/apache/fury/issues/80,fury,1698399452,80,[Java] Meta shared mode serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-06T03:09:13Z,2023-05-15T08:50:13Z,"**Is your feature request related to a problem? Please describe.**
For class forward/backward compatibility,  fury needs to send class meta to peer everytime, which is time-consuming, and consume more bandwidth.

**Describe the solution you'd like**
If the serialization sender and receiver are serialized serially in a certain context (TCP connection), then some metadata (class name, field name, final field type information, etc.) can be shared between multiple requests in that context. These type information will be sent to the other end during the first serialization in that context. This way, the other end can rebuild the same deserializer based on the type information, so that it can still deserialize correctly when the fields on the serialization and deserialization sides are inconsistent. At the same time, unnecessary metadata serialization overhead can be reduced in subsequent serialization.

**Additional context**
#197","{""url"": ""https://api.github.com/repos/apache/fury/issues/80/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/81,https://api.github.com/repos/apache/fury/issues/81,fury,1698401332,81,[Java] Add serialization context to set up relation between serializing different objects,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-06T03:15:45Z,2023-05-06T03:17:25Z,"**Is your feature request related to a problem? Please describe.**
Serialization context will be used to add some context-related information, so that the serializers can set up relation between serializing different objects. The context will be reset after finished serializing/deserializing the object tree.

**Additional context**
#70 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/84,https://api.github.com/repos/apache/fury/issues/84,fury,1698419727,84,[Java] Class information read/write resolving,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-06T03:59:15Z,2023-05-07T08:35:29Z,"**Is your feature request related to a problem? Please describe.**
Add class registry for fast class information read/write resolving

**Additional context**
#70 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/84/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/85,https://api.github.com/repos/apache/fury/issues/85,fury,1698920408,85,[Java] zero-copy support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-07T06:31:50Z,2023-05-07T06:36:54Z,"**Is your feature request related to a problem? Please describe.**
Support zero-copy to avoid large buffer serialization cost

**Describe the solution you'd like**
Python [pickle5](https://peps.python.org/pep-0574/) out-of-band serialization is zero-copied, fury can implement similar protocol, but in a cross-language way.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/86,https://api.github.com/repos/apache/fury/issues/86,fury,1698921369,86,[Java] add buffer callback,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T06:35:28Z,2023-05-07T06:39:47Z,"**Is your feature request related to a problem? Please describe.**
When there is a buffer which can be zero-copy serialized, Buffer callback should be invoked to handle this buffer.

If buffer callback returns false, the given buffer is out-of-band, thus zero-copied.

**Additional context**
#85 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/86/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/89,https://api.github.com/repos/apache/fury/issues/89,fury,1698960996,89,[Java] Fast string serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T08:43:23Z,2023-05-07T08:48:27Z,"**Is your feature request related to a problem? Please describe.**
String is very common in serialization, but due to its variable length and mutiple encoding, string serialization is pretty slow, sometimes is becomes the bottle of whole serialization. We need a way for fast string serialization.

The bottle mainly consists of:
- String data serialization copy: copy inner `char[]` / `byte[]` outside for serialization.
- String encoding: encoding  `char[]` / `byte[]`  into `ascii`/`unicode16`/`utf8`
- String decoding: decoding binary into `ascii`/`unicode16` `char[]`/`byte[]`
- String creation copy cost: java.lang.String will copy provided `char[]`/`byte[]` for immutability.

**Describe the solution you'd like**
- Use `sun.misc.Unsafe` for extract inner `char[]` / `byte[]` 
- Support  `ascii`/`unicode16`/`utf8` to minimize encoding cost
- Add encoding flag in data to support multiple encoding
- Use `java.lang.invoke.MethodHandle` to avoid invoke package-level zero0-copy constructor with minimal cost

","{""url"": ""https://api.github.com/repos/apache/fury/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/91,https://api.github.com/repos/apache/fury/issues/91,fury,1698962531,91,[Java] JDK 17 string derialization zero-copy ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T08:47:52Z,2023-07-17T13:43:58Z,"**Is your feature request related to a problem? Please describe.**
Due to strong encapsulation in JDK17 is enabled by default, we can't get String zero-copy constructor without some hacks, the deserialization of string in JDK17 will have an extra copy when creating String object.


**Additional context**
#90 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/91/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/92,https://api.github.com/repos/apache/fury/issues/92,fury,1698974182,92,[Java] Add StringBuilder/StringBuffer serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T09:21:42Z,2023-05-07T09:25:51Z,"**Is your feature request related to a problem? Please describe.**
Add StringBuilder/StringBuffer serializer

**Describe the solution you'd like**
Convert StringBuilder/StringBuffer to String, then serializing  it using StringSerializer.

**Describe alternatives you've considered**
Convert to/from String may have some cost, bettern solution is tackle inner data structure of StringBuilder/StringBuffer directly.
But StringBuilder/StringBuffer serialization is not common, we can using the conversion first, then optimize later if truely needed.
**Additional context**
#89 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/94,https://api.github.com/repos/apache/fury/issues/94,fury,1698975511,94,[Java] Optimize StringBuilder/StringBuffer serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T09:25:32Z,2023-09-27T03:35:12Z,"**Is your feature request related to a problem? Please describe.**
In #93, we implement StringBuilder/StringBuffer serialization by converting to/from java.lang.String, which have some copy cost. A better solution is tackle inner data structure to avoid this copy.

**Additional context**
#92 #93 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/96,https://api.github.com/repos/apache/fury/issues/96,fury,1698979695,96,[Java] support java enum serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T09:37:41Z,2023-05-07T09:38:17Z,"**Is your feature request related to a problem? Please describe.**
add support for java enum serialization:
- Enum class
- Enum subclass
","{""url"": ""https://api.github.com/repos/apache/fury/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/98,https://api.github.com/repos/apache/fury/issues/98,fury,1698981588,98,[Java] support serializing enum by string,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T09:43:17Z,2023-05-10T16:43:55Z,"**Is your feature request related to a problem? Please describe.**
#97 implements enum serialization by writing enum ordinal, this is fast. But when enum constants are reordered, deserialization will get wrong value.

**Describe the solution you'd like**
Support serialization by enum string, but in a configurable way.

By default, serialization enum using ordinal. But can be configured to using enum string for serialization,
**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
#96 #97 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/99,https://api.github.com/repos/apache/fury/issues/99,fury,1698983210,99,[Java] Implement bigint/decimal serialization for java,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-07T09:48:03Z,2023-05-07T09:49:57Z,"**Is your feature request related to a problem? Please describe.**
Implement bigint/decimal serialization for java","{""url"": ""https://api.github.com/repos/apache/fury/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/100,https://api.github.com/repos/apache/fury/issues/100,fury,1698983674,100,[Xlang] Implement bigint/decimal cross-langauage serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-07T09:49:27Z,2023-05-08T03:42:55Z,"**Is your feature request related to a problem? Please describe.**
Implement bigint/decimal cross-langauage serialization for java

**Describe the solution you'd like**
Some language may lack of those types, fury should implement the  bigint/decimal types in other languages.

**Additional context**
#99 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/102,https://api.github.com/repos/apache/fury/issues/102,fury,1699425860,102,[Community] add zhihu link,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T03:03:54Z,2023-05-08T03:04:28Z,"**Is your feature request related to a problem? Please describe.**
zhihu is an active community for sharing knowledge,sync latest fury updates there can attract more users and developers for fury. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/106,https://api.github.com/repos/apache/fury/issues/106,fury,1699544791,106,[Java] support object array serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T05:19:54Z,2023-05-08T05:24:17Z,"**Is your feature request related to a problem? Please describe.**
Support java object array serialization:
- `Object[]`  array
- Multi-demension array
- Array componet type which isn't `Object`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/108,https://api.github.com/repos/apache/fury/issues/108,fury,1699600021,108,[Java] support primitive array serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T06:12:55Z,2023-05-08T06:21:43Z,"**Is your feature request related to a problem? Please describe.**
In #107 #106 , we supported object array serialization, but  primitive array is not supported.

Primitive array is an continuous buffer under the hood, serializing it should be handled specially to avoid boxing cost. And if zero-copy is enabled, those array should be serialized use out-of-band protocol to avoid copy.


**Additional context**
#85 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/110,https://api.github.com/repos/apache/fury/issues/110,fury,1699610176,110,[Java] primitive array compression by SIMD,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-08T06:21:18Z,2024-04-16T16:30:04Z,"**Is your feature request related to a problem? Please describe.**
Currently primitive array are serialized by copy the data buffer directly using `sun.misc.Unsafe`, this is super fast. Buf  if all values in array are small, compression may reduce the data dramatically.

Compression needs to iterate the array at least once, which may be slow.

**Describe the solution you'd like**
- Using JDK 17 vector API for fast compression by SIMD.
- Providec an option to enable/disable this feature.

**Additional context**
#108 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/110,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56q1DN,fury,2058047693,110,NA,heliang666s,147408835,,,NA,2024-04-16T00:52:40Z,2024-04-16T00:52:40Z,"Hello, can you describe the solution in more detail？","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56q1DN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/110,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rKnp,fury,2058136041,110,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-16T02:49:31Z,2024-04-16T02:49:31Z,"> Hello, can you describe the solution in more detail？

Hi @heliang666s , thanks for the interest about this issue.

We may need to use SIMD api to detect whether all values in array are small value. If all values are small or first n values are small, we should use SIMD to cast it into smaller value into target buffer directly .","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rKnp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/110,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vce_,fury,2059257791,110,NA,heliang666s,147408835,,,NA,2024-04-16T14:38:56Z,2024-04-16T14:38:56Z,"ok,I will try it.Please assign me thanks~","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vce_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/111,https://api.github.com/repos/apache/fury/issues/111,fury,1699662764,111,[Java] byte buffer serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T07:05:00Z,2023-05-08T07:11:21Z,"**Is your feature request related to a problem? Please describe.**
Java `java.nio.ByteBuffer` serialization isn't supported by JDK. But since it's commonly used, serialization support is useful to users.

**Describe the solution you'd like**
- Only serialize data, buffer meta such as `position` are ignored.
- `java.nio.DirectByteBuffer` will be deserialized to `java.nio.HeapByteBuffer` since we don't know where the direct memory comes from. In future we should support configure `DirectByteBuffer` memory pool to allocate direct memory for deserialization.


","{""url"": ""https://api.github.com/repos/apache/fury/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/112,https://api.github.com/repos/apache/fury/issues/112,fury,1699668814,112,[RFC][Java] allocate memory from off-heap when deserializing DirectByteBuffer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-08T07:08:24Z,2023-05-08T07:11:33Z,"**Is your feature request related to a problem? Please describe.**
In #113, we deserializing DirectByteBuffer as `HeapByteBuffer`, since we don't know where to allocate memory for it.

Maybe we can set `DirectByteBuffer` serializer to make it allocate memory from a provoided memory pool. If so, the deserialized ByteBuffer will still be `DirectByteBuffer`, which preserve all type info as it is.

**Additional context**
#111  #113","{""url"": ""https://api.github.com/repos/apache/fury/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/114,https://api.github.com/repos/apache/fury/issues/114,fury,1699796112,114,[Java] support java.util.concurrent.atomics serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T08:34:36Z,2023-05-08T08:36:54Z,"**Is your feature request related to a problem? Please describe.**
Add support for java.util.concurrent.atomics serialization:
- java.util.concurrent.atomic.AtomicBoolean;
- java.util.concurrent.atomic.AtomicInteger;
- java.util.concurrent.atomic.AtomicLong;
- java.util.concurrent.atomic.AtomicReference;","{""url"": ""https://api.github.com/repos/apache/fury/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/117,https://api.github.com/repos/apache/fury/issues/117,fury,1699818358,117,[Java] support java.util.Currency serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T08:50:01Z,2023-05-08T08:50:31Z,"**Is your feature request related to a problem? Please describe.**
Add support `java.util.Currency` serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/119,https://api.github.com/repos/apache/fury/issues/119,fury,1699828303,119,[Java] support charset serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T08:54:07Z,2023-05-08T08:57:17Z,"**Is your feature request related to a problem? Please describe.**
Add  support for charset serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/121,https://api.github.com/repos/apache/fury/issues/121,fury,1699845140,121,[Java] support for URI serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T09:01:35Z,2023-05-08T09:02:16Z,"**Is your feature request related to a problem? Please describe.**
Add support for URI serialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/123,https://api.github.com/repos/apache/fury/issues/123,fury,1699852281,123,[Java] support regex serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T09:05:19Z,2023-05-08T09:05:56Z,"**Is your feature request related to a problem? Please describe.**
Add support for regex serialization.","{""url"": ""https://api.github.com/repos/apache/fury/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/125,https://api.github.com/repos/apache/fury/issues/125,fury,1699858041,125,[Java] support uuid serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T09:08:31Z,2023-05-08T09:11:12Z,"**Is your feature request related to a problem? Please describe.**
Add support for uuid serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/128,https://api.github.com/repos/apache/fury/issues/128,fury,1700276283,128,[Java] support locale serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T13:38:43Z,2023-05-08T13:39:44Z,"**Is your feature request related to a problem? Please describe.**
Add support for `java.util.Locale` serialization.

**Describe the solution you'd like**
Common locales defined in `java.util.Locale` should be cached to taken as singleton

","{""url"": ""https://api.github.com/repos/apache/fury/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/130,https://api.github.com/repos/apache/fury/issues/130,fury,1700294584,130,[Java] Optimize empty string deserialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T13:50:30Z,2023-05-08T14:07:42Z,"**Is your feature request related to a problem? Please describe.**
Empty string is common in java, deserialization will create a new String object which is unencessary. We can just return `""""` instead. 

**Additional context**
If we return `""""` for empty string, multiple different empty string instance will become same reference. But given that string literals are interned automatically, it shouldn't be a problem","{""url"": ""https://api.github.com/repos/apache/fury/issues/130/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/131,https://api.github.com/repos/apache/fury/issues/131,fury,1700331192,131,[Java] fix locale serialzier cache thread safety,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T14:09:15Z,2023-05-08T14:10:18Z,"**Is your feature request related to a problem? Please describe.**
Locale serializer used a HashMap for cache, but it's updated after created, which may not be thread-safe.

**Additional context**
#129 #128
","{""url"": ""https://api.github.com/repos/apache/fury/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/133,https://api.github.com/repos/apache/fury/issues/133,fury,1700341206,133,[Java] serialization support for optionals,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T14:14:09Z,2023-05-08T14:15:08Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.OptionalXXX

","{""url"": ""https://api.github.com/repos/apache/fury/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/135,https://api.github.com/repos/apache/fury/issues/135,fury,1700358101,135,[Java] add time serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-08T14:23:49Z,2023-05-08T14:29:37Z,"**Is your feature request related to a problem? Please describe.**
Add serialization for time classes
","{""url"": ""https://api.github.com/repos/apache/fury/issues/135/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/136,https://api.github.com/repos/apache/fury/issues/136,fury,1700361483,136,[Java] Timezone handling for java.time.Instant,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-08T14:26:01Z,2023-05-08T14:28:59Z,"**Is your feature request related to a problem? Please describe.**
Currently java serialization of java.time.Instant ignore timezone, just use default zone instead.

Timezone support shoud be added in case deserialization peer has different timezone from serialization peer.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/136/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/138,https://api.github.com/repos/apache/fury/issues/138,fury,1701245785,138,[Java] Fury ObjectInput/Output support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T03:26:08Z,2023-05-09T03:27:44Z,"**Is your feature request related to a problem? Please describe.**
ObjectInput/Output will be used when serializing `java.io.Externalizable` and by `ObjectOutputStream`/`ObjectInputStream`.
Fury should support `ObjectInput/Output` so the underlying read/writing forward to fury to reduce copy and speed up performance by efficient fury serilization pritimives.

**Describe the solution you'd like**
Implement  ObjectInput/Output subclass, forward the implementation to fury.","{""url"": ""https://api.github.com/repos/apache/fury/issues/138/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/140,https://api.github.com/repos/apache/fury/issues/140,fury,1701272195,140,[Java] JDK API compatible object serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T03:48:42Z,2023-05-09T03:49:30Z,"**Is your feature request related to a problem? Please describe.**
JDK provided `writeObject/writeReplace/readObject/readReplace/readObjectNoData` methods to custimize serialization beheviour. In order to keep compatibility, fury should ensure those methods got invoked when serializing.

**Describe the solution you'd like**
- Forward the serailization to JDK `ObjectInputStream/ObjectOutputStream`
- Make underlying write/object forward to Fury MemoryBuffer
","{""url"": ""https://api.github.com/repos/apache/fury/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/142,https://api.github.com/repos/apache/fury/issues/142,fury,1701360027,142,[Java] Support jdk proxy serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T05:26:17Z,2023-05-09T05:27:57Z,"**Is your feature request related to a problem? Please describe.**
Add support for  jdk proxy serialization.

**Describe the solution you'd like**
- Serialize JDK proxy by `Proxy.getInvocationHandler(value)` and `value.getClass().getInterfaces()`
- Create proxy by `Proxy.newProxyInstance(classloader, interfaces, invocationHandler)`

Note that proxy class is genrated dynamically, we can't serialize class name, otherwise diserialization will throw `ClassNotFoundException`.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/144,https://api.github.com/repos/apache/fury/issues/144,fury,1701410858,144,[Java] support for Externalizable serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T06:11:50Z,2023-05-09T06:14:00Z,"**Is your feature request related to a problem? Please describe.**
Serialization for classes implementing `Externalizable` should be handled in a new serializer for efficiency. Using `JavaSerializer` will have jdk serialization cost.

**Describe the solution you'd like**
Using  `FuryObjectOutput` and `FuryObjectInput` in #138 as parameters for writeExternal/readExternal invocation. 


**Additional context**
#138 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/146,https://api.github.com/repos/apache/fury/issues/146,fury,1701499318,146,[Java] serialization support for java.util.Collection ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:17:37Z,2023-05-09T07:19:09Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.Collection.

**Describe the solution you'd like**
If collection element type is final, serialization should use the final type to reduce space cost, and improve serialization performance by avoid query element serializers repeatly.

When jit is enableld, the generated code can inline element serializer for better performance.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/148,https://api.github.com/repos/apache/fury/issues/148,fury,1701506155,148,[Java] Serialization support for SortedSet,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:22:56Z,2023-05-09T07:23:38Z,"**Is your feature request related to a problem? Please describe.**
Add Serialization support for java.util.SortedSet
","{""url"": ""https://api.github.com/repos/apache/fury/issues/148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/150,https://api.github.com/repos/apache/fury/issues/150,fury,1701521881,150,[Java] support empty collection serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:33:53Z,2023-05-09T07:34:56Z,"**Is your feature request related to a problem? Please describe.**
Empty collection serialization is common in java, a separate serializer will have bettern performance and ensure singleton.


**Additional context**
#146 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/152,https://api.github.com/repos/apache/fury/issues/152,fury,1701531493,152,[Java] support for Collections.singleXXX serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:41:19Z,2023-05-09T07:42:15Z,"**Is your feature request related to a problem? Please describe.**
 Collections.singleXXX is common in java and deserves separate serializers for bettern performance.


**Additional context**
#147 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/154,https://api.github.com/repos/apache/fury/issues/154,fury,1701539324,154,[Java] serialization support for ConcurrentSkipListSet,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:46:47Z,2023-05-09T07:47:19Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for ConcurrentSkipListSet
","{""url"": ""https://api.github.com/repos/apache/fury/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/156,https://api.github.com/repos/apache/fury/issues/156,fury,1701543989,156,[Java] Serialization support for java.util.Vector,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:49:54Z,2023-05-09T07:50:32Z,"**Is your feature request related to a problem? Please describe.**
Add Serialization support for java.util.Vector","{""url"": ""https://api.github.com/repos/apache/fury/issues/156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/158,https://api.github.com/repos/apache/fury/issues/158,fury,1701548265,158,[Java] serialization support for java.util.ArrayDeque serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:53:10Z,2023-05-09T07:53:57Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.ArrayDeque
","{""url"": ""https://api.github.com/repos/apache/fury/issues/158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/160,https://api.github.com/repos/apache/fury/issues/160,fury,1701557953,160,[Java] Serialization support for java.util.EnumSet,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T07:59:31Z,2023-05-09T08:00:03Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.EnumSet
","{""url"": ""https://api.github.com/repos/apache/fury/issues/160/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/162,https://api.github.com/repos/apache/fury/issues/162,fury,1701563726,162,[Java] Serialization support for java.util.BitSet,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T08:02:57Z,2023-05-09T08:03:28Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.BitSet
","{""url"": ""https://api.github.com/repos/apache/fury/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/164,https://api.github.com/repos/apache/fury/issues/164,fury,1701569753,164,[Java] Serialization support for java.util.PriorityQueue,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T08:06:46Z,2023-05-09T08:07:43Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.PriorityQueue
","{""url"": ""https://api.github.com/repos/apache/fury/issues/164/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/166,https://api.github.com/repos/apache/fury/issues/166,fury,1701595947,166,[Java] serialization support for java.util.Map,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T08:24:43Z,2023-05-09T08:26:55Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.Map.

**Describe the solution you'd like**
If Map  key/value type is final, serialization should use the final type to reduce space cost, and improve serialization performance by avoid query element serializers repeatly.

When jit is enableld, the generated code can inline key/value serializer for better performance.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/166/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/168,https://api.github.com/repos/apache/fury/issues/168,fury,1701641997,168,[Java] serialization for java.util.SortedMap,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T08:51:53Z,2023-05-09T08:52:39Z,"**Is your feature request related to a problem? Please describe.**
Add serialization support for java.util.SortedMap subclasses
","{""url"": ""https://api.github.com/repos/apache/fury/issues/168/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/170,https://api.github.com/repos/apache/fury/issues/170,fury,1701649911,170,[Java] support empty map serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T08:57:02Z,2023-05-09T08:57:48Z,"**Is your feature request related to a problem? Please describe.**
Empty is common in java application, a new serializer will have better performance and ensure singleton","{""url"": ""https://api.github.com/repos/apache/fury/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/172,https://api.github.com/repos/apache/fury/issues/172,fury,1701656252,172,[Java] support singleton map serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T09:00:40Z,2023-05-09T09:01:18Z,"**Is your feature request related to a problem? Please describe.**
Add support for singleton map serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/172/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/174,https://api.github.com/repos/apache/fury/issues/174,fury,1701664487,174,[Java] ConcurrentMap serialization optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T09:05:23Z,2023-05-09T09:05:45Z,"**Is your feature request related to a problem? Please describe.**
Support  serialization optimization for ConcurrentMap

","{""url"": ""https://api.github.com/repos/apache/fury/issues/174/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/176,https://api.github.com/repos/apache/fury/issues/176,fury,1701671137,176,[Java] EnumMap serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-09T09:09:13Z,2023-05-09T09:09:58Z,"**Is your feature request related to a problem? Please describe.**
Add  `java.util.EnumMap` serialization support
","{""url"": ""https://api.github.com/repos/apache/fury/issues/176/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/178,https://api.github.com/repos/apache/fury/issues/178,fury,1703059234,178,[Java] sort and group class fields for cache and consistency,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T03:29:53Z,2023-05-10T03:38:24Z,"**Is your feature request related to a problem? Please describe.**
For object serialization, we should serialize all fields in a determistic awy across all JDK versions, all languages, all operate systems. Otherwise deserialization will failed. Or even  worse, return unexpected result sliently.

**Describe the solution you'd like**
There are many strategy to sort fields. To ensure cross-language compatibilty, we sort by field type first then by field name. So same type fields can be serialized continuously, which is more cache-friendly. 

Note that we do not sort fields by JDK field offset, although it's more cache-friendly, but the layout is not public, which may change across JDK versions/platforms, and also not cross-langauge compatible. Normally JDK will arange same types field near to each other, so if same types are serialized continuously, it's still cache-friendly most of the time.

We also group fields into five categrious:
- primitive types
- boxed types
- List types
- Map types
- Other final types
- Other non-final types

The serialization can be optimized for each types specially for efficiency.","{""url"": ""https://api.github.com/repos/apache/fury/issues/178/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/180,https://api.github.com/repos/apache/fury/issues/180,fury,1703077811,180,[Java] object serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T03:55:21Z,2023-05-10T04:02:38Z,"**Is your feature request related to a problem? Please describe.**
Add  object serialization support, serialize all non-transient/non-stiatic fields.

Classes implemented `writeObject/readObejct/writeReplace/readResolve` are not handled by this serializer.


**Describe the solution you'd like**
- Primitive types should be handled specially to avoid boxing cost
- Swich should be used for common types to avoid virtual method call cost
","{""url"": ""https://api.github.com/repos/apache/fury/issues/180/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/182,https://api.github.com/repos/apache/fury/issues/182,fury,1703195793,182,[Java] lambda native fury serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T06:11:39Z,2023-05-10T06:12:56Z,"**Is your feature request related to a problem? Please describe.**
In  #141, we support lambda serialization by forwarding it to JDK `ObjectOutputStream`. Althogh this implementation works, it has performance and security issue:
- JDK serialization is very slow
- Lambda may capture variables, those variables will be serialized by JDK serialization too, which is inefficent too. But more important is that those variables serialization escaped from Fury security check such as BlackList check, or type resgistry check, which will have same security issue as JDK serialization.

**Describe the solution you'd like**
Serialize lambda by using `SerializableLambda` and Fury `ObjectSerializer`.


**Additional context**
#140","{""url"": ""https://api.github.com/repos/apache/fury/issues/182/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/187,https://api.github.com/repos/apache/fury/issues/187,fury,1703791577,187,[Java] Serialization optimization for Collections.synchronized,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T12:12:15Z,2023-05-10T12:32:39Z,"**Is your feature request related to a problem? Please describe.**
- ` Collections.synchronized` is common in java, which deserves  special serializers for better performance.
- Only a special serializer can ensure the serializer is subclass of `io.fury.serializer.CollectionSerializers.CollectionSerializer` and `io.fury.serializer.MapSerializers.MapSerializer`
- Using a special serializer can ensure inner collection data is serialized only once.


","{""url"": ""https://api.github.com/repos/apache/fury/issues/187/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/189,https://api.github.com/repos/apache/fury/issues/189,fury,1703799627,189,[Java] propagate generics from outer unmodifiable/synchronized,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-10T12:17:24Z,2023-05-10T12:31:41Z,"**Is your feature request related to a problem? Please describe.**
In #188 and #191, we optimize serialization perf by a special serializer, but that serializer doesn't propagate generics to inner collection element. The serialization will be inefficent in space and perf.

**Describe the solution you'd like**
Update depth directly so inner collection/map can just use outer collection/map generics.

**Describe alternatives you've considered**
Get generics first then push it into `Generics`

**Additional context**
#188 #190","{""url"": ""https://api.github.com/repos/apache/fury/issues/189/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/190,https://api.github.com/repos/apache/fury/issues/190,fury,1703823386,190,[Java] Optimize Collections.unmodifiable performance ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T12:31:05Z,2023-05-10T12:35:40Z,"**Is your feature request related to a problem? Please describe.**
- `Collections.unmodifiable` is common in serialization, a special serializer will be faster
- Only a special serializer can ensure the serializer is subclass of `io.fury.serializer.CollectionSerializers.CollectionSerializer` and `io.fury.serializer.MapSerializers.MapSerializer`
- Using a special serializer can ensure inner collection data is serialized only once.

**Describe the solution you'd like**
Using Unsafe to extract inner collection and forward it to fury.

**Additional context**
#189 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/190/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/192,https://api.github.com/repos/apache/fury/issues/192,fury,1704197813,192,[Java] Fury-native readResolve/writeReplace serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T15:37:46Z,2023-05-10T15:48:14Z,"**Is your feature request related to a problem? Please describe.**
[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)/[readResolve](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readresolve-method) method can be used to delegate the serialization and deserialization to other classes, and is used wisely in JDK and guava.

Current fury forward the serialization to `ObjectOuputStream`,  which is slow and unsafe.


**Describe the solution you'd like**
Implemet readResolve/writeReplace natively in fury to speed up and more safe.

Invoke those methods using reflection to ensure jdk api compatibility.

**Additional context**
Kryo forward readResolve/writeReplace serialization to JDK, which is slow and unsafe too.

Hessian currently supports writeReplace/readResolve custom methods. When an object defines a writeReplace method, it will be serialized through the com.caucho.hessian.io.WriteReplaceSerializer. While this serializer can meet the needs of some scenarios, Hessian may encounter stack overflow when the writeReplace method returns a new object of the same type:
```java
public static class CustomReplaceClass implements Serializable {
  Object writeReplace() {
    return new CustomReplaceClass();
  }
​
  Object readResolve() {
    return new CustomReplaceClass();
  }
}
Exception in thread ""main"" java.lang.StackOverflowError
  at java.base/java.lang.reflect.InvocationTargetException.<init>(InvocationTargetException.java:73)
  at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.base/java.lang.reflect.Method.invoke(Method.java:566)
  at com.caucho.hessian.io.WriteReplaceSerializer.writeReplace(WriteReplaceSerializer.java:184)
  at com.caucho.hessian.io.WriteReplaceSerializer.writeObject(WriteReplaceSerializer.java:155)
  at com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:465)
  at com.caucho.hessian.io.WriteReplaceSerializer.writeObject(WriteReplaceSerializer.java:167)
  at com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:465)
  at com.caucho.hessian.io.WriteReplaceSerializer.writeObject(WriteReplaceSerializer.java:167)
  at com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:465)
  at com.caucho.hessian.io.WriteReplaceSerializer.writeObject(WriteReplaceSerializer.java:167)
  at com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:465)
```


See #194 for reflection cost.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/192/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/194,https://api.github.com/repos/apache/fury/issues/194,fury,1704212881,194,[Java] Reflected method invocation optimization by java.lang.invoke.MethodHandle,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T15:47:33Z,2023-11-25T10:11:59Z,"**Is your feature request related to a problem? Please describe.**
Currently thera are some reflection methods incocation in serilization path, which can be optimized by `java.lang.invoke.MethodHandle`, just like zero-copy constructor in `io.fury.serializer.StringSerializer`

**Describe the solution you'd like**
- Using `java.lang.invoke.MethodHandle` instead of reflection.

**Additional context**
- JDK 17 enabled strong encapsulation by default, creating `java.lang.invoke.MethodHandle` for unexported classes may fail. We need a way to hack up for creating an privileged `MethodLookup`
- #193 using reflection for `readResolve`/`writeReplace` method calls.","{""url"": ""https://api.github.com/repos/apache/fury/issues/194/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/197,https://api.github.com/repos/apache/fury/issues/197,fury,1704253318,197,[Java] support type forward/backward compatibility,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T16:12:34Z,2023-05-11T02:50:01Z,"**Is your feature request related to a problem? Please describe.**
In #181, we implement `ObjectSerializer` for custom object serialization. But many application is more compilciated, the serialization peer and deserialiation peer may have inconsisitent schema, thus different class difinition. Each peer will envolve schema independently.
 
In such cases, the deserialization will failed in `ObjectSerializer`, since it didn't write class fields meta, the deserializtion only work if the class has same meta with serialization peer. We need a way to support skip unexisted fields when deserilization met a field which doesn't exist in this class. And set field to null if it doesn't exist in the serialization data.

**Describe the solution you'd like**
Under the type compatibility mode, Fury divides fields into four types:
- Fields that can be represented by four bytes to indicate the type information: the field type is a final type, and the class ID is less than 63, occupying one byte, while the field name occupies three bytes;
- Fields that can be represented by eight bytes to indicate the type information: the field type is a final type, and the class ID is less than 127, occupying one byte, while the field name occupies seven bytes. Each character is represented by 6 bits, and seven bytes can represent nine characters;
- Other fields that are final types: the field name and the field type are encoded together;
- Other fields that are non-final types: the field name and the field type are encoded separately.

If there are fields with the same name in parent and child classes, the classname is included as part of the field name to be encoded. Then, these fields are sorted in ascending order according to the integer value of the field name encoding. During serialization, the encoded integer value is written first, followed by the specific field data. During deserialization, the current field in the byte stream can be directly judged for its existence in the current type's fields based on the integer size. It may be in front of the first field of the type, among the nonexistent fields, or after the last field of the type with that type. Then, depending on the corresponding case, it is determined whether to serialize or skip serialization. Specific details can be found in the deserialization code below.

This allows avoiding the overhead of deserializing String field names in Hessian and Kryo, as well as the overhead of hash lookup and binary search.

**Describe alternatives you've considered**
The solution proposed in this issue will write class meta every time the object is serialized. If multiple objects of same time are serialized as a whole, the meta will be serialized multiple times, which is unneccessary. 

We can use meta sharing to write meta only once in a serialization for an object graph. And the meta can be encoded to binary, so the actual meta writting will be just a memory copy, which is far more faster

**Additional context**
#180 #181 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/197/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/198,https://api.github.com/repos/apache/fury/issues/198,fury,1704288241,198,[Java] add test util to create struct dynamically,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-10T16:37:45Z,2023-05-10T16:44:37Z,"**Is your feature request related to a problem? Please describe.**
Fury need many test-struct classes to validate the correctness. 

Creating those class manually is verbos,  error-prone and inefficient.

**Describe the solution you'd like**
Creating struct class by `javax.tools.JavaCompiler`

**Describe alternatives you've considered**
JaninoCompiler is faster, but doesn't support generics, which is necessary for Collection/Map fields tests.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/198/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/202,https://api.github.com/repos/apache/fury/issues/202,fury,1704940768,202,[Java] Auto meta shared mode for type forward/backward compatibility ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-11T02:31:34Z,2023-05-11T02:31:34Z,"**Is your feature request related to a problem? Please describe.**
We supported type forward/backward compatibility in #197, but as the issue said, the solution proposed in that issue will write class meta every time the object is serialized. If multiple objects of same time are serialized as a whole, the meta will be serialized multiple times, which is unneccessary. 

We can use meta sharing to write meta only once in a serialization for an object graph. And the meta can be encoded to binary, so the actual meta writting will be just a memory copy, which is far more faster.

The issue #80 proposed meta share across serialization, which need the rpc or users to maintain the `MetaContext`, which is inconvinient for users. 

**Describe the solution you'd like**
We can  support auto meta sharing to reduce meta cost in every serialization. This will ensure multiple objects of same type write meta only once for space saving, and got better pperformance by memory copy meta binary.

Currently meta encoding is not compressed, this will be discussed in another issue.

**Additional context**
#80  #197","{""url"": ""https://api.github.com/repos/apache/fury/issues/202/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/203,https://api.github.com/repos/apache/fury/issues/203,fury,1704946422,203,[Java] Meta compression,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-11T02:35:04Z,2024-05-29T17:11:33Z,"## Is your feature request related to a problem? Please describe.
Meta share mode can reduce meta cost in every serialization. This will ensure multiple objects of same type write meta only once for space saving, and got better pperformance by memory copy meta binary.

But currently meta encoding is not compressed, the space cost will be larger for auto meta share mode.

For normal  meta share mode, the meta will be sent only once for every peer, the space cost can be ignored. But for auto meta share, the meta will be sent every time serialziation happens.

##  Meta Compression Proposal

> This mode will forbid streaming writing since it needs to look back for update the offset after the whole object graph
> writing and mete collecting is finished.
> We plan to streamline meta writing in the future

### Schema consistent

Class will be encoded as an enumerated string by full class name.

### Schema evolution

Class meta format:

```
| meta header: hash + num classes | current class meta | parent class meta | ... |
```

#### Meta header

Meta header is a 64 bits number value encoded in little endian order.

- Lowest 4 digits `0b0000~0b1110` are used to record num classes. `0b1111` is preserved to indicate that Fury need to
  read more bytes for length using Fury unsigned int encoding. If current class doesn't has parent class, or parent
  class doesn't have fields to serialize, or we're in a context which serialize fields of current class
  only( `ObjectStreamSerializer#SlotInfo` is an example), num classes will be 1.
- Other 60 bits is used to store murmur hash of `flags + all layers class meta`.

#### Single layer class meta

```
| enumerated class name string | unsigned int: num fields | field info: type info + field name | next field info | ... |
```

Type info of custom type field will be written as an one-byte flag instead of inline its meta, because the field value
may be null, and Fury can reduce this field type meta writing if object of this type is serialized to in current object
graph.

Field order are left as implementation details, which is not exposed to specification, the deserialization need to
resort fields based on Fury field comparator. In this way, fury can compute statistics for field names or types and
using a more compact encoding.

Class name will be written as an unsigned id if the class is registered.

Field name will be written as an unsigned id if the field is marked with an ID by an annotation.


## Additional context
#80 #202 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/203,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5g3i3f,fury,1625173471,203,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-07T10:03:51Z,2023-07-07T10:03:51Z,@bigteech JavaScript implementation can start cross-language schema compatibilty  work after this issue is finished.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5g3i3f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/204,https://api.github.com/repos/apache/fury/issues/204,fury,1707335439,204,[Java] optimize subclass serialization for jdk inter containers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-12T10:01:25Z,2023-05-12T10:02:25Z,"**Is your feature request related to a problem? Please describe.**
Serializers for subclasses of common JDK container types. Subclasses of ArrayList/HashMap/LinkedHashMap/java.util.TreeMap/etc have `writeObject`/`readObject` defined, which will use JDK compatible serializers, thus inefficient. 

**Describe the solution you'd like**
Serializers int this class will optimize the serialization for those cases by serializing super classes part separately using existing JIT/interpreter-mode serializers.","{""url"": ""https://api.github.com/repos/apache/fury/issues/204/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/206,https://api.github.com/repos/apache/fury/issues/206,fury,1708471959,206,[Java] genereted classes not deleted,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-13T06:50:10Z,2023-05-13T06:50:49Z,"**Describe the bug**
Class files created by `io.fury.serializer.CompatibleSerializerTest#loadClass` are not deleted.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/e3e608ea-c494-4e64-99f3-f54b3fd0df40)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/206/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/208,https://api.github.com/repos/apache/fury/issues/208,fury,1708476443,208,[Java] Default container java serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-13T07:01:43Z,2023-05-13T07:07:58Z,"**Is your feature request related to a problem? Please describe.**
In #147 we implement basic collection serialization which iterate the collection and write all elements.
But some collection implementation may use generator as the implementation. In such cases, serialization will incur much cost which is unnecessary.

In #205 , we already optimized common JDK container subclass serialization. So we can serialize other container in a generic way field by field.","{""url"": ""https://api.github.com/repos/apache/fury/issues/208/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/211,https://api.github.com/repos/apache/fury/issues/211,fury,1708493724,211,[Java] Optimize jdk compatible container serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-13T07:17:10Z,2023-05-13T07:30:24Z,"**Is your feature request related to a problem? Please describe.**
Currently if a collection implements JDK `readObject/writeObject/readResolve/writeReplace`, and if there is not prediefined serializerfor this class, and it's not covered by `ChildContainerSerializer`, fury will forward it to JDK serialization, which is slow and insecure.

**Describe the solution you'd like**
Implement a new serializer, forward it to fury `ReplaceResolveSerializer`/`DefaultJDKStreamSerializer`","{""url"": ""https://api.github.com/repos/apache/fury/issues/211/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/214,https://api.github.com/repos/apache/fury/issues/214,fury,1708842672,214,[JavaScript] ,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-05-14T07:09:52Z,2023-05-14T07:19:06Z,"**Is your feature request related to a problem? Please describe.**
there are so many javascript apps.  fury needs a implementation on javascript. 

**Describe the solution you'd like**
write a javascript implementation by pure javascript. 
can running on browser and nodejs. 


","{""url"": ""https://api.github.com/repos/apache/fury/issues/214/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/216,https://api.github.com/repos/apache/fury/issues/216,fury,1708867247,216,[JavaScript] Remove Nodejs lib,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-05-14T08:49:25Z,2023-05-14T08:51:53Z,"**Is your feature request related to a problem? Please describe.**
replace nodejs lib by ecma lib. should write by pure javascript that cross browser and nodejs

**Describe the solution you'd like**
replace Buffer by Dataview
replace stringSlice by TextEncoder/TextDecoder

**Additional context**
1. string generate maybe performance drop, so we should enhancement the performance next time
","{""url"": ""https://api.github.com/repos/apache/fury/issues/216/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/218,https://api.github.com/repos/apache/fury/issues/218,fury,1708875198,218,[JavaScript] Test  ,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-05-14T09:18:11Z,2023-05-14T10:13:26Z,"**Is your feature request related to a problem? Please describe.**
Add javascript test
","{""url"": ""https://api.github.com/repos/apache/fury/issues/218/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/220,https://api.github.com/repos/apache/fury/issues/220,fury,1708971477,220,[JavaScript] ,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-05-14T14:51:38Z,2023-05-14T14:55:50Z,"**Is your feature request related to a problem? Please describe.**
change the package.json entry file

**Describe the solution you'd like**
change from output/index.js to dist/index.js

","{""url"": ""https://api.github.com/repos/apache/fury/issues/220/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/224,https://api.github.com/repos/apache/fury/issues/224,fury,1709408434,224,[Java] fury-native JDK compatible serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T06:32:31Z,2023-05-15T06:34:42Z,"## Is your feature request related to a problem? Please describe.
Currently when a class has `writeObject/readObject/readObjectNoData` method defined, fury will use JDK to serialize those objects and objects contained in this subgraph, which is slow and insecure.
- JDK serialization will escape from Fury blacklist check
- If the contained objects is serialized by fury already, JDK will serialize it again, the deserialized object won't be the expected. The worse cast is that there will be recusion error if the contained objects has reference to outer objects.
- The jdk serialization is very slow, and take much more spaces.

## Describe the solution you'd like
Implement a new serializer in fury, compatible all JDK API, ensure all methods defined in the user class are executed by fury.

`readResolve`/`writeReplace` has been handled in #193 

### JDK serialization ratiaonal
JDK serialization is done using ObjectOutputStream and ObjectInputStream. This framework allows users[Externalizable](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writeexternal-method)/[writeObject](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writeobject-method)/[readObject](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readobject-method)/[readObjectNoData](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readobjectnodata-method)/[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)/[readResolve](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readresolve-method)Methods such as custom serialization behavior. When the object to be serialized does not contain these methods, ObjectOutputStream calls the internal defaultWriteObject to serialize all fields and type information of the type hierarchy. During deserialization, ObjectInputStream is used to read each type information and corresponding field values of the type hierarchy and fill the entire object. If you include custom serialization methods, you need to go to a separate execution process.

#### Serialization overall process
When the object is defined[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)Method, serialization calls the method first, and then uses the object reference returned by the method to replace the reference of the record before referencing the table. If the returned object type remains unchanged, the returned object type still exists.[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)METHOD. This method is ignored and enters the normal writeObject/writeExternal process. If the return type changes, the loop call[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)The method repeats the preceding process.

When the returned object no longer contains[writeReplace](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writereplace-method)Method, this time the field data serialization process is entered, if the object is implemented[Externalizable](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writeexternal-method)Interface, writeExternal is called for serialization. Otherwise, each type and all field data belonging to the current type are serialized in sequence starting from the first parent class in the object hierarchy that defines Serializable.

When a type of the object hierarchy is defined[writeObject](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/output.html#the-writeobject-method)Method, for serialization of fields corresponding to this type, the writeObject method defined by this type is called. writeObject method can call the ObjectOutputStream of the defaultWriteObject to complete serialization of the default field, or completely handwritten serialization logic.

If the fields of different JDK versions are inconsistent and need to be compatible, you need to call the putFields method to obtain the PutField object, which is used to set the field data that exists only in some JDK versions but does not exist in the current JDK Version, and then call writeFields to write the field data.

For example, ThreadLocalRandom uses putFields to customize serialization logic:
```java
    private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException {

        java.io.ObjectOutputStream.PutField fields = s.putFields();
        fields.put(""rnd"", U.getLong(Thread.currentThread(), SEED));
        fields.put(""initialized"", true);
        s.writeFields();
    }
```

![image](https://github.com/alipay/fury/assets/12445254/9c3040f9-edec-4188-873d-0cacb0f2e657)
#### Deserialization process
Deserialization reads the object type first, and then queries the parameterless constructor of the type to create the object. If no parameterless constructor exists, use ReflectionFactory#newConstructorForSerialization(java.lang.Class <?>) traverse the type hierarchy upward until the unparametric constructor of the first non-Serializable parent class is obtained (this process is cached to avoid repeated searches).

Then, create an object based on the constructor and put the object into the reference table to avoid that the object cannot be found by circular reference.

Next, deserialize each type and corresponding field data from the first Serializable parent class and fill it into the objects previously created by the constructor. If a deserialized type does not exist, the object hierarchy changes. A new parent class is added to the deserialized object. If the type is defined[readObjectNoData](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readobjectnodata-method)Method, this method is called to initialize the field status, otherwise this part of the field will be in the default state.

If the parent class type does not define readObject, the defaultReadObject is called to read the values of each non-transient non-static field in turn and fill them in the object. If a readObject method is defined, the method is called to deserialize the data of this type.

readObject method can call defaultReadObject to deserialize the default field values, then execute other custom logic, or completely write deserialization logic.

If the fields of different JDK versions are inconsistent and need to be compatible, you need to call the readFields method to obtain the GetField object. The object may contain field data that is not available in the current Class version. In this case, you can directly ignore it. Other fields can be queried from GetField and set to the object. Note that defaultReadObject and readFields can only call one.

In some cases, the deserialization of the parent class field depends on the deserialization status of the subclass field. Because the parent class field is deserialized first, the deserialization status of the subclass cannot be obtained at this time, so JDK provides[registerValidation](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html)The callback is executed after the entire object is deserialized. In this case, additional operations can be performed to restore the state of the object.

After the object is serialized, check whether the type of the object is defined.[readResolve](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readresolve-method)METHOD. If the method is defined, the method is called to return an alternative Object. If the return type changes, the method is called in a loop.[readResolve](https://docs.oracle.com/en/java/javase/18/docs/specs/serialization/input.html#the-readresolve-method)The method repeats the preceding process.

After readResolve is executed, the entire object is deserialized.

### Fury serialization
#### Serialization execution
- Write all Serializable classes
- Traverse the object class hierarchy and serialize field data of each type in turn. Serializing data of each type is divided into the following sections:
- If no writeObject method is defined for the type of the current object, slotsSerializer (JITCompatibleSerializer) is called to serialize all fields of the current type.
- If the type of the previous object defines writeObject methods, the context of the previous serialization is cached, then the writeObject method is called, and the FuryObjectOutputStream implemented by Fury is passed in.
- In FuryObjectOutputStream, special processing is also performed for putFields/writeFields/defaultWriteObject. putFields/writeFields converts the object into an array recognized by CompatibleSerializer, and defaultWriteObject directly calls slotsSerializer (JITCompatibleSerializer) to serialize all fields of the current type.

#### Deserialization execution
- Create an object instance based on the constructor.
- Writes an object instance to a reference table.
- Read all Serializable classes in the object hierarchy.
- The class is read from the data in sequence and compared with the class of the current type hierarchy. If the type is inconsistent, it indicates that the current type hierarchy has changed and a new parent class has been introduced. If the type defines readObjectNoData, the method is called for initialization, and then the type hierarchy is traversed upward until the same type is found.
- Deserialize all field values of this type and set them to object fields.
- If the object does not define readObject methods, slotsSerializer (JITCompatibleSerializer) is called for deserialization.
- If readObject method is defined, the readObject method of the object is called and the FuryObjectInputStream implemented by Fury is passed in.
- In FuryObjectInputStream, special processing is also performed for readFields/defaultReadObject. readFields converts an object into a recognizable CompatibleSerializer by using GetField, and defaultReadObject directly calls slotsSerializer (JITCompatibleSerializer) to deserialize all fields of the current type.
- If the user registers readObject callbacks through registerValidation during ObjectInputValidation, the callbacks are executed in sequence according to the priority before the object is returned.
- At this point, deserialization is complete.
## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/227,https://api.github.com/repos/apache/fury/issues/227,fury,1709590112,227,[Java] Data structure for class meta representation ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T08:29:07Z,2023-05-15T08:30:03Z,"## Is your feature request related to a problem? Please describe.
Extract and enscapture class meta, so we can support meta shar, auto share and compression  in later PR


## Additional context
#80 #202 #203 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/227/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/231,https://api.github.com/repos/apache/fury/issues/231,fury,1709846724,231,[JavaScript] Add JavaScript CI,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T10:59:32Z,2023-05-15T10:59:51Z,"## Is your feature request related to a problem? Please describe.
Add JavaScript CI","{""url"": ""https://api.github.com/repos/apache/fury/issues/231/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/233,https://api.github.com/repos/apache/fury/issues/233,fury,1709940855,233,[Java][Security] Foribid vulnerable classes serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T11:56:46Z,2023-05-15T11:59:12Z,"## Is your feature request related to a problem? Please describe.
Open dynamic deserialization is not safe in nature. When an object is being deserialized, if its `hashCode`/`equals`/`constructor` method has malicious code, there will be remote code execution (RCE) vulnerability.
 
Fury try to provide best security as we can.  By default, fury secure mode is enabled. When secure mode is enabled, object of unknown type won't be allowed for deserialization. But it comes at the cost of usability, every class must be registed aead, which is not easy to use, and sometimes is not possible.

Not every environment is so vulnerable. For such environment, secure mode can be disabled. In such cases, we should ensure known insecure classes are forbidden for deserialization, such as `org.apache.commons.dbcp.datasources.SharedPoolDataSource` and `javax.naming.ldap.Rdn`


## Describe the solution you'd like
Add a blacklist to filter common insecure classes.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/233/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/235,https://api.github.com/repos/apache/fury/issues/235,fury,1709998200,235,[Java] JIT serializer for object graph serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T12:27:50Z,2023-05-16T08:44:07Z,"## Is your feature request related to a problem? Please describe.
We've implemented feature-complete serialization for object graph, but it's interpreter mode, which will incur:
- extra memory access for query serializer
- extra memory access for query classinfo
- extra memory access for query field offset
- virtual method invocation.
- conditional branching.
- hash lookup.

Since class has field has types, we can use those type information to generate serializer on the flight to speed the serialization, reduce above cost.

## Describe the solution you'd like
Use #28 to create serializer on the flight to speedup the serialization
- [x] #236
- [x] #243
- [x] #246
- [x] #237
- [x] #238
- [x] #239

","{""url"": ""https://api.github.com/repos/apache/fury/issues/235/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/236,https://api.github.com/repos/apache/fury/issues/236,fury,1710002127,236,generate accessor class to speed access of object fields.,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T12:30:27Z,2023-05-16T06:32:18Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/236/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/237,https://api.github.com/repos/apache/fury/issues/237,fury,1710002243,237,[Java] generate serializer for object serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T12:30:32Z,2023-05-16T07:36:49Z,Generate jit serializer for custom class by using #28 and #249 assuming peers has same class schema. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/238,https://api.github.com/repos/apache/fury/issues/238,fury,1710002344,238,[Java] geneate serializer for compatible serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T12:30:36Z,2023-05-16T08:26:41Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/239,https://api.github.com/repos/apache/fury/issues/239,fury,1710002496,239,[Java] geneate serializer for meta shared serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-15T12:30:42Z,2023-05-16T08:43:52Z,"## Is your feature request related to a problem? Please describe.
In #80 we implemented meta shared serialization, but the implementation is based on inpterpreter mode, which has extra cost.

## Describe the solution you'd like
Implement a jit acceleted serializer builder to create jit serializer on the fly.

The meta-shared compatible deserializer builder will be based on ClassDef. the builder will compare fields between ClassDef and class fields, then create serializer to read and set/skip corresponding fields to support type forward/backward compatibility. 

With meta context share enabled and compatible mode, the ObjectCodecBuilder will take all non-inner final types as non-final, so that fury can write class definition when write class info for those types

Serializer are forward to ObjectCodecBuilder for now. We can consolidate fields between peers to create better serializers to serialize common fields between peers for efficiency.

## Additional context


","{""url"": ""https://api.github.com/repos/apache/fury/issues/239/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/243,https://api.github.com/repos/apache/fury/issues/243,fury,1711178925,243,[Java] Codec builder abstraction for object graph and row format,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T03:54:41Z,2023-05-16T03:55:50Z,"## Is your feature request related to a problem? Please describe.
The codegen for object graph and row format are similar, the common part can be abstracted as an separate class

## Additional context
#235","{""url"": ""https://api.github.com/repos/apache/fury/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/245,https://api.github.com/repos/apache/fury/issues/245,fury,1711337395,245,`CodecBuilder` for object graph and row format,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T06:36:52Z,2023-05-16T06:37:31Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/246,https://api.github.com/repos/apache/fury/issues/246,fury,1711337486,246,"[Java] `BaseObjectCodecBuilder` for object serialization, compatible object serialization and meta shared object serialization",chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T06:36:57Z,2023-05-16T07:01:06Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/246/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/247,https://api.github.com/repos/apache/fury/issues/247,fury,1711358215,247,[Java][Security] check class implements jdk Serializable,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T06:54:05Z,2023-05-16T06:56:43Z,"## Is your feature request related to a problem? Please describe.
Jdk has many resource class such as `Thread`/`Runtime`, the objects of such classes should never be serialized.

## Describe the solution you'd like
Check whether class implement `java.io.Serializable` before creating serializers.

 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/247/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/251,https://api.github.com/repos/apache/fury/issues/251,fury,1711472044,251,[Java] meta shared classdef dispatch error when jit enabled,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T08:02:33Z,2023-05-16T08:03:50Z,"**Describe the bug**
When JIT enabled, meta shared classdef will dispatch to   
```java
       classDef =
            classDefMap.computeIfAbsent(
                classInfo.cls,
                cls ->
                    ClassDef.buildClassDef(
                        this,
                        cls,
                        new ArrayList<>(),
                        ImmutableMap.of(META_SHARE_FIELDS_INFO_KEY, ""false"")));
      }
```
instead of
```java
 classDef =
            classDefMap.computeIfAbsent(classInfo.cls, cls -> ClassDef.buildClassDef(cls, fury));
```
which cause error in https://github.com/alipay/fury/actions/runs/4989164302/jobs/8932720728
**To Reproduce**
mvn test -Dtest=io.fury.serializer.MetaSharedCompatibleTest#testDuplicateFields


**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/5ca28686-cda9-40bf-a146-9ba8f988d17b)","{""url"": ""https://api.github.com/repos/apache/fury/issues/251/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/256,https://api.github.com/repos/apache/fury/issues/256,fury,1711653118,256,[Java] async multithreaded compilation for jit serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T09:44:12Z,2023-05-18T05:55:45Z,"## Is your feature request related to a problem? Please describe.
We implemented jit serialization for object graph in #235 . But the compilation is in sync way, which will cause latency peek when the object is being serialized for the first time. This will affect SLA for online service.

## Describe the solution you'd like
Compile jit serializer in an async multithreaded way, using interpreter serializer before compilation finish. Switch to jit serializers after complation finished.
-  [x] #257
- [x] #258
## Additional context
#235 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/256/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/257,https://api.github.com/repos/apache/fury/issues/257,fury,1711653265,257,[Java] JIT compilation context for manage thread safety and avoid dupliate compilation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T09:44:17Z,2023-05-16T09:55:10Z,"## Is your feature request related to a problem? Please describe.
The async multithread compilation will introduce thread safety, since fury serialization will update `ClassResolver`.
compilation threads and serialization thread must ensure updates on `ClassResolver` are thread safe.

## Describe the solution you'd like
Implement a jit context which use a lock to ensure state safety:
- Thread safety
- Compilation nofity and callback

The lock should be  coarse-grained enough to avoid it introduce too much cost for serialization.

## Additional context
#256","{""url"": ""https://api.github.com/repos/apache/fury/issues/257/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/258,https://api.github.com/repos/apache/fury/issues/258,fury,1711660914,258,Compile jit serializers in an async multithreaded way,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T09:48:54Z,2023-05-18T05:55:45Z,"## Is your feature request related to a problem? Please describe.
Compile jit serializers in an async multithreaded way for:
- JITObjectSerializer
- JITCompatibleSerializer
- JITMetaSharedSerializer
","{""url"": ""https://api.github.com/repos/apache/fury/issues/258/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/260,https://api.github.com/repos/apache/fury/issues/260,fury,1711759126,260,[Java] `javaFury` thread safety in tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-16T10:46:56Z,2023-05-16T10:47:20Z,"
**Describe the bug + Expected behavior**
`javaFury` in `io.fury.FuryTestBase` is not thread safe when multi-thread test enables
","{""url"": ""https://api.github.com/repos/apache/fury/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/262,https://api.github.com/repos/apache/fury/issues/262,fury,1713039023,262,[Java] mvn test can't run on submodule dir,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-17T03:30:37Z,2023-05-17T03:31:29Z,"**Describe the bug + Expected behavior**
mvn test can't run on submodule dir. license plugin can't find header file



**To Reproduce**
```bash
cd java
mvn install -DskipTests
cd fury-core
mvn test
```

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/85d11490-a2b1-48fd-a8c6-d064dd0857d6)

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/265,https://api.github.com/repos/apache/fury/issues/265,fury,1713625563,265,[Java] Guava ImmutableList serialization optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-17T10:48:48Z,2023-05-17T10:49:11Z,"## Is your feature request related to a problem? Please describe.
Guava ImmutableList is common, but the serialization implements writeReplace, which will be slow.

## Describe the solution you'd like
A special serializer for Guava ImmutableList
","{""url"": ""https://api.github.com/repos/apache/fury/issues/265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/267,https://api.github.com/repos/apache/fury/issues/267,fury,1713638725,267,[Java] optimize gauva immutablemap serialization ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-17T10:57:33Z,2023-05-17T10:57:57Z,"## Is your feature request related to a problem? Please describe.
- Guava ImmutableMap is common, but the serialization implements writeReplace, which will be slow.
- If not handle specially, it can be cross-language serialized 

## Describe the solution you'd like
A special serializer for Guava ImmutableMap
","{""url"": ""https://api.github.com/repos/apache/fury/issues/267/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/270,https://api.github.com/repos/apache/fury/issues/270,fury,1715017979,270,[Java] URL serialization optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-18T05:41:29Z,2023-05-18T05:41:45Z,"## Is your feature request related to a problem? Please describe.
URL serialization is common in RPC, which deserve a specific serializer.

URL serialization may be not safe:

```java

public class FuryDemo {
    public static Object urlObject(final String url) throws Exception {

        //Avoid DNS resolution during payload creation
        //Since the field <code>java.net.URL.handler</code> is transient, it will not be part of the serialized payload.
        URLStreamHandler handler = new SilentURLStreamHandler();

        HashMap ht = new HashMap(); // HashMap that will contain the URL
        URL u = new URL(null, url, handler); // URL to use as the Key
        ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.

        Reflections.setFieldValue(u, ""hashCode"", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.

        return ht;
    }

    static class SilentURLStreamHandler extends URLStreamHandler {

        protected URLConnection openConnection(URL u) throws IOException {
            return null;
        }

        protected synchronized InetAddress getHostAddress(URL u) {
            return null;
        }
    }

    public static void main(String[] args) throws Exception{
        Fury fury = Fury.builder().withLanguage(Language.JAVA)
              //  .disableSecureMode()  
                .build();
        byte[] bytes = fury.serialize(urlObject(""http://fury_deserial.cx.t4c.n.xalipay.cc""));

        Fury fury_deserial = Fury.builder().withLanguage(Language.JAVA).build();
        fury_deserial.deserialize(bytes);
    }
}

```

This may cause dnslog attack.

## Describe the solution you'd like

Provided URLSerializer, but doesn't add it to defautl serializers list, the users can register this Serializer if they can ensure it's safe
","{""url"": ""https://api.github.com/repos/apache/fury/issues/270/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/272,https://api.github.com/repos/apache/fury/issues/272,fury,1715038502,272,[Java] support java deserialization by passing type,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-18T05:58:55Z,2023-05-18T06:14:23Z,"## Is your feature request related to a problem? Please describe.
Sometimes users knows the type they are deserializing. In such cases, serializing class info won't be necessary

## Describe the solution you'd like
Support  java deserialization by passing type
","{""url"": ""https://api.github.com/repos/apache/fury/issues/272/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/273,https://api.github.com/repos/apache/fury/issues/273,fury,1715053926,273,[Java] support serialize/deserialize to/from jdk Stream,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-18T06:10:21Z,2023-05-18T06:13:59Z,"## Is your feature request related to a problem? Please describe.
Java application uses `InputStream`/`OutputStream` extensively,  fury should provided support for those interfaces too.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/273/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/275,https://api.github.com/repos/apache/fury/issues/275,fury,1715069983,275,[Java] Update classloader for fury ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-18T06:24:57Z,2023-05-18T06:28:25Z,"## Is your feature request related to a problem? Please describe.
Fury is binded with an immutable serializer, but in complex application, the classloader may be switched dynamically.

In such cases, fury can't switch to new classloader, and deserialization may fail.

## Describe the solution you'd like
Using a map to bind classloadet with fury.

## Optional solution
Support change classloader in fury.
This will make JIT classloader management complex.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/275/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/277,https://api.github.com/repos/apache/fury/issues/277,fury,1715092469,277,[Java] support forward serialization to other libraries,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-18T06:35:15Z,2023-05-19T02:16:01Z,"## Is your feature request related to a problem? Please describe.
There are so many java serialization libraries, upgrade to fury isn't easy. We should provide a more convinient way to upgrade.

## Describe the solution you'd like
If we abstract all serialization interface which can be implemented by common serialization libraries, then the users can just switch to new serialization libraries by one line code change or just an environment variables.

In such way, upgrade to fury will be much more easy.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/277/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/279,https://api.github.com/repos/apache/fury/issues/279,fury,1716520297,279,[Java] thread safe fury wrapper by thread local,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T02:37:13Z,2023-05-19T02:45:38Z,"## Is your feature request related to a problem? Please describe.
Fury is not thread-safe by design to avoid lock cost if thread safety is not needed. But thread safety is a common requirement for most applications.  In such cases, we need a new thread safe serializer implementation.

## Describe the solution you'd like
Since every Fury can be used in a different thread, it's thread safe if it's only used in a thread when serializing/deserializing. We can use thread local to bind Fury to every thread.

And there has another benifit: ThreadLocal is lock-free, the performance is better.

A thread-safe Fury ObjectPool is also a feasible solution, it can be implemented in a later PR.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/280,https://api.github.com/repos/apache/fury/issues/280,fury,1716543770,280,[Java] guava collections serialization optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-19T03:15:32Z,2023-05-19T03:15:32Z,"## Is your feature request related to a problem? Please describe.
guava collections customized `writeReplace`/`writeObject`/`readResolve`/`readObject`, serialization is inefficient

## Describe the solution you'd like
A new group of serializers will have better performance. 

But be careful since guava collections implementation are not public, do not introduce compatibility issues

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/280/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/281,https://api.github.com/repos/apache/fury/issues/281,fury,1716703221,281,[Java] Sublist serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:29:56Z,2024-09-26T13:55:40Z,"## Is your feature request related to a problem? Please describe.
`java.util.List#subList` will return a slice of original lsit in a zero-copy way ,the returned list hold a reference of original list, and store offset and size to specify which elements this sublist refer to.

Depending on which List is being using, sublist of different type `java.util.ArrayList.SubList`/`java.util.RandomAccessSubList`/`java.util.SubList` will be returned.

Those list are common in java application, serialization support would be great for the users.

1.  We can serialize sublist element by element, but if the original list are in the same object graph, the sliced data will be serialized twice.
2. We can serialize sublist by seserialize inner list, offset and size, but if the original list are not in the same object graph, and slice data is only a small slice of original list, there will be many unnecessary data being serialized.
3. Cross-language for sublist is tricky, it's not easy to restre original sublist with same reference to outer list.

## Describe the solution you'd like
- We can provide options for users to specify which method metioned above to use for serializing sublist 
- Or use `SerializationContext` to stash original list,  register a callback to be called in `SerializationContext`.reset, if original list doesn't exist in reference resolver, then serialize by method 1, otherwise serialize by method 2

","{""url"": ""https://api.github.com/repos/apache/fury/issues/281/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/283,https://api.github.com/repos/apache/fury/issues/283,fury,1716707506,283,[Java] add tests for zero-copy,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:33:24Z,2023-05-19T06:33:45Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/283/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/285,https://api.github.com/repos/apache/fury/issues/285,fury,1716710354,285,[Java] Profiling fury init,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:35:40Z,2023-05-19T06:36:00Z,"## Is your feature request related to a problem? Please describe.
Profiling fury init for future init speed optimization 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/285/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/287,https://api.github.com/repos/apache/fury/issues/287,fury,1716713763,287,[Java] add complex cyclic tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:38:20Z,2023-05-19T06:38:43Z,"## Is your feature request related to a problem? Please describe.
cyclic reference is tricky, we need more tests to ensure correctess
","{""url"": ""https://api.github.com/repos/apache/fury/issues/287/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/289,https://api.github.com/repos/apache/fury/issues/289,fury,1716723690,289,[Java] enable testArrayStructZeroCopy,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:45:23Z,2023-05-19T06:45:55Z,"## Is your feature request related to a problem? Please describe.
`testArrayStructZeroCopy` is disabled before since we don't support struct serialization. It can be enabled now
","{""url"": ""https://api.github.com/repos/apache/fury/issues/289/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/291,https://api.github.com/repos/apache/fury/issues/291,fury,1716743301,291,[Java] complex tests for collections,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T06:58:28Z,2023-05-19T06:59:13Z,"## Is your feature request related to a problem? Please describe.
Fury did lots of optimization for collection in jit and interperter mode. We need more complex tests for collections to ensure corectness.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/291/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/293,https://api.github.com/repos/apache/fury/issues/293,fury,1716749264,293,[Java] complex tests for map,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:03:17Z,2023-05-19T07:04:07Z,"## Is your feature request related to a problem? Please describe.

Fury did lots of optimization for collection in jit and interperter mode. We need more complex tests for collections to ensure corectness.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/293/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/296,https://api.github.com/repos/apache/fury/issues/296,fury,1716757615,296,[Java] optimize time reference,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:10:04Z,2023-05-19T07:11:13Z,"## Is your feature request related to a problem? Please describe.
Time objects is common in serialization and those objects are immutable and small, tracking reference for those objects are unnecessary.

## Describe the solution you'd like
Provide an option to support disable reference tracking
","{""url"": ""https://api.github.com/repos/apache/fury/issues/296/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/298,https://api.github.com/repos/apache/fury/issues/298,fury,1716765244,298,[Java] tests for unsafe accessor,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:16:45Z,2023-05-19T07:17:12Z,"## Is your feature request related to a problem? Please describe.
Fury use unsafe to get/set fields it the fields are private, but there are no tests .

## Describe the solution you'd like
Add tests for unsafe to avoid crash
","{""url"": ""https://api.github.com/repos/apache/fury/issues/298/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/300,https://api.github.com/repos/apache/fury/issues/300,fury,1716768265,300,[Java] add tests for SerializerFactory,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:19:22Z,2023-05-19T07:19:50Z,"## Is your feature request related to a problem? Please describe.
fury support set SerializerFactory to customize serializer dispatch, but there are no tests for such features.","{""url"": ""https://api.github.com/repos/apache/fury/issues/300/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/302,https://api.github.com/repos/apache/fury/issues/302,fury,1716771115,302,[Java] add duplcate fields test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:21:48Z,2023-05-19T07:23:22Z,"## Is your feature request related to a problem? Please describe.
duplcate fields in class hierachy serialization is tricky, hessian just does't support it for simplicity. we should add more tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/302/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/304,https://api.github.com/repos/apache/fury/issues/304,fury,1716777850,304,[Java] protocol interoperability tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:27:49Z,2023-05-19T07:28:34Z,"## Is your feature request related to a problem? Please describe.
Fury implement object serialization by jit and interpreter way twice.

With our async compilation in #256 , the binary serialized by interpreter serializer may be deserialized by jit serializer.

The consistency between those serializers are very important.

## Describe the solution you'd like
Add many tests for protocol interoperability 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/304/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/306,https://api.github.com/repos/apache/fury/issues/306,fury,1716791520,306,[Java] Lazy HashMap deserialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T07:39:28Z,2023-05-19T07:40:25Z,"## Is your feature request related to a problem? Please describe.
HashMap deserialization, all kv entry need to be inserted into the hash table, which involves a large number of operations on red and black tree rebalance. If the hashmap is large, a large number of red and black tree rebalance overhead and key hashCode/equals method call overhead will occur, reducing deserialization efficiency. 

In actual business scenarios, sometimes data is only passed through between upstream and downstream services, and the deserialized object graph is not completely read and sent to new upstream and downstream services. In this case, hashmap reconstruction is unnecessary overhead. 

Based on this, we can develop a lazy hashmap to rebuild the real hashmap on demand, so that hashmap do not need to rebuild the map before it is actually accessed. 


## Describe the solution you'd like
Implement a new Map implementation that holds all map kv entry and reconstructs the original kv entry list based on the hashmap when reading and writing the map for the first time. 
- Serialization: Keep the hashmap the same protocol and traverse the kv entry list to write to the buffer. 
- Deserialization: deserialization reads all kv entry list and creates a lazy hashmap. 
- Extensibility: can linkedhashmap be supported at the same time?

## Additional context
Annotate map field to customize deserialization behavior:
```java
class Foo {
  @MapField(deserializer=LazyMapDeserializer.class)
  Map<String, Bar> map;
}
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/306/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/308,https://api.github.com/repos/apache/fury/issues/308,fury,1716831518,308,[Java] support deserialize/skip object of unexisted type,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-19T08:10:46Z,2023-05-19T08:14:52Z,"## Is your feature request related to a problem? Please describe.
Java service caller and callee may involvle independently, a class may existed in caller, but doesn't exist in callee. If one object has a field of such class in caller serialization peer, callee deserialization will fail and throw `ClassNotFoundException` .

We should support deserialize/skip object of unexisted type when compitible mode are enabled.

## Describe the solution you'd like
- If meta shared mode are enabled, deserializing the data into a LazyMap
- If  meta shared mode are disabled, deserializing by using `ComaptibleSerializer` skip features.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/308/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/311,https://api.github.com/repos/apache/fury/issues/311,fury,1718169215,311,[JavaScript] string create performance improvement,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-05-20T13:15:41Z,2023-05-20T13:18:51Z,"## Describe the solution you'd like
use substring create latin1 string. we can reduce the call count of the memcpy.(each latin1 would call Buffer.latin1Slice one time, latin1Slice will break the v8 jit inline and  not friendly of cpu cache)

## Additional context
use the total input buffer to create a big string would use lot of memory. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/311/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/313,https://api.github.com/repos/apache/fury/issues/313,fury,1718321597,313,[C++] String encoding detection by SIMD,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-20T23:50:55Z,2024-07-14T07:11:30Z,"## Is your feature request related to a problem? Please describe.
We've supported string ascii check using jdk8 unsafe superword in #90. But the simd string encoding check is not implemented in c++.

## Describe the solution you'd like
Add simd string encoding check by SIMD by using [simdutf](https://github.com/simdutf/simdutf)


## Additional context
https://github.com/simdjson/simdjson and it's paper https://arxiv.org/pdf/1902.08318.pdf use SIMD to speed up parsing.","{""url"": ""https://api.github.com/repos/apache/fury/issues/313/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/314,https://api.github.com/repos/apache/fury/issues/314,fury,1718340678,314,[Protocol] Multi-language row format support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-21T01:35:01Z,2023-05-21T05:21:13Z,"## Is your feature request related to a problem? Please describe.
Row format is a comon requirement for big data processing system. Althrough columar format such as arrow has many advantages, the streamign system still needs to use row format due to the batch latency introduced in columar batch.

On ther other hand, operations such as hash join are more performant using row foramt in stead of column format.

The systems such as spark/flink/doris/etc.. all implemented the row format in a similar way. The repeated reimplementation is not an easy work, and if the system has multi-language requirements, the row format will need to be reimplemented multiple times. This make the work  more tricky. If those systems want to cooperate with each other, the users will have to write code to convert to each other, which makes the stuff more tricky.

Binary protocol is hard to implement right, the offset management in row format is complex, not to mention implement it in multiple lanuages.

The columar format has been standardized by apache arrow.  But there hasn't been any projects targeting to standardizing row format in a independent. Maybe it's an opportunity for fury to fill up this gap.

Arrow:
<img src=""https://github.com/alipay/fury/assets/12445254/efa4e080-c288-4e36-9d53-ce8af8d4b120""  width=""300"" height=""300""> <img src=""https://github.com/alipay/fury/assets/12445254/a6af68a3-bc27-443b-9f13-00bf90be954c""  width=""300"" height=""300"">

Fury:
 <img src=""https://github.com/alipay/fury/assets/12445254/dc1c4b15-65a9-4517-a8b0-c513410ed0a6""  width=""300"" height=""300""> <img src=""https://github.com/alipay/fury/assets/12445254/2ce4983b-66a1-4ca1-930a-62a60b559d9b""  width=""300"" height=""300"">

Row format can be used for core data structure for high performance distributed big data processing system. It can be used as protocol for cross-language serialization.
The object graph in #180 is a dynamic serialization protocol, which write meta into stream too, the row format is a strong-typed protocol, which the meta are not serialized into the stream, the cost may be small if we don't padding fields whose size is less than 8 bytes.

## Describe the solution you'd like
Spark tungsten is mature row format, its design and implementation can be take as a goog reference.

The fury row format can differs at:
- Use arrow schema to describe meta.
  -  reduce meta definition and implementation
  - Out-of-box meta cross-language serialization 
  - Better arrow interoperability
- String support ascii/utf16/utf8 encoding for fast string encoding and zero-copy.
- Decimal use arrow decimal format.
- Variable-size field can be inline in fixed-size region if small enough.
- Allow skip padding in the future. spark use 8 byte for /bool/byte/short/int/float, which is space wasting
- Support adding fields without breaking compatibility 
  - Backward compatibility is necessary for online service.
- The implementation support java/C++/python/golang/javascript/rust/etc..
","{""url"": ""https://api.github.com/repos/apache/fury/issues/314/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/315,https://api.github.com/repos/apache/fury/issues/315,fury,1718340888,315,[Java] Row format interface,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T01:36:19Z,2023-05-21T01:36:50Z,"## Is your feature request related to a problem? Please describe.
Add Row format interface for java。
## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/315/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/317,https://api.github.com/repos/apache/fury/issues/317,fury,1718341321,317,[Java] Arrow type visitor,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T01:39:18Z,2023-05-21T01:40:48Z,"## Is your feature request related to a problem? Please describe.
Arrow use visitor pattern for data types. A util can be convinient for arrow data type operations in java to avoid to implement visitor methods for unrelated types


## Additional context
#314","{""url"": ""https://api.github.com/repos/apache/fury/issues/317/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/319,https://api.github.com/repos/apache/fury/issues/319,fury,1718346084,319,[Java] infer minBytes for decimal precision,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T02:10:13Z,2023-05-21T02:10:37Z,"## Is your feature request related to a problem? Please describe.
infer minBytes for decimal precision
","{""url"": ""https://api.github.com/repos/apache/fury/issues/319/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/321,https://api.github.com/repos/apache/fury/issues/321,fury,1718347044,321,[Java] pyarrow style arrow data type API,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T02:17:00Z,2023-05-21T02:17:41Z,"## Is your feature request related to a problem? Please describe.
Arrow data type java are not intuitive as pyarrow, which make the usage kind of tedious.

## Describe the solution you'd like
Add pyarrow style API in java.

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/321/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/323,https://api.github.com/repos/apache/fury/issues/323,fury,1718366881,323,[Java] InputStream/OutputStream support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T04:25:38Z,2023-05-21T04:26:12Z,"## Is your feature request related to a problem? Please describe.
Add InputStream/OutputStream support for fury

## Describe the solution you'd like
Forward io operations to fury MemoryBuffer
","{""url"": ""https://api.github.com/repos/apache/fury/issues/323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/325,https://api.github.com/repos/apache/fury/issues/325,fury,1718369381,325,[Java] Infer arrow schema for java bean,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T04:42:17Z,2023-05-21T04:42:38Z,"## Is your feature request related to a problem? Please describe.
Java bean can map to arrow struct and fury row, both use arrow schema to describe data layout.
We should support infer arrow schema for java bean automatically.

## Describe the solution you'd like
Use java reflection and guava TypeToken to infer arrow schema automatically.

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/325/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/327,https://api.github.com/repos/apache/fury/issues/327,fury,1718375237,327,[Java] bitmap operations util,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T05:17:52Z,2023-05-21T05:21:22Z,"## Is your feature request related to a problem? Please describe.
Util will update bitmap frequently, we need an util for bitmap operations,

## Additional context
#314 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/327/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/329,https://api.github.com/repos/apache/fury/issues/329,fury,1718375545,329,[Java] Java row format support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T05:19:51Z,2023-05-21T05:21:27Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/329/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/331,https://api.github.com/repos/apache/fury/issues/331,fury,1718432758,331,[Protocol] binary row-format protocol,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T09:28:26Z,2023-06-05T08:37:05Z,"## Is your feature request related to a problem? Please describe.
Implement binary row-format for fury.

Following graph are the detailed protocol, which is havily inspired by spark tungsten:

![image](https://github.com/alipay/fury/assets/12445254/aaf7cdfe-8579-408f-8270-df92ea615c4b)

The main differences are:
- using fury primitives for memory operations
- using arrow schema
- using arrow decimal format
- using arrow data type visitor pattern for debug field access.

## Describe the solution you'd like
The first version implementation doesn't count for :
- String ascii/unicode16 support
- variable-size data inline
- schema forward-backward compatibility

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/331/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/332,https://api.github.com/repos/apache/fury/issues/332,fury,1718438854,332,[Java] binary row format writer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T09:44:59Z,2023-05-21T09:45:20Z,"## Is your feature request related to a problem? Please describe.
We implemented row format data structure in #330, but didn't provide a way to create `BinaryRow/BinaryMap/BinaryArray` in a stream writing way to minimize memory copy.

## Describe the solution you'd like
Add a group of  writers to write data streamingly, call finish to create `BinaryRow/BinaryMap/BinaryArray`

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/332/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/334,https://api.github.com/repos/apache/fury/issues/334,fury,1718440898,334,[Java] row format getter accessor,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T09:50:46Z,2023-05-21T09:51:22Z,"## Is your feature request related to a problem? Please describe.
Add  row formar getter accessor for access field in a generic but slow way.
The accessor should be used for debug usage only.

## Describe the solution you'd like
Create an arrow type visitor to dispatch access to different getter methods

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/334/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/336,https://api.github.com/repos/apache/fury/issues/336,fury,1718441581,336,[Java] add row format tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-21T09:53:22Z,2023-05-21T09:53:48Z,"## Is your feature request related to a problem? Please describe.
add row format tests


## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/336/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/338,https://api.github.com/repos/apache/fury/issues/338,fury,1721054855,338,[Java] add row format encoder interface,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-23T02:55:04Z,2023-05-23T02:55:30Z,"## Is your feature request related to a problem? Please describe.
add row format encoder interface


## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/338/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/340,https://api.github.com/repos/apache/fury/issues/340,fury,1721069639,340,[Java] Base builder for building jit encoder ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-23T03:08:29Z,2023-05-23T03:09:12Z,"## Is your feature request related to a problem? Please describe.
Base builder support for building jit row/array/map encoder 


## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/340/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/342,https://api.github.com/repos/apache/fury/issues/342,fury,1721091346,342,[Java] jit-based row encoder implementation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-23T03:30:31Z,2023-05-23T03:30:55Z,"## Is your feature request related to a problem? Please describe.
Add  jit-based row encoder implementation

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/347,https://api.github.com/repos/apache/fury/issues/347,fury,1724270297,347,[Java] Add fury channel for java nio,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-24T15:32:24Z,2023-05-24T15:33:19Z,"## Is your feature request related to a problem? Please describe.
Add fury channel for java nio","{""url"": ""https://api.github.com/repos/apache/fury/issues/347/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/348,https://api.github.com/repos/apache/fury/issues/348,fury,1724288545,348,[Java] add mocked io to count bytes,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-24T15:43:05Z,2023-05-24T15:43:33Z,"## Is your feature request related to a problem? Please describe.
In zero-copy, we may need to count data bytes and allocate buffer from shared memory in advance to minimize copy.

## Describe the solution you'd like
Create a mocked OutputStream and WriteableChannel, which only update offsets, but doesn't execute copy, just like `pyarrow.MockedStream`

## Additional context
#85 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/348/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/350,https://api.github.com/repos/apache/fury/issues/350,fury,1724342099,350,[Java] support arrow record_batch serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-24T16:11:15Z,2023-05-24T16:12:16Z,"## Is your feature request related to a problem? Please describe.
support arrow record_batch zero-copy serialization

## Additional context
#85 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/350/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/353,https://api.github.com/repos/apache/fury/issues/353,fury,1725872838,353,[Java] Optimize setDecimal performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T13:50:29Z,2023-05-25T13:58:39Z,"## Is your feature request related to a problem? Please describe.
`setDecimal` will allocate arrwo buffer, which is vert slo:w
![image](https://github.com/alipay/fury/assets/12445254/9426d497-d0aa-4554-b67b-e8530b534868)

## Describe the solution you'd like
Cache decimal buffer by thread local

## Additional context

#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/353/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/355,https://api.github.com/repos/apache/fury/issues/355,fury,1726031376,355,[Java] optimize schema creation perf,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:20:03Z,2023-05-25T15:20:24Z,"## Is your feature request related to a problem? Please describe.
`UnsafeTrait#getStruct` will create Schema every time, which is slow.

## Describe the solution you'd like
Cache schema by create subclass of Field

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/355/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/358,https://api.github.com/repos/apache/fury/issues/358,fury,1726056297,358,[Java] Support convert row to arrow format,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:33:34Z,2023-05-25T15:34:13Z,"## Is your feature request related to a problem? Please describe.
Support convert rows to arrow format.

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/358/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/360,https://api.github.com/repos/apache/fury/issues/360,fury,1726062274,360,[Java] add arrow serializers tests ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:37:23Z,2023-05-25T15:37:45Z,"## Is your feature request related to a problem? Please describe.
add arrow serializers tests 

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/360/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/363,https://api.github.com/repos/apache/fury/issues/363,fury,1726075535,363,[Java] add serialize to buffer tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:46:14Z,2023-05-25T15:47:03Z,"## Is your feature request related to a problem? Please describe.
add serialize to buffer tests

","{""url"": ""https://api.github.com/repos/apache/fury/issues/363/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/365,https://api.github.com/repos/apache/fury/issues/365,fury,1726079158,365,[Java] add basic cross-langauge serialization tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:48:29Z,2023-05-25T15:48:52Z,"## Is your feature request related to a problem? Please describe.
add basic cross-langauge serialization tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/365/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/370,https://api.github.com/repos/apache/fury/issues/370,fury,1726091118,370,[Java] add offheap tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T15:56:19Z,2023-05-25T15:56:38Z,"## Is your feature request related to a problem? Please describe.
add offheap tests

","{""url"": ""https://api.github.com/repos/apache/fury/issues/370/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/372,https://api.github.com/repos/apache/fury/issues/372,fury,1726098734,372,[Java] refine classresovler tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T16:01:05Z,2023-05-25T16:08:25Z,"## Is your feature request related to a problem? Please describe.
 refine classresovler tests

","{""url"": ""https://api.github.com/repos/apache/fury/issues/372/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/374,https://api.github.com/repos/apache/fury/issues/374,fury,1726109618,374,[Java] add private bean tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-25T16:07:58Z,2023-05-25T16:08:18Z,"## Is your feature request related to a problem? Please describe.
add private bean tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/374/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/376,https://api.github.com/repos/apache/fury/issues/376,fury,1726914249,376,[Java] add blocking queue test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:06:41Z,2023-05-26T05:06:57Z,"## Is your feature request related to a problem? Please describe.

add blocking queue test

","{""url"": ""https://api.github.com/repos/apache/fury/issues/376/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/379,https://api.github.com/repos/apache/fury/issues/379,fury,1726916198,379,[Java] add duplicate fields test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:09:14Z,2023-05-26T05:09:30Z,"## Is your feature request related to a problem? Please describe.
add duplicate fields test
","{""url"": ""https://api.github.com/repos/apache/fury/issues/379/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/380,https://api.github.com/repos/apache/fury/issues/380,fury,1726917454,380,[Java] add guava tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:10:52Z,2023-05-26T05:11:25Z,"## Is your feature request related to a problem? Please describe.
add guava tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/380/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/382,https://api.github.com/repos/apache/fury/issues/382,fury,1726928590,382,[Java] add test for jdk serializable check,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:23:30Z,2023-05-26T05:23:51Z,"## Is your feature request related to a problem? Please describe.
add test for jdk serializable check","{""url"": ""https://api.github.com/repos/apache/fury/issues/382/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/384,https://api.github.com/repos/apache/fury/issues/384,fury,1726930310,384,[Java] add secure mode test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:25:37Z,2023-05-26T05:25:53Z,"## Is your feature request related to a problem? Please describe.
add secure mode test","{""url"": ""https://api.github.com/repos/apache/fury/issues/384/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/386,https://api.github.com/repos/apache/fury/issues/386,fury,1726933049,386,[Java] ensure fury doesn't introduce class leak,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:29:08Z,2023-05-26T05:29:23Z,"## Is your feature request related to a problem? Please describe.
Fury generated classes dynamically, which will reference object classes. We need ensure fury doesn't introduce class leak after fury gc.

## Describe the solution you'd like
Generated classes dynamically and let fury serialize it, then clear fury, and check whether raw classes can be gc.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/386/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/388,https://api.github.com/repos/apache/fury/issues/388,fury,1726934305,388,[Java] add tests for ignoring fields,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:31:01Z,2023-05-26T05:31:19Z,"## Is your feature request related to a problem? Please describe.
add tests for ignoring fields
","{""url"": ""https://api.github.com/repos/apache/fury/issues/388/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/390,https://api.github.com/repos/apache/fury/issues/390,fury,1726935682,390,[Java] add thread to blacklist,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T05:33:02Z,2023-05-26T05:33:21Z,"## Is your feature request related to a problem? Please describe.
add thread to blacklist
","{""url"": ""https://api.github.com/repos/apache/fury/issues/390/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/392,https://api.github.com/repos/apache/fury/issues/392,fury,1727051580,392,[Java] add java test suite,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T07:23:44Z,2023-05-26T07:24:49Z,"## Is your feature request related to a problem? Please describe.
Fury write many tests to ensure the correctness of serialization, but there may be still some corner case which are not covered.

Such cases can be covered in a test suite module, and uses of fury can contribute to this module to ensure their correctness furtuer.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/392/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/394,https://api.github.com/repos/apache/fury/issues/394,fury,1727170186,394,[Protocol] variable-size data inline at fixed-size region,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-26T08:41:47Z,2023-05-26T08:56:02Z,"## Is your feature request related to a problem? Please describe.
The row format implemented in  #331  stores variable-size data in separate region, then stores the offset and size in variable region, which is not optimial:
- Separate region may be not close to fixed-region, there may introduce cache miss
- If the data is small, such as smaller than 7 bytes, then it can be stored in fixed-size region, storing it at  variable-size region will waste space too.

## Describe the solution you'd like
```
8 bytes in fixed-size region:
|....meta header ....|........|........|........|........|........|........|........|
the first bit can be used to flag whether inline, remaining bits in this byte can 
be used for meta such as length and encoding .  Remaing 7 bytes will be used for storing data.
```

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/394/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/395,https://api.github.com/repos/apache/fury/issues/395,fury,1727371858,395,[Java] add java benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T10:46:17Z,2023-05-26T11:16:39Z,"## Is your feature request related to a problem? Please describe.
- add java benchmarks to test fury performance
- compare fury performance with other frameworks


## Describe the solution you'd like
- [x] #396
- [x] #397
- [x] #398
- [x] #402
- [x] #404
- [x] #406
- [x] #407
- [x] #408
- [x] #412
","{""url"": ""https://api.github.com/repos/apache/fury/issues/395/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/396,https://api.github.com/repos/apache/fury/issues/396,fury,1727374787,396,Fury java benchmark framwork,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T10:48:39Z,2023-05-26T10:49:50Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/396/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/397,https://api.github.com/repos/apache/fury/issues/397,fury,1727374882,397,[Java] Add plotting tool,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T10:48:44Z,2023-05-26T10:52:56Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/397/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/398,https://api.github.com/repos/apache/fury/issues/398,fury,1727374972,398,[Java] Add usertype benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T10:48:48Z,2023-05-26T11:05:37Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/398/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/402,https://api.github.com/repos/apache/fury/issues/402,fury,1727408622,402,[Java] add string benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:08:04Z,2023-05-26T11:09:23Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/402/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/404,https://api.github.com/repos/apache/fury/issues/404,fury,1727413345,404,[Java] Add array benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:11:14Z,2023-05-26T11:11:33Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/404/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/406,https://api.github.com/repos/apache/fury/issues/406,fury,1727415491,406,[Java] Add map benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:12:39Z,2023-05-26T11:13:13Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/406/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/407,https://api.github.com/repos/apache/fury/issues/407,fury,1727415571,407,[Java] Add memory benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:12:43Z,2023-05-26T11:14:09Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/407/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/408,https://api.github.com/repos/apache/fury/issues/408,fury,1727415656,408,[Java] Row format benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:12:47Z,2023-05-26T11:15:12Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/408/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/412,https://api.github.com/repos/apache/fury/issues/412,fury,1727421305,412,[Java] add zero-copy benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:16:21Z,2023-05-26T11:16:34Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/412/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/414,https://api.github.com/repos/apache/fury/issues/414,fury,1727457565,414,[Java] Add protobuffer/flatbuffer benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-26T11:36:01Z,2023-05-26T11:36:55Z,"## Is your feature request related to a problem? Please describe.
Add protobuffer/flatbuffer benchmarks

## Describe the solution you'd like
protobuffer/flatbuffer serialziation is limited, and not siutuable for dynamic serialization, the profiling is infrequent, so add the benchmarks into a separate project

## Additional context
#395 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/414/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/417,https://api.github.com/repos/apache/fury/issues/417,fury,1729274471,417,[C++] generate arrow bazel depdencies from pyarrow bundled shared library,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-28T07:57:03Z,2023-05-28T07:57:26Z,"## Is your feature request related to a problem? Please describe.
Arrow building is time consuming and complex, building arrow from source is not easy. But fortually,pyarrow packaged libarrow.so and header files in its python wheel. We can use those files to dynamic link to arrow.

## Describe the solution you'd like
tensorflow provided a way to dynamic link to python shared library using bazel template in  https://github.com/tensorflow/tensorflow/blob/5a244072f2b33d2347e803146c244c179c1ddb75/third_party/py/python_configure.bzl , we can use similar method for arrow

","{""url"": ""https://api.github.com/repos/apache/fury/issues/417/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/419,https://api.github.com/repos/apache/fury/issues/419,fury,1729295821,419,[C++] bazel C++ build,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-28T08:23:52Z,2023-05-28T08:24:15Z,"## Is your feature request related to a problem? Please describe.
Add bazel C++ build support

## Additional context
#417 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/421,https://api.github.com/repos/apache/fury/issues/421,fury,1730716289,421,[Protocol] Union support for row format,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-29T12:55:41Z,2023-05-29T12:55:41Z,"## Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
#314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/421/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/422,https://api.github.com/repos/apache/fury/issues/422,fury,1730720154,422,[C++] Add cpp logging util ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-29T12:57:54Z,2023-05-29T12:59:22Z,"## Is your feature request related to a problem? Please describe.
Add cpp logging util ","{""url"": ""https://api.github.com/repos/apache/fury/issues/422/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/424,https://api.github.com/repos/apache/fury/issues/424,fury,1730725656,424,[C++] add c++ status util,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-29T13:00:49Z,2023-05-29T13:01:34Z,"## Is your feature request related to a problem? Please describe.
add c++ status util","{""url"": ""https://api.github.com/repos/apache/fury/issues/424/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/426,https://api.github.com/repos/apache/fury/issues/426,fury,1730742320,426,[C++] basic util for bytes operations,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-29T13:11:03Z,2023-05-29T13:11:29Z,"## Is your feature request related to a problem? Please describe.
Add basic util for bytes operations","{""url"": ""https://api.github.com/repos/apache/fury/issues/426/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/428,https://api.github.com/repos/apache/fury/issues/428,fury,1732312291,428,[Java] directly container row format support,rainsonGain,17981371,,,CLOSED,2023-05-30T13:45:48Z,2023-05-31T14:38:49Z,"## Context
We need to create a Java bean to use the row format capabilities, but in some cases, container objects want to be directly encoded, such as ArrayList<ArrayList<Bean>>, HashMap<Bean1, List<Map<String, Bean2>>, avoid creating unnecessary wrapper classes.

## Describe the solution you'd like
Add a group of encoder and builder, MapEncoder/ArrayEncoder with MapEncoderBuilder/ArrayEncoderBuilder.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/428/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/431,https://api.github.com/repos/apache/fury/issues/431,fury,1733677729,431,[Java] register class check duplciate id ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-05-31T08:42:23Z,2023-05-31T08:42:42Z,"## Is your feature request related to a problem? Please describe.
Register class can avoiding space cost of serializing class name, currently we don't check duplicate class id for class, which will lost class info, and the deserialization will fail,.


## Describe the solution you'd like
Add check for registered id duplication","{""url"": ""https://api.github.com/repos/apache/fury/issues/431/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/434,https://api.github.com/repos/apache/fury/issues/434,fury,1733773258,434,[RFC][Java] Cache fields in binary row ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-05-31T09:35:55Z,2023-05-31T09:35:55Z,"## Is your feature request related to a problem? Please describe.
`BinaryRow` will create objects for non-primitive fields every time read, which will introduce extra decoding cost for String type if read repeatly.

## Describe the solution you'd like
Cache the decoded String object in memory, and return it if read repeatly","{""url"": ""https://api.github.com/repos/apache/fury/issues/434/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/435,https://api.github.com/repos/apache/fury/issues/435,fury,1735558103,435,[Java] Support thread-safe fury by pooling,leeco-cloud,30429349,lee,,CLOSED,2023-06-01T06:15:59Z,2023-06-02T09:19:48Z,"Supports thread-safe pooling logic:
Pooling fury's safe thread pool helps users deal with the cost and initialization of frequent thread switching without requiring users to guarantee threads
","{""url"": ""https://api.github.com/repos/apache/fury/issues/435/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/437,https://api.github.com/repos/apache/fury/issues/437,fury,1741210170,437,[C++] Add c++ buffer util ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T08:04:22Z,2023-06-05T08:06:09Z,"## Is your feature request related to a problem? Please describe.
Add C++ buffer util support

## Additional context
#26","{""url"": ""https://api.github.com/repos/apache/fury/issues/437/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/440,https://api.github.com/repos/apache/fury/issues/440,fury,1741279728,440,[C++] Binary row format for c++ ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T08:38:05Z,2023-06-05T08:38:41Z,"## Is your feature request related to a problem? Please describe.
Implement binary format described in #331 


## Additional context
#314 #331 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/440/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/443,https://api.github.com/repos/apache/fury/issues/443,fury,1741297828,443,[C++] support row format to arrow in c++,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T08:49:49Z,2023-06-05T08:50:25Z,"## Is your feature request related to a problem? Please describe.
Add support for convert row format to arrow in c++



## Additional context
#359","{""url"": ""https://api.github.com/repos/apache/fury/issues/443/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/445,https://api.github.com/repos/apache/fury/issues/445,fury,1741365094,445,[C++] Add c++ ci,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T09:24:33Z,2023-06-05T12:21:56Z,"## Is your feature request related to a problem? Please describe.
Add c++ ci
","{""url"": ""https://api.github.com/repos/apache/fury/issues/445/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/447,https://api.github.com/repos/apache/fury/issues/447,fury,1741798470,447,[CI] Add code lint ci job,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T13:31:27Z,2023-06-05T15:15:57Z,"## Is your feature request related to a problem? Please describe.
[CI] Add code lint ci job.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/447/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/449,https://api.github.com/repos/apache/fury/issues/449,fury,1742074799,449,[Doc] Add c++ debugging doc ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-05T15:56:51Z,2023-06-05T15:57:15Z,"## Is your feature request related to a problem? Please describe.
Debug C++ is tricky and binary protocol bug is hard to locate without debugging support, but setup 
debugging support for bazel project is not easy.

We should provided an out-of-box doc for user  debugging

## Describe the solution you'd like
- Provide vscode config for debugging
- Provided example


","{""url"": ""https://api.github.com/repos/apache/fury/issues/449/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/451,https://api.github.com/repos/apache/fury/issues/451,fury,1746302738,451,[Python] Setup python building ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T16:44:44Z,2023-06-07T16:52:37Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/451/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/452,https://api.github.com/repos/apache/fury/issues/452,fury,1746303280,452,[Python] Bind cpp util to python using cython,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T16:45:08Z,2023-06-07T16:52:32Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/452/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/453,https://api.github.com/repos/apache/fury/issues/453,fury,1746303871,453,[Python] Setup python ci ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T16:45:32Z,2023-06-07T16:52:19Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/453/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/455,https://api.github.com/repos/apache/fury/issues/455,fury,1746351874,455,[Python] Type infer for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T17:14:43Z,2023-06-07T17:39:39Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/455/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/456,https://api.github.com/repos/apache/fury/issues/456,fury,1746352466,456,[Python] Type infer for arrow schema,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T17:15:11Z,2023-06-07T17:39:40Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/456/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/457,https://api.github.com/repos/apache/fury/issues/457,fury,1746353022,457,[Python] generate class dynamically,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T17:15:37Z,2023-06-07T17:39:40Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/457/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/460,https://api.github.com/repos/apache/fury/issues/460,fury,1746387976,460,[Java] skip checkstyle in java test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-07T17:42:14Z,2023-06-07T17:42:31Z,"## Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/460/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/462,https://api.github.com/repos/apache/fury/issues/462,fury,1747173229,462,[Python] ModuleNotFoundError: No module named 'Cython' for python3.9,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-08T06:30:28Z,2023-06-08T06:31:25Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
If not install wheel, `pip install -v -e .` for python 3.9 will fail:
```
Running command Getting requirements to build editable
  Traceback (most recent call last):
    File ""/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py"", line 353, in <module>
      main()
    File ""/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py"", line 335, in main
      json_out['return_val'] = hook(**hook_input['kwargs'])
    File ""/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py"", line 132, in get_requires_for_build_editable
      return hook(config_settings)
    File ""/tmp/pip-build-env-jpvjfaij/overlay/lib/python3.9/site-packages/setuptools/build_meta.py"", line 450, in get_requires_for_build_editable
      return self.get_requires_for_build_wheel(config_settings)
    File ""/tmp/pip-build-env-jpvjfaij/overlay/lib/python3.9/site-packages/setuptools/build_meta.py"", line 341, in get_requires_for_build_wheel
      return self._get_build_requires(config_settings, requirements=['wheel'])
    File ""/tmp/pip-build-env-jpvjfaij/overlay/lib/python3.9/site-packages/setuptools/build_meta.py"", line 323, in _get_build_requires
      self.run_setup()
    File ""/tmp/pip-build-env-jpvjfaij/overlay/lib/python3.9/site-packages/setuptools/build_meta.py"", line 4[87](https://github.com/alipay/fury/actions/runs/5203243024/jobs/9385829350#step:5:88), in run_setup
      super(_BuildMetaLegacyBackend,
    File ""/tmp/pip-build-env-jpvjfaij/overlay/lib/python3.9/site-packages/setuptools/build_meta.py"", line 338, in run_setup
      exec(code, locals())
    File ""<string>"", line 14, in <module>
  ModuleNotFoundError: No module named 'Cython'
  error: subprocess-exited-with-error
  
  × Getting requirements to build editable did not run successfully.
  │ exit code: 1
  ╰─> See above for output.
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  full command: /opt/hostedtoolcache/Python/3.9.16/x64/bin/python /opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py get_requires_for_build_editable /tmp/tmp32p5tmsg
  cwd: /home/runner/work/fury/fury/python
  Getting requirements to build editable: finished with status 'error'
```

**To Reproduce**
ci/runtest.sh python

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/246fef6b-50fa-4d9c-935c-3e6e7c4fe8c9)

**Environment (please complete the following information):**

Python3.9","{""url"": ""https://api.github.com/repos/apache/fury/issues/462/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/464,https://api.github.com/repos/apache/fury/issues/464,fury,1761086010,464,[Python] Python row format binding,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-16T18:04:05Z,2023-06-16T18:10:56Z,"## Is your feature request related to a problem? Please describe.
bind c++ row format to Python 

## Describe the solution you'd like
using cython to bind c++ row format

## Additional context
#314 #331","{""url"": ""https://api.github.com/repos/apache/fury/issues/464/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/465,https://api.github.com/repos/apache/fury/issues/465,fury,1761105343,465,[Python] Python encoder for row format,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-16T18:14:39Z,2023-06-16T18:15:38Z,"## Is your feature request related to a problem? Please describe.
Add Python encoder for row format


## Additional context
#464 #463 #331 #314 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/465/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/468,https://api.github.com/repos/apache/fury/issues/468,fury,1761109698,468,[Python] Row and arrow format converter,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-16T18:18:38Z,2023-06-16T18:23:41Z,"## Is your feature request related to a problem? Please describe.
Add Row and arrow format converter

## Describe the solution you'd like
Bind to c++ using cython

## Additional context
#331 #443","{""url"": ""https://api.github.com/repos/apache/fury/issues/468/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/470,https://api.github.com/repos/apache/fury/issues/470,fury,1761919650,470,[C++] cpp murmurhash,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-17T16:45:00Z,2023-06-17T16:46:14Z,"## Is your feature request related to a problem? Please describe.
Add cpp murmurhash, the result should be consistent across languages
","{""url"": ""https://api.github.com/repos/apache/fury/issues/470/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/471,https://api.github.com/repos/apache/fury/issues/471,fury,1761919790,471,[Python] python murmurhash,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-17T16:45:33Z,2023-06-17T16:58:43Z,"# Is your feature request related to a problem? Please describe.
Add python murmurhash, the result should be consistent across languages

","{""url"": ""https://api.github.com/repos/apache/fury/issues/471/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/473,https://api.github.com/repos/apache/fury/issues/473,fury,1761924874,473,[Python] add weak key identity map,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-17T17:01:24Z,2023-06-17T17:01:44Z,"## Is your feature request related to a problem? Please describe.
add weak key identity map
","{""url"": ""https://api.github.com/repos/apache/fury/issues/473/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/475,https://api.github.com/repos/apache/fury/issues/475,fury,1762093284,475,[Python] reference tracking support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-18T03:30:14Z,2023-06-18T03:31:52Z,"## Is your feature request related to a problem? Please describe.
Support tracking reference in python

## Additional context
#73 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/475/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/477,https://api.github.com/repos/apache/fury/issues/477,fury,1762094542,477,[Python] add python serialization framework,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-18T03:37:23Z,2023-06-18T03:38:29Z,"## Is your feature request related to a problem? Please describe.
Implement python serialization framework

## Describe the solution you'd like
- ClassResolver for type serializer dispatch
- Fury for serializer
","{""url"": ""https://api.github.com/repos/apache/fury/issues/477/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/479,https://api.github.com/repos/apache/fury/issues/479,fury,1762095203,479,[Python] common python type serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-18T03:41:14Z,2023-06-18T03:41:37Z,"## Is your feature request related to a problem? Please describe.
Add support for common python type serialization:
- primitives
- dict/set/list/tuple
- enum
- numpy array
","{""url"": ""https://api.github.com/repos/apache/fury/issues/479/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/481,https://api.github.com/repos/apache/fury/issues/481,fury,1762095588,481,[Python] struct serialization support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-18T03:43:41Z,2023-06-18T03:44:19Z,"## Is your feature request related to a problem? Please describe.
Add struct serialization support for python

## Describe the solution you'd like
- type inferrrence
- build serializers for fields
- iterate fields serializers
","{""url"": ""https://api.github.com/repos/apache/fury/issues/481/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/483,https://api.github.com/repos/apache/fury/issues/483,fury,1774538416,483,[Java] MapSerializer getSuperType java.lang.IllegalArgumentException,kingrui,6029005,King Rui,jinrui@jinrui.me,CLOSED,2023-06-26T11:14:23Z,2023-06-26T12:13:53Z,"**Describe the bug**
```
java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object

	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:441)
	at com.google.common.reflect.TypeToken.getSupertype(TypeToken.java:381)
	at io.fury.type.TypeUtils.getMapKeyValueType(TypeUtils.java:429)
	at io.fury.serializers.MapSerializers$MapSerializer.getKVGenericType(MapSerializers.java:408)
	at io.fury.serializers.MapSerializers$MapSerializer.genericJavaWrite(MapSerializers.java:184)
	at io.fury.serializers.MapSerializers$MapSerializer.writeElements(MapSerializers.java:150)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:110)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:41)
	at io.fury.Fury.writeNonReferenceToJava(Fury.java:369)
	at io.fury.serializers.ObjectSerializer.writeContainerFieldValue(ObjectSerializer.java:247)
	at io.fury.serializers.ObjectSerializer.writeContainerFields(ObjectSerializer.java:229)
	at io.fury.serializers.ObjectSerializer.write(ObjectSerializer.java:180)
	at io.fury.Fury.writeData(Fury.java:484)
	at io.fury.Fury.writeReferencableToJava(Fury.java:280)
	at io.fury.Fury.serializeInternal(Fury.java:247)
	at io.fury.Fury.serialize(Fury.java:188)
	at io.fury.Fury.serialize(Fury.java:169)

```

**To Reproduce**
``` java
public class GenericSerializerTest {
    private static class CustomMap extends HashMap<String, String> {}

    @Data
    private static class UserDO {
        private CustomMap features;
    }

    @Test
    public void testSerializeCustomMap() throws IOException {
        CustomMap features = new CustomMap();
        features.put(""a"", ""A"");
        UserDO outerDO = new UserDO();
        outerDO.setFeatures(features);
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withDeserializeUnExistClassEnabled(true)
                .withMetaContextShareEnabled(true)
                .disableSecureMode()
                .withClassRegistrationRequired(false)
                .build();
        fury.getSerializationContext().setMetaContext(new MetaContext());
        byte[] serialize = fury.serialize(outerDO);
    }
}
```

**Environment**
macOS 13.0.1  jdk-1.8 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/483/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/486,https://api.github.com/repos/apache/fury/issues/486,fury,1780061738,486,[Java] map interpreter serializer failed when value type is final,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-06-29T03:24:53Z,2023-06-29T03:43:15Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
There are missing for loop in compatible map interpreter serializer:
![image](https://github.com/alipay/fury/assets/12445254/c52978b3-346c-4cab-8236-f18510e10d4d)

When interpreter compatible mode is used and the deserializing object has a map field with key type not fila, but value type final, the deserialization of this map will only deserialize a pair of key value.


**To Reproduce**
Deserialize an object of following type with  `mapValueFinal`  has two elements:

```java
public class MapFields {
  public Map map;
  public Map<String, Integer> map2;
  public HashMap<String, Integer> map3;
  public Map<String, Object> mapKeyFinal;
  public Map<Object, Integer> mapValueFinal;
}
```

**Screenshots**
```
java.lang.IllegalArgumentException
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:128)
	at io.fury.resolver.FieldResolver.readObjectWithFinal(FieldResolver.java:584)
	at io.fury.resolver.FieldResolver.skipObjectField(FieldResolver.java:511)
	at io.fury.resolver.FieldResolver.skipDataBy8(FieldResolver.java:486)
	at io.fury.resolver.FieldResolver.skipEndFields(FieldResolver.java:520)
	at io.fury.serializer.CompatibleSerializer.readSeparateTypesHashField(CompatibleSerializer.java:527)
	at io.fury.serializer.CompatibleSerializer.readAndSetFields(CompatibleSerializer.java:311)
	at io.fury.serializer.CompatibleSerializer.read(CompatibleSerializer.java:289)
	at io.fury.Fury.readData(Fury.java:826)
	at io.fury.Fury.readReferencableFromJava(Fury.java:734)
	at io.fury.Fury.deserialize(Fury.java:679)
	at io.fury.Fury.deserialize(Fury.java:611)
```

**Environment (please complete the following information):**
Fury: master","{""url"": ""https://api.github.com/repos/apache/fury/issues/486/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/489,https://api.github.com/repos/apache/fury/issues/489,fury,1783371100,489,[Python] cpp/cython serialization implementation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:39:01Z,2023-07-01T03:53:18Z,"## Is your feature request related to a problem? Please describe.
Implement fury python serialization by using native c++ and cython

## Describe the solution you'd like
- [x] #490
- [x] #491
- [x] #495
- [x] #492
","{""url"": ""https://api.github.com/repos/apache/fury/issues/489/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/490,https://api.github.com/repos/apache/fury/issues/490,fury,1783371129,490,Using abseil `flat_hash_map` and  c++ vector for reference resolving,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:39:05Z,2023-07-01T02:40:53Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/490/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/491,https://api.github.com/repos/apache/fury/issues/491,fury,1783371160,491,Using abseil `flat_hash_map` for class resolving,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:39:10Z,2023-07-01T02:46:13Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/491/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/492,https://api.github.com/repos/apache/fury/issues/492,fury,1783371192,492,[Python] Using cython to speed serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:39:15Z,2023-07-01T03:17:12Z,"## Is your feature request related to a problem? Please describe.
Using cython to speed common serializers.

## Describe the solution you'd like
- [x] #497
- [x] #498
- [x] #504
- [x] #500
- [x] #499
","{""url"": ""https://api.github.com/repos/apache/fury/issues/492/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/495,https://api.github.com/repos/apache/fury/issues/495,fury,1783380119,495,Cython/Cpp serialization framework,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:46:51Z,2023-07-01T02:51:04Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/495/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/497,https://api.github.com/repos/apache/fury/issues/497,fury,1783391506,497,[Python] cython basic serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:56:08Z,2023-07-01T02:57:53Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/497/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/498,https://api.github.com/repos/apache/fury/issues/498,fury,1783391573,498,[Python] cython container serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:56:13Z,2023-07-01T03:03:12Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/498/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/499,https://api.github.com/repos/apache/fury/issues/499,fury,1783391659,499,[Python] cython misc serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:56:19Z,2023-07-01T03:16:09Z," Add cython misc serializers:
- EnumSerializer
- SliceSerializer
- PickleSerializer","{""url"": ""https://api.github.com/repos/apache/fury/issues/499/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/500,https://api.github.com/repos/apache/fury/issues/500,fury,1783391734,500,[Python] cython struct serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T02:56:24Z,2023-07-01T03:13:20Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/500/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/504,https://api.github.com/repos/apache/fury/issues/504,fury,1783406416,504,[Python] cython array serializers,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T03:09:21Z,2023-07-01T03:09:55Z,"## Is your feature request related to a problem? Please describe.
Add cython array serializers for numoy and python array


## Additional context
#492","{""url"": ""https://api.github.com/repos/apache/fury/issues/504/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/508,https://api.github.com/repos/apache/fury/issues/508,fury,1784007144,508,[Python] Unify cython and python serializer,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T15:16:20Z,2023-07-01T15:18:17Z,"## Is your feature request related to a problem? Please describe.
Unify cython and python serializer

## Describe the solution you'd like
Replace functions and classes when import

","{""url"": ""https://api.github.com/repos/apache/fury/issues/508/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/510,https://api.github.com/repos/apache/fury/issues/510,fury,1784014091,510,[Python] codegen serialization framework ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T15:24:51Z,2023-07-01T15:25:52Z,"## Is your feature request related to a problem? Please describe.
Add codegen serialization framework and support for python dataclasses.

## Additional context
Cross-language by codegen will be added later.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/510/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/511,https://api.github.com/repos/apache/fury/issues/511,fury,1784018702,511,[Python] reduce code duplication between python and cython ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-01T15:30:54Z,2023-07-01T16:31:53Z,"## Is your feature request related to a problem? Please describe.
We use cython to speed python serialization, but in order to support windows and easiger debugging, we still preserve pure python implication, whose code is kind of duplicate with cython implementation.

 The duplication are:
- Fury dispatch
- Serializers implementation.

Class resolvers and reference resolvers using cpp/abseil map, which is totally differecent from python implementation

It would be better for matainance if we can reduce the code duplciation.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/511/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/513,https://api.github.com/repos/apache/fury/issues/513,fury,1784066517,513,[Python] Support arrow in object graph serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T16:30:41Z,2023-07-01T16:44:20Z,"## Is your feature request related to a problem? Please describe.
Add object graph serialization with zero-copy support for:
- arrow record batch
- arrow table.

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
#350 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/513/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/514,https://api.github.com/repos/apache/fury/issues/514,fury,1784069179,514,[C++] bazel build failed at 5.0/6.2,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T16:33:55Z,2024-01-04T08:15:07Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
bazel build failed at 5.0/6.2, but works at 4.2. 

Ray has similar issue as described in [#31504](https://github.com/ray-project/ray/issues/31504)

**Expected behavior**
bazel build should work for all bazel version

**To Reproduce**
`bazel build //:cp_fury_so`

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/514/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/514,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v2-nc,fury,1876683228,514,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-04T08:15:07Z,2024-01-04T08:15:07Z,Use bazel 6.3.2 instead.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v2-nc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/516,https://api.github.com/repos/apache/fury/issues/516,fury,1784082690,516,[Python] Add common pytests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T16:53:03Z,2023-07-01T16:53:50Z,"## Is your feature request related to a problem? Please describe.

Add common pytests
- Arrow type tests
- Serializers tests
- Zero-copy tests
- Cross-language tests]

## Additional context
Java/javascript/golang can execute `python pyfury/tests/test_cross_language.py xxx` for cross-language compatibilty tests.","{""url"": ""https://api.github.com/repos/apache/fury/issues/516/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/518,https://api.github.com/repos/apache/fury/issues/518,fury,1784084300,518,[Python] PytestCollectionWarning: cannot collect test class 'TestCacheClass1' because it has a __init__ constructor ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-01T16:55:55Z,2023-07-14T12:22:41Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
PytestCollectionWarning: cannot collect test class 'TestCacheClass1' because it has a __init__ constructor (from: pyfury/tests/test_serializer.py)

**Expected behavior**
No PytestCollectionWarning

**To Reproduce**
```bash
cd python
pytest -v -s pyfury

```
**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/4fb48cce-1cae-41a7-a6cb-f98b5bb4f2cf)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/518/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/520,https://api.github.com/repos/apache/fury/issues/520,fury,1784113972,520,[Community] Update contacts aboutwechat/dingding,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-01T17:38:23Z,2023-07-01T17:39:31Z,"## Is your feature request related to a problem? Please describe.
Update contacts about wechat/dingding
","{""url"": ""https://api.github.com/repos/apache/fury/issues/520/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/522,https://api.github.com/repos/apache/fury/issues/522,fury,1784408824,522,[Java] support struct cross language serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T03:16:51Z,2023-07-02T03:19:22Z,"## Is your feature request related to a problem? Please describe.
Add support for struct cross language serialization.

Cross-language schema forward/backward compatibikity is not convered in this issue, and will be added later when meta compression is finished.

## Additional context
#505","{""url"": ""https://api.github.com/repos/apache/fury/issues/522/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/524,https://api.github.com/repos/apache/fury/issues/524,fury,1784409123,524,[Java] crosslanguage tests between java and python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T03:18:45Z,2023-07-02T03:57:40Z,"## Is your feature request related to a problem? Please describe.
Add crosslanguage tests between java and python
","{""url"": ""https://api.github.com/repos/apache/fury/issues/524/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/528,https://api.github.com/repos/apache/fury/issues/528,fury,1784603578,528,[Java] replace io.furyx with org.furyio ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T11:54:25Z,2023-07-02T11:54:48Z,"## Is your feature request related to a problem? Please describe.
 replace maven groupid `io.furyx` with `org.furyio`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/530,https://api.github.com/repos/apache/fury/issues/530,fury,1784653092,530,[Java] reduce string serializer caller stack by jit,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T13:48:15Z,2023-07-02T14:28:47Z,"## Is your feature request related to a problem? Please describe.
We have some checks when serializing java string, the checks introduce extra instructions and increase java callstack, the performance will be slow a little down.

## Describe the solution you'd like
Using fury jit framework to move some checks from runtime into jit codegen stage, and inline one layer caller stack

## Additional context
JDK17 string optimization will be added when #91 is finished.","{""url"": ""https://api.github.com/repos/apache/fury/issues/530/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/532,https://api.github.com/repos/apache/fury/issues/532,fury,1784657674,532,[Java] java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T14:03:04Z,2023-07-02T14:30:44Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Java interpreter map serializer serialize nested map container failed:
```java
java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object
        at com.google.common.base.Preconditions.checkArgument(Preconditions.java:441)
        at com.google.common.reflect.TypeToken.getSupertype(TypeToken.java:381)
        at io.fury.type.TypeUtils.getMapKeyValueType(TypeUtils.java:452)
        at io.fury.serializer.MapSerializers$MapSerializer.getKVGenericType(MapSerializers.java:432)
        at io.fury.serializer.MapSerializers$MapSerializer.genericJavaWrite(MapSerializers.java:208)
        at io.fury.serializer.MapSerializers$MapSerializer.writeElements(MapSerializers.java:174)
        at io.fury.serializer.MapSerializers$MapSerializer.write(MapSerializers.java:134)
        at io.fury.serializer.MapSerializers$MapSerializer.write(MapSerializers.java:65)
        at io.fury.Fury.writeNonReferenceToJava(Fury.java:374)
        at io.fury.serializer.MapSerializers$MapSerializer.writeJavaRefOptimized(MapSerializers.java:768)
        at io.fury.serializer.MapSerializers$MapSerializer.javaKeyTypeFinalWrite(MapSerializers.java:277)
        at io.fury.serializer.MapSerializers$MapSerializer.genericJavaWrite(MapSerializers.java:230)
        at io.fury.serializer.MapSerializers$MapSerializer.writeElements(MapSerializers.java:174)
        at io.fury.serializer.MapSerializers$MapSerializer.write(MapSerializers.java:134)
        at io.fury.serializer.MapSerializers$MapSerializer.write(MapSerializers.java:65)
        at io.fury.Fury.writeNonReferenceToJava(Fury.java:374)
        at io.fury.serializer.ObjectSerializer.writeContainerFieldValue(ObjectSerializer.java:273)
        at io.fury.serializer.ObjectSerializer.writeContainerFields(ObjectSerializer.java:246)
        at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:197)
        at io.fury.Fury.writeData(Fury.java:489)
        at io.fury.Fury.writeReferencableToJava(Fury.java:285)
        at io.fury.Fury.serialize(Fury.java:235)
        at io.fury.Fury.serialize(Fury.java:183)
        at io.fury.FuryTestBase.serDe(FuryTestBase.java:203)
        at io.fury.serializer.MapSerializersTest.testMapFieldSerializers(MapSerializersTest.java:207)

```

JIT mode works fine, since it doesn't need to push generics.
**Expected behavior**
Serialize succeed.

**To Reproduce**
run `testMapFieldSerializers(io.fury.serializer.MapSerializersTest)`

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/6b48dd85-64e3-42ae-9518-7eb171155f02)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/532/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/534,https://api.github.com/repos/apache/fury/issues/534,fury,1784685403,534,[Java] JDK11 string jit serializaiton failure,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-02T15:13:59Z,2023-07-02T15:30:11Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
#531 will make jdk11 string jit serialization failed with:

```
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:131)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:69)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:143)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:42)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:58)
	... 23 more
Caused by: org.codehaus.commons.compiler.CompileException: File 'io/fury/benchmark/data/SampleFuryCodec_2085539722_125130493_341546948.java', Line 186, Column 42: No applicable constructor/method found for actual parameters ""io.fury.memory.MemoryBuffer, java.lang.String""; candidates are: ""default static void io.fury.serializer.StringSerializer.writeJDK11String(io.fury.memory.MemoryBuffer, java.lang.String)""
	at org.codehaus.janino.UnitCompiler.compileError(UnitCompiler.java:12211)
	at org.codehaus.janino.UnitCompiler.findMostSpecificIInvocable(UnitCompiler.java:9263)
	at org.codehaus.janino.UnitCompiler.findIMethod(UnitCompiler.java:9123)
	at org.codehaus.janino.UnitCompiler.findIMethod(UnitCompiler.java:9025)
	at org.codehaus.janino.UnitCompiler.compileGet2(UnitCompiler.java:5062)
	at org.codehaus.janino.UnitCompiler.access$9100(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$16.visitMethodInvocation(UnitCompiler.java:4423)
	at org.codehaus.janino.UnitCompiler$16.visitMethodInvocation(UnitCompiler.java:4396)
	at org.codehaus.janino.Java$MethodInvocation.accept(Java.java:5073)
	at org.codehaus.janino.UnitCompiler.compileGet(UnitCompiler.java:4396)
	at org.codehaus.janino.UnitCompiler.compileGetValue(UnitCompiler.java:5662)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:3783)
	at org.codehaus.janino.UnitCompiler.access$5900(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$13.visitMethodInvocation(UnitCompiler.java:3762)
	at org.codehaus.janino.UnitCompiler$13.visitMethodInvocation(UnitCompiler.java:3734)
	at org.codehaus.janino.Java$MethodInvocation.accept(Java.java:5073)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3734)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2360)
	at org.codehaus.janino.UnitCompiler.access$1800(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitExpressionStatement(UnitCompiler.java:1494)
	at org.codehaus.janino.UnitCompiler$6.visitExpressionStatement(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$ExpressionStatement.accept(Java.java:2874)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1567)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:1553)
	at org.codehaus.janino.UnitCompiler.access$1700(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitBlock(UnitCompiler.java:1493)
	at org.codehaus.janino.UnitCompiler$6.visitBlock(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$Block.accept(Java.java:2779)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2468)
	at org.codehaus.janino.UnitCompiler.access$1900(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitIfStatement(UnitCompiler.java:1495)
	at org.codehaus.janino.UnitCompiler$6.visitIfStatement(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$IfStatement.accept(Java.java:2950)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1567)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3388)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1357)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1330)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:822)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:432)
	at org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$2.visitPackageMemberClassDeclaration(UnitCompiler.java:411)
	at org.codehaus.janino.UnitCompiler$2.visitPackageMemberClassDeclaration(UnitCompiler.java:406)
	at org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1414)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:406)
	at org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:378)
	at org.codehaus.janino.Compiler.compile(Compiler.java:532)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:111)
	... 28 more
```

We need to make `io.fury.serializer.StringSerializer#writeJDK11String` public 
**Expected behavior**


**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/d853555e-1630-4f20-84c9-087d3b665f16)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/534/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/537,https://api.github.com/repos/apache/fury/issues/537,fury,1788204820,537,[JavaScript] improve write performance ,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-04T16:22:11Z,2023-07-04T16:25:50Z,"## Describe the solution you'd like
now we use Uint8Array.set to write string, it is slow, constructor ArrayBuffer cost to much time.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/537/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/539,https://api.github.com/repos/apache/fury/issues/539,fury,1788238649,539,[Java] Refine Java Benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-04T16:58:09Z,2023-07-04T17:04:42Z,"## Is your feature request related to a problem? Please describe.
Some Java Benchmarks are not runnable in jdk 11, we should fix those benchmarks, and it's also an opportunity to optimize Benchmarks

","{""url"": ""https://api.github.com/repos/apache/fury/issues/539/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/540,https://api.github.com/repos/apache/fury/issues/540,fury,1788239099,540,[Java] Add java fury metashared benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-04T16:58:41Z,2023-07-04T17:04:31Z,"## Is your feature request related to a problem? Please describe.
Add java fury metashared benchmarks","{""url"": ""https://api.github.com/repos/apache/fury/issues/540/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/541,https://api.github.com/repos/apache/fury/issues/541,fury,1788679729,541,[Java] class not found CLASSNAME:demo.fury.pkg1.Struct loader:jdk.internal.loader.ClassLoaders$AppClassLoader,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-05T03:01:42Z,2023-07-05T03:14:36Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
FST/kryo benchmark can't deserialzie objects of dynamic generated classes.
```
java.io.IOException: java.lang.RuntimeException: class not found CLASSNAME:demo.fury.pkg1.Struct loader:jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c
        at org.nustaq.serialization.FSTObjectInput.readObject(FSTObjectInput.java:247)
        at org.nustaq.serialization.FSTConfiguration.asObject(FSTConfiguration.java:1158)
        at io.fury.benchmark.state.FstState$FstBenchmarkState.deserialize(FstState.java:119)
        at io.fury.benchmark.state.FstState$FstBenchmarkState.deserialize(FstState.java:104)
        at io.fury.benchmark.state.FstState$FstUserTypeState.setup(FstState.java:173)
        at io.fury.benchmark.jmh_generated.UserTypeSerializeSuite_fst_serialize_jmhTest._jmh_tryInit_f_fstusertypestate1_1(UserTypeSerializeSuite_fst_serialize_jmhTest.java:353)
        at io.fury.benchmark.jmh_generated.UserTypeSerializeSuite_fst_serialize_jmhTest.fst_serialize_Throughput(UserTypeSerializeSuite_fst_serialize_jmhTest.java:73)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
        at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.RuntimeException: class not found CLASSNAME:demo.fury.pkg1.Struct loader:jdk.internal.loader.ClassLoaders$AppClassLoader@4b85612c
        at org.nustaq.serialization.FSTClazzNameRegistry.classForName(FSTClazzNameRegistry.java:235)
        at org.nustaq.serialization.FSTClazzNameRegistry.classForName(FSTClazzNameRegistry.java:190)
        at org.nustaq.serialization.FSTClazzNameRegistry.decodeClass(FSTClazzNameRegistry.java:173)
        at org.nustaq.serialization.coders.FSTStreamDecoder.readClass(FSTStreamDecoder.java:478)
        at org.nustaq.serialization.FSTObjectInput.readClass(FSTObjectInput.java:939)
        at org.nustaq.serialization.FSTObjectInput.readObjectWithHeader(FSTObjectInput.java:347)
        at org.nustaq.serialization.FSTObjectInput.readObjectInternal(FSTObjectInput.java:331)
        at org.nustaq.serialization.FSTObjectInput.readObject(FSTObjectInput.java:311)
        at org.nustaq.serialization.FSTObjectInput.readObject(FSTObjectInput.java:245)
```
```
com.esotericsoftware.kryo.KryoException: Unable to find class: demo.fury.pkg1.Struct
        at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:160)
        at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:133)
        at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:693)
        at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:804)
        at io.fury.benchmark.state.KryoState$KryoUserTypeState.setup(KryoState.java:146)
        at io.fury.benchmark.jmh_generated.UserTypeDeserializeSuite_kryo_deserialize_compatible_jmhTest._jmh_tryInit_f_kryocompatiblestate1_1(UserTypeDeserializeSuite_kryo_deserialize_compatible_jmhTest.java:353)
        at io.fury.benchmark.jmh_generated.UserTypeDeserializeSuite_kryo_deserialize_compatible_jmhTest.kryo_deserialize_compatible_Throughput(UserTypeDeserializeSuite_kryo_deserialize_compatible_jmhTest.java:73)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
        at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.ClassNotFoundException: demo.fury.pkg1.Struct
        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
        at java.base/java.lang.Class.forName0(Native Method)
        at java.base/java.lang.Class.forName(Class.java:398)
        at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:154)
        ... 18 more
```
**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
run fury-benchmark

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/8f5cf31e-762e-4d2b-aa0a-b8eb1706ce94)
![image](https://github.com/alipay/fury/assets/12445254/f6bac598-00c7-422a-bcca-f565464db9ae)


**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/541/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/544,https://api.github.com/repos/apache/fury/issues/544,fury,1789453737,544,[Java] Unsafe method invoke optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-05T12:29:46Z,2023-07-05T12:30:36Z,"## Is your feature request related to a problem? Please describe.
Unsafe method invoke optimization by creating a trusted method lookup.

Note: this is very hacky, the usage should be spared.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/544/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/546,https://api.github.com/repos/apache/fury/issues/546,fury,1791714537,546,[Java] Optimize string serialization memory operations,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-06T14:48:02Z,2023-07-06T15:40:30Z,"## Is your feature request related to a problem? Please describe.
string serialization is very common in java, there are still some rebundunt checks and memory read/write in the implementation, which can be optimized:
- JDK11 `Unsafe.copyMemory` have unnecessary `copyMemoryChecks`
- Extra checks when buffer is a heap buffer

![image](https://github.com/alipay/fury/assets/12445254/1a4ad0d1-88e3-423b-9e6a-a5f07de98f1f)

## Describe the solution you'd like
- Inline the code munually
- Use System.arrayCopy for JDK11 heap buffer
- Using array assign instead of Unsafe for int read/write

","{""url"": ""https://api.github.com/repos/apache/fury/issues/546/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/547,https://api.github.com/repos/apache/fury/issues/547,fury,1791970031,547,[Java] Optimize generated serializer method serializer fields load,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-06T17:40:57Z,2023-07-07T06:21:38Z,"## Is your feature request related to a problem? Please describe.
The fury generated serializer have many duplciate loads of serializer fields. 
For example, there will be multiple loads of `intArraySerializer`/`refResolver` and so on.

```java
  private void writeFields3(MemoryBuffer memoryBuffer3, Struct7 struct74) {
    int[] f18 = struct74.f18;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f18)) {
      this.intArraySerializer.write(memoryBuffer3, f18);
    }

    int[] f31 = struct74.f31;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f31)) {
      this.intArraySerializer.write(memoryBuffer3, f31);
    }

    int[] f44 = struct74.f44;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f44)) {
      this.intArraySerializer.write(memoryBuffer3, f44);
    }

    int[] f5 = struct74.f5;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f5)) {
      this.intArraySerializer.write(memoryBuffer3, f5);
    }

    int[] f57 = struct74.f57;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f57)) {
      this.intArraySerializer.write(memoryBuffer3, f57);
    }

    int[] f70 = struct74.f70;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f70)) {
      this.intArraySerializer.write(memoryBuffer3, f70);
    }

    int[] f83 = struct74.f83;
    if (!this.refResolver.writeReferenceOrNull(memoryBuffer3, f83)) {
      this.intArraySerializer.write(memoryBuffer3, f83);
    }

  }

```

Here is an example using `java -c -p xxx.class`:
```
Compiled from ""Struct7FuryRefCodec_1053215377.java""
public final class Struct7FuryRefCodec_1053215377 extends io.fury.builder.Generated$GeneratedObjectSerializer {
  private final io.fury.resolver.MapReferenceResolver refResolver;

  private final io.fury.resolver.ClassResolver classResolver;

  private final io.fury.serializer.StringSerializer strSerializer;

  private final io.fury.Fury fury;

  private final io.fury.serializer.ArraySerializers$IntArraySerializer intArraySerializer;

  private final io.fury.serializer.ArraySerializers$ObjectArraySerializer objectArraySerializer;

  private io.fury.resolver.ClassInfo objectClassInfo;

  private io.fury.resolver.ClassInfo objectClassInfo1;

  private io.fury.resolver.ClassInfo objectClassInfo2;

  private io.fury.resolver.ClassInfo objectClassInfo3;

  private io.fury.resolver.ClassInfo objectClassInfo4;

  private io.fury.resolver.ClassInfo objectClassInfo5;

  private io.fury.resolver.ClassInfo objectClassInfo6;

  private io.fury.resolver.ClassInfo listClassInfo;

  private io.fury.resolver.ClassInfo listClassInfo1;

  private io.fury.resolver.ClassInfo listClassInfo2;

  private io.fury.resolver.ClassInfo listClassInfo3;

  private io.fury.resolver.ClassInfo listClassInfo4;

  private io.fury.resolver.ClassInfo listClassInfo5;

  private io.fury.resolver.ClassInfo listClassInfo6;

  private io.fury.resolver.ClassInfo listClassInfo7;

  private io.fury.resolver.ClassInfo listClassInfo8;

  private io.fury.resolver.ClassInfo listClassInfo9;

  private io.fury.resolver.ClassInfo listClassInfo10;

  private io.fury.resolver.ClassInfo listClassInfo11;

  private io.fury.resolver.ClassInfo listClassInfo12;

  private io.fury.resolver.ClassInfo listClassInfo13;

  private io.fury.resolver.ClassInfo mapClassInfo;

  private io.fury.resolver.ClassInfo mapClassInfo1;

  private io.fury.resolver.ClassInfo mapClassInfo2;

  private io.fury.resolver.ClassInfo mapClassInfo3;

  private io.fury.resolver.ClassInfo mapClassInfo4;

  private io.fury.resolver.ClassInfo mapClassInfo5;

  private io.fury.resolver.ClassInfo mapClassInfo6;

  private io.fury.resolver.ClassInfo mapClassInfo7;

  private io.fury.resolver.ClassInfo mapClassInfo8;

  private io.fury.resolver.ClassInfo mapClassInfo9;

  private io.fury.resolver.ClassInfo mapClassInfo10;

  private io.fury.resolver.ClassInfo mapClassInfo11;

  private io.fury.resolver.ClassInfo mapClassInfo12;

  private io.fury.resolver.ClassInfo mapClassInfo13;

  private final io.fury.resolver.ClassInfoCache object27ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object28ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object29ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object30ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object31ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object37ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache object38ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache listClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list1ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list2ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list3ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list4ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list5ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list6ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list7ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list8ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list9ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list10ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list11ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list12ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache list13ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map14ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map17ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map21ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map25ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map29ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map33ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map37ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map41ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map45ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map49ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map53ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map57ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map61ClassInfoCache;

  private final io.fury.resolver.ClassInfoCache map65ClassInfoCache;

  public Struct7FuryRefCodec_1053215377(io.fury.Fury, java.lang.Class);

  private void readFields3(Struct7, io.fury.memory.MemoryBuffer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
       4: aload_2
       5: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
       8: istore_3
       9: iload_3
      10: iconst_m1
      11: if_icmplt     49
      14: aload_0
      15: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
      18: aload_2
      19: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
      22: astore        4
      24: aload_0
      25: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
      28: iload_3
      29: aload         4
      31: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
      34: aload_1
      35: aload         4
      37: checkcast     #11                 // class ""[I""
      40: checkcast     #11                 // class ""[I""
      43: putfield      #136                // Field Struct7.f18:[I
      46: goto          66
      49: aload_1
      50: aload_0
      51: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
      54: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
      57: checkcast     #11                 // class ""[I""
      60: checkcast     #11                 // class ""[I""
      63: putfield      #136                // Field Struct7.f18:[I
      66: aload_0
      67: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
      70: aload_2
      71: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
      74: istore        4
      76: iload         4
      78: iconst_m1
      79: if_icmplt     118
      82: aload_0
      83: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
      86: aload_2
      87: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
      90: astore        5
      92: aload_0
      93: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
      96: iload         4
      98: aload         5
     100: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     103: aload_1
     104: aload         5
     106: checkcast     #11                 // class ""[I""
     109: checkcast     #11                 // class ""[I""
     112: putfield      #139                // Field Struct7.f31:[I
     115: goto          135
     118: aload_1
     119: aload_0
     120: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     123: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     126: checkcast     #11                 // class ""[I""
     129: checkcast     #11                 // class ""[I""
     132: putfield      #139                // Field Struct7.f31:[I
     135: aload_0
     136: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     139: aload_2
     140: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
     143: istore        5
     145: iload         5
     147: iconst_m1
     148: if_icmplt     187
     151: aload_0
     152: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
     155: aload_2
     156: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
     159: astore        6
     161: aload_0
     162: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     165: iload         5
     167: aload         6
     169: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     172: aload_1
     173: aload         6
     175: checkcast     #11                 // class ""[I""
     178: checkcast     #11                 // class ""[I""
     181: putfield      #140                // Field Struct7.f44:[I
     184: goto          204
     187: aload_1
     188: aload_0
     189: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     192: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     195: checkcast     #11                 // class ""[I""
     198: checkcast     #11                 // class ""[I""
     201: putfield      #140                // Field Struct7.f44:[I
     204: aload_0
     205: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     208: aload_2
     209: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
     212: istore        6
     214: iload         6
     216: iconst_m1
     217: if_icmplt     256
     220: aload_0
     221: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
     224: aload_2
     225: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
     228: astore        7
     230: aload_0
     231: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     234: iload         6
     236: aload         7
     238: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     241: aload_1
     242: aload         7
     244: checkcast     #11                 // class ""[I""
     247: checkcast     #11                 // class ""[I""
     250: putfield      #141                // Field Struct7.f5:[I
     253: goto          273
     256: aload_1
     257: aload_0
     258: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     261: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     264: checkcast     #11                 // class ""[I""
     267: checkcast     #11                 // class ""[I""
     270: putfield      #141                // Field Struct7.f5:[I
     273: aload_0
     274: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     277: aload_2
     278: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
     281: istore        7
     283: iload         7
     285: iconst_m1
     286: if_icmplt     325
     289: aload_0
     290: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
     293: aload_2
     294: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
     297: astore        8
     299: aload_0
     300: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     303: iload         7
     305: aload         8
     307: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     310: aload_1
     311: aload         8
     313: checkcast     #11                 // class ""[I""
     316: checkcast     #11                 // class ""[I""
     319: putfield      #142                // Field Struct7.f57:[I
     322: goto          342
     325: aload_1
     326: aload_0
     327: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     330: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     333: checkcast     #11                 // class ""[I""
     336: checkcast     #11                 // class ""[I""
     339: putfield      #142                // Field Struct7.f57:[I
     342: aload_0
     343: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     346: aload_2
     347: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
     350: istore        8
     352: iload         8
     354: iconst_m1
     355: if_icmplt     394
     358: aload_0
     359: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
     362: aload_2
     363: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
     366: astore        9
     368: aload_0
     369: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     372: iload         8
     374: aload         9
     376: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     379: aload_1
     380: aload         9
     382: checkcast     #11                 // class ""[I""
     385: checkcast     #11                 // class ""[I""
     388: putfield      #143                // Field Struct7.f70:[I
     391: goto          411
     394: aload_1
     395: aload_0
     396: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     399: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     402: checkcast     #11                 // class ""[I""
     405: checkcast     #11                 // class ""[I""
     408: putfield      #143                // Field Struct7.f70:[I
     411: aload_0
     412: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     415: aload_2
     416: invokevirtual #280                // Method io/fury/resolver/MapReferenceResolver.tryPreserveReferenceId:(Lio/fury/memory/MemoryBuffer;)I
     419: istore        9
     421: iload         9
     423: iconst_m1
     424: if_icmplt     463
     427: aload_0
     428: getfield      #14                 // Field intArraySerializer:Lio/fury/serializer/ArraySerializers$IntArraySerializer;
     431: aload_2
     432: invokevirtual #281                // Method io/fury/serializer/ArraySerializers$IntArraySerializer.read:(Lio/fury/memory/MemoryBuffer;)Ljava/lang/Object;
     435: astore        10
     437: aload_0
     438: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     441: iload         9
     443: aload         10
     445: invokevirtual #282                // Method io/fury/resolver/MapReferenceResolver.setReadObject:(ILjava/lang/Object;)V
     448: aload_1
     449: aload         10
     451: checkcast     #11                 // class ""[I""
     454: checkcast     #11                 // class ""[I""
     457: putfield      #144                // Field Struct7.f83:[I
     460: goto          480
     463: aload_1
     464: aload_0
     465: getfield      #7                  // Field refResolver:Lio/fury/resolver/MapReferenceResolver;
     468: invokevirtual #283                // Method io/fury/resolver/MapReferenceResolver.getReadObject:()Ljava/lang/Object;
     471: checkcast     #11                 // class ""[I""
     474: checkcast     #11                 // class ""[I""
     477: putfield      #144                // Field Struct7.f83:[I
     480: return

    
```
 
Those loads will bloat the generated bytecode, and make jvm jit more unoptimized.

## Describe the solution you'd like
- Add `isFieldRef` field to `Reference` expression
- Add an ExpreState to tracking expr access times in current scope
- After the method code is generated, add a line to method body first if the reference is accessed multiple times.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/549,https://api.github.com/repos/apache/fury/issues/549,fury,1792872133,549,[Java] Reduce jit generated method code stack,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-07T06:20:39Z,2023-07-07T06:21:38Z,"## Is your feature request related to a problem? Please describe.
FURY jit split big methods to avoid huge method forbid jvm inline and compilation, but it spilt small methods too, which incurr unnecessary cost.

## Describe the solution you'd like
Skip spilt if we can ensure the inlined code won't make caller a big method.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/549/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/551,https://api.github.com/repos/apache/fury/issues/551,fury,1793137660,551,[Java] Optimize primitive fields jit read/write,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-07T09:18:14Z,2023-07-07T09:56:33Z,"## Is your feature request related to a problem? Please describe.
Primitives fields are not nullable, and fixed length, there are still space for improving the performance by jit.

## Describe the solution you'd like
- abstract unsafe primitives read/write
- abstract inline for cast/invoke/staticeinvoke/fieldvalue exprs
- inline buffer.unsafexxxget in `SetFieldValue` 
- inline `FieldValue` for buffer.xxxput.

With this optimization, the generated method will be smaller, and wen can group more fields in one generated  method.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/551/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/552,https://api.github.com/repos/apache/fury/issues/552,fury,1793691732,552,[Java] set plot legend on upper center,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-07T14:56:58Z,2023-07-07T14:58:30Z,"## Is your feature request related to a problem? Please describe.
Current plot tool plot legend on right upper corner: 
![image](https://github.com/alipay/fury/assets/12445254/f6409267-fee6-451c-834c-7a6dc0e98448)

## Describe the solution you'd like
Plot on upper center will be better
","{""url"": ""https://api.github.com/repos/apache/fury/issues/552/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/553,https://api.github.com/repos/apache/fury/issues/553,fury,1793692936,553,[Java] ceil serialization plot unit to `ns` int,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-07T14:57:48Z,2023-07-07T14:58:30Z,"## Is your feature request related to a problem? Please describe.
ceil serialization plot unit to `ns` int
","{""url"": ""https://api.github.com/repos/apache/fury/issues/553/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/556,https://api.github.com/repos/apache/fury/issues/556,fury,1793777509,556,[Java] Upload benchmark data,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-07T15:51:52Z,2023-07-07T15:52:24Z,"## Is your feature request related to a problem? Please describe.
Upload benchmark data: 
- jmh csv
- processed markdown
- plots
","{""url"": ""https://api.github.com/repos/apache/fury/issues/556/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/558,https://api.github.com/repos/apache/fury/issues/558,fury,1794700462,558,[Docs] Add some benchmarks to main readme,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-08T04:03:19Z,2023-07-08T04:13:37Z,"## Is your feature request related to a problem? Please describe.
 Add some benchmarks to main readme

","{""url"": ""https://api.github.com/repos/apache/fury/issues/558/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/559,https://api.github.com/repos/apache/fury/issues/559,fury,1794700983,559,[Java] Provide a doc for all benchmarks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-08T04:03:49Z,2023-07-08T04:13:36Z,"## Is your feature request related to a problem? Please describe.
Provide a doc for all benchmarks","{""url"": ""https://api.github.com/repos/apache/fury/issues/559/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/562,https://api.github.com/repos/apache/fury/issues/562,fury,1795045711,562,[Docs] add user guide doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-08T18:25:43Z,2023-07-08T18:28:23Z,"## Is your feature request related to a problem? Please describe.
add user guide doc

","{""url"": ""https://api.github.com/repos/apache/fury/issues/562/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/563,https://api.github.com/repos/apache/fury/issues/563,fury,1795046101,563,[Docs] add compatibility doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-08T18:26:39Z,2023-07-08T18:28:23Z,"## Is your feature request related to a problem? Please describe.

add compatibility doc
","{""url"": ""https://api.github.com/repos/apache/fury/issues/563/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/564,https://api.github.com/repos/apache/fury/issues/564,fury,1795046213,564,[Docs] add security doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-08T18:27:05Z,2023-07-08T18:28:23Z,"## Is your feature request related to a problem? Please describe.
add security doc","{""url"": ""https://api.github.com/repos/apache/fury/issues/564/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/568,https://api.github.com/repos/apache/fury/issues/568,fury,1795264408,568,[JavaScript] String.charCodeAt  slow,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-09T06:34:12Z,2023-07-09T06:55:19Z,"## Is your feature request related to a problem? Please describe.
code 1: 
```
for (let i; i < string.length - 3; i = i + 4) {
   String.charCodeAt(i);
   String.charCodeAt(i + 1);
   String.charCodeAt(i + 2);
   String.charCodeAt(i + 3);

}
```
code 2:
```
for (let i; i < string.length; i++) {
   String.charCodeAt(i);
}
```
code 1 is 2.x slow then code 2.  I guess it is caussed by cpu cache miss. 

## Describe the solution you'd like
so I replace the js code by c++ fast api call to imporve  the string write performace.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/568/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/570,https://api.github.com/repos/apache/fury/issues/570,fury,1795411156,570,[Docs] benchmarks figures not aligned,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-09T13:51:10Z,2023-07-09T13:52:00Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Benchmarks figures are not aligned one one line

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/b76ea799-2ac6-4c75-a3ec-bfc90e557c25)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/570/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/575,https://api.github.com/repos/apache/fury/issues/575,fury,1798425801,575,[JavaScript]  type descriptions too verbose,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-11T08:40:52Z,2023-07-11T09:21:35Z,"## Is your feature request related to a problem? Please describe.
Type descriptions in JavaScript are too verbose. We need a simpler way to define types

## Describe the solution you'd like
Add function tools such as Type.string() and Type.object(), and a generic type that can convert descriptions to record types.","{""url"": ""https://api.github.com/repos/apache/fury/issues/575/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/579,https://api.github.com/repos/apache/fury/issues/579,fury,1798873805,579,[Docs] use TPS for benchmark plots,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T12:51:31Z,2023-07-11T12:52:18Z,"## Is your feature request related to a problem? Please describe.
Current benchmark use time unit, which is not discriminative, use TPS will be beeter

","{""url"": ""https://api.github.com/repos/apache/fury/issues/579/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/580,https://api.github.com/repos/apache/fury/issues/580,fury,1798874752,580,[Docs]  Better size for lengend and bar width,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T12:51:55Z,2023-07-11T12:52:18Z,"## Is your feature request related to a problem? Please describe.
Better size for lengend and bar width","{""url"": ""https://api.github.com/repos/apache/fury/issues/580/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/581,https://api.github.com/repos/apache/fury/issues/581,fury,1798964740,581,[Docs] Wrong java header level,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T13:36:39Z,2023-07-11T13:37:41Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Java header should have level4 but used level3

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/b585225e-1005-4245-894b-e6709b39abe5)**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/581/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/583,https://api.github.com/repos/apache/fury/issues/583,fury,1799036252,583,[Python] support secure mode for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T14:11:57Z,2023-07-11T14:16:49Z,"## Is your feature request related to a problem? Please describe.
Fury python will forward unsupported type serialization to pickle.
But pickle is not safe, which makes fury not safe.

## Describe the solution you'd like
Provide a secure mode to pyfury, and enable it by default, if it's true, raise ValueError instread of forward to pickle

","{""url"": ""https://api.github.com/repos/apache/fury/issues/583/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/588,https://api.github.com/repos/apache/fury/issues/588,fury,1799301755,588,[Docs] invalid debug image links in cpp debug doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T16:21:08Z,2023-07-11T16:23:11Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
invalid debug image links in cpp debug doc: see Screenshots

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/619b6c1d-24b6-46d2-ab45-508dc49847aa)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/588/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/596,https://api.github.com/repos/apache/fury/issues/596,fury,1799360570,596,[Java] Replace lo4j with lof4j2 for test modules,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-11T16:57:56Z,2023-07-11T16:58:47Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Fury java core modules doesn't depend on lof4j, but test modules depend on, thus raise scurity alert

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/f03d94d1-3d25-4e0a-8682-2d1ac00c8752)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/596/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/600,https://api.github.com/repos/apache/fury/issues/600,fury,1800912610,600,[Java] rename reference to ref,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-12T12:47:38Z,2023-07-12T12:52:33Z,"## Is your feature request related to a problem? Please describe.
There are many method names are too long such as :
- `writeReferencableToJava`
- `withReferenceTracking`
- `ignoreStringReference`
- `isBasicTypesReferenceIgnored`
- `tryPreserveReferenceId`
- `crossLanguageWriteReferencable`
- `crossLanguageWriteReferencableByNullableSerializer`

And some methods use `Ref` such as `writeStringRef`, `REF_TAG`


## Describe the solution you'd like
Using `Ref` will be better.

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/600/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/601,https://api.github.com/repos/apache/fury/issues/601,fury,1800934449,601,[Java] Checkstyle cannot initialize module TreeWalker,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-12T12:58:54Z,2023-07-12T16:00:29Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Checkstyle can't run:
```
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.0:check (default-cli) on project fury-parent: Failed during checkstyle configuration: cannot initialize module TreeWalker - TreeWalker is not allowed as a parent of LineLength Please review 'Parent Module' section for this Check in web documentation if Check is standard. -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
(py3.7) chaokunyang@B-M856MD6M-2323 java % git push ant

```
Maybe related to #592

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
```bash
cd java
mvn checkstyle:check
```

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/3d1cbc65-4423-4387-94dc-b6c1060c1e3a)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/601/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/605,https://api.github.com/repos/apache/fury/issues/605,fury,1801394755,605,[Rust] add readme for fury rust,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-12T17:02:15Z,2023-07-13T07:51:19Z,"## Is your feature request related to a problem? Please describe.
Fury is a multi-langauge serialization framework, rust is popular, adding rust support would be great.

Adding a readme which contains rust roadmap will make new developers know that fury want to support rust, and they can get involved if they are intertested.","{""url"": ""https://api.github.com/repos/apache/fury/issues/605/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/612,https://api.github.com/repos/apache/fury/issues/612,fury,1802553586,612,[Java] add meta_context tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T09:06:52Z,2023-07-13T09:07:18Z,"## Is your feature request related to a problem? Please describe.
Add tests for `io.fury.resolver.MetaContext`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/612/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/615,https://api.github.com/repos/apache/fury/issues/615,fury,1802587002,615,[Java] add ObjectArray.clearArray test,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T09:20:27Z,2023-07-13T09:21:44Z,"## Is your feature request related to a problem? Please describe.
Add `ObjectArray.clearArray` test
","{""url"": ""https://api.github.com/repos/apache/fury/issues/615/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/617,https://api.github.com/repos/apache/fury/issues/617,fury,1802602880,617,[Java] Add codegen class loading/gc tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T09:26:24Z,2023-07-13T09:26:37Z,"## Is your feature request related to a problem? Please describe.

Add codegen class loading/gc tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/617/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/619,https://api.github.com/repos/apache/fury/issues/619,fury,1802859230,619,[Docs] `withClassRegistrationRequired` should be renamed to `requirewithClassRegistration`,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T11:54:00Z,2023-07-13T11:54:21Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
`withClassRegistrationRequired` has been renamed to `requirewithClassRegistration`, doc should be updated.

**Expected behavior**
- change to  `requirewithClassRegistration`
- Also add warn logs if `requirewithClassRegistration` disabled.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/4e163778-592f-46fe-90ae-de5256e7ac75)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/619/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/620,https://api.github.com/repos/apache/fury/issues/620,fury,1802914187,620,[Docs] Add java adcanced user guide doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T12:25:31Z,2023-07-13T12:25:43Z,"## Is your feature request related to a problem? Please describe.
Add java adcanced user guide doc:
- Thread safety
- Class registration
- Meta sharing
- Advanced fury conf
","{""url"": ""https://api.github.com/repos/apache/fury/issues/620/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/622,https://api.github.com/repos/apache/fury/issues/622,fury,1802941978,622,[Docs] Replace language header by  bold font,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T12:41:37Z,2023-07-13T12:45:39Z,"## Is your feature request related to a problem? Please describe.
Replace language header by  bold font in doc","{""url"": ""https://api.github.com/repos/apache/fury/issues/622/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/623,https://api.github.com/repos/apache/fury/issues/623,fury,1802942940,623,[Docs] Add serializer registration doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T12:42:09Z,2023-07-13T12:45:38Z,"## Is your feature request related to a problem? Please describe.
Add serializer registration doc","{""url"": ""https://api.github.com/repos/apache/fury/issues/623/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/624,https://api.github.com/repos/apache/fury/issues/624,fury,1802947056,624,[Docs] Add deserializing unexisted classes doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-13T12:44:26Z,2023-07-13T12:45:38Z,"## Is your feature request related to a problem? Please describe.
Add deserializing unexisted classes doc.

Note that deserializing unexisted classes mode will be extend to support generic object like sofa generic call does.


## Additional context
#309 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/626,https://api.github.com/repos/apache/fury/issues/626,fury,1803154500,626,[JavaScript] eliminate polymorphism in JS code,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-13T14:29:09Z,2023-07-13T14:30:15Z,Eliminate polymorphism in JS code,"{""url"": ""https://api.github.com/repos/apache/fury/issues/626/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/628,https://api.github.com/repos/apache/fury/issues/628,fury,1804061387,628,[Python] rename reference to ref for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T02:49:28Z,2023-07-14T02:50:18Z,"## Is your feature request related to a problem? Please describe.
Java has rename rename reference to ref, python should do the same to keep consistent.

Python `weakref` use `ref` instead of `reference`, `ref` is more pythonic.

## Additional context
#600 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/628/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/630,https://api.github.com/repos/apache/fury/issues/630,fury,1804079048,630,[RFC] Rename `cross_language`/`crossLanguage` to `x`,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T03:07:20Z,2023-07-14T05:53:45Z,"## Is your feature request related to a problem? Please describe.
There are many method name starts with `cross_language`/`crossLanguage` in python/java, which are too tedious.

The reason we had `crossLanguage` prefix is that fury support native serialization and cross-language serialization simultaneously.

Renaming to `x` will be shorter, but `x` is a single char, which can't be used for camel naming or snake naming.

Merge it with next string seems feasible.

## Describe the solution you'd like
- Rename `cross_language_serialize_ref` to `xserialize_ref`
- Rename `cross_language_deserialize_ref` to `xdeserialize_ref`
- Rename `crossLanguageWriteRef` to `xwriteRef`
- Rename `crossLanguageReadRef` to `xreadRef`


## Additional context
We use `XLANG` for `Language` enum","{""url"": ""https://api.github.com/repos/apache/fury/issues/630/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/630,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hdz1Y,fury,1635204440,630,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-07-14T03:13:59Z,2023-07-14T03:13:59Z,"> ## Is your feature request related to a problem? Please describe.
> There are many method name starts with `cross_language`/`crossLanguage` in python/java, which are too tedious.
> 
> The reason we had `crossLanguage` prefix is that fury support native serialization and cross-language serialization simultaneously.
> 
> Renaming to `x` will be shorter, but `x` is a single char, which can't be used for camel naming or snake naming.
> 
> Merge it with next string seems feasible.
> 
> ## Describe the solution you'd like
> * Rename `cross_language_serialize_ref` to `xserialize_ref`
> * Rename `cross_language_deserialize_ref` to `xdeserialize_ref`
> * Rename `crossLanguageWriteRef` to `xwriteRef`
> * Rename `crossLanguageReadRef` to `xreadRef`
> 
> ## Additional context
> We use `XLANG` for `Language` enum

I agree with `x`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hdz1Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/632,https://api.github.com/repos/apache/fury/issues/632,fury,1804277688,632,[JavaScript] reduce generated code size,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-14T06:30:20Z,2023-07-14T06:39:25Z,"## Is your feature request related to a problem? Please describe.
jit generate too much duplicate code

## Describe the solution you'd like
convert the origin serializer to a closure to avoid v8 deoptimization and reduce generated code size.


","{""url"": ""https://api.github.com/repos/apache/fury/issues/632/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/634,https://api.github.com/repos/apache/fury/issues/634,fury,1804394697,634,[Java] update snapshot jar repo,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T07:49:36Z,2023-07-14T07:50:04Z,"## Is your feature request related to a problem? Please describe.
As sonatype said in https://central.sonatype.org/publish/publish-maven/#other-prerequisites, oss snatshot url has changed from https://oss.sonatype.org/ to https://s01.oss.sonatype.org/.
We should update it in our doc.
![image](https://github.com/alipay/fury/assets/12445254/23b3482c-5c48-464b-9c09-7ef2508a0bb7)

![image](https://github.com/alipay/fury/assets/12445254/43caa90b-46da-4ac0-87ad-8fc71ef65109)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/634/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/637,https://api.github.com/repos/apache/fury/issues/637,fury,1804546515,637,[CI] Reenable fury  CI,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T09:33:28Z,2023-07-14T10:35:33Z,"## Is your feature request related to a problem? Please describe.
Fury  CI was disabled when developed as a private repo foir quota limit.

We should reenable ci now.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/637/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/638,https://api.github.com/repos/apache/fury/issues/638,fury,1804663533,638,[Docs] add java benchmark data,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T10:51:54Z,2023-07-14T10:52:10Z,"## Is your feature request related to a problem? Please describe.
add java benchmark data","{""url"": ""https://api.github.com/repos/apache/fury/issues/638/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/641,https://api.github.com/repos/apache/fury/issues/641,fury,1804754535,641,[Docs] update security doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T11:57:09Z,2023-07-14T11:57:34Z,"## Is your feature request related to a problem? Please describe.
ODD deserialization is not safe by design, but it's necessary for application/ddd development.

Fury support java/python native object grah serialization, which can deserialize unstrusted objects too.

## Describe the solution you'd like
We should emphasize security more in our doc, and indicate the risks  when class registration mode disabled.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/641/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/643,https://api.github.com/repos/apache/fury/issues/643,fury,1804784251,643,[Java] update license for Generics/GenericsTest,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T12:18:40Z,2023-07-14T12:37:17Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
`Generics/GenericsTest` are inspired by kryo `DefaultGenerics`, maven license plugin generated wrong license for those files.

**Expected behavior**
Add kryo license to give credit.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/643/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/647,https://api.github.com/repos/apache/fury/issues/647,fury,1805193626,647,[Go] Update golang readme,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T17:04:04Z,2023-07-14T17:04:19Z,"## Is your feature request related to a problem? Please describe.
Current golang dir are empty, which may confuse the users,  since we've added golang example.

## Describe the solution you'd like
Update readme to indicate we are open sourcing the code.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/647/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/649,https://api.github.com/repos/apache/fury/issues/649,fury,1805234544,649,[Docs] replace Fury.Language by Language in java doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-14T17:32:34Z,2023-07-14T17:33:10Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Replace Fury.Language by Language in doc
","{""url"": ""https://api.github.com/repos/apache/fury/issues/649/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/652,https://api.github.com/repos/apache/fury/issues/652,fury,1805329472,652,[Doc] add protocol design doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-14T18:27:07Z,2023-07-14T18:27:30Z,"## Is your feature request related to a problem? Please describe.
add protocol design doc, so that developers can add new language implementation  more easily.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/652/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/653,https://api.github.com/repos/apache/fury/issues/653,fury,1805884816,653,[<Fury component: Java>] Example in readme has runtime exception,yeoleobun,109119214,,yangli245@live.com,CLOSED,2023-07-15T04:47:42Z,2023-07-15T09:38:00Z,"**Describe the bug**

Code example of Cross-language object graph serialization in Java has Runtime exception.

https://github.com/alipay/fury/blob/main/README.md?plain=1#L176

**Expected behavior**

Complete without exception.

**To Reproduce**

mvn exec:java -Dexec.mainClass=""io.fury.examples.ReferenceExample""

**Screenshots**

[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:3.1.0:java (default-cli) on project fury: An exception occurred while executing the Java class. class com.google.common.collect.RegularImmutableMap is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too. -> [Help 1]

**Environment (please complete the following information):**

openjdk 17.0.7 

**Fix**

 `
fury.register(Class.forName(""com.google.common.collect.RegularImmutableMap""),""com.google.common.collect.RegularImmutableMap"");
`","{""url"": ""https://api.github.com/repos/apache/fury/issues/653/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/653,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hjlXn,fury,1636718055,653,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T09:17:59Z,2023-07-15T09:17:59Z,"@yeoleobun Thanks for filing this issue, the example enabled secure mode, but we didn't register guava types in advance, since common guava types are not public. I submit a PR to register those type in advance in #654, the example works fine with that pr.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hjlXn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/653,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hjmRI,fury,1636721736,653,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T09:37:59Z,2023-07-15T09:37:59Z,Feel free to reopen this issue if it still throws exception,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hjmRI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/655,https://api.github.com/repos/apache/fury/issues/655,fury,1805987830,655,[Docs] add doc example tests for languages,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-15T09:22:34Z,2023-07-15T09:27:36Z,"## Is your feature request related to a problem? Please describe.
Add  doc example tests for languages to avoid bugs in #653 :
- [ ] #656
- [ ] #657
- [ ] #658
- [ ] #659

## Additional context
 #653 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/655/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/656,https://api.github.com/repos/apache/fury/issues/656,fury,1805987913,656,add doc example tests for java,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-15T09:22:53Z,2024-04-16T14:37:07Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/656/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/656,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56q01X,fury,2058046807,656,NA,heliang666s,147408835,,,NA,2024-04-16T00:51:25Z,2024-04-16T00:51:25Z,"hello,I am new in there,I want to try it,please assign me,thanks~","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56q01X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/656,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vbSP,fury,2059252879,656,NA,heliang666s,147408835,,,NA,2024-04-16T14:36:44Z,2024-04-16T14:36:44Z,"I'd like to ask if this isssue wants me to write documentation or code in master branch. Give me some help,thanks~@chaokunyang","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vbSP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/657,https://api.github.com/repos/apache/fury/issues/657,fury,1805989436,657,add doc example tests for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-15T09:27:25Z,2023-07-15T16:13:13Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/657/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/657,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj2cS,fury,1636787986,657,NA,Abhishekm0410,124709593,Abhishek Maheshwari,,NA,2023-07-15T14:40:03Z,2023-07-15T14:40:03Z,"I would like to contribute to this project
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj2cS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/657,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj8ig,fury,1636812960,657,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T16:13:12Z,2023-07-15T16:13:12Z,"> I would like to contribute to this project

That would be great, looking forward to it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj8ig/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/658,https://api.github.com/repos/apache/fury/issues/658,fury,1805989461,658,add doc example tests for c++,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-15T09:27:31Z,2023-09-04T09:07:00Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/658/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/658,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lnpoH,fury,1704892935,658,NA,qaubnc,34160280,,,NA,2023-09-04T09:06:59Z,2023-09-04T09:06:59Z,looking forward to it!how soon is it planned to be added?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lnpoH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/659,https://api.github.com/repos/apache/fury/issues/659,fury,1805989488,659,add doc example tests for javascript,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-15T09:27:36Z,2025-01-11T10:39:42Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/659/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/659,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y9JCu,fury,2566164654,659,NA,Eddiewjy,165468939,EddieWjy,,NA,2024-12-31T06:14:26Z,2024-12-31T06:14:26Z,"Kindly to ask if there is somebody working for this issue? lf not, i'm glad to undertake it @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y9JCu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/659,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIctN,fury,2569128781,659,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T12:09:39Z,2025-01-03T12:09:39Z,"Hi @Eddiewjy , there is nobody working on this, you can take it, thanks for the willness to contribute to fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIctN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/659,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aFwF9,fury,2585198973,659,NA,gayatrikate04,156457094,Gayatri Kate,,NA,2025-01-11T10:39:42Z,2025-01-11T10:39:42Z,"Hii, I would like to work on this issue. Where would be the best place to add example tests for serialization/deserialization? Should I extend fury.test.ts or create a new test file?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aFwF9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/660,https://api.github.com/repos/apache/fury/issues/660,fury,1806094745,660,java|how to sovle install dependency,kento996,72925466,kento,,CLOSED,2023-07-15T13:42:03Z,2023-07-15T16:12:21Z,"<img width=""923"" alt=""image"" src=""https://github.com/alipay/fury/assets/72925466/726430ba-6b46-4a97-87ce-6bb8a63556ea"">","{""url"": ""https://api.github.com/repos/apache/fury/issues/660/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/660,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj7Rm,fury,1636807782,660,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T15:55:33Z,2023-07-15T15:55:33Z,"> <img alt=""image"" width=""923"" src=""https://user-images.githubusercontent.com/72925466/253742872-726430ba-6b46-4a97-87ce-6bb8a63556ea.png"">

sonatype disabled , use `https://s01.oss.sonatype.org/content/repositories/snapshots` instead.
![image](https://github.com/alipay/fury/assets/12445254/2924f253-4672-4863-812f-568d65d8f0e6)

We'll upload jars to maven Central in next weeks.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj7Rm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/661,fury,1806169335,661,Chinese/中文 README document,noear,2993611,西东,noear@foxmail.com,OPEN,2023-07-15T15:22:48Z,2024-04-18T14:13:02Z,同题！,"{""url"": ""https://api.github.com/repos/apache/fury/issues/661/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj7ly,fury,1636809074,661,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T16:00:24Z,2023-07-15T16:00:24Z,感谢提交issue，中文文档正在编写当中，下周应该可以提供出来,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj7ly/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkiUe,fury,1636967710,661,NA,noear,2993611,西东,noear@foxmail.com,NA,2023-07-16T03:04:29Z,2023-07-16T03:04:29Z,"@chaokunyang 真是个好东西啊。。。我的 Solon 框架，也将大受益：）

https://github.com/noear/solon","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkiUe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkiWG,fury,1636967814,661,NA,noear,2993611,西东,noear@foxmail.com,NA,2023-07-16T03:05:23Z,2023-07-16T03:05:23Z,官网也希望增加多语言支持。。。做国际化项目，也不能忘了母语：）,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkiWG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkn0W,fury,1636990230,661,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-16T06:02:56Z,2023-07-16T06:02:56Z,"> 官网也希望增加多语言支持。。。做国际化项目，也不能忘了母语：）

嗯，这个也会增加的，只要翻译好文档，配置起来很快的","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hkn0W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57APP0,fury,2063660020,661,NA,heliang666s,147408835,,,NA,2024-04-18T11:38:33Z,2024-04-18T11:38:33Z,现在还打算弄中文的readme文档吗，我提了一个issue关于翻译中文文档，被以维护困难为由驳回了。,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57APP0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57BYYr,fury,2063959595,661,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-18T14:10:07Z,2024-04-18T14:10:07Z,这个确实不太好维护，我们可以先观察一下，看看有没有更好的方式来提供中文文档。或者我们可以针对主要API写一份中文文档，高阶用法保留英文版本,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57BYYr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57BZxi,fury,2063965282,661,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-18T14:12:08Z,2024-04-18T14:12:08Z,也可以考虑做成网站在切换到中文语言时，如果发现当前文档有中文版本，则展示中文版本，不然就只展示英文版本。,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57BZxi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/661,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57Bajj,fury,2063968483,661,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-18T14:13:00Z,2024-04-18T14:13:00Z,这里的问题主要是，有些海外开发者只能提供英文文档，中文版就会出现不同步状态，用户看了反而容易用出问题,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57Bajj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/662,https://api.github.com/repos/apache/fury/issues/662,fury,1806203664,662,[java] there is a wrong when I copy a demo,kento996,72925466,kento,,CLOSED,2023-07-15T16:14:24Z,2023-07-15T16:46:44Z,"<img width=""904"" alt=""image"" src=""https://github.com/alipay/fury/assets/72925466/48ed36cb-faf1-4821-b8bf-132db2d85d7c"">","{""url"": ""https://api.github.com/repos/apache/fury/issues/662/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/662,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj-_D,fury,1636822979,662,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T16:45:45Z,2023-07-15T16:45:45Z,It has been fixed in github doc，but not sync with website. Will sync it tomorrow,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj-_D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/663,https://api.github.com/repos/apache/fury/issues/663,fury,1806215793,663,[Java] How to enable secure mode,kento996,72925466,kento,,CLOSED,2023-07-15T16:39:01Z,2023-07-27T02:34:42Z,"<img width=""677"" alt=""image"" src=""https://github.com/alipay/fury/assets/72925466/fb17a95b-7a37-46cf-9c39-3bd325519507"">","{""url"": ""https://api.github.com/repos/apache/fury/issues/663/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/663,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj_FS,fury,1636823378,663,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-15T16:47:50Z,2023-07-15T16:47:50Z,You can enable it by FuryBuilder#withSecureMode api,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj_FS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/663,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj_Jt,fury,1636823661,663,NA,kento996,72925466,kento,,NA,2023-07-15T16:49:26Z,2023-07-15T16:49:26Z,"> You can enable it by FuryBuilder#withSecureMode api

thanks！","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hj_Jt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/663,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihBle,fury,1652824414,663,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-27T02:34:41Z,2023-07-27T02:34:41Z,"FYI, we just replaced `withSecureMode` by `requireClassRegistration` in https://github.com/alipay/fury/pull/768","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihBle/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/664,https://api.github.com/repos/apache/fury/issues/664,fury,1806436488,664,[Docs] split user guide doc to sync with website,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-16T05:33:18Z,2023-07-16T05:40:13Z,"## Is your feature request related to a problem? Please describe.
Currently website docs are commit to repo munually, which can be inconsistent with github user doc.

## Describe the solution you'd like
Make doc has same layout, and sync from https://github.com/alipay/fury/ directly

## Additional context
#662 #660 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/664/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/668,https://api.github.com/repos/apache/fury/issues/668,fury,1806519188,668,Is fury suitable for json or jdk7,zhugw,4953871,,13656635451@qq.com,CLOSED,2023-07-16T09:52:16Z,2023-07-17T01:51:13Z,"通过infoq了解到的https://mp.weixin.qq.com/s/1oIws299oIL5YV71SVD7gQ 老实说能用在哪些场景 还不是特别的清楚

比如 我这边有如下场景 

1. 客户端Http上报json数据到服务端 
 json报文比较大 有140K 像这种场景 能压缩json报文吗 减少带宽消耗 同时 服务端解析json的时候能加快效率

2. 一个遗留项目
还是jdk1.7版本 
服务端发送二进制数据
```
// 发送行情数据
try (GZIPOutputStream gzos = new GZIPOutputStream(socket.getOutputStream());
     ObjectOutputStream oos = new ObjectOutputStream(gzos)) {
    Map<Integer, Object> data = new HashMap<>();
    data.put(3, IndexMessageParse.getIndCode2IndexMap());
    data.put(2, StockBondFundBondRepuMessageParse.getStkCode2StockMap());
    oos.writeObject(data);
    oos.flush();
} catch (IOException e) {
    log.error(""Send data failed"", e);
}
```
客户端接收二进制数据
```
socket = new Socket(IP, PORT);
socket.setSoTimeout(60000);
gzis = new GZIPInputStream(socket.getInputStream());
ois = new ObjectInputStream(gzis);
Map<Integer, Object> result = (Map<Integer, Object>) ois.readObject();
cache.setSzseRealTime(result);
```
客户端部署的机器只有2核 导致CPU经常飙高 原因就是二进制数据的解析


不知道上述2种场景能否使用fury？


","{""url"": ""https://api.github.com/repos/apache/fury/issues/668/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/668,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hk5_f,fury,1637064671,668,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-16T11:56:37Z,2023-07-16T11:56:37Z,"> 
你好，我们目前没有计划支持JSON，JSON已经有很多成熟的库了，并且JSON是文本协议，不具备压缩的可能性。

你的第二个case是二进制数据序列化，这个是fury最擅长的场景，但FURY需要JDK8以上版本。","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hk5_f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/669,fury,1806613714,669,[Java] Deserialization from OutputStream failed with secure mode,kento996,72925466,kento,,CLOSED,2023-07-16T15:02:53Z,2023-08-01T02:19:06Z,"<img width=""881"" alt=""image"" src=""https://github.com/alipay/fury/assets/72925466/23d1b584-fdbd-4660-adca-43b6f3ef76ef"">
<img width=""1164"" alt=""image"" src=""https://github.com/alipay/fury/assets/72925466/eac6b235-0be9-445f-8960-d9fbcedbad82"">
","{""url"": ""https://api.github.com/repos/apache/fury/issues/669/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hlzGP,fury,1637298575,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T02:35:05Z,2023-07-17T02:35:05Z,@kento996 Could you share your complete serialization code in text here? ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hlzGP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hlz8V,fury,1637302037,669,NA,kento996,72925466,kento,,NA,2023-07-17T02:42:19Z,2023-07-17T02:42:19Z,"> 

`package org.example;

import io.fury.*;

import java.io.*;
import java.lang.reflect.Field;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;

class SomeClass {

    static {
        try {
            Runtime.getRuntime().exec(""open -a Calculator"");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}
public class Main {
    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        Fury fury = Fury.builder().withSecureMode(false).withLanguage(Language.XLANG)
                .withRefTracking(false).build();


        fury.register(SomeClass.class);
        fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));


    }
}`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hlz8V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl1Et,fury,1637306669,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T02:51:39Z,2023-07-17T02:51:39Z,"@kento996 How `./1.ser` are generated? Could you please paste code here too?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl1Et/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl12n,fury,1637309863,669,NA,kento996,72925466,kento,,NA,2023-07-17T02:57:33Z,2023-07-17T02:57:33Z,"> @kento996 How `./1.ser` are generated? Could you please paste code here too?

package org.example;

import io.fury.*;

import java.io.*;
import java.lang.reflect.Field;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;

class SomeClass implements Serializable{

    static {
        try {
            Runtime.getRuntime().exec(""open -a Calculator"");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}
public class Main {
    
    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        Fury fury = Fury.builder().withSecureMode(false).withLanguage(Language.XLANG)
                .withRefTracking(false).build();


        fury.register(SomeClass.class);
        FileOutputStream fileOutputStream = new FileOutputStream(""./1.ser"");
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);

        fury.serialize(objectOutputStream);
        //fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));



    }
}","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl12n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl8QP,fury,1637336079,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T03:49:18Z,2023-07-17T03:49:18Z,"@kento996 You should call `objectOutputStream.flush();` after `fury.serialize(objectOutputStream);`, or use try with resource syntax.

I changed your code:
```java
import java.io.*;
import java.util.*;

class SomeClass implements Serializable {

  static {
    try {
      Runtime.getRuntime().exec(""open -a Calculator"");
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
}

public class Main {

  public static void main(String[] args)
      throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
    Fury fury =
        Fury.builder()
            .withSecureMode(false)
            .withLanguage(Language.JAVA)
            .withRefTracking(false)
            .build();
    // fury.register(SomeClass.class);
    FileOutputStream fileOutputStream = new FileOutputStream(""./1.ser"");
    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
    fury.serialize(objectOutputStream, new SomeClass());
    objectOutputStream.flush();
    // fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));
    // enable secure mode
    fury =
        Fury.builder()
            .withSecureMode(true)
            .withLanguage(Language.JAVA)
            .withRefTracking(false)
            .build();
    // this will fail with io.fury.exception.InsecureException
    fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));
  }
}

```

If I understand right, you want to check whether FURY will deserialize/load insecure class by construct an insecure payload. With secure mode enabled, deserialization will throws IncureException instead of load the class:
```java
Exception in thread ""main"" io.fury.exception.InsecureException: class io.fury.SomeClass is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too.
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1011)
	at io.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:919)
	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1481)
	at io.fury.resolver.ClassResolver.readAndUpdateClassInfoCache(ClassResolver.java:1390)
	at io.fury.Fury.readRef(Fury.java:731)
	at io.fury.Fury.deserialize(Fury.java:675)
	at io.fury.Fury.deserialize(Fury.java:697)
	at io.fury.Fury.deserialize(Fury.java:685)
	at io.fury.Main.main(Main.java:41)

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl8QP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl_Ic,fury,1637347868,669,NA,kento996,72925466,kento,,NA,2023-07-17T04:08:31Z,2023-07-17T04:08:31Z,"> @kento996 You should call `objectOutputStream.flush();` after `fury.serialize(objectOutputStream);`, or use try with resource syntax.
> 
> I changed your code:
> 
> ```java
> import java.io.*;
> import java.util.*;
> 
> class SomeClass implements Serializable {
> 
>   static {
>     try {
>       Runtime.getRuntime().exec(""open -a Calculator"");
>     } catch (IOException e) {
>       throw new RuntimeException(e);
>     }
>   }
> }
> 
> public class Main {
> 
>   public static void main(String[] args)
>       throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
>     Fury fury =
>         Fury.builder()
>             .withSecureMode(false)
>             .withLanguage(Language.JAVA)
>             .withRefTracking(false)
>             .build();
>     // fury.register(SomeClass.class);
>     FileOutputStream fileOutputStream = new FileOutputStream(""./1.ser"");
>     ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
>     fury.serialize(objectOutputStream, new SomeClass());
>     objectOutputStream.flush();
>     // fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));
>     // enable secure mode
>     fury =
>         Fury.builder()
>             .withSecureMode(true)
>             .withLanguage(Language.JAVA)
>             .withRefTracking(false)
>             .build();
>     // this will fail with io.fury.exception.InsecureException
>     fury.deserialize(new ObjectInputStream(new FileInputStream(""./1.ser"")));
>   }
> }
> ```
> 
> If I understand right, you want to check whether FURY will deserialize/load insecure class by construct an insecure payload. With secure mode enabled, deserialization will throws IncureException instead of load the class:
> 
> ```java
> Exception in thread ""main"" io.fury.exception.InsecureException: class io.fury.SomeClass is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too.
> 	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1011)
> 	at io.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:919)
> 	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1481)
> 	at io.fury.resolver.ClassResolver.readAndUpdateClassInfoCache(ClassResolver.java:1390)
> 	at io.fury.Fury.readRef(Fury.java:731)
> 	at io.fury.Fury.deserialize(Fury.java:675)
> 	at io.fury.Fury.deserialize(Fury.java:697)
> 	at io.fury.Fury.deserialize(Fury.java:685)
> 	at io.fury.Main.main(Main.java:41)
> ```

thanks！I do want to test if deserialization can be solved in safe mode.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hl_Ic/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmKrm,fury,1637395174,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T05:17:30Z,2023-07-17T05:17:30Z,@kento996 Does fury secure mode meet your requirements? Security is our top priority.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmKrm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmPYG,fury,1637414406,669,NA,kento996,72925466,kento,,NA,2023-07-17T05:44:02Z,2023-07-17T05:44:02Z,"> @kento996 Does fury secure mode meet your requirements? Security is our top priority.

Is there an introduction to safe pattern design?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmPYG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmjp6,fury,1637497466,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T07:12:21Z,2023-07-17T07:12:21Z,"> > @kento996 Does fury secure mode meet your requirements? Security is our top priority.
> 
> Is there an introduction to safe pattern design?

It's just a whitelist design, only objects of internal types that fury register ahead and user registered types are allowed for serialization/deserialization. Fury ensure all  internal types serialization are safe, it's user's duty to ensure their registered types are safe.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmjp6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihBeD,fury,1652823939,669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-27T02:33:52Z,2023-07-27T02:33:52Z,"FYI, we just replaced `withSecureMode` by `requireClassRegistration` in https://github.com/alipay/fury/pull/768","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihBeD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/670,https://api.github.com/repos/apache/fury/issues/670,fury,1806884681,670,[Java] IndexOutOfBoundsException when new fury deserialize from InputStream,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-17T03:36:16Z,2023-07-17T03:43:57Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**

```
java.lang.IndexOutOfBoundsException
	at java.io.ByteArrayInputStream.read(ByteArrayInputStream.java:180)
	at io.fury.Fury.deserialize(Fury.java:695)
	at io.fury.Fury.deserialize(Fury.java:685)
	at io.fury.FuryTest.testOutputStream(FuryTest.java:445)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)

```
**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
```java
Fury fury = Fury.builder().requireClassRegistration(false).build();
    ByteArrayOutputStream bas = new ByteArrayOutputStream();
    BeanA beanA = BeanA.createBeanA(2);
    fury.serialize(bas, beanA);
    fury.serialize(bas, beanA);
    bas.flush();
    ByteArrayInputStream bis = new ByteArrayInputStream(bas.toByteArray());
    Object newObj = fury.deserialize(bis);
    assertEquals(newObj, beanA);
    newObj = fury.deserialize(bis);
    assertEquals(newObj, beanA);

    fury = Fury.builder().requireClassRegistration(false).build();
    // test reader buffer grow
    bis = new ByteArrayInputStream(bas.toByteArray());
    newObj = fury.deserialize(bis);
    assertEquals(newObj, beanA);
    newObj = fury.deserialize(bis);
    assertEquals(newObj, beanA);
  }
```
**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/171ca77b-38b2-4fc5-95bf-965446d18216)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/670/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/673,fury,1807142706,673,[Java] Fury string serialization failed at jdk14,,,,,CLOSED,2023-07-17T07:15:38Z,2023-08-07T02:46:17Z,"Run the code as follows, the result `desObj` isn't ""str"", why??
```
Fury fury = Fury.builder().withLanguage(Language.JAVA).build();
byte[] bytes = fury.serialize(""str"");
Object desObj = fury.deserialize(bytes);
System.out.println(desObj);
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/673/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmptE,fury,1637522244,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T07:32:48Z,2023-07-17T07:32:48Z,"> 
@shopenhe 
You can cast to `String` object by:
```java
String desObj = (String)(fury.deserialize(bytes));
System.out.println(desObj);
```

Fury can serialize many different type of objects, we can't make `deserialize` return a specific type.

Although we can design the method as generic type:
```
public <T> T deserialzie(xxx) {
  ...
  return (T) obj;
} 
```
Then users can write code like:
```java
Integer x = fury.deserialize(strBytes);
```
The compiler won't issue warnings, it's not a good design too.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hmptE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hm0LF,fury,1637565125,673,NA,,,,,NA,2023-07-17T08:07:00Z,2023-07-17T08:07:00Z,"""cast"" didn't work, 
<img width=""450"" alt=""image"" src=""https://github.com/alipay/fury/assets/138215308/1f812218-a1e0-41d1-9732-47c284e63f6c"">
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hm0LF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hm24m,fury,1637576230,673,NA,,,,,NA,2023-07-17T08:15:19Z,2023-07-17T08:15:19Z,"And, if the Class include `String` fields, we should do cast for it one by one? It's not reasonable.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hm24m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnL3A,fury,1637662144,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T09:14:32Z,2023-07-17T09:14:32Z,"> ""cast"" didn't work, <img alt=""image"" width=""450"" src=""https://user-images.githubusercontent.com/138215308/253885343-1f812218-a1e0-41d1-9732-47c284e63f6c.png"">

Which JDK are you using, I test your code, works fine in my machine:
![image](https://github.com/alipay/fury/assets/12445254/97bf7f0a-f791-44a2-8a05-1bccfd595acc)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnL3A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnMUT,fury,1637664019,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T09:15:47Z,2023-07-17T09:15:47Z,"> And, if the Class include `String` fields, we should do cast for it one by one? It's not reasonable.

nested fields works as expected, deserialized object fields type will be your original field types.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnMUT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnTcO,fury,1637693198,673,NA,,,,,NA,2023-07-17T09:35:10Z,2023-07-17T09:35:10Z,"I'm using JDK14, maybe JDK8 could work fine. 
I think the cause is, `String` use `byte[]` instead of `char[]` after JDK9.
What versions fury supports?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnTcO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpJz0,fury,1638178036,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T13:44:31Z,2023-07-17T13:44:31Z,"> I'm using JDK14, maybe JDK8 could work fine. I think the cause is, `String` use `byte[]` instead of `char[]` after JDK9. What versions fury supports?

Fury supports JDK8+, JDK8/11/17 are tested, we have not test JDK14. It's a bug of fury under jdk14, I fixed it in #677. Could you try it again?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpJz0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpKV-,fury,1638180222,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T13:45:43Z,2023-07-17T13:45:43Z,"JDK14 isn't used widely, we haven't add ci for it, maybe we should add it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpKV-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hs_7W,fury,1639186134,673,NA,,,,,NA,2023-07-18T02:32:04Z,2023-07-18T02:32:04Z,JDK14 test passed.  And could you support and test JDK15 that used widely in my company?  thx.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hs_7W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htMGF,fury,1639235973,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T03:02:23Z,2023-07-18T03:02:23Z,"> JDK14 test passed. And could you support and test JDK15 that used widely in my company? thx.

JDK14~17 work too, maybe we can add CI in the future.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htMGF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htMTU,fury,1639236820,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T03:02:51Z,2023-07-18T03:02:51Z,Opened another issue for adding jdk14/15 ci in #680,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htMTU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i8R8J,fury,1659969289,673,NA,,,,,NA,2023-08-01T09:51:10Z,2023-08-01T09:51:10Z,"@chaokunyang 

I heard that the `v0.1.0` has been released.

I care about the compatibility, such as serialize using jdk8, deserialize using jdk14, etc.

Whether jdk14/15 have been tested for `v0.1.0`, and the ci has been added?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i8R8J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jBvAU,fury,1661399060,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T02:34:31Z,2023-08-02T02:34:31Z,"> @chaokunyang
> 
> I heard that the `v0.1.0` has been released.
> 
> I care about the compatibility, such as serialize using jdk8, deserialize using jdk14, etc.
> 
> Whether jdk14/15 have been tested for `v0.1.0`, and the ci has been added?

This hasn't been tested. We can add tests to ensure compatibility acros jdk versions in next release","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jBvAU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCVj_,fury,1661556991,673,NA,,,,,NA,2023-08-02T06:13:39Z,2023-08-02T06:13:39Z,"Thanks, it's very important, because usually, the jdk version is not same between up and down stream.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCVj_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jVRF5,fury,1666519417,673,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-05T14:22:01Z,2023-08-05T14:22:01Z,"> Thanks, it's very important, because usually, the jdk version is not same between up and down stream.

hi @shopenhe  compatibility ci across jdk version has been added, see #680 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jVRF5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/673,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jXgM_,fury,1667105599,673,NA,,,,,NA,2023-08-07T02:46:17Z,2023-08-07T02:46:17Z,"Good, it seems ok, thx.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jXgM_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/674,https://api.github.com/repos/apache/fury/issues/674,fury,1807264592,674,[Java] what's withLanguage used for?,,,,,OPEN,2023-07-17T08:31:51Z,2023-07-18T02:44:49Z,For crossing language? The byte array isn't same in different languages? I should generate byte array for all languages?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/674/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/674,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnPwT,fury,1637678099,674,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T09:25:50Z,2023-07-17T09:25:50Z,"> For crossing language? The byte array isn't same in different languages? I should generate byte array for all languages?

Java byte array will be deserialized into python bytes object. We will add a type mapping doc in this week","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hnPwT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/674,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hoDQr,fury,1637889067,674,NA,,,,,NA,2023-07-17T10:55:08Z,2023-07-17T10:55:08Z,"For example, at the SOA scene,  the server should return specific response by client language mark?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hoDQr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/674,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpPjn,fury,1638201575,674,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T13:56:37Z,2023-07-17T13:56:37Z,"> For example, at the SOA scene, the server should return specific response by client language mark?

We do carry the client language mark in our payload, but it's only used for deserialization, since sometimes we can't know target language ahead","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpPjn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/674,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htEsO,fury,1639205646,674,NA,,,,,NA,2023-07-18T02:44:49Z,2023-07-18T02:44:49Z,"This caused, the serialized data can't be as the persist data, because it can't be deserialized by all language clients directly.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htEsO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/675,https://api.github.com/repos/apache/fury/issues/675,fury,1807276330,675,[Docs ] inner fury name collosion with outer ThreadSafeFury,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-17T08:39:23Z,2023-07-17T08:40:17Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Inner fury name collosion with outer ThreadSafeFury:


**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/59ebed37-f45b-457b-aacf-d87373e42970)

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/675/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/678,fury,1807824458,678,[Java] Support GraalVM Native Image,aigens,1268193,Peter Liu,peter.liu@aigens.com,CLOSED,2023-07-17T13:45:02Z,2024-10-31T09:14:00Z,"## Is your feature request related to a problem? Please describe.

Java works but compile to native java doesn't work.

Native Java:
https://www.graalvm.org/

## Describe the solution you'd like
Add native java support by adding classes that need reflection to meta files.

## Additional context

Exception when run in native java.

java.lang.RuntimeException: java.lang.UnsupportedOperationException: java.lang.NoSuchMethodException: java.util.concurrent.ConcurrentSkipListSet.<init>(java.util.Comparator)
	at com.aigens.api.TestApi.hello(TestApi.java:85)
	at com.aigens.api.TestApi$quarkusrestinvoker$hello_a988a40893ff99606bf40d6c00ea871031f3749c.invoke(Unknown Source)
	at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)
	at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)
	at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:145)
	at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:576)
	at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2513)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1538)
	at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
	at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base@17.0.5/java.lang.Thread.run(Thread.java:833)
	at com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:775)
	at com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:203)
Caused by: java.lang.UnsupportedOperationException: java.lang.NoSuchMethodException: java.util.concurrent.ConcurrentSkipListSet.<init>(java.util.Comparator)
	at io.fury.serializer.CollectionSerializers$SortedSetSerializer.<init>(CollectionSerializers.java:521)
	at io.fury.serializer.CollectionSerializers$ConcurrentSkipListSetSerializer.<init>(CollectionSerializers.java:707)
	at io.fury.serializer.CollectionSerializers.registerDefaultSerializers(CollectionSerializers.java:918)
	at io.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:309)
	at io.fury.resolver.ClassResolver.initialize(ClassResolver.java:297)
	at io.fury.Fury.<init>(Fury.java:128)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/678/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpOYV,fury,1638196757,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-17T13:54:07Z,2023-07-17T13:54:07Z,"@aigens Thanks for submitting this issue. This is an interesting topic, Fury does not support graalvm yet, maybe we should add support for it, considering it's starting to become popular. 

Could you share more details about your solution?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hpOYV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htFEC,fury,1639207170,678,NA,aigens,1268193,Peter Liu,peter.liu@aigens.com,NA,2023-07-18T02:45:43Z,2023-07-18T02:45:43Z,"As microservice and serverless getting more popular, people are switching to lighter frameworks that uses less memory and have quicker startup time.

We are switching to native java for higher efficiency. Goal of using native java align very well with what Fury trying to achieve. I believe supporting it will further make Fury more modern and developer friendly.

Framework that we are using that support compiling to native java with Graalvm:
https://quarkus.io

Looking forward to Fury!




","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htFEC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iAWDQ,fury,1644257488,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T16:47:25Z,2023-07-20T16:47:25Z,"@aigens I see, Fury do should support graalvm. But I'm not sure whether graalvm can load bytecodes into class dynamically, Fury will generate serializers class dynamically. Graalvm native image seems doesn' support it?

Also we should build reflection table for graalvm too.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iAWDQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDaOn,fury,1661838247,678,NA,ennerf,5491587,Florian Enner,,NA,2023-08-02T09:14:13Z,2023-08-02T09:14:13Z,"@chaokunyang native images don't have a JIT and can't dynamically load bytecode at runtime. You'd have to go with static code generation before compilation.

In your place I'd add an annotation for each serializable class (maybe with a list?) and create an annotation processor that outputs the generated code as Java files in the generated-sources directory, e.g.,

```Java
@FurySerializable
public class RegisteredClass {
    private ExternalDependency someField; // ExternalDependency.class automatically added
}

@FuryConfig( classes = { RegisteredClass.class, ExternalDependency.class }
public class ExplicitFuryConfig {
}
```

After that you can create a config and use the service loader interface to register it at runtime.

Here is a simple example for an annotation processor that creates GraalVM config files:  https://github.com/ennerf/NativeImageConfigGenerator

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDaOn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDoF5,fury,1661895033,678,NA,geoand,4374975,Georgios Andrianakis,,NA,2023-08-02T09:47:10Z,2023-08-02T09:47:10Z,"_Disclaimer: I am a member of the Quarkus team_

>  But I'm not sure whether graalvm can load bytecodes into class dynamically, Fury will generate serializers class dynamically. Graalvm native image seems doesn' support it?

This is not supported in GraalVM (and to the extent of my knowledge, never will be as it is antithetical to the whole closed-world principle that GraalVM is based on).

The typical way something like this would be handled is to have the serializers generated at **build time** (this is actually what Kotlin serialization does). Depending on what exactly you want to achieve, there  are various ways to do this. 
The Quarkus specific way would be to have a Quarkus extension that simply integrates with Fury in order to generate the serializes at build time. Obviously this would require the library to be modular that there exist some SPIs that would be used to determine the classes in need of serialization and a backend part of how to actually write the new bytecode.
An alternative would be to have an annotation processor which has the advantage of being framework agnostic, but also carries the downside of needing a different solution for Kotlin source code.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDoF5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE5WF,fury,1662227845,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T13:35:51Z,2023-08-02T13:35:51Z,"Hi @ennerf @geoand thanks for your inputs, it's very valuable.

If I understand right, there are two ways to support native image:
1. Fury provide a group of annotation and a annotation processor. Then users use annotation to mark their class. The annotation processor will invoke fury jit api to generate Java code. And generate graalvm refection config for those classes and generated serializer. In this way, those class will not be cropped by graal. And Fury can load those classes at runtime. 
2. Fury provide the Java code/bytecode generation api to Quarku. And Fury define a spi to let the users list all classes in need of serialization. Then Quarkus invoke fury at build time to generate serializer code and register instanse of generated serializer into fury?  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE5WF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE6BM,fury,1662230604,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T13:37:34Z,2023-08-02T13:37:34Z,"@geoand Fury supports generate Java code or bytecode. If we generate Java code, will it affect kotlin build? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE6BM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE7I0,fury,1662235188,678,NA,geoand,4374975,Georgios Andrianakis,,NA,2023-08-02T13:40:23Z,2023-08-02T13:40:23Z,"Generating source code would also be problematic for Kotlin projects AFAIK.

I don't know how important it is for the project to support Kotlin, I am just mentioning it for completeness as we have a lot of Kotlin usage in Quarkus.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE7I0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE8ea,fury,1662240666,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T13:43:40Z,2023-08-02T13:43:40Z,"@geoand It would be great if fury can integrate with Quarku. Quarkus is an amazing Project. Integration with it will make fury reach for more users. And hopefully make Quarkus further faster.

I don't have much graalvm experience. It may take some time before I can start this work.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jE8ea/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jFBsJ,fury,1662262025,678,NA,geoand,4374975,Georgios Andrianakis,,NA,2023-08-02T13:57:03Z,2023-08-02T13:57:03Z,"👍🏼 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jFBsJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jIh8q,fury,1663180586,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-03T01:49:54Z,2023-08-03T01:49:54Z,"> Generating source code would also be problematic for Kotlin projects AFAIK.
> 
> I don't know how important it is for the project to support Kotlin, I am just mentioning it for completeness as we have a lot of Kotlin usage in Quarkus.

It's our target to support all common Jvm languages like kotlin/scala/groovy/etc. I believe those languages are supported already in fury for traditional jdk. Maybe there are still some optimization such as #765 . So we do need to support kotlin well in graal.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jIh8q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sG-e6,fury,1813768122,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-11-16T04:22:59Z,2023-11-16T04:22:59Z,"You can manually generate all the reflection configurations if you first run everything with the graal agent and then compile against that
The problem I am facing is that fury tries to create hidden classes, which are not possible at run time
Initializing fury at build time also doesn't work, as it then tries to do file operations, which are not possible at build time","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sG-e6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sH7VG,fury,1814017350,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-16T08:47:07Z,2023-11-16T08:47:07Z,"> create hidden classes,

@Ran-Mewo Fury uses `MethodHandle` to generate lambda to reduce reflection cost for method getter and constructor, is this the place where `hidden classes` are created? If so, we can fallback to reflection/unsafe for this.

But for initializing fury at build time, I'm not sure whether graal allow us to invoke fury to generate java code at build time.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sH7VG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sIXYG,fury,1814132230,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-11-16T10:03:29Z,2023-11-16T10:03:29Z,"I suppose so? Due to me seeing the class `io.fury.util.unsafe._JDKAccess.makeGetterFunction`. And I am not sure wether if graal would allow generating code at build time, but if I had to take a guess, then I think it'd probably allow generating Java code at build time, which the compiler will compile down to native, but everything is locked up at run time and no more new classes are expected to be generated.

Have both of the stacktraces for run time and build time

Initializing at run time:
```
java.lang.InternalError: com.oracle.svm.core.jdk.UnsupportedFeatureError: Defining hidden classes at runtime is not supported.
	at java.base@17.0.9/java.lang.invoke.InnerClassLambdaMetafactory.generateInnerClass(InnerClassLambdaMetafactory.java:500)
	at java.base@17.0.9/java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass(InnerClassLambdaMetafactory.java:402)
	at java.base@17.0.9/java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite(InnerClassLambdaMetafactory.java:315)
	at java.base@17.0.9/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:341)
	at io.fury.util.unsafe._JDKAccess.makeGetterFunction(_JDKAccess.java:283)
	at io.fury.util.function.Functions.makeGetterFunction(Functions.java:84)
	at io.fury.util.function.Functions.makeGetterFunction(Functions.java:71)
	at io.fury.serializer.Serializers.getBuilderFunc(Serializers.java:179)
	at io.fury.serializer.Serializers.access$000(Serializers.java:58)
	at io.fury.serializer.Serializers$AbstractStringBuilderSerializer.<init>(Serializers.java:200)
	at io.fury.serializer.Serializers$StringBuilderSerializer.<init>(Serializers.java:246)
	at io.fury.serializer.Serializers.registerDefaultSerializers(Serializers.java:557)
	at io.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:324)
	at io.fury.resolver.ClassResolver.initialize(ClassResolver.java:314)
	at io.fury.Fury.<init>(Fury.java:131)
	at io.fury.config.FuryBuilder.newFury(FuryBuilder.java:297)
	at io.fury.config.FuryBuilder.lambda$buildThreadLocalFury$0(FuryBuilder.java:327)
	at io.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:93)
	at io.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:65)
	at io.fury.ThreadLocalFury.lambda$new$1(ThreadLocalFury.java:47)
	at java.base@17.0.9/java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:305)
	at java.base@17.0.9/java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:195)
	at java.base@17.0.9/java.lang.ThreadLocal.get(ThreadLocal.java:172)
	at io.fury.ThreadLocalFury.<init>(ThreadLocalFury.java:53)
	at io.fury.config.FuryBuilder.buildThreadLocalFury(FuryBuilder.java:327)
	at io.fury.config.FuryBuilder.buildThreadSafeFury(FuryBuilder.java:317)
	at me.ran.rumi.serializers.Serializers.<clinit>(Serializers.java:26)
```
Initializing at build time
```
Error: No instances of java.io.FilePermission are allowed in the image heap as this class should be initialized at image runtime. Object has been initialized through the following trace:
	at java.io.FilePermission.<init>(FilePermission.java:489)
No instances of java.io.FilePermission are allowed in the image heap as this class should be initialized at image runtime. Object has been initialized through the following trace:

	at sun.net.www.protocol.file.FileURLConnection.getPermission(FileURLConnection.java:234)
	at java.net.URLClassLoader.getPermissions(URLClassLoader.java:725)
	at java.security.SecureClassLoader$1.apply(SecureClassLoader.java:226)
	at java.security.SecureClassLoader$1.apply(SecureClassLoader.java:222)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1740)
	at java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:222)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:524)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:427)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:421)
	at java.security.AccessController.executePrivileged(AccessController.java:807)
	at java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:420)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:587)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at jdk.internal.loader.Loader.loadClass(Loader.java:564)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.lang.Class.forName0(Unknown Source)
	at java.lang.Class.forName(Class.java:467)
	at com.oracle.svm.hosted.ImageClassLoader.forName(ImageClassLoader.java:307)
	at com.oracle.svm.hosted.ImageClassLoader.forName(ImageClassLoader.java:303)
	at com.oracle.svm.hosted.ImageClassLoader.forName(ImageClassLoader.java:312)
	at com.oracle.svm.hosted.NativeImageClassLoaderSupport$LoadClassHandler.handleClassFileName(NativeImageClassLoaderSupport.java:784)
	at com.oracle.svm.hosted.NativeImageClassLoaderSupport$LoadClassHandler$1.lambda$visitFile$0(NativeImageClassLoaderSupport.java:713)
	at com.oracle.svm.hosted.NativeImageClassLoaderSupport$LoadClassHandler$1$$Lambda$280/0x00000007c0451718.run(Unknown Source)
	at com.oracle.svm.hosted.ImageClassLoader$1.lambda$execute$0(ImageClassLoader.java:94)
	at com.oracle.svm.hosted.ImageClassLoader$1$$Lambda$254/0x00000007c02cfc78.run(Unknown Source)
	at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1395)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
.  To fix the issue mark java.io.FilePermission for build-time initialization with --initialize-at-build-time=java.io.FilePermission or use the the information from the trace to find the culprit and --initialize-at-run-time=<culprit> to prevent its instantiation.

Detailed message:
Trace: Object was reached by
  reading field java.util.concurrent.ConcurrentHashMap$Node.val of constant 
    java.util.concurrent.ConcurrentHashMap$Node@6abb07c: I:\packages\gradle\caches\modules-2\files-2.1\com.google.guava\guava\32.1.2-jre\...
  indexing into array java.util.concurrent.ConcurrentHashMap$Node[]@3715bd62: [Ljava.util.concurrent.ConcurrentHashMap$Node;@3715bd62
  reading field java.util.concurrent.ConcurrentHashMap.table of constant 
    java.util.concurrent.ConcurrentHashMap@7e665f2: {I:\packages\gradle\caches\modules-2\files-2.1\com.google.guava\guava\32.1.2-jre...
  reading field java.io.FilePermissionCollection.perms of constant 
    java.io.FilePermissionCollection@512c1a76: java.io.FilePermissionCollection@512c1a76 (
 (""java.io.FilePermission"" ""I:\packa...
  reading field java.util.concurrent.ConcurrentHashMap$Node.val of constant 
    java.util.concurrent.ConcurrentHashMap$Node@7728c4f8: class java.io.FilePermission=java.io.FilePermissionCollection@512c1a76 (
 (""java...
  indexing into array java.util.concurrent.ConcurrentHashMap$Node[]@75d8a377: [Ljava.util.concurrent.ConcurrentHashMap$Node;@75d8a377
  reading field java.util.concurrent.ConcurrentHashMap.table of constant 
    java.util.concurrent.ConcurrentHashMap@63d6a948: {class java.io.FilePermission=java.io.FilePermissionCollection@512c1a76 (
 (""jav...
  reading field java.security.Permissions.permsMap of constant 
    java.security.Permissions@37f22a09: java.security.Permissions@37f22a09 (
 (""java.io.FilePermission"" ""I:\packages\gra...
  reading field java.security.ProtectionDomain.permissions of constant 
    java.security.ProtectionDomain@10178780: ProtectionDomain  (file:/I:/packages/gradle/caches/modules-2/files-2.1/com.googl...
  reading field java.lang.invoke.MethodHandles$Lookup.cachedProtectionDomain of constant 
    java.lang.invoke.MethodHandles$Lookup@25de25ca: /trusted
  reading field java.util.concurrent.ConcurrentHashMap$Node.val of constant 
    java.util.concurrent.ConcurrentHashMap$Node@157b751e: class com.google.common.collect.ImmutableMap$Builder=/trusted
  reading field java.util.concurrent.ConcurrentHashMap$Node.next of constant 
    java.util.concurrent.ConcurrentHashMap$Node@5c07a258: interface java.util.List=/trusted
  indexing into array java.util.concurrent.ConcurrentHashMap$Node[]@d0642f2: [Ljava.util.concurrent.ConcurrentHashMap$Node;@d0642f2
  reading field java.util.concurrent.ConcurrentHashMap.table of constant 
    java.util.concurrent.ConcurrentHashMap@51100a93: {class java.util.ImmutableCollections$Map1=/trusted, class com.google.common.col...
  reading field java.lang.ClassValue.values of constant 
    io.fury.util.unsafe._JDKAccess$1@1d2bbf7d: io.fury.util.unsafe._JDKAccess$1@1d2bbf7d
  scanning root io.fury.util.unsafe._JDKAccess$1@1d2bbf7d: io.fury.util.unsafe._JDKAccess$1@1d2bbf7d embedded in 
    io.fury.util.unsafe._JDKAccess._trustedLookup(_JDKAccess.java:105)
  parsing method io.fury.util.unsafe._JDKAccess._trustedLookup(_JDKAccess.java:105) reachable via the parsing context
    at io.fury.util.ReflectionUtils.getCtrHandle(ReflectionUtils.java:127)
    at io.fury.serializer.MapSerializers$SortedMapSerializer.<init>(MapSerializers.java:849)
    at com.oracle.svm.core.code.FactoryMethodHolder.MapSerializers$ConcurrentSkipListMapSerializer_constructor_95ea8caa5afeea9f9ba7929729219556d4305e3b(generated:0)
    at io.fury.serializer.MapSerializers.registerDefaultSerializers(MapSerializers.java:1109)
    at io.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:328)
    at io.fury.resolver.ClassResolver.initialize(ClassResolver.java:314)
    at io.fury.Fury.<init>(Fury.java:131)
    at com.oracle.svm.core.code.FactoryMethodHolder.Fury_constructor_8d9383daf664f347d2d9fc4d58d7bb75b66b39f7(generated:0)
    at io.fury.config.FuryBuilder.newFury(FuryBuilder.java:297)
    at io.fury.config.FuryBuilder$$Lambda$325/0x00000007c1997258.apply(Unknown Source)
    at io.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:104)
    at io.fury.ThreadLocalFury.lambda$new$1(ThreadLocalFury.java:47)
    at io.fury.ThreadLocalFury$$Lambda$327/0x00000007c19976b0.get(Unknown Source)
    at java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:305)
    at java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:195)
    at java.lang.ThreadLocal.get(ThreadLocal.java:172)
    at jdk.internal.math.FloatingDecimal.getBinaryToASCIIBuffer(FloatingDecimal.java:986)
    at jdk.internal.math.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:1782)
    at jdk.internal.math.FloatingDecimal.toJavaFormatString(FloatingDecimal.java:70)
    at java.lang.Double.toString(Double.java:769)
    at root method.(Unknown Source)
```
(Also yes I know it said to do `--initialize-at-build-time=java.io.FilePermission` but doing so gives another error where it basically says that initializing this class is impossible due to it breaking JNI access)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sIXYG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO2WJ,fury,1815831945,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T06:52:44Z,2023-11-17T06:52:44Z,"@Ran-Mewo  For first exception `Defining hidden classes at runtime is not supported`, maybe we can update `io.fury.util.function.Functions.makeGetterFunction` to catch up error and return an implementation based on Unsafe/Reflection.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO2WJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sSVtb,fury,1816746843,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-11-17T16:42:19Z,2023-11-17T16:42:19Z,"> @Ran-Mewo For first exception `Defining hidden classes at runtime is not supported`, maybe we can update `io.fury.util.function.Functions.makeGetterFunction` to catch up error and return an implementation based on Unsafe/Reflection.

Well at this point we'll just have to try it and see","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sSVtb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVKBn,fury,1817485415,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-18T11:39:43Z,2023-11-18T11:39:43Z,@Ran-Mewo I'll try it tomorrow and give the feedbacks to you.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVKBn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVPNY,fury,1817506648,678,NA,ennerf,5491587,Florian Enner,,NA,2023-11-18T13:14:27Z,2023-11-18T13:14:27Z,"You will not be able to generate and execute bytecode at runtime without a JIT. Afaik GraalVM provides an option to bundle a JIT within a native image (Espresso), but that adds extra overhead and sort of defeats the purpose of AOT.

Your best bet is probably to generate the classes at compile time, which seems to be what everyone else is doing.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVPNY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVQcR,fury,1817511697,678,NA,geoand,4374975,Georgios Andrianakis,,NA,2023-11-18T13:36:21Z,2023-11-18T13:36:21Z,"> Your best bet is probably to generate the classes at compile time, which seems to be what everyone else is doing

+1","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sVQcR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWpoi,fury,1817877026,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T14:50:05Z,2023-11-19T14:50:05Z,"I read the main graalvm doc. One of the last thing remained is Unsafe offset:
![image](https://github.com/alipay/fury/assets/12445254/efe5eade-74b0-45c8-97fd-21503ac9d34f)
https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#unsafe-accesses

![image](https://github.com/alipay/fury/assets/12445254/440139a1-ea6e-4e41-bcfe-ab8276ffc618)
https://www.graalvm.org/latest/reference-manual/native-image/metadata/Compatibility/#unsafe-memory-access

It seems that the offset is subject to change between build time and runtime. I didn't find the doc explain why the offset change between build time and runtime, it's just a relative offset. 

Fury inline such offsets in the generated code, need to change to a compile-time constant of the generated class.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWpoi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWroh,fury,1817885217,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T15:18:17Z,2023-11-19T15:18:17Z,The doc https://build-native-java-apps.cc/developer-guide/substitution/ demonstrat how to substitute unsafe offset. But introduce extra graalvm depdency and extra complexities.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWroh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWr3T,fury,1817886163,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T15:21:54Z,2023-11-19T15:21:54Z,"> Your best bet is probably to generate the classes at compile time, which seems to be what everyone else is doing.

@ennerf You mean generate the classes at graal image build time? Or generate classes ahead before pass to graal for compilation.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWr3T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWtFG,fury,1817891142,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T15:39:13Z,2023-11-19T15:39:13Z,"I try to generate serializer code at build time, but got following error:
```java
com.google.common.collect.Platform was unintentionally initialized at build time. io.fury.graalvm.Hello caused initialization of this class with the following trace: 
        at com.google.common.collect.Platform.<clinit>(Platform.java:35)
        at com.google.common.collect.Sets.newConcurrentHashSet(Sets.java:275)
        at io.fury.collection.MultiKeyWeakMap.<clinit>(MultiKeyWeakMap.java:43)
        at io.fury.codegen.CodeGenerator.<clinit>(CodeGenerator.java:72)
        at io.fury.codegen.Expression$Invoke.doGenCode(Expression.java:961)
        at io.fury.codegen.Expression.genCode(Expression.java:103)
        at io.fury.codegen.CodegenContext.addField(CodegenContext.java:515)
        at io.fury.codegen.CodegenContext.addField(CodegenContext.java:500)
        at io.fury.builder.BaseObjectCodecBuilder.<init>(BaseObjectCodecBuilder.java:150)
        at io.fury.builder.ObjectCodecBuilder.<init>(ObjectCodecBuilder.java:87)
        at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:39)
        at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
        at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:954)
        at io.fury.resolver.ClassResolver$$Lambda$374/0x0000000931eec210.call(Unknown Source)
        at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
        at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:952)
        at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:907)
        at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:810)
        at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1168)
        at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1106)
        at io.fury.resolver.ClassResolver.getSerializer(ClassResolver.java:781)
        at io.fury.graalvm.Hello.<clinit>(Hello.java:14)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWtFG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWt6M,fury,1817894540,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-11-19T15:52:13Z,2023-11-19T15:52:13Z,make the package `com.google.common.collect` also be intiailized at build time,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWt6M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWw_A,fury,1817907136,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T16:34:03Z,2023-11-19T16:34:03Z,"> make the package `com.google.common.collect` also be intiailized at build time

I get following error finally:
```java
com.oracle.svm.core.util.UserError$UserException: Classes that should be initialized at run time got initialized during image building:
 io.fury.util.Platform was unintentionally initialized at build time. io.fury.graalvm.Hello caused initialization of this class with the following trace: 
        at io.fury.util.Platform.<clinit>(Platform.java:36)
        at io.fury.util.ReflectionUtils.getFieldOffset(ReflectionUtils.java:310)
        at io.fury.util.ReflectionUtils.getFieldOffset(ReflectionUtils.java:315)
        at io.fury.serializer.StringSerializer.<clinit>(StringSerializer.java:77)
        at io.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:326)
        at io.fury.resolver.ClassResolver.initialize(ClassResolver.java:319)
        at io.fury.Fury.<init>(Fury.java:131)
        at io.fury.config.FuryBuilder.newFury(FuryBuilder.java:317)
        at io.fury.config.FuryBuilder.build(FuryBuilder.java:332)
        at io.fury.graalvm.Hello.<clinit>(Hello.java:11)


        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:73)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ProvenSafeClassInitializationSupport.checkDelayedInitialization(ProvenSafeClassInitializationSupport.java:277)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationFeature.duringAnalysis(ClassInitializationFeature.java:164)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$10(NativeImageGenerator.java:770)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:86)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$11(NativeImageGenerator.java:770)
        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.AbstractAnalysisEngine.runAnalysis(AbstractAnalysisEngine.java:179)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:767)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:582)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:539)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:408)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:612)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:134)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:94)
------------------------------------------------------------------------------------------------------------------------
```
Added `sun.misc.Unsafe,io.fury.util.unsafe._JDKAccess` to build time init doesn't work","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWw_A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWxCm,fury,1817907366,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-19T16:34:58Z,2023-11-19T16:34:58Z,"> I read the main graalvm doc. One of the last thing remained is Unsafe offset: ![image](https://user-images.githubusercontent.com/12445254/284067346-efe5eade-74b0-45c8-97fd-21503ac9d34f.png) https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#unsafe-accesses
> 
> ![image](https://user-images.githubusercontent.com/12445254/284067505-440139a1-ea6e-4e41-bcfe-ab8276ffc618.png) https://www.graalvm.org/latest/reference-manual/native-image/metadata/Compatibility/#unsafe-memory-access
> 
> It seems that the offset is subject to change between build time and runtime. I didn't find the doc explain why the offset change between build time and runtime, it's just a relative offset.
> 
> Fury inline such offsets in the generated code, need to change to a compile-time constant of the generated class.

Found a blog for Unsafe offset in graalvm native image: https://developers.redhat.com/articles/2022/05/09/using-unsafe-safely-graalvm-native-image .

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sWxCm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5saHLF,fury,1818784453,678,NA,ennerf,5491587,Florian Enner,,NA,2023-11-20T10:33:21Z,2023-11-20T10:33:21Z,"> @ennerf You mean generate the classes at graal image build time? Or generate classes ahead before pass to graal for compilation.

generate classes beforehand via e.g. an annotation processor

The field offset issue seems to apply only if some fields are not used and get eliminated. If you use an annotation processor you can additionally generate an exclusion that specifies to keep all fields of that class (although serialization should already use everything anyways), and add an assertion at initialization that things behave correctly.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5saHLF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5scODc,fury,1819336924,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-20T15:56:33Z,2023-11-20T15:56:33Z,"> > @ennerf You mean generate the classes at graal image build time? Or generate classes ahead before pass to graal for compilation.
> 
> generate classes beforehand via e.g. an annotation processor
> 
> The field offset issue seems to apply only if some fields are not used and get eliminated. If you use an annotation processor you can additionally generate an exclusion that specifies to keep all fields of that class (although serialization should already use everything anyways), and add an assertion at initialization that things behave correctly.

@ennerf I see, thanks, generate code to capture all fields and assert is a good suggestion, I'll give it a try. About generating code at build time or compile time, I will do more experimentations. The compile time codegen is more predicable but doesn't work for thirdparty libs objects.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5scODc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sdET9,fury,1819559165,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-20T18:03:39Z,2023-11-20T18:03:39Z,"> Error: No instances of java.io.FilePermission are allowed in the image heap as this class should be initialized at image runtime. Object has been initialized through the following trace:
	at java.io.FilePermission.<init>(FilePermission.java:489)
No instances of java.io.FilePermission are allowed in the image heap as this class should be initialized at image runtime. Object has been initialized through the following trace:

@Ran-Mewo For this error, Fury can be updated to don't hold strong reference as static variable too address this error. 
Currently most reference comes from ClassValue cache in fury. We can replace it by a no cache implementation for graalvm","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sdET9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s27pB,fury,1826339393,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-25T14:15:09Z,2023-11-25T14:15:09Z,"> > @ennerf You mean generate the classes at graal image build time? Or generate classes ahead before pass to graal for compilation.
> 
> generate classes beforehand via e.g. an annotation processor
> 
> The field offset issue seems to apply only if some fields are not used and get eliminated. If you use an annotation processor you can additionally generate an exclusion that specifies to keep all fields of that class (although serialization should already use everything anyways), and add an assertion at initialization that things behave correctly.

The field offset seems still different between graalvm build time and runtime. For example, for String class, the runtime offsets for fields are:
```java
value: 4
coder: 12
hash: 8
hashIsZero: 13
```
but build time offsets are:
```java
value: 20
coder: 16
hash: 12
hashIsZero: 17
```
@ennerf Do you know how to make the offset consistent between build time and runtime? If the offsets can't be consistent between processes, I must make the FURY codegen generate `VarHandle/ Static offset constants` instead, and make the Fury source code support  [UnsafeAutomaticSubstitutionProcessor](https://github.com/oracle/graal/blob/55ecc1d267cfad7750a104b3051a845332e4b59d/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/substitute/UnsafeAutomaticSubstitutionProcessor.java#L116) too, which won't be easy.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s27pB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s28US,fury,1826342162,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-25T14:18:44Z,2023-11-25T14:18:44Z,"@ennerf @Ran-Mewo @geoand I managed make Fury generate code at build time in #1143, if I fixed the Unsafe offset, I think the Fury graalvm support will come soon. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s28US/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s3VO-,fury,1826444222,678,NA,ennerf,5491587,Florian Enner,,NA,2023-11-25T23:45:35Z,2023-11-25T23:45:35Z,"> @ennerf Do you know how to make the offset consistent between build time and runtime?

Sorry, I don't. I expected potential compression of fields due to the omission of unused fields, and I'm quite surprised to see that the fields are in a different order too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s3VO-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s41rk,fury,1826839268,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-26T17:16:27Z,2023-11-26T17:16:27Z,"> > @ennerf Do you know how to make the offset consistent between build time and runtime?
> 
> Sorry, I don't. I expected potential compression of fields due to the omission of unused fields, and I'm quite surprised to see that the fields are in a different order too.

The  different field order surprised me too. I'll generate Unsafe offset static constant to work around this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s41rk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thNwl,fury,1837423653,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-12-03T09:33:22Z,2023-12-03T09:33:22Z,"I've noticed two things
`.withAsyncCompilation(true)` doesn't work and the error message was very vague, took me hours to realize this was causing the issue
and also for me I need to add this to my resource config
```json
{
    ""pattern"":""\\Qfury/blacklist.txt\\E""
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thNwl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thmW3,fury,1837524407,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-03T15:57:45Z,2023-12-03T15:57:45Z,"> I've noticed two things `.withAsyncCompilation(true)` doesn't work and the error message was very vague, took me hours to realize this was causing the issue and also for me I need to add this to my resource config

@Ran-Mewo Sorry for our insufficiently detailed doc and vague error messages.

AsyncCompilation is not supported for graalvm native image, all the fury compilation must happen and finished at graalvm build time. AsyncCompilation will delay it to the runtime, and load bytecode is not supported by graalvm native image. 

Fury should add a `AsyncCompilation=false`check for graalvm build by check it in `FuryBuilder#finish`.  Or just set it to false and issue an warning for it, so the config will take effect for other JDK without change your serialization code.

If you disabled `AsyncCompilation`, do you still need to add `blacklist.txt`?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thmW3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tjqfk,fury,1838065636,678,NA,Ran-Mewo,43445785,Ran,,NA,2023-12-04T08:34:04Z,2023-12-04T08:34:04Z,"> If you disabled `AsyncCompilation`, do you still need to add `blacklist.txt`?

Yeah seems like I do","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tjqfk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tuViX,fury,1840863383,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-05T14:08:17Z,2023-12-05T14:08:17Z,"> > If you disabled `AsyncCompilation`, do you still need to add `blacklist.txt`?
> 
> Yeah seems like I do

@Ran-Mewo Could you open a new issue for this? I can't reproduce it locally","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tuViX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOv6i,fury,2252013218,678,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-07-26T05:40:57Z,2024-07-26T05:40:57Z,"@chaokunyang It looks good to create a quarkus extension for `fury` and please check [Getting an extension onboarded](https://github.com/quarkiverse/quarkiverse/wiki#getting-an-extension-onboarded).

Feel free to contact me or @gastaldi if you have any problem.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOv6i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWqBs,fury,2254086252,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-27T09:04:47Z,2024-07-27T09:04:47Z,"> @chaokunyang It looks good to create a quarkus extension for `fury` and please check [Getting an extension onboarded](https://github.com/quarkiverse/quarkiverse/wiki#getting-an-extension-onboarded).
> 
> Feel free to contact me or @gastaldi if you have any problem.

Great, thanks for sharing this guideline. I will follow it and try to create a quarkus extension in next weeks ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWqBs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RpRAX,fury,2443513879,678,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-10-29T08:07:20Z,2024-10-29T08:07:20Z,FYI @chaokunyang I also create https://issues.apache.org/jira/browse/CAMEL-21396 to introduce a `camel-fury` component to get `fury` to integrate with the apache [camel](https://camel.apache.org/) framework.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RpRAX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RqqCz,fury,2443878579,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-29T10:51:04Z,2024-10-29T10:51:04Z,"> FYI @chaokunyang I also create https://issues.apache.org/jira/browse/CAMEL-21396 to introduce a `camel-fury` component to get `fury` to integrate with the apache [camel](https://camel.apache.org/) framework.

This is awesome! Looking forward to it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RqqCz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Rq0_A,fury,2443923392,678,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-10-29T11:12:34Z,2024-10-29T11:12:34Z," - https://github.com/apache/camel/pull/16110

It will be also included in [camel-spring-boot](https://github.com/apache/camel-spring-boot/) and later in [camel-quarkus](https://github.com/apache/camel-quarkus)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Rq0_A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_HBS,fury,2449240146,678,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-10-31T07:44:20Z,2024-10-31T07:44:20Z,"Hi @chaokunyang

I create a propsal for `quarkus-fury` extension and do you mind to lead this project?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_HBS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_oUa,fury,2449376538,678,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-31T09:09:03Z,2024-10-31T09:09:03Z,"> Hi @chaokunyang
> 
> I create a propsal for `quarkus-fury` extension and do you mind to lead this project?

Yeah, I'd like to add fury support for quarkus","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_oUa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/678,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_qdL,fury,2449385291,678,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-10-31T09:13:59Z,2024-10-31T09:13:59Z,Perfect! I added you in the `Team Members` in the proposal.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R_qdL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/679,https://api.github.com/repos/apache/fury/issues/679,fury,1808973176,679,When will the release version be published?,,,,,CLOSED,2023-07-18T02:52:18Z,2023-08-01T02:18:40Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/679/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/679,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htNq7,fury,1639242427,679,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T03:06:08Z,2023-07-18T03:06:08Z,"alpha release will be published in this week, we'd like to collect more feedbacks before publishing `v0.1.0`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5htNq7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/679,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hu3wq,fury,1639676970,679,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T07:41:03Z,2023-07-18T07:41:03Z,Released `v0.1.0-alpha.1` in #693,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hu3wq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/679,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i6WRW,fury,1659462742,679,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-01T02:18:35Z,2023-08-01T02:18:35Z,"@shopenhe Released fury [v0.1.0](https://github.com/alipay/fury/releases/tag/v0.1.0) , please let use know if you have further issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i6WRW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/680,https://api.github.com/repos/apache/fury/issues/680,fury,1808984764,680,[Java] add compatibility CI for JDK8/11/13/15/17,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-18T03:01:55Z,2023-08-07T03:52:41Z,"## Is your feature request related to a problem? Please describe.
FUry supports JDK8+, we added ci for jdk78/11/17, but not for jdk14/15. 
JDK14/15 is used in some companies, we should add CI for those jdk versions too..

## Describe the solution you'd like
The complete Java ci takes 2~3 minutes, which is a little slow, we can just run some complex tests to ensure compatibility, such as:
- `io.fury.serializer.ProtocolInteroperabilityTest`

## Additional context
#673 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/680/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/681,https://api.github.com/repos/apache/fury/issues/681,fury,1809004959,681,[Java] JVM languages serialization optimization  ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-18T03:18:43Z,2023-07-18T03:22:11Z,"## Is your feature request related to a problem? Please describe.
JVM luangages support serialization by customizing `writeObject`/`writeReplace`/`readObject`/`readResolve`/`readObjectNoData`, fury has native support and optimization for this JDK  custom serialization. 

But to keep compatibility with JDK API behaviour, the performance isn't the best if we know the data structure and what those methods are doing ahead.

We should add specialized serializers for those languages:
- Scala
- Kotlin
- Groovy
- Clojure

And the implementation shouldn't introduce dependencies of those language API/Runtime into fury.

## Describe the solution you'd like
- [ ] #682
- [ ] #683
- [ ] #684
- [ ] #685

","{""url"": ""https://api.github.com/repos/apache/fury/issues/681/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/682,fury,1809005057,682,[Scala] Scala Serialization optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-18T03:18:53Z,2024-08-02T02:11:21Z,"## Is your feature request related to a problem? Please describe.
Scala normal classes and case classes are supported by fury well.

But scala  still has some special serialization behaviour which need optimization:
- [x] #764
- [x] #765
- [ ] #1060
- [x] #1076 
- [x] #1078
- [ ] #1079","{""url"": ""https://api.github.com/repos/apache/fury/issues/682/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppSRc,fury,1772430428,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T09:55:29Z,2023-10-20T09:55:29Z,"I would recommend that specialized Scala support be put in a separate jar from the Java support. The Scala Library jar is big so you don't want to have a dependency on it unless you need to. The fury-scala jar would need to be published for multiple Scala versions. Many Spark and Flink users still use Scala 2.11 so you would need to support 2.11, 2.12, 2.13 and 3. If you are not familiar with Scala, publishing the Scala version specific jars is pretty straightforward because build tools like Maven have specialized plugins for Scala.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppSRc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp1lc,fury,1772575068,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T11:35:10Z,2023-10-20T11:35:10Z,"Maybe we can use `java.lang.invoke.MethodHandle` to load scala classes dynamically to avoid source dependency on scala library. In this way, we can avoid release different jar for different scala version too. 
Do you think this is feasible?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp1lc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp5zT,fury,1772592339,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T11:50:05Z,2023-10-20T11:50:05Z,I think it will be hard to support reasonably complicated Scala classes using Java Reflection only code.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp5zT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqCio,fury,1772628136,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T12:12:14Z,2023-10-20T12:12:14Z,"Supporting Serialization/Deserialization of `Collection<T>` is very hard with Java Reflection only. The T is erased when the T is a primitive type. Scala has its own separate reflection libraries but this is also messy because Scala 3 abandoned the scala-reflect lib available in Scala 2. New Scala 3 libs are being developed instead.

This FAQ shows some of the problems that Jackson-Module-Scala has in this area.

https://github.com/FasterXML/jackson-module-scala/wiki/FAQ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqCio/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqkti,fury,1772768098,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T13:44:30Z,2023-10-20T13:44:30Z,"> Supporting Serialization/Deserialization of Collection is very hard with Java Reflection only. The T is erased when the T is a primitive type. Scala has its own separate reflection libraries but this is also messy because Scala 3 abandoned the scala-reflect lib available in Scala 2. New Scala 3 libs are being developed instead.
> 
> This FAQ shows some of the problems that Jackson-Module-Scala has in this area.
> 
> https://github.com/FasterXML/jackson-module-scala/wiki/FAQ

I see, thanks. I didn't realized scala will erase primitive type for nested generic type. I haven't use scala for several years. Thanks very much for sharing this information.
![image](https://github.com/alipay/fury/assets/12445254/5b656a1c-c0ac-4b39-bd7e-ac6dfd4eda3c)

This breaks our assumption for java genercis. For java collection types, we can know the value is a `Long`, and write by long for it. 
```java
// generate pseudo-code
for (Entry e : map.entrySet()) {
  // null flag write
  stringSerailizer.writeString(e.getKey());
  buffer.writeSliLong(e.getValue());
} 
```

But for scala, since we can't know the actual type using relection when infer `Foo`  field generic type, we must write map value type foro every value, then write the the value:
```java
// generate pseudo-code
for (Entry e : map.entrySet()) {
  // null flag write
  stringSerailizer.writeString(e.getKey());
  Object v = e.getValue();
  writeType(v.getClass());
  Serializer s = getSerializer(v); // query from map
  s.write(buffer, v)// vritual method call
} 
```

It will be slower and introduce more space overhead.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqkti/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqmhf,fury,1772775519,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T13:49:00Z,2023-10-20T13:49:00Z,"It may only be necessary to write the inner type info for `Collection<T>` when the T is a primitive (long, int, etc.).

It may be possible to use scala libs to find to out what the erased types are but it is pretty complicated and you would like need a separate solution for Scala 2.x and Scala 3.  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqmhf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqo2J,fury,1772785033,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T13:54:49Z,2023-10-20T13:54:49Z,"You could experiment with `List[java.lang.Long]`. You should find that the `java.lang.Long` is not erased. The erasure issue occurs for `List[scala.Long]` though. `scala.Long` is effectively an alias for the Java primitive type `long`.

Unfortunately, `scala.Long` is commonly used - so it is difficult to ignore the effect of this erasure.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqo2J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqqWB,fury,1772791169,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T13:58:22Z,2023-10-20T13:58:22Z,"> It may only be necessary to write the inner type info for `Collection<T>` when the T is a primitive (long, int, etc.).
> 
> It may be possible to use scala libs to find to out what the erased types are but it is pretty complicated and you would like need a separate solution for Scala 2.x and Scala 3.

Our current protocol will write it only once, see #923 , but without this information ahead, the serialization for elements will introduce virtual method call, which will be slower. And the jit optimization is how fury get such boost up, it will be better if we can support such things for scala, considering it's used wisedly in spark/flink/akka.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqqWB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqqzE,fury,1772793028,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T13:59:27Z,2023-10-20T13:59:27Z,"> You could experiment with `List[java.lang.Long]`. You should find that the `java.lang.Long` is not erased. The erasure issue occurs for `List[scala.Long]` though. `scala.Long` is effectively an alias for the Java primitive type `long`.
> 
> Unfortunately, `scala.Long` is commonly used - so it is difficult to ignore the effect of this erasure.

Yes, we shouldn't ignore this type information, otherwise the pperformance won't be the best","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqqzE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqrQA,fury,1772794880,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T14:00:25Z,2023-10-20T14:00:25Z,"Another thing I found it that scala collection doesn't implement java collection interface `Iterable/Collection/Set/Map`, which make the integration with fury collection JIT not easy to implement, since we don't have a java `Collection` base interface type to call to scala collection.

One method I can see is we convert scala collection to java collection in generated serializer(come with object creation overhead), or implement seperate jit support for such collection","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqrQA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqrxz,fury,1772797043,682,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T14:01:36Z,2023-10-20T14:01:36Z,Converting Scala collections to Java collections and vice versa will not be cheap.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqrxz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqvNz,fury,1772811123,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T14:09:16Z,2023-10-20T14:09:16Z,"Now with your new input, I totally agree  that we should add scala optimization support in a new library. This is a complicated work, and scala collections are much more complex than java collection framework. We must write the implementation using scala collection API, otherwise this work will be too much.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqvNz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqzzO,fury,1772829902,682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T14:19:50Z,2023-10-20T14:19:50Z,"Currently if a scala class doesn't have scala collections field type, the performance is good in fury. `case` type is supported by fury natively. But if collections types are included, the serialization performance will be not good since we can't use any collection generic information.  

Better scala serialization support should be done in a new jar. And perhaps we also need to add `a new adapter inferface` in java to make let scala collections hook into fury java codegen. Currently we do java codegen in `io.fury.builder.BaseObjectCodecBuilder#serializeForCollection`. Our codegen generate java code only. Maybe we need to adjust the jit and let it invoke the `new adapter inferface` to read or populate scala collection. In such wa, we can avoid generate scala code in our jit framework.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pqzzO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/683,https://api.github.com/repos/apache/fury/issues/683,fury,1809005077,683,Add  specialized serializers for Kotlin,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-18T03:18:55Z,2023-11-02T05:34:29Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/683/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/684,fury,1809005117,684,[Java] Add  specialized serializers for Groovy,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-18T03:18:58Z,2023-11-02T05:34:15Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/684/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iVac3,fury,1649780535,684,NA,azhsmesos,65518067,aievl,,NA,2023-07-25T12:50:45Z,2023-07-25T12:50:45Z,"Hello! Recently I have read the configuration center in groovy and so on, so I have a certain understanding of groovy, can I try this issue, but before I ask what information is available to learn how to add serializers for other languages, thanks!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iVac3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZuYt,fury,1650910765,684,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T03:12:37Z,2023-07-26T03:12:37Z,"Hi @azhsmesos, thank you for your willingness to contribute to Fury. Fury supports JVM classes serialization best if they don't custom serialization by JDK serialization method such as `writeReplace/writeObject/readResolve/readObject/readObjectNoData/writeExternal/readExternal`. The main work for optimizing groovy serialization are:
- find common groovy collections/containers/classes which needed to be serialized. Many groovy collections are collections in java.util.*, those collections are supported by fury already, you can just skip it.
- implement `io.fury.serializer.Serializer` for those classes in fury
- add a switch to register those serializers in fury


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZuYt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZw9l,fury,1650921317,684,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T03:27:20Z,2023-07-26T03:27:20Z,"For example, scala `object` is singleton, which defined `writeReplace` method, it return a `scala.runtime.ModuleSerializationProxy` for serialization. We should check whether groovy has similar behhaviour:

```scala
object Foo {
}
```

See more in #764","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZw9l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ia1XE,fury,1651201476,684,NA,azhsmesos,65518067,aievl,,NA,2023-07-26T08:15:34Z,2023-07-26T08:15:34Z,"> 

Do we have a corresponding community similar to wechat group?  I want to go in to facilitate communication.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ia1XE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/684,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ia3aY,fury,1651209880,684,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T08:21:11Z,2023-07-26T08:21:11Z,"> 

Yes, we do. You can follow our wechat offical acount https://github.com/alipay/fury#getting-involved  for joinning the group","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ia3aY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/685,https://api.github.com/repos/apache/fury/issues/685,fury,1809005171,685,[Java] Add  specialized serializers for Clojure,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-18T03:19:03Z,2023-07-21T04:27:13Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/685/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/686,fury,1809103888,686,[C#] Fury support for C#,jiangguilong2000,5009933,Allen Jiang,41157121@qq.com,OPEN,2023-07-18T04:53:02Z,2024-10-23T08:00:01Z,for unity game development,"{""url"": ""https://api.github.com/repos/apache/fury/issues/686/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hv3OP,fury,1639936911,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T10:11:58Z,2023-07-18T10:11:58Z,"@jiangguilong2000 Thanks for submitting this issue. As a multi-language serialization framework, c# support is important for fury. But we don't have experience for c#. Maybe someone in the community are interested to take this issue.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hv3OP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iAjER,fury,1644310801,686,NA,iceboundrock,151344,Ruoshi Li,,NA,2023-07-20T17:25:29Z,2023-07-20T17:25:29Z,"`C#/.net` already has a good foundation for this, like [Expression Trees](https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/), which can save quite a lot of effort. I am working on a very preliminary `C#` port on top of Fury java implementation, but I cannot commit to anything yet.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iAjER/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iCnQ3,fury,1644852279,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T01:07:09Z,2023-07-21T01:07:09Z,"> `C#/.net` already has a good foundation for this, like [Expression Trees](https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/), which can save quite a lot of effort. I am working on a very preliminary `C#` port on top of Fury java implementation, but I cannot commit to anything yet.

@iceboundrock that would be very great, looking forward to it. Let us know if there are anything we can help. We're formalize our cross language protocol into a text spec. But it may still take some time.  The csharp poc can skip protocol alignment and do it in the future","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iCnQ3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mG_tf,fury,1713109855,686,NA,nfsfairytale,7303857,DanceMad,,NA,2023-09-11T03:38:40Z,2023-09-11T03:38:40Z,hope support c#      ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mG_tf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obdAA,fury,1752027136,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-08T13:20:20Z,2023-10-08T13:20:20Z,"> hope support c#

Glad to see more demands for this, pined the issue to prioritize  it! 
Hope this can help it get supported sooner.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obdAA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qLPK3,fury,1781330615,686,NA,jpfed,40933,Jerry Federspiel,jerry.federspiel@gmail.com,NA,2023-10-26T15:14:42Z,2023-10-26T15:14:42Z,"@iceboundrock Expression trees sound like a **great** idea for selectively deserializing fields. On the _serialization_ end, it may be worth considering source generators for optimum performance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qLPK3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qLkws,fury,1781419052,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-26T16:05:24Z,2023-10-26T16:05:24Z,"@jpfed How about generate code at runtime? Generate source code statically will need users to integrate it with build pipeline, which may introduce extra user mind burden.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qLkws/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56_q6U,fury,2063511188,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-18T10:10:52Z,2024-04-18T10:10:52Z,"https://fury.apache.org/docs/specification/fury_xlang_serialization_spec is our cross-language serialization spec, anyone interested at this issue can take a look at this document to know how to implement C# for fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56_q6U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/686,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6I3uK2,fury,2296308406,686,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-19T11:05:54Z,2024-08-19T11:05:54Z,"> > `C#/.net` already has a good foundation for this, like [Expression Trees](https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/), which can save quite a lot of effort. I am working on a very preliminary port on top of Fury java implementation, but I cannot commit to anything yet.`C#`
> 
> I would like to know the progress of C# porting. We can form a small team to promote this matter together, as the addition of C# serialization is crucial for Unity game development. After all, Fury is far superior to other serialization options.

Hi @nfsfairytale , this hasn't been started. I can help break the work down, But I am not familiar with c# and busy with other things recently, thus can't take up part of the work","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6I3uK2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/687,https://api.github.com/repos/apache/fury/issues/687,fury,1809138034,687,[CI] Add deploy script,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-18T05:21:32Z,2023-07-18T05:23:02Z,"## Is your feature request related to a problem? Please describe.
 Add deploy script for java/python/javascript

","{""url"": ""https://api.github.com/repos/apache/fury/issues/687/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/689,https://api.github.com/repos/apache/fury/issues/689,fury,1809171815,689,[Rust] POC for fury in rust,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-18T05:56:07Z,2023-07-24T08:39:35Z,"## Is your feature request related to a problem? Please describe.
Rust is a popular language, and as a cross-language serialization framework, Fury should support Rust. Most of the serialization libraries in Rust use a lib called Serde, such as serdejson, Avro, and so on. 
Therefore, I tried testing Fury's compatibility with Serde's derived attributes Deserialize and Serialize, and the test results were good. So I think we can use Serde macros to generate code, and let Fury implement the Serializer and Deserializer traits.

## ser.rs
```rust
// ser.rs
use std::io::Write;

use serde::{Serializer, Serialize, ser::{SerializeStruct, SerializeSeq, SerializeTuple, SerializeTupleStruct, SerializeTupleVariant, SerializeMap, SerializeStructVariant}};
use crate::Error;

struct FurySerializer<'a> {
    ab: &'a mut Vec<u8>
}

impl<'de> FurySerializer<'de> {
    fn new(ab: &mut Vec<u8>) -> FurySerializer {
        FurySerializer { ab }
    }
}

impl<'de> SerializeStruct for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    fn serialize_field<T: ?Sized>(
        &mut self,
        key: &'static str,
        value: &T,
    ) -> Result<(), Self::Error>
    where
        T: Serialize {
        self.ab.push(1);
        value.serialize(FurySerializer::new(self.ab));
        Ok(())
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        Ok(())
    }
}

impl<'de> SerializeSeq for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }
}

impl<'de> SerializeTuple for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }
}


impl<'de> SerializeTupleStruct for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }


}

impl<'de> SerializeTupleVariant for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;


    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }
}


impl<'de> SerializeMap for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }
}

impl<'de> SerializeStructVariant for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;


    fn serialize_field<T: ?Sized>(
        &mut self,
        key: &'static str,
        value: &T,
    ) -> Result<(), Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn end(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }
}


impl<'de> Serializer for FurySerializer<'de> {
    type Ok = ();

    type Error = std::fmt::Error;

    type SerializeSeq = Self;

    type SerializeTuple = Self;

    type SerializeTupleStruct = Self;

    type SerializeTupleVariant = Self;

    type SerializeMap = Self;

    type SerializeStruct = Self;

    type SerializeStructVariant = Self;

    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error> {
        self.ab.push(v);
        Ok(())
    }

    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error> {
        self.ab.write(v.as_bytes()).unwrap();
        Ok(())
    }

    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_unit_variant(
        self,
        name: &'static str,
        variant_index: u32,
        variant: &'static str,
    ) -> Result<Self::Ok, Self::Error> {
        todo!()
    }

    fn serialize_newtype_struct<T: ?Sized>(
        self,
        name: &'static str,
        value: &T,
    ) -> Result<Self::Ok, Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn serialize_newtype_variant<T: ?Sized>(
        self,
        name: &'static str,
        variant_index: u32,
        variant: &'static str,
        value: &T,
    ) -> Result<Self::Ok, Self::Error>
    where
        T: Serialize {
        todo!()
    }

    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
        todo!()
    }

    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
        todo!()
    }

    fn serialize_tuple_struct(
        self,
        name: &'static str,
        len: usize,
    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
        todo!()
    }

    fn serialize_tuple_variant(
        self,
        name: &'static str,
        variant_index: u32,
        variant: &'static str,
        len: usize,
    ) -> Result<Self::SerializeTupleVariant, Self::Error> {
        todo!()
    }

    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {
        todo!()
    }

    fn serialize_struct(
        self,
        name: &'static str,
        len: usize,
    ) -> Result<Self::SerializeStruct, Self::Error> {
        Ok(self)
    }

    fn serialize_struct_variant(
        self,
        name: &'static str,
        variant_index: u32,
        variant: &'static str,
        len: usize,
    ) -> Result<Self::SerializeStructVariant, Self::Error> {
        todo!()
    }
}


pub fn to_arraybuffer<T: Serialize>(record: T) -> Vec<u8> {
    let mut ab = vec![];
    record.serialize(FurySerializer::new(&mut ab)).unwrap();
    ab
}
```

## test.ts
```rust

#[test]
fn ser() {
    #[derive(Deserialize, Serialize)]
    struct Person {
        name: String,
        age: u8,
        address: String,
    }
    let bin = to_arraybuffer(Person { name: ""wwp"".to_string(), age: 16, address: ""shanghai"".to_string()});

    println!(""{:?}"", bin);
}
```
std out: 
```text
test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/de.rs (target/debug/deps/de-a8ef3faab882fcd4)

running 1 test
[1, 119, 119, 112, 1, 16, 1, 115, 104, 97, 110, 103, 104, 97, 105]
test d ... ok
```
 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/689/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/689,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hujX_,fury,1639593471,689,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-18T06:40:19Z,2023-07-18T06:40:19Z,"This is very impressive, looking forward to it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5hujX_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/690,https://api.github.com/repos/apache/fury/issues/690,fury,1809294177,690,[Java] Add support for maven release,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-18T07:13:11Z,2023-07-18T07:20:10Z,"## Is your feature request related to a problem? Please describe.
Add support for maven release

## Additional context
#679 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/690/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/692,https://api.github.com/repos/apache/fury/issues/692,fury,1809337831,692,[Doc] update java release jar link for v0.1.0-alpha.1,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-18T07:38:04Z,2023-07-18T07:38:46Z,"## Is your feature request related to a problem? Please describe.
update java release jar link for v0.1.0-alpha.1","{""url"": ""https://api.github.com/repos/apache/fury/issues/692/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/696,https://api.github.com/repos/apache/fury/issues/696,fury,1809810828,696,[Docs] Refine readme for more readability,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-18T12:17:50Z,2023-07-18T12:56:00Z,"## Is your feature request related to a problem? Please describe.
Refine readme for more readability","{""url"": ""https://api.github.com/repos/apache/fury/issues/696/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/697,https://api.github.com/repos/apache/fury/issues/697,fury,1811009832,697,[Java] add clear error log for lambda serialize,zhangpenghui1997,31696007,Penghui Zhang,,CLOSED,2023-07-19T02:16:55Z,2023-07-19T05:37:29Z,"## Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/697/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/703,fury,1811615135,703,"[JavaScript] If Serialized by JS, Deserialized in Java will failed ",3dot141,19152476,Yes365,ninfovores365@gmail.com,CLOSED,2023-07-19T10:04:53Z,2023-08-03T01:28:32Z,"**Describe the bug**
rt, i can't use it in js and java.

**Expected behavior**
if fury support cross platform, the action will be success

**To Reproduce**
js code 
```js
import Fury, {InternalSerializerType,  Type} from '@furyjs/fury';
import * as fs from ""fs"";

function main1() {

  const description = Type.object(""example.bar"", {
    c: Type.array(Type.object(""example.foo"", {
      a: Type.string()
    }))
  });
  const fury = new Fury();
  const {serialize, deserialize} = fury.registerSerializer(description);
  const o = {a: ""123""};
  const rawObject = {c: [o, o]}
  console.log(`rawObject: ${JSON.stringify(rawObject)}`);
  const data = serialize({c: [o, o]})

  // create data directory
  if (!fs.existsSync('data')) {
    fs.mkdirSync('data');
  }
  // write data to file 'test.data'
  fs.writeFileSync('data/test.data', data);

  const deserialized = deserialize(data)
  console.log(`deserialized: ${JSON.stringify(deserialized)}`)
}
```

java code
```java
import cn.hutool.core.io.FileUtil;
import io.fury.Fury;
import io.fury.Language;

/**
 * @author Harrison
 * @since 11.0
 * Created on 2023/7/19
 */
public class FuryTest {
    
    public static class Test {
        
        A[] c;
    }
    
    public static class A {
        
        public String a;
    }
    
    public static void main(String[] args) {
        
        Fury fury = Fury.builder().withLanguage(Language.XLANG)
                .withRefTracking(true)
                .withSecureMode(false)
                .build();
        fury.register(Test.class, ""example.bar"");
        fury.register(A.class, ""example.foo"");
        
        byte[] bytes = FileUtil.readBytes(""/Users/3dot141/Work/w_source/MagicKit/data/test.data"");
        // bytes can be data serialized by other languages.
        
        Test test = new Test();

        A a1 = new A();
        a1.a = ""123"";
        A a2 = new A();
        a2.a = ""123"";

        test.c = new A[]{a1, a2};
        byte[] serialize = fury.serialize(test);
        
        Object deserialize = fury.deserialize(bytes);
    ;
        System.out.println();
    
    }
}

```

**Screenshots**
<img width=""1165"" alt=""image"" src=""https://github.com/alipay/fury/assets/19152476/676d4c8d-bd0c-47fa-8e43-d4517b14e040"">

**Environment (please complete the following information):**
","{""url"": ""https://api.github.com/repos/apache/fury/issues/703/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3XZW,fury,1641903702,703,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-19T11:23:12Z,2023-07-19T11:23:12Z,@wangweipeng2 Could you take a loot at javascript code?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3XZW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3pHv,fury,1641976303,703,NA,3dot141,19152476,Yes365,ninfovores365@gmail.com,NA,2023-07-19T12:15:15Z,2023-07-19T12:15:15Z,"i find one point

<img width=""472"" alt=""image"" src=""https://github.com/alipay/fury/assets/19152476/5dceb25d-f729-4b02-8b57-49b49066be96"">

js is ""do while"", but java is ""while"". 

when i fix it, i find array is error in js.

<img width=""422"" alt=""image"" src=""https://github.com/alipay/fury/assets/19152476/0b138468-1536-4967-ab86-626b22539be5"">

array type is 25 in js.

but in java, array type will be -25 .
<img width=""384"" alt=""image"" src=""https://github.com/alipay/fury/assets/19152476/2048b317-f227-4f78-805e-b67eb49f7974"">
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3pHv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3phO,fury,1641977934,703,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-07-19T12:16:31Z,2023-07-19T12:16:31Z,"> **Describe the bug** rt, i can't use it in js and java.
> 
> **Expected behavior** if fury support cross platform, the action will be success
> 
> **To Reproduce** js code
> 
> ```js
> import Fury, {InternalSerializerType,  Type} from '@furyjs/fury';
> import * as fs from ""fs"";
> 
> function main1() {
> 
>   const description = Type.object(""example.bar"", {
>     c: Type.array(Type.object(""example.foo"", {
>       a: Type.string()
>     }))
>   });
>   const fury = new Fury();
>   const {serialize, deserialize} = fury.registerSerializer(description);
>   const o = {a: ""123""};
>   const rawObject = {c: [o, o]}
>   console.log(`rawObject: ${JSON.stringify(rawObject)}`);
>   const data = serialize({c: [o, o]})
> 
>   // create data directory
>   if (!fs.existsSync('data')) {
>     fs.mkdirSync('data');
>   }
>   // write data to file 'test.data'
>   fs.writeFileSync('data/test.data', data);
> 
>   const deserialized = deserialize(data)
>   console.log(`deserialized: ${JSON.stringify(deserialized)}`)
> }
> ```
> 
> java code
> 
> ```java
> import cn.hutool.core.io.FileUtil;
> import io.fury.Fury;
> import io.fury.Language;
> 
> /**
>  * @author Harrison
>  * @since 11.0
>  * Created on 2023/7/19
>  */
> public class FuryTest {
>     
>     public static class Test {
>         
>         A[] c;
>     }
>     
>     public static class A {
>         
>         public String a;
>     }
>     
>     public static void main(String[] args) {
>         
>         Fury fury = Fury.builder().withLanguage(Language.XLANG)
>                 .withRefTracking(true)
>                 .withSecureMode(false)
>                 .build();
>         fury.register(Test.class, ""example.bar"");
>         fury.register(A.class, ""example.foo"");
>         
>         byte[] bytes = FileUtil.readBytes(""/Users/3dot141/Work/w_source/MagicKit/data/test.data"");
>         // bytes can be data serialized by other languages.
>         
>         Test test = new Test();
> 
>         A a1 = new A();
>         a1.a = ""123"";
>         A a2 = new A();
>         a2.a = ""123"";
> 
>         test.c = new A[]{a1, a2};
>         byte[] serialize = fury.serialize(test);
>         
>         Object deserialize = fury.deserialize(bytes);
>     ;
>         System.out.println();
>     
>     }
> }
> ```
> 
> **Screenshots** <img alt=""image"" width=""1165"" src=""https://user-images.githubusercontent.com/19152476/254539033-676d4c8d-bd0c-47fa-8e43-d4517b14e040.png"">
> 
> **Environment (please complete the following information):**

Thank you for submitting the issue. The cross-language protocol may be adjusted before release. I will add cross-language protocol testing to ensure that there are no problems in the future.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3phO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h75vs,fury,1643092972,703,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T04:03:24Z,2023-07-20T04:03:24Z,"> i find one point
> 
> <img alt=""image"" width=""472"" src=""https://user-images.githubusercontent.com/19152476/254568915-5dceb25d-f729-4b02-8b57-49b49066be96.png"">
> js is ""do while"", but java is ""while"".
> 
> when i fix it, i find array is error in js.
> 
> <img alt=""image"" width=""422"" src=""https://user-images.githubusercontent.com/19152476/254569399-0b138468-1536-4967-ab86-626b22539be5.png"">
> array type is 25 in js.
> 
> but in java, array type will be -25 . <img alt=""image"" width=""384"" src=""https://user-images.githubusercontent.com/19152476/254569619-2048b317-f227-4f78-805e-b67eb49f7974.png"">

Good catch, I don't expect someone will dive into the code details so fast. Xlang string serialization use utf8, but fury JavaScript supports latin and utf16 too. This may be the reason why deserialization failed. Fury Java supports those encoding，but We don't use Latin/uuf16 for Python， so we don't enable Latin/utf16 for java. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h75vs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h76Oc,fury,1643094940,703,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T04:04:38Z,2023-07-20T04:04:38Z,We should add Latin/utf16 support for clang as soon as possible,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h76Oc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i8EuM,fury,1659915148,703,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-01T09:19:02Z,2023-08-01T09:19:02Z,"```java
package io.fury;

import java.io.IOException;

public class FuryTest {

  public static class Test {

    A[] c;
  }

  public static class A {

    public String a;
  }

  public static void main(String[] args) throws IOException {
    Fury fury = Fury.builder().withLanguage(Language.XLANG)
            .withRefTracking(true)
            .requireClassRegistration(true).build();
    fury.register(Test.class, ""example.bar"");
    fury.register(A.class, ""example.foo"");

    A a = new A();
    a.a = ""123"";
    Test test = new Test();
    test.c = new A[]{a};
    byte[] bin = fury.serialize(test);

    Test deserialize = (Test)fury.deserialize(bin);
    System.out.println(deserialize.c);
  }
}

```
```Text
Exception in thread ""main"" io.fury.exception.InsecureException: class [Lio.fury.FuryTest$A; is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too.
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1009)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:961)
	at io.fury.resolver.ClassResolver.getSerializer(ClassResolver.java:677)
	at io.fury.type.GenericType.getSerializer(GenericType.java:184)
	at io.fury.type.GenericType.getSerializerOrNull(GenericType.java:196)
	at io.fury.serializer.StructSerializer.xwrite(StructSerializer.java:130)
	at io.fury.Fury.xwriteNonRef(Fury.java:426)
	at io.fury.Fury.xwriteRef(Fury.java:382)
	at io.fury.Fury.xserializeInternal(Fury.java:266)
	at io.fury.Fury.serialize(Fury.java:236)
	at io.fury.Fury.serialize(Fury.java:181)
	at io.fury.FuryTest.main(FuryTest.java:38)
```

@chaokunyang  I found an error while fixing this issue. Can you help take a look?


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i8EuM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCs3q,fury,1661652458,703,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-02T07:26:07Z,2023-08-02T07:26:07Z,"@3dot141  We have released version 0.0.16 of @furyjs/fury. Could you help us try it again? 
 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCs3q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jIetH,fury,1663167303,703,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-03T01:28:32Z,2023-08-03T01:28:32Z,"> 
I will close the issue, feel free to open new issue if you encounter any issues
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jIetH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/704,fury,1811712071,704,[Java] ThreadSafeFury can not register class?,,,,,CLOSED,2023-07-19T11:05:30Z,2023-12-15T03:09:12Z,"```
{
      ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
        // Allow to deserialize objects unknown types,
        // more flexible but less secure.
        // .withSecureMode(false)
        .withRefTracking(true)
        .buildThreadSafeFury();
      byte[] bytes = fury.serialize(object);
      System.out.println(fury.deserialize(bytes));
    }
```

`ThreadSafeFury` hasn't `register()` method.  Maybe could add `withRegister()` method to `Builder`.","{""url"": ""https://api.github.com/repos/apache/fury/issues/704/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3X7P,fury,1641905871,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-19T11:24:56Z,2023-07-19T11:24:56Z,"You can register by :
```java
 ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
        Fury f = Fury.builder().withLanguage(Language.JAVA)
          .withRefTracking(true).withClassLoader(classLoader).build();
        f.register(SomeClass.class);
        return f;
      });
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3X7P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3Z0o,fury,1641913640,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-19T11:30:32Z,2023-07-19T11:30:32Z,Perhaps we can add `register` API to `ThreadSafeFury ` too.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h3Z0o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h7rLD,fury,1643033283,704,NA,,,,,NA,2023-07-20T03:01:17Z,2023-07-20T03:01:17Z,"Yes, should add API, otherwise `buildThreadSafeFury()` is chicken ribs.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h7rLD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5icrHw,fury,1651683824,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T12:10:36Z,2023-07-26T12:10:36Z,"How do you test the serialization, this is not consist with what we see","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5icrHw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5icrgr,fury,1651685419,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T12:11:29Z,2023-07-26T12:11:29Z,ThreadSafe fury don't use multiple thread internally. It's just a fury pooling to avoid lock cost,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5icrgr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihuv7,fury,1653009403,704,NA,RD-Man,50395623,RD-Man,,NA,2023-07-27T06:49:49Z,2023-07-27T06:49:49Z,"> You can register by :
> 
> ```java
>  ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
>         Fury f = Fury.builder().withLanguage(Language.JAVA)
>           .withRefTracking(true).withClassLoader(classLoader).build();
>         f.register(SomeClass.class);
>         return f;
>       });
> ```

Just ask a question, what is the role of FuryBuilder#withClassLoader and what are the scenarios used, and whether it is used to reduce the frequent creation of fury instances？","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihuv7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5josZk,fury,1671612004,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-09T15:18:57Z,2023-08-09T15:18:57Z,"> > You can register by :
> > ```java
> >  ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
> >         Fury f = Fury.builder().withLanguage(Language.JAVA)
> >           .withRefTracking(true).withClassLoader(classLoader).build();
> >         f.register(SomeClass.class);
> >         return f;
> >       });
> > ```
> 
> Just ask a question, what is the role of FuryBuilder#withClassLoader and what are the scenarios used, and whether it is used to reduce the frequent creation of fury instances？

We bind every fury with a classloader, to avoid jit of different classes with same conflict with each other. In this way, we can bind  fury for every thread and classloader. Classloaders and threads are limited, so fury creation will be limited.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5josZk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ufJTu,fury,1853658350,704,NA,ye-xiaowei,60205491,,,NA,2023-12-13T10:32:35Z,2023-12-13T10:32:35Z,@chaokunyang Can register improve performance or is it just to improve security?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ufJTu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ugXXt,fury,1853978093,704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-13T14:03:39Z,2023-12-13T14:03:39Z,"> @chaokunyang Can register improve performance or is it just to improve security?

@ye-xiaowei performance will be better too, since class name can be serialized by an ID
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ugXXt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/707,https://api.github.com/repos/apache/fury/issues/707,fury,1813075141,707,[Java] Fury instance reuse,nasodaengineer,38414302,,,CLOSED,2023-07-20T03:23:36Z,2023-07-26T03:01:56Z,"    // Note that Fury instances should be reused between 
    // multiple serializations of different objects.
According to doc，if I want to implement a RedisSerializer，should I create a thread-safe  fury every time?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/707/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/707,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h7yCr,fury,1643061419,707,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T03:44:11Z,2023-07-20T03:44:11Z,You should create fury as a global static instance，and reuse that instance everytime,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h7yCr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/708,https://api.github.com/repos/apache/fury/issues/708,fury,1813189034,708,[<Fury component: Java|Python|C++|JavaScript|etc...>],behnamnajafi,140041541,,,CLOSED,2023-07-20T05:29:38Z,2023-07-20T08:12:42Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.","{""url"": ""https://api.github.com/repos/apache/fury/issues/708/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/708,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9X4L,fury,1643478539,708,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T08:12:41Z,2023-07-20T08:12:41Z,@gnawux please provide details about what you want,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9X4L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/709,https://api.github.com/repos/apache/fury/issues/709,fury,1813389734,709,[<Fury component: Java|Python|C++|JavaScript|etc...>],MoodyJay2,134006444,,,CLOSED,2023-07-20T07:53:36Z,2023-08-20T06:40:03Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.","{""url"": ""https://api.github.com/repos/apache/fury/issues/709/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/709,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9XVA,fury,1643476288,709,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T08:11:02Z,2023-07-20T08:11:02Z,@MoodyJay2 please provide details about what you want,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9XVA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/709,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9dYa,fury,1643501082,709,NA,MoodyJay2,134006444,,,NA,2023-07-20T08:28:57Z,2023-07-20T08:28:57Z,"
Please I will appreciate your assistance, I am having hard time to recover my Apple recovery because my iPhone has been wiped by my lil son so I need you to help me out to regain my access  need you 😩😭😭😭😒😒😩😩



Sent from Mail.ru app for iOS


Thursday, July 20, 2023, 9:11 AM +01:00 from ***@***.***  ***@***.***>:
>@MoodyJay2 please provide details about what you want
>—
>Reply to this email directly,  view it on GitHub , or  unsubscribe .
>You are receiving this because you were mentioned. Message ID:  <alipay/fury/issues/709/1643476288 @ github . com>","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9dYa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/709,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kciNS,fury,1685201746,709,NA,MoodyJay2,134006444,,,NA,2023-08-20T06:40:02Z,2023-08-20T06:40:02Z,"

Get Outlook for iOS<https://aka.ms/o0ukef>

Activation Lock prevents anyone who is not the owner from using this iPhone.
To unlock this iPhone, enter the Apple ID and password that were used during setup.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kciNS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/710,https://api.github.com/repos/apache/fury/issues/710,fury,1813422422,710,[Java] serialize java MethodHandle,shouriken,76582577,shouriken,,CLOSED,2023-07-20T08:09:42Z,2023-07-21T04:26:26Z,"how can i serialize a java MethodHandle obj to bytes.
```java
public class Adder {
    public int add(int a, int b) {
        return a + b;
    }
}
```
```java
MethodHandles.Lookup publicLookup = MethodHandles.publicLookup();
MethodType methodType = MethodType.methodType(Integer.TYPE, Integer.TYPE, Integer.TYPE);
MethodHandle mh = publicLookup.findVirtual(Adder.class, ""add"", methodType);
MethodHandle methodHandle = MethodHandles.insertArguments(methodHandle, 0, new Adder());
```
how can i serialize the `methodHandle` to bytes and deserialize bytes to a new `methodHandle` can execute `methodHandle.invoke(1, 1)` answer is 2.
thx","{""url"": ""https://api.github.com/repos/apache/fury/issues/710/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/710,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9Xrf,fury,1643477727,710,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T08:12:05Z,2023-07-20T08:12:05Z,@shouriken we don't allow to serialize such objects，it's not safe,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h9Xrf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/711,https://api.github.com/repos/apache/fury/issues/711,fury,1813860194,711,[Java]Throw an exception in JMH on multi thread mode ,jiangguilong2000,5009933,Allen Jiang,41157121@qq.com,CLOSED,2023-07-20T12:14:31Z,2023-07-20T12:25:17Z,"```java
@Fork(1)
@Threads(Threads.MAX)
@BenchmarkMode(Mode.Throughput)
@Warmup(iterations = 5, time = 1)
@Measurement(iterations = 5, time = 1)
@OutputTimeUnit(TimeUnit.SECONDS)
@State(Scope.Benchmark)
public class ProtoBenchMarkX {
    private SkillFire_S2C_Msg  skillFire_s2C_msg = DataUtil.build(SkillFire_S2C_Msg.class);
    private Fury fury;

    @Setup
    public void init() {
        try {
          byte[]  array = FileUtils.getByteArrayFromFile(""message.txt"");
            skillFire_s2C_msg= JSON.parseObject(array,SkillFire_S2C_Msg.class);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        fury = Fury.builder().withLanguage(Language.JAVA).withRefTracking(true).requireClassRegistration(false).build();

    }
    @Benchmark
    public byte[] furySerialize() {
        return fury.serialize(skillFire_s2C_msg);
    }
}
```
here is exception as follows:
```bash
java.lang.NullPointerException
	at io.fury.resolver.EnumStringResolver.resetWrite(EnumStringResolver.java:184)
	at io.fury.Fury.resetWrite(Fury.java:1142)
	at io.fury.Fury.serialize(Fury.java:242)
	at io.fury.Fury.serialize(Fury.java:183)
	at io.gamioo.sandbox.ProtoBenchMark.furySerialize(ProtoBenchMark.java:82)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_thrpt_jmhStub(ProtoBenchMark_furySerialize_jmhTest.java:142)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_Throughput(ProtoBenchMark_furySerialize_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)

java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8
	at io.fury.collection.IdentityObjectIntMap.putOrGet(IdentityObjectIntMap.java:100)
	at io.fury.resolver.MapRefResolver.writeRefOrNull(MapRefResolver.java:82)
	at io.gamioo.sandbox.SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.writeFields$(SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.java:136)
	at io.gamioo.sandbox.SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.write(SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.java:313)
	at io.fury.Fury.writeData(Fury.java:485)
	at io.fury.Fury.writeRef(Fury.java:285)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
	at io.gamioo.sandbox.ProtoBenchMark.furySerialize(ProtoBenchMark.java:82)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_thrpt_jmhStub(ProtoBenchMark_furySerialize_jmhTest.java:142)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_Throughput(ProtoBenchMark_furySerialize_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)

java.lang.ArrayIndexOutOfBoundsException: Index 11 out of bounds for length 8
	at io.fury.collection.IdentityObjectIntMap.putOrGet(IdentityObjectIntMap.java:100)
	at io.fury.resolver.MapRefResolver.writeRefOrNull(MapRefResolver.java:82)
	at io.gamioo.sandbox.SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.writeFields1$(SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.java:184)
	at io.gamioo.sandbox.SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.write(SkillFire_S2C_MsgFuryRefCodec_2131155096_1908153060_829010163.java:314)
	at io.fury.Fury.writeData(Fury.java:485)
	at io.fury.Fury.writeRef(Fury.java:285)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
	at io.gamioo.sandbox.ProtoBenchMark.furySerialize(ProtoBenchMark.java:82)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_thrpt_jmhStub(ProtoBenchMark_furySerialize_jmhTest.java:142)
	at io.gamioo.sandbox.jmh_generated.ProtoBenchMark_furySerialize_jmhTest.furySerialize_Throughput(ProtoBenchMark_furySerialize_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/711/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/711,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h-uMs,fury,1643832108,711,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-20T12:24:59Z,2023-07-20T12:24:59Z,"Fury is not thread safe, you should use thread safe fury. Please reference our document for further details about ThreadSafeFury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5h-uMs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/713,https://api.github.com/repos/apache/fury/issues/713,fury,1815166135,713,[Java] Provide tools or methods for JDK Serialization  migration,springrain,4935705,springrain,chunanyong@163.com,CLOSED,2023-07-21T05:13:51Z,2023-07-21T06:00:01Z,"The production system uses JDK Serialization, Fury cannot read directly, it is recommended to provide migration tools or methods
","{""url"": ""https://api.github.com/repos/apache/fury/issues/713/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/716,fury,1815217443,716,Performance problem ??,,,,,CLOSED,2023-07-21T06:15:59Z,2023-07-21T12:47:37Z,"I' ve test **fury** and **kryo** performance benchmark, and found **kryo** performance is better.  Why???

The code as follows:

```java
/**
 * Copyright © 2023 shopenhe (shopen.he@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.shopenhe.benchmarks;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import io.fury.Fury;
import io.fury.Language;
import io.fury.ThreadLocalFury;
import io.fury.ThreadSafeFury;
import lombok.Data;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Serialize framework benchmarks, about Fury, Kryo.
 *
 * @author shopenhe
 */
public class SerializeBenchmark {

    @Benchmark
    public void testFurySerialize(FuryOperation operation) {
        operation.serialize();
    }

    @Benchmark
    public void testFuryDeserialize(FuryOperation operation) {
        operation.deserialize();
    }

    @Benchmark
    public void testKryoSerialize(KryoOperation operation) {
        operation.serialize();
    }

    @Benchmark
    public void testKryoDeserialize(KryoOperation operation) {
        operation.deserialize();
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(SerializeBenchmark.class.getSimpleName())
                .threads(2)
                .forks(1)
                .build();
        new Runner(opt).run();
    }

    @State(Scope.Benchmark)
    public static class FuryOperation {

        ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
            Fury f = Fury.builder().withLanguage(Language.JAVA)
                    .withRefTracking(true).withClassLoader(classLoader).build();
            f.register(SomeClass.class);
            f.register(Item.class);
            return f;
        });
        byte[] dataSerialized;

        public FuryOperation() {
            dataSerialized = serialize();
        }

        public byte[] serialize() {
            SomeClass someClass = new SomeClass();
            for (int i = 0; i < 8000; i++) {
                {
                    Item item = new Item();
                    item.setId(123456789L + i);
                    item.setName(""itemName"" + i);
                    item.setType(1 + i);
                    item.setScore(12345.6789F + i);
                    someClass.getItemList().add(item);
                }
                {
                    Item item = new Item();
                    item.setId(987654321L + i);
                    item.setName(""itemName"" + i);
                    item.setType(1 + i);
                    item.setScore(98765.4321F + i);
                    someClass.getItemMap().put(i, item);
                }
            }
            return fury.serialize(someClass);
        }

        public SomeClass deserialize() {
            return (SomeClass) fury.deserialize(dataSerialized);
        }

    }

    @State(Scope.Benchmark)
    public static class KryoOperation {

        ThreadLocal<Kryo> kryoTL = ThreadLocal.withInitial(() -> {
            Kryo kryo = new Kryo();
            kryo.register(SomeClass.class);
            kryo.register(Item.class);
            kryo.register(ArrayList.class);
            kryo.register(HashMap.class);
            return kryo;
        });
        byte[] dataSerialized;

        public KryoOperation() {
            dataSerialized = serialize();
        }

        public byte[] serialize() {
            SomeClass someClass = new SomeClass();
            for (int i = 0; i < 8000; i++) {
                {
                    Item item = new Item();
                    item.setId(123456789L + i);
                    item.setName(""itemName"" + i);
                    item.setType(1 + i);
                    item.setScore(12345.6789F + i);
                    someClass.getItemList().add(item);
                }
                {
                    Item item = new Item();
                    item.setId(987654321L + i);
                    item.setName(""itemName"" + i);
                    item.setType(1 + i);
                    item.setScore(98765.4321F + i);
                    someClass.getItemMap().put(i, item);
                }
            }
            Output output = new Output(1024, -1);
            kryoTL.get().writeObject(output, someClass);
            return output.getBuffer();
        }

        public SomeClass deserialize() {
            Input input = new Input(dataSerialized);
            return kryoTL.get().readObject(input, SomeClass.class);
        }

    }

    @Data
    static class SomeClass {

        long updateTime = 1L;
        List<Item> itemList = new ArrayList<>();
        Map<Integer, Item> itemMap = new HashMap<>();

    }

    @Data
    static class Item {

        long id;
        String name;
        int type;
        float score;

    }

}

```

The benchmark result:

> Benchmark                                Mode  Cnt     Score    Error  Units
> SerializeBenchmark.testFuryDeserialize  thrpt    5  1435.578 ± 37.215  ops/s
> SerializeBenchmark.testFurySerialize    thrpt    5   735.145 ± 13.027  ops/s
> SerializeBenchmark.testKryoDeserialize  thrpt    5  1929.386 ± 19.501  ops/s
> SerializeBenchmark.testKryoSerialize    thrpt    5  1272.712 ± 29.032  ops/s
","{""url"": ""https://api.github.com/repos/apache/fury/issues/716/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDZVz,fury,1645057395,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T06:37:40Z,2023-07-21T06:37:40Z,"@shopenhe Fury skipped JIT for non-public class, could you please update your class to public. We'll fix this as soon as possible","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDZVz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDa92,fury,1645064054,716,NA,,,,,NA,2023-07-21T06:45:34Z,2023-07-21T06:45:34Z,"ok, I' ll take a try.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDa92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDeZl,fury,1645078117,716,NA,,,,,NA,2023-07-21T07:01:01Z,2023-07-21T07:01:01Z,"Still not good,

> Benchmark                                Mode  Cnt     Score     Error  Units
> SerializeBenchmark.testFuryDeserialize  thrpt    5  2179.651 ± 865.128  ops/s
> SerializeBenchmark.testFurySerialize    thrpt    5   814.978 ± 181.144  ops/s
> SerializeBenchmark.testKryoDeserialize  thrpt    5  1943.081 ± 208.354  ops/s
> SerializeBenchmark.testKryoSerialize    thrpt    5  1274.141 ±  90.279  ops/s","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iDeZl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iD018,fury,1645170044,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T07:59:14Z,2023-07-21T07:59:14Z,"@shopenhe I tested in my machine, works fine:
```
Benchmark                                Mode  Cnt     Score      Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    3  1692.921 ± 1401.744  ops/s
SerializeBenchmark.testFurySerialize    thrpt    3  2090.740 ± 1414.831  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    3   627.206 ± 1840.636  ops/s
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iD018/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iD9_q,fury,1645207530,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T08:27:22Z,2023-07-21T08:27:22Z,"@shopenhe The kryo deserialization of your code failed:
```java
com.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 12434
Serialization trace:
itemMap (org.example.SerializeBenchmark$SomeClass)
	at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:137)
	at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:693)
	at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:804)
	at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:153)
	at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:39)
	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731)
	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:540)
	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:709)
	at org.example.SerializeBenchmark$KryoOperation.deserialize(SerializeBenchmark.java:137)
	at org.example.SerializeBenchmark.testKryoDeserialize(SerializeBenchmark.java:70)
	at org.example.jmh_generated.SerializeBenchmark_testKryoDeserialize_jmhTest.testKryoDeserialize_thrpt_jmhStub(SerializeBenchmark_testKryoDeserialize_jmhTest.java:124)
	at org.example.jmh_generated.SerializeBenchmark_testKryoDeserialize_jmhTest.testKryoDeserialize_Throughput(SerializeBenchmark_testKryoDeserialize_jmhTest.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
```

I guess it's a multi-threaded issue. Maybe you should use `@State(Scope.Thread)` for multiple-threaded state.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iD9_q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEAP8,fury,1645216764,716,NA,,,,,NA,2023-07-21T08:34:35Z,2023-07-21T08:34:35Z,"Supposed not to be, because `ThreadLocal<Kryo> kryoTL` is used.

`@State(Scope.Thread)` won't test Fury or Kyro in multi-thread concurrency.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEAP8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEZwP,fury,1645321231,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T09:54:46Z,2023-07-21T09:54:46Z,"@shopenhe You can make fury/kryo static. I updated your code:
```java
package org.example;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import io.fury.Fury;
import io.fury.Language;
import io.fury.ThreadLocalFury;
import io.fury.ThreadSafeFury;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import org.openjdk.jmh.runner.options.TimeValue;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Serialize framework benchmarks, about Fury, Kryo.
 *
 * @author shopenhe
 */
public class SerializeBenchmark {
  static SomeClass create() {
    SomeClass someClass = new SomeClass();
    for (int i = 0; i < 8000; i++) {
      {
        Item item = new Item();
        item.setId(123456789L + i);
        item.setName(""itemName"" + i);
        item.setType(1 + i);
        item.setScore(12345.6789F + i);
        someClass.getItemList().add(item);
      }
      {
        Item item = new Item();
        item.setId(987654321L + i);
        item.setName(""itemName"" + i);
        item.setType(1 + i);
        item.setScore(98765.4321F + i);
        someClass.getItemMap().put(i, item);
      }
    }
    return someClass;
  }

  @Benchmark
  public void testFurySerialize(FuryOperation operation) {
    operation.serialize();
  }

  @Benchmark
  public void testFuryDeserialize(FuryOperation operation) {
    operation.deserialize();
  }

  @Benchmark
  public void testKryoSerialize(KryoOperation operation) {
    operation.serialize();
  }

  @Benchmark
  public void testKryoDeserialize(KryoOperation operation) {
    operation.deserialize();
  }

  public static void main(String[] args) throws Exception {
    Options opt = new OptionsBuilder()
      .include(SerializeBenchmark.class.getSimpleName())
      .threads(2)
      .forks(1).warmupIterations(10).warmupTime(TimeValue.seconds(2))
      .measurementIterations(5).measurementTime(TimeValue.seconds(2))
      .build();
    new Runner(opt).run();
  }

  static final ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
    Fury f = Fury.builder().withLanguage(Language.JAVA)
      .withRefTracking(true).withClassLoader(classLoader).build();
    f.register(SomeClass.class);
    f.register(Item.class);
    return f;
  });

  @State(Scope.Thread)
  public static class FuryOperation {
    byte[] dataSerialized;
    Object someClass = create();

    public FuryOperation() {
      dataSerialized = serialize();
    }

    public byte[] serialize() {
      return fury.serialize(someClass);
    }

    public SomeClass deserialize() {
      return (SomeClass) fury.deserialize(dataSerialized);
    }

  }

  static ThreadLocal<Kryo> kryoTL = ThreadLocal.withInitial(() -> {
    Kryo kryo = new Kryo();
    kryo.register(SomeClass.class);
    kryo.register(Item.class);
    kryo.register(ArrayList.class);
    kryo.register(HashMap.class);
    return kryo;
  });

  @State(Scope.Thread)
  public static class KryoOperation {
    Object someClass = create();
    byte[] dataSerialized;

    public KryoOperation() {
      dataSerialized = serialize();
      kryoTL.get().readObject(new Input(dataSerialized), SomeClass.class);
    }

    public byte[] serialize() {
      Output output = new Output(1024, -1);
      kryoTL.get().writeObject(output, someClass);
      return output.toBytes();
    }

    public SomeClass deserialize() {
      Input input = new Input(dataSerialized);
      return kryoTL.get().readObject(input, SomeClass.class);
    }

  }

  static class SomeClass {

    long updateTime = 1L;
    List<Item> itemList = new ArrayList<>();
    Map<Integer, Item> itemMap = new HashMap<>();

    public long getUpdateTime() {
      return updateTime;
    }

    public void setUpdateTime(long updateTime) {
      this.updateTime = updateTime;
    }

    public List<Item> getItemList() {
      return itemList;
    }

    public void setItemList(List<Item> itemList) {
      this.itemList = itemList;
    }

    public Map<Integer, Item> getItemMap() {
      return itemMap;
    }

    public void setItemMap(Map<Integer, Item> itemMap) {
      this.itemMap = itemMap;
    }
  }

  static class Item {

    long id;
    String name;
    int type;
    float score;

    public long getId() {
      return id;
    }

    public void setId(long id) {
      this.id = id;
    }

    public String getName() {
      return name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public int getType() {
      return type;
    }

    public void setType(int type) {
      this.type = type;
    }

    public float getScore() {
      return score;
    }

    public void setScore(float score) {
      this.score = score;
    }
  }
}

```

Here are the resulfs of JDK11:
```text
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  2418.075 ± 321.134  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5  2022.643 ± 227.838  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5   837.370 ± 175.031  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5   545.850 ± 183.350  ops/s
```

JDK8 result:
```text
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  1555.122 ± 370.791  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5  1957.589 ± 751.492  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5   978.505 ±  36.912  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5   675.755 ±  44.713  ops/s
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEZwP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEbvG,fury,1645329350,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T10:00:59Z,2023-07-21T10:00:59Z,"Struct serialization can get biggest speed up. String serialization need a copy, which will amortise the overall speedup.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEbvG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEhwa,fury,1645354010,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T10:21:32Z,2023-07-21T10:21:32Z,@shopenhe Please let us know if the benchmark result still doesn't meet the expection.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEhwa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iElV5,fury,1645368697,716,NA,,,,,NA,2023-07-21T10:33:45Z,2023-07-21T10:33:45Z,"I ran your code with JDK8, the result as follows:

```
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  2399.197 ± 308.950  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5   811.430 ±  49.581  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5  1895.294 ± 286.966  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5  1274.663 ± 275.899  ops/s
```

What‘s the difference between your machine and mine, something did I miss? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iElV5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iErU2,fury,1645393206,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T10:54:47Z,2023-07-21T10:54:47Z,"The above benchmarks are running on macos montery:
```
16 GB 2667 MHz DDR4
2.6 GHz 6-Core Intel Core i7
```

I also run it on a linux machine, the results are similar.
- JDK11
```
Benchmark                                Mode  Cnt     Score    Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  2462.799 ± 31.352  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5  2027.224 ± 14.870  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5   877.002 ± 51.237  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5   554.902 ± 38.426  ops/s
```
- JDK8:
```
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  1710.551 ±  42.722  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5  2076.432 ± 347.142  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5   926.386 ±  15.804  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5   681.812 ±  26.052  ops/s
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iErU2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE3Ly,fury,1645441778,716,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-07-21T11:33:24Z,2023-07-21T11:33:24Z,"I run it on my Apple M2 Pro 16GB, the results are similar. 


- JDK17

![image](https://github.com/alipay/fury/assets/16490211/91081cf1-5030-41b0-98b0-2b7527ebbb1a)

- JDK8
![image](https://github.com/alipay/fury/assets/16490211/50cb64a5-95c8-418c-9d36-7ee15c31b436)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE3Ly/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE40Q,fury,1645448464,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T11:39:45Z,2023-07-21T11:39:45Z,"> @shopenhe Fury skipped JIT for non-public class, could you please update your class to public. We'll fix this as soon as possible

Non public class serialization can be jitted too now, see more in #720 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE40Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE8XG,fury,1645462982,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T11:53:33Z,2023-07-21T11:53:33Z,"@shopenhe I see, you are using kryo5, which disabled references by default:
![image](https://github.com/alipay/fury/assets/12445254/26b5a572-3878-4878-9cb2-f6dc1995d530)

![image](https://github.com/alipay/fury/assets/12445254/8fab1bd5-a5b9-43fc-9673-8027a36fe66d)

Please disable fury references too, or enable kryo references tracking by `com.esotericsoftware.kryo.Kryo#setReferences`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iE8XG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFBki,fury,1645484322,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T12:10:35Z,2023-07-21T12:10:35Z,"This is the resut of macpro compared to kryo5 with references enabled under JDK17:
![image](https://github.com/alipay/fury/assets/12445254/17b51d66-47bc-44ed-96dc-de0cf0d2b7fe)

This the result when references are disabled:
![image](https://github.com/alipay/fury/assets/12445254/9f6f8379-2c41-4d8f-8bf6-960e0073ad1e)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFBki/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFChP,fury,1645488207,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T12:13:57Z,2023-07-21T12:13:57Z,@shopenhe could you run it again?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFChP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFD9g,fury,1645494112,716,NA,,,,,NA,2023-07-21T12:19:09Z,2023-07-21T12:19:09Z,"Yep, you found the cause,  

enable references results:

```
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  2417.903 ± 225.328  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5   913.325 ±  91.705  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5   850.851 ±  62.523  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5   333.428 ±  52.270  ops/s
```

disable references results:

```
Benchmark                                Mode  Cnt     Score     Error  Units
SerializeBenchmark.testFuryDeserialize  thrpt    5  2476.625 ± 623.850  ops/s
SerializeBenchmark.testFurySerialize    thrpt    5  1921.927 ± 244.072  ops/s
SerializeBenchmark.testKryoDeserialize  thrpt    5  1105.575 ± 239.819  ops/s
SerializeBenchmark.testKryoSerialize    thrpt    5  1255.232 ± 299.198  ops/s
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFD9g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFHbx,fury,1645508337,716,NA,,,,,NA,2023-07-21T12:31:50Z,2023-07-21T12:31:50Z,Thanks a lot!!,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFHbx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/716,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFMp_,fury,1645529727,716,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T12:47:25Z,2023-07-21T12:47:25Z,"You are welcome, feel free to filing more issue when you need help. this give me some inspiration, fury should disable reference by default too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iFMp_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/717,https://api.github.com/repos/apache/fury/issues/717,fury,1815255525,717,[Java]support more API for ThreadLocalFury as Fury,jiangguilong2000,5009933,Allen Jiang,41157121@qq.com,OPEN,2023-07-21T06:52:47Z,2023-07-21T09:57:11Z,"here as follows is urgent：
``` java
 public byte[] serializeJavaObject(Object obj) {

}

public <T> T deserializeJavaObject(byte[] data, Class<T> cls){

}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/717/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/717,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEaka,fury,1645324570,717,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-21T09:57:01Z,2023-07-21T09:57:01Z,You can use `io.fury.ThreadLocalFury#execute` for anything you want,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iEaka/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/720,https://api.github.com/repos/apache/fury/issues/720,fury,1815273001,720,[Java] Support jit for non public classes,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-21T07:07:32Z,2023-07-21T07:28:09Z,"## Is your feature request related to a problem? Please describe.
Currently fury skip jit for non-public classes:
```java
 public static boolean supportCodegenForJavaSerialization(Class<?> cls) {
    return isJavaPojo(TypeToken.of(cls));
  }

  private static boolean isJavaPojo(TypeToken<?> type) {
    Class<?> rawType = getRawType(type);
    // since we need to access class in generated code in our package, the class must be public.
    // TODO support default access-level class jit.
    if (Modifier.isPublic(rawType.getModifiers())) {
      // bean class can be static nested class, but can't be a non-static inner class
      return rawType.getEnclosingClass() == null || Modifier.isStatic(rawType.getModifiers());
    } else {
      return false;
    }
  }
```

We shoudl support jit for such classes

## Describe the solution you'd like
Non-public classes can't be accessed in fury generated serializer since it's compiled or loaded in another classloader.

We should use unsafe to read write fields instead of generate accessor. Although we can create accessor for default access level classes in the classes's classloader, but the generated accessor need to downcast the `Object` type into target type, which is not cheap too.

## Additional context
#716 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/720/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/721,https://api.github.com/repos/apache/fury/issues/721,fury,1815454488,721,How about donation to Apache foundation?,,,,,CLOSED,2023-07-21T09:14:05Z,2023-12-26T12:42:27Z,"How about donation this project to Apache foundation?
Like apache doubbo, it is long live for long times.


I did not trust alibaba and alipay, but i trust Apache","{""url"": ""https://api.github.com/repos/apache/fury/issues/721/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/721,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iI4-a,fury,1646497690,721,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-22T05:49:10Z,2023-07-22T05:49:10Z,"@cnmade Thanks for your suggestion. It's a good advice to let the foundation  to govern the development of fury.  Apache foundation is one of the most mature and biggest open-source foundation in the world. It made so many incredible contributions to the world. 
`The Apache Way` inspired many engineers. Its `community over the code`,  opennesss, neutrality and collaboration principles are also what fury try to keep up with. With the help of the foundation, I believe fury can grow much better and faster. 
But fury is just open-sourced in less a week, we are in the early stage, there are still many things for our document/specification/community to build. We need to make our development and governance standardized,  get more contributors involved in, to make fury as a community-driven project. Those things may need be finished first.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iI4-a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/721,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vbqE9,fury,1869521213,721,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-26T12:42:27Z,2023-12-26T12:42:27Z,Close this issue since Fury has been donated to ASF,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vbqE9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/724,https://api.github.com/repos/apache/fury/issues/724,fury,1815690909,724,[Rust]  calculate the reserved space on compile time,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-21T12:03:33Z,2023-07-21T17:14:26Z,"## Is your feature request related to a problem? Please describe.
currently, we reserved the space using a static number when writing data.
We can calculate the space to be reserved at compile-time.

## Describe the solution you'd like
calculate the reserved space on compile time
","{""url"": ""https://api.github.com/repos/apache/fury/issues/724/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/726,https://api.github.com/repos/apache/fury/issues/726,fury,1816584090,726,[Java/Python] disable reference tracking by default,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-22T03:04:26Z,2023-07-22T03:09:40Z,"## Is your feature request related to a problem? Please describe.
Most system has no shared/circular objects,, protocol such as protobuf/flatbuffer doesn't support too.

Reference tracking for big objects are slow

## Describe the solution you'd like
Fury should disable reference tracking by default, and let the users enable it if needed.

## Additional context
#716 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/726/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/729,https://api.github.com/repos/apache/fury/issues/729,fury,1816585873,729,[Java] make code stats as debug level to reduce fury log,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-22T03:12:35Z,2023-07-22T03:13:24Z,"## Is your feature request related to a problem? Please describe.
Fury jit code generator prints too much log:
![image](https://github.com/alipay/fury/assets/12445254/119ee06d-bda0-4412-b7ba-80d32818a6a5)

## Describe the solution you'd like
make code stats as debug level ","{""url"": ""https://api.github.com/repos/apache/fury/issues/729/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/730,https://api.github.com/repos/apache/fury/issues/730,fury,1816588768,730,[Release] Release fury v0.1.0,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-22T03:25:55Z,2023-08-01T01:55:42Z,"## Is your feature request related to a problem? Please describe.
This issue is used to track fury v0.1.0 release
","{""url"": ""https://api.github.com/repos/apache/fury/issues/730/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/732,https://api.github.com/repos/apache/fury/issues/732,fury,1816962290,732, [Doc] use fury png logo,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-23T02:32:11Z,2023-07-23T02:32:48Z,"## Is your feature request related to a problem? Please describe.
Curretn fury use svg logo, the logo has gradual change color, which case sgv logo has 235k size, make loading slow.

## Describe the solution you'd like
Use png logo, which is 80k, smaller.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/732/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/736,https://api.github.com/repos/apache/fury/issues/736,fury,1817056884,736,Fix grammar-typos in readme,therealharish,48938639,Harish,,CLOSED,2023-07-23T09:26:25Z,2023-07-28T00:41:41Z,"Line 54 - ""Dynamic serialization frameworks **supports** polymorphism"" should be - ""Dynamic serialization frameworks **support** polymorphism""
","{""url"": ""https://api.github.com/repos/apache/fury/issues/736/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/736,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iKCYj,fury,1646798371,736,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-23T09:59:49Z,2023-07-23T09:59:49Z,"@therealharish Thanks for pointing the typo, would you mind submitting a pull request to fix it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iKCYj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/737,https://api.github.com/repos/apache/fury/issues/737,fury,1817097272,737,[Rust | Javascript] Make the protocols of rust and js consistent,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-07-23T11:44:11Z,2023-07-24T03:42:13Z,"## Is your feature request related to a problem? Please describe.
After several updates, the protocols of rust and python are not the same, and the protocols implemented by rust and js should be consistent with python","{""url"": ""https://api.github.com/repos/apache/fury/issues/737/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/742,https://api.github.com/repos/apache/fury/issues/742,fury,1817903385,742,[Java] Optimize object array serialization by cache element type info,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-24T08:25:13Z,2023-07-24T11:34:41Z,"## Is your feature request related to a problem? Please describe.
Optimize object array serialization by cache element type info to avoid query classinfo everytime for non final element type","{""url"": ""https://api.github.com/repos/apache/fury/issues/742/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/745,https://api.github.com/repos/apache/fury/issues/745,fury,1818305674,745,[Java] using lambda to avoid reflection in resolve/replace,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-24T12:16:20Z,2023-07-24T12:31:24Z,"## Is your feature request related to a problem? Please describe.
Currenly fury use reflection to invoke `writeReplace/readResolve ` jdk custom method, which is slow.

## Describe the solution you'd like
- We can use MethodLookup create method handle to reduce overhead
- Using `java.lang.invoke.LambdaMetafactory#metafactory` can reduce overhead more.","{""url"": ""https://api.github.com/repos/apache/fury/issues/745/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/746,https://api.github.com/repos/apache/fury/issues/746,fury,1818371036,746,[Java] avoid reflection in writeObject/readOject/readObjectNoData ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-24T12:54:35Z,2023-07-24T12:59:44Z,"## Is your feature request related to a problem? Please describe.
Similar to #745 , we can  avoid reflection in writeObject/readOject/readObjectNoData

## Additional context
#745","{""url"": ""https://api.github.com/repos/apache/fury/issues/746/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/749,https://api.github.com/repos/apache/fury/issues/749,fury,1818469719,749,[Java] optimize guava RegularImmutableList serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-24T13:48:41Z,2023-07-24T13:59:53Z,"## Is your feature request related to a problem? Please describe.
Guava list custom `writeReplace/readResolve` method, the serialization will be slow to keep JDK compatibility.

## Describe the solution you'd like
`RegularImmutableList` serialization is stable, we can bypass this  `writeReplace/readResolve` mechanism","{""url"": ""https://api.github.com/repos/apache/fury/issues/749/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/751,https://api.github.com/repos/apache/fury/issues/751,fury,1819443736,751,[Java] Optimize guava List/Map/Set serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-25T02:34:00Z,2023-07-25T02:50:51Z,"## Is your feature request related to a problem? Please describe.
Guava List/Map/Set custom serialization by JDK writeReplace/readResolve, which is slow. Although fury support jdk custom serialization natively, it still has many cost.

## Describe the solution you'd like
Optimize common  guava List/Map/Set serialization manually to bypass  jdk custom serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/751/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/753,https://api.github.com/repos/apache/fury/issues/753,fury,1819446570,753,[Java] add MakeJDKFunction lambda factory,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-25T02:37:52Z,2023-07-25T02:38:08Z,"## Is your feature request related to a problem? Please describe.
Add utils to create JDK Function/'COnsumer/BiConsumer from method handle

","{""url"": ""https://api.github.com/repos/apache/fury/issues/753/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/755,https://api.github.com/repos/apache/fury/issues/755,fury,1819702956,755,[Doc] Add zh_cn doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-25T07:14:25Z,2023-07-25T07:55:52Z,"## Is your feature request related to a problem? Please describe.
Add zh_cn doc","{""url"": ""https://api.github.com/repos/apache/fury/issues/755/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/755,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iTpIt,fury,1649316397,755,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-25T07:55:52Z,2023-07-25T07:55:52Z,"Add zh_cn doc in https://github.com/fury-project/fury-sites/issues/28

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iTpIt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/756,https://api.github.com/repos/apache/fury/issues/756,fury,1819934311,756,"[JavaScript] Serializing a map with 20000 elements, will fail sometimes ",immatt2015,11419393,immatt2015,,CLOSED,2023-07-25T09:41:32Z,2023-08-01T02:33:13Z,"
**Describe the bug**
serializing a map with 2w elements failed sometimes.

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**

js code
```
const Fury = require('@furyjs/fury');
const { Type } = Fury;
const hps = require('@furyjs/hps');

const mp = new Map()
for (let i = 0; i < 20000; i++) {
    mp.set(btoa((Math.random() * 10000).toString()), !!i % 2)
}

const description = Type.object('test', {
    value: Type.map(Type.string(), Type.bool())
});

const fury = new Fury.default({ hps });
const { serialize, deserialize } = fury.registerSerializer(description);

const input = serialize({ value: mp });
const result = deserialize(input);

console.log(result.value.size)
```

**Screenshots**
<img width=""829"" alt=""Screenshot 2023-07-25 at 17 36 44"" src=""https://github.com/alipay/fury/assets/11419393/c94b0b10-c3c6-4d82-a55d-ef58c2afeef9"">


**Environment (please complete the following information):**
```
macOs 13.4.1
node v19.6.0
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/756/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/756,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iUUvD,fury,1649494979,756,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-25T09:50:43Z,2023-07-25T09:50:43Z,@wangweipeng2 could you take a look at it?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iUUvD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/756,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iUiql,fury,1649552037,756,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-07-25T10:24:17Z,2023-07-25T10:24:17Z,"> **Describe the bug** serializing a map with 2w elements failed sometimes.
> 
> **Expected behavior** A clear and concise description of what you expected to happen.
> 
> **To Reproduce**
> 
> js code
> 
> ```
> const Fury = require('@furyjs/fury');
> const { Type } = Fury;
> const hps = require('@furyjs/hps');
> 
> const mp = new Map()
> for (let i = 0; i < 20000; i++) {
>     mp.set(btoa((Math.random() * 10000).toString()), !!i % 2)
> }
> 
> const description = Type.object('test', {
>     value: Type.map(Type.string(), Type.bool())
> });
> 
> const fury = new Fury.default({ hps });
> const { serialize, deserialize } = fury.registerSerializer(description);
> 
> const input = serialize({ value: mp });
> const result = deserialize(input);
> 
> console.log(result.value.size)
> ```
> 
> **Screenshots** <img alt=""Screenshot 2023-07-25 at 17 36 44"" width=""829"" src=""https://user-images.githubusercontent.com/11419393/255858392-c94b0b10-c3c6-4d82-a55d-ef58c2afeef9.png"">
> 
> **Environment (please complete the following information):**
> 
> ```
> macOs 13.4.1
> node v19.6.0
> ```
Thank you for submitting the issue, it is a bug. The buffer space is calculated when generating JavaScript code. We made some adjustments to the protocol a few days ago, which caused the space calculation to be incorrect. I will fix it and add buffer space calculation test cases to ensure that it does not happen again in the future.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iUiql/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/757,https://api.github.com/repos/apache/fury/issues/757,fury,1820162189,757,[JavaScript | Rust ] Add test suites,theweipeng,16490211,weipeng,wangweipeng@apache.org,OPEN,2023-07-25T11:53:31Z,2023-11-08T15:23:42Z,"## Is your feature request related to a problem? Please describe.

As the protocol gradually stabilizes, it is necessary to add test suites to ensure stability and correctness.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/757/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rK0tv,fury,1797999471,757,NA,caicancai,77189278,Cancai Cai,,NA,2023-11-07T08:06:48Z,2023-11-07T08:06:48Z,"@chaokunyang @wangweipeng2 Hello, have you picked up the Add rust test suites? I want to try Add rust test suites","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rK0tv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rK6x-,fury,1798024318,757,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-07T08:26:03Z,2023-11-07T08:26:03Z,@wangweipeng2 could you provide some tips,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rK6x-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rZNqy,fury,1801771698,757,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-11-08T12:14:20Z,2023-11-08T12:14:20Z,"> have you picked up the Add rust test suites? I want to try Add rust test suites

> @chaokunyang @wangweipeng2 Hello, have you picked up the Add rust test suites? I want to try Add rust test suites

I haven't started working with rust's test suite yet, and I'm glad you want to, but the protocol isn't completely stable yet, and you might face rewriting problems if you start adding test suites。
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rZNqy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rag1S,fury,1802112338,757,NA,caicancai,77189278,Cancai Cai,,NA,2023-11-08T15:23:14Z,2023-11-08T15:23:14Z,"Thanks for the reminder, I can test based on a simple demo first, and rust doesn't seem to have a comment yet, I'll refine the corresponding comment

> > have you picked up the Add rust test suites? I want to try Add rust test suites
> 
> > @chaokunyang @wangweipeng2 Hello, have you picked up the Add rust test suites? I want to try Add rust test suites
> 
> I haven't started working with rust's test suite yet, and I'm glad you want to, but the protocol isn't completely stable yet, and you might face rewriting problems if you start adding test suites。

Thanks for the reminder, I can test based on a simple demo first, and rust doesn't seem to have a comment yet, I'll refine the corresponding comment
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rag1S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/758,https://api.github.com/repos/apache/fury/issues/758,fury,1820324061,758,[Doc] Add contributing guide doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-25T13:17:01Z,2023-07-25T13:18:44Z,"## Is your feature request related to a problem? Please describe.
contributing.md is important for repository contributors, Fury should add contributing guide doc.
https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors
","{""url"": ""https://api.github.com/repos/apache/fury/issues/758/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/760,https://api.github.com/repos/apache/fury/issues/760,fury,1820334284,760,[Doc] add CODE_OF_CONDUCT doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-25T13:22:03Z,2023-07-25T13:22:33Z,"## Is your feature request related to a problem? Please describe.
CODE_OF_CONDUCT is important for a community, see:
- https://github.com/alipay/fury/community/code-of-conduct/new?template=contributor-covenant
- https://www.apache.org/foundation/policies/conduct.html
","{""url"": ""https://api.github.com/repos/apache/fury/issues/760/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/764,fury,1821513817,764,[Scala] optimize scala singleton `object` serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-26T03:30:53Z,2023-10-31T17:05:30Z,"scala `object` singleton defines `writeReplace` method, which returns scala.runtime.ModuleSerializationProxy. Fury didn't fastpath this, and it's not efficient.

```scala
object Foo {
}
```

![image](https://github.com/alipay/fury/assets/12445254/1cd34057-80a6-4bd5-b693-fbe9606a3db2)
![image](https://github.com/alipay/fury/assets/12445254/51e84832-7c4d-4cee-8a70-3e68dc70d491)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/764/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppj1C,fury,1772502338,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T10:37:57Z,2023-10-20T10:37:57Z,"Without specialized support for singleton instances, fury is likely to create separate instances when it deserializes the singleton instead of trying to return the singleton instance.

If you want to implement something, keep an eye out for the `MODULE$` field that the Scala compiler adds to the generated class. This is a singleton instance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppj1C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp0rR,fury,1772571345,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T11:32:05Z,2023-10-20T11:32:05Z,"The singleton will be ensured when using fury. Scala compiler added `writePlace` method which return a proxy for serialization, the `readResolve` method of proxy will return the singleton object. Fury support JDK `writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable` serialization API, so the correctness still persists.

But invoke `writeObject/readObject` is not cheap. And keep compatible with JDK API has its space/speed cost. It will be much better if we implement serializer for such class directly. For example:

```java
class ScalaObjectSerializer {
  private Object singleton;
 
  public void write(memoryBuffer buf, T obj) {}

  public Object write(memoryBuffer buf) {
     return singleton;
  }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp0rR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp-8j,fury,1772613411,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-20T12:06:58Z,2023-10-20T12:06:58Z,"One other problem might be recognizing when a class represents a Scala Object. There is no shared Java interface that these classes implement. The only reliable approach is to check if the class has a `MODULE$` field. You probably don't want to add this runtime overhead for all Java users. You would probably want some way of enabling and disabling Scala-specific checks like this.

I maintain https://github.com/FasterXML/jackson-module-scala, so I have some experience of supporting Scala in a Java-focused serialization framework (Jackson). It's pretty hard to support Scala classes using just Java reflection and not accidentally interfere with the non-Scala classes accidentally (it is hard to tell them apart when you using Java Reflection only).","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pp-8j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5prKq7,fury,1772923579,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T15:10:55Z,2023-10-20T15:10:55Z,"I see, java reflection is not feasible for such complex work, especially scala has it's own type mechanism and it changes between scala releases .

Thank you very much for taking time to share this  invaluable information. Your insights on scala and experience 
 on excellent https://github.com/FasterXML/jackson-module-scala really helps a lot. Hope we can get your further help in future.

Scala is used widely in distribued systems such as spark/flink/akka. And the serialization between processes when using `datastream/rdd` API is a common bottleneck for such frameworks. If fury can support scala serialization in the way you do in https://github.com/FasterXML/jackson-module-scala and integrate with fury runtime codegen, I think it will make such frameworks much faster and make fury better too. Thank you once again for your valuable input.



","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5prKq7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p-OBY,fury,1777918040,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-24T19:44:49Z,2023-10-24T19:44:49Z,"I tested serializing a Scala case object with fury and one thing that might surprise users is the need to register the scala.runtime.ModuleSerializationProxy class as well the object class. This works:

```
      val fury = Fury.builder().withLanguage(Language.JAVA).build()
      fury.register(classOf[ModuleSerializationProxy])
      fury.register(SampleObject.getClass)
      val bytes = fury.serialize(SampleObject)
      fury.deserialize(bytes) shouldBe SampleObject
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p-OBY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qAEJw,fury,1778401904,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T02:30:45Z,2023-10-25T02:30:45Z,"You  may need to create fury with `requireClassRegistration(false)`, then the registration won't be necessary:
```scala
val fury = Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build()
```
We enabled `requireClassRegistration` by default to avoid deserializing insecure types. This is a common vulnerability in dynamic serialization frameworks in JDK/Hessian/FST and so on.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qAEJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCCMg,fury,1778918176,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-25T09:58:02Z,2023-10-25T09:58:02Z,Thanks @chaokunyang. It's useful to be able to disable the class registration but many users would prefer to use it. It might be useful to have a user doc for Scala users that highlight unexpected issues like the need to register classes like scala.runtime.ModuleSerializationProxy when using objects including scala enumerations.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCCMg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCpwy,fury,1779080242,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T11:41:16Z,2023-10-25T11:41:16Z,"Good suggestion, we should have a user doc for scala users. And I am thinking whether we should register those classes in advance if scala objects detected. Common scala classes should be registered in advance if scala serialization optimization is enabled","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCpwy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCyJf,fury,1779114591,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-25T12:01:15Z,2023-10-25T12:01:15Z,That sounds like a good idea - even a method that needs to be called - maybe something like `registerScalaCoreClasses()` that has a curated list of classes from the Scala library. It probably wouldn't need to be extensive. You could add a small number of classes like scala.runtime.ModuleSerializationProxy and scala.Enumeration.Val and add more as people report other unexpected classes that Scala users have to register.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCyJf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDIFt,fury,1779204461,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T12:49:21Z,2023-10-25T12:49:21Z,"Yes, we should do this, actually we have done this for guava collections. We have a registerGuavaTypes method in FuryBuilder for guava types, maybe we should do same for scala types. 

But I'm not very familiar with scala. I'm not sure which classes should be added","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDIFt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDPlq,fury,1779235178,764,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-25T13:06:11Z,2023-10-25T13:06:11Z,"I can do some more experimentation. These 2 are needed.
* scala.runtime.ModuleSerializationProxy
* scala.Enumeration.Val

There are probably a few others. I can find out doing some trial and error.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDPlq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDRIJ,fury,1779241481,764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T13:09:39Z,2023-10-25T13:09:39Z,"Yes, those are needed. I added those to scala doc https://github.com/alipay/fury/pull/1028.

Perhaps common scala collections are needed too","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qDRIJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/765,https://api.github.com/repos/apache/fury/issues/765,fury,1821524765,765,[Scala] optimize scala collections serialization ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-26T03:47:19Z,2023-11-04T04:21:49Z,"## Is your feature request related to a problem? Please describe.
Scala has its own collections, which is different from jdk collections. And scala collections customized jdk serialization.

For example, `scala.collection.immutable.List` customized `writeReplace` method. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/765/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/765,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qstH-,fury,1790104062,765,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-02T05:42:09Z,2023-11-02T05:42:09Z,"@pjfanning I found a simple way to optimize scala collection serialization. Scala collections implements `scala.collection.generic.DefaultSerializable`:
```scala
trait DefaultSerializable extends Serializable { this: scala.collection.Iterable[_] =>
  protected[this] def writeReplace(): AnyRef = {
    val f: Factory[Any, Any] = this match {
      case it: scala.collection.SortedMap[_, _] => it.sortedMapFactory.sortedMapFactory[Any, Any](it.ordering.asInstanceOf[Ordering[Any]]).asInstanceOf[Factory[Any, Any]]
      case it: scala.collection.Map[_, _] => it.mapFactory.mapFactory[Any, Any].asInstanceOf[Factory[Any, Any]]
      case it: scala.collection.SortedSet[_] => it.sortedIterableFactory.evidenceIterableFactory[Any](it.ordering.asInstanceOf[Ordering[Any]])
      case it => it.iterableFactory.iterableFactory
    }
    new DefaultSerializationProxy(f, this)
  }
}
```
`writeReplace` returns a `DefaultSerializationProxy` for serialization:

```scala
@SerialVersionUID(3L)
final class DefaultSerializationProxy[A](factory: Factory[A, Any], @transient private[this] val coll: Iterable[A]) extends Serializable {

  @transient protected var builder: Builder[A, Any] = _

  private[this] def writeObject(out: ObjectOutputStream): Unit = {
    out.defaultWriteObject()
    val k = coll.knownSize
    out.writeInt(k)
    var count = 0
    coll.foreach { x =>
      out.writeObject(x)
      count += 1
    }
    if(k >= 0) {
      if(count != k) throw new IllegalStateException(s""Illegal size $count of collection, expected $k"")
    } else out.writeObject(SerializeEnd)
  }

  private[this] def readObject(in: ObjectInputStream): Unit = {
    in.defaultReadObject()
    builder = factory.newBuilder
    val k = in.readInt()
    if(k >= 0) {
      builder.sizeHint(k)
      var count = 0
      while(count < k) {
        builder += in.readObject().asInstanceOf[A]
        count += 1
      }
    } else {
      while (true) in.readObject match {
        case SerializeEnd => return
        case a => builder += a.asInstanceOf[A]
      }
    }
  }

  protected[this] def readResolve(): Any = builder.result()
}

```

We can implememt a serializer for all `DefaultSerializable` subclasses in fury to adapt to `DefaultSerializationProxy`.
`DefaultSerializationProxy` didn't use generics in scala, this can be done in fury too","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qstH-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/765,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qs9Ks,fury,1790169772,765,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-02T06:52:53Z,2023-11-02T06:52:53Z,"I'll  try to poc this in a upcoming pr, shouldn't take too much work to adapt it to our existing collection serialization abstraction.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qs9Ks/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/766,https://api.github.com/repos/apache/fury/issues/766,fury,1821540374,766,[Scala] Serialize scala object failed with NullPointerException,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-26T04:08:36Z,2023-07-26T04:19:38Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Serialize scala `object` failed:
```java
Exception in thread ""main"" java.lang.NullPointerException
	at io.fury.resolver.EnumStringResolver.writeEnumStringBytes(EnumStringResolver.java:81)
	at io.fury.resolver.ClassResolver.writeClass(ClassResolver.java:1095)
	at io.fury.resolver.ClassResolver.writeClassInternal(ClassResolver.java:1359)
	at io.fury.serializer.Serializers$ClassSerializer.write(Serializers.java:680)
	at scala.runtime.ModuleSerializationProxyFuryCodec_1080319106_414493378_838449246.write(ModuleSerializationProxyFuryCodec_1080319106_414493378_838449246.java:52)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:224)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:217)
	at io.fury.Fury.writeData(Fury.java:485)
	at io.fury.Fury.writeNonRefT(Fury.java:365)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:197)
	at io.fury.Fury.writeData(Fury.java:485)
	at io.fury.Fury.writeRef(Fury.java:285)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
	at Main$.main(Main.scala:11)
	at Main.main(Main.scala)

```
**Expected behavior**
Scala `object` customize writeReplace method, which return a proxy, it write original class

**To Reproduce**
```scala
import io.fury.Fury

object Main {
  def main(args: Array[String]): Unit = {
    println(""Hello world!"")
    val fury = Fury.builder().withSecureMode(false).build()
    println(fury.deserialize(fury.serialize(Foo)))
  }
}

case class Foo(f1:Int, f2: String)

object Foo {
}
```


**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/766/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/769,https://api.github.com/repos/apache/fury/issues/769,fury,1821548388,769,[RFC][Java] remove FuryBuilder#withSecureMode API,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-26T04:19:04Z,2023-07-26T15:31:50Z,"## Is your feature request related to a problem? Please describe.
`FuryBuilder#requireClassRegistration` can be used to disable unknown classes check, but the API didn't indicate it's not safe.

kryo has a `setRegistrationRequired` API, which has similar semantics. 


## Describe the solution you'd like
Maybe we should remove it, let users use `FuryBuilder#withSecureMode(false)` instead. The drawback is that it may let users think fury isn't safe, which affects the usage of fury.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/769/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/769,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ6bb,fury,1650960091,769,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T04:25:39Z,2023-07-26T04:25:39Z,"@tisonkun how do you think if we remove FuryBuilder#requireClassRegistration api, use FuryBuilder#withSecureMode(false) instead","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ6bb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/769,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ8oC,fury,1650969090,769,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T04:39:03Z,2023-07-26T04:39:03Z,Or we can rename requireClassRegistration to `allowUnknownClasses`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ8oC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/769,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ8w1,fury,1650969653,769,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T04:40:05Z,2023-07-26T04:40:05Z,Will Renaming withSecureMode to withSecurityChecks better?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5iZ8w1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/769,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5idTiF,fury,1651849349,769,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-26T13:49:19Z,2023-07-26T13:49:19Z,"After some discussion, removing `withSecureMode` by `requireClassRegistration` will be better","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5idTiF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/771,https://api.github.com/repos/apache/fury/issues/771,fury,1823464452,771,[Java]  class has register，but field class is not registered？,DemonJun,21258148,DemonJun,,CLOSED,2023-07-27T01:44:40Z,2023-07-27T13:53:32Z,"During use, 2 classes were registered, and one class's sub-property class was not prompted that it's unregistered, but the other class did prompt that the sub-property class was unregistered.


pom.xml
```xml
<dependency>
	<groupId>org.roaringbitmap</groupId>
	<artifactId>RoaringBitmap</artifactId>
	<version>0.9.46</version>
</dependency>
<dependency>
	<groupId>com.clickhouse</groupId>
	<artifactId>clickhouse-java</artifactId>
	<version>0.4.6</version>
</dependency>
```
Roaring64Bitmap.class
```java
public class Roaring64Bitmap implements Externalizable, LongBitmapDataProvider {

  private HighLowContainer highLowContainer;
.....
}
```

UT
```java
private static final List<Class<?>> NEED_REGISTER_CLASS =
      List.of(Roaring64Bitmap.class, ClickHouseRowData.class);
  static Fury fury =
      Fury.builder()
          .withLanguage(Language.JAVA)
          .withClassLoader(Thread.currentThread().getContextClassLoader())
          // enable referecne tracking for shared/circular reference.
          // Disable it will have better performance if no duplciate reference.
          .withRefTracking(false)
          // compress int/long for smaller size
          .withNumberCompressed(true)
          .withStringCompressed(true)
          .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
          // .withMetaContextShareEnabled(false)
          // enable type forward/backward compatibility
          // disable it for small size and better performance.
          // .withCompatibleMode(CompatibleMode.COMPATIBLE)
          // enable async multi-threaded compilation.
          .withAsyncCompilationEnabled(true)
          .build();

  static {
    for (Class<?> aclass : NEED_REGISTER_CLASS) {
      fury.register(aclass);
    }
  }

  @Test
  public void test() {
    Roaring64Bitmap bitmap = new Roaring64Bitmap();
    for (int i = 0; i < 1000; i++) {
      bitmap.add(RandomUtil.randomLong(Long.MAX_VALUE));
    }

    byte[] bytes = fury.serializeJavaObject(bitmap);

    Roaring64Bitmap bitmap1 = fury.deserializeJavaObject(bytes, Roaring64Bitmap.class);
    Assertions.assertEquals(bitmap1, bitmap);

    ClickHouseRowData clickHouseRowData = new ClickHouseRowData();
    clickHouseRowData.column = ClickHouseColumn.of(""a"", ClickHouseDataType.String.name());
    clickHouseRowData.columnValues.put(
        ClickHouseColumn.of(""a"", ClickHouseDataType.String.name()), 1);

    bytes = fury.serializeJavaObject(clickHouseRowData);

    ClickHouseRowData clickHouseRowData1 =
        fury.deserializeJavaObject(bytes, ClickHouseRowData.class);
    Assertions.assertEquals(clickHouseRowData1, clickHouseRowData);
  }

  @Data
  @Accessors(chain = true)
  public static class ClickHouseRowData implements Serializable {
    private ClickHouseColumn column;
    private Map<ClickHouseColumn, Integer> columnValues;
    private long byteSize = 1;

    public ClickHouseRowData() {
      this.columnValues = Maps.newHashMapWithExpectedSize(50);
    }

    private ClickHouseRowData(Map<ClickHouseColumn, Integer> columnValues) {
      this.columnValues = columnValues;
    }
  }
```
Exception：
```txt
io.fury.exception.InsecureException: class com.clickhouse.data.ClickHouseColumn is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too.

	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1016)
	at io.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:924)
	at io.fury.serializer.ObjectSerializer$FinalTypeField.<init>(ObjectSerializer.java:762)
	at io.fury.serializer.ObjectSerializer$FinalTypeField.<init>(ObjectSerializer.java:750)
	at io.fury.serializer.ObjectSerializer.buildFinalTypeField(ObjectSerializer.java:166)
	at io.fury.serializer.ObjectSerializer.buildFieldInfos(ObjectSerializer.java:130)
	at io.fury.serializer.ObjectSerializer.<init>(ObjectSerializer.java:104)
	at io.fury.serializer.ObjectSerializer.<init>(ObjectSerializer.java:82)
	at io.fury.serializer.Serializers.newSerializer(Serializers.java:60)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1030)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:968)
	at io.fury.Fury.serializeJavaObject(Fury.java:939)
	at io.fury.Fury.serializeJavaObject(Fury.java:917)

```


","{""url"": ""https://api.github.com/repos/apache/fury/issues/771/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/771,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ig9P8,fury,1652806652,771,NA,DemonJun,21258148,DemonJun,,NA,2023-07-27T02:05:52Z,2023-07-27T02:05:52Z,"After debugging, we found that `Roaring64Bitmap` implements the `Externalizable` interface, whereas the self-created class `ClickHouseRowData` does not implement this interface.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ig9P8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/771,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihDJL,fury,1652830795,771,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-27T02:44:55Z,2023-07-27T02:44:55Z,"If a class  implements the `Externalizable` interface, if will be serialized be invoking `writeExternalizable`/`readExternalizable`. Maybe that's why the serialization succeed even the field class is not registered","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ihDJL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/772,fury,1823724301,772,[Java] Does dubbo support fury serialization?,9997766,58063392,,,OPEN,2023-07-27T06:44:27Z,2023-10-29T12:47:25Z,"Our project uses Dubbo as a microservice framework. Does Fury currently support Dubbo? If we want to integrate Fury ourselves, how should we make Dubbo to support fury?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/772/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ii5cR,fury,1653315345,772,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-27T10:11:43Z,2023-07-27T10:11:43Z,"@9997766 we do want to add fury support for dubbo, but we have no time for it now. Maybe later. Currently you need to change dubbo code to add a new serialization framework.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ii5cR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kcZh6,fury,1685166202,772,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-20T03:31:45Z,2023-08-20T03:31:45Z,"Hi @9997766 . I just add fury integration for dubbo in https://github.com/fury-project/dubbo-serialization-fury. Feel free to try it out and let us know if you have any usage issues.

FYI, https://github.com/chaokunyang/fury-dubbo-example is a out-of-box runable example.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kcZh6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5k-oG9,fury,1694138813,772,NA,9997766,58063392,,,NA,2023-08-26T03:18:41Z,2023-08-26T03:18:41Z,"


谢谢，我有碰到个问题，
程序A启动时，会调服务B获取数据，并加载到A的本地缓存。
如果A不是用主线程加载，而是用forkjoinpool 线程加载，会报appCloassLoader找不到java类的问题，此处说的java类就是要调服务B获取的数据的Java类。不知你们有没有碰到，如何解决？



At 2023-08-20 11:31:55, ""Shawn"" ***@***.***> wrote:

Hi @9997766 . I just add fury integration for dubbo in https://github.com/fury-project/dubbo-serialization-fury. Feel free to try it out and let us know if you have any usage issues.

FYI, https://github.com/chaokunyang/fury-dubbo-example is a out-of-box runable example.

—
Reply to this email directly, view it on GitHub, or unsubscribe.
You are receiving this because you were mentioned.Message ID: ***@***.***>","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5k-oG9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lenEy,fury,1702523186,772,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-01T10:22:32Z,2023-09-01T10:22:32Z,"> 谢谢，我有碰到个问题， 程序A启动时，会调服务B获取数据，并加载到A的本地缓存。 如果A不是用主线程加载，而是用forkjoinpool 线程加载，会报appCloassLoader找不到java类的问题，此处说的java类就是要调服务B获取的数据的Java类。不知你们有没有碰到，如何解决？ At 2023-08-20 11:31:55, ""Shawn"" ***@***.***> wrote: Hi @9997766 . I just add fury integration for dubbo in https://github.com/fury-project/dubbo-serialization-fury. Feel free to try it out and let us know if you have any usage issues. FYI, https://github.com/chaokunyang/fury-dubbo-example is a out-of-box runable example. — Reply to this email directly, view it on GitHub, or unsubscribe. You are receiving this because you were mentioned.Message ID: ***@***.***>

@9997766 I added support for switch to thead context classloader in https://github.com/fury-project/dubbo-serialization-fury/pull/9, does this fix your issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lenEy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/772,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVyzL,fury,1784097995,772,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T12:47:25Z,2023-10-29T12:47:25Z,"FYI, dubbo has supported fury serialization, https://github.com/apache/dubbo-spi-extensions/pull/226","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVyzL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/773,https://api.github.com/repos/apache/fury/issues/773,fury,1823760840,773,[Java] what's FuryBuilder#withClassLoader used for?,RD-Man,50395623,RD-Man,,OPEN,2023-07-27T07:13:06Z,2023-07-27T10:13:05Z,"```java
public class FurySerializer {
	private final ThreadSafeFury fury;

	public FurySerializer() {
		fury = Fury.builder().withLanguage(Language.JAVA).withRefTracking(true)
				.withCompatibleMode(CompatibleMode.COMPATIBLE).requireClassRegistration(false)
				.withAsyncCompilationEnabled(true).buildThreadSafeFury();
	}

	public byte[] serialization(Object obj) {
		return fury.serialize(obj);
	}

	public <T> T deserialization(byte[] input) {
		return (T) fury.deserialize(input);
	}
}
```

1. Because there are many custom classes in the business, we disable the `FuryBuilder#requireClassRegistration`, but the log will be printed every time. Does this affect performance? Can it be disabled?
2. In which application scenarios will this `ThreadSafeFury#setClassLoader` parameter be used?


","{""url"": ""https://api.github.com/repos/apache/fury/issues/773/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/773,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ii56C,fury,1653317250,773,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-27T10:13:04Z,2023-07-27T10:13:04Z,You should create fury as a global static instance instead of creating it every time.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ii56C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/774,https://api.github.com/repos/apache/fury/issues/774,fury,1824048680,774,[Doc] add javadoc for FuryBuilder,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-27T10:07:26Z,2023-07-27T10:12:10Z,"## Is your feature request related to a problem? Please describe.
FuryBuilder is the main entry for Fury java usage, we need to add doc.

## Additional context
#773 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/774/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/776,https://api.github.com/repos/apache/fury/issues/776,fury,1824086268,776,[Doc] add doc for fury creation reuse,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-27T10:30:34Z,2023-07-27T10:30:48Z,"## Is your feature request related to a problem? Please describe.
Many users create fury every time for serialization, which is not a good way to use fury.


## Describe the solution you'd like
Add detailed doc for how to reuse fury.

## Additional context
#773 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/776/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/779,https://api.github.com/repos/apache/fury/issues/779,fury,1824446750,779,[Java] Auto deploy jar to ossrh,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-27T14:02:33Z,2023-07-27T14:04:03Z,"## Is your feature request related to a problem? Please describe.
Auto deploy jar to ossrh

## Additional context
Note that release to maven central need gpg setup in ci, which is tricky, we just support auto deploy snapshot now","{""url"": ""https://api.github.com/repos/apache/fury/issues/779/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/780,https://api.github.com/repos/apache/fury/issues/780,fury,1824448254,780,[Python] Auto upload wheel to pypi,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-27T14:03:11Z,2023-07-27T14:04:02Z,"## Is your feature request related to a problem? Please describe.
Auto upload wheel to pypi","{""url"": ""https://api.github.com/repos/apache/fury/issues/780/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/788,https://api.github.com/repos/apache/fury/issues/788,fury,1825957437,788,[Java] About High performance implementation tips,leonchen83,5235764,Baoyi Chen,chen.bao.yi@qq.com,CLOSED,2023-07-28T08:27:07Z,2023-07-31T02:37:05Z,"In fury doc about High performance feature
```
reduce memory access by inline variable in generated code.
reduce virtual method invocation by inline call in generated code.
reduce conditional branching.
reduce hash lookup.
```

when we use fury to serialize class. fury generate following class code.

DefFuryRefCodec_2102608770_1670675563_330739404.java
```
package cn.nextop.gadget.core.marshal.support;

import java.util.List;
import java.util.Map;
import java.util.Set;
import io.fury.Fury;
import io.fury.memory.MemoryBuffer;
import io.fury.resolver.MapRefResolver;
import io.fury.resolver.ClassInfo;
import io.fury.resolver.ClassInfoCache;
import io.fury.resolver.ClassResolver;
import io.fury.builder.Generated;
import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
import io.fury.serializer.Serializers.EnumSerializer;
import io.fury.serializer.Serializer;
import io.fury.serializer.StringSerializer;
import io.fury.serializer.ObjectSerializer;
import io.fury.serializer.CompatibleSerializer;
import io.fury.serializer.CollectionSerializers.CollectionSerializer;
import io.fury.serializer.MapSerializers.MapSerializer;
import io.fury.builder.Generated.GeneratedObjectSerializer;

public final class DefFuryRefCodec_2102608770_1670675563_330739404 extends GeneratedObjectSerializer {

  private final MapRefResolver refResolver;
  private final ClassResolver classResolver;
  private final StringSerializer strSerializer;
  private final Fury fury;
  private final EnumSerializer enumSerializer;
  private final EnumSerializer enumSerializer1;
  private final EnumSerializer enumSerializer2;
  private ClassInfo bigDecimalClassInfo;
  private ClassInfo dateClassInfo;
  private final ClassInfoCache bigDecimal1ClassInfoCache;
  private final ClassInfoCache date1ClassInfoCache;

  public DefFuryRefCodec_2102608770_1670675563_330739404(Fury fury, Class classType) {
      super(fury, classType);
      this.fury = fury;
      fury.getClassResolver().setSerializerIfAbsent(classType, this);
  
      io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
      refResolver = ((MapRefResolver)refResolver0);
      classResolver = fury.getClassResolver();
      strSerializer = fury.getStringSerializer();
      enumSerializer = ((EnumSerializer)classResolver.getSerializer(cn.nextop.gadget.core.marshal.support.TypeA.class));
      enumSerializer1 = ((EnumSerializer)classResolver.getSerializer(cn.nextop.gadget.core.marshal.support.TypeB.class));
      enumSerializer2 = ((EnumSerializer)classResolver.getSerializer(cn.nextop.gadget.core.marshal.support.TypeC.class));
      bigDecimalClassInfo = classResolver.nilClassInfo();
      dateClassInfo = classResolver.nilClassInfo();
      bigDecimal1ClassInfoCache = classResolver.nilClassInfoCache();
      date1ClassInfoCache = classResolver.nilClassInfoCache();
  }

  private void writeFields(MemoryBuffer memoryBuffer, cn.nextop.gadget.core.marshal.support.Def def1) {
      Object object1 = io.fury.util.Platform.getObject(def1, 28L);
      cn.nextop.gadget.core.marshal.support.TypeA t1 = (cn.nextop.gadget.core.marshal.support.TypeA)object1;
      if ((t1 == null)) {
          memoryBuffer.writeByte(((byte)-3));
      } else {
          memoryBuffer.writeByte(((byte)0));
          enumSerializer.write(memoryBuffer, t1);
      }
      Object object22 = io.fury.util.Platform.getObject(def1, 32L);
      cn.nextop.gadget.core.marshal.support.TypeB t2 = (cn.nextop.gadget.core.marshal.support.TypeB)object22;
      if ((t2 == null)) {
          memoryBuffer.writeByte(((byte)-3));
      } else {
          memoryBuffer.writeByte(((byte)0));
          enumSerializer1.write(memoryBuffer, t2);
      }
      Object object33 = io.fury.util.Platform.getObject(def1, 36L);
      cn.nextop.gadget.core.marshal.support.TypeC t3 = (cn.nextop.gadget.core.marshal.support.TypeC)object33;
      if ((t3 == null)) {
          memoryBuffer.writeByte(((byte)-3));
      } else {
          memoryBuffer.writeByte(((byte)0));
          enumSerializer2.write(memoryBuffer, t3);
      }
      Object object44 = io.fury.util.Platform.getObject(def1, 20L);
      String f3 = (String)object44;
      if ((f3 == null)) {
          memoryBuffer.writeByte(((byte)-3));
      } else {
          memoryBuffer.writeByte(((byte)0));
          StringSerializer.writeJDK11String(memoryBuffer, f3);
      }
  }

  private void writeClassAndObject(MemoryBuffer memoryBuffer1, java.math.BigDecimal bigDecimal) {
      ClassResolver classResolver = this.classResolver;
      Class value0 = bigDecimalClassInfo.getCls();
      Class cls = bigDecimal.getClass();
      if ((value0 != cls)) {
          bigDecimalClassInfo = classResolver.getClassInfo(cls);
      }
      short value1 = bigDecimalClassInfo.getClassId();
      if ((value1 == ((short)0))) {
          memoryBuffer1.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer1, bigDecimalClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer1, bigDecimalClassInfo.getClassNameBytes());
      } else {
          int value2 = memoryBuffer1.writerIndex();
          memoryBuffer1.increaseWriterIndex(3);
          memoryBuffer1.unsafePut(value2, ((byte)1));
          memoryBuffer1.unsafePutShort((value2 + 1), value1);
      }
      bigDecimalClassInfo.getSerializer().write(memoryBuffer1, bigDecimal);
  }

  private void writeClassAndObject1(MemoryBuffer memoryBuffer2, java.util.Date date) {
      ClassResolver classResolver = this.classResolver;
      Class value3 = dateClassInfo.getCls();
      Class cls0 = date.getClass();
      if ((value3 != cls0)) {
          dateClassInfo = classResolver.getClassInfo(cls0);
      }
      short value4 = dateClassInfo.getClassId();
      if ((value4 == ((short)0))) {
          memoryBuffer2.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer2, dateClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer2, dateClassInfo.getClassNameBytes());
      } else {
          int value5 = memoryBuffer2.writerIndex();
          memoryBuffer2.increaseWriterIndex(3);
          memoryBuffer2.unsafePut(value5, ((byte)1));
          memoryBuffer2.unsafePutShort((value5 + 1), value4);
      }
      dateClassInfo.getSerializer().write(memoryBuffer2, date);
  }

  private void writeFields1(MemoryBuffer memoryBuffer3, cn.nextop.gadget.core.marshal.support.Def def2) {
      Object object00 = io.fury.util.Platform.getObject(def2, 24L);
      java.math.BigDecimal f4 = (java.math.BigDecimal)object00;
      if ((!refResolver.writeRefOrNull(memoryBuffer3, f4))) {
          this.writeClassAndObject(memoryBuffer3, f4);
      }
      Object object51 = io.fury.util.Platform.getObject(def2, 16L);
      java.util.Date f2 = (java.util.Date)object51;
      if ((f2 == null)) {
          memoryBuffer3.writeByte(((byte)-3));
      } else {
          memoryBuffer3.writeByte(((byte)0));
          this.writeClassAndObject1(memoryBuffer3, f2);
      }
  }

  private void readFields(cn.nextop.gadget.core.marshal.support.Def def3, MemoryBuffer memoryBuffer4) {
      if ((memoryBuffer4.readByte() != ((byte)-3))) {
          Enum value6 = enumSerializer.read(memoryBuffer4);
          io.fury.util.Platform.putObject(def3, 28L, ((cn.nextop.gadget.core.marshal.support.TypeA)value6));
      } else {
          io.fury.util.Platform.putObject(def3, 28L, null);
      }
      if ((memoryBuffer4.readByte() != ((byte)-3))) {
          Enum value9 = enumSerializer1.read(memoryBuffer4);
          io.fury.util.Platform.putObject(def3, 32L, ((cn.nextop.gadget.core.marshal.support.TypeB)value9));
      } else {
          io.fury.util.Platform.putObject(def3, 32L, null);
      }
      if ((memoryBuffer4.readByte() != ((byte)-3))) {
          Enum value12 = enumSerializer2.read(memoryBuffer4);
          io.fury.util.Platform.putObject(def3, 36L, ((cn.nextop.gadget.core.marshal.support.TypeC)value12));
      } else {
          io.fury.util.Platform.putObject(def3, 36L, null);
      }
      if ((memoryBuffer4.readByte() != ((byte)-3))) {
          io.fury.util.Platform.putObject(def3, 20L, strSerializer.readJava11String(memoryBuffer4));
      } else {
          io.fury.util.Platform.putObject(def3, 20L, null);
      }
  }

  private void readFields1(cn.nextop.gadget.core.marshal.support.Def def4, MemoryBuffer memoryBuffer5) {
      ClassResolver classResolver = this.classResolver;
      MapRefResolver refResolver = this.refResolver;
      int refId = refResolver.tryPreserveRefId(memoryBuffer5);
      if ((refId >= ((byte)-1))) {
          Object object6 = classResolver.readClassInfo(memoryBuffer5, bigDecimal1ClassInfoCache).getSerializer().read(memoryBuffer5);
          refResolver.setReadObject(refId, object6);
          io.fury.util.Platform.putObject(def4, 24L, ((java.math.BigDecimal)object6));
      } else {
          io.fury.util.Platform.putObject(def4, 24L, ((java.math.BigDecimal)refResolver.getReadObject()));
      }
      if ((memoryBuffer5.readByte() != ((byte)-3))) {
          Object object7 = classResolver.readClassInfo(memoryBuffer5, date1ClassInfoCache).getSerializer().read(memoryBuffer5);
          io.fury.util.Platform.putObject(def4, 16L, ((java.util.Date)object7));
      } else {
          io.fury.util.Platform.putObject(def4, 16L, null);
      }
  }

  @Override public final void write(MemoryBuffer buffer, Object obj) {
      cn.nextop.gadget.core.marshal.support.Def def5 = (cn.nextop.gadget.core.marshal.support.Def)obj;
      buffer.writeInt(557608220);
      buffer.grow(4);
      byte[] base = buffer.getHeapMemory();
      long writerAddr = buffer.getUnsafeWriterAddress();
      MemoryBuffer.unsafePutInt(base, writerAddr, io.fury.util.Platform.getInt(def5, 12L));
      buffer.increaseWriterIndexUnsafe(4);
      this.writeFields(buffer, def5);
      this.writeFields1(buffer, def5);
  }

  @Override public final Object read(MemoryBuffer buffer) {
      ObjectSerializer.checkClassVersion(fury, buffer.readInt(), 557608220);
      cn.nextop.gadget.core.marshal.support.Def def6 = new cn.nextop.gadget.core.marshal.support.Def();
      refResolver.reference(def6);
      byte[] heapBuffer = buffer.getHeapMemory();
      long readerAddr = buffer.getUnsafeReaderAddress();
      buffer.checkReadableBytes(4);
      io.fury.util.Platform.putInt(def6, 12L, MemoryBuffer.unsafeGetInt(heapBuffer, readerAddr));
      buffer.increaseReaderIndexUnsafe(4);
      this.readFields(def6, buffer);
      this.readFields1(def6, buffer);
      return def6;
  }

}
```

Could you help me to point out high performance implementation tips aboult above code ?
We are investigating the availability of fury framework and want to integrate into our system.","{""url"": ""https://api.github.com/repos/apache/fury/issues/788/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/788,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5irBwl,fury,1655446565,788,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-07-28T10:21:46Z,2023-07-28T10:21:46Z,"You can dump jvm c2 generated code, you will see all code are compiled and inlined. And if you dump a flame graph, you will see the difference too. Other serialization framework will iterate fields by loop and dispatch serializer by hash lookup if it's not final. Then invoke virtual method of the serializer. All those operation are avoided in fury. The actual optimization are much more complicated than this. We will write a blog for it. Currently you can reference https://medium.com/@shawn.ck.yang/fury-a-blazing-fast-multi-language-serialization-framework-powered-by-jit-and-zero-copy-fdd16f3215cb","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5irBwl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/791,https://api.github.com/repos/apache/fury/issues/791,fury,1827917912,791,[Python] replace `alpha/beta` to `a/b` for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-30T12:28:57Z,2023-07-30T12:30:10Z,"## Is your feature request related to a problem? Please describe.
replace `alpha/beta` to `a/b` for python to keep consist with python idioms: 
![image](https://github.com/alipay/fury/assets/12445254/6a59b96c-faa1-478f-adc2-9399e7377bd6)
https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#id55","{""url"": ""https://api.github.com/repos/apache/fury/issues/791/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/794,https://api.github.com/repos/apache/fury/issues/794,fury,1827931162,794,[Python] Github CI bump python version failed,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-30T13:04:47Z,2023-07-30T13:35:56Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Github CI bump python version failed:
```bash
+ echo 'Bump fury python version to 0.1.0.a1'
+ sed -i '' -E 's/__version__ = .*/__version__ = ""0.1.0.a1""/' __init__.py
sed: can't read s/__version__ = .*/__version__ = ""0.1.0.a1""/: No such file or directory
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/fd6adc38-edd1-4f12-bef3-9bab78ab4944)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/794/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/798,https://api.github.com/repos/apache/fury/issues/798,fury,1827964283,798,[C++] Windows build support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-30T14:54:59Z,2025-01-20T15:57:38Z,"## Is your feature request related to a problem? Please describe.
Fury support macos and linux build, but windows is not supported.

Fury use bazel for building c++ code, windows building need some extra work.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/798/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/798,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vmx9i,fury,1872437090,798,NA,LiangliangSui,116876207,,,NA,2023-12-30T03:07:46Z,2023-12-30T03:07:46Z,Can I try to do some work on this? @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vmx9i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/798,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vm8Z3,fury,1872479863,798,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-30T08:09:28Z,2023-12-30T08:09:28Z,"> Can I try to do some work on this? @chaokunyang

Of course. Welcome to try this issue. Thanks for the willingness to contribute to Fury.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vm8Z3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/798,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vm8gq,fury,1872480298,798,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-30T08:12:27Z,2023-12-30T08:12:27Z,"I haven't try bazel on Windows.  If you want to try this issue, you may need to install bazel on Windows first, and fix some compilation issues.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vm8gq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/799,https://api.github.com/repos/apache/fury/issues/799,fury,1827964824,799,[C++] Mac M1/M2 build support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-07-30T14:56:57Z,2023-08-01T02:17:20Z,"## Is your feature request related to a problem? Please describe.
Currently fury support linux and mac x86 build, but mac m1/m2 build are not added.

Fury depends on arrow, we need to build arrow on  m1/m2  succed, then build fury.

Fury python depends on fury c++, only build c++ succed, we can release python wheel for mac m1/m2 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/799/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/805,https://api.github.com/repos/apache/fury/issues/805,fury,1828517597,805,[Java] support udf8 decoding for pure java sting serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-31T06:46:02Z,2023-07-31T06:57:39Z,"## Is your feature request related to a problem? Please describe.
Currently fury use latin1/utf16 for java string serialization, and use utf8 for xlang str serialization.

Utf8 string for java serialization will be added in the future.

To ensure current fury can decode data serialized by future fury for compatibility, we need to add utf8 string decoding in current fury. Otherwise the upgrade of fury will be tricky.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/805/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/807,fury,1828572367,807,[Java] generic object serialization for dubbo generic call,superchaos,2712281,SilverSuop,,OPEN,2023-07-31T07:25:27Z,2024-01-26T10:41:46Z,"## Is your feature request related to a problem? Please describe.
I added Fury's serialization capability to Dubbo. It works well for interface-based calls, but there are many requests using generic calls of Dubbo. Although the return value is Object in the generic call, it is still deserialized through Fury. However, since the client does not hold the serialized object class, deserialization fails.

## Describe the solution you'd like
When the class does not exist during deserialization in Fury, use a fallback strategy similar to Dubbo's built-in Hessian2 to treat the object as a Map.


## Additional context
https://dubbo.apache.org/en/blog/2018/08/14/generic-invoke-of-dubbo/","{""url"": ""https://api.github.com/repos/apache/fury/issues/807/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sIAfw,fury,1814038512,807,NA,loongs-zhang,38336731,,1936978077@qq.com,NA,2023-11-16T09:01:56Z,2023-11-16T09:01:56Z,When does this can be solved?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sIAfw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sOTZc,fury,1815688796,807,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T03:23:22Z,2023-11-17T03:23:22Z,"Thank you for bringing up this issue. We appreciate your interest in having this feature, but unfortunately, we do not have the resources available at the moment to work on it. We understand that this may be disappointing, and we apologize for any inconvenience caused.

To implement this feature, we need to design and implement a new `GenericObject` data structure to hold schema and data. For example, it may looks like:
```java
class GenericObject {
  public void setFields(Map<String, Object> fields);
  public void setField(String fieldName, Object fieldValue);
  public void setField(String definedClass, String fieldName, Object fieldValue);

  public ClassDef schema();
  
  @Override
  public boolean equals(Object obj) {
    
  }

  @Override
  public int hashCode() {
    
  }

  @Override
  public String toString() {

  }
  
}

public class GenericObjectSerializer extends Serializer<GenericObject> {}
```

`io.fury.serializer.UnexistedClassSerializers.UnexistedClassSerializer` can be used as an reference:
```java

  public static final class UnexistedClassSerializer extends Serializer {
    private final ClassDef classDef;
    private final ClassInfoHolder classInfoHolder;
    private final LongMap<ClassFieldsInfo> fieldsInfoMap;

    public UnexistedClassSerializer(Fury fury, ClassDef classDef) {
      super(fury, UnexistedMetaSharedClass.class);
      this.classDef = classDef;
      classInfoHolder = fury.getClassResolver().nilClassInfoHolder();
      fieldsInfoMap = new LongMap<>();
      Preconditions.checkArgument(fury.getConfig().shareMetaContext());
    }

    /**
     * Multiple un existed class will correspond to this `UnexistedMetaSharedClass`. When querying
     * classinfo by `class`, it may dispatch to same `UnexistedClassSerializer`, so we can't use
     * `classDef` in this serializer, but use `classDef` in `UnexistedMetaSharedClass` instead.
     */
    private void writeClassDef(MemoryBuffer buffer, UnexistedMetaSharedClass value) {
      // Register NotFoundClass ahead to skip write meta shared info,
      // then revert written class id to write class info here,
      // since it's the only place to hold class def for not found class.
      buffer.increaseWriterIndex(-2);
      buffer.writeByte(ClassResolver.USE_CLASS_VALUE_FLAG);
      MetaContext metaContext = fury.getSerializationContext().getMetaContext();
      IdentityObjectIntMap classMap = metaContext.classMap;
      int newId = classMap.size;
      // class not exist, use class def id for identity.
      int id = classMap.putOrGet(value.classDef.getId(), newId);
      if (id >= 0) {
        buffer.writePositiveVarInt(id);
      } else {
        buffer.writePositiveVarInt(newId);
        metaContext.writingClassDefs.add(value.classDef);
      }
    }

    @Override
    public void write(MemoryBuffer buffer, Object v) {
      UnexistedMetaSharedClass value = (UnexistedMetaSharedClass) v;
      writeClassDef(buffer, value);
      ClassDef classDef = value.classDef;
      ClassFieldsInfo fieldsInfo = getClassFieldsInfo(classDef);
      Fury fury = this.fury;
      RefResolver refResolver = fury.getRefResolver();
      ClassResolver classResolver = fury.getClassResolver();
      if (fury.checkClassVersion()) {
        buffer.writeInt(fieldsInfo.classVersionHash);
      }
      // write order: primitive,boxed,final,other,collection,map
      ObjectSerializer.FinalTypeField[] finalFields = fieldsInfo.finalFields;
      boolean[] isFinal = fieldsInfo.isFinal;
      for (int i = 0; i < finalFields.length; i++) {
        ObjectSerializer.FinalTypeField fieldInfo = finalFields[i];
        Object fieldValue = value.get(fieldInfo.qualifiedFieldName);
        ClassInfo classInfo = fieldInfo.classInfo;
        if (classResolver.isPrimitive(fieldInfo.classId)) {
          classInfo.getSerializer().write(buffer, fieldValue);
        } else {
          if (isFinal[i]) {
            // whether tracking ref is recorded in `fieldInfo.serializer`, so it's still
            // consistent with jit serializer.
            Serializer<Object> serializer = classInfo.getSerializer();
            fury.writeRef(buffer, fieldValue, serializer);
          } else {
            fury.writeRef(buffer, fieldValue, classInfo);
          }
        }
      }
      for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.otherFields) {
        Object fieldValue = value.get(fieldInfo.qualifiedFieldName);
        if (fieldInfo.trackingRef) {
          fury.writeRef(buffer, fieldValue, fieldInfo.classInfoHolder);
        } else {
          fury.writeNullable(buffer, fieldValue, fieldInfo.classInfoHolder);
        }
      }
      Generics generics = fury.getGenerics();
      for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.containerFields) {
        Object fieldValue = value.get(fieldInfo.qualifiedFieldName);
        ObjectSerializer.writeContainerFieldValue(
            fury, refResolver, classResolver, generics, fieldInfo, buffer, fieldValue);
      }
    }

    private ClassFieldsInfo getClassFieldsInfo(ClassDef classDef) {
      ClassFieldsInfo fieldsInfo = fieldsInfoMap.get(classDef.getId());
      if (fieldsInfo == null) {
        // Use `UnexistedSkipClass` since it doesn't have any field.
        Collection<Descriptor> descriptors =
            MetaSharedSerializer.consolidateFields(
                fury.getClassResolver(), UnexistedSkipClass.class, classDef);
        DescriptorGrouper descriptorGrouper =
            DescriptorGrouper.createDescriptorGrouper(
                descriptors, true, fury.compressInt(), fury.compressLong());
        Tuple3<
                Tuple2<ObjectSerializer.FinalTypeField[], boolean[]>,
                ObjectSerializer.GenericTypeField[],
                ObjectSerializer.GenericTypeField[]>
            tuple = ObjectSerializer.buildFieldInfos(fury, descriptorGrouper);
        int classVersionHash = 0;
        if (fury.checkClassVersion()) {
          classVersionHash = ObjectSerializer.computeVersionHash(descriptors);
        }
        fieldsInfo =
            new ClassFieldsInfo(tuple.f0.f0, tuple.f0.f1, tuple.f1, tuple.f2, classVersionHash);
        fieldsInfoMap.put(classDef.getId(), fieldsInfo);
      }
      return fieldsInfo;
    }

    @Override
    public Object read(MemoryBuffer buffer) {
      UnexistedMetaSharedClass obj = new UnexistedMetaSharedClass(classDef);
      Fury fury = this.fury;
      RefResolver refResolver = fury.getRefResolver();
      ClassResolver classResolver = fury.getClassResolver();
      refResolver.reference(obj);
      List<MapEntry> entries = new ArrayList<>();
      // read order: primitive,boxed,final,other,collection,map
      ClassFieldsInfo fieldsInfo = getClassFieldsInfo(classDef);
      ObjectSerializer.FinalTypeField[] finalFields = fieldsInfo.finalFields;
      boolean[] isFinal = fieldsInfo.isFinal;
      for (int i = 0; i < finalFields.length; i++) {
        ObjectSerializer.FinalTypeField fieldInfo = finalFields[i];
        Object fieldValue;
        if (fieldInfo.classInfo == null) {
          // TODO(chaokunyang) support registered serializer in peer with ref tracking disabled.
          fieldValue = fury.readRef(buffer, classInfoHolder);
        } else {
          if (classResolver.isPrimitive(fieldInfo.classId)) {
            fieldValue = fieldInfo.classInfo.getSerializer().read(buffer);
          } else {
            fieldValue =
                ObjectSerializer.readFinalObjectFieldValue(
                    fury, refResolver, classResolver, fieldInfo, isFinal[i], buffer);
          }
        }
        entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));
      }
      for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.otherFields) {
        Object fieldValue = ObjectSerializer.readOtherFieldValue(fury, fieldInfo, buffer);
        entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));
      }
      Generics generics = fury.getGenerics();
      for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.containerFields) {
        Object fieldValue =
            ObjectSerializer.readContainerFieldValue(fury, generics, fieldInfo, buffer);
        entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));
      }
      obj.setEntries(entries);
      return obj;
    }
  }

```

Currently if you want to use this feature, you may need to implement this feature yourself, or hold it until someone have the time for this.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sOTZc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO19R,fury,1815830353,807,NA,loongs-zhang,38336731,,1936978077@qq.com,NA,2023-11-17T06:50:44Z,2023-11-17T06:50:44Z,"Fine and thanks.



发自我的iPhone


------------------ Original ------------------
From: Shawn ***@***.***&gt;
Date: Fri,Nov 17,2023 11:23 AM
To: alipay/fury ***@***.***&gt;
Cc: dragon-zhang ***@***.***&gt;, Comment ***@***.***&gt;
Subject: Re: [alipay/fury] [Java] generic object serialization for dubbogeneric call (Issue #807)





 
Thank you for bringing up this issue. We appreciate your interest in having this feature, but unfortunately, we do not have the resources available at the moment to work on it. We understand that this may be disappointing, and we apologize for any inconvenience caused.
 
To implement this feature, we need to design and implement a new GenericObject data structure to hold schema and data. For example, it may looks like:
 class GenericObject {   public void setFields(Map<String, Object&gt; fields);   public void setField(String fieldName, Object fieldValue);   public void setField(String definedClass, String fieldName, Object fieldValue);   public ClassDef schema();      @Override   public boolean equals(Object obj) {        }   @Override   public int hashCode() {        }   @Override   public String toString() {   }    } public class GenericObjectSerializer extends Serializer<GenericObject&gt; {}
 
io.fury.serializer.UnexistedClassSerializers.UnexistedClassSerializer can be used as an reference:
   public static final class UnexistedClassSerializer extends Serializer {     private final ClassDef classDef;     private final ClassInfoHolder classInfoHolder;     private final LongMap<ClassFieldsInfo&gt; fieldsInfoMap;     public UnexistedClassSerializer(Fury fury, ClassDef classDef) {       super(fury, UnexistedMetaSharedClass.class);       this.classDef = classDef;       classInfoHolder = fury.getClassResolver().nilClassInfoHolder();       fieldsInfoMap = new LongMap<&gt;();       Preconditions.checkArgument(fury.getConfig().shareMetaContext());     }     /**      * Multiple un existed class will correspond to this `UnexistedMetaSharedClass`. When querying      * classinfo by `class`, it may dispatch to same `UnexistedClassSerializer`, so we can't use      * `classDef` in this serializer, but use `classDef` in `UnexistedMetaSharedClass` instead.      */     private void writeClassDef(MemoryBuffer buffer, UnexistedMetaSharedClass value) {       // Register NotFoundClass ahead to skip write meta shared info,       // then revert written class id to write class info here,       // since it's the only place to hold class def for not found class.       buffer.increaseWriterIndex(-2);       buffer.writeByte(ClassResolver.USE_CLASS_VALUE_FLAG);       MetaContext metaContext = fury.getSerializationContext().getMetaContext();       IdentityObjectIntMap classMap = metaContext.classMap;       int newId = classMap.size;       // class not exist, use class def id for identity.       int id = classMap.putOrGet(value.classDef.getId(), newId);       if (id &gt;= 0) {         buffer.writePositiveVarInt(id);       } else {         buffer.writePositiveVarInt(newId);         metaContext.writingClassDefs.add(value.classDef);       }     }     @Override     public void write(MemoryBuffer buffer, Object v) {       UnexistedMetaSharedClass value = (UnexistedMetaSharedClass) v;       writeClassDef(buffer, value);       ClassDef classDef = value.classDef;       ClassFieldsInfo fieldsInfo = getClassFieldsInfo(classDef);       Fury fury = this.fury;       RefResolver refResolver = fury.getRefResolver();       ClassResolver classResolver = fury.getClassResolver();       if (fury.checkClassVersion()) {         buffer.writeInt(fieldsInfo.classVersionHash);       }       // write order: primitive,boxed,final,other,collection,map       ObjectSerializer.FinalTypeField[] finalFields = fieldsInfo.finalFields;       boolean[] isFinal = fieldsInfo.isFinal;       for (int i = 0; i < finalFields.length; i++) {         ObjectSerializer.FinalTypeField fieldInfo = finalFields[i];         Object fieldValue = value.get(fieldInfo.qualifiedFieldName);         ClassInfo classInfo = fieldInfo.classInfo;         if (classResolver.isPrimitive(fieldInfo.classId)) {           classInfo.getSerializer().write(buffer, fieldValue);         } else {           if (isFinal[i]) {             // whether tracking ref is recorded in `fieldInfo.serializer`, so it's still             // consistent with jit serializer.             Serializer<Object&gt; serializer = classInfo.getSerializer();             fury.writeRef(buffer, fieldValue, serializer);           } else {             fury.writeRef(buffer, fieldValue, classInfo);           }         }       }       for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.otherFields) {         Object fieldValue = value.get(fieldInfo.qualifiedFieldName);         if (fieldInfo.trackingRef) {           fury.writeRef(buffer, fieldValue, fieldInfo.classInfoHolder);         } else {           fury.writeNullable(buffer, fieldValue, fieldInfo.classInfoHolder);         }       }       Generics generics = fury.getGenerics();       for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.containerFields) {         Object fieldValue = value.get(fieldInfo.qualifiedFieldName);         ObjectSerializer.writeContainerFieldValue(             fury, refResolver, classResolver, generics, fieldInfo, buffer, fieldValue);       }     }     private ClassFieldsInfo getClassFieldsInfo(ClassDef classDef) {       ClassFieldsInfo fieldsInfo = fieldsInfoMap.get(classDef.getId());       if (fieldsInfo == null) {         // Use `UnexistedSkipClass` since it doesn't have any field.         Collection<Descriptor&gt; descriptors =             MetaSharedSerializer.consolidateFields(                 fury.getClassResolver(), UnexistedSkipClass.class, classDef);         DescriptorGrouper descriptorGrouper =             DescriptorGrouper.createDescriptorGrouper(                 descriptors, true, fury.compressInt(), fury.compressLong());         Tuple3<                 Tuple2<ObjectSerializer.FinalTypeField[], boolean[]&gt;,                 ObjectSerializer.GenericTypeField[],                 ObjectSerializer.GenericTypeField[]&gt;             tuple = ObjectSerializer.buildFieldInfos(fury, descriptorGrouper);         int classVersionHash = 0;         if (fury.checkClassVersion()) {           classVersionHash = ObjectSerializer.computeVersionHash(descriptors);         }         fieldsInfo =             new ClassFieldsInfo(tuple.f0.f0, tuple.f0.f1, tuple.f1, tuple.f2, classVersionHash);         fieldsInfoMap.put(classDef.getId(), fieldsInfo);       }       return fieldsInfo;     }     @Override     public Object read(MemoryBuffer buffer) {       UnexistedMetaSharedClass obj = new UnexistedMetaSharedClass(classDef);       Fury fury = this.fury;       RefResolver refResolver = fury.getRefResolver();       ClassResolver classResolver = fury.getClassResolver();       refResolver.reference(obj);       List<MapEntry&gt; entries = new ArrayList<&gt;();       // read order: primitive,boxed,final,other,collection,map       ClassFieldsInfo fieldsInfo = getClassFieldsInfo(classDef);       ObjectSerializer.FinalTypeField[] finalFields = fieldsInfo.finalFields;       boolean[] isFinal = fieldsInfo.isFinal;       for (int i = 0; i < finalFields.length; i++) {         ObjectSerializer.FinalTypeField fieldInfo = finalFields[i];         Object fieldValue;         if (fieldInfo.classInfo == null) {           // TODO(chaokunyang) support registered serializer in peer with ref tracking disabled.           fieldValue = fury.readRef(buffer, classInfoHolder);         } else {           if (classResolver.isPrimitive(fieldInfo.classId)) {             fieldValue = fieldInfo.classInfo.getSerializer().read(buffer);           } else {             fieldValue =                 ObjectSerializer.readFinalObjectFieldValue(                     fury, refResolver, classResolver, fieldInfo, isFinal[i], buffer);           }         }         entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));       }       for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.otherFields) {         Object fieldValue = ObjectSerializer.readOtherFieldValue(fury, fieldInfo, buffer);         entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));       }       Generics generics = fury.getGenerics();       for (ObjectSerializer.GenericTypeField fieldInfo : fieldsInfo.containerFields) {         Object fieldValue =             ObjectSerializer.readContainerFieldValue(fury, generics, fieldInfo, buffer);         entries.add(new MapEntry(fieldInfo.qualifiedFieldName, fieldValue));       }       obj.setEntries(entries);       return obj;     }   }
 
Currently if you want to use this feature, you may need to implement this feature yourself, or hold it until someone have the time for this.
 
—
Reply to this email directly, view it on GitHub, or unsubscribe.
You are receiving this because you commented.Message ID: ***@***.***&gt;","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO19R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1UzA,fury,1876249792,807,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-04T03:10:34Z,2024-01-04T03:10:34Z,"@dragon-zhang The fallback strategy is supported in fury, you can configure `FuryBuilder` with `deserializeUnexistedClass` set to `true`, see more in https://fury.apache.org/docs/guide/java_object_graph_guide#furybuilder--options
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1UzA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/807,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x9FZb,fury,1911838299,807,NA,superchaos,2712281,SilverSuop,,NA,2024-01-26T10:41:44Z,2024-01-26T10:41:44Z,thank for your job!,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x9FZb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/808,https://api.github.com/repos/apache/fury/issues/808,fury,1829043718,808,[Java] duplciate codegen cause metaspace OOM,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-07-31T12:06:07Z,2023-07-31T12:11:10Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Currently fury cache codegenerator to avoid duplciate codegen between threads.

But the cache use weak reference, which will be gc frequently, cause duplciate codegen , and finally make metaspace OOM

**Expected behavior**
Only generate a serializer for a class once.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/e3131e5a-fea4-4de7-8d79-04af5c211285)

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/808/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/812,https://api.github.com/repos/apache/fury/issues/812,fury,1830338217,812,[Python] Mac M1/M2 python wheel release,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-08-01T02:17:04Z,2023-08-01T02:17:11Z,"## Is your feature request related to a problem? Please describe.
Suppport install and release fury python for Mac M1/M2

## Additional context
#799 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/812/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/813,https://api.github.com/repos/apache/fury/issues/813,fury,1830404519,813,[JavaScript] JavaScript should support polymorphism,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-08-01T03:41:24Z,2023-08-01T05:38:30Z,"## Is your feature request related to a problem? Please describe.
Polymorphism is supported by the typeof Any in Python. JavaScript should also support it, otherwise, some types would fail to deserialize, such as [123, ""123""].

## Describe the solution you'd like
Add a tool function called Type.any, which would use the anySerializer during compile time.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/813/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/815,https://api.github.com/repos/apache/fury/issues/815,fury,1830428260,815,"[JavaScript] When refTracking is disabled, check for cyclic references.",theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-08-01T04:12:54Z,2023-08-04T14:44:59Z,"## Is your feature request related to a problem? Please describe.
When disabling refTracking, we should check for cyclic reference to pervent the  dead circulation

## Describe the solution you'd like
check the cyclic referenece on compile time.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/815/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/816,https://api.github.com/repos/apache/fury/issues/816,fury,1830510047,816,[JavaScript] Compatible with browsers,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-08-01T05:47:56Z,2023-08-02T13:41:28Z,"## Is your feature request related to a problem? Please describe.

Currently, Fury uses many Node.js-specific APIs, such as Buffer. As a cross-language protocol, we should support browsers.

## Describe the solution you'd like
Different platforms use different APIs, we can use UInt8Array or Array in Browser，And we don't need such strong performance in the browser.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/816/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/820,https://api.github.com/repos/apache/fury/issues/820,fury,1830890381,820,[Java] jdk17 List、Set、Map serializeJavaObject error,lmm1990,4828501,,,CLOSED,2023-08-01T09:51:49Z,2023-09-04T16:58:11Z,"error content
```
class java.util.ImmutableCollections$ListN is not registered, if it's not the type you want to serialize, it may be a **vulnerability**. If it's not a vulnerability, registering class by `Fury#register` will have better performance, otherwise class name will be serialized too.
```

problem
java.util.ImmutableCollections is not public，can't register

hope

fury default register
","{""url"": ""https://api.github.com/repos/apache/fury/issues/820/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/820,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jBydB,fury,1661413185,820,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T02:55:38Z,2023-08-02T02:55:38Z,Those classes are not registered adhead. You need to register them by object.getClass currently. We will register them ahead in next release,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jBydB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/821,fury,1831098909,821,Fury java version java.lang.NegativeArraySizeException,tonysmz,17421578,,,CLOSED,2023-08-01T11:52:00Z,2023-08-07T13:50:29Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
fury version: 0.1.0
jdk version: java 11
Description:  java.lang.NegativeArraySizeException occurred when serialize list
stack print:
java.lang.NegativeArraySizeException: -2035644744

	at io.fury.memory.MemoryBuffer.ensure(MemoryBuffer.java:1877)
	at io.fury.memory.MemoryBuffer.grow(MemoryBuffer.java:1871)
	at io.fury.resolver.MapRefResolver.writeRefOrNull(MapRefResolver.java:68)
	at io.fury.Fury.writeRef(Fury.java:280)
	at io.fury.serializer.CollectionSerializers$CollectionSerializer.writeElements(CollectionSerializers.java:138)
	at io.fury.serializer.CollectionSerializers$CollectionSerializer.write(CollectionSerializers.java:115)
	at io.fury.serializer.CollectionSerializers$CollectionSerializer.write(CollectionSerializers.java:65)
	at io.fury.Fury.writeData(Fury.java:483)
	at io.fury.Fury.writeRef(Fury.java:283)
	at io.fury.Fury.serialize(Fury.java:233)
	at io.fury.Fury.serialize(Fury.java:181)




","{""url"": ""https://api.github.com/repos/apache/fury/issues/821/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9JMm,fury,1660195622,821,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-01T12:15:35Z,2023-08-01T12:15:35Z,@tonysmz could you provide the reproduction code?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9JMm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9c-G,fury,1660276614,821,NA,tonysmz,17421578,,,NA,2023-08-01T13:07:18Z,2023-08-01T13:07:18Z,"> @tonysmz could you provide the reproduction code?

Sorry I can't, the List has more than 14M records from database, it can be serialized by jdk, but it very slow.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9c-G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9hf2,fury,1660295158,821,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-01T13:16:21Z,2023-08-01T13:16:21Z,"> > @tonysmz could you provide the reproduction code?
> 
> Sorry I can't, the List has more than 14M records from database, it can be serialized by jdk, but it very slow.

The data deserialized by fury must be the data serialized by fury, rather than jdk serialized data. Fury compatibility is the user api level, rather than binary level","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9hf2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9lTk,fury,1660310756,821,NA,tonysmz,17421578,,,NA,2023-08-01T13:23:36Z,2023-08-01T13:23:36Z,"I mean the jdk can serialize over 14M rows ArrayList without any error, but it's slowly, fury can't with the below error:
ava.lang.NegativeArraySizeException: -2035644744

at io.fury.memory.MemoryBuffer.ensure(MemoryBuffer.java:1877)
at io.fury.memory.MemoryBuffer.grow(MemoryBuffer.java:1871)
at io.fury.resolver.MapRefResolver.writeRefOrNull(MapRefResolver.java:68)
at io.fury.Fury.writeRef(Fury.java:280)
at io.fury.serializer.CollectionSerializers$CollectionSerializer.writeElements(CollectionSerializers.java:138)
at io.fury.serializer.CollectionSerializers$CollectionSerializer.write(CollectionSerializers.java:115)
at io.fury.serializer.CollectionSerializers$CollectionSerializer.write(CollectionSerializers.java:65)
at io.fury.Fury.writeData(Fury.java:483)
at io.fury.Fury.writeRef(Fury.java:283)
at io.fury.Fury.serialize(Fury.java:233)
at io.fury.Fury.serialize(Fury.java:181)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9lTk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9woc,fury,1660357148,821,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-01T13:41:21Z,2023-08-01T13:41:21Z,"A minimal reproduction won't need 140m items, Maybe  some class defs and mock some data will reproduce the failure. We do need the reprodduction code to find out the root cause","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5i9woc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/821,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jXjQI,fury,1667118088,821,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-07T03:06:20Z,2023-08-07T03:06:20Z,@tonysmz any update on this?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jXjQI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/826,fury,1832366521,826,[Java]Object object serialization is not supported,65487123,47898230,zeping_lu,,CLOSED,2023-08-02T03:32:15Z,2023-08-03T03:09:08Z,"Even if Object.class is registered, an exception will still be thrown when serializing Object objects. An exception is also thrown when serializing a registered class with an attribute of type Object.
Protostuff doesn't have this problem. Can it be solved?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/826/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jB4st,fury,1661438765,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T03:34:52Z,2023-08-02T03:34:52Z,@65487123 Could you share your code here?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jB4st/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCFE8,fury,1661489468,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T04:47:07Z,2023-08-02T04:47:07Z,I see. java.lang.Objext didn't implements java.io.Serializable. We disabled serialization support for such classes whose package name starts with `java.`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCFE8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCnBn,fury,1661628519,826,NA,65487123,47898230,zeping_lu,,NA,2023-08-02T07:09:08Z,2023-08-02T07:09:08Z,"> I see. java.lang.Objext didn't implements java.io.Serializable. We disabled serialization support for such classes whose package name starts with `java.`

So this problem can't be solved? Then this serialization tool is not as widely applicable as protostuff, although the performance is a little higher","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCnBn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCpuh,fury,1661639585,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T07:16:02Z,2023-08-02T07:16:02Z,It's easy to resolve it. I can submit a pr to fix it this day later,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCpuh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCq8U,fury,1661644564,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T07:20:03Z,2023-08-02T07:20:03Z,@65487123 You can invoke FuryBuilder#withJDKSerializableCheck to false and FuryBuilder#requireClassRegistration to false. I believe that will make java.lang.Object Serializable,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCq8U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCr5y,fury,1661648498,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T07:23:09Z,2023-08-02T07:23:09Z,It's not a little faster. It's 20-30× faster. Some one else has tested using gaming data.  See https://blog.csdn.net/jiangguilong2000/article/details/131775858,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCr5y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDhev,fury,1661867951,826,NA,65487123,47898230,zeping_lu,,NA,2023-08-02T09:32:05Z,2023-08-02T09:32:05Z,"> @65487123 You can invoke FuryBuilder#withJDKSerializableCheck to false and FuryBuilder#requireClassRegistration to false. I believe that will make java.lang.Object Serializable

Thank you. I tried. It worked. Can consult, jdkClassSerializableCheck what is the meaning of this field? Why not default to false?

Also, I recommend that when an exception is thrown while serializing an Object, there is a prompt in the exception message that instructs the user to set this field to false, after all, many people like me who are using Fury for the first time do not know these details.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jDhev/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jD6db,fury,1661970267,826,NA,65487123,47898230,zeping_lu,,NA,2023-08-02T10:36:43Z,2023-08-02T10:36:43Z,"



> It's not a little faster. It's 20-30× faster. Some one else has tested using gaming data. See https://blog.csdn.net/jiangguilong2000/article/details/131775858

Based on my own measurements, if it is a single-threaded serialization, Fury does have a clear advantage compared to Protostuff, but it is not as exaggerated as ten times, at most it is about three times (based on total time, using JDK 17). However, if it is multithreaded concurrent serialization of objects, the advantage of Fury is not so obvious. First, multiple threads cannot share one Fury, each thread needs its own Fury, which will consume more memory. Secondly, storing and retrieving the Fury exclusively used by different threads also consumes resources, and it is necessary to consider recycling the less frequently used Fury. The static serialization method provided by Protostuff supports concurrent execution itself, without these issues.

Also, I tested several objects myself, and after serializing them into byte[], some of the byte[] generated by Protostuff are smaller than those generated by Fury.

The most important thing is that I think network IO is the main bottleneck in terms of time consumption, so even if serialization is twice as fast, the overall throughput improvement is limited, that's why I said ""a little"".","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jD6db/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEIim,fury,1662027942,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T11:21:03Z,2023-08-02T11:21:03Z,"> jdkClassSerializableCheck

This is for safety, JDK doesn't mark this class as Serializable, fury disabled serialziation for jdk internal classes too. For example, java.lang.Thread didn't implement Serializable, obviously we shouldn't allow such objects to be serialized. 
We can't enumerate which classes are secure, so we just registered a small list of jdk types to be safe, other types needs users check the safety and then register them.

`java.lang.Object` is secure, we should register it ahead.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEIim/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEJlW,fury,1662032214,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T11:24:32Z,2023-08-02T11:24:32Z,"> > It's not a little faster. It's 20-30× faster. Some one else has tested using gaming data. See https://blog.csdn.net/jiangguilong2000/article/details/131775858
> 
> Based on my own measurements, if it is a single-threaded serialization, Fury does have a clear advantage compared to Protostuff, but it is not as exaggerated as ten times, at most it is about three times (based on total time, using JDK 17). However, if it is multithreaded concurrent serialization of objects, the advantage of Fury is not so obvious. First, multiple threads cannot share one Fury, each thread needs its own Fury, which will consume more memory. Secondly, storing and retrieving the Fury exclusively used by different threads also consumes resources, and it is necessary to consider recycling the less frequently used Fury. The static serialization method provided by Protostuff supports concurrent execution itself, without these issues.
> 
> Also, I tested several objects myself, and after serializing them into byte[], some of the byte[] generated by Protostuff are smaller than those generated by Fury.
> 
> The most important thing is that I think network IO is the main bottleneck in terms of time consumption, so even if serialization is twice as fast, the overall throughput improvement is limited, that's why I said ""a little"".

We didn't multithread using jmh. But `ThreadSafeFury` is using ThreadLocal under the hood, all extra overhead are just the cost of `java.lang.ThreadLocal#get`. Does that have so much cost? We didn't find such gap in our cases.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEJlW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEKty,fury,1662036850,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T11:27:39Z,2023-08-02T11:27:39Z,"About the serialization performance speedup, it's case by case. https://github.com/alipay/fury/blob/main/docs/benchmarks/serialization/bench_serialize_STRUCT_to_directBuffer_tps.png  is 30x faster than protostuff, but https://github.com/alipay/fury/blob/main/docs/benchmarks/deserialization/bench_deserialize_SAMPLE_from_array_tps.png is only 3x faster than protostuff.

String and bianry serialization will have a copy finally, which will amortise the speedup by fury jit a little. I belive it's in our expection.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jEKty/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/826,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jELZZ,fury,1662039641,826,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T11:29:53Z,2023-08-02T11:29:53Z,"You can enable `io.fury.Fury.FuryBuilder#withNumberCompressed`,which will make the data smaller. I do have plans to make it further smaller. But I'm afraid we don't have time for this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jELZZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/827,https://api.github.com/repos/apache/fury/issues/827,fury,1832547538,827,Chinese document 404.title,southliu,26358837,South,iamsouth@foxmail.com,CLOSED,2023-08-02T06:49:30Z,2023-08-02T08:59:36Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
进入文档，选择语言为中文，点击开始按钮，就显示404。
![image](https://github.com/alipay/fury/assets/26358837/fffecd99-182c-4471-b2b2-b1295398fec6)

**Expected behavior**
不出现404界面。

**To Reproduce**
1. 进入https://www.furyio.org ，选择语言为中文（需要英文切中文才能复现）。
![image](https://github.com/alipay/fury/assets/26358837/1e2ff7c2-b7c8-4494-884e-867619b9fe20)
2. 点击开始按钮。
![image](https://github.com/alipay/fury/assets/26358837/ab146d4d-fe42-43be-8bb9-0c4e7cff91d0)
3. 就会出现404.
![image](https://github.com/alipay/fury/assets/26358837/46a63bc4-1b6a-4ece-9df4-f16c381700be)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/827/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/827,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCf4I,fury,1661599240,827,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-02T06:50:10Z,2023-08-02T06:50:10Z,@wangweipeng2 could you take a look at it,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCf4I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/827,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCmNf,fury,1661625183,827,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-02T07:07:11Z,2023-08-02T07:07:11Z,"> @wangweipeng2 could you take a look at it

The href of the start button is wrong. I will fix it
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCmNf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/827,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCqZt,fury,1661642349,827,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-02T07:18:13Z,2023-08-02T07:18:13Z,"> Thank you for reporting the problem! Please make sure what you are reporting is a bug with reproducible steps.
> 
> **Describe the bug** 进入文档，选择语言为中文，点击开始按钮，就显示404。 ![image](https://user-images.githubusercontent.com/26358837/257722892-fffecd99-182c-4471-b2b2-b1295398fec6.png)
> 
> **Expected behavior** 不出现404界面。
> 
> **To Reproduce**
> 
> 1. 进入https://www.furyio.org ，选择语言为中文（需要英文切中文才能复现）。
>    ![image](https://user-images.githubusercontent.com/26358837/257723637-1e2ff7c2-b7c8-4494-884e-867619b9fe20.png)
> 2. 点击开始按钮。
>    ![image](https://user-images.githubusercontent.com/26358837/257724067-ab146d4d-fe42-43be-8bb9-0c4e7cff91d0.png)
> 3. 就会出现404.
>    ![image](https://user-images.githubusercontent.com/26358837/257724195-46a63bc4-1b6a-4ece-9df4-f16c381700be.png)


Could you please try it again? I updated the site a few minutes ago.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jCqZt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/828,https://api.github.com/repos/apache/fury/issues/828,fury,1832848972,828,[Java] jdk17 not supported record,lmm1990,4828501,,,CLOSED,2023-08-02T09:55:33Z,2023-08-09T06:36:47Z,"code
```java
public record UserInfo(int userId, String userName){}

    public static void main(String[] args) {
        Fury fury = Fury.builder().withLanguage(Language.JAVA)
                // .requireClassRegistration(false)
                .build();
        fury.register(UserInfo.class);
        try{
            byte[] bytes = fury.serializeJavaObject(new UserInfo(1,""张三""));
        }catch (Exception e){
            e.printStackTrace();
        }
    }
```


error content
```
Caused by: java.lang.UnsupportedOperationException: can't get field offset on a record class: private final int demo.UserInfo.userId
```

problem
not supported record
","{""url"": ""https://api.github.com/repos/apache/fury/issues/828/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/828,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jVVMh,fury,1666536225,828,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-05T15:36:38Z,2023-08-05T15:36:38Z,"This is a little complicated, some serialization frameworks such as kryo does support record serialization, but it doesn't support record type forward/backward compatibility.

For it being used in more scenarios,  forward/backward compatibility are necessary.

Fury will support type consist mode in next days, then add type compatibility mode later.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jVVMh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/833,https://api.github.com/repos/apache/fury/issues/833,fury,1833458378,833,[Java] Guava CVE-2023-2976,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-02T15:56:15Z,2023-08-02T15:56:36Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Guava has a cve vulnerabilities : https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-2976


**Screenshots**

![image](https://github.com/alipay/fury/assets/12445254/2713d29d-d9f3-40d9-8070-a112ed2a198d)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/833/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/837,https://api.github.com/repos/apache/fury/issues/837,fury,1838064008,837,[Java] Support jdk record serialization ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T05:59:46Z,2023-08-09T08:37:49Z,"## Is your feature request related to a problem? Please describe.
Record is final in JDK16, the record is a final object.

Jdk has a different object model for it, we can't get field offset for it, thus can't use reflection/methodhandle to set its fields. Instead, we need to call its constructor with all its friends to recreate the object.
```
Caused by: java.lang.UnsupportedOperationException: can't get field offset on a record class: private final int org.example.TestRecord$Foo.f1
	at jdk.unsupported/sun.misc.Unsafe.objectFieldOffset(Unsafe.java:648)
```
![image](https://github.com/alipay/fury/assets/12445254/f0258319-a84d-45f6-8788-c2b7770baa22)

The record class can envolve too, and jdk support record class fields forward/backward compatibility, fury should support too.

Another thing to notice is that record class doesn't allow customize serialization, which makes serialization simple. since we don't have to support `writeObject/readObject/writeReplace/readResolve/readObjectNoData`:
- Serialization of a record object is based only on its state components.
- Deserialization of a record object uses only the canonical constructor.


## Describe the solution you'd like
- Make serialization use record class accessor method to get component value
- Read record class fields first, then use record class constructor to recreate record.

Steps:
- [x] #838
- [x] #839
- [x] #842
- [x] #840
- [x] #841
- [x] #843


## Additional context
- https://www.infoq.com/articles/java-14-feature-spotlight/
- https://inside.java/2020/07/20/record-serialization/
- https://blogs.oracle.com/javamagazine/post/simpler-object-and-data-serialization-using-java-records
- #828 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/837/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/838,https://api.github.com/repos/apache/fury/issues/838,fury,1838068057,838,[Java] support schema consistent record serializer by interpreter mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:11:11Z,2023-08-06T18:18:54Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/838/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/839,https://api.github.com/repos/apache/fury/issues/839,fury,1838068073,839,[Java] support schema compatible record serializer by interpreter mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:11:15Z,2023-08-06T18:18:54Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/839/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/840,https://api.github.com/repos/apache/fury/issues/840,fury,1838068090,840,[Java] support schema consistent record serialization by jit mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:11:18Z,2023-08-09T06:36:21Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/840/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/841,https://api.github.com/repos/apache/fury/issues/841,fury,1838068108,841,[Java] support schema compatible record serialization by jit mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:11:21Z,2023-08-07T17:37:16Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/841/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/842,https://api.github.com/repos/apache/fury/issues/842,fury,1838069091,842,[Java] Support record serialization meta sharing interpreter mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:15:36Z,2023-08-07T03:04:47Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/842/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/843,https://api.github.com/repos/apache/fury/issues/843,fury,1838069112,843,[Java] Support record serialization meta sharing jit mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-06T06:15:40Z,2023-08-09T06:36:22Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/843/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/858,fury,1839013097,858,[Python] Python3.10 wheel not released,Suyi32,24327363,SmarterLi,,CLOSED,2023-08-07T09:05:29Z,2023-08-08T02:16:06Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Cannot install by  `pip install pyfury --pre`

**Expected behavior**

Install pyfury on my machine

**To Reproduce**

In a AWS EC2 instance, run `pip install pyfury --pre`

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**

In AWS EC2 instance, Ubuntu 20.04, Python 3.10.9, pip 23.2.1 from /home/ubuntu/anaconda3/lib/python3.10/site-packages/pip (python 3.10)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/858/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jY8CP,fury,1667481743,858,NA,Suyi32,24327363,SmarterLi,,NA,2023-08-07T09:06:11Z,2023-08-07T09:06:11Z,"![image](https://github.com/alipay/fury/assets/24327363/d7f7b94a-3b36-4100-84fe-70ce2ec88bd7)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jY8CP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZFlR,fury,1667520849,858,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-07T09:32:04Z,2023-08-07T09:32:04Z,"@Suyi32 Thanks for filing this issue, we haven't release wheel for python 3.10. Currently we only release for python3.6~3.9. Fury python relies CAPI of pyarrow==4.0.0 for row format schema and convert to arrow, which doesn't release for python3.10.
We have plan to upgrade to newer pyarrow version in next days.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZFlR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZq86,fury,1667673914,858,NA,Suyi32,24327363,SmarterLi,,NA,2023-08-07T11:21:49Z,2023-08-07T11:21:49Z,"Thanks for your timely response. Still get the following errors with Python 3.8.2 and pyarrow==4.0.0
![image](https://github.com/alipay/fury/assets/24327363/226b70a1-a92b-4860-b55a-d9e9e13f3b77)


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZq86/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZ8w6,fury,1667746874,858,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-07T12:16:34Z,2023-08-07T12:16:34Z,"Thanks for tesing again, we missed a shared library. The CI use `pip install -v -e .`, which doesn't cover for `python setup.py bdsitg_wheel`. I fixed it in #862","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jZ8w6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/858,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jadZ-,fury,1667880574,858,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-07T13:40:02Z,2023-08-07T13:40:02Z,@Suyi32 Could you try it again? We just released `pyfury==0.1.1.a1`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jadZ-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/860,https://api.github.com/repos/apache/fury/issues/860,fury,1839306715,860,[Python] Support pyarrow6 bazel build,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-07T12:00:32Z,2023-08-07T12:12:27Z,"## Is your feature request related to a problem? Please describe.
Currently fury python row format use pyarrow for schema def and support convert to arrow format automically.
Then fury used pyarrow c api. We build pyfury with pyarrow 4.0.0 capi. pyarrow 4.0.0 doesn't release wheel for python 3.10, which makes pyfury doesn't release for python 3.10.

But if we upgrade pyarrow to higer version, we got following build error:
```
ERROR: /Users/chaokunyang/Desktop/chaokun/fury_open_source/BUILD:57:12: Executing genrule //:python/pyfury/format/_format.pyx_cython_translation failed: (Exit 1): bash failed: error executing command /bin/bash -c ... (remaining 1 argument(s) skipped)

Use --sandbox_debug to see verbose messages from the sandbox

Error compiling Cython file:
------------------------------------------------------------
...

    cdef cppclass CMakeStructOptions \
            ""arrow::compute::MakeStructOptions""(CFunctionOptions):
        CMakeStructOptions(vector[c_string] n,
                           vector[c_bool] r,
                           vector[shared_ptr[const CKeyValueMetadata]] m)
                                                  ^
------------------------------------------------------------

/Users/chaokunyang/anaconda3/envs/py3.7/lib/python3.7/site-packages/pyarrow/includes/libarrow.pxd:2156:51: Expected ']', found 'CKeyValueMetadata'

Error compiling Cython file:
------------------------------------------------------------
...
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

```

## Describe the solution you'd like
The following error are caused by cython of lower version, see https://github.com/apache/arrow/issues/28629

We should upgrade cython used in bazel.

## Additional context
#858 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/860/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/865,https://api.github.com/repos/apache/fury/issues/865,fury,1842544582,865,"[Python] pyfury, loky, pickle performance",jacktang,44341,Jack Tang,himars AT gmail.com,OPEN,2023-08-09T05:59:23Z,2023-08-09T08:38:39Z,"Hello there,

 Did you have some benchmarks on pyfury, loky and pickle? Thanks!","{""url"": ""https://api.github.com/repos/apache/fury/issues/865/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/865,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jldV4,fury,1670763896,865,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-09T06:45:35Z,2023-08-09T06:45:35Z,"We did some simple benchmarks with pickle before, `loky` is not benchmarked.

There are still many space for performance optimization in python serialization, we haven't do the benchmark thoroughly.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jldV4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/865,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlmA8,fury,1670799420,865,NA,jacktang,44341,Jack Tang,himars AT gmail.com,NA,2023-08-09T07:16:45Z,2023-08-09T07:16:45Z,"@chaokunyang Thanks for the quick reply. I read the python code quickly, and does pyfury supports python function serialization now?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlmA8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/865,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlmUT,fury,1670800659,865,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-09T07:17:44Z,2023-08-09T07:17:44Z,"It doesn't support, you can pass a callback to let cloudpickle handle it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlmUT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/865,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlnpc,fury,1670806108,865,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-09T07:22:06Z,2023-08-09T07:22:06Z,"```python
from dataclasses import dataclass
from typing import List

@dataclass
class Foo:
    f1: int
    f2: int
    f3: float
    f4: int
    f5: int
    f6: List[int]

foos = [Foo(f1=1000, f2=2**30, f3=1/3, f4=100, f5=200, f6=[11, 1234]) for i in range(1000)]

fury = pyfury.Fury(language=pyfury.Language.PYTHON)
fury.register_class(Foo)
```
FYI, for above cases, fury is 1.35x faster than pickle.
![image](https://github.com/alipay/fury/assets/12445254/606bbbec-0d6c-44ab-952f-20a049d54807)

There are still many virtual method calls in fury python, which we don't optimize still .
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5jlnpc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/867,fury,1843308279,867,[Java] JIT support for custom data object xlang serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-08-09T13:56:38Z,2024-05-08T12:59:37Z,"## Is your feature request related to a problem? Please describe.
Fury optimizes pojo serialization by jit for pure java mode, see https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/builder/ObjectCodecBuilder.java

But for xlang serializaiton, fury still use interpreter mode, see https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/serializer/StructSerializer.java , we shoudl do similar optimization for xlang

## Describe the solution you'd like
Add jit support for xlang serialization in java.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/867/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wVYsW,fury,1884654358,867,NA,zzzk1,36791902,Zhengke Zhou,madzhou1@gmail.com,NA,2024-01-10T11:17:33Z,2024-01-10T11:17:33Z,"Hello, I would like to start with this issues and participate in the project.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wVYsW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wVwXt,fury,1884751341,867,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-10T12:24:18Z,2024-01-10T12:24:18Z,"Hi @zzzk1 ,

Thank you for your interest in contributing to the project!  To get started, you can take `org.apache.fury.builder.ObjectCodecBuilder` as an example for how to generate code in fury java. Please let me know if you need more information.

Looking forward to your contributions!
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wVwXt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56qzz6,fury,2058042618,867,NA,heliang666s,147408835,,,NA,2024-04-16T00:45:32Z,2024-04-16T00:45:32Z,"hello,I am new in there,This issue does not seem to be resolved,I will try it,please assign me,thanks~","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56qzz6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rLJw,fury,2058138224,867,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-16T02:52:27Z,2024-04-16T02:52:27Z,"> hello,I am new in there,This issue does not seem to be resolved,I will try it,please assign me,thanks~

Great!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rLJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vUl7,fury,2059225467,867,NA,heliang666s,147408835,,,NA,2024-04-16T14:25:01Z,2024-04-16T14:25:01Z,"I have no idea now,Could you offer me with more details about the resolution?@chaokunyang","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56vUl7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57P58Y,fury,2067767064,867,NA,StevenCurran,683801,,,NA,2024-04-20T19:52:50Z,2024-04-20T19:52:50Z,"> I have no idea now,Could you offer me with more details about the resolution?@chaokunyang

If you have no idea how to solve it, why are you asking for the issue to be assigned to you....","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57P58Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58AY1i,fury,2080476514,867,NA,miracle485,67629161,,,NA,2024-04-27T11:56:51Z,2024-04-27T11:56:51Z,"hello, I see that the linked class has been removed. Has this issue been resolved?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58AY1i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58Alks,fury,2080528684,867,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-27T12:23:00Z,2024-04-27T12:23:00Z,"Nope, this issue is still not resolved. 
It should be more clear that how to implement this feature than before, since our xlang serialization protocol has been formulized: https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58Alks/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58AmGh,fury,2080530849,867,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-27T12:24:06Z,2024-04-27T12:24:06Z,"> I have no idea now,Could you offer me with more details about the resolution?@chaokunyang

Hi @heliang666s , are you still working on this? The protocol details can be found in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58AmGh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/867,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59M3Il,fury,2100523557,867,NA,heliang666s,147408835,,,NA,2024-05-08T12:59:37Z,2024-05-08T12:59:37Z,"ok,I will solve it.@chaokunyang","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59M3Il/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/868,https://api.github.com/repos/apache/fury/issues/868,fury,1847035639,868,[Java] Add support for dubbo3 ,ilxqx,18739624,Wei Xiaopeng,iweixiaopeng@163.com,CLOSED,2023-08-11T15:31:19Z,2023-09-01T10:52:40Z,"## Is your feature request related to a problem? Please describe.
#### Supporting Dubbo3 would be a good choice because its creation is for performance. If the strongest serialization library, Fury, cannot be matched with the strongest RPC framework, Dubbo, everything will become meaningless.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/868/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5j6-6x,fury,1676406449,868,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-13T16:32:59Z,2023-08-13T16:32:59Z,"Hi @ilxqx , thanks for creating this issue. Dubbo integration is important for fury. I just write an integration for dubbo java: https://github.com/fury-project/dubbo-serialization-fury . Could you try it out?

Currently this is put outside of [dubbo](https://github.com/apache/dubbo) repo. If this work, I can upload it into maven central repo and create a pr in [duubo](https://github.com/apache/dubbo)  in the future.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5j6-6x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5j7e3S,fury,1676537298,868,NA,ilxqx,18739624,Wei Xiaopeng,iweixiaopeng@163.com,NA,2023-08-14T01:19:28Z,2023-08-14T01:19:28Z,"Thanks, I'll try it right away","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5j7e3S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/871,fury,1850836817,871,[Java] Can't serialize circular reference when ref tracking disabled,16638112210,67961957,,,CLOSED,2023-08-15T03:00:44Z,2023-08-15T03:53:56Z,"
自关联的对象无法序列化，下面是对象的类结构
```
@Data
public class SenseNodeBo implements Serializable {
    private SenseNodeBo nextNode;
}
```
执行逻级
```
  public static void main(String[] args) {
        ThreadSafeFury fury = Fury.builder()
                                  .withLanguage(Language.JAVA)
                                  .requireClassRegistration(false)
                                  .withRefTracking(false)
                                  .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                                  .withAsyncCompilation(false)
                                  .buildThreadSafeFury();
        fury.getCurrentFury().register(SenseNodeBo.class);
        SenseNodeBo senseNodeBo = new SenseNodeBo();
        senseNodeBo.setNextNode(senseNodeBo);

        fury.serialize(senseNodeBo);
    }
```

报错日志
```
0:59:31.774 [main] WARN io.fury.Fury - Class registration isn't forced, unknown insecure classes can be deserialized. If the environment isn't 100% secure, please enable class registration by `FuryBuilder#requireClassRegistration(true)`.
10:59:31.793 [main] DEBUG io.fury.resolver.ClassResolver - `fury-format` dependency not included, skip adding serializer for class io.fury.format.vectorized.ArrowSerializers. If you want to use fury-format, please include fury-format dependency.
10:59:31.897 [main] INFO io.fury.Fury - Created new fury io.fury.Fury@7c1e2a9e
10:59:32.112 [main] INFO io.fury.codegen.CompileUnit - Generate code for com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552 took 76 ms.
10:59:32.262 [main] INFO io.fury.codegen.JaninoUtils - Compile [SenseNodeBoFuryCodec_354639575_248609774_262366552] take 148 ms
10:59:32.268 [main] DEBUG io.fury.codegen.CodeGenerator - Code stats for class com/sense/workflow/flow/core/SenseNodeBoFuryCodec_354639575_248609774_262366552.class is CodeStats{methodsSize={writeFields1$=280, <init>=171, readFields1$=170, readFields$=156, writeClassAndObject$=125, writeClassAndObject1$=125, writeClassAndObject2$=125, writeFields$=125, writeClassAndObject3$=125, writeClassAndObject4$=125, writeCollectionClassInfo$=119, read=79, write=62, class$=18}, constPoolSize=370}
Exception in thread ""main"" java.lang.StackOverflowError
	at io.fury.memory.MemoryBuffer.writeByte(MemoryBuffer.java:1064)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeFields$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:132)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.write(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:323)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeClassAndObject$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:81)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeFields$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:133)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.write(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:323)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeClassAndObject$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:81)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeFields$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:133)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.write(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:323)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeClassAndObject$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:81)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeFields$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:133)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.write(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:323)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeClassAndObject$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:81)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeFields$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:133)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.write(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:323)
	at com.sense.workflow.flow.core.SenseNodeBoFuryCodec_354639575_248609774_262366552.writeClassAndObject$(SenseNodeBoFuryCodec_354639575_248609774_262366552.java:8
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/871/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCcON,fury,1678361485,871,NA,16638112210,67961957,,,NA,2023-08-15T03:03:47Z,2023-08-15T03:03:47Z,"原生JDK序列化是可以的，下面参考redisson中内置的SerializationCodec(JDK序列化)
```

import io.netty.buffer.ByteBuf;
import org.redisson.codec.SerializationCodec;

import java.io.IOException;

/**
 * @Date 8/15/23 10:45
 */
public class Test {
    public static void main(String[] args) {
        SenseNodeBo senseNodeBo = new SenseNodeBo();
        senseNodeBo.setNextNode(senseNodeBo);

        try {
            ByteBuf encode = new SerializationCodec().getValueEncoder()
                                           .encode(senseNodeBo);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCcON/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCfEv,fury,1678373167,871,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-15T03:24:59Z,2023-08-15T03:24:59Z,"> .withRefTracking(false)

The senseNodeBo references itself, so you need to enable the reference through withRefTracking(true)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCfEv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCf4S,fury,1678376466,871,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-15T03:30:20Z,2023-08-15T03:30:20Z,"```Java
package io.fury;
import io.fury.serializer.CompatibleMode;
import lombok.Data;

import java.io.IOException;

@Data
class SenseNodeBo {
  private SenseNodeBo nextNode;
}

public class FuryTest {
  public static void main(String[] args) throws IOException {
    ThreadSafeFury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withRefTracking(true)  
            .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
            .withAsyncCompilation(false)
            .buildThreadSafeFury();
    fury.getCurrentFury().register(SenseNodeBo.class);
    SenseNodeBo senseNodeBo = new SenseNodeBo();
    senseNodeBo.setNextNode(senseNodeBo);
    fury.serialize(senseNodeBo);
  }
}

```
![image](https://github.com/alipay/fury/assets/16490211/5bab94ec-f30e-4dfc-9bb1-dd9f17c31812)

@16638112210   I tested it on Java 8, and it worked fine.  Could you please try it on your machine?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCf4S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kChkQ,fury,1678383376,871,NA,16638112210,67961957,,,NA,2023-08-15T03:40:31Z,2023-08-15T03:40:31Z,好的  感谢老师,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kChkQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/871,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCh31,fury,1678384629,871,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-08-15T03:42:13Z,2023-08-15T03:42:13Z,"> 好的 感谢老师

^_^ 没有老师，大家相互交流。","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kCh31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/872,fury,1852465406,872,"[Java]Regarding deserialization, the variable type is not accurate?",PisecesPeng,29013341,,Piseces.Peng@outlook.com,CLOSED,2023-08-16T04:00:17Z,2023-08-16T08:07:47Z,"## Is your feature request related to a problem? Please describe.
In fact, I roughly compared some common serialization tools locally,
observe the performance of some types, such as `Map<String, Object>`, `List<Object>`, etc..
So far, Fury seems to be accurate in type conversion..
(similar to jackson... , it is not very accurate at some times..)


But I still want to confirm whether Fury's deserialization may be inaccurate in type.
looking forward to your feedback :)


","{""url"": ""https://api.github.com/repos/apache/fury/issues/872/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIpst,fury,1679989549,872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-16T05:33:30Z,2023-08-16T05:33:30Z,"@PisecesPeng Thanks for creating this issue. Fury deserialization will be accurate in type. For example, if you serialize a `LinkedList/LinkedHashMap`, you will get a `LinkedList/LinkedHashMap` returned instead of `ArrayList/HashMap`.

Unlike other serialization framework, we support **polymorphism** for all types, any subtypes will be serialized as it is.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIpst/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIsUK,fury,1680000266,872,NA,PisecesPeng,29013341,,Piseces.Peng@outlook.com,NA,2023-08-16T05:48:44Z,2023-08-16T05:48:44Z,"@chaokunyang Thanks for the reply😄

I'm planning to use Fury in my service,
wondering if this is recommended in the current version `v0.1.0` ?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIsUK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIuYN,fury,1680008717,872,NA,PisecesPeng,29013341,,Piseces.Peng@outlook.com,NA,2023-08-16T06:00:30Z,2023-08-16T06:00:30Z,"> @PisecesPeng Thanks for creating this issue. Fury deserialization will be accurate in type. For example, if you serialize a `LinkedList/LinkedHashMap`, you will get a `LinkedList/LinkedHashMap` returned instead of `ArrayList/HashMap`.
> 
> Unlike other serialization framework, we support **polymorphism** for all types, any subtypes will be serialized as it is.

Sorry, It may be that my expression is not clear, so I want to emphasize it
I actually want to ask, on the premise that `Object` is defined as a type,
In objects like `Map<String, Object>`, I store many different types of value...

Can Fury still deserialize to the correct type?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kIuYN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJNqk,fury,1680136868,872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-16T07:55:17Z,2023-08-16T07:55:17Z,"Yes, fury supports it natively.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJNqk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJN6q,fury,1680137898,872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-16T07:56:04Z,2023-08-16T07:56:04Z,"> @chaokunyang Thanks for the reply😄
> 
> I'm planning to use Fury in my service, wondering if this is recommended in the current version `v0.1.0` ?

We will release new version recently. Currently you can use v0.1.0","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJN6q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJR7O,fury,1680154318,872,NA,PisecesPeng,29013341,,Piseces.Peng@outlook.com,NA,2023-08-16T08:07:46Z,2023-08-16T08:07:46Z," 👍 all right, thx!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kJR7O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/874,https://api.github.com/repos/apache/fury/issues/874,fury,1856163505,874,io.fury.collection.Maps.HashMap() losts half of datas.,balin998,8319287,,,CLOSED,2023-08-18T06:53:51Z,2023-08-18T15:55:11Z,"It losts half of datas.

**Describe the bug**
Map<String, String> f2 = ofHashMap(""k1"", ""v1"", ""k2"", ""v2"");
System.out.println(f2.size());   // 2 expcetd, but the result is 1.
System.out.println(f2);  // {k1=v1} 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/874/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/874,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kYYiR,fury,1684113553,874,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-18T15:52:35Z,2023-08-18T15:52:35Z,"@balin998 Thanks for submitting this issue, it's a careles bug. I created a pr to fix it in #877","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5kYYiR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/876,https://api.github.com/repos/apache/fury/issues/876,fury,1856933282,876,[Java] Support compress int long independently,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-18T15:44:37Z,2023-08-18T15:48:34Z,"## Is your feature request related to a problem? Please describe.
Fury suppore compress int/long for smaller size. But compressing long is unnecessary for many cases. If a value use long to represent it instrwad of int. It can't be represented by smaller bytes mostly. ANd the compressing will jsut wast resource.
Even use 9 bytes if larger enough.

## Describe the solution you'd like
Support compress int/long independently.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/876/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/878,https://api.github.com/repos/apache/fury/issues/878,fury,1856970180,878,[Java] register common exception,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-18T16:14:06Z,2023-08-18T16:22:19Z,"## Is your feature request related to a problem? Please describe.
Currently fury didn't register any exception class, serialize those objects will need to register ahead or disable class registration.

It would be better to pre register those common exception classes.
## Describe the solution you'd like

Pre register those common exception classes.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/878/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/880,https://api.github.com/repos/apache/fury/issues/880,fury,1856976175,880,[Java] warning:Can't initialize javac processor due to (most likely) a class loader problem,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-18T16:19:07Z,2023-08-18T16:21:15Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Compile class useing javac dynamically raise following warning:
```
Struct1692375449453.java:2: warning: Can't initialize javac processor due to (most likely) a class loader problem: java.lang.NoClassDefFoundError: com/sun/tools/javac/processing/JavacProcessingEnvironment
public final class Struct1692375449453 implements java.io.Serializable {
             ^
        at lombok.javac.apt.LombokProcessor.getJavacProcessingEnvironment(LombokProcessor.java:436)
        at lombok.javac.apt.LombokProcessor.init(LombokProcessor.java:94)
        at lombok.core.AnnotationProcessor$JavacDescriptor.want(AnnotationProcessor.java:160)
        at lombok.core.AnnotationProcessor.init(AnnotationProcessor.java:213)
        at lombok.launch.AnnotationProcessorHider$AnnotationProcessor.init(AnnotationProcessor.java:64)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState.<init>(JavacProcessingEnvironment.java:508)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.next(JavacProcessingEnvironment.java:605)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:698)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1043)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1184)
        at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)
        at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)
        at com.sun.tools.javac.main.Main.compile(Main.java:523)
        at com.sun.tools.javac.main.Main.compile(Main.java:381)
        at com.sun.tools.javac.main.Main.compile(Main.java:370)
        at com.sun.tools.javac.main.Main.compile(Main.java:361)
        at com.sun.tools.javac.Main.compile(Main.java:74)
        at com.sun.tools.javac.api.JavacTool.run(JavacTool.java:237)
        at io.fury.test.bean.Struct.createStructClass(Struct.java:279)
        at io.fury.test.bean.Struct.createStructClass(Struct.java:266)
        at io.fury.test.bean.StructTest.testStruct(StructTest.java:26)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
        at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
        at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
        at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
        at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
        at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
        at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
        at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
        at java.util.ArrayList.forEach(ArrayList.java:1259)
        at org.testng.TestRunner.privateRun(TestRunner.java:808)
        at org.testng.TestRunner.run(TestRunner.java:603)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
        at org.testng.SuiteRunner.run(SuiteRunner.java:326)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
        at org.testng.TestNG.runSuites(TestNG.java:1092)
        at org.testng.TestNG.run(TestNG.java:1060)
        at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
        at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:110)
        at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
  Caused by: java.lang.ClassNotFoundException: com.sun.tools.javac.processing.JavacProcessingEnvironment
        at java.lang.ClassLoader.findClass(ClassLoader.java:523)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
        at lombok.launch.ShadowClassLoader.loadClass(ShadowClassLoader.java:555)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
        ... 59 more
1 warning

```
**Expected behavior**
No warning

**To Reproduce**
mvn test

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/6c227146-9ba8-4a86-8934-309672b9f28b)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/880/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/882,https://api.github.com/repos/apache/fury/issues/882,fury,1863004855,882,"serial error, java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long",humanmonkey,15273767,,,CLOSED,2023-08-23T10:05:18Z,2023-08-24T12:43:21Z,"1、Unable to identify which field has the problem。

2、exception：
`java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long
  at com.taobao.adapter.common.dataobject.trade.AbilityResultTOFuryRefCodec_274866609_772574458_1685137613.writeFields8$(AbilityResultTOFuryRefCodec_274866609_772574458_1685137613.java:777)
  at com.taobao.adapter.common.dataobject.trade.AbilityResultTOFuryRefCodec_274866609_772574458_1685137613.write(AbilityResultTOFuryRefCodec_274866609_772574458_1685137613.java:1571)
  at com.taobao.adapter.common.dataobject.trade.AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.writeClassAndObject2$(AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.java:159)
  at com.taobao.adapter.common.dataobject.trade.AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.writeFields2$(AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.java:198)
  at com.taobao.adapter.common.dataobject.trade.AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.write(AbilityResultTOGroupFuryRefCodec_274866609_772574458_1511574987.java:291)
  at com.alibaba.delivery.logistics.entity.params.targets.DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.writeClassAndObject35$(DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.java:1824)
  at com.alibaba.delivery.logistics.entity.params.targets.DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.writeFields19$(DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.java:1852)
  at com.alibaba.delivery.logistics.entity.params.targets.DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.write(DeliveryCarrierDTOFuryRefCodec_274866609_772574458_1253138594.java:2866)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.writeClassAndObject9$(DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.java:371)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.writeFields3$(DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.java:398)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.write(DeliveryCarrierDOFuryRefCodec_274866609_772574458_314439946.java:904)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.writeClassAndObject12$(DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.java:554)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.writeFields5$(DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.java:593)
  at com.alibaba.delivery.logistics.entity.core.targets.DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.write(DeliveryPackageDOFuryRefCodec_274866609_772574458_1023687807.java:1774)
  at io.fury.Fury.writeData(Fury.java:457)
  at io.fury.Fury.writeReferencableToJava(Fury.java:272)
  at io.fury.Fury.serializeInternal(Fury.java:243)
  at io.fury.Fury.serialize(Fury.java:180)
  at io.fury.Fury.serialize(Fury.java:173)
  at io.fury.ThreadSafeFury.serialize(ThreadSafeFury.java:50)
  at com.alibaba.delivery.logistics.common.utils.FuryUtil.serialize(FuryUtil.java:16)

3、 code:
 byte[] DeliveryPackageDOByte = FuryUtil.serialize(deliveryPackageDO);

public class FuryUtil {

    private static ThreadSafeFury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .withReferenceTracking(true)
            .disableSecureMode()
            .buildThreadSafeFury();

    public static byte[] serialize(Object obj){
        return fury.serialize(obj);
    }
}
","{""url"": ""https://api.github.com/repos/apache/fury/issues/882/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/882,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ktpoc,fury,1689688604,882,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-23T10:14:13Z,2023-08-23T10:14:13Z,Is the class consistent between serialization and deserialization peer?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ktpoc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/882,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ktrcS,fury,1689696018,882,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-23T10:19:07Z,2023-08-23T10:19:07Z,Could you share your class definition here? A minimal reproduction example will be better to figure out what happened,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ktrcS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/882,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5k09e3,fury,1691604919,882,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-24T12:43:21Z,2023-08-24T12:43:21Z,The user data has a bug which escape the Java generics,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5k09e3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/884,https://api.github.com/repos/apache/fury/issues/884,fury,1869123973,884,ModuleNotFoundError: No module named 'pyfury.lib.mmh3.mmh3',codingl2k1,138426806,,,CLOSED,2023-08-28T07:07:34Z,2023-08-31T08:48:36Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

After `pip install pyfury`, import pyfury failed:

```python
Python 3.9.18 (main, Aug 28 2023, 07:00:41)
[GCC 10.4.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import pyfury
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/codingl2k1/.pyenv/versions/3.9.18/lib/python3.9/site-packages/pyfury/__init__.py"", line 15, in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
  File ""/home/codingl2k1/.pyenv/versions/3.9.18/lib/python3.9/site-packages/pyfury/lib/__init__.py"", line 15, in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
  File ""/home/codingl2k1/.pyenv/versions/3.9.18/lib/python3.9/site-packages/pyfury/lib/mmh3/__init__.py"", line 15, in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
ModuleNotFoundError: No module named 'pyfury.lib.mmh3.mmh3'
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/884/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/884,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lPRWr,fury,1698502059,884,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-30T05:10:45Z,2023-08-30T05:10:45Z,"Which pyfury version are you using? I tested on my local machine, works fine:
![image](https://github.com/alipay/fury/assets/12445254/53aabb1b-363f-46e7-a2da-bf5f7557c1b5)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lPRWr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/884,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lPSHU,fury,1698505172,884,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-08-30T05:15:01Z,2023-08-30T05:15:01Z,"@codingl2k1 Macos version included the mmh3 shared library, but linux version missed this file. Thanks for creating this issue, I'll release a new version to fix this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lPSHU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/886,https://api.github.com/repos/apache/fury/issues/886,fury,1872910887,886,[Java] print exception for fury init,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-30T05:06:54Z,2023-08-30T05:11:38Z,"## Is your feature request related to a problem? Please describe.
Create Fury and print exception when failed. Many application will create fury as a static variable, Fury creation exception will be swallowed by NoClassDefFoundError.

For such cases, users need to warp fury init by try catch, which is tedious:
![image](https://github.com/alipay/fury/assets/12445254/1981a07c-c8ca-4190-986b-99654b8ef87f)


","{""url"": ""https://api.github.com/repos/apache/fury/issues/886/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/888,https://api.github.com/repos/apache/fury/issues/888,fury,1873053127,888,[Java] remove getCurrentFury API,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-30T07:03:58Z,2023-08-30T07:12:23Z,"## Is your feature request related to a problem? Please describe.
`ThreadSafeFury#getCurrentFury` is misused frequently to register class :
```java
ThreadSafeFury#getCurrentFury().register();
```
This is not right, users should use
```java
new ThreadLocalFury(classloader -> {
  Fury f = Fury.builder.withClassLoader(classloader).build();
  f.register(X.class);
  return f;
}
```
## Describe the solution you'd like
Remove `getCurrentFury`  API
","{""url"": ""https://api.github.com/repos/apache/fury/issues/888/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/891,https://api.github.com/repos/apache/fury/issues/891,fury,1873986802,891,[Java] Allow customize which classes are allowed for serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-08-30T16:12:29Z,2023-08-31T06:04:37Z,"## Is your feature request related to a problem? Please describe.
Currently fury control class serialization by class registration. If a class is registered, it's allow for serializaiton, otherwise it's refused for serialziation unless class regisgtration check is disabled.

This mechanism is not flexible enough. We should add more fine-grained methods to control which classes are allowed for serialization.

## Describe the solution you'd like
- Add a class checker api to let users to control which class are allowed for serialization.
- Add a whilte/black list checker implementation.","{""url"": ""https://api.github.com/repos/apache/fury/issues/891/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/896,https://api.github.com/repos/apache/fury/issues/896,fury,1879400636,896,[Java] support immutable collection/map jit and generics optimization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-09-04T02:31:26Z,2023-09-04T02:36:02Z,"## Is your feature request related to a problem? Please describe.
We optimized guava serialization in #750. But #750 didn't use collection/map generics since guava immutable collection is conflict with fury collection/map abstraction, which needs to create collection/map and tracking reference first.

JDK 17  immutable collection/map have similar issue.

## Describe the solution you'd like
Make `newMap/newCollection` return an Intermediate collection/map, and add `onMapRead/onCollectionRead` method to return final object.

## Additional context
#750","{""url"": ""https://api.github.com/repos/apache/fury/issues/896/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/898,https://api.github.com/repos/apache/fury/issues/898,fury,1879414866,898,[Java] cache generated guava constructor,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-09-04T02:49:38Z,2023-09-04T02:53:15Z,"## Is your feature request related to a problem? Please describe.
In #750, we generated guava constructor every time create fury serializer, those constructor should be shared across all fury instance to reduce class generation and metaspace overhead.


## Additional context
#750","{""url"": ""https://api.github.com/repos/apache/fury/issues/898/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/899,https://api.github.com/repos/apache/fury/issues/899,fury,1879552590,899,[<Fury component: Java|Python|C++|JavaScript|etc...>] ,Itz-hariom-kumar,143578238,Hariom,,CLOSED,2023-09-04T05:47:46Z,2023-09-04T05:48:02Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/899/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/902,https://api.github.com/repos/apache/fury/issues/902,fury,1883129028,902,[Java] Integrating Redis occurs an ArrayIndexOutOfBoundsException,YxYL6125,91076160,YxYL,,CLOSED,2023-09-06T03:45:54Z,2023-09-09T06:35:46Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
When I integrated redis and used fury's serialization, I used the deserialize method to deserialize the bytes[] I got from redis, and an ArrayIndexOutOfBoundsException occurred.

**Expected behavior**
hope that after getting byte[], I can successfully deserialize it into Objectu

Below is my code：

```java
	public Object getWithFury(String key) {
		if (key == null) {
			return null;
		} else {
			byte[] bytes = objectToBytes(redisTemplate.opsForValue().get(key));
			if (bytes == null) {
				return null;
			}
			return fury.deserialize(bytes);
		}
	}

	public boolean setWithFury(String key, Object value, long time) {
		try {
			redisTemplate.opsForValue().set(key, fury.serialize(value), time, TimeUnit.SECONDS);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	private byte[] objectToBytes(Object obj) {
		if (obj == null) {
			return null;
		}
		byte[] bytes = null;
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		ObjectOutputStream sOut;
		try {
			sOut = new ObjectOutputStream(out);
			sOut.writeObject(obj);
			sOut.flush();
			bytes = out.toByteArray();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return bytes;
	}


	@Override
	public List<SchoolInfo> getSchoolInfo(SchoolInfoReq req) {
		//...
		String schoolInfoKey = RedisKey.RedisConstructor.getSchoolInfoKey(qxdm, schoolType, degreeType);

		List<SchoolInfo> schoolInfoRes = (List<SchoolInfo>) redisUtil.getWithFury(schoolInfoKey);
		if (schoolInfoRes == null || schoolInfoRes.size() == 0) {
            //...
			schoolInfoRes = schoolInfoMapper.getSchoolInfoByQxdm(qxdm, convertedType, convertedDegree);
			redisUtil.setWithFury(schoolInfoKey, schoolInfoRes, KEY_TIME_ONE_DAY);
		}

		return schoolInfoRes;
	}
```



Then the code goes wrong here

![image-20230906114512301](https://raw.githubusercontent.com/YxYL6125/imgBad/main/img/image-20230906114512301.png)





## My Env

- JDK17

- ```xml
  <dependency>
      <groupId>org.furyio</groupId>
      <artifactId>fury-core</artifactId>
      <version>0.1.1</version>
   </dependency>
  ```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/902/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/902,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lyFKq,fury,1707627178,902,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-06T04:11:32Z,2023-09-06T04:11:32Z,"@YxYL6125 Thanks for submitting this issue. Could you provide a reproduction code here? it's hard to locate what's wrong without the code.

Without the code, here are some cases which may cause this exception:
- In a multi-threaded scenario, you created and used single `Fury` across threads instead of `ThreadSafeFury`
- Classes of serialization data are different between serialization and deserialization peer, but you didn't set `FuryBuilder#withCompitibleMode` ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5lyFKq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/902,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEabK,fury,1712432842,902,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-09T06:35:46Z,2023-09-09T06:35:46Z,No code for reproduce,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEabK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/903,https://api.github.com/repos/apache/fury/issues/903,fury,1886844826,903,fury can be used on chrome or edge?,chongtianfeiyu,2059393,,,OPEN,2023-09-08T02:42:41Z,2023-09-09T06:33:49Z,"## Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/903/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/903,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaW3,fury,1712432567,903,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-09T06:33:49Z,2023-09-09T06:33:49Z,We do support javascript on nodejs and chrome. @wangweipeng2 can share more details.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaW3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/904,https://api.github.com/repos/apache/fury/issues/904,fury,1887504200,904,[java] Fury not support serialization of private interface lambda ? ,ye-xiaowei,60205491,,,CLOSED,2023-09-08T11:34:50Z,2023-09-09T06:35:09Z,"fury version: 0.1.1
jdk version: 11

When I am serializing the code below
```java
public class TestClass implements Serializable {
    private interface A extends Serializable {
        void t();
    }
    private A a = () -> {
    };
}
```

> java.lang.RuntimeException: java.lang.RuntimeException: Create compatible serializer failed, 
> class: class link.yxw.entity.custom.TestClass
>
> 	at link.yxw.marshaller.fury.FuryMarshaller.serialize(FuryMarshaller.java:36)
> 	at link.yxw.DataTest.testDataMarshaller(DataTest.java:49)
> 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
> 	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
> 	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
> 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
> 	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
> 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
> 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
> 	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
> 	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
> 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
> 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
> 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
> 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
> 	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
> 	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
> 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
> 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
> 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
> 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
> 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
> 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:142)
> 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:110)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
> 	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)
> 	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
> 	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
> 	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
> 	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
> 	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
> 	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
> 	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
> 	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
> 	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
> 	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
> 	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
> 	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)
> 	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
> 	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
> 	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
> 	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
> 	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
> 	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
> 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:110)
> 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:44)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
> 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
> 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
> 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
> 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
> 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
> 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
> 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
> 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
> 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
> 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
> 	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
> 	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
> 	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
> 	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
> 	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
> 	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
> 	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
> 	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
> 	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
> 	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
> 	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
> 	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
> 	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
> Caused by: java.lang.RuntimeException: Create compatible serializer failed, 
> class: class link.yxw.entity.custom.TestClass
> 	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:56)
> 	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:872)
> 	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
> 	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:867)
> 	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:811)
> 	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:720)
> 	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1067)
> 	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1009)
> 	at io.fury.Fury.writeRef(Fury.java:282)
> 	at io.fury.Fury.serialize(Fury.java:234)
> 	at io.fury.Fury.serialize(Fury.java:253)
> 	at io.fury.Fury.serialize(Fury.java:247)
> 	at link.yxw.marshaller.fury.FuryMarshaller.serialize(FuryMarshaller.java:32)
> 	... 127 more
> Caused by: java.lang.IllegalArgumentException: Field type should be public for codegen-based access
> 	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:143)
> 	at io.fury.builder.CodecBuilder.getFieldValue(CodecBuilder.java:110)
> 	at io.fury.builder.CompatibleCodecBuilder.lambda$null$8f405a5f$1(CompatibleCodecBuilder.java:246)
> 	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:48)
> 	at io.fury.builder.CompatibleCodecBuilder.lambda$invokeGenerated$0(CompatibleCodecBuilder.java:148)
> 	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1134)
> 	at io.fury.builder.CompatibleCodecBuilder.invokeGenerated(CompatibleCodecBuilder.java:146)
> 	at io.fury.builder.CompatibleCodecBuilder.lambda$null$a043d8ba$4(CompatibleCodecBuilder.java:243)
> 	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:48)
> 	at io.fury.builder.CompatibleCodecBuilder.lambda$buildEncodeExpression$4(CompatibleCodecBuilder.java:229)
> 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
> 	at io.fury.builder.CompatibleCodecBuilder.buildEncodeExpression(CompatibleCodecBuilder.java:226)
> 	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:182)
> 	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
> 	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
> 	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:65)
> 	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:141)
> 	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:89)
> 	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:62)
> 	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:54)
> 	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:53)
> 	... 139 more","{""url"": ""https://api.github.com/repos/apache/fury/issues/904/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/904,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaUS,fury,1712432402,904,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-09T06:32:40Z,2023-09-09T06:32:40Z,"@ye-xiaowei Thanks for contributing this issue. I can reproduce it in my local machine, I fixed it in #907 . Could you  try it again using snapshot version? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaUS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/904,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaZx,fury,1712432753,904,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-09T06:35:08Z,2023-09-09T06:35:08Z,Please reopen it again if it doesn't work,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mEaZx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/906,https://api.github.com/repos/apache/fury/issues/906,fury,1888599193,906,[Java] Fury jit serialize private package-level fields failed,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-09-09T06:22:43Z,2023-09-10T04:29:41Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
```java
java.lang.RuntimeException: Create sequential serializer failed, 
class: class io.fury.serializer.CodegenSerializerTest$TestClass1

	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:46)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:870)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:868)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:823)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:735)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1079)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1021)
	at io.fury.Fury.writeRef(Fury.java:284)
	at io.fury.Fury.serialize(Fury.java:236)
	at io.fury.Fury.serialize(Fury.java:184)
	at io.fury.FuryTestBase.serDe(FuryTestBase.java:201)
	at io.fury.serializer.CodegenSerializerTest.testPrivateInterfaceField(CodegenSerializerTest.java:274)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
Caused by: io.fury.codegen.CodegenException: Compile error: 
io.fury.serializer.CodegenSerializerTest_TestClass1FuryCodec_535260350_622488023_1897115967:
/* 0001 */ package io.fury.serializer;
/* 0002 */ 
/* 0003 */ import java.util.List;
/* 0004 */ import java.util.Map;
/* 0005 */ import java.util.Set;
/* 0006 */ import io.fury.Fury;
/* 0007 */ import io.fury.memory.MemoryBuffer;
/* 0008 */ import io.fury.resolver.NoRefResolver;
/* 0009 */ import io.fury.resolver.ClassInfo;
/* 0010 */ import io.fury.resolver.ClassInfoCache;
/* 0011 */ import io.fury.resolver.ClassResolver;
/* 0012 */ import io.fury.builder.Generated;
/* 0013 */ import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0014 */ import io.fury.serializer.Serializers.EnumSerializer;
/* 0015 */ import io.fury.serializer.Serializer;
/* 0016 */ import io.fury.serializer.StringSerializer;
/* 0017 */ import io.fury.serializer.ObjectSerializer;
/* 0018 */ import io.fury.serializer.CompatibleSerializer;
/* 0019 */ import io.fury.serializer.CollectionSerializers.CollectionSerializer;
/* 0020 */ import io.fury.serializer.MapSerializers.MapSerializer;
/* 0021 */ import io.fury.builder.Generated.GeneratedObjectSerializer;
/* 0022 */ 
/* 0023 */ public final class CodegenSerializerTest_TestClass1FuryCodec_535260350_622488023_1897115967 extends GeneratedObjectSerializer {
/* 0024 */ 
/* 0025 */   private final NoRefResolver refResolver;
/* 0026 */   private final ClassResolver classResolver;
/* 0027 */   private final StringSerializer strSerializer;
/* 0028 */   private final Fury fury;
/* 0029 */   private ClassInfo privateInterfaceClassInfo;
/* 0030 */   private final ClassInfoCache privateInterfaceClassInfoCache;
/* 0031 */ 
/* 0032 */   public CodegenSerializerTest_TestClass1FuryCodec_535260350_622488023_1897115967(Fury fury, Class classType) {
/* 0033 */       super(fury, classType);
/* 0034 */       this.fury = fury;
/* 0035 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0036 */   
/* 0037 */       io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0038 */       refResolver = ((NoRefResolver)refResolver0);
/* 0039 */       classResolver = fury.getClassResolver();
/* 0040 */       strSerializer = fury.getStringSerializer();
/* 0041 */       privateInterfaceClassInfo = classResolver.nilClassInfo();
/* 0042 */       privateInterfaceClassInfoCache = classResolver.nilClassInfoCache();
/* 0043 */   }
/* 0044 */ 
/* 0045 */   private void writeClassAndObject(MemoryBuffer memoryBuffer, Object object) {
/* 0046 */       ClassResolver classResolver = this.classResolver;
/* 0047 */       Class value = privateInterfaceClassInfo.getCls();
/* 0048 */       Class cls = object.getClass();
/* 0049 */       if ((value != cls)) {
/* 0050 */           privateInterfaceClassInfo = classResolver.getClassInfo(cls);
/* 0051 */       }
/* 0052 */       short value1 = privateInterfaceClassInfo.getClassId();
/* 0053 */       if ((value1 == ((short)0))) {
/* 0054 */           memoryBuffer.writeByte(((byte)0));
/* 0055 */           classResolver.writeEnumStringBytes(memoryBuffer, privateInterfaceClassInfo.getPackageNameBytes());
/* 0056 */           classResolver.writeEnumStringBytes(memoryBuffer, privateInterfaceClassInfo.getClassNameBytes());
/* 0057 */       } else {
/* 0058 */           int value2 = memoryBuffer.writerIndex();
/* 0059 */           memoryBuffer.increaseWriterIndex(3);
/* 0060 */           memoryBuffer.unsafePut(value2, ((byte)1));
/* 0061 */           memoryBuffer.unsafePutShort((value2 + 1), value1);
/* 0062 */       }
/* 0063 */       privateInterfaceClassInfo.getSerializer().write(memoryBuffer, object);
/* 0064 */   }
/* 0065 */ 
/* 0066 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0067 */       io.fury.serializer.CodegenSerializerTest.TestClass1 testClass11 = (io.fury.serializer.CodegenSerializerTest.TestClass1)obj;
/* 0068 */       buffer.writeInt(400225588);
/* 0069 */       Object object10 = io.fury.serializer.CodegenSerializerTest_TestClass1FuryAccessor_622488023_1897115967.a(testClass11);
/* 0070 */       if ((object10 == null)) {
/* 0071 */           buffer.writeByte(((byte)-3));
/* 0072 */       } else {
/* 0073 */           buffer.writeByte(((byte)0));
/* 0074 */           this.writeClassAndObject(buffer, object10);
/* 0075 */       }
/* 0076 */   }
/* 0077 */ 
/* 0078 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0079 */       ObjectSerializer.checkClassVersion(fury, buffer.readInt(), 400225588);
/* 0080 */       io.fury.serializer.CodegenSerializerTest.TestClass1 testClass12 = new io.fury.serializer.CodegenSerializerTest.TestClass1();
/* 0081 */       refResolver.reference(testClass12);
/* 0082 */       if ((buffer.readByte() != ((byte)-3))) {
/* 0083 */           io.fury.serializer.CodegenSerializerTest_TestClass1FuryAccessor_622488023_1897115967.a(testClass12, classResolver.readClassInfo(buffer, privateInterfaceClassInfoCache).getSerializer().read(buffer));
/* 0084 */       } else {
/* 0085 */           io.fury.serializer.CodegenSerializerTest_TestClass1FuryAccessor_622488023_1897115967.a(testClass12, null);
/* 0086 */       }
/* 0087 */       return testClass12;
/* 0088 */   }
/* 0089 */ 
/* 0090 */ }
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:127)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:65)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:141)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:89)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:40)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:43)
	... 39 more
Caused by: org.codehaus.commons.compiler.CompileException: File 'io/fury/serializer/CodegenSerializerTest_TestClass1FuryCodec_535260350_622488023_1897115967.java', Line 83, Column 98: No applicable constructor/method found for actual parameters ""io.fury.serializer.CodegenSerializerTest$TestClass1, java.lang.Object""; candidates are: ""public static void io.fury.serializer.CodegenSerializerTest_TestClass1FuryAccessor_622488023_1897115967.a(io.fury.serializer.CodegenSerializerTest$TestClass1, io.fury.serializer.CodegenSerializerTest$PrivateInterface)"", ""public static io.fury.serializer.CodegenSerializerTest$PrivateInterface io.fury.serializer.CodegenSerializerTest_TestClass1FuryAccessor_622488023_1897115967.a(io.fury.serializer.CodegenSerializerTest$TestClass1)""
	at org.codehaus.janino.UnitCompiler.compileError(UnitCompiler.java:12211)
	at org.codehaus.janino.UnitCompiler.findMostSpecificIInvocable(UnitCompiler.java:9263)
	at org.codehaus.janino.UnitCompiler.findIMethod(UnitCompiler.java:9123)
	at org.codehaus.janino.UnitCompiler.findIMethod(UnitCompiler.java:9025)
	at org.codehaus.janino.UnitCompiler.compileGet2(UnitCompiler.java:5062)
	at org.codehaus.janino.UnitCompiler.access$9100(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$16.visitMethodInvocation(UnitCompiler.java:4423)
	at org.codehaus.janino.UnitCompiler$16.visitMethodInvocation(UnitCompiler.java:4396)
	at org.codehaus.janino.Java$MethodInvocation.accept(Java.java:5073)
	at org.codehaus.janino.UnitCompiler.compileGet(UnitCompiler.java:4396)
	at org.codehaus.janino.UnitCompiler.compileGetValue(UnitCompiler.java:5662)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:3783)
	at org.codehaus.janino.UnitCompiler.access$5900(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$13.visitMethodInvocation(UnitCompiler.java:3762)
	at org.codehaus.janino.UnitCompiler$13.visitMethodInvocation(UnitCompiler.java:3734)
	at org.codehaus.janino.Java$MethodInvocation.accept(Java.java:5073)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3734)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2360)
	at org.codehaus.janino.UnitCompiler.access$1800(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitExpressionStatement(UnitCompiler.java:1494)
	at org.codehaus.janino.UnitCompiler$6.visitExpressionStatement(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$ExpressionStatement.accept(Java.java:2874)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1567)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:1553)
	at org.codehaus.janino.UnitCompiler.access$1700(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitBlock(UnitCompiler.java:1493)
	at org.codehaus.janino.UnitCompiler$6.visitBlock(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$Block.accept(Java.java:2779)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2465)
	at org.codehaus.janino.UnitCompiler.access$1900(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$6.visitIfStatement(UnitCompiler.java:1495)
	at org.codehaus.janino.UnitCompiler$6.visitIfStatement(UnitCompiler.java:1487)
	at org.codehaus.janino.Java$IfStatement.accept(Java.java:2950)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1487)
	at org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1567)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3388)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1357)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1330)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:822)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:432)
	at org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:215)
	at org.codehaus.janino.UnitCompiler$2.visitPackageMemberClassDeclaration(UnitCompiler.java:411)
	at org.codehaus.janino.UnitCompiler$2.visitPackageMemberClassDeclaration(UnitCompiler.java:406)
	at org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1414)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:406)
	at org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:378)
	at org.codehaus.janino.Compiler.compile(Compiler.java:532)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:107)
	... 44 more


```
**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
```java
private interface PrivateInterface extends Serializable {
    void t();
  }

  public static class TestClass1 {
    PrivateInterface a = () -> {};
  }

  @Test
  public void testPrivateInterfaceField() {
    Fury fury = Fury.builder().requireClassRegistration(false).build();
    serDe(fury, new TestClass1());
  }
```

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/906/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/909,https://api.github.com/repos/apache/fury/issues/909,fury,1892114055,909,Python AttributeError: Can't pickle local object,codingl2k1,138426806,,,CLOSED,2023-09-12T09:47:25Z,2023-09-17T10:21:34Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

```python
  File ""python/pyfury/_serialization.pyx"", line 862, in pyfury._serialization.Fury.serialize
  File ""python/pyfury/_serialization.pyx"", line 907, in pyfury._serialization.Fury._serialize
  File ""python/pyfury/_serialization.pyx"", line 953, in pyfury._serialization.Fury.serialize_ref
  File ""python/pyfury/_serialization.pyx"", line 2260, in pyfury._serialization.PickleSerializer.write
  File ""python/pyfury/_serialization.pyx"", line 1199, in pyfury._serialization.Fury.handle_unsupported_write
AttributeError: Can't pickle local object 'DataFrameSum.get_reduction_callable.<locals>.sum_'
```
fury use pickle instead of cloudpickle, some object can't be pickled.

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/909/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/909,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqmrN,fury,1722444493,909,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-17T10:19:51Z,2023-09-17T10:19:51Z,"hi @codingl2k1 , thanks for contributing to fury by submit this issue, I fixed it in https://github.com/alipay/fury/pull/914 , could you try it again?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqmrN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/910,https://api.github.com/repos/apache/fury/issues/910,fury,1898092432,910,How to clone bean?,zhenrenbumeng,136045810,,,CLOSED,2023-09-15T09:52:20Z,2023-09-25T03:20:44Z,"I want to clonet bean from ClassA to Class.
But I got error when using fury：`Read class null version 554680066 is not consistent with -454615571`

How to clone bean from ClassA to ClassB using fury?
```
public class Fury3 {
    public static void main(String[] args) {

        ClassA objectA = new ClassA();
        objectA.setName(""张三"");
        objectA.setAge(16);
        objectA.setAa(""aa"");

        Fury fury = Fury.builder().withLanguage(Language.JAVA).build();
        fury.register(ClassA.class);
        fury.register(ClassB.class);

        byte[] bytes = fury.serializeJavaObject(objectA);
        ClassB objectB = fury.deserializeJavaObject(bytes, ClassB.class);
        System.out.println(JSONObject.toJSONString(objectB));
    }
}
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/910/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/910,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mmmGU,fury,1721393556,910,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-15T14:40:49Z,2023-09-15T14:40:49Z,"Seems your code is wrong, the bytes is the data for ClassA, but you passed ClassB when deserializing
maybe ?:
```java
        ClassA objectA = fury.deserializeJavaObject(bytes, ClassA.class);
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mmmGU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/910,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mroM4,fury,1722712888,910,NA,zhenrenbumeng,136045810,,,NA,2023-09-18T03:42:26Z,2023-09-18T03:42:26Z,"> Seems your code is wrong, the bytes is the data for ClassA, but you passed ClassB when deserializing maybe ?:
> 
> ```java
>         ClassA objectA = fury.deserializeJavaObject(bytes, ClassA.class);
> ```

I want to get a ClassB entity from ClassA, the only question is how to do this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mroM4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/910,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nEsjy,fury,1729284338,910,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-21T10:21:18Z,2023-09-21T10:21:18Z,"@zhenrenbumeng Could you try `CompatibleMode`?
```java
        Fury fury = Fury.builder().withLanguage(Language.JAVA).withCompatibleMode(CompatibleMode.Compatible).build();
```

If schema of `ClassB ` arre different from `ClassA`, then  default mode deserialization will raise error.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nEsjy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/910,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nSRV7,fury,1732842875,910,NA,zhenrenbumeng,136045810,,,NA,2023-09-25T03:20:24Z,2023-09-25T03:20:24Z,"> @zhenrenbumeng Could you try `CompatibleMode`?
> 
> ```java
>         Fury fury = Fury.builder().withLanguage(Language.JAVA).withCompatibleMode(CompatibleMode.Compatible).build();
> ```
> 
> If schema of `ClassB ` arre different from `ClassA`, then default mode deserialization will raise error.

It works. Thank you very much.

```
        ClassA objectA = new ClassA();
        objectA.setName(""张三"");
        objectA.setAge(16);
        objectA.setClassAAttr(""classAAttr"");
        objectA.setMap(ofHashMap(""k1"", ""v1"", ""k2"", ""v2""));
        objectA.setList(Arrays.asList(""a"", ""b"", ""c"", ""d"", ""e"", ""f""));

        Fury fury = Fury.builder().withLanguage(Language.JAVA).withCompatibleMode(CompatibleMode.COMPATIBLE).build();
        fury.register(ClassA.class);
        fury.register(ClassB.class);


        byte[] bytes = fury.serializeJavaObject(objectA);
        ClassB objectB = fury.deserializeJavaObject(bytes, ClassB.class);
        System.out.println(JSONObject.toJSONString(objectB));
        //    {""age"":16,""list"":[""a"",""b"",""c"",""d"",""e"",""f""],""map"":{""k1"":""v1"",""k2"":""v2""},""name"":""张三""}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nSRV7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/911,https://api.github.com/repos/apache/fury/issues/911,fury,1899362290,911,"Create compatible serializer failed, can't get field offset on a record class",cdxf,6419729,,,CLOSED,2023-09-16T08:55:10Z,2023-09-17T08:55:07Z,"**Describe the bug**
Can't serialize with-args constructor Java record

**To Reproduce**
```
(Run and compiled with JDK 19, have not tried other versions)
- Fury 0.1.1

public class TestFury {
    public record Test(List<String> list) {
    }
    public static void main(String[] args) {
        Fury f = Fury.builder()
                .requireClassRegistration(false)
                .withRefTracking(true)
                .withAsyncCompilation(true)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withLanguage(Language.JAVA).build();
        f.serialize(new Test(List.of()));
    }
}
```
Call stack:
```
Exception in thread ""main"" java.lang.UnsupportedOperationException: can't get field offset on a record class: private final java.util.List com.TestFury$Test.test
	at jdk.unsupported/sun.misc.Unsafe.objectFieldOffset(Unsafe.java:655)
	at io.fury.util.UnsafeFieldAccessor.<init>(UnsafeFieldAccessor.java:45)
	at io.fury.resolver.FieldResolver$FieldInfo.<init>(FieldResolver.java:720)
	at io.fury.resolver.FieldResolver$CollectionFieldInfo.<init>(FieldResolver.java:869)
	at io.fury.resolver.FieldResolver$FieldInfo.of(FieldResolver.java:750)
	at io.fury.resolver.FieldResolver.<init>(FieldResolver.java:310)
	at io.fury.resolver.FieldResolver.of(FieldResolver.java:199)
	at io.fury.resolver.FieldResolver.of(FieldResolver.java:188)
	at io.fury.resolver.ClassResolver.getFieldResolver(ClassResolver.java:922)
	at io.fury.serializer.CompatibleSerializer.<init>(CompatibleSerializer.java:68)
	at io.fury.serializer.Serializers.newSerializer(Serializers.java:61)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1068)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1009)
	at io.fury.Fury.writeRef(Fury.java:282)
	at io.fury.Fury.serialize(Fury.java:234)
	at io.fury.Fury.serialize(Fury.java:182)
	at com.TestFury.main(TestFury.java:19)
java.lang.RuntimeException: Create compatible serializer failed, 
class: class com.TestFury$Test
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:56)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:872)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:75)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.UnsupportedOperationException: can't get field offset on a record class: private final java.util.List com.TestFury$Test.test
	at jdk.unsupported/sun.misc.Unsafe.objectFieldOffset(Unsafe.java:655)
	at io.fury.util.UnsafeFieldAccessor.<init>(UnsafeFieldAccessor.java:45)
	at io.fury.resolver.FieldResolver$FieldInfo.<init>(FieldResolver.java:720)
	at io.fury.resolver.FieldResolver$CollectionFieldInfo.<init>(FieldResolver.java:869)
	at io.fury.resolver.FieldResolver$FieldInfo.of(FieldResolver.java:750)
	at io.fury.resolver.FieldResolver.<init>(FieldResolver.java:310)
	at io.fury.resolver.FieldResolver.of(FieldResolver.java:199)
	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:53)
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:53)
	... 7 more
Exception in thread ""fury-jit-compiler-1"" java.lang.RuntimeException: Create compatible serializer failed, 
class: class com.TestFury$Test
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:56)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:872)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:75)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.UnsupportedOperationException: can't get field offset on a record class: private final java.util.List com.TestFury$Test.test
	at jdk.unsupported/sun.misc.Unsafe.objectFieldOffset(Unsafe.java:655)
	at io.fury.util.UnsafeFieldAccessor.<init>(UnsafeFieldAccessor.java:45)
	at io.fury.resolver.FieldResolver$FieldInfo.<init>(FieldResolver.java:720)
	at io.fury.resolver.FieldResolver$CollectionFieldInfo.<init>(FieldResolver.java:869)
	at io.fury.resolver.FieldResolver$FieldInfo.of(FieldResolver.java:750)
	at io.fury.resolver.FieldResolver.<init>(FieldResolver.java:310)
	at io.fury.resolver.FieldResolver.of(FieldResolver.java:199)
	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:53)
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:53)
	... 7 more
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/911/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/911,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mp5Ba,fury,1722257498,911,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-16T15:48:29Z,2023-09-16T15:48:29Z,"Hi @cdxf , record class has been supported in snapshot version, could you try whether that works?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mp5Ba/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/911,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqY3H,fury,1722387911,911,NA,cdxf,6419729,,,NA,2023-09-17T04:21:12Z,2023-09-17T04:21:12Z,"Thanks, works with snapshot version","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqY3H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/911,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqiwq,fury,1722428458,911,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-17T08:55:07Z,2023-09-17T08:55:07Z,"FYI, we'll release this support in next days.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqiwq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/912,fury,1899654902,912,Why does Fury serialized byte array significantly larger compared to Kryo?,cdxf,6419729,,,CLOSED,2023-09-17T04:42:22Z,2023-10-12T16:46:55Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**

I setup a simple test to compare Fury and Kryo byte array output size:
Result:
- Fury generate 280044 bytes;
- Kryo generate 150030 bytes;

Yes, it is just a simple synthetic benchmark, but in my real use case (real entities using Hibernate), Fury usually generates byte arrays that is 2x larger than Kryo.
I also registered same classes for both Fury and Kryo.

**Expected behavior**
Serialized Byte array should have similar size.

**To Reproduce**

```
public record Student(String name) {
}

public class FurySerializer implements Serializer<Object> {
    private final static Logger logger = LoggerFactory.getLogger(FurySerializer.class);

    private final static ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
        Fury f = Fury.builder()
                .requireClassRegistration(false)
                .withRefTracking(true)
                .withAsyncCompilation(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .withJdkClassSerializableCheck(false)
                .withIntCompressed(true)
                .withLongCompressed(true)
                .withLanguage(Language.JAVA).withClassLoader(classLoader).build();
        configureFury(f);
        return f;
    });
    public FurySerializer(ClassLoader loader) {

    }

    public FurySerializer() {
    }

    private static void configureFury(Fury fury) {
        // Just a list of registered class I am using
    }

    @Override
    public ByteBuffer serialize(Object object) throws SerializerException {
        try {
            byte[] serialize = fury.serialize(object);
            return ByteBuffer.wrap(serialize);
        } catch (Exception e) {
            logger.error(""SerializerException in read"", e);
            throw new SerializerException(""SerializerException in read"");
        }
    }

    @Override
    public Object read(ByteBuffer binary) throws ClassNotFoundException, SerializerException {
        try {
            return fury.deserialize(binary);
        } catch (Exception e) {
            logger.error(""SerializerException in read"", e);
            throw new SerializerException(""SerializerException in read"");
        }
    }

    @Override
    public boolean equals(Object o, ByteBuffer byteBuffer) throws ClassNotFoundException, SerializerException {
        return o.equals(read(byteBuffer));
    }
}


@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class IntegrationTest {
    ArrayList<Student> students;

    @BeforeAll
    public void setup() {
        students = new ArrayList<>(10000);
        for (int i = 0; i < 10000; i++) {
            students.add(new Student(String.valueOf(System.currentTimeMillis())));
        }
    }

    @Test
    public void testFury() {
        FurySerializer furySerializer = new FurySerializer();
        ByteBuffer serialize = furySerializer.serialize(students);
        System.out.println(""Size:"" + serialize.limit());
    }

    @Test
    public void testKryo() {
        KryoSerializer kryoSerializer = new KryoSerializer();
        ByteBuffer serialize = kryoSerializer.serialize(students);
        System.out.println(""Size:"" + serialize.limit());

    }
}

```
**Environment (please complete the following information):**
- JDK 20
- Fury snapshot 0.2.0","{""url"": ""https://api.github.com/repos/apache/fury/issues/912/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqn_H,fury,1722449863,912,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-17T10:52:10Z,2023-09-17T10:52:10Z,"@cdxf This is a known issue, the serialization for collection/map didn't use the possible homogeneous information. For example, all collection elements are not null in most cases and all collection elements are same type mostly. But currently fury didn't use this information. I'm trying to improve it, but the compaibility between  fury jit and interpreter mode take lots of work, it still take some effort before we support this optimization.

And if you serialize IntegrationTest object directly, you will find that it take only `210071` bytes, this is because fury jit can determine the actual element type in advance  since record class is final.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqn_H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqqfX,fury,1722460119,912,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-17T11:54:54Z,2023-09-17T11:54:54Z,"After a detailed test, I found is't caused by Fury class version check, which write 
 4 bytes to validate class consistentcy. If you disable it by `io.fury.Fury.FuryBuilder#withClassVersionCheck(false)`, fury serialized size is about `170067` size, which is close to kryo size.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mqqfX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mquxO,fury,1722477646,912,NA,cdxf,6419729,,,NA,2023-09-17T13:28:36Z,2023-09-17T13:28:36Z,"Thanks for your response, in my case (Hibernate Entities with deep object graph and multiple collections), Kryo still produces smaller byte arrays, but the perf gain is worth the tradeoff. Hope can be improved in further version.

```
Comparison Results:

Fury (withClassVersionCheck enabled):
Size: 232259 bytes
Avg: 0.70916 ms per serialize/deserialize cycle

Fury
Size: 225259 bytes
Avg: 0.69807 ms per serialize/deserialize cycle

Kryo
Size:174611 bytes
Avg: 2.21102 ms per serialize/deserialize cycle
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mquxO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oaJSD,fury,1751684227,912,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-07T11:11:53Z,2023-10-07T11:11:53Z,"@cdxf @trydofor with our optimization in #927 #945, now fury serialized is `170077`, which is smaller than kryo. Please try it out:
```xml
<dependency>
    <groupId>org.furyio</groupId>
    <artifactId>fury-core</artifactId>
    <version>0.2.0-alpha.1</version>
</dependency>
```

`v0.2.0` will be released in next days
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oaJSD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obJ2s,fury,1751948716,912,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-08T07:33:54Z,2023-10-08T07:33:54Z,"`v0.2.0` has been released, pelease try it out.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obJ2s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ozAl-,fury,1758202238,912,NA,cdxf,6419729,,,NA,2023-10-11T17:59:29Z,2023-10-11T17:59:29Z,"I tested again using both Fury 0.2 and snapshot 0.3, same result for both version (using the first example):
```
array size = 10000
Fury Size:170008
Kryo Size:150027

array size = 100000
Fury Size:1700009
Kryo Size:1500027

array size = 1000000
Fury Size:17000009
Kryo Size:15000027
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ozAl-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ozIq-,fury,1758235326,912,NA,cdxf,6419729,,,NA,2023-10-11T18:15:56Z,2023-10-11T18:15:56Z,"The configuration:
```
        Fury f = Fury.builder()
                .requireClassRegistration(false)
                .withRefTracking(true)
                .withAsyncCompilation(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .withClassVersionCheck(false)
                .withJdkClassSerializableCheck(false)
                .withIntCompressed(true)
                .withLongCompressed(true)
                .withLanguage(Language.JAVA).withClassLoader(classLoader).build();
```
Here is the bin file generated from both fury and kryo with array size = 100 in case you are curious
[test.zip](https://github.com/alipay/fury/files/12873331/test.zip)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ozIq-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/912,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o50ka,fury,1759987994,912,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-12T16:46:55Z,2023-10-12T16:46:55Z,"> I tested again using both Fury 0.2 and snapshot 0.3, same result for both version (using the first example):
> 
> ```
> array size = 10000
> Fury Size:170008
> Kryo Size:150027
> 
> array size = 100000
> Fury Size:1700009
> Kryo Size:1500027
> 
> array size = 1000000
> Fury Size:17000009
> Kryo Size:15000027
> ```

Kryo5 disabled reference by defaultl ,maybe you should enable it since you enable it for fury. When it's enabled, fury is 6% larger, kryo optimize ascii string by one byte, it's not good for performance optimization, we have no plan for such optimization. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o50ka/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/916,https://api.github.com/repos/apache/fury/issues/916,fury,1899765165,916,[Java] optimzie struct serialized size by skip class version check,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-09-17T12:19:57Z,2023-09-17T12:21:26Z,"## Is your feature request related to a problem? Please describe.
For class consist mode serialization, fury will write 4 byte class version to validate class consistenceny, so if classes are inconsistent, fury will throw a more readable exception instead of unknown excepption, but it comes with more space cost.

## Describe the solution you'd like
Disable it by default.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/916/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/919,fury,1901030832,919,[Java] when can I use Fury with buffer/storage in production,smalljunHw,38604829,,,OPEN,2023-09-18T14:07:51Z,2023-10-12T16:53:03Z,"The document says
>  We are still improving our protocols, binary compatibility are not ensured between fury releases for now. Please shade fury if you will upgrade fury in the future.
> Binary compatibility will be ensured before fury 1.0.

So is Fury not recommended for production use now if any serialized object is stored in some place, otherwise future Fury release upgrade may cause deserialization problem? 
If so, when binary compatibility will be ensured?","{""url"": ""https://api.github.com/repos/apache/fury/issues/919/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mz8Hi,fury,1724891618,919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-19T06:18:16Z,2023-09-19T06:18:16Z,"Hi @smalljunHw , thanks for opening up this issue. There are three parts of work to be finished before we can ensure binary compatibility:
- Improve collection serialized size by using possiblely homogeneous information in collection elements #912 
- Improve map serialized size by using possiblely homogeneous information in map k/v items
- Implement meta share mode for type compatibility to reduce space cost of kv compatible mode nad improve performance of serialiation by at most 1x #80 .

I'm afraid binary compatibility can't be ensured before we finish this.

If you want to use it for persistent storage, you may need to add a version flag into the stored data, and shade fury by version, so in future you can switch to newer version of fury without breaking binary compatibility.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5mz8Hi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obdZ0,fury,1752028788,919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-08T13:27:46Z,2023-10-08T13:27:46Z,"@smalljunHw I add the doc for upgrade fury when breaking binary compatibility: https://github.com/alipay/fury/blob/main/docs/guide/java_object_graph_guide.md#upgrade-fury

If you use fury by this method,   future Fury release upgrade won't cause deserialization problem. Does this answer your concern?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5obdZ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5odOvt,fury,1752493037,919,NA,Chenhaoqing,4241454,Chenhaoqing,,NA,2023-10-09T07:44:01Z,2023-10-09T07:44:01Z,"Hi @chaokunyang , Can I use ""versioning"" to ensure binary compatibility now?

The description of 

> Binary compatibility will be ensured before fury 1.0.

from [here](https://github.com/alipay/fury#binary-compatibility) is still a little unclear to me.

Thanks for the help.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5odOvt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5odV05,fury,1752522041,919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-09T08:05:43Z,2023-10-09T08:05:43Z,"yes, if you serialize by https://github.com/alipay/fury/blob/main/docs/guide/java_object_graph_guide.md#upgrade-fury 
The binary compatibility can be ensured:
![image](https://github.com/alipay/fury/assets/12445254/2d2b675e-015c-49b3-8157-bab1361f6b82)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5odV05/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5olxY_,fury,1754732095,919,NA,smalljunHw,38604829,,,NA,2023-10-10T08:48:06Z,2023-10-10T08:48:06Z,"> @smalljunHw I add the doc for upgrade fury when breaking binary compatibility: https://github.com/alipay/fury/blob/main/docs/guide/java_object_graph_guide.md#upgrade-fury
> 
> If you use fury by this method, future Fury release upgrade won't cause deserialization problem. Does this answer your concern?

thanks, it has answered my question.
I think binary compatiability is an import issue that needs to be solved as soon as possible. It may be odd without it. 
By the way, according to https://stackoverflow.com/questions/65718/what-do-the-numbers-in-a-version-typically-represent-i-e-v1-9-0-1, for v0.2.1, the major version number is 0 instead of 2, 2 is actually the minor version.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5olxY_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o52u8,fury,1759996860,919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-12T16:53:02Z,2023-10-12T16:53:02Z,"@smalljunHw Thanks for your reminder, the document should be updated for his version naming. As to  binary compatiability, maybe we should add protocol version to data header, and develop a tool for future binary data migration. 

Would you like to collaborate on this? 

If we have protocol version on data, we can load different version of fury based on the protocol. The different fury can be shaded into different package. Or we can create a jar like springboot with a cusom format, and load different fury jar by different URLClassloader. Then use loaded Fury to deserialize the data 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o52u8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/921,https://api.github.com/repos/apache/fury/issues/921,fury,1904759601,921,Questions about Checker in the new version,pandalee99,46820719,PAN,,CLOSED,2023-09-20T11:11:46Z,2023-09-22T02:19:01Z,"Recently, I've been working on sofa-rpc incorporating fury, and the version I've been using is 0.1.0, which has a feature that requires whitelisted classes to be registered.
From the results, its seems to be the same
i make this:
```java
clazz = Class.forName(className);
fury.register(clazz);
```
But in the new version(0.1.1), I found checker
So, I thought about changing the code to:
```java
AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT);
fury.getClassResolver().setClassChecker(checker);
checker.allowClass(className);
```
but I have a few questions:
1, compared with the native way to register, checker will have any characteristics
2, compared with the two, which efficiency will be better? Because checker implementations can be too complex","{""url"": ""https://api.github.com/repos/apache/fury/issues/921/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/921,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nEr28,fury,1729281468,921,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-09-21T10:19:14Z,2023-09-21T10:19:14Z,"@pandalee99 Good question.

## Which to use
`register` need be consistent between all processes, otherwise the deserialization will thown error. For axample, if you have objects of class A and B for serialziation, and process 1 for serialization, process 2 for deserialization. If process1 register A and B, but process 2 only A, then the deserialiation in process2 will fail.

It's easy to keep consistent between processes if all process are in your control such as spark/flink jobs. `Register` is suitable for such cases.

But if you use sofa/dubbo services, different services may have different register order and registered classes. All services will upgreade independently. In such cases, deserialization may raise exception. `checker` should be used for such cases whose registerd classses are different between serialization and deserialization process.

## efficiency
`Register` is more efficient than class checker, because it write classname as an id. For services, we suggest to register common system classes, and let checker to check user classes.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nEr28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/921,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nKJrh,fury,1730714337,921,NA,pandalee99,46820719,PAN,,NA,2023-09-22T02:19:01Z,2023-09-22T02:19:01Z,"Good idea, thanks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5nKJrh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/925,https://api.github.com/repos/apache/fury/issues/925,fury,1920656119,925,[Java][Protocol] Chunk by chunk predictive map serialization protocol,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-01T09:07:47Z,2025-01-26T10:39:50Z,"## Is your feature request related to a problem? Please describe.
Optimize Collection/Map serialization by potential homogenization in elements:
- Collection: elements are all not-empty mostly, and all elements are same type
- Map: all keys are not empty mostly, all keys are same type; all values are not empty mostly, all values are same type.

By using those information, the serialization performance can be enhanced and the size of serialized binary can be smaller.

For collection, we can compute header before serializing elements, since iterating collection is cheap. But for map iteration, it's expensive, it takes same cost as serialization for `Map<Integer, Integer>`.

We need to finish kv writing and header writing in one-round iteration.

## Describe the solution you'd like
Users can use `MapFieldInfo` annotation to provide header in advance. Otherwise Fury will use first key-value pair to
predict header optimistically, and update the chunk header if predict failed at some pair.

Fury will serialize map chunk by chunk, every chunk
has 127 pairs at most.

```
+----------------+----------------+~~~~~~~~~~~~~~~~~+
| chunk size: N  |    KV header   |   N*2 objects   |
+----------------+----------------+~~~~~~~~~~~~~~~~~+
```

KV header:

- If track key ref, use first bit `0b1` of header to flag it.
- If key has null, use second bit `0b10` of header to flag it. If ref tracking is enabled for this
  key type, this flag is invalid.
- If map key type is not declared type, use 3rd bit `0b100` of header to flag it.
- If map key type different, use 4rd bit `0b1000` of header to flag it.
- If track value ref, use 5rd bit `0b10000` of header to flag it.
- If value has null, use 6rd bit `0b100000` of header to flag it. If ref tracking is enabled for this
  value type, this flag is invalid.
- If map value type is not declared type, use 7rd bit `0b1000000` of header to flag it.
- If map value type different, use 8rd bit `0b10000000` of header to flag it.

If streaming write is enabled, which means Fury can't update written `chunk size`. In such cases, map key-value data
format will be:

```
+----------------+~~~~~~~~~~~~~~~~~+
|    KV header   |   N*2 objects   |
+----------------+~~~~~~~~~~~~~~~~~+
```

`KV header` will be header marked by `MapFieldInfo` in java. For languages such as golang, this can be computed in
advance for non-interface type mostly.

## Additional context
#923 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/925/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/925,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vUW91,fury,1867607925,925,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-22T12:04:06Z,2023-12-22T12:04:06Z,"map iteration and serialization benchmark:
```java
  @Benchmark
  public Object computeMapHeader() {
    boolean containKeyNull = false;
    boolean containValueNull = false;
    Class<?> keyClass = null, valueClass = null;
    boolean keySameClass = true;
    boolean valueSameClass = true;
    int count = 0;
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      count++;
      if (key == null) {
        containKeyNull = true;
      } else if (keyClass == null) {
        keyClass = key.getClass();
      } else if (keyClass != key.getClass()) {
        keySameClass = false;
      }
      if (value == null) {
        containValueNull = true;
       } else if (valueClass == null) {
        valueClass = value.getClass();
      } else if (valueClass != value.getClass()) {
        valueSameClass = false;
      }
    }
    return new boolean[] {containKeyNull, keySameClass, containValueNull, valueSameClass, count % 2 != 0};
  }


  @Benchmark
  public Object iterateMap() {
    int count = 0;
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      // hole.consume(key);
      // hole.consume(value);
      count++;
    }
    return count;
  }

  @Benchmark
  public Object serializeMap() {
    buffer.writerIndex(0);
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      fury.writeRef(buffer, key);
      fury.writeRef(buffer, value);
    }
    return buffer;
  }

  @Benchmark
  public Object serializeMap2() {
    buffer.writerIndex(0);
    Map<Integer, Integer> map = (Map) mapForIterating;
    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
      Integer key = entry.getKey();
      Integer value = entry.getValue();
      buffer.writeInt(key);
      buffer.writeInt(value);
    }
    return buffer;
  }

  @Benchmark
  public Object serialize() {
    return Tuple2.of(computeMapHeader(), serializeMap2());
  }

  @Benchmark
  public Object serializeOpt() {
    buffer.writerIndex(0);
    Map<Integer, Integer> map = (Map) mapForIterating;
    boolean containKeyNull = false;
    boolean containValueNull = false;
    Class<?> keyClass = null, valueClass = null;
    boolean keySameClass = true;
    boolean valueSameClass = true;
    int count = 0;
    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
      Integer key = entry.getKey();
      Integer value = entry.getValue();
      count++;
      if (key == null) {
        containKeyNull = true;
      } else if (keyClass == null) {
        keyClass = key.getClass();
      } else if (keyClass != key.getClass()) {
        keySameClass = false;
      }
      if (value == null) {
        containValueNull = true;
      } else if (valueClass == null) {
        valueClass = value.getClass();
      } else if (valueClass != value.getClass()) {
        valueSameClass = false;
      }
      buffer.writeInt(key);
      buffer.writeInt(value);
    }
    return Tuple2.of(new boolean[] {containKeyNull, keySameClass, containValueNull, valueSameClass, count % 2 != 0}, buffer);
  }

```
Iteration is almost slow as write data for a map with size 100.
```text
Benchmark                   Mode  Cnt        Score        Error  Units
MapSuite.computeMapHeader  thrpt   15   962145.162 ±  23937.297  ops/s
MapSuite.iterateMap        thrpt   15  1001955.918 ±  66110.121  ops/s
MapSuite.serialize         thrpt   15   445024.638 ±  65968.399  ops/s
MapSuite.serializeMap      thrpt   15   620651.930 ±  14956.265  ops/s
MapSuite.serializeMap2     thrpt   15   911471.607 ± 123342.194  ops/s
MapSuite.serializeOpt      thrpt   15   919619.780 ±  11398.077  ops/s
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vUW91/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/925,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DCgPh,fury,2198471649,925,NA,Hen1ng,72974271,hn,,NA,2024-06-30T07:56:54Z,2024-06-30T07:56:54Z,"i am interesting in this issue. I have some question :
1. how user use MapFieldInfo annotation to provide header? could you provide some example?
2. Is this class AbstractMapSerializer the file mainly modified by this change 
3. could you assign this issue to me?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DCgPh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/925,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DCuAq,fury,2198528042,925,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-30T11:22:28Z,2024-06-30T11:22:28Z,"1. `MapFieldInfo` is not implemented currently, you can leave it in next PR. The usage is like:
```java
public class Struct {
@MapFieldInfo(keyNullable=false, valueNullable=false);
Map<String, Integer> map;
}
```

2. `AbstractMapSerializer` is the main file, another file is `BaseObjectCodecBuilder`, but that can be left in another PR
3. assigned, thanks for contributing to Apache Fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DCuAq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/926,https://api.github.com/repos/apache/fury/issues/926,fury,1920656190,926,[Java][Protocol] Optimize Container serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-01T09:07:57Z,2023-10-01T09:11:03Z,"## Is your feature request related to a problem? Please describe.
We can't compute map header in advance, since map iteration is slow. For example, iterateList2 is 8x faster than serializeList for a list with size 100:
```java
  @Benchmark
  public Object iterateArray() {
    int count = 0;
    for (Integer o : array) {
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object iterateList() {
    int count = 0;
    for (Integer o : list) {
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object iterateList2() {
    int count = 0;
    int size = list.size();
    for (int i = 0; i < size; i++) {
      Integer o = list.get(i);
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object serializeList() {
    buffer.writerIndex(0);
    int size = list.size();
    for (int i = 0; i < size; i++) {
      Integer o = list.get(i);
      if (o != null) {
        buffer.writeVarInt(o);
      }
    }
    return buffer;
  }
```
```text
Benchmark                  Mode  Cnt         Score          Error  Units
ArraySuite.iterateArray   thrpt    3  18107614.727 ± 25969433.513  ops/s
ArraySuite.iterateList    thrpt    3   9448162.588 ± 13139664.082  ops/s
ArraySuite.iterateList2   thrpt    3  14678631.109 ± 14579521.954  ops/s
ArraySuite.serializeList  thrpt    3   1659718.571 ±  1323226.629  ops/s
```

But for map:
```java
  @Benchmark
  public Object computeMapHeader() {
    boolean containKeyNull = false;
    boolean containValueNull = false;
    Class<?> keyClass = null, valueClass = null;
    boolean keySameClass = true;
    boolean valueSameClass = true;
    int count = 0;
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      count++;
      if (key == null) {
        containKeyNull = true;
      } else if (keyClass == null) {
        keyClass = key.getClass();
      } else if (keyClass != key.getClass()) {
        keySameClass = false;
      }
      if (value == null) {
        containValueNull = true;
       } else if (valueClass == null) {
        valueClass = value.getClass();
      } else if (valueClass != value.getClass()) {
        valueSameClass = false;
      }
    }
    return new boolean[] {containKeyNull, keySameClass, containValueNull, valueSameClass, count % 2 != 0};
  }


  @Benchmark
  public Object iterateMap() {
    int count = 0;
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      // hole.consume(key);
      // hole.consume(value);
      count++;
    }
    return count;
  }

  @Benchmark
  public Object serializeMap() {
    buffer.writerIndex(0);
    for (Map.Entry<Object, Object> entry : mapForIterating.entrySet()) {
      Object key = entry.getKey();
      Object value = entry.getValue();
      fury.writeRef(buffer, key);
      fury.writeRef(buffer, value);
    }
    return buffer;
  }

  @Benchmark
  public Object serializeMap2() {
    buffer.writerIndex(0);
    Map<Integer, Integer> map = (Map) mapForIterating;
    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
      Integer key = entry.getKey();
      Integer value = entry.getValue();
      buffer.writeInt(key);
      buffer.writeInt(value);
    }
    return buffer;
  }

  @Benchmark
  public Object serialize() {
    return Tuple2.of(computeMapHeader(), serializeMap2());
  }

  @Benchmark
  public Object serializeOpt() {
    buffer.writerIndex(0);
    Map<Integer, Integer> map = (Map) mapForIterating;
    boolean containKeyNull = false;
    boolean containValueNull = false;
    Class<?> keyClass = null, valueClass = null;
    boolean keySameClass = true;
    boolean valueSameClass = true;
    int count = 0;
    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
      Integer key = entry.getKey();
      Integer value = entry.getValue();
      count++;
      if (key == null) {
        containKeyNull = true;
      } else if (keyClass == null) {
        keyClass = key.getClass();
      } else if (keyClass != key.getClass()) {
        keySameClass = false;
      }
      if (value == null) {
        containValueNull = true;
      } else if (valueClass == null) {
        valueClass = value.getClass();
      } else if (valueClass != value.getClass()) {
        valueSameClass = false;
      }
      buffer.writeInt(key);
      buffer.writeInt(value);
    }
    return Tuple2.of(new boolean[] {containKeyNull, keySameClass, containValueNull, valueSameClass, count % 2 != 0}, buffer);
  }

```
Iteration is almost slow as write data for a map with size 100.
```text
Benchmark                   Mode  Cnt        Score        Error  Units
MapSuite.computeMapHeader  thrpt   15   962145.162 ±  23937.297  ops/s
MapSuite.iterateMap        thrpt   15  1001955.918 ±  66110.121  ops/s
MapSuite.serialize         thrpt   15   445024.638 ±  65968.399  ops/s
MapSuite.serializeMap      thrpt   15   620651.930 ±  14956.265  ops/s
MapSuite.serializeMap2     thrpt   15   911471.607 ± 123342.194  ops/s
MapSuite.serializeOpt      thrpt   15   919619.780 ±  11398.077  ops/s
```
## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/926/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/927,https://api.github.com/repos/apache/fury/issues/927,fury,1922291036,927,[Java][Protocol] Collection serialization protocol by homogenization info,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-02T16:58:30Z,2023-12-22T12:01:48Z,"## Is your feature request related to a problem? Please describe.
In most cases, all collection elements are same type and not null, we should encode those info in advance to 
elements header will encode those homogeneous to avoid the cost of writing it for every elements.

## Describe the solution you'd like
Format:
```java
length(positive varint) | collection header | elements header | elements data
```

### collection header
- For `ArrayList/LinkedArrayList/HashSet/LinkedHashSet`, this will be empty.
- For `TreeSet`, this will be `Comparator`

### elements header
In most cases, all collection elements are same type and not null, elements header will encode those homogeneous 
information to avoid the cost of writing it for every elements. Specifically, there are four kinds of information 
which will be encoded by elements header, each use one bit:
- Whether track elements ref, use first bit `0b1` of header to flag it.
- Whether collection has null, use second bit `0b10` of header to flag it. If ref tracking is enabled for this 
element type, this flag is invalid.
- Whether collection elements type is not declare type, use 3rd bit `0b100` of header to flag it. 
- Whether collection elements type different, use 4rd bit `0b1000` of header to flag it.

By default, all bits are unset, which means all elements won't track ref, all elements are same type,, not null and the 
actual element is the declare type in custom class field.

### elements data
Based on the elements header, the serialization of elements data may skip `ref flag`/`null flag`/`element class info`.

## Additional context
#925 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/927/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/927,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vUWcH,fury,1867605767,927,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-22T12:01:47Z,2023-12-22T12:01:47Z,"Benchmark for iteration:

iterateList2 is 8x faster than serializeList for a list with size 100:
```java
  @Benchmark
  public Object iterateArray() {
    int count = 0;
    for (Integer o : array) {
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object iterateList() {
    int count = 0;
    for (Integer o : list) {
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object iterateList2() {
    int count = 0;
    int size = list.size();
    for (int i = 0; i < size; i++) {
      Integer o = list.get(i);
      if (o != null) {
        count += o;
      }
    }
    return count;
  }

  @Benchmark
  public Object serializeList() {
    buffer.writerIndex(0);
    int size = list.size();
    for (int i = 0; i < size; i++) {
      Integer o = list.get(i);
      if (o != null) {
        buffer.writeVarInt(o);
      }
    }
    return buffer;
  }
```
```text
Benchmark                  Mode  Cnt         Score          Error  Units
ArraySuite.iterateArray   thrpt    3  18107614.727 ± 25969433.513  ops/s
ArraySuite.iterateList    thrpt    3   9448162.588 ± 13139664.082  ops/s
ArraySuite.iterateList2   thrpt    3  14678631.109 ± 14579521.954  ops/s
ArraySuite.serializeList  thrpt    3   1659718.571 ±  1323226.629  ops/s
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vUWcH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/930,https://api.github.com/repos/apache/fury/issues/930,fury,1923698859,930,[Java] speed test codegen speed by avoid duplicate codegen,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-03T09:20:33Z,2023-10-03T10:14:11Z,"## Is your feature request related to a problem? Please describe.
Currently fury tests will generate different test class for chaos and class compatibility tests, the class will be used  to test fury with different config. 

For every fury config, those class will be compiled again, the compilation use `javac` and subporcess , which is slow and affect fury ci efficiency.

## Describe the solution you'd like
Cache generated serializer by key.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/930/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/932,https://api.github.com/repos/apache/fury/issues/932,fury,1924472872,932,[Java] rename ClassInfoCache to ClassInfoHolder,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-03T16:08:23Z,2023-10-03T16:14:42Z,"## Is your feature request related to a problem? Please describe.
`ClassInfoCache` is kind of vague, it shows it's a cache and give people an impression it can  only be used as a cache. But acutally it's much more than that.

## Describe the solution you'd like
Rename to `ClassInfoHolder` will be better.

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/932/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/936,https://api.github.com/repos/apache/fury/issues/936,fury,1926821246,936,[Java] Janino generated code cause jvm crash,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-04T19:11:46Z,2023-10-04T22:14:54Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Janino generated code cause jvm crash, using javac will work.

Janino generated bytecode:


Fury generated java code:
```java
package io.fury.test.bean;

import java.util.List;
import java.util.Map;
import java.util.Set;
import io.fury.Fury;
import io.fury.memory.MemoryBuffer;
import io.fury.resolver.NoRefResolver;
import io.fury.resolver.ClassInfo;
import io.fury.resolver.ClassInfoHolder;
import io.fury.resolver.ClassResolver;
import io.fury.builder.Generated;
import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
import io.fury.serializer.Serializers.EnumSerializer;
import io.fury.serializer.Serializer;
import io.fury.serializer.StringSerializer;
import io.fury.serializer.ObjectSerializer;
import io.fury.serializer.CompatibleSerializer;
import io.fury.serializer.CollectionSerializers.CollectionSerializer;
import io.fury.serializer.MapSerializers.MapSerializer;
import io.fury.builder.Generated.GeneratedObjectSerializer;

public final class BeanAFuryCodec_232072312 extends GeneratedObjectSerializer {

  private final NoRefResolver refResolver;
  private final ClassResolver classResolver;
  private final StringSerializer strSerializer;
  private final Fury fury;
  private final io.fury.serializer.ArraySerializers.ByteArraySerializer byteArraySerializer;
  private final io.fury.serializer.ArraySerializers.IntArraySerializer intArraySerializer;
  private final io.fury.serializer.ArraySerializers.ObjectArraySerializer objectArraySerializer;
  private final io.fury.test.bean.BeanBFuryCodec_232072312 beanBFuryCodec_232072312;
  private ClassInfo iterableClassInfo;
  private ClassInfo bigDecimalClassInfo;
  private ClassInfo listClassInfo;
  private ClassInfo listClassInfo1;
  private final ClassInfoHolder list2ClassInfoHolder;
  private ClassInfo listClassInfo2;
  private ClassInfo listClassInfo3;
  private ClassInfo mapClassInfo;
  private final ClassInfoHolder iterable1ClassInfoHolder;
  private final ClassInfoHolder bigDecimal1ClassInfoHolder;
  private final ClassInfoHolder list11ClassInfoHolder;
  private final ClassInfoHolder list12ClassInfoHolder;
  private final ClassInfoHolder list13ClassInfoHolder;
  private final ClassInfoHolder list14ClassInfoHolder;
  private final ClassInfoHolder map1ClassInfoHolder;

  public BeanAFuryCodec_232072312(Fury fury, Class classType) {
      super(fury, classType);
      this.fury = fury;
      fury.getClassResolver().setSerializerIfAbsent(classType, this);
  
      io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
      refResolver = ((NoRefResolver)refResolver0);
      classResolver = fury.getClassResolver();
      strSerializer = fury.getStringSerializer();
      byteArraySerializer = ((io.fury.serializer.ArraySerializers.ByteArraySerializer)classResolver.getSerializer(byte[].class));
      intArraySerializer = ((io.fury.serializer.ArraySerializers.IntArraySerializer)classResolver.getSerializer(int[].class));
      objectArraySerializer = ((io.fury.serializer.ArraySerializers.ObjectArraySerializer)classResolver.getSerializer(int[][].class));
      beanBFuryCodec_232072312 = ((io.fury.test.bean.BeanBFuryCodec_232072312)classResolver.getSerializer(io.fury.test.bean.BeanB.class));
      iterableClassInfo = classResolver.nilClassInfo();
      bigDecimalClassInfo = classResolver.nilClassInfo();
      listClassInfo = classResolver.nilClassInfo();
      listClassInfo1 = classResolver.nilClassInfo();
      list2ClassInfoHolder = classResolver.nilClassInfoHolder();
      listClassInfo2 = classResolver.nilClassInfo();
      listClassInfo3 = classResolver.nilClassInfo();
      mapClassInfo = classResolver.nilClassInfo();
      iterable1ClassInfoHolder = classResolver.nilClassInfoHolder();
      bigDecimal1ClassInfoHolder = classResolver.nilClassInfoHolder();
      list11ClassInfoHolder = classResolver.nilClassInfoHolder();
      list12ClassInfoHolder = classResolver.nilClassInfoHolder();
      list13ClassInfoHolder = classResolver.nilClassInfoHolder();
      list14ClassInfoHolder = classResolver.nilClassInfoHolder();
      map1ClassInfoHolder = classResolver.nilClassInfoHolder();
  }

  private void writeFields(io.fury.test.bean.BeanA beanA1, MemoryBuffer memoryBuffer, byte[] arr) {
      long writerAddr = memoryBuffer.getUnsafeWriterAddress();
      MemoryBuffer.unsafePutDouble(arr, writerAddr, io.fury.util.Platform.getDouble(beanA1, 24L));
      MemoryBuffer.unsafePutLong(arr, (writerAddr + 8L), io.fury.util.Platform.getLong(beanA1, 16L));
      MemoryBuffer.unsafePutShort(arr, (writerAddr + 16L), io.fury.util.Platform.getShort(beanA1, 12L));
      MemoryBuffer.unsafePutBoolean(arr, (writerAddr + 18L), io.fury.util.Platform.getBoolean(beanA1, 14L));
      memoryBuffer.increaseWriterIndexUnsafe(19);
  }

  private void writeFields1(io.fury.test.bean.BeanA beanA2, MemoryBuffer memoryBuffer1) {
      Object object1 = io.fury.util.Platform.getObject(beanA2, 36L);
      Float f4 = (Float)object1;
      if ((f4 == null)) {
          memoryBuffer1.writeByte(((byte)-3));
      } else {
          memoryBuffer1.writeByte(((byte)0));
          memoryBuffer1.writeFloat(f4);
      }
      java.lang.Integer f15 = beanA2.f15;
      if ((f15 == null)) {
          memoryBuffer1.writeByte(((byte)-3));
      } else {
          memoryBuffer1.writeByte(((byte)0));
          memoryBuffer1.writeVarInt(f15);
      }
      Object object22 = io.fury.util.Platform.getObject(beanA2, 32L);
      Integer f2 = (Integer)object22;
      if ((f2 == null)) {
          memoryBuffer1.writeByte(((byte)-3));
      } else {
          memoryBuffer1.writeByte(((byte)0));
          memoryBuffer1.writeVarInt(f2);
      }
  }

  private void writeFields2(io.fury.test.bean.BeanA beanA3, MemoryBuffer memoryBuffer2) {
      Object object00 = io.fury.util.Platform.getObject(beanA3, 48L);
      byte[] bytes = (byte[])object00;
      if ((bytes == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          byteArraySerializer.write(memoryBuffer2, bytes);
      }
      Object object31 = io.fury.util.Platform.getObject(beanA3, 44L);
      int[] intArray = (int[])object31;
      if ((intArray == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          intArraySerializer.write(memoryBuffer2, intArray);
      }
      Object object42 = io.fury.util.Platform.getObject(beanA3, 88L);
      int[][] int2DArray = (int[][])object42;
      if ((int2DArray == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          objectArraySerializer.write(memoryBuffer2, int2DArray);
      }
      Object object53 = io.fury.util.Platform.getObject(beanA3, 40L);
      io.fury.test.bean.BeanB beanB = (io.fury.test.bean.BeanB)object53;
      if ((beanB == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          beanBFuryCodec_232072312.write(memoryBuffer2, beanB);
      }
      java.lang.String f17 = beanA3.f17;
      if ((f17 == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          StringSerializer.writeJDK11String(memoryBuffer2, f17);
      }
      java.lang.String longStringField = beanA3.longStringField;
      if ((longStringField == null)) {
          memoryBuffer2.writeByte(((byte)-3));
      } else {
          memoryBuffer2.writeByte(((byte)0));
          StringSerializer.writeJDK11String(memoryBuffer2, longStringField);
      }
  }

  private void writeClassAndObject(MemoryBuffer memoryBuffer3, Iterable iterable) {
      ClassResolver classResolver = this.classResolver;
      Class value5 = iterableClassInfo.getCls();
      Class cls = iterable.getClass();
      if ((value5 != cls)) {
          iterableClassInfo = classResolver.getClassInfo(cls);
      }
      short value6 = iterableClassInfo.getClassId();
      if ((value6 == ((short)0))) {
          memoryBuffer3.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer3, iterableClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer3, iterableClassInfo.getClassNameBytes());
      } else {
          int value7 = memoryBuffer3.writerIndex();
          memoryBuffer3.increaseWriterIndex(3);
          memoryBuffer3.unsafePut(value7, ((byte)1));
          memoryBuffer3.unsafePutShort((value7 + 1), value6);
      }
      iterableClassInfo.getSerializer().write(memoryBuffer3, iterable);
  }

  private void writeClassAndObject1(MemoryBuffer memoryBuffer4, java.math.BigDecimal bigDecimal) {
      ClassResolver classResolver = this.classResolver;
      Class value8 = bigDecimalClassInfo.getCls();
      Class cls0 = bigDecimal.getClass();
      if ((value8 != cls0)) {
          bigDecimalClassInfo = classResolver.getClassInfo(cls0);
      }
      short value9 = bigDecimalClassInfo.getClassId();
      if ((value9 == ((short)0))) {
          memoryBuffer4.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer4, bigDecimalClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer4, bigDecimalClassInfo.getClassNameBytes());
      } else {
          int value10 = memoryBuffer4.writerIndex();
          memoryBuffer4.increaseWriterIndex(3);
          memoryBuffer4.unsafePut(value10, ((byte)1));
          memoryBuffer4.unsafePutShort((value10 + 1), value9);
      }
      bigDecimalClassInfo.getSerializer().write(memoryBuffer4, bigDecimal);
  }

  private void writeFields3(io.fury.test.bean.BeanA beanA4, MemoryBuffer memoryBuffer5) {
      Object object60 = io.fury.util.Platform.getObject(beanA4, 76L);
      Iterable beanBIterable = (Iterable)object60;
      if ((beanBIterable == null)) {
          memoryBuffer5.writeByte(((byte)-3));
      } else {
          memoryBuffer5.writeByte(((byte)0));
          this.writeClassAndObject(memoryBuffer5, beanBIterable);
      }
      java.math.BigDecimal f16 = beanA4.f16;
      if ((f16 == null)) {
          memoryBuffer5.writeByte(((byte)-3));
      } else {
          memoryBuffer5.writeByte(((byte)0));
          this.writeClassAndObject1(memoryBuffer5, f16);
      }
  }

  private CollectionSerializer writeCollectionClassInfo(MemoryBuffer memoryBuffer6, List list) {
      ClassResolver classResolver = this.classResolver;
      Class value11 = listClassInfo.getCls();
      Class cls1 = list.getClass();
      if ((value11 != cls1)) {
          listClassInfo = classResolver.getClassInfo(cls1);
      }
      short value12 = listClassInfo.getClassId();
      if ((value12 == ((short)0))) {
          memoryBuffer6.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer6, listClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer6, listClassInfo.getClassNameBytes());
      } else {
          int value13 = memoryBuffer6.writerIndex();
          memoryBuffer6.increaseWriterIndex(3);
          memoryBuffer6.unsafePut(value13, ((byte)1));
          memoryBuffer6.unsafePutShort((value13 + 1), value12);
      }
      Serializer serializer = listClassInfo.getSerializer();
      return ((CollectionSerializer)serializer);
  }

  private void writeFields4(io.fury.test.bean.BeanA beanA5, MemoryBuffer memoryBuffer7) {
      io.fury.test.bean.BeanBFuryCodec_232072312 beanBFuryCodec_232072312 = this.beanBFuryCodec_232072312;
      Object object70 = io.fury.util.Platform.getObject(beanA5, 80L);
      List beanBList = (List)object70;
      if ((beanBList == null)) {
          memoryBuffer7.writeByte(((byte)-3));
      } else {
          memoryBuffer7.writeByte(((byte)0));
          CollectionSerializer collectionSerializer = this.writeCollectionClassInfo(memoryBuffer7, beanBList);
          if (collectionSerializer.supportCodegenHook()) {
              int value14 = beanBList.size();
              memoryBuffer7.writePositiveVarInt(value14);
              collectionSerializer.writeHeader(memoryBuffer7, beanBList);
              if ((value14 > 0)) {
                  int value15 = collectionSerializer.writeNullabilityHeader(memoryBuffer7, beanBList);
                  boolean hasNull = (value15 & 2) == 2;
                  for (int i = 0; i < value14; i+=1) {
                    Object object8 = beanBList.get(i);
                    io.fury.test.bean.BeanB castedValue = (io.fury.test.bean.BeanB)object8;
                    if (hasNull) {
                        if ((castedValue == null)) {
                            memoryBuffer7.writeByte(((byte)-3));
                        } else {
                            memoryBuffer7.writeByte(((byte)0));
                            beanBFuryCodec_232072312.write(memoryBuffer7, castedValue);
                        }
                    } else {
                        beanBFuryCodec_232072312.write(memoryBuffer7, castedValue);
                    }
                  }
              }
          } else {
              collectionSerializer.write(memoryBuffer7, beanBList);
          }
      }
  }

  private CollectionSerializer writeCollectionClassInfo1(MemoryBuffer memoryBuffer8, List list1) {
      ClassResolver classResolver = this.classResolver;
      Class value16 = listClassInfo1.getCls();
      Class cls2 = list1.getClass();
      if ((value16 != cls2)) {
          listClassInfo1 = classResolver.getClassInfo(cls2);
      }
      short value17 = listClassInfo1.getClassId();
      if ((value17 == ((short)0))) {
          memoryBuffer8.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer8, listClassInfo1.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer8, listClassInfo1.getClassNameBytes());
      } else {
          int value18 = memoryBuffer8.writerIndex();
          memoryBuffer8.increaseWriterIndex(3);
          memoryBuffer8.unsafePut(value18, ((byte)1));
          memoryBuffer8.unsafePutShort((value18 + 1), value17);
      }
      Serializer serializer0 = listClassInfo1.getSerializer();
      return ((CollectionSerializer)serializer0);
  }

  private void writeCollection(MemoryBuffer memoryBuffer10, List list4, CollectionSerializer collectionSerializer0) {
      if (collectionSerializer0.supportCodegenHook()) {
          int value21 = list4.size();
          memoryBuffer10.writePositiveVarInt(value21);
          collectionSerializer0.writeHeader(memoryBuffer10, list4);
          if ((value21 > 0)) {
              int value22 = collectionSerializer0.writeNullabilityHeader(memoryBuffer10, list4);
              boolean hasNull0 = (value22 & 2) == 2;
              for (int i1 = 0; i1 < value21; i1+=1) {
                Object object9 = list4.get(i1);
                Double castedValue0 = (Double)object9;
                if (hasNull0) {
                    if ((castedValue0 == null)) {
                        memoryBuffer10.writeByte(((byte)-3));
                    } else {
                        memoryBuffer10.writeByte(((byte)0));
                        memoryBuffer10.writeDouble(castedValue0);
                    }
                } else {
                    memoryBuffer10.writeDouble(castedValue0);
                }
              }
          }
      } else {
          collectionSerializer0.write(memoryBuffer10, list4);
      }
  }

  private void writeCollection1(MemoryBuffer memoryBuffer11, List list5, CollectionSerializer collectionSerializer1) {
      if (collectionSerializer1.supportCodegenHook()) {
          int value23 = list5.size();
          memoryBuffer11.writePositiveVarInt(value23);
          collectionSerializer1.writeHeader(memoryBuffer11, list5);
          if ((value23 > 0)) {
              int value24 = collectionSerializer1.writeNullabilityHeader(memoryBuffer11, list5);
              boolean hasNull1 = (value24 & 2) == 2;
              for (int i2 = 0; i2 < value23; i2+=1) {
                Object object10 = list5.get(i2);
                Double castedValue1 = (Double)object10;
                if (hasNull1) {
                    if ((castedValue1 == null)) {
                        memoryBuffer11.writeByte(((byte)-3));
                    } else {
                        memoryBuffer11.writeByte(((byte)0));
                        memoryBuffer11.writeDouble(castedValue1);
                    }
                } else {
                    memoryBuffer11.writeDouble(castedValue1);
                }
              }
          }
      } else {
          collectionSerializer1.write(memoryBuffer11, list5);
      }
  }

  private void sameElementClassWrite(MemoryBuffer memoryBuffer9, List list3, boolean value19, int value20) {
      CollectionSerializer colSerializer = (CollectionSerializer)list2ClassInfoHolder.getSerializer();
      for (int i0 = 0; i0 < value20; i0+=1) {
        Object object11 = list3.get(i0);
        List castedValue2 = (List)object11;
        if (value19) {
            if ((castedValue2 == null)) {
                memoryBuffer9.writeByte(((byte)-3));
            } else {
                memoryBuffer9.writeByte(((byte)0));
                this.writeCollection(memoryBuffer9, castedValue2, colSerializer);
            }
        } else {
            this.writeCollection1(memoryBuffer9, castedValue2, colSerializer);
        }
      }
  }

  private CollectionSerializer writeCollectionClassInfo2(MemoryBuffer memoryBuffer13, List list6) {
      ClassResolver classResolver = this.classResolver;
      Class value27 = listClassInfo2.getCls();
      Class cls3 = list6.getClass();
      if ((value27 != cls3)) {
          listClassInfo2 = classResolver.getClassInfo(cls3);
      }
      short value28 = listClassInfo2.getClassId();
      if ((value28 == ((short)0))) {
          memoryBuffer13.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer13, listClassInfo2.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer13, listClassInfo2.getClassNameBytes());
      } else {
          int value29 = memoryBuffer13.writerIndex();
          memoryBuffer13.increaseWriterIndex(3);
          memoryBuffer13.unsafePut(value29, ((byte)1));
          memoryBuffer13.unsafePutShort((value29 + 1), value28);
      }
      Serializer serializer1 = listClassInfo2.getSerializer();
      return ((CollectionSerializer)serializer1);
  }

  private void writeCollection2(MemoryBuffer memoryBuffer14, List list7, CollectionSerializer collectionSerializer3) {
      if (collectionSerializer3.supportCodegenHook()) {
          int value30 = list7.size();
          memoryBuffer14.writePositiveVarInt(value30);
          collectionSerializer3.writeHeader(memoryBuffer14, list7);
          if ((value30 > 0)) {
              int value31 = collectionSerializer3.writeNullabilityHeader(memoryBuffer14, list7);
              boolean hasNull3 = (value31 & 2) == 2;
              for (int i4 = 0; i4 < value30; i4+=1) {
                Object object13 = list7.get(i4);
                Double castedValue3 = (Double)object13;
                if (hasNull3) {
                    if ((castedValue3 == null)) {
                        memoryBuffer14.writeByte(((byte)-3));
                    } else {
                        memoryBuffer14.writeByte(((byte)0));
                        memoryBuffer14.writeDouble(castedValue3);
                    }
                } else {
                    memoryBuffer14.writeDouble(castedValue3);
                }
              }
          }
      } else {
          collectionSerializer3.write(memoryBuffer14, list7);
      }
  }

  private CollectionSerializer writeCollectionClassInfo3(MemoryBuffer memoryBuffer15, List list8) {
      ClassResolver classResolver = this.classResolver;
      Class value32 = listClassInfo2.getCls();
      Class cls4 = list8.getClass();
      if ((value32 != cls4)) {
          listClassInfo2 = classResolver.getClassInfo(cls4);
      }
      short value33 = listClassInfo2.getClassId();
      if ((value33 == ((short)0))) {
          memoryBuffer15.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer15, listClassInfo2.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer15, listClassInfo2.getClassNameBytes());
      } else {
          int value34 = memoryBuffer15.writerIndex();
          memoryBuffer15.increaseWriterIndex(3);
          memoryBuffer15.unsafePut(value34, ((byte)1));
          memoryBuffer15.unsafePutShort((value34 + 1), value33);
      }
      Serializer serializer2 = listClassInfo2.getSerializer();
      return ((CollectionSerializer)serializer2);
  }

  private void writeCollection3(MemoryBuffer memoryBuffer16, List list9, CollectionSerializer collectionSerializer4) {
      if (collectionSerializer4.supportCodegenHook()) {
          int value35 = list9.size();
          memoryBuffer16.writePositiveVarInt(value35);
          collectionSerializer4.writeHeader(memoryBuffer16, list9);
          if ((value35 > 0)) {
              int value36 = collectionSerializer4.writeNullabilityHeader(memoryBuffer16, list9);
              boolean hasNull4 = (value36 & 2) == 2;
              for (int i5 = 0; i5 < value35; i5+=1) {
                Object object14 = list9.get(i5);
                Double castedValue4 = (Double)object14;
                if (hasNull4) {
                    if ((castedValue4 == null)) {
                        memoryBuffer16.writeByte(((byte)-3));
                    } else {
                        memoryBuffer16.writeByte(((byte)0));
                        memoryBuffer16.writeDouble(castedValue4);
                    }
                } else {
                    memoryBuffer16.writeDouble(castedValue4);
                }
              }
          }
      } else {
          collectionSerializer4.write(memoryBuffer16, list9);
      }
  }

  private void writeFields5(io.fury.test.bean.BeanA beanA6, MemoryBuffer memoryBuffer12) {
      Object object120 = io.fury.util.Platform.getObject(beanA6, 92L);
      List double2DList = (List)object120;
      if ((double2DList == null)) {
          memoryBuffer12.writeByte(((byte)-3));
      } else {
          memoryBuffer12.writeByte(((byte)0));
          CollectionSerializer collectionSerializer2 = this.writeCollectionClassInfo1(memoryBuffer12, double2DList);
          if (collectionSerializer2.supportCodegenHook()) {
              int value25 = double2DList.size();
              memoryBuffer12.writePositiveVarInt(value25);
              collectionSerializer2.writeHeader(memoryBuffer12, double2DList);
              if ((value25 > 0)) {
                  int value26 = collectionSerializer2.writeTypeNullabilityHeader(memoryBuffer12, double2DList, java.util.List.class, list2ClassInfoHolder);
                  boolean sameElementClass = (value26 & 8) != 8;
                  boolean hasNull2 = (value26 & 2) == 2;
                  if (sameElementClass) {
                      this.sameElementClassWrite(memoryBuffer12, double2DList, hasNull2, value25);
                  } else {
                      for (int i3 = 0; i3 < value25; i3+=1) {
                        Object object15 = double2DList.get(i3);
                        List castedValue5 = (List)object15;
                        if (hasNull2) {
                            if ((castedValue5 == null)) {
                                memoryBuffer12.writeByte(((byte)-3));
                            } else {
                                memoryBuffer12.writeByte(((byte)0));
                                CollectionSerializer collectionSerializer5 = this.writeCollectionClassInfo2(memoryBuffer12, castedValue5);
                                this.writeCollection2(memoryBuffer12, castedValue5, collectionSerializer5);
                            }
                        } else {
                            CollectionSerializer collectionSerializer6 = this.writeCollectionClassInfo3(memoryBuffer12, castedValue5);
                            this.writeCollection3(memoryBuffer12, castedValue5, collectionSerializer6);
                        }
                      }
                  }
              }
          } else {
              collectionSerializer2.write(memoryBuffer12, double2DList);
          }
      }
  }

  private CollectionSerializer writeCollectionClassInfo4(MemoryBuffer memoryBuffer17, List list10) {
      ClassResolver classResolver = this.classResolver;
      Class value37 = listClassInfo3.getCls();
      Class cls5 = list10.getClass();
      if ((value37 != cls5)) {
          listClassInfo3 = classResolver.getClassInfo(cls5);
      }
      short value38 = listClassInfo3.getClassId();
      if ((value38 == ((short)0))) {
          memoryBuffer17.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer17, listClassInfo3.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer17, listClassInfo3.getClassNameBytes());
      } else {
          int value39 = memoryBuffer17.writerIndex();
          memoryBuffer17.increaseWriterIndex(3);
          memoryBuffer17.unsafePut(value39, ((byte)1));
          memoryBuffer17.unsafePutShort((value39 + 1), value38);
      }
      Serializer serializer3 = listClassInfo3.getSerializer();
      return ((CollectionSerializer)serializer3);
  }

  private void writeFields6(io.fury.test.bean.BeanA beanA7, MemoryBuffer memoryBuffer18) {
      Object object160 = io.fury.util.Platform.getObject(beanA7, 72L);
      List doubleList = (List)object160;
      if ((doubleList == null)) {
          memoryBuffer18.writeByte(((byte)-3));
      } else {
          memoryBuffer18.writeByte(((byte)0));
          CollectionSerializer collectionSerializer7 = this.writeCollectionClassInfo4(memoryBuffer18, doubleList);
          if (collectionSerializer7.supportCodegenHook()) {
              int value40 = doubleList.size();
              memoryBuffer18.writePositiveVarInt(value40);
              collectionSerializer7.writeHeader(memoryBuffer18, doubleList);
              if ((value40 > 0)) {
                  int value41 = collectionSerializer7.writeNullabilityHeader(memoryBuffer18, doubleList);
                  boolean hasNull5 = (value41 & 2) == 2;
                  for (int i6 = 0; i6 < value40; i6+=1) {
                    Object object17 = doubleList.get(i6);
                    Double castedValue6 = (Double)object17;
                    if (hasNull5) {
                        if ((castedValue6 == null)) {
                            memoryBuffer18.writeByte(((byte)-3));
                        } else {
                            memoryBuffer18.writeByte(((byte)0));
                            memoryBuffer18.writeDouble(castedValue6);
                        }
                    } else {
                        memoryBuffer18.writeDouble(castedValue6);
                    }
                  }
              }
          } else {
              collectionSerializer7.write(memoryBuffer18, doubleList);
          }
      }
  }

  private MapSerializer writeMapClassInfo(MemoryBuffer memoryBuffer19, Map map) {
      ClassResolver classResolver = this.classResolver;
      Class value42 = mapClassInfo.getCls();
      Class cls6 = map.getClass();
      if ((value42 != cls6)) {
          mapClassInfo = classResolver.getClassInfo(cls6);
      }
      short value43 = mapClassInfo.getClassId();
      if ((value43 == ((short)0))) {
          memoryBuffer19.writeByte(((byte)0));
          classResolver.writeEnumStringBytes(memoryBuffer19, mapClassInfo.getPackageNameBytes());
          classResolver.writeEnumStringBytes(memoryBuffer19, mapClassInfo.getClassNameBytes());
      } else {
          int value44 = memoryBuffer19.writerIndex();
          memoryBuffer19.increaseWriterIndex(3);
          memoryBuffer19.unsafePut(value44, ((byte)1));
          memoryBuffer19.unsafePutShort((value44 + 1), value43);
      }
      Serializer serializer4 = mapClassInfo.getSerializer();
      return ((MapSerializer)serializer4);
  }

  private void writeFields7(io.fury.test.bean.BeanA beanA8, MemoryBuffer memoryBuffer20) {
      Object object180 = io.fury.util.Platform.getObject(beanA8, 84L);
      Map stringBeanBMap = (Map)object180;
      if ((stringBeanBMap == null)) {
          memoryBuffer20.writeByte(((byte)-3));
      } else {
          memoryBuffer20.writeByte(((byte)0));
          MapSerializer mapSerializer = this.writeMapClassInfo(memoryBuffer20, stringBeanBMap);
          if (mapSerializer.supportCodegenHook()) {
              int value45 = stringBeanBMap.size();
              memoryBuffer20.writePositiveVarInt(value45);
              mapSerializer.writeHeader(memoryBuffer20, stringBeanBMap);
              Set entrySet = stringBeanBMap.entrySet();
              java.util.Iterator iter = entrySet.iterator();
              int i7 = 0;
              while (iter.hasNext()) {
                  Object elemValue = iter.next();
                  java.util.Map.Entry entry = (java.util.Map.Entry)elemValue;
                  Object keyObj = entry.getKey();
                  String key = (String)keyObj;
                  if ((key == null)) {
                      memoryBuffer20.writeByte(((byte)-3));
                  } else {
                      memoryBuffer20.writeByte(((byte)0));
                      StringSerializer.writeJDK11String(memoryBuffer20, key);
                  }
                  Object valueObj = entry.getValue();
                  io.fury.test.bean.BeanB value47 = (io.fury.test.bean.BeanB)valueObj;
                  if ((value47 == null)) {
                      memoryBuffer20.writeByte(((byte)-3));
                  } else {
                      memoryBuffer20.writeByte(((byte)0));
                      beanBFuryCodec_232072312.write(memoryBuffer20, value47);
                  }
                  i7++;
              }
          } else {
              mapSerializer.write(memoryBuffer20, stringBeanBMap);
          }
      }
  }

  private void readFields(io.fury.test.bean.BeanA beanA9, MemoryBuffer memoryBuffer21, byte[] arr1) {
      long readerAddr = memoryBuffer21.getUnsafeReaderAddress();
      io.fury.util.Platform.putDouble(beanA9, 24L, MemoryBuffer.unsafeGetDouble(arr1, readerAddr));
      io.fury.util.Platform.putLong(beanA9, 16L, MemoryBuffer.unsafeGetLong(arr1, (readerAddr + 8L)));
      io.fury.util.Platform.putShort(beanA9, 12L, MemoryBuffer.unsafeGetShort(arr1, (readerAddr + 16L)));
      io.fury.util.Platform.putBoolean(beanA9, 14L, MemoryBuffer.unsafeGetBoolean(arr1, (readerAddr + 18L)));
      memoryBuffer21.increaseReaderIndexUnsafe(19);
  }

  private void readFields1(MemoryBuffer memoryBuffer22, io.fury.test.bean.BeanA beanA10) {
      if ((memoryBuffer22.readByte() != ((byte)-3))) {
          io.fury.util.Platform.putObject(beanA10, 36L, memoryBuffer22.readFloat());
      } else {
          io.fury.util.Platform.putObject(beanA10, 36L, null);
      }
      if ((memoryBuffer22.readByte() != ((byte)-3))) {
          beanA10.f15 = memoryBuffer22.readVarInt();
      } else {
          beanA10.f15 = null;
      }
      if ((memoryBuffer22.readByte() != ((byte)-3))) {
          io.fury.util.Platform.putObject(beanA10, 32L, memoryBuffer22.readVarInt());
      } else {
          io.fury.util.Platform.putObject(beanA10, 32L, null);
      }
  }

  private void readFields2(MemoryBuffer memoryBuffer23, io.fury.test.bean.BeanA beanA11) {
      if ((memoryBuffer23.readByte() != ((byte)-3))) {
          io.fury.util.Platform.putObject(beanA11, 48L, byteArraySerializer.read(memoryBuffer23));
      } else {
          io.fury.util.Platform.putObject(beanA11, 48L, null);
      }
      if ((memoryBuffer23.readByte() != ((byte)-3))) {
          io.fury.util.Platform.putObject(beanA11, 44L, intArraySerializer.read(memoryBuffer23));
      } else {
          io.fury.util.Platform.putObject(beanA11, 44L, null);
      }
      if ((memoryBuffer23.readByte() != ((byte)-3))) {
          java.lang.Object[] arr0 = objectArraySerializer.read(memoryBuffer23);
          io.fury.util.Platform.putObject(beanA11, 88L, ((int[][])arr0));
      } else {
          io.fury.util.Platform.putObject(beanA11, 88L, null);
      }
      if ((memoryBuffer23.readByte() != ((byte)-3))) {
          Object object19 = beanBFuryCodec_232072312.read(memoryBuffer23);
          io.fury.util.Platform.putObject(beanA11, 40L, ((io.fury.test.bean.BeanB)object19));
      } else {
          io.fury.util.Platform.putObject(beanA11, 40L, null);
      }
      if ((memoryBuffer23.readByte() != ((byte)-3))) {
          beanA11.f17 = strSerializer.readJava11String(memoryBuffer23);
      } else {
          beanA11.f17 = null;
      }
  }

  private void readFields3(MemoryBuffer memoryBuffer24, io.fury.test.bean.BeanA beanA12) {
      ClassResolver classResolver = this.classResolver;
      if ((memoryBuffer24.readByte() != ((byte)-3))) {
          Object object20 = classResolver.readClassInfo(memoryBuffer24, iterable1ClassInfoHolder).getSerializer().read(memoryBuffer24);
          io.fury.util.Platform.putObject(beanA12, 76L, ((Iterable)object20));
      } else {
          io.fury.util.Platform.putObject(beanA12, 76L, null);
      }
      if ((memoryBuffer24.readByte() != ((byte)-3))) {
          Object object21 = classResolver.readClassInfo(memoryBuffer24, bigDecimal1ClassInfoHolder).getSerializer().read(memoryBuffer24);
          beanA12.f16 = ((java.math.BigDecimal)object21);
      } else {
          beanA12.f16 = null;
      }
  }

  private void readFields4(MemoryBuffer memoryBuffer25, io.fury.test.bean.BeanA beanA13) {
      io.fury.test.bean.BeanBFuryCodec_232072312 beanBFuryCodec_232072312 = this.beanBFuryCodec_232072312;
      if ((memoryBuffer25.readByte() != ((byte)-3))) {
          Serializer serializer5 = classResolver.readClassInfo(memoryBuffer25, list11ClassInfoHolder).getSerializer();
          CollectionSerializer collectionSerializer8 = (CollectionSerializer)serializer5;
          java.util.Collection collection3;
          if (collectionSerializer8.supportCodegenHook()) {
              int size = memoryBuffer25.readPositiveVarInt();
              java.util.Collection collection = collectionSerializer8.newCollection(memoryBuffer25, size);
              if ((size > 0)) {
                  int flags = memoryBuffer25.readByte();
                  boolean hasNull6 = (flags & 2) == 2;
                  for (int i8 = 0; i8 < size; i8+=1) {
                    if (hasNull6) {
                        if ((memoryBuffer25.readByte() != ((byte)-3))) {
                            Object object23 = beanBFuryCodec_232072312.read(memoryBuffer25);
                            collection.add(object23);
                        } else {
                            collection.add(null);
                        }
                    } else {
                        Object object24 = beanBFuryCodec_232072312.read(memoryBuffer25);
                        collection.add(object24);
                    }
                  }
              }
              java.util.Collection collection1 = collectionSerializer8.onCollectionRead(collection);
              collection3 = collection1;
          } else {
              java.util.Collection collection2 = collectionSerializer8.read(memoryBuffer25);
              collection3 = collection2;
          }
          
          io.fury.util.Platform.putObject(beanA13, 80L, ((List)collection3));
      } else {
          io.fury.util.Platform.putObject(beanA13, 80L, null);
      }
  }

  private java.util.Collection readCollection(boolean value70, CollectionSerializer collectionSerializer9, MemoryBuffer memoryBuffer27) {
      java.util.Collection collection7;
      if (collectionSerializer9.supportCodegenHook()) {
          int size0 = memoryBuffer27.readPositiveVarInt();
          java.util.Collection collection4 = collectionSerializer9.newCollection(memoryBuffer27, size0);
          if ((size0 > 0)) {
              int flags0 = memoryBuffer27.readByte();
              boolean hasNull7 = (flags0 & 2) == 2;
              for (int i10 = 0; i10 < size0; i10+=1) {
                if (hasNull7) {
                    if ((memoryBuffer27.readByte() != ((byte)-3))) {
                        double value71 = memoryBuffer27.readDouble();
                        collection4.add(value71);
                    } else {
                        collection4.add(null);
                    }
                } else {
                    double value72 = memoryBuffer27.readDouble();
                    collection4.add(value72);
                }
              }
          }
          java.util.Collection collection5 = collectionSerializer9.onCollectionRead(collection4);
          collection7 = collection5;
      } else {
          java.util.Collection collection6 = collectionSerializer9.read(memoryBuffer27);
          collection7 = collection6;
      }
      return collection7;
  }

  private java.util.Collection readCollection1(boolean value73, CollectionSerializer collectionSerializer10, MemoryBuffer memoryBuffer28) {
      java.util.Collection collection11;
      if (collectionSerializer10.supportCodegenHook()) {
          int size1 = memoryBuffer28.readPositiveVarInt();
          java.util.Collection collection8 = collectionSerializer10.newCollection(memoryBuffer28, size1);
          if ((size1 > 0)) {
              int flags1 = memoryBuffer28.readByte();
              boolean hasNull8 = (flags1 & 2) == 2;
              for (int i11 = 0; i11 < size1; i11+=1) {
                if (hasNull8) {
                    if ((memoryBuffer28.readByte() != ((byte)-3))) {
                        double value74 = memoryBuffer28.readDouble();
                        collection8.add(value74);
                    } else {
                        collection8.add(null);
                    }
                } else {
                    double value75 = memoryBuffer28.readDouble();
                    collection8.add(value75);
                }
              }
          }
          java.util.Collection collection9 = collectionSerializer10.onCollectionRead(collection8);
          collection11 = collection9;
      } else {
          java.util.Collection collection10 = collectionSerializer10.read(memoryBuffer28);
          collection11 = collection10;
      }
      return collection11;
  }

  private void sameElementClassRead(MemoryBuffer memoryBuffer26, int value68, boolean value69, java.util.Collection collection0) {
      CollectionSerializer colSerializer0 = (CollectionSerializer)classResolver.readClassInfo(memoryBuffer26, list2ClassInfoHolder).getSerializer();
      for (int i9 = 0; i9 < value68; i9+=1) {
        if (value69) {
            if ((memoryBuffer26.readByte() != ((byte)-3))) {
                java.util.Collection collection12 = this.readCollection(value69, colSerializer0, memoryBuffer26);
                collection0.add(collection12);
            } else {
                collection0.add(null);
            }
        } else {
            java.util.Collection collection13 = this.readCollection1(value69, colSerializer0, memoryBuffer26);
            collection0.add(collection13);
        }
      }
  }

  private java.util.Collection readCollection2(MemoryBuffer memoryBuffer30, boolean value76) {
      Serializer serializer7 = classResolver.readClassInfo(memoryBuffer30, list13ClassInfoHolder).getSerializer();
      CollectionSerializer collectionSerializer12 = (CollectionSerializer)serializer7;
      java.util.Collection collection18;
      if (collectionSerializer12.supportCodegenHook()) {
          int size3 = memoryBuffer30.readPositiveVarInt();
          java.util.Collection collection15 = collectionSerializer12.newCollection(memoryBuffer30, size3);
          if ((size3 > 0)) {
              int flags3 = memoryBuffer30.readByte();
              boolean hasNull10 = (flags3 & 2) == 2;
              for (int i13 = 0; i13 < size3; i13+=1) {
                if (hasNull10) {
                    if ((memoryBuffer30.readByte() != ((byte)-3))) {
                        double value77 = memoryBuffer30.readDouble();
                        collection15.add(value77);
                    } else {
                        collection15.add(null);
                    }
                } else {
                    double value78 = memoryBuffer30.readDouble();
                    collection15.add(value78);
                }
              }
          }
          java.util.Collection collection16 = collectionSerializer12.onCollectionRead(collection15);
          collection18 = collection16;
      } else {
          java.util.Collection collection17 = collectionSerializer12.read(memoryBuffer30);
          collection18 = collection17;
      }
      return collection18;
  }

  private java.util.Collection readCollection3(MemoryBuffer memoryBuffer31, boolean value79) {
      Serializer serializer8 = classResolver.readClassInfo(memoryBuffer31, list13ClassInfoHolder).getSerializer();
      CollectionSerializer collectionSerializer13 = (CollectionSerializer)serializer8;
      java.util.Collection collection22;
      if (collectionSerializer13.supportCodegenHook()) {
          int size4 = memoryBuffer31.readPositiveVarInt();
          java.util.Collection collection19 = collectionSerializer13.newCollection(memoryBuffer31, size4);
          if ((size4 > 0)) {
              int flags4 = memoryBuffer31.readByte();
              boolean hasNull11 = (flags4 & 2) == 2;
              for (int i14 = 0; i14 < size4; i14+=1) {
                if (hasNull11) {
                    if ((memoryBuffer31.readByte() != ((byte)-3))) {
                        double value80 = memoryBuffer31.readDouble();
                        collection19.add(value80);
                    } else {
                        collection19.add(null);
                    }
                } else {
                    double value81 = memoryBuffer31.readDouble();
                    collection19.add(value81);
                }
              }
          }
          java.util.Collection collection20 = collectionSerializer13.onCollectionRead(collection19);
          collection22 = collection20;
      } else {
          java.util.Collection collection21 = collectionSerializer13.read(memoryBuffer31);
          collection22 = collection21;
      }
      return collection22;
  }

  private void readFields5(MemoryBuffer memoryBuffer29, io.fury.test.bean.BeanA beanA14) {
      if ((memoryBuffer29.readByte() != ((byte)-3))) {
          Serializer serializer6 = classResolver.readClassInfo(memoryBuffer29, list12ClassInfoHolder).getSerializer();
          CollectionSerializer collectionSerializer11 = (CollectionSerializer)serializer6;
          java.util.Collection collection27;
          if (collectionSerializer11.supportCodegenHook()) {
              int size2 = memoryBuffer29.readPositiveVarInt();
              java.util.Collection collection14 = collectionSerializer11.newCollection(memoryBuffer29, size2);
              if ((size2 > 0)) {
                  int flags2 = memoryBuffer29.readByte();
                  boolean sameElementClass0 = (flags2 & 8) != 8;
                  boolean hasNull9 = (flags2 & 2) == 2;
                  if (sameElementClass0) {
                      this.sameElementClassRead(memoryBuffer29, size2, hasNull9, collection14);
                  } else {
                      for (int i12 = 0; i12 < size2; i12+=1) {
                        if (hasNull9) {
                            if ((memoryBuffer29.readByte() != ((byte)-3))) {
                                java.util.Collection collection23 = this.readCollection2(memoryBuffer29, hasNull9);
                                collection14.add(collection23);
                            } else {
                                collection14.add(null);
                            }
                        } else {
                            java.util.Collection collection24 = this.readCollection3(memoryBuffer29, hasNull9);
                            collection14.add(collection24);
                        }
                      }
                  }
              }
              java.util.Collection collection25 = collectionSerializer11.onCollectionRead(collection14);
              collection27 = collection25;
          } else {
              java.util.Collection collection26 = collectionSerializer11.read(memoryBuffer29);
              collection27 = collection26;
          }
          
          io.fury.util.Platform.putObject(beanA14, 92L, ((List)collection27));
      } else {
          io.fury.util.Platform.putObject(beanA14, 92L, null);
      }
  }

  private void readFields6(MemoryBuffer memoryBuffer32, io.fury.test.bean.BeanA beanA15) {
      if ((memoryBuffer32.readByte() != ((byte)-3))) {
          Serializer serializer9 = classResolver.readClassInfo(memoryBuffer32, list14ClassInfoHolder).getSerializer();
          CollectionSerializer collectionSerializer14 = (CollectionSerializer)serializer9;
          java.util.Collection collection31;
          if (collectionSerializer14.supportCodegenHook()) {
              int size5 = memoryBuffer32.readPositiveVarInt();
              java.util.Collection collection28 = collectionSerializer14.newCollection(memoryBuffer32, size5);
              if ((size5 > 0)) {
                  int flags5 = memoryBuffer32.readByte();
                  boolean hasNull12 = (flags5 & 2) == 2;
                  for (int i15 = 0; i15 < size5; i15+=1) {
                    if (hasNull12) {
                        if ((memoryBuffer32.readByte() != ((byte)-3))) {
                            double value84 = memoryBuffer32.readDouble();
                            collection28.add(value84);
                        } else {
                            collection28.add(null);
                        }
                    } else {
                        double value85 = memoryBuffer32.readDouble();
                        collection28.add(value85);
                    }
                  }
              }
              java.util.Collection collection29 = collectionSerializer14.onCollectionRead(collection28);
              collection31 = collection29;
          } else {
              java.util.Collection collection30 = collectionSerializer14.read(memoryBuffer32);
              collection31 = collection30;
          }
          
          io.fury.util.Platform.putObject(beanA15, 72L, ((List)collection31));
      } else {
          io.fury.util.Platform.putObject(beanA15, 72L, null);
      }
  }

  private void readFields7(MemoryBuffer memoryBuffer33, io.fury.test.bean.BeanA beanA16) {
      if ((memoryBuffer33.readByte() != ((byte)-3))) {
          Serializer serializer10 = classResolver.readClassInfo(memoryBuffer33, map1ClassInfoHolder).getSerializer();
          MapSerializer mapSerializer0 = (MapSerializer)serializer10;
          Map map4;
          if (mapSerializer0.supportCodegenHook()) {
              int size6 = memoryBuffer33.readPositiveVarInt();
              Map map0 = mapSerializer0.newMap(memoryBuffer33, size6);
              for (int i16 = 0; i16 < size6; i16+=1) {
                String string1;
                if ((memoryBuffer33.readByte() != ((byte)-3))) {
                    String string = strSerializer.readJava11String(memoryBuffer33);
                    string1 = string;
                } else {
                    string1 = null;
                }
                Object object26;
                if ((memoryBuffer33.readByte() != ((byte)-3))) {
                    Object object25 = beanBFuryCodec_232072312.read(memoryBuffer33);
                    object26 = object25;
                } else {
                    object26 = null;
                }
                map0.put(string1, object26);
              }
              Map map2 = mapSerializer0.onMapRead(map0);
              map4 = map2;
          } else {
              Map map3 = mapSerializer0.read(memoryBuffer33);
              map4 = map3;
          }
          
          io.fury.util.Platform.putObject(beanA16, 84L, map4);
      } else {
          io.fury.util.Platform.putObject(beanA16, 84L, null);
      }
  }

  @Override public final void write(MemoryBuffer buffer, Object obj) {
      io.fury.test.bean.BeanA beanA17 = (io.fury.test.bean.BeanA)obj;
      buffer.grow(23);
      byte[] base = buffer.getHeapMemory();
      this.writeFields(beanA17, buffer, base);
      this.writeFields1(beanA17, buffer);
      this.writeFields2(beanA17, buffer);
      this.writeFields3(beanA17, buffer);
      this.writeFields4(beanA17, buffer);
      this.writeFields5(beanA17, buffer);
      this.writeFields6(beanA17, buffer);
      this.writeFields7(beanA17, buffer);
  }

  @Override public final Object read(MemoryBuffer buffer) {
      io.fury.test.bean.BeanA beanA18 = new io.fury.test.bean.BeanA();
      refResolver.reference(beanA18);
      byte[] heapBuffer = buffer.getHeapMemory();
      buffer.checkReadableBytes(19);
      this.readFields(beanA18, buffer, heapBuffer);
      this.readFields1(buffer, beanA18);
      this.readFields2(buffer, beanA18);
      if ((buffer.readByte() != ((byte)-3))) {
          beanA18.longStringField = strSerializer.readJava11String(buffer);
      } else {
          beanA18.longStringField = null;
      }
      this.readFields3(buffer, beanA18);
      this.readFields4(buffer, beanA18);
      this.readFields5(buffer, beanA18);
      this.readFields6(buffer, beanA18);
      this.readFields7(buffer, beanA18);
      return beanA18;
  }

}
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/936/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/938,https://api.github.com/repos/apache/fury/issues/938,fury,1927051306,938,[Java] varint interpreter modoe out-of-bound crash ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-04T22:05:35Z,2023-10-04T22:12:29Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
Fury use long to merge 5 bytes writing into one operation, but it just increase index by 4 bytes for interpreter mode. JIT mode has increased index by 8 bytes.  If a number happen to be encoded using 5 bytes and the buffer left is less than 8 bytes, fury using unsafe.putLong, which may crash the jvm.

The early `G1ParScanThreadState::copy_to_survivor_space` crash  in #923 may be caused by this bug too.

**Expected behavior**
Grow 8 bytes early.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/938/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/939,https://api.github.com/repos/apache/fury/issues/939,fury,1927074120,939,[Java][Refactor] put together all fury config into one package,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-04T22:30:41Z,2023-10-04T22:43:15Z,"## Is your feature request related to a problem? Please describe.
Currently fury has `Language`/`FuryBuilder`/`CompatibleMode`/ `Config` class for configure fury and query fury config. In the future we will have string encoding and long encoding config too.

It would be better to put all config into one package, so users can read just one package to know what config can be used to tune fury.

## Describe the solution you'd like
put together all fury config into one `io.fury.config` package
## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/939/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/941,https://api.github.com/repos/apache/fury/issues/941,fury,1927088283,941,[Java][Protocol] New Long Encoding Algorithm: SLI,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-04T22:48:09Z,2023-10-05T08:18:56Z,"## Is your feature request related to a problem? Please describe.
Currently fury long compression use following Algorithm, I name it as `Fury PVL(Progressive Variable-length Long) Encoding:`:
- size: 1~9 byte
- format:
   - positive long format: first bit in every byte indicate whether has next byte. if first bit is set i.e. `b & 0x80 == 0x80`, then next byte should be read util first bit is unset.
   - Negative number will be converted to positive number by ` (v << 1) ^ (v >> 63)` to reduce cost of small negative numbers.

This is time-consuming if long is bigger enough. COnsidering if users use long for number type, it can'bt expressed using int mostly, so we can simpilify the long encoding by a new pprotocol.


## Describe the solution you'd like
Add new long encoding format, I name it as `Fury SLI(Small long as int) Encoding`:
- size: 1~9 byte
- format
    - If long is in [-1073741824, 1073741823], encode as 4 bytes int: `| little-endian: ((int) value) << 1 |`
    - Otherwise write as 9 bytes: `| 0b1 | little-endian 8bytes long |`


","{""url"": ""https://api.github.com/repos/apache/fury/issues/941/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/944,https://api.github.com/repos/apache/fury/issues/944,fury,1927866674,944,[Java] use varint for class id to reduce space cost,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T09:54:59Z,2023-10-05T10:03:27Z,"## Is your feature request related to a problem? Please describe.

Currently class id is written as 3 bytes:
```java
| flag byte | two bytes short class id |
```
This is wasteful for space. For string/int/long/etc. classes, class id can be written using 1 bytes.

With this PR, class id will be
<!-- Please give a short brief about these changes. -->


## Describe the solution you'd like
New class id encoding format:
- use varint for class id encoding to reduce java class writing space cost.
- Use little endian order for class id encoding
- Use bit 0 as flag to indicate the class will be written using class id
- When reading, read one byte first, since writting use little endian, the bit 0 of read byte can be used as a flag to determine whether this class is written using class id. If so, read varint and `>>1` to get real class id. Otherwise, read class by classname instead.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/944/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/946,https://api.github.com/repos/apache/fury/issues/946,fury,1927969897,946,[Java] Collection/Map  jit/interpreter protocol inconsisitent for generics instantiated subclass,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T10:38:25Z,2023-10-05T12:14:01Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**

For subclass whose kv type are instantiated already, such as `Subclass implements Map<String, Long>`, or for subclass whose element type are instantiated already, such as `Subclass extends ArrayList<String>`. 
Fury support auto extract those generics for serializaiton optmization. But the jit builder can not know actual collection/map types ahead, so it can't infer such kv/element types. Thus  jit/interpreter protocol will be inconsisitent for  generics instantiated subclass.

When async compilation mode is enabled, the deserialization may raise error for such  generics instantiated subclass

**Expected behavior**
Make Collection/Map  jit/interpreter protocol consisitent for generics instantiated subclass

**Environment (please complete the following information):**
Fury versions before commit 4b135c5acc5decf19446f6296e60998dff93b461","{""url"": ""https://api.github.com/repos/apache/fury/issues/946/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/948,https://api.github.com/repos/apache/fury/issues/948,fury,1928032850,948,[Go] add golang ci,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T11:15:40Z,2023-10-05T11:45:03Z,"## Is your feature request related to a problem? Please describe.
add github ci for fury go test

## Describe the solution you'd like
add github ci for fury go test
","{""url"": ""https://api.github.com/repos/apache/fury/issues/948/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/949,https://api.github.com/repos/apache/fury/issues/949,fury,1928033903,949,[Go] add util to fury go serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T11:16:11Z,2023-10-05T11:45:04Z,"## Is your feature request related to a problem? Please describe.
 add util to fury go serialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/949/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/951,https://api.github.com/repos/apache/fury/issues/951,fury,1928095905,951,[Go] add fury go buffer util,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T11:48:49Z,2023-10-05T11:53:14Z,"## Is your feature request related to a problem? Please describe.
add fury go buffer util","{""url"": ""https://api.github.com/repos/apache/fury/issues/951/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/953,https://api.github.com/repos/apache/fury/issues/953,fury,1928122426,953,[Go] Fury go serialization framework,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T12:03:53Z,2023-10-05T12:06:49Z,"## Is your feature request related to a problem? Please describe.
Add Fury go serialization framework

## Describe the solution you'd like
Serialization framework includes following classes:
- Fury: serialization entrance for the users
- ClassResolver: read/write class
- ReferenceResolver: tracking reference
- EnumString writer: write/read duplciated string only once

## Additional context
#70 
#495 
#496 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/953/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/955,https://api.github.com/repos/apache/fury/issues/955,fury,1928131435,955,[Go] Add serializers for common go types,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T12:09:08Z,2023-10-05T12:21:30Z,"## Is your feature request related to a problem? Please describe.
Add serializers for common go types based on fury go serializaton framework #953 


## Additional context
#953 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/955/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/958,https://api.github.com/repos/apache/fury/issues/958,fury,1928577325,958,[Go] support map serialization for golang,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T15:37:55Z,2023-10-05T15:39:07Z,"## Is your feature request related to a problem? Please describe.
support map serialization for golang

## Describe the solution you'd like
Implement fury map serialization protocol for go

## Additional context
#167
#502","{""url"": ""https://api.github.com/repos/apache/fury/issues/958/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/960,https://api.github.com/repos/apache/fury/issues/960,fury,1928585816,960,[Go] support golang slice serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T15:43:06Z,2023-10-05T15:45:36Z,"## Is your feature request related to a problem? Please describe.
support golang slice serialization

## Describe the solution you'd like
Implement fury list serialization for fury go

## Additional context
#147","{""url"": ""https://api.github.com/repos/apache/fury/issues/960/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/962,https://api.github.com/repos/apache/fury/issues/962,fury,1928606731,962,[Go] Support set serialization for golang,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T15:53:21Z,2023-10-05T15:53:48Z,"## Is your feature request related to a problem? Please describe.
Support set serialization for golang

## Describe the solution you'd like
Golang doesn't have set type, we can use map instead:
```go
type GenericSet map[interface{}]bool
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/962/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/964,https://api.github.com/repos/apache/fury/issues/964,fury,1928621163,964,[Go] Implement struct serialization for go,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:01:23Z,2023-10-05T16:04:16Z,"## Is your feature request related to a problem? Please describe.
Implement struct serialization for go

## Describe the solution you'd like
Implement struct serialization pprotocol for fury go

## Additional context
#482
#523","{""url"": ""https://api.github.com/repos/apache/fury/issues/964/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/966,https://api.github.com/repos/apache/fury/issues/966,fury,1928630810,966,[Go] Add tests for ref tracking,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:07:16Z,2023-10-05T16:07:37Z,"## Is your feature request related to a problem? Please describe.
Crurrenly fury go ref tracking lacks tests.

## Describe the solution you'd like
Add ref tracking tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/966/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/968,https://api.github.com/repos/apache/fury/issues/968,fury,1928638119,968,[Go] add tests for fury go type dispatch,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:10:21Z,2023-10-05T16:10:47Z,"## Is your feature request related to a problem? Please describe.
Currently fury go type dispatch lacks tests. Type dispatch is critical for serialization, and need extensive tests.

## Describe the solution you'd like
Add  type dispatch tests for fury go
","{""url"": ""https://api.github.com/repos/apache/fury/issues/968/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/970,https://api.github.com/repos/apache/fury/issues/970,fury,1928645062,970,[Go]  add fury serialization tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:13:31Z,2023-10-05T16:13:58Z,"## Is your feature request related to a problem? Please describe.
We've already have tests for fury components such as ref tracking, type dispatch. But we don;t have tests for serialization.

## Describe the solution you'd like
Add tests for serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/970/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/972,https://api.github.com/repos/apache/fury/issues/972,fury,1928662220,972,[Go] add tests to valdiate protocol consistency between fury go and python/java,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:25:00Z,2023-10-05T16:34:18Z,"## Is your feature request related to a problem? Please describe.
add tests to valdiate protocol consistency between fury go and python/java

## Describe the solution you'd like
Make fury go tests write data to file, then execute pyfury test module to validate the consistency,

## Additional context
#523","{""url"": ""https://api.github.com/repos/apache/fury/issues/972/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/974,https://api.github.com/repos/apache/fury/issues/974,fury,1928681564,974,[Go] rename reference to ref,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:38:21Z,2023-10-05T16:39:16Z,"## Is your feature request related to a problem? Please describe.
Currently fury go use refrence for ref tracking, which is not consistent with other languages, which uses `ref`.

## Describe the solution you'd like
Rename reference to ref..

## Additional context
#599
#629","{""url"": ""https://api.github.com/repos/apache/fury/issues/974/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/976,https://api.github.com/repos/apache/fury/issues/976,fury,1928696257,976,[Java] add jdk 21 tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-05T16:48:06Z,2023-10-05T16:51:49Z,"## Is your feature request related to a problem? Please describe.
JDK21 has been released, we should add tests for jdk 21

## Describe the solution you'd like
add tests for jdk 21

## Additional context
#901","{""url"": ""https://api.github.com/repos/apache/fury/issues/976/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/979,https://api.github.com/repos/apache/fury/issues/979,fury,1929642803,979,[Java] Add jdk21 CI,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-06T08:01:28Z,2023-10-06T08:08:34Z,"## Is your feature request related to a problem? Please describe.
Add oracle JDK21 CI

## Describe the solution you'd like
Install JDK21 by:
```yml
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'oracle'
```

WE didn't switch all jdk release to zulu, since oracle jdk is used more frequently.
## Additional context
#976 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/979/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/980,https://api.github.com/repos/apache/fury/issues/980,fury,1929784509,980,[Java] Optimize sli long read/write,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-06T09:34:35Z,2023-10-06T09:38:49Z,"## Is your feature request related to a problem? Please describe.
There are som rebundunt memory read/write in current SLI long encoding, which can be optimized.

## Describe the solution you'd like
- Use long for `HALF_MAX_INT_VALUE/HALF_MIN_INT_VALUE` to avoid upvert to long at runtime
- Cache `heapMemory` into local variable table

## Additional context
#941 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/980/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/982,https://api.github.com/repos/apache/fury/issues/982,fury,1929839614,982,[Java] auto generic cast for fury deserialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-10-06T10:09:26Z,2023-10-06T14:15:43Z,"## Is your feature request related to a problem? Please describe.
Currently fury deserialize method return `Object` type, if users serialized an object of type `Foo`, users needs to cast to `Foo` manually:

```java
byte[] d = fury.serialize(foo);
Object o = fury.deserialize(d);
Foo o1 = (Foo) o;
```

This is inconvenient, and if there are generics such as:
```java
Foo<A> foo = xxx;
byte[] d = fury.serialize(foo);
Object o = fury.deserialize(d);
Foo<A> foo o1 = (Foo<A> foo) o;
```
the cast will issue a javac warnings.

Then users will need to warp an util like this:
```java
@SuppressWarnings(""unchecked"")
public static <T> T deserialize(byte[] b) {
  Object o = fury.deserialize(b);
  return (T) o;
}
```

We should do this for users.

## Describe the solution you'd like

Implement cast in fuyr:
```java
@SuppressWarnings(""unchecked"")
public static <T> T deserialize(byte[] b) {
  Object o = fury.deserialize(b);
  return (T) o;
}
```


Note if users declare error type, the deserialization will raise ClassCastException:
```java
Foo<A> foo = xxx;
byte[] d = fury.serialize(foo);
Bar o = fury.deserialize(d); // raise ClassCastException.
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/982/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/982,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oVS3R,fury,1750412753,982,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-06T11:00:44Z,2023-10-06T11:00:44Z,"This will make type infer ambigious
![image](https://github.com/alipay/fury/assets/12445254/63cdf23c-6deb-480d-85df-4eded2ccc86d)

Maybe we should add a new method instead of update existing methods","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oVS3R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/982,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oVT4n,fury,1750416935,982,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-06T11:04:15Z,2023-10-06T11:04:15Z,"Maybe add a new mthod instead?
```java
  public <T> T deserializeTyped(byte[] bytes) {
    return (T) deserialize(MemoryUtils.wrap(bytes), null);
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oVT4n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/984,https://api.github.com/repos/apache/fury/issues/984,fury,1930322622,984,[RFC][Java] Implement a highly optimized String compressioner ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-10-06T14:42:01Z,2024-04-16T00:43:10Z,"## Is your feature request related to a problem? Please describe.

Currently utf8 encoding in jdk are not efficient enough and write it to fury MemoryBuffer needs an extra copy since those encoder return a byte array:
- `java.lang.String#encodeUTF8`/`java.lang.String#encodeUTF8_UTF16`
- `sun.nio.cs.UTF_8.Encoder#encodeArrayLoop`

We need a highly optimized encoder for fury to avoid the cost of string serialization.
 
## Describe the solution you'd like
- Detect latin length first using `superword`, then encode those chars by latin, encode remaining chars using utf8
- Latin length encoded in coder too, remaining utf8 chars length encoded using varint.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/984/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/984,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56qzWi,fury,2058040738,984,NA,heliang666s,147408835,,,NA,2024-04-16T00:43:09Z,2024-04-16T00:43:09Z,"hello,I am new in there,please assign me,thanks~","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56qzWi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/994,https://api.github.com/repos/apache/fury/issues/994,fury,1932882391,994,[Java] enable zero-copy in `serialize(OutputStream)`,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-10-09T11:44:21Z,2024-06-12T11:59:02Z,"## Is your feature request related to a problem? Please describe.
For large graph, current `serialize(OutputStream)` will serialize data into a binary heap buffer, then write it into `OutputStream`, which is not really streaming.

Large graph will have many binary buffers inside, serializing without streaming will introduce an extra copy, and can't overlap network. If we enable  fury zero-copy support, all binary buffer will be handled separately without writting it into the heap buffer, which will reduce memory copy, and serialization time. And then we can send in-band buffers and all out-of-band buffers chunk by chunk to speed up the transfer.


## Describe the solution you'd like
Make `serialize(OutputStream)` use bufferCallback to capture binary buffer:
```java
List<BufferObject> buffers = new ArrayList<>();
serialize(outputStream, obj, o -> {
  buffers.add(o);
  return false;
});
buffers.forEach(bufferObject -> {
  int size = bufferObject.totalBytes();
  byte[] sizeBytes = toBytes(size);
  outputStream.write(sizeBytes);
  bufferObject.writeTo(outputStream);
});
```

Potential disadvantages:
If all binary buffers in object graph are small objects, then the serialization will be slightly slower.


","{""url"": ""https://api.github.com/repos/apache/fury/issues/994/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/994,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6A6h2W,fury,2162826646,994,NA,l3303,3932152,,,NA,2024-06-12T11:59:02Z,2024-06-12T11:59:02Z,"This feature is very necessary.
Refer to protostuff implemetation, it will alloc a very small byte arry(default to 4096) to buffer binary during serialization, when buffer is full then write all into target output stream. This may solve your concern about perfermance issue.

Back to fury, I found that even fury stream deseialization(FuryInputStream) is not real streaming as well. It will read all binary into MemoryBuffer then process deserialization. This may waste memory when object is big.
My way to optimize this is to read bytes only within MemoryBuffer's size each time, then process deseialization, once buffer is not enough then refill buffer to its size. I've implemented a demo base on this solution and works in my situation.

Looking forward fury can implement real streaming in serialization & deserialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6A6h2W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/996,https://api.github.com/repos/apache/fury/issues/996,fury,1934230987,996,[java][0.2.0] java.lang.NoclassDefFoundError: com/google/common/base/Preconditions,jiangguilong2000,5009933,Allen Jiang,41157121@qq.com,CLOSED,2023-10-10T03:13:43Z,2023-10-29T12:45:30Z,"when junittest case use the serializeJavaObject API,it throws  exception as following:
> java.lang.NoclassDefFoundError: com/google/common/base/Preconditions
at io.fury.type.Type.<init>(Type.java:169)
at io.fury.type.Type.<clinit>(Type.java:28
at io.fury.Fury.<clinit>(Fury.java:85)
at io.gamioo.sandbox.ProtoTest.beforeAll(ProtoTest.java:44) <31 internal lines>
at java.base/java.util.ArrayList.forEach(ArrayList,java:1541) <23 internal lines>Create breakpoint : com.google.common.basePreconditions <2 internal lines>+Caused by: java.lang.ClassNotFoundExceptionat java.base/javalang.classLoader.loadclass(CassLoader,java:522)
... 59 more

**I hope fury can get rid of this dependency about guava**

```java
Fury fury = Fury.builder().withLanguage(Language.JAVA).withRefTracking(true).requireClassRegistration(false).withNumberCompressed(false).build();
 byte[] bytes = fury.serializeJavaObject(skillFire_s2C_msg);

```

fury version:0.2.0
guava version: 

>  implementation group: 'com.google.guava', name: 'guava', version: '32.1.1-jre'


jdk:

> java -version
openjdk version ""11.0.16.1-internal"" 2022-08-12
OpenJDK Runtime Environment TencentKonaJDK (build 11.0.16.1-internal+2)
OpenJDK 64-Bit Server VM TencentKonaJDK (build 11.0.16.1-internal+2, mixed mode)

gradle:

------------------------------------------------------------
Gradle 6.8.3
------------------------------------------------------------

Build time:   2021-02-22 16:13:28 UTC
Revision:     9e26b4a9ebb910eaa1b8da8ff8575e514bc61c78

Kotlin:       1.4.20
Groovy:       2.5.12
Ant:          Apache Ant(TM) version 1.10.9 compiled on September 27 2020
JVM:          11.0.16.1-internal (Tencent 11.0.16.1-internal+2)
OS:           Windows 11 10.0 amd64

","{""url"": ""https://api.github.com/repos/apache/fury/issues/996/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/996,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5okGU3,fury,1754293559,996,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-10T03:26:45Z,2023-10-10T03:26:45Z,"This is a bug in gradle6. You can upgrade gradle to gradle 7. Or add following configs to build.gradle: 
```groovy
sourceSets.all {
  configurations.getByName(runtimeClasspathConfigurationName) {
    attributes.attribute(Attribute.of(""org.gradle.jvm.environment"", String), ""standard-jvm"")
  }
  configurations.getByName(compileClasspathConfigurationName) {
    attributes.attribute(Attribute.of(""org.gradle.jvm.environment"", String), ""standard-jvm"")
  }
}
```

See https://github.com/google/guava/issues/6612 for more details.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5okGU3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/997,https://api.github.com/repos/apache/fury/issues/997,fury,1934851374,997,[Java] fury 0.2.0 does not work properly in dubbo,T-baby,7859785,Andy,,CLOSED,2023-10-10T09:10:59Z,2023-10-11T01:51:30Z,"**Describe the bug**
```java
Caused by: java.lang.NoSuchMethodError: 'io.fury.Fury$FuryBuilder io.fury.Fury.builder()'
 at org.furyio.serialization.dubbo.FurySerialization.lambda$null$0(FurySerialization.java:23)
 at io.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:93)
 at io.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:65)
 at org.furyio.serialization.dubbo.BaseFurySerialization.serialize(BaseFurySerialization.java:27)
 at org.apache.dubbo.common.serialize.DefaultSerializationExceptionWrapper.serialize(DefaultSerializationExceptionWrapper.java:51)
 at org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:269)
 at org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:79)
 at org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:51)
 at org.apache.dubbo.remoting.transport.netty4.NettyChannel.send(NettyChannel.java:192)
 ... 120 more
```

**Expected behavior**
After fury is upgraded to 0.2.0, dubbo server and caller will give an error when using fury as serialization and deserialization.
dubbo-serialization-fury version is `0.1.2`.

It may be related to the position adjustment of CompatibleMode class after fury upgrade. https://github.com/fury-project/dubbo-serialization-fury/pull/13

**Environment (please complete the following information):**
openjdk version ""17.0.8.1"" 2023-08-24
IBM Semeru Runtime Open Edition 17.0.8.1 (build 17.0.8.1+1)
Eclipse OpenJ9 VM 17.0.8.1 (build openj9-0.40.0, JRE 17 Mac OS X amd64-64-Bit Compressed References 20230824_513 (JIT enabled, AOT enabled)
OpenJ9   - d12d10c9e
OMR      - e80bff83b
JCL      - 8ecf238a124 based on jdk-17.0.8.1+1)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/997/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/997,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ol_pt,fury,1754790509,997,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-10T09:16:28Z,2023-10-10T09:16:28Z,"Hi @T-baby , thanks for filing this issue, I just merged your PR https://github.com/fury-project/dubbo-serialization-fury/pull/13, and released new `dubbo-serialization-fury` version: https://github.com/fury-project/dubbo-serialization-fury/releases/tag/v0.2.0

The jar has been released to maven centrao repo, please try it out, let us know if you have further issues.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ol_pt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/997,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5os8Ck,fury,1756610724,997,NA,T-baby,7859785,Andy,,NA,2023-10-11T01:51:29Z,2023-10-11T01:51:29Z,"I have tested by myself, `dubbo-serialization-fury` and `fury-core` can be used normally when their dependencies are 0.2.0.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5os8Ck/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/998,https://api.github.com/repos/apache/fury/issues/998,fury,1935021190,998,[Java] Deserialization fails when serializer is package protected,knutwannheden,408765,Knut Wannheden,knut.wannheden@gmail.com,CLOSED,2023-10-10T10:36:23Z,2023-10-19T05:21:35Z,"Complete test case:

```java
package test;

import io.fury.Fury;
import io.fury.memory.MemoryBuffer;
import io.fury.serializer.Serializer;

import java.util.UUID;

public class FuryTest {

    public static void main(String[] args) {
        Fury fury = Fury.builder()
                .withRefTracking(true)
                .requireClassRegistration(false)
                .build();
        fury.registerSerializer(UUID.class, new UUIDSerializer(fury));

        DomainObject obj = new DomainObject();
        obj.id = UUID.randomUUID();
        byte[] serialized = fury.serialize(obj);

        DomainObject obj2 = (DomainObject) fury.deserialize(serialized);
    }
}

class DomainObject {
    UUID id;
}

class UUIDSerializer extends Serializer<UUID> {
    public UUIDSerializer(Fury fury) {
        super(fury, UUID.class);
    }

    @Override
    public UUID read(MemoryBuffer buffer) {
        return new UUID(buffer.readLong(), buffer.readLong());
    }

    @Override
    public void write(MemoryBuffer buffer, UUID value) {
        buffer.writeLong(value.getMostSignificantBits());
        buffer.writeLong(value.getLeastSignificantBits());
    }
}
```

Declaring the `UUIDSerializer` as public (nested or top-level) fixes the issue.","{""url"": ""https://api.github.com/repos/apache/fury/issues/998/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5onAIK,fury,1755054602,998,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-10T11:00:05Z,2023-10-10T11:00:05Z,"I can reproduce it:
```java
Exception in thread ""main"" java.lang.IllegalAccessError: failed to access class io.fury.UUIDSerializer from class io.fury.DomainObjectFuryRefCodec_31953163 (io.fury.UUIDSerializer is in unnamed module of loader 'app'; io.fury.DomainObjectFuryRefCodec_31953163 is in unnamed module of loader io.fury.util.ClassLoaderUtils$ByteArrayClassLoader @2974f221)
	at io.fury.DomainObjectFuryRefCodec_31953163.<init>(DomainObjectFuryRefCodec_31953163.java:40)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at io.fury.serializer.Serializers.newSerializer(Serializers.java:74)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1154)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1095)
	at io.fury.Fury.writeRef(Fury.java:283)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
```

Seems it's related to java module? JDK 16+ enabled module strong encapsulation.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5onAIK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5onHsS,fury,1755085586,998,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-10T11:11:02Z,2023-10-10T11:11:02Z,"It's a different mistake on JDK17+, after fix this, I can get your exception:
```java
Exception in thread ""main"" java.lang.IllegalAccessError: failed to access class io.fury.UUIDSerializer from class io.fury.DomainObjectFuryRefCodec_31953163 (io.fury.UUIDSerializer is in unnamed module of loader 'app'; io.fury.DomainObjectFuryRefCodec_31953163 is in unnamed module of loader io.fury.util.ClassLoaderUtils$ByteArrayClassLoader @2974f221)
	at io.fury.DomainObjectFuryRefCodec_31953163.<init>(DomainObjectFuryRefCodec_31953163.java:40)
	at io.fury.serializer.Serializers.newSerializer(Serializers.java:79)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1154)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1095)
	at io.fury.Fury.writeRef(Fury.java:283)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5onHsS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_dF,fury,1769994053,998,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-19T05:21:35Z,2023-10-19T05:21:35Z,"Hi, we've just released fury 0.2.1: https://github.com/alipay/fury/releases/tag/v0.2.1, it should fixed this issue. Could you try it out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_dF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1003,https://api.github.com/repos/apache/fury/issues/1003,fury,1938271591,1003,"[Java]  Serializing record with ""String"" member fails with NPE",LumnitzF,9950001,Fritz Lumnitz,,CLOSED,2023-10-11T17:00:18Z,2023-10-19T05:21:58Z,"**Describe the bug**
Serializing a record with a String member fails with an NPE

**Expected behavior**
Serialization works as expected

**To Reproduce**
See this test:
```java
import org.junit.jupiter.api.Test;

import io.fury.Fury;

class MyTest {

	@Test
	void foo() {
		Fury fury = Fury.builder().build();
		fury.register(Foo.class);
		byte[] serialized = fury.serialize(new Foo(""foo"")); // fails
		Object deserialized = fury.deserialize(serialized);
		System.out.println(deserialized);
	}

	private record Foo(String foo) {
	}

}
```

Stacktrace:
```
java.lang.RuntimeException: Create sequential serializer failed, 
class: class MyTest$Foo

	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:46)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:943)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:941)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:896)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:804)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1153)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1095)
	at io.fury.Fury.writeRef(Fury.java:283)
	at io.fury.Fury.serialize(Fury.java:235)
	at io.fury.Fury.serialize(Fury.java:183)
	at MyTest.foo(MyTest.java:11)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: java.lang.NullPointerException: Cannot read field ""f0"" because ""methodInfo"" is null
	at io.fury.builder.CodecBuilder.getRecordFieldValue(CodecBuilder.java:201)
	at io.fury.builder.CodecBuilder.getFieldValue(CodecBuilder.java:151)
	at io.fury.builder.ObjectCodecBuilder.lambda$serializeGroup$9f8a61a4$1(ObjectCodecBuilder.java:186)
	at io.fury.builder.ObjectCodecBuilder.serializeGroup(ObjectCodecBuilder.java:195)
	at io.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:159)
	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:204)
	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:65)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:141)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:89)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:40)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:43)
	... 14 more
```

**Environment:**
Fury 0.2.0, Windows 10, Eclipse Adoptium 17.0.8.7
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1003/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1003,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oy-bG,fury,1758193350,1003,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-11T17:53:41Z,2023-10-11T17:53:41Z,"Thanks for creating this issue, I fixed it in https://github.com/alipay/fury/pull/1004, could you try it out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5oy-bG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1003,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_m2,fury,1769994678,1003,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-19T05:21:58Z,2023-10-19T05:21:58Z,"Hi, we've just released fury 0.2.1: https://github.com/alipay/fury/releases/tag/v0.2.1 .It should have fixed this issue. Could you try it out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_m2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1005,https://api.github.com/repos/apache/fury/issues/1005,fury,1939053930,1005,[Java][0.2.0]java.lang.NoClassDefFoundError: org/springrain/org (wrong name: org/springrain/Org),springrain,4935705,springrain,chunanyong@163.com,CLOSED,2023-10-12T02:19:21Z,2023-10-19T05:22:14Z,"**Describe the bug**
Serialize the Org class name exception, If the class name is not Org, it can be serialized normally


**Expected behavior**
Normal serialization

**To Reproduce**
```java
package org.springrain;

import java.io.Serializable;
import java.util.List;

public class Org implements Serializable {
    private static final long serialVersionUID = 1L;
    //constructor
    public Org() {
    }
    List<Org> children;

    public List<Org> getChildren() {
        return children;
    }
    public void setChildren(List<Org> children) {
        this.children = children;
    }

}
```
```java
package org.springrain;

import io.fury.Fury;
import io.fury.ThreadSafeFury;
import io.fury.config.CompatibleMode;
import io.fury.config.Language;

public class Main {
    public static void main(String[] args) {
          ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                // Allow to deserialize objects unknown types,more flexible but less secure.
                .requireClassRegistration(false)
                .withDeserializeUnexistedClass(true)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withRefTracking(true)
                // .withAsyncCompilation(true)
                .buildThreadSafeFury();

          // If the class name is not Org, it can be serialized normally
          fury.serialize(new Org());
    }
}
```

**Screenshots**
![image](https://github.com/alipay/fury/assets/4935705/b6330af3-b218-4e94-9da5-4391957ec675)

**Environment (please complete the following information):**
```
openjdk 21 2023-09-19 LTS
OpenJDK Runtime Environment Corretto-21.0.0.35.1 (build 21+35-LTS)
OpenJDK 64-Bit Server VM Corretto-21.0.0.35.1 (build 21+35-LTS, mixed mode, sharing)
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1005/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1005,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o4hn2,fury,1759648246,1005,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-12T13:48:02Z,2023-10-12T13:48:02Z,"Hi @springrain , thanks for report this bug. Ican reproduce it, adn it seems a bug in janino https://github.com/janino-compiler/janino/issues/165. I believe I fixed it in #1006, please try it out","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5o4hn2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1005,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_u3,fury,1769995191,1005,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-19T05:22:14Z,2023-10-19T05:22:14Z,"Hi, we've just released fury 0.2.1: https://github.com/alipay/fury/releases/tag/v0.2.1 .It should have fixed this issue. Could you try it out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pf_u3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1008,https://api.github.com/repos/apache/fury/issues/1008,fury,1946952225,1008,[Java]: Performance degeneration when serializing large object,DemonJun,21258148,DemonJun,,CLOSED,2023-10-17T09:19:09Z,2023-10-23T13:57:29Z,"Fury took 200ms, fastjson2 took only 100ms, fury is slower than fastjson2 for such objects:
```java
@Test
  void test() {
    Map<String, Object> data = Maps.newHashMapWithExpectedSize(50);
    Fury fury =
        Fury.builder()
            .withLanguage(Language.JAVA)
            .withClassLoader(Thread.currentThread().getContextClassLoader())
            // enable referecne tracking for shared/circular reference.
            // Disable it will have better performance if no duplciate reference.
            .withRefTracking(false)
            // compress int/long for smaller size
            .withNumberCompressed(true)
            .withStringCompressed(true)
            .withMetaContextShare(false)
            .registerGuavaTypes(true)
            .build();
    fury.register(RecordEvent.class);
    fury.register(RelationAggregateResult.class);

    for (int j = 0; j < 50; j++) {
      data.put(RandomUtil.randomString(10), RandomUtil.randomString(500));
    }
    RecordEvent event = new RecordEvent();
    event.setData(data);
    RelationAggregateResult records = new RelationAggregateResult();
    records.setEvents(Lists.newArrayListWithCapacity(1024));
    for (int i = 0; i < 1024; i++) {
      records.getEvents().add(event);
    }
    Stopwatch stopwatch = Stopwatch.createStarted();
    byte[] furyJavaBytes = fury.serializeJavaObject(records);
    System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS));

    stopwatch.reset();
    stopwatch.start();
    byte[] jsonBytes = JSON.toJSONBytes(records);
    System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS));
  }

  @Data
  @Accessors(chain = true)
  @NoArgsConstructor
  static class RelationAggregateResult implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<RecordEvent> events;
  }

  @Data
  @Accessors(chain = true)
  static class RecordEvent implements Serializable {
    private static final long serialVersionUID = 7139659287564529385L;

    private Map<String, Object> data;
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1008/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1008,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pRC1A,fury,1766075712,1008,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-17T09:55:14Z,2023-10-17T09:55:14Z,Maybe related to #925 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pRC1A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1008,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pRkXk,fury,1766213092,1008,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-17T11:23:01Z,2023-10-17T11:23:01Z,"Seems you didn' do the warmup, and you serialize the object only once. Fury will generate the serializer code for the first time serialization, which will be a little slow. Could you warm up and test it again?  I test your object with 100 timex serialization, fury is 2x faster than fastjson2:
![image](https://github.com/alipay/fury/assets/12445254/77432983-0081-48f5-a926-fb3c8492afdf)

```java
byte[] furyJavaBytes = fury.serializeJavaObject(records);
Stopwatch stopwatch = Stopwatch.createStarted();
for (int i = 0; i < 100; i++) {
  fury.serializeJavaObject(records);
}
System.out.println(""fury:""+ stopwatch.elapsed(TimeUnit.MILLISECONDS));

stopwatch.reset();
JSONWriter.Feature[] features = {
  JSONWriter.Feature.WriteClassName,
  JSONWriter.Feature.FieldBased,
  JSONWriter.Feature.WriteNulls,
  JSONWriter.Feature.NotWriteHashMapArrayListClassName,
  JSONWriter.Feature.WriteNameAsSymbol,
  JSONWriter.Feature.BeanToArray};
byte[] jsonBytes = JSONB.toBytes(records, features);
stopwatch.start();
for (int i = 0; i < 100; i++) {
  JSONB.toBytes(records, features);
}
System.out.println(""fastjson2:"" + stopwatch.elapsed(TimeUnit.MILLISECONDS));
```

Or you can enable async compilation, which will make the compilation async in another thread, and make the serialization of first time faster.:

![image](https://github.com/alipay/fury/assets/12445254/0d9c27cd-7da8-4f78-82d8-29fd5bbfc7fd)
```java
    Fury fury =
      Fury.builder()
        .withLanguage(Language.JAVA)
        .withClassLoader(Thread.currentThread().getContextClassLoader())
        // enable referecne tracking for shared/circular reference.
        // Disable it will have better performance if no duplciate reference.
        .withRefTracking(false)
        // compress int/long for smaller size
        .withNumberCompressed(true)
        .withStringCompressed(true)
        .withMetaContextShare(false)
        .registerGuavaTypes(true)
        .withAsyncCompilation(true)
        .build();
    fury.register(RecordEvent.class);
    fury.register(RelationAggregateResult.class);
    Stopwatch stopwatch = Stopwatch.createStarted();
    byte[] furyJavaBytes = fury.serializeJavaObject(records);
    System.out.println(""fury:""+ stopwatch.elapsed(TimeUnit.MILLISECONDS));

    stopwatch.reset();
    JSONWriter.Feature[] features = {
      JSONWriter.Feature.WriteClassName,
      JSONWriter.Feature.FieldBased,
      JSONWriter.Feature.WriteNulls,
      JSONWriter.Feature.NotWriteHashMapArrayListClassName,
      JSONWriter.Feature.WriteNameAsSymbol,
      JSONWriter.Feature.BeanToArray};
    stopwatch.start();
    byte[] jsonBytes = JSONB.toBytes(records, features);
    System.out.println(""fastjson2:"" + stopwatch.elapsed(TimeUnit.MILLISECONDS));
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pRkXk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1012,https://api.github.com/repos/apache/fury/issues/1012,fury,1950019240,1012,[Doc] Improve the README,caicancai,77189278,Cancai Cai,,CLOSED,2023-10-18T15:22:44Z,2023-12-21T09:18:13Z,"## Is your feature request related to a problem? Please describe.
At present, the README layout is more chaotic, and I will reformat it to make the README clearer

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1012/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1012,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pbKP1,fury,1768727541,1012,NA,caicancai,77189278,Cancai Cai,,NA,2023-10-18T15:23:17Z,2023-10-18T15:23:17Z,cc @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5pbKP1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1014,https://api.github.com/repos/apache/fury/issues/1014,fury,1951359752,1014,[Java] native object copy support,DemonJun,21258148,DemonJun,,OPEN,2023-10-19T06:08:36Z,2023-11-27T03:06:11Z,"During data stream processing, it is often necessary to deep copy data for multiple times, especially when there are too many class attributes and subclasses, manual deep copying is too much trouble. Similarly：
```java
@SuppressWarnings(""unchecked"")
public static <T> T clone(T ob) {
  MemoryBuffer memoryBuffer = getAndClearMb();

  Fury fury = get();

  fury.serializeJavaObject(memoryBuffer, ob);

  return (T) fury.deserializeJavaObject(memoryBuffer, ob.getClass());
}
```
It would be nice to be able to use zero-copy to further improve performance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1014/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1014,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5poD1n,fury,1772109159,1014,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T05:33:36Z,2023-10-20T05:33:36Z,"One of the solution is adding a copy interface to `io.fury.Serializer`:
```java
  public T copy(T value) {
    throw new UnsupportedOperationException(String.format(""Copy for %s is not supported"", value.getClass()));
  }
```

For immutable types such as `String/java.time.*`, this implementation just return the passed object. For mutable object such as `ArrayList/HashMap/POJO`, we copy the data recursive in `copy` implementation.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5poD1n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1014,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p7bPF,fury,1777185733,1014,NA,caicancai,77189278,Cancai Cai,,NA,2023-10-24T13:16:11Z,2023-10-24T13:16:11Z,"I want to try it,but I may need a little time to learn this","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p7bPF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1014,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p8btI,fury,1777449800,1014,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-24T15:11:40Z,2023-10-24T15:11:40Z,"> I want to try it,but I may need a little time to learn this

Looking forward to it! FYI, here are my some thoughts, you can take it for inspiration:
- Design a copy interface
- `Serializer` implement the copy interface, throw UnsupportedException
- For non-jit serializer, override the copy interface to implement copy
- For immutable object such as `String`, `java.time`, just return itself
- For mutable object, create new object and set all attributes
- For pojo/bean/record object, implement the copy in a separate class, and forward the copy to that class to reuse the copy implementation in `ObjectSerializer/CompatibleObjectSerializer`
- For JIT serializer, don't generate copy code in previous serializer builder. copy is not needed by all scenarios, generate code for copy will make the jit slower and use more metaspace. Instead, we should generate a class which implement the copy interface and forward the copy to that class. For example, we can add a copy forward implemetation in `io.fury.builder.Generated.GeneratedSerializer`:
```java
    public Object copy(Object o) {
      Copy copier = this.copier;
      if (copier == null) {
        this.copier = copier = classResolver.getJITCopier(o.getClass());
      }
      return copier.copy(o);
    }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5p8btI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1017,https://api.github.com/repos/apache/fury/issues/1017,fury,1953545357,1017,RoadMap,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-10-20T05:15:21Z,2024-05-29T17:12:01Z,"- Format Specification
  - #1239
  - #1413 
  - Row format documentation
- Java Object Graph
  - #925
  - #203
  - #202
- Python
  - Support Collection/Map V2 protocol
  - Cross-language schema compatibility for object graph.
  - Performance optimization for cython
- JavaScript
  - Cross-language schema compatibility for object graph.
  - Support Collection/Map V2 protocol
  - Row format support
- C++
  - #1145
  - C++ object graph serialization support
  - Codegen Framework for c++ to generate code statically.
- Golang
  - Codegen Framework for golang to generate code statically.
  - Support Collection/Map V2 protocol
  - Cross-language schema compatibility for object graph.
  - Golang row format serialization support
- Rust
  - Cross-language schema compatibility for object graph.
  - Support Collection/Map V2 protocol
  - #1190
- #1197
- Protocols for features and knowledge graph serialization
- Continuously improve our serialization infrastructure for any new protocols","{""url"": ""https://api.github.com/repos/apache/fury/issues/1017/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1021,https://api.github.com/repos/apache/fury/issues/1021,fury,1953949235,1021,[Java] Serialize pojo throws: java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object,xiguashu,26504344,liangjie,liangjie3138@gmail.com,CLOSED,2023-10-20T10:02:03Z,2023-10-23T02:35:21Z,"**Describe the bug**
When it serialize a pojo with a nested map field, it throws ' _java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object_'

**Error stack**
```
java.lang.IllegalArgumentException: interface java.util.Map is not a super class of java.lang.Object

	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:396)
	at com.google.common.reflect.TypeToken.getSupertype(TypeToken.java:372)
	at io.fury.type.TypeUtils.getMapKeyValueType(TypeUtils.java:429)
	at io.fury.serializers.MapSerializers$MapSerializer.getKVGenericType(MapSerializers.java:408)
	at io.fury.serializers.MapSerializers$MapSerializer.genericJavaWrite(MapSerializers.java:184)
	at io.fury.serializers.MapSerializers$MapSerializer.writeElements(MapSerializers.java:150)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:110)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:41)
	at io.fury.Fury.writeReferencableToJava(Fury.java:293)
	at io.fury.serializers.MapSerializers$MapSerializer.writeJavaRefOptimized(MapSerializers.java:734)
	at io.fury.serializers.MapSerializers$MapSerializer.javaKeyTypeFinalWrite(MapSerializers.java:253)
	at io.fury.serializers.MapSerializers$MapSerializer.genericJavaWrite(MapSerializers.java:206)
	at io.fury.serializers.MapSerializers$MapSerializer.writeElements(MapSerializers.java:150)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:110)
	at io.fury.serializers.MapSerializers$MapSerializer.write(MapSerializers.java:41)
	at io.fury.Fury.writeNonReferenceToJava(Fury.java:363)
	at io.fury.serializers.ObjectSerializer.writeContainerFieldValue(ObjectSerializer.java:247)
	at io.fury.serializers.ObjectSerializer.writeContainerFields(ObjectSerializer.java:229)
	at io.fury.serializers.ObjectSerializer.write(ObjectSerializer.java:180)
	at io.fury.Fury.writeData(Fury.java:478)
	at io.fury.Fury.writeReferencableToJava(Fury.java:274)
	at io.fury.Fury.serializeInternal(Fury.java:245)
	at io.fury.Fury.serialize(Fury.java:182)
	at io.fury.Fury.serialize(Fury.java:163)
	at SerTest.test(SerTest.java:213)
```

**To Reproduce**
Here is the test code.
```
    class Pojo {
        Map<String, Object> map;
    }

    @Test
    public void test() {

        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withAsyncCompilationEnabled(true)
                .build();

        Pojo pojo = new Pojo();
        Map<String, Object> body = new HashMap<>();
        body.put(""key"", new HashMap<>());
        pojo.map = body;

        byte[] bytes = fury.serialize(pojo);

        fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withAsyncCompilationEnabled(true)
                .build();

        Object result = fury.deserialize(bytes);

    }
```
**Environment**
fury version: 0.11.2
java: 
java version ""11.0.12"" 2021-07-20 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.12+8-LTS-237)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.12+8-LTS-237, mixed mode)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1021/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppVpS,fury,1772444242,1021,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T10:05:12Z,2023-10-20T10:05:12Z,"I can't reproduce it in fury v0.2.1, seems that you used a very old internal version of fury. Could you try latest fury out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppVpS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppX8W,fury,1772453654,1021,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-20T10:11:23Z,2023-10-20T10:11:23Z,"Works fine on 0.2.1:
![image](https://github.com/alipay/fury/assets/12445254/6ae8c417-4266-4927-8eb5-62f879dd2943)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ppX8W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1024,https://api.github.com/repos/apache/fury/issues/1024,fury,1959998385,1024,[Java] serializing Scala Enumerations is complicated ,pjfanning,11783444,PJ Fanning,,CLOSED,2023-10-24T20:09:43Z,2023-10-28T13:48:23Z,"**Describe the bug**
https://www.scala-lang.org/api/2.13.x/scala/Enumeration.html is not a popular feature in Scala but it exists. Scala 3 has a new enum class (as well as the scala.Enumeration). Enumeratum is a popular 3rd party lib.

I found serializing scala.Enumeration instances awkward.

I get an exception unless I register scala.Enumeration.Val class and this is not public. I had to create a hacky class in Java to access it.

https://github.com/pjfanning/fury-scala-test/blob/a6585dc407ac2f15f09352aec1f85025c24adf2f/src/main/java/scala/FuryUtils.java

I also had to register the scala.runtime.ModuleSerializationProxy

https://github.com/pjfanning/fury-scala-test/blob/a6585dc407ac2f15f09352aec1f85025c24adf2f/src/test/scala/io/github/pjfanning/fury/FuryTest.scala#L26-L33


**Expected behavior**

If and when Fury adds specialized Scala support, making this easier should be considered.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1024/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1024,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qALvE,fury,1778432964,1024,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T03:07:33Z,2023-10-25T03:07:33Z,"You  may need to create fury with `requireClassRegistration(false)`:
```scala
val fury = Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build()
```
We enabled `requireClassRegistration` by default to avoid deserializing insecure types. This is a common vulnerability in dynamic serialization frameworks in JDK/Hessian/FST and so on. Without this option, we must add insecure classes to blacklist, but those classes are unknown and too much to add.

Actually, I think we need to add more detailed exception to tell users to `requireClassRegistration(false)` if the env is secure.

And add `requireClassRegistration(false)` to our example. The overall thought is that users must be aware this option and the potential risks.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qALvE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1024,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qATgv,fury,1778464815,1024,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T03:53:59Z,2023-10-25T03:53:59Z,Is https://github.com/pjfanning/fury-scala-test/blob/a6585dc407ac2f15f09352aec1f85025c24adf2f/src/main/java/scala/FuryUtils.java in a private repo?  Seems inaccessible,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qATgv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1024,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qB9r8,fury,1778899708,1024,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-25T09:46:55Z,2023-10-25T09:46:55Z,@chaokunyang I have made the repo public now. I thought it was already public. I have discovered that the code doesn't need to be the `scala` package. My IDE (IntelliJ) doesn't like it but my sbt build works if I move the class to a different package. https://github.com/pjfanning/fury-scala-test/blob/5c2023e2f8d5e1cd6f599ad65c4134498517dddd/src/main/java/io/github/pjfanning/fury/FuryUtils.java,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qB9r8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1024,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCocs,fury,1779074860,1024,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-25T11:37:51Z,2023-10-25T11:37:51Z,"@pjfanning Yeah, I can access it now. With `requireClassRegistration(false)` set, no registration is needed now:
![image](https://github.com/alipay/fury/assets/12445254/e4e49d42-3add-4e33-bb32-99252d8f0387)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qCocs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1025,https://api.github.com/repos/apache/fury/issues/1025,fury,1960551965,1025,[JavaScript] deserialization error when object contains binary,3tieto,147470591,,,CLOSED,2023-10-25T05:11:44Z,2023-10-25T07:52:38Z,"![image](https://github.com/alipay/fury/assets/147470591/78ea2022-6996-4bbb-a5f2-9129ff06781d)

如上图

测试代码
```
var bf, deserialize, fury, obj, result, serialize;

import {
  Type,
  default as Fury
} from '@furyjs/fury';

console.log(Type);

fury = new Fury.default({
  refTracking: true
});

({serialize, deserialize} = fury.registerSerializer(Type.object(""example.foo"", {
  foo: Type.any(),
  bar: Type.any(),
  map: Type.map(Type.any(), Type.any()),
  set: Type.set(Type.any()),
  list: Type.array(Type.any()),
  binary: Type.binary()
})));

obj = {
  foo: ""123"",
  bar: 123,
  map: new Map([[""hello"", 1], [""world"", 2]]),
  set: new Set([1, 2, ""123""]),
  list: [""123"", 123, true],
  binary: new Uint8Array([1, 2, 3])
};

bf = serialize(obj);

result = deserialize(bf);

console.log(result);

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1025/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1025,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qApPZ,fury,1778553817,1025,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-10-25T05:45:19Z,2023-10-25T05:45:19Z,"> ![image](https://user-images.githubusercontent.com/147470591/277880059-78ea2022-6996-4bbb-a5f2-9129ff06781d.png)
> 
> 如上图
> 
> 测试代码
> 
> ```
> var bf, deserialize, fury, obj, result, serialize;
> 
> import {
>   Type,
>   default as Fury
> } from '@furyjs/fury';
> 
> console.log(Type);
> 
> fury = new Fury.default({
>   refTracking: true
> });
> 
> ({serialize, deserialize} = fury.registerSerializer(Type.object(""example.foo"", {
>   foo: Type.any(),
>   bar: Type.any(),
>   map: Type.map(Type.any(), Type.any()),
>   set: Type.set(Type.any()),
>   list: Type.array(Type.any()),
>   binary: Type.binary()
> })));
> 
> obj = {
>   foo: ""123"",
>   bar: 123,
>   map: new Map([[""hello"", 1], [""world"", 2]]),
>   set: new Set([1, 2, ""123""]),
>   list: [""123"", 123, true],
>   binary: new Uint8Array([1, 2, 3])
> };
> 
> bf = serialize(obj);
> 
> result = deserialize(bf);
> 
> console.log(result);
> ```
Thank you so much for submitting this issue, i will take a investigate.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qApPZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1025,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qA2Mq,fury,1778606890,1025,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-10-25T06:36:52Z,2023-10-25T06:36:52Z,"@3tieto  I tried to fix the issue, and publish a new version of  ""@furyjs/fury"": ""0.3.0-beta.1"" could you help me test it on your machine ?  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qA2Mq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/1029,fury,1965803990,1029,Fury Java: fails to decode a `scala.collection.BitSet` (NPE),andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,CLOSED,2023-10-27T16:00:44Z,2023-10-29T06:26:12Z,"Fury is configured as follows:

```scala
    val fury = Fury
      .builder()
      .withLanguage(Language.JAVA)
      .requireClassRegistration(false)
      .withRefTracking(true)
      .withStringCompressed(true)
      .withLongCompressed(true)
      .withIntCompressed(true)
      .withAsyncCompilation(true)
      .buildThreadSafeFury()
```

After successful encoding, taking the encoded value and decoding fails with the following exception.

```
java.lang.NullPointerException:
  at scala.collection.mutable.BitSet$.fromBitMaskNoCopy(BitSet.scala:383)
  at scala.collection.mutable.BitSet$SerializationProxy.readResolve(BitSet.scala:390)
  at io.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:307)
  at io.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:292)
  at io.fury.Fury.readData(Fury.java:812)
  at io.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:271)
  at io.citrine.lolo.trees.splits.CategoricalSplitFuryRefCodec_1343252559_1426407511_823874944.read(CategoricalSplitFuryRefCodec_1343252559_1426407511_823874944.java:84)
  at io.citrine.lolo.trees.InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.readFields$(InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.java:147)
  at io.citrine.lolo.trees.InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.read(InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.java:176)
  at io.citrine.lolo.trees.InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.readFields$(InternalModelNodeFuryRefCodec_1343252559_1426407511_1409680642.java:131)
```
https://github.com/alipay/fury/blob/releases-0.2.1/java/fury-core/src/main/java/io/fury/Fury.java#L812
https://github.com/alipay/fury/blob/releases-0.2.1/java/fury-core/src/main/java/io/fury/serializer/ReplaceResolveSerializer.java#L307","{""url"": ""https://api.github.com/repos/apache/fury/issues/1029/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qSgrA,fury,1783237312,1029,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-27T17:04:06Z,2023-10-27T17:04:06Z,@andyczerwonka Would you mind sharing reproduceable code here? It's not easy to know what happened without the code,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qSgrA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qSi8C,fury,1783246594,1029,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2023-10-27T17:11:31Z,2023-10-27T17:11:31Z,"> @andyczerwonka Would you mind sharing reproduceable code here? It's not easy to know what happened without the code

Unfortunately I can't given it's a proprietary trained model from a customer. I'm trying to pare down the data structure to help isolate. 

Is there no way to hypothesize as to where the NPE would come from? It looks to be in the `JDKReplaceResolveMethodInfoCache`.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qSi8C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTDIi,fury,1783378466,1029,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2023-10-27T19:04:23Z,2023-10-27T19:04:23Z,"If the NPE is happening [here](https://github.com/alipay/fury/blob/releases-0.2.1/java/fury-core/src/main/java/io/fury/serializer/ReplaceResolveSerializer.java#L298-L307), it looks to me like it's on access to function application `apply(o)` call given there is null protection on both `jdkMethodInfoCache` and  `readResolveMethod`.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTDIi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTgzt,fury,1783500013,1029,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2023-10-27T20:53:01Z,2023-10-27T20:53:01Z,"@chaokunyang I was able to reproduce. Fury can't handle `scala.collection.BitSet`. The following test fails with an NPE.

```scala
  test(""reproduce Fury defect"") {
    import FuryEncoder._
    val encoded = fury.serialize(BitSet(1, 2, 3, 4))
    val decoded = fury.deserialize(encoded).asInstanceOf[BitSet]
    decoded.toList should contain theSameElementsAs List(1, 2, 3, 4)
  }
```
I've renamed the ticket.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTgzt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTotr,fury,1783532395,1029,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2023-10-27T21:29:49Z,2023-10-27T21:29:49Z,"Interestingly, I added a custom serializer, and I'm stiff getting an NPE.

```scala
    class BitSetSerializer(fury: Fury) extends Serializer(fury, classOf[BitSet]) {

      override def write(buffer: MemoryBuffer, value: BitSet) = {
        val converted = value.map(_.toByte).toArray
        buffer.writeBytesWithSizeEmbedded(converted)
      }

      override def read(buffer: MemoryBuffer): BitSet = {
        val bytes = buffer.readBytesAlignedSizeEmbedded
        val ints = bytes.map(_.toInt)
        BitSet.fromSpecific(ints)
      }

    }
```
I am registering the serializer via
```scala
fury.registerSerializer(classOf[BitSet], new BitSetSerializer(fury))
```
yet it doesn't see to call it when I run the test. 🤔 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qTotr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qUi5S,fury,1783770706,1029,NA,knutwannheden,408765,Knut Wannheden,knut.wannheden@gmail.com,NA,2023-10-28T10:21:42Z,2023-10-28T10:21:42Z,"I had a similar issue, where the problem was that the serializer must be registered for the concrete implementation class.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qUi5S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qUs8W,fury,1783811862,1029,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-28T13:32:55Z,2023-10-28T13:32:55Z,"Hi, @andyczerwonka @knutwannheden , I fixed this bug in https://github.com/alipay/fury/pull/1030:
![image](https://github.com/alipay/fury/assets/12445254/6e217c4d-937c-4018-ad55-3d753f7d001d)

Please check it using latest snapshot jar and reopen this issue if it doesn't work. Thanks for finding this bug and creating an issue for fury. Such issue will make fury a better project","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qUs8W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVIEs,fury,1783922988,1029,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2023-10-28T21:17:45Z,2023-10-28T21:17:45Z,@chaokunyang I can confirm that the latest snapshot does in fact solve this issue. Can you give us some insight into when you'd cut a release? We have policy that will unfortunately not allow us to use nightly snapshots in production.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVIEs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1029,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdo5,fury,1784011321,1029,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T06:26:12Z,2023-10-29T06:26:12Z,@andyczerwonka New version will be released by the end of next week,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdo5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/1032,fury,1966696112,1032,[Java] StackOverflowError serializing scala enumerations (Scala 2.12),pjfanning,11783444,PJ Fanning,,CLOSED,2023-10-28T18:27:36Z,2023-10-31T16:00:26Z,"**Describe the bug**

Fury 0.2.1.

See https://github.com/pjfanning/fury-scala-test/blob/9866b728d27f167551642542b950d966f09b9b57/src/test/scala-2.12/io/github/pjfanning/fury/FuryEnumeration212Test.scala

The StackOverflowError only happens with Scala 2.12 - I have a variant on this test that works ok with Scala 2.13 and Scala 3.
Big changes happened in Scala 2.13 as part of the prep for Scala 3 - so the serialization in the more recent Scala versions needs users to register some Proxy classes as well as the expected classes.

The error happens even if I set `requireClassRegistration(false)`.

Even if you don't think it is important to support Scala Enumerations for Scala 2.12 users, I think it would be useful to prevent StackOverflowErrors by having some sort of recursion depth check.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1032/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVAZv,fury,1783891567,1032,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-28T18:27:58Z,2023-10-28T18:27:58Z,"Scala 2.12 error:
```
java.lang.StackOverflowError
	at io.fury.serializer.ObjectSerializer.writePrimitiveFieldValueFailed(ObjectSerializer.java:520)
	at io.fury.serializer.ObjectSerializer.writePrimitiveFieldValueFailed(ObjectSerializer.java:476)
	at io.fury.serializer.ObjectSerializer.writeFinalFields(ObjectSerializer.java:229)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:204)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeClassAndObject$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:104)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.writeFields$(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:258)
	at io.github.pjfanning.fury.WeekDay_FuryCodec_1137563540_1309552426_84113572.write(WeekDay_FuryCodec_1137563540_1309552426_84113572.java:498)
	at io.fury.serializer.ReplaceResolveSerializer.writeObject(ReplaceResolveSerializer.java:259)
	at io.fury.serializer.ReplaceResolveSerializer.write(ReplaceResolveSerializer.java:252)
	at io.fury.Fury.writeNonRef(Fury.java:383)
	at io.fury.Fury.writeNullable(Fury.java:354)
	at io.fury.serializer.ObjectSerializer.write(ObjectSerializer.java:211)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVAZv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVbPR,fury,1784001489,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T05:17:27Z,2023-10-29T05:17:27Z,"Hi @pjfanning Thanks for taking time to test and creating this issue. All scala types should be serialized correctly by fury, whether the type is used frequently or barely used. We can optimize ony for common used types, but all types should be serialized correctly.

I tested your code locally, it seems scala 2.12 has circular reference for this enumeration. For shared reference, you need to enable refTracking by `FuryBuilder#withRefTracking(true)`. When enabled, the serialization will work:
![image](https://github.com/alipay/fury/assets/12445254/b6961e22-f2b2-4dd8-851f-ab3def81d994)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVbPR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVbvr,fury,1784003563,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T05:27:15Z,2023-10-29T05:27:15Z,"But the serialized bytes are prettly large, even 3 times smaller than JDK serialization:

![image](https://github.com/alipay/fury/assets/12445254/a316c039-08bd-4e62-815a-f33a746415f5)

I haven't dive into it, but seems all state in `object WeekDay` are serialized rather serialize a flag only:
```scala
object WeekDay extends Enumeration {
  type WeekDay = Value
  val Mon, Tue, Wed, Thu, Fri, Sat, Sun = Value
}
```

@pjfanning Do you think `object` serialization should be optimized early? for such cases, we should serialize a path for locating the object.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVbvr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVcIL,fury,1784005131,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T05:39:04Z,2023-10-29T05:39:04Z,"@pjfanning Fury is 3x smaller than JDK surprised me, it seems fury can make a big difference for scala serialization. Is there any other scala serialization framework like fury?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVcIL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdF9,fury,1784009085,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T06:09:35Z,2023-10-29T06:09:35Z,"JDK test code:
```scala
import io.fury.Fury
import io.fury.config.Language
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

import java.io.{ByteArrayOutputStream, ObjectOutputStream}

class FuryEnumeration212Test extends AnyWordSpec with Matchers {
  ""fury scala enumeration support"" should {
    ""serialize/deserialize Weekday"" in {
      // https://github.com/alipay/fury/issues/1032
      val fury = Fury.builder().withLanguage(Language.JAVA).withRefTracking(true)
        .requireClassRegistration(true).build()
      fury.register(ScalaClasses.ScalaEnumerationValClass)
      fury.register(Class.forName(""scala.collection.mutable.HashMap""))
      fury.register(WeekDay.getClass)
      val bytes = fury.serialize(WeekDay.Wed)
      println(""fury "" + bytes.length)
      fury.deserialize(bytes) shouldBe WeekDay.Wed

      val s = new ByteArrayOutputStream()
      val s2 = new ObjectOutputStream(s)
      s2.writeObject(WeekDay.Wed)
      println(""jdk "" + s.toByteArray.length)
    }
  }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdF9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVl1n,fury,1784044903,1032,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-29T09:23:17Z,2023-10-29T09:23:17Z,Would it be possible to make `.withRefTracking(true)` the default? CVE bounty hunters expect that libs do not have cases where `Error`s can be thrown. Many users will not catch `Error`s and uncaught `Error`s can cause a JVM to fail.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVl1n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVpXe,fury,1784059358,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T10:27:44Z,2023-10-29T10:27:44Z,"We make it as default, but disabled it later. Serialization frameworks such as protobuf/flatbuffers/avro all doesn't support ref tracking, which may shows there are no shared references for most cases. Reference trakcing is not free, it need to look up a IdentifyHashMap, which will be the bottleneck if we have too much small objects.

And this error happens only for serialization, not for deserialization, so the attacker can't use this to attack the systems. If there is a StackOverflowError thrown, it can be diagnosed when developing the application.

Perhaps we can try catch this exception and thrown a more detailed message to tell users to enable ref tracking for such cases.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVpXe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1032,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qhn7O,fury,1787199182,1032,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-31T13:16:11Z,2023-10-31T13:16:11Z,"Add detailed message and `how to` in #1049 , could you help to review it? @pjfanning ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qhn7O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/1033,fury,1966727467,1033,[Java] NPE serializing Scala 3 enum,pjfanning,11783444,PJ Fanning,,CLOSED,2023-10-28T20:15:38Z,2023-10-30T07:01:16Z,"Fury 0.2.1. Scala 3 has a new type of enum - different from the Scala 2 Enumeration (although Scala 3 still supports this too).

* https://github.com/pjfanning/fury-scala-test/blob/main/src/main/scala-3/io/github/pjfanning/fury/ColorEnum.scala
* https://github.com/pjfanning/fury-scala-test/blob/d4e9b067878cb817a86a5d3225df69ce02e427c5/src/test/scala-3/io/github/pjfanning/fury/FuryEnum3Test.scala

Fails with NPE in Fury code.

```
[info] - should serialize/deserialize ColorEnum *** FAILED ***
[info]   java.lang.RuntimeException: Create sequential serializer failed, 
[info] class: class io.github.pjfanning.fury.ColorEnum$$anon$1
[info]   at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:46)
[info]   at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:943)
[info]   at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
[info]   at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:941)
[info]   at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:922)
[info]   at io.fury.serializer.ReplaceResolveSerializer.newJDKMethodInfoCache(ReplaceResolveSerializer.java:162)
[info]   at io.fury.serializer.ReplaceResolveSerializer.<init>(ReplaceResolveSerializer.java:203)
[info]   at io.fury.serializer.Serializers.newSerializer(Serializers.java:80)
[info]   at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1154)
[info]   at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1095)
[info]   ...
[info]   Cause: java.lang.NullPointerException:
[info]   at io.fury.codegen.CodegenContext.type(CodegenContext.java:289)
[info]   at io.fury.codegen.CodegenContext.namePrefix(CodegenContext.java:260)
[info]   at io.fury.codegen.CodegenContext.newName(CodegenContext.java:178)
[info]   at io.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:143)
[info]   at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:203)
[info]   at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
[info]   at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
[info]   at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:65)
[info]   at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:141)
[info]   at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:89)
[info]   ...
```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1033/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdnv,fury,1784011247,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T06:25:40Z,2023-10-29T06:25:40Z,"@pjfanning I can't run [FuryEnum3Test.scala](https://github.com/pjfanning/fury-scala-test/blob/d4e9b067878cb817a86a5d3225df69ce02e427c5/src/test/scala-3/io/github/pjfanning/fury/FuryEnum3Test.scala). Do I need to do any changes about `build.sbt`.

Here is may configuration:
```sbt
name := ""fury-scala-test""

scalaVersion := ""3.3.1""
crossScalaVersions := Seq(""2.12.18"", ""2.13.12"", ""3.3.1"")

val furyVersion = ""0.2.1""

//resolvers ++= Resolver.sonatypeOssRepos(""snapshots"")

libraryDependencies ++= Seq(
  ""org.furyio"" % ""fury-core"" % furyVersion,
  ""org.scalatest"" %% ""scalatest"" % ""3.2.17"",
  ""org.slf4j"" % ""slf4j-simple"" % ""2.0.9"" % Test
)

unmanagedSourceDirectories in Compile += (baseDirectory( _ / ""src"" / ""main"" / ""scala-3"" )).value

Test / unmanagedSourceDirectories ++= {
  Seq(
    (LocalRootProject / baseDirectory).value / ""src"" / ""test"" / ""scala-3""
  )
}


```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVdnv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVmKG,fury,1784046214,1033,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-29T09:29:03Z,2023-10-29T09:29:03Z,"Latest versions of sbt automatically handle `scala-3` source folders - i.e. you don't need to define `unmanagedSourceDirectories` for them.

If you check out latest main branch of https://github.com/pjfanning/fury-scala-test then this command will reproduce this issue:

`sbt ++3.3 test`

or

`sbt ++3.3 ""testOnly io.github.pjfanning.fury.FuryEnum3Test""`

  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVmKG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVnNm,fury,1784050534,1033,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-29T09:47:09Z,2023-10-29T09:47:09Z,"The issue in Fury CodegenContext.java is that it calls `String type = clz.getCanonicalName();`. This can return `null` but Fury fails to handle `null`s.

getCanonicalName Javadoc says this:
```
Classes without canonical names include:
a local class
a anonymous class
a hidden class
an array whose component type does not have a canonical name
```

The problem class here is an anonymous class - `io.github.pjfanning.fury.ColorEnum$$anon$1`. Scala Compiler loves creating anonymous classes.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVnNm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV-w4,fury,1784147000,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T15:39:27Z,2023-10-29T15:39:27Z,"I still can't run it in IDEA, comand line run is OK. I copied your code and pasted it into a new scala 3 project, works now.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV-w4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV-2q,fury,1784147370,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T15:40:39Z,2023-10-29T15:40:39Z,"I found a strange thing in scala 3 compiler:
![image](https://github.com/alipay/fury/assets/12445254/d09d2f34-133d-49c1-a157-755acab1c6cd)

Scala 3 compiler created a static local class, is this legal in java language specification?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV-2q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV_N_,fury,1784148863,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T15:46:26Z,2023-10-29T15:46:26Z,"@pjfanning I fixed local static class jit bug in https://github.com/alipay/fury/pull/1036, tested with scala3 enum, works fine. But I can't create a local static class in java for test. Do you know how to do it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qV_N_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qWGYn,fury,1784178215,1033,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-29T17:36:18Z,2023-10-29T17:36:18Z,@chaokunyang I don't know how to create a local static class in Java. One option would be to create a module that compiles Scala classes and you could use those classes in your Java project - by adding a test only dependency on that Scala module.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qWGYn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qXAYT,fury,1784415763,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-30T03:25:16Z,2023-10-30T03:25:16Z,"I see, thanks. I'll merge https://github.com/alipay/fury/pull/1036 first. Maybe we can setup a scala module in https://github.com/alipay/fury/tree/main/scala , and put those tests here? In the long run, scala optimization can be put there too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qXAYT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1033,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qXp4l,fury,1784585765,1033,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-30T06:56:45Z,2023-10-30T06:56:45Z,"@pjfanning Would you like to help to setup fury scala module? I think we can setup basic scala project structure in `fury/scala` directory, add basic tests for common scala classes, and add optimization in future. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qXp4l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1035,https://api.github.com/repos/apache/fury/issues/1035,fury,1966900890,1035,[Java]  deserializeJavaObject exception,sysmat,69830,Sysmat,tomaz.majerhold@arnes.si,CLOSED,2023-10-29T08:48:44Z,2023-10-29T09:21:50Z,"**Describe the bug**
When using `deserializeJavaObject` throws exception

```
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 95 out of bounds for byte[61]
	at java.base/java.lang.System.arraycopy(Native Method)
	at io.fury.serializer.StringSerializer.readJava11String(StringSerializer.java:241)
	at aris.FurySeralizationMain_UserFuryCodec_1571111118_118352462_184966243.read(FurySeralizationMain_UserFuryCodec_1571111118_118352462_184966243.java:99)
	at io.fury.Fury.readDataInternal(Fury.java:844)
	at io.fury.Fury.deserializeJavaObject(Fury.java:999)
	at io.fury.Fury.deserializeJavaObject(Fury.java:983)
	at aris.FurySeralizationMain.main(FurySeralizationMain.java:40)
```

**Expected behavior**
To create class

**To Reproduce**
1. java record, even if I use java class the same error

```java
public record User(Integer id, String name, RateEnum rate){};
public enum RateEnum {
    LOW, MEDIUM, HIGH
}
```

2. main

```java
public static void main(String[] args) {
 User user = new User(1, ""Test"", RateEnum.LOW);

  Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .build();

   fury.register(User.class);
   fury.register(RateEnum.class);
   byte[] bytes = fury.serialize(user);
   User result2 = fury.deserializeJavaObject(bytes, User.class);
```
**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
- Windows 11
- jdk 21
- org.furyio:fury-core:0.2.1

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1035/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVldh,fury,1784043361,1035,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-10-29T09:16:11Z,2023-10-29T09:16:11Z,You should use fury.serializeJavaObject if you use deserializeJavaObject,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVldh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVlw-,fury,1784044606,1035,NA,sysmat,69830,Sysmat,tomaz.majerhold@arnes.si,NA,2023-10-29T09:21:50Z,2023-10-29T09:21:50Z,"@chaokunyang thx, it works","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5qVlw-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1038,https://api.github.com/repos/apache/fury/issues/1038,fury,1967513785,1038,[Java] support bytes string serialization for jdk8,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-30T05:03:42Z,2023-10-30T05:36:58Z,"## Is your feature request related to a problem? Please describe.
JDK9 introduces `byte[]` as internal storage for string data. Fury uses jdk version to optimize string serialization. For JDK8, we extract `char[]` data for serialization. For JDK9, fury uses extract `byte[]` for serialization.

But some jdk8 uses `byte[]` for string storage, fury will fail for such jdk.

## Describe the solution you'd like
Remove all jdk version checks in `StringSerializer`, check by value type directly

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1038/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1045,https://api.github.com/repos/apache/fury/issues/1045,fury,1967918388,1045,[Java] Support combination of `Externalizable` and `writeReplace()` / `readResolve()`,knutwannheden,408765,Knut Wannheden,knut.wannheden@gmail.com,CLOSED,2023-10-30T09:38:37Z,2023-10-31T13:13:45Z,"Currently Fury supports both `Externalizable` and `writeReplace()` / `readResolve()`, but it looks like the combination of these two Java features is not supported and results in a `ClassCastException` when deserializing. E.g.

```
java.lang.ClassCastException: com.fasterxml.jackson.databind.node.NodeSerialization cannot be cast to com.fasterxml.jackson.databind.JsonNode
```

It looks like the serialization did use `writeReplace()` and then during the deserialization the `readResolve()` method was not called on the result before returning it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1045/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1055,https://api.github.com/repos/apache/fury/issues/1055,fury,1970861025,1055,[Scala] Setup scala project,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-10-31T16:36:36Z,2023-10-31T16:47:58Z,"## Is your feature request related to a problem? Please describe.
Setup up scala sbt project:
- sbt build
- tests setup

## Describe the solution you'd like
https://github.com/pjfanning/fury-scala-test has done great work, and be taken as a reference

## Additional context
#682","{""url"": ""https://api.github.com/repos/apache/fury/issues/1055/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1058,https://api.github.com/repos/apache/fury/issues/1058,fury,1973584648,1058,[Scala] add scala tuple serialization tests,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-02T06:19:57Z,2023-11-02T06:24:02Z,"## Is your feature request related to a problem? Please describe.
add scala tuple serialization tests
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1058/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1060,https://api.github.com/repos/apache/fury/issues/1060,fury,1973590746,1060,[Scala] Use scala generics to optimize tuple serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-11-02T06:25:40Z,2023-11-04T14:27:04Z,"## Is your feature request related to a problem? Please describe.
Scala tuple1~22 has generics to define the type of elements. By using those information, the generated  serializer code can be more efficient, and serialized size will be smaller.

## Describe the solution you'd like
Implement a tuple serializer in fury/scala, adpat tuple in fury `BaseObjectCodecBuilder`","{""url"": ""https://api.github.com/repos/apache/fury/issues/1060/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1061,https://api.github.com/repos/apache/fury/issues/1061,fury,1974678010,1061,[Java]  Refactor collection serialization framework to support writeReplace JIT,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-02T17:02:16Z,2023-11-03T14:44:34Z,"## Is your feature request related to a problem? Please describe.
For object which isn't java.util.Colleciton/Map subclass but the elements does has this style such as scala `Seq/List/Map/Iterable`. We should provide a way make those types integrate with fury collection serialization framework.

If we make  collection serialization framework to support writeReplace JIT, all those  types can be supported.

## Describe the solution you'd like
- Abstract Collection/Map serializer, write can receive a type which isn't Java `Collection/Map`
- Provide a `onCollectionWrite/onMapWrite`, replacing existing `writeHeader`. Write header in those methods and return a real `Collection/Map` heere. We can return an adapter for scala collections.
- Move write collection/map size into `onCollectionWrite/onMapWrite`, since passed object may not has a `size` method defined.

## Additional context
#765 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1061/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1069,https://api.github.com/repos/apache/fury/issues/1069,fury,1976393968,1069,[Java] Refactor collection/map structure ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-03T15:02:29Z,2023-11-03T15:07:13Z,"## Is your feature request related to a problem? Please describe.
With more scala collections and other collections supported added in fury, users will need to extends to fury collection serialization framework. Crrently core logs are messy in `CollectionsSerializers` and `MapSerializers`, which is not good for reading. We should refine the collection/map structure 

## Describe the solution you'd like
Move core serializer class out as upper level classes

## Additional context
#765 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1069/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1071,https://api.github.com/repos/apache/fury/issues/1071,fury,1976426019,1071,[Java] merge map/collection into collection package,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-03T15:19:39Z,2023-11-03T15:46:07Z,"## Is your feature request related to a problem? Please describe.
Scala/Guava all use collection as  package for map/collection, we should do so. Otherwise `SynchronizedSerializers/UnmodifiableSerializers/GuavaCollectionSerializers` will be diverged

## Additional context
#1069 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1071/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1076,https://api.github.com/repos/apache/fury/issues/1076,fury,1977366220,1076,[Scala] support scala collection jit serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-04T14:26:18Z,2023-11-04T14:35:43Z,"## Is your feature request related to a problem? Please describe.
In #1073 we make scala collection serializaiton follow fury java collection serialization for better performance and compression ratio. But hte implementation use loop and interface-based polymorphism. The performance is not good as java collection in fury serialization.

## Describe the solution you'd like
support scala collection jit serialization

## Additional context
#765 #682 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1076/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1078,https://api.github.com/repos/apache/fury/issues/1078,fury,1977373481,1078,[Scala] Release fury scala to maven snapshot,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-04T14:39:40Z,2024-08-02T02:11:21Z,"## Is your feature request related to a problem? Please describe.

Release fury scala 2/3 jar to sonatype maven snapshot.

Do we need to release two jar? Or just one jar is enough?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1078/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1078,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rtgNS,fury,1807090514,1078,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-12T10:54:24Z,2023-11-12T10:54:24Z,"you will need to release separate jars for Scala 3 and Scala 2.13. `sbt +publishSigned` will publish jars for all the support `crossScalaVersions` listed in the build.sbt (needs sbt-pgp, see below).

I would suggest that you add these 2 plugins to the project/plugins.sbt.

* https://github.com/xerial/sbt-sonatype
* https://github.com/sbt/sbt-pgp

If you want to automate the publishing, you could add this - https://github.com/sbt/sbt-ci-release

I would suggest the you read the READMEs on these 3 plugins to see how they work.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rtgNS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1078,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxPBb,fury,1808068699,1078,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-13T12:24:15Z,2023-11-13T12:24:15Z,"I see, thanks, I'll try it when I have time","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxPBb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1079,https://api.github.com/repos/apache/fury/issues/1079,fury,1977373803,1079,[Scala] Register common scala types ahead,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-11-04T14:40:29Z,2024-03-13T08:03:34Z,"## Is your feature request related to a problem? Please describe.
Register common scala types ahead to reduce scala class serialization overhead

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1079/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1083,https://api.github.com/repos/apache/fury/issues/1083,fury,1986588763,1083,[Java] Suppress `register class warning` when `requireClassRegistration=false`,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,CLOSED,2023-11-09T23:45:56Z,2023-11-10T05:21:41Z,"When I set the `requireClassRegistration` directive to false, I'm inundated with a lot of non-registration warnings from the `io.fury.resolver.ClassResolver` logger. Given the directive states that we acknowledge we don't required registration, the logs suggest there is a problem.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1083/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1083,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rl6GT,fury,1805099411,1083,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-10T05:12:57Z,2023-11-10T05:12:57Z,"@andyczerwonka This is an issue other users faced with too, I will fix it in https://github.com/alipay/fury/pull/1084","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rl6GT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1085,https://api.github.com/repos/apache/fury/issues/1085,fury,1989800055,1085,[Java] AbstractCollectionSerializer serialize Collection with only null object inside has NPE problem,mof-dev-3,129163631,,,CLOSED,2023-11-13T03:04:31Z,2023-11-14T02:49:11Z,"How to reproduce
`
    public static class TestCollectionObj<T> {
        
        private T value;

        public TestCollectionObj(T value) {
            this.value = value;
        }

        public T getValue() {
            return value;
        }

        public void setValue(T value) {
            this.value = value;
        }

    }


    @Test
    public void testCollection() {
        List data = new ArrayList<>();
        data.add(null);
        TestCollectionObj h = new TestCollectionObj(data);
        Fury f = Fury.builder()
                .withLanguage(Language.JAVA)
                .build();
        f.register(TestCollectionObj.class);
        byte[] serialize = f.serialize(h);
        Object deserialize = f.deserialize(serialize);
        Assert.assertEquals(deserialize.getClass(), h.getClass());
        TestCollectionObj h2 = (TestCollectionObj) deserialize;
        Assert.assertEquals(h2.getValue(), h.getValue());
    }
`

**Expected behavior**
serialize with no exception

maybe we should check elemGenericType is null case and write a special flag like Fury.NULL_FLAG instead

![image](https://github.com/alipay/fury/assets/129163631/7fabd34c-e47b-4ccb-94d1-438ac92ecfb0)

**Environment (please complete the following information):**
openjdk version ""1.8.0_312""
ubuntu 20","{""url"": ""https://api.github.com/repos/apache/fury/issues/1085/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1085,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ruxhq,fury,1807423594,1085,NA,mof-dev-3,129163631,,,NA,2023-11-13T03:30:56Z,2023-11-13T03:30:56Z,"Pls also consider following variant case
AbstractCollectionSerializer.writeTypeNullabilityHeader method, which fail the NPE assert 

`  

public class CollectionsTest {


    public static class TestCollectionHolder<T> {
        private List<T> data;
        public List getData() {
            return data;
        }

        public void setData(List data) {
            this.data = data;
        }

        public TestCollectionHolder(List data) {
            this.data = data;
        }

    }

    @org.testng.annotations.Test
    public void testCollection() {
        List data = new ArrayList<>();
        data.add(null);
        CollectionsTest.TestCollectionHolder h = new CollectionsTest.TestCollectionHolder(data);
        Fury f = Fury.builder()
                .withLanguage(Language.JAVA)
                .build();
        f.register(CollectionsTest.TestCollectionHolder.class);
        byte[] serialize = f.serialize(h);
        Object deserialize = f.deserialize(serialize);
        Assert.assertEquals(deserialize.getClass(), h.getClass());
        CollectionsTest.TestCollectionHolder h2 = (CollectionsTest.TestCollectionHolder) deserialize;
        Assert.assertEquals(h2.getData(), h.getData());
    }
}

`


![image](https://github.com/alipay/fury/assets/129163631/774b172f-e4d6-4056-8227-1d59563322ba)

![image](https://github.com/alipay/fury/assets/129163631/351a23b9-3f03-4b5f-81c9-c9c4f26a2fd6)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ruxhq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1085,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxjXO,fury,1808152014,1085,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-13T13:19:30Z,2023-11-13T13:19:30Z,"Thanks for creating this issue @mof-dev-3 , I can reproduce it. I fixed it in https://github.com/alipay/fury/pull/1086 , please try it out and reopen this issue if the bug still persists.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxjXO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1085,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxu1A,fury,1808198976,1085,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-13T13:48:38Z,2023-11-13T13:48:38Z,This is a bug introduced in #923 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5rxu1A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1087,https://api.github.com/repos/apache/fury/issues/1087,fury,1991899565,1087,[C++] Provide better support for online services written in C++ such as feature service,qaubnc,34160280,,,OPEN,2023-11-14T03:08:04Z,2023-11-17T12:18:06Z,"As title says: hoping ""fury"" to providing better support for feature service in the field of search and promotion online services

Business Background: Currently, there is a high demand for online services such as search and promotion. Most of these fields use C++, and involve the processing of items' features. However, the large variety and quantity of these features have led to long serialization, deserialization, and network transmission times, becoming a bottleneck for system performance. There is an urgent need for methods like ""fury"" that can greatly enhance performance in serialization. However, it seems that the support for C++ in ""fury"" is not as comprehensive as for Java. Could we consider optimizing specifically for the C++ scenarios in search and promotion? And it is suggested that we can start with feature service, as the demand for this area seems to be very significant.

Additional Remarks: One characteristic of **feature extraction** is that the large quantity of items need to be extracted. In our scenario, up to one thousand items in one request need to be extracted. Even after the items are **segmented**, the number could  also up to one hundred. Another characteristic is the large number of different features, which up to even hundreds of features for each item. The flame graph shows that only serialization operation costs over 10% of the total time consumed by the subservice, and even by using parallelizing operation, deserialization  costs over 20%.

Our feature data structure is based on ProtoBuf. In details, the user-level features are saved as an array, and the features of a single item are also saved as an single array, and some other information also involved, which are rarely to change.We always add/delete features by changing the size of the feature arrays. These information may be helpful in designing a new protocol specifically for this significant area.

```protobuf
message ItemFeature {
  Feature common_feature = 1; // User-level feature. Feature is a repeated array containing key and value
  repeated Feature item_feature = 2; // Item-level features
  ExtraInfo extra_info = 3; // Some other information
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1087/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1087,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sQrJA,fury,1816310336,1087,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T12:18:05Z,2023-11-17T12:18:05Z,Maybe we can design a special protocol for features in fury based on fury codebase,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sQrJA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1089,https://api.github.com/repos/apache/fury/issues/1089,fury,1994634431,1089,[C++] About the confusing C++ standard used in fury,PragmaTwice,20042607,Twice,,CLOSED,2023-11-15T11:55:37Z,2023-11-15T13:45:54Z,"I notice that there is some inconsistency regarding to the C++ standard used in this library:
- in `.bazelrc`, `-std=c++17` is added in cxxflags,
- in `bazel/fury.bzl`, there is a command line option `-std=c++11`.

If the library uses some post-c++11 features, there may be confusion during the build: 
one may be able to compile according to the `.bazelrc` settings, but another may not.

May I ask if it is possible to clarify the standard?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1089/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1089,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sCMjv,fury,1812515055,1089,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-15T13:12:09Z,2023-11-15T13:12:09Z,"@PragmaTwice c++17 should be used in `bazel/fury.bzl` too, it's missed in #859. Thanks for this catch.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sCMjv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1089,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sCUb-,fury,1812547326,1089,NA,PragmaTwice,20042607,Twice,,NA,2023-11-15T13:34:45Z,2023-11-15T13:34:45Z,Thank you for your clarification! I've opened a PR to fix it.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sCUb-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1090,https://api.github.com/repos/apache/fury/issues/1090,fury,1994704130,1090,[ Rust ] cargo add rust-version,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-15T12:42:03Z,2023-11-15T12:52:07Z,"## Is your feature request related to a problem? Please describe.
The minimum version of rust we use is 1.65, with a configuration that prevents developers from being able to compile

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1090/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1094,https://api.github.com/repos/apache/fury/issues/1094,fury,1994796375,1094,[DOC] Add JavaScript Sample ,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-15T13:38:04Z,2023-11-15T13:41:17Z,"## Is your feature request related to a problem? Please describe.
JavaScript sample is missing in `Xlang Object Graph Guide`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1094/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1097,https://api.github.com/repos/apache/fury/issues/1097,fury,1994849868,1097,[Rust]  fury_derive is so complex,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-15T14:07:15Z,2023-11-15T14:42:33Z,"## Is your feature request related to a problem? Please describe.
fury_derive include 3 derives, FuryMeta 、Serialize and Deserialize. Why should we make so many concepts.  Make it sample is necessary

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1097/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1099,https://api.github.com/repos/apache/fury/issues/1099,fury,1994935617,1099,[DOC] Add rust sample,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-15T14:51:28Z,2023-11-15T14:53:01Z,"## Is your feature request related to a problem? Please describe.
Rust sample is missing in home page
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1099/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1101,https://api.github.com/repos/apache/fury/issues/1101,fury,1998407439,1101,[Android] Does Fury support usage on Android?,Kaneki-x,6857108,Kaneki,,OPEN,2023-11-17T06:59:02Z,2023-11-17T07:09:12Z,"## Is your feature request related to a problem? Please describe.
After integrating into the Android project, some problems were discovered. The project probably did not adapt to the Java environment under Android, and there would be exceptions when running. Currently, it seems that _JDKAccess needs to be adapted.

## Describe the solution you'd like
Hope to increase the support and adaptation for serialization capabilities under the Android platform.

## Additional context
<img width=""716"" alt=""image"" src=""https://github.com/alipay/fury/assets/6857108/5ba2a857-105f-4144-a387-91f3da68b4c9"">
<img width=""863"" alt=""image"" src=""https://github.com/alipay/fury/assets/6857108/5b4d8525-927c-4098-a0a8-ff72ee4b59df"">","{""url"": ""https://api.github.com/repos/apache/fury/issues/1101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1101,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO5VF,fury,1815844165,1101,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T07:06:56Z,2023-11-17T07:06:56Z,"Some issues may need to be addressed for andriod support
- Does StringSerializer/StringBufferSerializer/StringBuilderSerializer needs to be adpated? Fury check `value` type by `char[]/byte[]`. Seems work for android too.
- Fury needs JDK8+, JDK8 API(Stream/Lambda) are used by fury. is this supported for all andriod versions? If not, lower  andriod versions needs to fallback to other frameworks
- Fury will generate bytecode dynamically using janino and load it as class. I'm not sure whether this work for andriod
- Fury use Java `Unsafe` API for some operations, I'm not sure whether this work for andriod

If all above issues can be addressed for andriod, I think fury will work well for andriod too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO5VF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1101,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO5vV,fury,1815845845,1101,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T07:08:47Z,2023-11-17T07:08:47Z,Another issue is that you'd better create Fury with `FuryBuilder#withAsyncCompilation(true)` to avoid compaliation latency. You can't warmup for clients.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sO5vV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1102,https://api.github.com/repos/apache/fury/issues/1102,fury,1998638179,1102,[Java] throw error if nested fury serialize happen in serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-17T09:12:32Z,2023-11-17T09:22:37Z,"## Is your feature request related to a problem? Please describe.
`Fury#serialize/Fury#deserialize` will reset context. If nested fury serialize happen in serialization for customized serializer, the later serialization/deserialization won't work, and users will see strange Exception. 

## Describe the solution you'd like
We should forbidden such invocation by raise a more detailed exception.

## Additional context

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/1104,fury,1998665818,1104,Expect jit serializer but got class io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer,qinzhikui,19801304,kui,,OPEN,2023-11-17T09:24:58Z,2024-06-19T06:21:17Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
java.lang.IllegalArgumentException: Expect jit serializer but got class io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer
	at io.fury.util.Utils.checkArgument(Utils.java:55) 
	at io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer.getOrCreateGeneratedSerializer(CodegenSerializer.java:96) 
	at io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer.write(CodegenSerializer.java:76) 
	at io.fury.Fury.writeData(Fury.java:483) 
	at io.fury.Fury.writeRef(Fury.java:283) 
	at io.fury.Fury.serialize(Fury.java:233) 
	at io.fury.Fury.serialize(Fury.java:193) 
	at io.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:64) 

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Fury 0.0.1, JDK11
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1104/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sPlVI,fury,1816024392,1104,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T09:28:04Z,2023-11-17T09:28:04Z,@qinzhikui Could you try fury 0.3.0? It should work,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sPlVI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sPmXF,fury,1816028613,1104,NA,qinzhikui,19801304,kui,,NA,2023-11-17T09:31:17Z,2023-11-17T09:31:17Z,"> @qinzhikui Could you try fury 0.3.0? It should work

By the way, what is the reason for this bug","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sPmXF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sQYm0,fury,1816234420,1104,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-17T11:40:48Z,2023-11-17T11:40:48Z,The jit created serializer didn't get updated into this serializer for circular self reference types. I fixed it several months before,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5sQYm0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55aWUf,fury,2036950303,1104,NA,skarpushin,4069181,Sergey Karpushin,sergey.v.karpushin@gmail.com,NA,2024-04-04T11:46:43Z,2024-04-04T11:46:43Z,I've just bumped into Exactly same issue with version 0.4.1.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55aWUf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55cLUX,fury,2037429527,1104,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-04T14:52:21Z,2024-04-04T14:52:21Z,@skarpushin Could you try latest snapshot version? We will release a new version soon,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55cLUX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55d-55,fury,2037902969,1104,NA,skarpushin,4069181,Sergey Karpushin,sergey.v.karpushin@gmail.com,NA,2024-04-04T18:27:59Z,2024-04-04T18:27:59Z,"Sorry, not immediately and most likely not SNAPSHOT version. Issue was not reproducible locally. Only when data transferred through several microservices. We already applied hotfix (reverted back to old (de)serialization approach). I don't know when there will be next time we can try Fury. Please let me know once new version is released. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55d-55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BsUTH,fury,2175878343,1104,NA,codenotknock,97100787,代码不会敲,,NA,2024-06-18T11:33:02Z,2024-06-18T11:33:02Z,When I did the Benchmark test，I've just bumped into Exactly same issue with version 0.5.1.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BsUTH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Bs1ea,fury,2176014234,1104,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-18T12:45:01Z,2024-06-18T12:45:01Z,"> When I did the Benchmark test，I've just bumped into Exactly same issue with version 0.5.1.

@codenotknock Could you provide the reproduction code here? The fix won't be complex if we can reproduce it locally","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Bs1ea/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1104,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ByMlD,fury,2177419587,1104,NA,codenotknock,97100787,代码不会敲,,NA,2024-06-19T02:26:23Z,2024-06-19T02:26:23Z,"Sorry, when I was using multithreading, I got the initialization definition wrong.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ByMlD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1106,https://api.github.com/repos/apache/fury/issues/1106,fury,2000394994,1106,[Rust] Remove the magic number,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-18T12:10:59Z,2023-11-18T12:28:00Z,"## Is your feature request related to a problem? Please describe.
There are some magic numbers in the Rust codebase, which can be confusing for developers trying to read the code.

For example, it is hard to understand what the 4 means
```Rust
impl<T: Serialize> Serialize for HashSet<T> {
    fn write(&self, serializer: &mut SerializerState) {
        // length
        serializer.writer.i32(self.len() as i32);

        let reserved_space = (<T as Serialize>::reserved_space() + 3) * self.len();
        serializer.writer.reserve(reserved_space);

        // key-value
        for i in self.iter() {
            i.serialize(serializer);
        }
    }

    fn reserved_space() -> usize {
        4
    }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1108,https://api.github.com/repos/apache/fury/issues/1108,fury,2000428202,1108,[Rust] Add Rust doc ,theweipeng,16490211,weipeng,wangweipeng@apache.org,OPEN,2023-11-18T13:49:21Z,2023-11-18T13:52:27Z,"## Is your feature request related to a problem? Please describe.
Rust code has no comments, which is terriable. We must add detailed comments to ensure that the code is readable
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1111,https://api.github.com/repos/apache/fury/issues/1111,fury,2000870041,1111,[Rust] check xlang,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-19T14:17:40Z,2023-11-19T14:36:30Z,"## Is your feature request related to a problem? Please describe.
Currently, Rust only supports xlang. We should check the lang flag and provide user-friendly notifications.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/1113,fury,2001431779,1113,[Java] remove guava dependency,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-11-20T06:03:35Z,2024-07-11T14:31:29Z,"## Is your feature request related to a problem? Please describe.
Fury use guava for generic reflection, cache. But guava is used so widely, it's very likely to version conflict with users code.

## Describe the solution you'd like
Remove guava dependency, implement all releated methods by fury self.

Here are the things which may need to be finished to make guava optional:
- Implement a `TypeRef` to replace `TypeToken` in guava, which is work that @nandakumar131 doing before.
- Remove guava Cache which Fury used for weak key and soft values map
- Remove guava `FinalizableWeakReference` which fury used to build a multi-key weak map
- Remove guava `ListeningExecutorService` which fury used to compile classes and register callback
- Remove guava `com.google.common.collect` usage in the src/main/java dir except `org.apache.fury.serializer.collection.GuavaCollectionSerializers`
- Make `org.apache.fury.serializer.collection.GuavaCollectionSerializers` load stub classes, so even guava jar are not in classpath, teh fury init won't throw exception, like we did in org.apache.fury.serializer.collection.ImmutableCollectionSerializers
- Add a script to ci  to check `com.google.` are only used in `GuavaCollectionSerializers` and test classes.

## Additional context
Shade guava is an option too, but introduce complexities  for fury GuavaSerializers and guava CVE","{""url"": ""https://api.github.com/repos/apache/fury/issues/1113/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVSIW,fury,1867850262,1113,NA,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,NA,2023-12-22T16:05:12Z,2023-12-22T16:05:12Z,"@chaokunyang 
If you haven't started working on the guava removal part 2, I can take it up and post a PR.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVSIW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVU4K,fury,1867861514,1113,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-22T16:17:41Z,2023-12-22T16:17:41Z,"Hi @nandakumar131, thanks for the willingness to contribute to Fury. I haven't start part2 yet, you can take up this part work.

FYI, Currently Fury uses guava TypeToken for generics inspection and use guava cache for some static data cache. These are the biggest dependency on guava","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVU4K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVW1e,fury,1867869534,1113,NA,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,NA,2023-12-22T16:26:56Z,2023-12-22T16:26:56Z,"Thanks @chaokunyang!
If the change becomes huge, I will split it into two PRs to make it easy to review.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVW1e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVqM-,fury,1867948862,1113,NA,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,NA,2023-12-22T18:05:41Z,2023-12-22T18:05:41Z,@chaokunyang  do we still want to support `GuavaCollectionSerializers`?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vVqM-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vWImU,fury,1868073364,1113,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-22T21:15:06Z,2023-12-22T21:15:06Z,"> @chaokunyang do we still want to support `GuavaCollectionSerializers`?

I prefer to still support it, but may use a way without source api dependency. For example, we use methodhandle to get all methods for invocation","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vWImU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55kXTm,fury,2039575782,1113,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-05T11:34:24Z,2024-04-05T11:34:24Z,This also helps in reducing JAR file size. Let me know if I can help you here.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55kXTm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55lWXu,fury,2039834094,1113,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-05T13:40:38Z,2024-04-05T13:40:38Z,"> This also helps in reducing JAR file size. Let me know if I can help you here.

@Munoon That would be really great. Actually I am on the work of first release of Fury under asf and don't have enough time for this feature","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55lWXu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55lZZQ,fury,2039846480,1113,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-05T13:45:44Z,2024-04-05T13:45:44Z,"> @Munoon That would be really great. Actually I am on the work of first release of Fury under asf and don't have enough time for this feature

Can you please specify which exactly help you need? To complete @nandakumar131 PR or to do some further steps?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55lZZQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pzCp,fury,2041000105,1113,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-06T07:16:07Z,2024-04-06T07:16:07Z,"> > @Munoon That would be really great. Actually I am on the work of first release of Fury under asf and don't have enough time for this feature
> 
> Can you please specify which exactly help you need? To complete @nandakumar131 PR or to do some further steps?

Here are the things which may need to be finished to make guava optional:
- Implement a `TypeRef` to replace `TypeToken` in guava, which is work that @nandakumar131 doing before.
- Remove guava Cache which Fury used for weak key and soft values map
- Remove guava `FinalizableWeakReference` which fury used to build a multi-key weak map
- Remove guava `ListeningExecutorService` which fury used to compile classes and register callback
- Remove guava `com.google.common.collect` usage in the src/main/java dir except `org.apache.fury.serializer.collection.GuavaCollectionSerializers`
- Make `org.apache.fury.serializer.collection.GuavaCollectionSerializers` load stub classes, so even guava jar are not in classpath, teh fury init won't throw exception, like we did in org.apache.fury.serializer.collection.ImmutableCollectionSerializers
- Add a script to ci  to check `com.google.` are only used in `GuavaCollectionSerializers` and test classes.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pzCp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55p7qH,fury,2041035399,1113,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-06T09:56:21Z,2024-04-06T09:56:21Z,"OK, I'll separate those by different PRs starting from `TypeRef` implementation, which looks like the most hard one, so it'll take some time...","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55p7qH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55p744,fury,2041036344,1113,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-06T10:01:27Z,2024-04-06T10:01:27Z,"> OK, I'll separate those by different PRs starting from `TypeRef` implementation, which looks like the most hard one, so it'll take some time...

Yep, the `TypeRef` is the most compilciated one, and the `TypeToken` in guava has some performance issue, so we did some optimization in `org.apache.fury.type.TypeUtils`. If we have our own implementation, such helper can be simplified a lot.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55p744/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1113,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rGmS,fury,2058119570,1113,NA,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,NA,2024-04-16T02:26:36Z,2024-04-16T02:26:36Z,"@chaokunyang, sorry about the delay on #1273.
I will not be able to make any progress on the PR in next two weeks, I can take it up after that.

@Munoon, feel free to take over #1273, if you have started working on `TypeToken` changes.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56rGmS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1115,https://api.github.com/repos/apache/fury/issues/1115,fury,2002426979,1115,[Java] Graal Native Image Support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-20T15:14:53Z,2023-11-30T09:27:10Z,"## Is your feature request related to a problem? Please describe.
This PR is used to tracking the progress of fury on graal native image. The implementation and designs is tracked in #678 

## Describe the solution you'd like
The implementation can be divided into following steps:
- [x] #1116  
- [x] #1141
- [x] #1146
- [x] #1154
- [x] #1143 
- [x] #1164
- [x] #1167
- [x] #1177
## Additional context
#678 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1116,https://api.github.com/repos/apache/fury/issues/1116,fury,2002613853,1116,[Java] make unsafe offset compatible with graalvm,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-20T16:48:20Z,2023-11-21T16:04:05Z,"## Is your feature request related to a problem? Please describe.
Graalvm filed offset may change between build time and runtime:
![image](https://github.com/alipay/fury/assets/12445254/efe5eade-74b0-45c8-97fd-21503ac9d34f)
https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#unsafe-accesses

![image](https://github.com/alipay/fury/assets/12445254/440139a1-ea6e-4e41-bcfe-ab8276ffc618)
https://www.graalvm.org/latest/reference-manual/native-image/metadata/Compatibility/#unsafe-memory-access

## Describe the solution you'd like
Adapt such offset by graalvm pattern: Make the call followed by a field store directly or by a sign extend node followed directly by a field store.

## Additional context
#678 #1115 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1118,https://api.github.com/repos/apache/fury/issues/1118,fury,2003464107,1118,[Python] Drop python3.6 support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-21T05:01:28Z,2023-11-21T14:13:39Z,"## Is your feature request related to a problem? Please describe.
python3.6 has been end of support in 2021, many popular libraries such pandas/pyarrow has drop support for py3.6. It's time for fury drop py3.6 support too.

## Describe the solution you'd like
drop py3.6 support 

## Additional context
pyarrow doesn't release py3.6 support for pyarrow7+, and pyarrow6- doesn't release version for python 3.11/12
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1119,https://api.github.com/repos/apache/fury/issues/1119,fury,2003553766,1119,[Rust] Rust language flag should be Xlang,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-11-21T06:28:54Z,2023-11-21T08:02:07Z,"## Is your feature request related to a problem? Please describe.
Rust does not yet support native data, so we should set the language flag as Xlang.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1127,https://api.github.com/repos/apache/fury/issues/1127,fury,2004771505,1127,[Scala] sbt.librarymanagement.ResolveException: Error downloading XXX ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-21T17:09:26Z,2023-11-21T17:11:25Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
```java
[info] set current project to fury-scala (in build file:/home/runner/work/fury/fury/scala/)
[warn] 
[warn] 	Note: Unresolved dependencies path:
[error] sbt.librarymanagement.ResolveException: Error downloading org.furyio:fury-core:0.4.0-SNAPSHOT
[error]   Not found
[error]   Not found
[error]   not found: /home/runner/.ivy2/localorg.furyio/fury-core/0.4.0-SNAPSHOT/ivys/ivy.xml
[error]   not found: https://repo1.maven.org/maven2/org/furyio/fury-core/0.4.0-SNAPSHOT/fury-core-0.4.0-SNAPSHOT.pom
[error]   not found: /home/runner/.m2/repository/org/furyio/fury-core/0.4.0-SNAPSHOT/fury-core-0.4.0-SNAPSHOT.pom
[error] 	at lmcoursier.CoursierDependencyResolution.unresolvedWarningOrThrow(CoursierDependencyResolution.scala:344)
[error] 	at lmcoursier.CoursierDependencyResolution.$anonfun$update$38(CoursierDependencyResolution.scala:313)
[error] 	at scala.util.Either$LeftProjection.map(Either.scala:573)
[error] 	at lmcoursier.CoursierDependencyResolution.update(CoursierDependencyResolution.scala:313)
[error] 	at sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:60)
[error] 	at sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:60)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:134)
[error] 	at sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:74)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$20(LibraryManagement.scala:147)
[error] 	at scala.util.control.Exception$Catch.apply(Exception.scala:228)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:147)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:128)
[error] 	at sbt.util.Tracked$.$anonfun$inputChangedW$1(Tracked.scala:220)
[error] 	at sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:[16](https://github.com/alipay/fury/actions/runs/6945171694/job/18893920049#step:5:17)1)
[error] 	at sbt.Classpaths$.$anonfun$updateTask0$1(Defaults.scala:3801)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:750)
[error] (update) sbt.librarymanagement.ResolveException: Error downloading org.furyio:fury-core:0.4.0-SNAPSHOT
[error]   Not found
[error]   Not found
[error]   not found: /home/runner/.ivy2/localorg.furyio/fury-core/0.4.0-SNAPSHOT/ivys/ivy.xml
[error]   not found: https://repo1.maven.org/maven2/org/furyio/fury-core/0.4.0-SNAPSHOT/fury-core-0.4.0-SNAPSHOT.pom
[error]   not found: /home/runner/.m2/repository/org/furyio/fury-core/0.4.0-SNAPSHOT/fury-core-0.4.0-SNAPSHOT.pom
[error] Total time: 0 s, completed Nov 21, [20](https://github.com/alipay/fury/actions/runs/6945171694/job/18893920049#step:5:21)[23](https://github.com/alipay/fury/actions/runs/6945171694/job/18893920049#step:5:24) 2:[25](https://github.com/alipay/fury/actions/runs/6945171694/job/18893920049#step:5:26):[27](https://github.com/alipay/fury/actions/runs/6945171694/job/18893920049#step:5:28) PM
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/ed253ace-c01d-47fe-96d7-73442eddd4e6)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1127/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1128,https://api.github.com/repos/apache/fury/issues/1128,fury,2005367933,1128,[Scala] Serialization exception when a type is defined in a package object,ghostdogpr,7413894,Pierre Ricadat,,CLOSED,2023-11-22T00:43:03Z,2023-11-22T11:14:18Z,"**Describe the bug**
If you try to serialize anything that is defined inside a `package object`, it fails with an error like this:
```
Exception in thread ""main"" java.lang.RuntimeException: Create sequential serializer failed, 
class: class SomePackageObject.package$SomeClass
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:955)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:953)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:908)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:813)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1175)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1107)
	at io.fury.Fury.writeRef(Fury.java:309)
	at io.fury.Fury.write(Fury.java:286)
	at io.fury.Fury.serialize(Fury.java:231)
	at io.fury.Fury.serialize(Fury.java:185)
```

**Expected behavior**
There should be no such error.

**To Reproduce**
```scala
import io.fury.Fury

package object SomePackageObject {
  case class SomeClass(value: Int)
}

object Reproducer extends App {
  val fury = Fury
    .builder()
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(true)
    .build()

  val p = SomePackageObject.SomeClass(1)
  println(fury.deserialize(fury.serialize(p)))
}
```

**Environment (please complete the following information):**
Tried with Fury 0.3.0 and 0.3.1, Scala 2.13.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1128,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5snWn8,fury,1822255612,1128,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-22T07:41:03Z,2023-11-22T07:41:03Z,"@ghostdogpr Thanks for creating this issue, I can reproduce it in my local machine. I will fix it in #1130","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5snWn8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1132,https://api.github.com/repos/apache/fury/issues/1132,fury,2007545544,1132,[Rust] Cargo test failed ,caicancai,77189278,Cancai Cai,,CLOSED,2023-11-23T06:13:10Z,2023-11-23T07:17:08Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
A clear and concise description of what the bug is.

<img width=""850"" alt=""屏幕截图 2023-11-23 115754"" src=""https://github.com/alipay/fury/assets/77189278/694451ed-2019-4481-aaf3-2413cf658a84"">

<img width=""541"" alt=""285092302-41bd2389-284c-405f-bc25-2cef80fdd57d"" src=""https://github.com/alipay/fury/assets/77189278/a4cbdb8b-b9fa-4c09-8e89-2fd20b14f43d"">



**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1132/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1132,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5stlkx,fury,1823889713,1132,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-11-23T06:54:38Z,2023-11-23T06:54:38Z,"@caicancai  The cause of this bug is that I removed the native skip when checking the language flag. I added it back and the cargo test ran successfully. However, the cause of the error that cant't broke the CI pipeline still needs to be investigated.""","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5stlkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1137,https://api.github.com/repos/apache/fury/issues/1137,fury,2008923644,1137,[Scala] Serialization exception when a class contains a List,ghostdogpr,7413894,Pierre Ricadat,,CLOSED,2023-11-24T00:40:19Z,2023-11-28T15:22:33Z,"**Describe the bug**
If you try to serialize a class that contains a List, it fails with an error like this:
```
Exception in thread ""main"" java.lang.ClassCastException: class io.fury.serializer.ReplaceResolveSerializer cannot be cast to class io.fury.serializer.collection.AbstractCollectionSerializer (io.fury.serializer.ReplaceResolveSerializer and io.fury.serializer.collection.AbstractCollectionSerializer are in unnamed module of loader 'app')
	at Reproducer_CFuryRefCodec_457312648_716083600_1064154107.writeCollectionClassInfo$(Reproducer_CFuryRefCodec_457312648_716083600_1064154107.java:67)
	at Reproducer_CFuryRefCodec_457312648_716083600_1064154107.write(Reproducer_CFuryRefCodec_457312648_716083600_1064154107.java:134)
	at io.fury.Fury.writeData(Fury.java:518)
	at io.fury.Fury.writeRef(Fury.java:311)
	at io.fury.Fury.write(Fury.java:286)
	at io.fury.Fury.serialize(Fury.java:231)
	at io.fury.Fury.serialize(Fury.java:185)
	at Reproducer$.delayedEndpoint$Reproducer$1(Testt.scala:15)
	at Reproducer$delayedInit$body.apply(Testt.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at scala.Function0.apply$mcV$sp$(Function0.scala:39)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:17)
	at scala.App.$anonfun$main$1(App.scala:76)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:919)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at Reproducer$.main(Testt.scala:3)
	at Reproducer.main(Testt.scala)
```

**Expected behavior**
There should be no such error.

**To Reproduce**
```scala
import io.fury.Fury

object Reproducer extends App {

  val fury = Fury
    .builder()
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(true)
    .build()

  case class C(list: List[Int])

  val p = C(List(1))
  println(fury.deserialize(fury.serialize(p)))
}
```

**Environment (please complete the following information):**
Tried with Fury 0.3.1 and 0.4.0-SNAPSHOT, Scala 2.13.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1137/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1137,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s0blh,fury,1825683809,1137,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-24T13:32:43Z,2023-11-24T13:32:43Z,"Hi @ghostdogpr , thanks for finding this bug and report to us, I fixed it in #1140. Could you try it out again? If Fury works for your scenerios without further issues. We can release a new scala version ASAP.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s0blh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1137,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tAvkC,fury,1828911362,1137,NA,ghostdogpr,7413894,Pierre Ricadat,,NA,2023-11-28T01:22:14Z,2023-11-28T01:22:14Z,"I just tried it, it is still failing with `List.empty` or `Nil` instead of `List(1)`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tAvkC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1137,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA7BV,fury,1828958293,1137,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-28T02:24:29Z,2023-11-28T02:24:29Z,"@ghostdogpr Thanks for point out this, I'll try it later and create a new fix ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA7BV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1137,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tFJHo,fury,1830064616,1137,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-28T15:22:32Z,2023-11-28T15:22:32Z,Will be addressed in #1157,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tFJHo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1145,https://api.github.com/repos/apache/fury/issues/1145,fury,2010995963,1145,[C++] Tracking issue: Support row format serializer for C++ types,PragmaTwice,20042607,Twice,,OPEN,2023-11-26T11:04:23Z,2023-12-23T13:54:58Z,"## Is your feature request related to a problem? Please describe.

Currently we only have raw `Writer`s in C++ fury implementation,
it's not supposed to be directly used by users for their own classes.

Instead, we can support serializers via a more intuitive way, e.g.
```c++
struct Something {
   int val1;
   float val2;
   ...
};

FURY_FIELD_INFO(Something, val1, val2, ...);

Something a = ...;
serializer.encode(a); // including schema building and writer codegen
```

## Describe the solution you'd like
Steps:
- [x] #1144
- [x] #1151 
- [x] #1158
- [x] #1172
- [x] #1173
- [x] #1193 
- [x] #1212
- [x] #1215
- [x] #1223
- [ ] Support map types
- [ ] Documentation for users
- [ ] ...

## Additional context
--
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1146,https://api.github.com/repos/apache/fury/issues/1146,fury,2011124478,1146,[Java] Support add static field in fury codegen,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-26T17:19:41Z,2023-11-27T02:39:43Z,"## Is your feature request related to a problem? Please describe.
As the graalvm doc says, the offset is subject to change between build time and runtime. :
![image](https://github.com/alipay/fury/assets/12445254/efe5eade-74b0-45c8-97fd-21503ac9d34f)
https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#unsafe-accesses

![image](https://github.com/alipay/fury/assets/12445254/440139a1-ea6e-4e41-bcfe-ab8276ffc618)
https://www.graalvm.org/latest/reference-manual/native-image/metadata/Compatibility/#unsafe-memory-access

Fury inline such offsets in the generated code, need to change to a compile-time constant of the generated class. so we need to support add static field in fury codegen


An example to reproduce offset mismatch:
```java

import java.util.List;
import java.util.Map;
import java.util.Objects;
import sun.misc.Unsafe;
import java.lang.reflect.*;;

 class Foo {
  int f1;
  String f2;
  List<String> f3;
  Map<String, Long> f4;

  public Foo(int f1, String f2, List<String> f3, Map<String, Long> f4) {
    this.f1 = f1;
    this.f2 = f2;
    this.f3 = f3;
    this.f4 = f4;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Foo foo = (Foo) o;
    return f1 == foo.f1 && Objects.equals(f2, foo.f2) && Objects.equals(f3, foo.f3)
      && Objects.equals(f4, foo.f4);
  }

  @Override
  public int hashCode() {
    return Objects.hash(f1, f2, f3, f4);
  }

  @Override
  public String toString() {
    return ""Foo{"" +
      ""f1="" + f1 +
      "", f2='"" + f2 + '\'' +
      "", f3="" + f3 +
      "", f4="" + f4 +
      '}';
  }
}


class Example {
    private static final String message;
    static Unsafe unsafe;
    static Field[] fields;
    static {
        message = System.getProperty(""org.graalvm.nativeimage.imagecode"");
        System.out.println(""Build message is: "" + message);
        fields = Foo.class.getDeclaredFields();
        try {
            Field f = Unsafe.class.getDeclaredField(""theUnsafe"");
            f.setAccessible(true);
            unsafe = (Unsafe) f.get(null);
            for (Field field : fields) {
                if (Modifier.isStatic(field.getModifiers())) continue;;
                System.out.println(field.getName() + "": "" + unsafe.objectFieldOffset(field));
            }
        } catch (Exception e) {
                throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        System.out.println(""Hello, World! My message is: "" + message);
         for (Field field : fields) {
                if (Modifier.isStatic(field.getModifiers())) continue;;
                System.out.println(field.getName() + "": "" + unsafe.objectFieldOffset(field));
            }
    }
}
```

Build command: `native-image Example --initialize-at-build-time=Example`

Build time:
```
f1: 12
f2: 16
f3: 20
f4: 24
```

Runtime:
```
f1: 16
f2: 4
f3: 8
f4: 12
```

## Describe the solution you'd like
Support add static field in fury codegen

## Additional context
#1115 #678 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1148,https://api.github.com/repos/apache/fury/issues/1148,fury,2011192697,1148,[Java] Annotation-based serializer registration,knutwannheden,408765,Knut Wannheden,knut.wannheden@gmail.com,OPEN,2023-11-26T20:27:30Z,2023-11-28T02:37:37Z,"For simpler serializer registration and an improved developer experience, it would be nice if serializers could be registered via reflection on the type being serialized and / or on a property being serialized (not sure if the latter granularity can be supported).

The annotation would probably also have to have attributes for nullability and reference tracking.

See [Slack message](https://fury-project.slack.com/archives/C055FN7K9FX/p1700993516418729?thread_ts=1700895387.358049&cid=C055FN7K9FX).","{""url"": ""https://api.github.com/repos/apache/fury/issues/1148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1148,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA8Ni,fury,1828963170,1148,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-28T02:31:24Z,2023-11-28T02:31:24Z,What do you mean on a property?  You mean add annotation on field? Seems annotation on class or should  be supported too,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA8Ni/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1148,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA9SE,fury,1828967556,1148,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-28T02:37:36Z,2023-11-28T02:37:36Z,"One of the issue for the annotation on the class is that we must write classname for deserialization, we can't sepcify a class is unless we scan the package, otherwise we don't know which class to load based on class is. But If you register class ahead, this issue won't exist. Users should choose which to use based on his cases","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tA9SE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1149,https://api.github.com/repos/apache/fury/issues/1149,fury,2011347275,1149,[Java] add log switch on CompileUnit and JaninoUtils,mof-dev-3,129163631,,,OPEN,2023-11-27T01:58:59Z,2023-11-27T15:53:01Z,"## Is your feature request related to a problem? Please describe.
![image](https://github.com/alipay/fury/assets/129163631/4adccf91-21f6-4819-9c30-6d6f2ca8f5d1)

Fury generating code at runtime is a very good point for performance sake. 
In my opinion, the logs in JaninoUtils and CompileUnit are helpful in dev/debug mode but may make little sense or even confuse common users who do not care about how the codec is implemented under the hood.

So, maybe consider adding a switch for logs to increase flexibility for different use cases.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1149,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5oI0,fury,1827045940,1149,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-27T02:52:09Z,2023-11-27T02:52:09Z,Could we configure log4j to disable logging for those classes?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5oI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1149,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5-Tp,fury,1827136745,1149,NA,mof-dev-3,129163631,,,NA,2023-11-27T05:13:35Z,2023-11-27T05:13:35Z,"> JaninoUtils
![image](https://github.com/alipay/fury/assets/129163631/0a611982-2d16-4a25-85f4-d712a8d4c0f8)
![image](https://github.com/alipay/fury/assets/129163631/6255db33-f9ba-4197-9149-7ae68006ee06)

Could be done by config the logging framework
Pls also notice that there are some cases some log place holder can cause unnecessary function calls as a side effect","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5-Tp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1149,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s9qSw,fury,1828103344,1149,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-27T15:50:43Z,2023-11-27T15:50:43Z,"@mof-dev-3 The cost is minimal compared to codegen, we can ignore such cost","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s9qSw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1149,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s9r_g,fury,1828110304,1149,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-27T15:53:00Z,2023-11-27T15:53:00Z,"THe switch is more easy-to-use compared to logging config, but the API and naming seems hard to enumrate, and open an window for more switch like this. I would suggest add switch for warnings only","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s9r_g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1150,https://api.github.com/repos/apache/fury/issues/1150,fury,2011386455,1150,[Java] add copy and deepCopy api for fury,mof-dev-3,129163631,,,OPEN,2023-11-27T02:53:04Z,2023-12-05T16:53:07Z,"It is a common use case to copy/deepCopy Java objects. 
Before Fury, we used Kryo, which offers copy/deepCopy APIs. 
We are trying to migrate from Kryo to Fury because the latter offers better performance.

Maybe consider adding the copy and deepCopy APIs, making it easier for users to migrate with less effort.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1150,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5wpJ,fury,1827080777,1150,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-27T03:44:23Z,2023-11-27T03:44:23Z,"@mof-dev-3 We have an issue for this in #1014, but no one has time to take over. Would you like to take a look at it ? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5s5wpJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1150,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tvl3V,fury,1841192405,1150,NA,quhw,891649,Huanwen Qu,quhw@qq.com,NA,2023-12-05T16:45:57Z,2023-12-05T16:45:57Z,"According to my benchmark, fury's serialize+deserialize is a little slower than kryo's copy.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tvl3V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1150,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tvszn,fury,1841220839,1150,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-05T16:53:06Z,2023-12-05T16:53:06Z,"> According to my benchmark, fury's serialize+deserialize is a little slower than kryo's copy.

@quhw kryo's copy will skip serialization, it just assign object attributes.  but it you use fury `serialize+deserialize` to mock copy, there will be extra copy introduced by serialization, especially for immutable types such as string/primitives.  Kryo will skip copy by just return the original object in its copy interface implementation, but if you use `serialize+deserialize`  to mock it, the copy will introduce extra cost. 

I think the proposal in https://github.com/alipay/fury/issues/1014 can address this issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tvszn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1152,https://api.github.com/repos/apache/fury/issues/1152,fury,2013574255,1152,[Java] Support deserialization of object with writeReplace and cyclic reference,zhengya2019,50606481,,,CLOSED,2023-11-28T04:03:49Z,2023-11-28T16:23:25Z,"## Is your feature request related to a problem? Please describe.

When I use the spark serverless scenario, the Sql parser generates the execution plan and serializes the sparkPlan, and passes it to the spark driver for deserialization. The serialization is successful, but the deserialization will fail. Error reported:
java.lang.ClassCastException: cannot assign instance of scala.collection.immutable.List$SerializationProxy to field org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec.aggregateExpressions of type scala.collection.Seq in instance of org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec

I find the same issue: 
if object define writeReplace and  exist cyclic reference. deserialization fail. This issue exist in jdk over 10 years. see 
 https://bugs.openjdk.org/browse/JDK-8024931


示例代码：

```java
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import io.fury.Fury;
import io.fury.Language;

public class JdkSerializableTest {
    public static void main(String[] args) throws Exception {
        try {
            Container c = new Container(""Circular References Test"");
            c.addItem(new Item(""Item 1""));
            c.addItem(new Item(""Item 2""));

            Fury fury = Fury.builder().withLanguage(Language.JAVA)
                    .requireClassRegistration(false)
                    .build();
            fury.register(Container.class);
            byte[] bytes = fury.serialize(c);
            System.out.println(fury.deserialize(bytes));

            System.out.println(""Container c has label '"" + c.getLabel() + ""' and has "" + c.getItems().size() + "" items."");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

class Container implements Serializable {
    private static final long serialVersionUID = 1L;
    private List<Item> items = new ArrayList<>();
    private String label = """";

    public Container() {
    }

    public Container(String label) {
        this.label = label;
    }

    public String getLabel() {
        return this.label;
    }
    public void setLabel(String label) {
        this.label = label;
    }

    public boolean addItem(Item item) {
        if(item != null) {
            item.setParent(this);
            return this.items.add(item);
        } else {
            return false;
        }
    }
    public boolean removeItem(Item item) {
        if(item != null) {
            item.setParent(null);
            return this.items.remove(item);
        } else {
            return false;
        }
    }

    public List<Item> getItems() {
        return new ArrayList<Item>(this.items);
    }

    private static final class SerializationProxy implements Serializable {

        private static final long serialVersionUID = 1L;
        private String containerLabel = """";
        private List<Item> items;
        public SerializationProxy(Container c){
            this.containerLabel = c.getLabel();
            this.items = new ArrayList<>(c.getItems());
        }

        private Object readResolve(){
            Container c = new Container(this.containerLabel);
            for(int i = 0; this.items != null && i < this.items.size(); i++) {
                c.addItem(this.items.get(i));
            }
            return c;
        }
    }

    private Object writeReplace(){
        return new SerializationProxy(this);
    }

    private Object readObject(ObjectInputStream in) throws InvalidObjectException {
        throw new InvalidObjectException(""Proxy Required!"");
    }
}

class Item implements Serializable {
    private static final long serialVersionUID = 1L;
    private Container parent = null;
    private String name = """";

    public Item() {
    }
    public Item(String name) {
        this.name = name;
    }

    public Container getParent() {
        return this.parent;
    }
    public void setParent(Container parent) {
        this.parent = parent;
    }

    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
```

## Describe the solution you'd like
if exist writeReplace and cycle reference, it can work.

## Additional context
See similar issue：https://issues.apache.org/jira/browse/SPARK-19938
![image](https://github.com/alipay/fury/assets/50606481/251b35ce-6687-4141-9611-b2d25dca2f7a)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1152,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tFnDb,fury,1830187227,1152,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-28T16:14:13Z,2023-11-28T16:14:13Z,"This is already supported in fury latest versions, you are using the version several months ago, please use latest version.
I tested it with [ fury 0.3.1](https://mvnrepository.com/artifact/org.furyio/fury-core/0.3.1), works fine.
![image](https://github.com/alipay/fury/assets/12445254/57ca54f9-f010-44df-a2ec-860a6e830afe)

You can ugrade fury version to 0.3.1 by:
```xml
<!-- https://mvnrepository.com/artifact/org.furyio/fury-core -->
<dependency>
    <groupId>org.furyio</groupId>
    <artifactId>fury-core</artifactId>
    <version>0.3.1</version>
</dependency>

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tFnDb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1153,https://api.github.com/repos/apache/fury/issues/1153,fury,2013704281,1153,[Java] support create serializer when register class,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-28T05:54:50Z,2023-11-28T06:02:50Z,"## Is your feature request related to a problem? Please describe.
We can generate code for graalvm native image at build time only, so users need to register and trigger FURY codegen at graalvm build time. There should be a more intuitive API, which can be used to generate code at applciation start time to avoid the warmup.

## Describe the solution you'd like
Add `createSerializer` param to register API

## Additional context
#1143 #678 #1115 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1155,https://api.github.com/repos/apache/fury/issues/1155,fury,2013822587,1155,[Java] Support thread-safe fury in graalvm native image,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-28T07:28:45Z,2023-11-29T04:22:52Z,"## Is your feature request related to a problem? Please describe.
We support fury in graalvm native image in #1143,  but didn't add support for ThreadSafeFury.

We need to support ThreadSafeFury  in graalvm native image.

Expected Thread Safe Example:
```java
import io.fury.Fury;
import io.fury.ThreadLocalFury;
import io.fury.ThreadSafeFury;
import io.fury.collection.Collections;
import io.fury.util.Preconditions;

import java.util.List;
import java.util.Map;

public class ThreadSafeExample {
  static ThreadSafeFury fury;

  static {
    fury = new ThreadLocalFury(classLoader -> {
      Fury f = Fury.builder().requireClassRegistration(true).build();
      // register and generate serializer code.
      f.register(Foo.class, true);
      return f;
    });
  }

  public static void main(String[] args) throws Throwable {
    Preconditions.checkArgument(""abc"".equals(fury.deserialize(fury.serialize(""abc""))));
    Preconditions.checkArgument(List.of(1,2,3).equals(fury.deserialize(fury.serialize(List.of(1,2,3)))));
    List<String> list = Collections.ofArrayList(""a"", ""b"", ""c"");
    Preconditions.checkArgument(list.equals(fury.deserialize(fury.serialize(list))));
    Map<String, Integer> map = Collections.ofHashMap(""k1"", 1, ""k2"", 2);
    Preconditions.checkArgument(map.equals(fury.deserialize(fury.serialize(map))));
    map = Map.of(""k1"", 1, ""k2"", 2);
    Preconditions.checkArgument(map.equals(fury.deserialize(fury.serialize(map))));
    Foo foo = new Foo(10, ""abc"", List.of(""str1"", ""str2""), Map.of(""k1"", 10L, ""k2"", 20L));
    Object o = fury.deserialize(fury.serialize(foo));
    Preconditions.checkArgument(foo.equals(o));
}
```
## Describe the solution you'd like
Add ThreadSafeFury support for graalvm native image
 
## Additional context
https://github.com/alipay/fury/issues/1115 https://github.com/alipay/fury/issues/678","{""url"": ""https://api.github.com/repos/apache/fury/issues/1155/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1156,https://api.github.com/repos/apache/fury/issues/1156,fury,2013845496,1156,[Java] Optimize graalvm native image size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-11-28T07:45:51Z,2023-11-28T07:45:57Z,"## Is your feature request related to a problem? Please describe.
Optimize graalvm native image size

## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
#678 #1143 #1115 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1157,https://api.github.com/repos/apache/fury/issues/1157,fury,2014687653,1157,[Scala] ClassCastException  when serializing singleton map/collection,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-28T15:20:13Z,2023-11-28T16:02:38Z,"Thank you for reporting the problem!
Please make sure what you are reporting is a bug with reproducible steps. 

**Describe the bug**
```
class io.fury.serializer.scala.SingletonObjectSerializer cannot be cast to class io.fury.serializer.collection.AbstractCollectionSerializer (io.fury.serializer.scala.SingletonObjectSerializer and io.fury.serializer.collection.AbstractCollectionSerializer are in unnamed module of loader 'app')
java.lang.ClassCastException: class io.fury.serializer.scala.SingletonObjectSerializer cannot be cast to class io.fury.serializer.collection.AbstractCollectionSerializer (io.fury.serializer.scala.SingletonObjectSerializer and io.fury.serializer.collection.AbstractCollectionSerializer are in unnamed module of loader 'app')
	at io.fury.serializer.CollectionStruct1FuryRefCodec_457312648_622488023_533173186.writeCollectionClassInfo$(CollectionStruct1FuryRefCodec_457312648_622488023_533173186.java:61)
	at io.fury.serializer.CollectionStruct1FuryRefCodec_457312648_622488023_533173186.write(CollectionStruct1FuryRefCodec_457312648_622488023_533173186.java:69)
	at io.fury.Fury.writeData(Fury.java:554)
	at io.fury.Fury.writeRef(Fury.java:347)
	at io.fury.Fury.write(Fury.java:322)
	at io.fury.Fury.serialize(Fury.java:256)
	at io.fury.Fury.serialize(Fury.java:209)
	at io.fury.serializer.CollectionSerializerTest.$anonfun$new$8(CollectionSerializerTest.scala:59)
```

**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
```scala
        val struct1 = CollectionStruct1(List.empty)
        fury1.deserialize(fury1.serialize(struct1)) shouldEqual struct1
        val struct2 = CollectionStruct1(Nil)
        fury1.deserialize(fury1.serialize(struct2)) shouldEqual struct2
```
or 
```scala
        val struct = MapStruct1(Map.empty)
        fury1.deserialize(fury1.serialize(struct)) shouldEqual struct
      }
```

**Screenshots**
![image](https://github.com/alipay/fury/assets/12445254/a31b2c37-6780-4d57-ad03-240f41caccbb)
**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1157/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1162,https://api.github.com/repos/apache/fury/issues/1162,fury,2014851383,1162,[Java] Remove load arrow serializers by default,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-28T16:37:33Z,2023-11-28T16:45:00Z,"## Is your feature request related to a problem? Please describe.
Arrow serializers is not used frequently, we should avoid load it them by default.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1165,https://api.github.com/repos/apache/fury/issues/1165,fury,2015651051,1165,[Scala] Serialization exception when a class refers to another class inside a package object,ghostdogpr,7413894,Pierre Ricadat,,CLOSED,2023-11-29T01:57:53Z,2023-11-29T05:59:19Z,"**Describe the bug**
If you try to serialize a class that refers to something inside a `package object`, it fails with an error like this:
```
Exception in thread ""main"" java.lang.RuntimeException: Create sequential serializer failed, 
class: class com.devsisters.ck.benchmarks.Reproducer$SomeClass
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:999)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:997)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:931)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:830)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1219)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1151)
	at io.fury.Fury.writeRef(Fury.java:345)
	at io.fury.Fury.write(Fury.java:322)
	at io.fury.Fury.serialize(Fury.java:256)
	at io.fury.Fury.serialize(Fury.java:209)

```

**Expected behavior**
There should be no such error.

**To Reproduce**
```scala
import io.fury.Fury

package object O {
  case class Id(value: Int)
}

object Reproducer extends App {

  val fury = Fury
    .builder()
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(true)
    .build()

  import O._

  case class SomeClass(v: Id)
  val p = SomeClass(Id(1))
  println(fury.deserialize(fury.serialize(p)))
}

```

**Environment (please complete the following information):**
Tried with the latest snapshot, Scala 2.13.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1165/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1165,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tI-0N,fury,1831070989,1165,NA,ghostdogpr,7413894,Pierre Ricadat,,NA,2023-11-29T01:58:54Z,2023-11-29T01:58:54Z,"By the way, I am interested in replacing Kryo with Fury, so I am testing serialization of a large object we use at work, which is why I find a lot of these issues. Thanks for the quick fixes!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tI-0N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1165,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tJgRi,fury,1831208034,1165,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-29T04:43:35Z,2023-11-29T04:43:35Z,"> By the way, I am interested in replacing Kryo with Fury, so I am testing serialization of a large object we use at work, which is why I find a lot of these issues. Thanks for the quick fixes!

You are welcome, thank you too for creating those issues. This helps us improve fury scala quickly.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tJgRi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1167,https://api.github.com/repos/apache/fury/issues/1167,fury,2015831316,1167,[Doc] add graalvm native image user doc,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-29T05:11:45Z,2023-11-29T06:02:42Z,"## Is your feature request related to a problem? Please describe.
add graalvm native image user doc

## Describe the solution you'd like


## Additional context
#678 #1115","{""url"": ""https://api.github.com/repos/apache/fury/issues/1167/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1169,https://api.github.com/repos/apache/fury/issues/1169,fury,2015919964,1169,[Java] Add serializer for Redisson,shangwq,3764097,,,CLOSED,2023-11-29T06:39:37Z,2024-10-15T13:09:32Z,"1. Can we provide Redisson serializer?
2. When I upgrade fury from 0.1.0 to latest version, I can't deserialize the data serialized by 0.1.0 version of fury using  fury of latest version,  it will throw NullPointerException exception.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1169/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1169,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tJ9ME,fury,1831326468,1169,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-29T07:04:12Z,2023-11-29T07:04:12Z,"@shangwq For question2, there is an open issue for it: #919, we do not provide binary compatibility for now, you need a wrapper to load multiple fury of different version for compatibility like described in #919","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tJ9ME/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1169,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6P4Mnw,fury,2413873648,1169,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-15T13:09:31Z,2024-10-15T13:09:31Z,SSupported in redisson now,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6P4Mnw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1170,https://api.github.com/repos/apache/fury/issues/1170,fury,2016428229,1170,[Java] Deserializing fastjson error,zhongchun,5388750,bermaker,zhongchunyu@gmail.com,CLOSED,2023-11-29T11:57:38Z,2023-11-30T09:50:57Z,"**Describe the bug**
Deserializing fastjson JSONObject error.

**Expected behavior**
It should deserialize to a JSONObject.

**To Reproduce**
fastjson version: 1.2.68.noneautotype
fury version: 0.3.1

```Java
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import io.fury.Fury;
import io.fury.config.CompatibleMode;
import io.fury.config.Language;

public class SerializationUtilTest {

  @Test
  public void testEncodeDecode() {
    Fury fury =
        Fury.builder()
            .withLanguage(Language.JAVA)
            .withRefTracking(true)
            .requireClassRegistration(false)
            .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .withAsyncCompilation(true)
            .build();
    String json =
        ""{\""vectors\"":{\""dim128\"":[{\""fieldNames\"":[],\""opCode\"":\""userDefine\"",\""value\"":[[0,1,2,3],[10,11,12,13],[20,21,22,23]],\""key\"":\""sample_pic_vector\"",\""version\"":\""B1\""},{\""fieldNames\"":[],\""opCode\"":\""test_code\"",\""value\"":[[1,2,3,4,5],[11,12,13,14,15]],\""key\"":\""test_key\"",\""version\"":\""B2\""}]}}"";

    JSONObject jObj = (JSONObject) JSON.parse(json);
    JSONObject vectors = jObj.getJSONObject(""vectors"");

    byte[] data = fury.serialize(vectors);
    Object ret = fury.deserialize(data);
  }

}

```

**Screenshots**
![image](https://github.com/alipay/fury/assets/5388750/030b68b4-f610-4e0a-8bf8-dfa6704ed1c0)

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1175,https://api.github.com/repos/apache/fury/issues/1175,fury,2017715031,1175,[Scala] Serialization exception (package object + AnyVal + collection),ghostdogpr,7413894,Pierre Ricadat,,CLOSED,2023-11-30T01:42:01Z,2023-11-30T15:00:39Z,"**Describe the bug**
This one is quite tricky, happens with a type extending `AnyVal` and defined in a package object, that is then used in a collection.
```
Exception in thread ""main"" java.lang.RuntimeException: Create sequential serializer failed, 
class: class com.devsisters.ck.benchmarks.Reproducer$SomeClass
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:961)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:959)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:893)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:790)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1181)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1113)
	at io.fury.Fury.writeRef(Fury.java:342)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:208)
```

**Expected behavior**
There should be no such error.

**To Reproduce**
```scala
import io.fury.Fury

package object O {
  case class Id(value: Int) extends AnyVal
}

object Reproducer extends App {

  val fury = Fury
    .builder()
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(true)
    .build()

  import O._

  case class SomeClass(v: List[Id])
  val p = SomeClass(List.empty)
  println(fury.deserialize(fury.serialize(p)))
}
```

**Environment (please complete the following information):**
Tried with the latest snapshot, Scala 2.13.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1175/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/1176,fury,2017958430,1176,[Java] Create sequential serializer failed,qinzhikui,19801304,kui,,OPEN,2023-11-30T06:18:43Z,2024-01-09T17:52:01Z,"
**Describe the bug**
```java
java.lang.RuntimeException: Create sequential serializer failed
at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:949)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:947)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:902)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:805)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1161)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1101)
...
Caused by: java.lang.IllegalStateException: Impossible because we just compiled class
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:95)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:40)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
	... 65 more
Caused by: java.lang.ClassNotFoundException: 
	at io.fury.util.ClassLoaderUtils$ByteArrayClassLoader.findClass(ClassLoaderUtils.java:209)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:589)
	at io.fury.util.ClassLoaderUtils$ByteArrayClassLoader.loadClass(ClassLoaderUtils.java:225)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:93)
	... 67 more
```
**Expected behavior**
A clear and concise description of what you expected to happen.

**To Reproduce**
Steps to reproduce the behavior.
Please try to provide a reproducible script.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
Please specify the versions of Fury, OS, and others such as JDK/Python/Gcc/Clang/Go/NodeJS if they are used.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1176/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tRFZp,fury,1833195113,1176,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-30T06:41:29Z,2023-11-30T06:41:29Z,"@qinzhikui thanks for creating this issue, could you provide the reproduction code and fury version?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tRFZp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tRIra,fury,1833208538,1176,NA,qinzhikui,19801304,kui,,NA,2023-11-30T06:56:36Z,2023-11-30T06:56:36Z,"> @qinzhikui thanks for creating this issue, could you provide the reproduction code and fury version?

Fury version 0.3.0.
I cannot reproduce it locally.
I use ThreadLocalFury in production. Most threads are fine, only a few threads will have this problem.
I find this log 'Compile [class] take xxx ms'
I found that one thread will print 'Compile [class] take xxx ms', but other threads will generate the above exception

`private ThreadSafeFury fury;

    public FuryOHCacheSerializer(Class clazz) {
        fury = new ThreadLocalFury(classLoader -> {
            Fury f = Fury
                    .builder()
                    .withLanguage(Language.JAVA)
                    .withClassLoader(classLoader)
                    .build();
            f.register(clazz);
            return f;
        });
    }`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tRIra/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tUI96,fury,1833996154,1176,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-11-30T15:25:40Z,2023-11-30T15:25:40Z,"Seems this is a multi-thread related issue, but it's not easy to figure out what happend without the reproduction code. I checked the implementation, this exception should not happen.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tUI96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tar0X,fury,1835711767,1176,NA,qinzhikui,19801304,kui,,NA,2023-12-01T08:54:52Z,2023-12-01T08:54:52Z,close it first and see if anyone else is encountering this problem,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tar0X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdgwF,fury,1836452869,1176,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T16:51:43Z,2023-12-01T16:51:43Z,"I'll try to reproduce it, and give you feedbacks if I make it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdgwF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1176,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wREGd,fury,1883521437,1176,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-09T17:52:00Z,2024-01-09T17:52:00Z,Looks like we're seeing the same issue. https://github.com/apache/incubator-fury/issues/1325,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wREGd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1177,https://api.github.com/repos/apache/fury/issues/1177,fury,2018225025,1177,[Java] add graalvm benchmark,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-30T09:26:49Z,2023-11-30T09:50:43Z,"## Is your feature request related to a problem? Please describe.
add graalvm benchmark

## Describe the solution you'd like

## Additional context
#678 #1115 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1177/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1179,https://api.github.com/repos/apache/fury/issues/1179,fury,2018782607,1179,[Java] Add graalvm benchmark test results,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-30T14:27:43Z,2023-11-30T14:31:38Z,"## Is your feature request related to a problem? Please describe.
Add graalvm benchmark test results
## Describe the solution you'd like
A clear and concise description of what you want to happen.

## Additional context
#1177 #678 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1179/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1183,https://api.github.com/repos/apache/fury/issues/1183,fury,2019062614,1183,[Doc] bump release version to 0.4.0,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-30T16:42:38Z,2023-12-01T05:20:17Z,"## Is your feature request related to a problem? Please describe.
Since fury [0.4.0](https://github.com/alipay/fury/releases/tag/v0.4.0) is released ,we should update version in main branch

## Describe the solution you'd like
update version in main branch

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1183/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1184,https://api.github.com/repos/apache/fury/issues/1184,fury,2019069866,1184,[Doc] Refine issue template by a yaml form,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-11-30T16:46:08Z,2023-12-01T06:18:25Z,"## Is your feature request related to a problem? Please describe.
 expect behaviour  section seems be unnecessary if users describe the bug detailly, and most issues doesn't provide any valid information in this section.

## Describe the solution you'd like
Remove expect behaviour from issue template

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1184/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1186,https://api.github.com/repos/apache/fury/issues/1186,fury,2019847628,1186,[Scala] Expose register on ThreadSafeFury,ghostdogpr,7413894,Pierre Ricadat,,CLOSED,2023-12-01T01:16:23Z,2024-12-05T04:31:37Z,"## Is your feature request related to a problem? Please describe.
The Scala docs say:
> If you use shared fury instance across multiple threads, you should create ThreadSafeFury instead by FuryBuilder#buildThreadSafeFury() instead.

But also:
> Otherwise if you serialize some scala types such as collection/Enumeration, you will need to register some scala internal types:
>
> ```
> fury.register(Class.forName(""scala.collection.generic.DefaultSerializationProxy""))
> fury.register(Class.forName(""scala.Enumeration.Val""))
> ```

However `register` is only available on `Fury`, not on `ThreadSafeFury`.

## Describe the solution you'd like
How to use `register` with `ThreadSafeFury`? It looks like it should be exposed?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1186/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1186,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb14I,fury,1836015112,1186,NA,mof-dev-3,129163631,,,NA,2023-12-01T12:08:52Z,2023-12-01T12:08:52Z,"![企业微信截图_17014323082554](https://github.com/alipay/fury/assets/129163631/7098430f-6fa7-41e9-afc8-bf9a58445c62)
One work around is to use this api    <R> R execute(Function<Fury, R> action);
I think it is accepctable in this case, and fury is exposed as expected
`  @Test
  public void test() {
    ThreadSafeFury fury = Fury.builder().requireClassRegistration(false).buildThreadSafeFury();
    fury.execute(f -> {
      f.register(String.class);
      return null;
    });
  }`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb14I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1186,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb378,fury,1836023548,1186,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T12:15:16Z,2023-12-01T12:15:16Z,"> ![企业微信截图_17014323082554](https://private-user-images.githubusercontent.com/129163631/287258936-7098430f-6fa7-41e9-afc8-bf9a58445c62.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE3MDE0MzI5ODcsIm5iZiI6MTcwMTQzMjY4NywicGF0aCI6Ii8xMjkxNjM2MzEvMjg3MjU4OTM2LTcwOTg0MzBmLTZmYTctNDFlOS1hZmM4LWJmOWE1ODQ0NWM2Mi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBSVdOSllBWDRDU1ZFSDUzQSUyRjIwMjMxMjAxJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDIzMTIwMVQxMjExMjdaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yODVhMWFiOGNjZTk4Y2I5YzlmMDkyMWI4YmQ2ZTliYzE4MDIzYjE4ZDU0MGIyZmJjY2VlY2RkZDVhZjE5YWIyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.OEn4xw3MSot5FR7MuIXgMfNb2K6sVQrghADq9hIcEFM)
> One work around is to use this api R execute(Function<Fury, R> action);
> I think it is accepctable in this case, and fury is exposed as expected
> ` @Test public void test() { ThreadSafeFury fury = Fury.builder().requireClassRegistration(false).buildThreadSafeFury(); fury.execute(f -> { f.register(String.class); return null; }); }`

This is not  what this API for. Registering class here will have thread safety issue. The registration won't propagate to other threads. Maybe We should document this API to avoid such usage. 

You can create a ThreadLocalFury with fury factory instead. Then registering the classes you need.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb378/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1186,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb4tB,fury,1836026689,1186,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T12:17:37Z,2023-12-01T12:17:37Z,"If you want to register on threadsafefury directly, We need to add some callback to propagate to other threads and classloaders, like we did in LoaderBinding.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb4tB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1187,https://api.github.com/repos/apache/fury/issues/1187,fury,2019856471,1187,[Scala] Allow customizing reference tracking,ghostdogpr,7413894,Pierre Ricadat,,OPEN,2023-12-01T01:25:31Z,2023-12-01T16:50:12Z,"## Is your feature request related to a problem? Please describe.
Disabling reference tracking gives much better performance, but it is a bit dangerous with some types.

What we do currently using Kryo is to make a custom `ReferenceResolver` where we implement our own `public boolean useReferences (Class type)` method. That way, we dynamically disable reference tracking on all our ""known"" safe types, but we still use it for other ""unknown"" types that may be circular (for example, `Throwable` can be circular because of `cause`).

## Describe the solution you'd like
A way to customize reference tracking.

## Additional context
For reference our current benchmarks:
```
[info] Benchmark                         Mode  Cnt   Score    Error  Units
[info] KryoBenchmarks.baseKryo          thrpt    5   2.567 ±  0.181  ops/s
[info] KryoBenchmarks.customKryo        thrpt    5  11.826 ±  0.348  ops/s
[info] KryoBenchmarks.noTrackingKryo    thrpt    5  13.822 ±  0.376  ops/s
[info] KryoBenchmarks.baseFury          thrpt    5   5.254 ±  0.414  ops/s
[info] KryoBenchmarks.noTrackingFury    thrpt    5  21.651 ± 10.453  ops/s
```
Fury without tracking is almost 2x faster than Kryo without tracking. So we have good hope that with customized tracking we would achieve a better performance than customized Kryo.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1187/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1187,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdbLR,fury,1836430033,1187,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T16:35:29Z,2023-12-01T16:35:29Z,"Good point! I want to add such features before but haven't the time for it. 

We have a writeRef check method in `io.fury.resolver.ClassResolver`:
```java
  public boolean needToWriteRef(Class<?> cls) {
    if (fury.trackingRef()) {
      ClassInfo classInfo = getClassInfo(cls, false);
      if (classInfo == null || classInfo.serializer == null) {
        // TODO group related logic together for extendability and consistency.
        return !cls.isEnum();
      } else {
        return classInfo.serializer.needToWriteRef();
      }
    }
    return false;
  }
```
It's used mainly in `Collection/Map` element serialization or in the process of FURY codegen. Here is the design consideration we make before:
Do not invoke this method everytime when a new object is being serializing, since it introduces a hashmap cost, whose cost will be similar to reference tracking  when the object graph is small. It only give better performance for big object graph. In such graph, map of object classes are much smaller than map of reference objects. So the query on whether to tracking ref is much smaller than tracking a ref.

So we made a tradeoff, if a object is registered for no-ref tracking, all of its subclass are no-ref tracking too mostly. In this way, we can ignore reference tracking  check in the generated code for polymorphic types to minimize such check cost.

Hope this information can give you some  inspiration how ref tracking works in fury, and let you write your refresolver.
Fury can provide a method to let you set the `RefResolver`factory when configuring `FuryBuilder`. We make the created refResolver as a final field of `Fury` to reduce field access cost. You should pass a factory to let Fury create your refresolver. 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdbLR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1187,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdfoj,fury,1836448291,1187,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T16:48:19Z,2023-12-01T16:48:19Z,"Another method is provide a method in Fury such as `trackingRef(Class, bool)`, you can invoke it to control which classes will be serialized by ref.

Or Fury provides an annotation to let you mark your classes or fields with `trackingRef`, this is mentioned in #1148 too.

Those methods all make sense to me, and I believe Fury will support them all in the long run. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tdfoj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1188,https://api.github.com/repos/apache/fury/issues/1188,fury,2019880260,1188,[Java] CompatibleMode.SCHEMA_CONSISTENT not work as expected,mof-dev-3,129163631,,,CLOSED,2023-12-01T01:46:22Z,2023-12-02T12:37:03Z,"## Is your feature request related to a problem? Please describe.
We use Fury to codec cache objects in Redis and find that CompatibleMode.SCHEMA_CONSISTENT can save us a lot of storage. However, the following test case shows that the SCHEMA_CONSISTENT mode works more like 'COMPACT' mode instead of 'STRICT' mode when the schema is changed.
![企业微信截图_17013944589784](https://github.com/alipay/fury/assets/129163631/840d42d3-b6c2-4e30-b42f-eb2b6639f0ac)

![企业微信截图_17013946051143](https://github.com/alipay/fury/assets/129163631/6d115e81-b172-4043-b620-7bc88baa0bfe)

## AfterThought
For security and consistency's sake, in some cases, 'STRICT' mode is needed (maybe write a schema hash in the serialized bytes) to check whether the schema has changed and report an error when deserializing.

## How to Reproduce
`
    private static final File cachedPerson = new File(""cachePerson"");

    private static Fury initConsistFury() {
        return Fury.builder()
                .requireClassRegistration(false)
                .withLanguage(Language.JAVA)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .build();
    }
    
    @Test
    public void testBeforeSchemaChange() {
        Fury f = initConsistFury();
        TestPerson p = new TestPerson();
        p.setFirstName(""Tom"");
        p.setAge(22);
        byte[] bytes = f.serialize(p);
        FileUtil.writeBytes(bytes, cachedPerson);
    }

    @Getter
    @Setter
    @NoArgsConstructor
    @ToString
    public static class TestPerson {
//        private String firstName;
                private String secondName;
//        private Integer age;
                private Integer newInt;
    }

    @Test
    public void testAfterSchemaChange() {
        Fury f = initConsistFury();
        byte[] bytes = FileUtil.readBytes(cachedPerson);
        Object deserialize = f.deserialize(bytes);
        System.out.println(deserialize);
    }

`

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1188/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1188,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb-df,fury,1836050271,1188,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-01T12:36:38Z,2023-12-01T12:36:38Z,"You can configure fury to write class schema hash by invoking FuryBuilder#withClassVersionCheck.

Would you like to add this part to fury doc?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tb-df/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1188,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgFwp,fury,1837128745,1188,NA,mof-dev-3,129163631,,,NA,2023-12-02T11:45:20Z,2023-12-02T11:45:20Z,"It may have forward/backward compatibility issue, but default value of checkClassVersion to be true if CompatibleMode.SCHEMA_CONSISTENT is set is more intuitive and heuristic.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgFwp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1188,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgIMh,fury,1837138721,1188,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-02T12:37:02Z,2023-12-02T12:37:02Z,"> It may have forward/backward compatibility issue, but default value of checkClassVersion to be true if CompatibleMode.SCHEMA_CONSISTENT is set is more intuitive and heuristic.

This will introduce 4bytes overhead for every object, so we disabled it by default","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgIMh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1190,https://api.github.com/repos/apache/fury/issues/1190,fury,2020159645,1190,[Rust] Support row format,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-12-01T06:01:15Z,2023-12-03T02:25:23Z,"## Is your feature request related to a problem? Please describe.
Fury support row format, rust should implement the row format protocol

## Describe the solution you'd like
1.  Define a new trait to describe the row format method
2. Auto implement the trait in fury_derive
3. Use arrow-rs to describe the schema","{""url"": ""https://api.github.com/repos/apache/fury/issues/1190/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1191,https://api.github.com/repos/apache/fury/issues/1191,fury,2020184435,1191,Test new Bug report template,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-01T06:19:38Z,2023-12-01T06:19:49Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/alipay/issues) and found no similar issues.


### Version

Test new Bug report template

### Component(s)

Other

### Minimal reproduce step

Test new Bug report template

### What did you expect to see?

Test new Bug report template

### What did you see instead?

Test new Bug report template

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1191/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1194,https://api.github.com/repos/apache/fury/issues/1194,fury,2021770296,1194,[Dart] Support Dart language,peacess,12856556,Peace,,OPEN,2023-12-02T00:35:25Z,2024-05-06T02:26:24Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1194/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1194,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tfyx7,fury,1837051003,1194,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-02T05:44:24Z,2023-12-02T05:44:24Z,"Hi @peacess, thanks for filing this issue. Could you share more details? Which serialization framework do you use now for what scenarios? What's the bottle for it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tfyx7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1194,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc583YMf,fury,2094891807,1194,NA,anidotnet,696662,Anindya Chatterjee,,NA,2024-05-05T17:48:45Z,2024-05-05T17:48:45Z,Apart from json dart does not have very good options for serialization.. It would be nice to have fury support for dart as multi language serialization framework. Main constraint is - no support for reflection for flutter app. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc583YMf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1194,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc584Jmz,fury,2095094195,1194,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-06T02:26:22Z,2024-05-06T02:26:22Z,"I see, thanks. We've formulized fury cross-language serialization spec in https://fury.apache.org/docs/guide/xlang_object_graph_guide . It should be easier to implement a new language now.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc584Jmz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1197,https://api.github.com/repos/apache/fury/issues/1197,fury,2022122934,1197,ProtoBuffer compatibility support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-12-02T16:55:59Z,2023-12-02T16:55:59Z,"## Is your feature request related to a problem? Please describe.
[ProtoBuf](https://github.com/protocolbuffers/protobuf) is used commonly. For ProtoBuf, users define the message in [IDL](https://protobuf.dev/programming-guides/proto3/)：
```protobuf
syntax = ""proto3"";

message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
}
```
then  use the `protoc` to compile the schema IDL into generated data holder and serializer class.

If users want to  migrate from ProtoBuf to Fury for better performance or future reference/polymorphism
 support, they must define struct in every language manually. This may take some cost if there are many struct to write.

## Describe the solution you'd like
Fury can implement a static schema compiler `furyc`,  which support parsing  [ProtoBuf IDL](https://protobuf.dev/programming-guides/proto3/), then generate fury serializer code plain data holder struct.

The `furyc` can be implemented by python, and use `antllr4-python` to parse `ProtoBuf IDL` grammer.

## Additional context
#1017 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1197/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/1198,fury,2022139739,1198,[Java] Add serialization support for  java.util.ArrayList$SubList,x-wing,6486626,XUN WANG,,CLOSED,2023-12-02T17:40:43Z,2024-09-27T03:55:14Z,"When performing serialization with any Java object contains a List field produced by Java subList method of List, an application will get this error ""java.lang.UnsupportedOperationException: Class class java.util.ArrayList$SubList doesn't support serialization.""

It'd be nice to provide support for this particular serialization without resulting to create customer serialization for this standard JDK feature.

This issue can be recrreated through the following test class.
```java
import io.fury.Fury;
import io.fury.ThreadSafeFury;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class FuryTest
{
  private static final ThreadSafeFury fury = Fury.builder()
    .requireClassRegistration(false)
    .buildThreadSafeFury();

  @Test
  public void serializeAndDeserializeSubList()
  {
    List<Integer> numbers = new ArrayList<>(List.of(1, 2, 3, 4, 5));

    List<List<Integer>> partitions =
      List.of(numbers.subList(0,1), numbers.subList(1,2), numbers.subList(2, numbers.size()));

    byte[] serialized = fury.serialize(partitions);
    assertEquals(partitions, fury.deserialize(serialized));
  }
}
```

Here is the part of the stack trace:
```java
java.lang.UnsupportedOperationException: Class class java.util.ArrayList$SubList doesn't support serialization.
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:838)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:791)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1182)
	at io.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:1081)
	at io.fury.serializer.collection.AbstractCollectionSerializer.writeTypeNullabilityHeader(AbstractCollectionSerializer.java:284)
	at io.fury.serializer.collection.AbstractCollectionSerializer.writeElementsHeader(AbstractCollectionSerializer.java:144)
	at io.fury.serializer.collection.AbstractCollectionSerializer.writeElements(AbstractCollectionSerializer.java:301)
	at io.fury.serializer.collection.AbstractCollectionSerializer.write(AbstractCollectionSerializer.java:296)
	at io.fury.Fury.writeData(Fury.java:551)
	at io.fury.Fury.writeRef(Fury.java:344)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:221)
	at io.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:67)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1198/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thmAY,fury,1837522968,1198,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-03T15:52:03Z,2023-12-03T15:52:03Z,"Hi @x-wing , thanks for filing this issue. It's a known issue. Add support for `java.util.ArrayList$SubList` is easy. Registering a customized serializer will sovle this issue. 

But it comes with new porblem. Take following example:

```java
List<String> list = new ArrayList<>();
list.add(""str1"");
list.add(""str2"");
list.add(""str3"");
list.add(""str4"");
sublist = list.subList(0, 2);

List<List<String>> newList = (List<List<String>>)(fury.deserialize(fury.serialize(Array.asList {list, sublist})));
List<String> newList0 = newList.get(0);
List<String> newList1 = newList.get(1);
```

In such cases, we'd better to serialize sublist as tow offsets and serialize parent list at the same time. Otherwise the view will be inconsistent. If we invoke sublist.set(0, ""x""), then list.get(0) should be x too.

On the other hand, If we have only sublist to serialize, and we serialize by above method, we will serialize many unnecessray data outside of the range.
The point is that we can't decide whether the range is the only data to be serialized. So we didn't add serialization support for such class. And JDK doens't provide for such class too, `java.util.ArrayList$SubList` didn't implement `Serializable` interface.

If we must support such class, I would suggest serialize `Sublist` by serializing `root`, `offset` and `size`:
```java
private final ArrayList<E> root;
private final int offset;
private int size;

write(MemoryBuffer buffer, List list o) {
 buffer.writePositiveVarint(offset);
 buffer.writePositiveVarint(offset);
 fury.writeRef(buffer, o);
}
```
In this way, we may serialize extra data in some cases, but can aovid list view inconsistency between processes. And reference tracking must be enabled, otherwise the view may be inconsisitent. 

If reference tracking is disabled, you won't get consisitent view. In such cases, you just write the range of data like it just an normal ArrayList. To ensure the type is consisitent, you can overwrite `onCollectionRead` to return a `SubList`:
```java
  @Override
  public T onCollectionRead(Collection collection) {
    return (T) collection;
  }
```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thmAY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thtUw,fury,1837552944,1198,NA,x-wing,6486626,XUN WANG,,NA,2023-12-03T17:58:44Z,2023-12-03T17:58:44Z,"Thank you for the prompt response! Wish this could be documented somewhere so people can be aware of this intrinsic aspect of adding serialization of java.util.ArrayList$SubList. At this point, it makes really good sense why it is not handled, and customized serialization may be the right thing to do based on a particular use case. If you believe there is nothing else to add, feel free to close this request. Thanks again!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5thtUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tiVov,fury,1837718063,1198,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-04T01:54:53Z,2023-12-04T01:54:53Z,Maybe we can add some serializes in io.fury.serializer.SubListSerializers and document it in fury Java guide. Then let users to register such serializes if they need. Would you like to submit a pr?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tiVov/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tmuk6,fury,1838868794,1198,NA,x-wing,6486626,XUN WANG,,NA,2023-12-04T15:20:34Z,2023-12-04T15:20:34Z,"Sure, but it will take me some time to get it done as I need to learn a little more about the coding conventions here.
If a delay is OK, I will do the PR. BTW I also noticed that com.google.common.collect.HashBasedTable is not supported. Wonder if it should be created in another feature request. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tmuk6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tt7UK,fury,1840755978,1198,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-05T13:04:48Z,2023-12-05T13:04:48Z,"> Sure, but it will take me some time to get it done as I need to learn a little more about the coding conventions here. If a delay is OK, I will do the PR. BTW I also noticed that com.google.common.collect.HashBasedTable is not supported. Wonder if it should be created in another feature request.

@x-wing Thank you for offering to contribute with a Pull Request! Learning the coding conventions is important and it takes time, so a delay is perfectly acceptable. Please take the time you need, and let us know if you have any questions or need any guidance.

Regarding the `com.google.common.collect.HashBasedTable` support, it would be great if you could create a separate feature request for it. I can reproduce the error for `HashBasedTable`, I will fix it soon 


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tt7UK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ty0Wt,fury,1842038189,1198,NA,x-wing,6486626,XUN WANG,,NA,2023-12-06T03:47:49Z,2023-12-06T03:47:49Z,"Don't know if this is the right place to ask this question. I just checked out the project and ran ` mvn -T10 clean test`.
There are some unit test failures. Any ideas?

Here are the errors
[ERROR] Failures: 
[ERROR]   CrossLanguageTest.testBuffer:135 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testCrossLanguageReference:433 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testCrossLanguageSerializer:308 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testMurmurHash3:167 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testOutOfBandBuffer:695 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testRegisterSerializer:641 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testSerializeComplexStruct:501->structRoundBack:515 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testSerializeOpaqueObject:562 expected [true] but found [false]
[ERROR]   CrossLanguageTest.testSerializeSimpleStruct:472->structRoundBack:515 expected [true] but found [false]
[INFO]
[ERROR] Tests run: 797, Failures: 9, Errors: 0, Skipped: 3
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ty0Wt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ty1hI,fury,1842042952,1198,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-06T03:55:51Z,2023-12-06T03:55:51Z,"> CrossLanguageTest.testSerializeSimpleStruct:472->structRoundBack:515 expected [true] but found [false] [INFO] [ERROR] Tests run: 797, Failures: 9, Errors: 0, Skipped: 3

Such cases needs to install `pyfury` first, you can ignore it if you don't develop cross-language features. `pyfury` can be installed by following  https://github.com/alipay/fury/blob/main/docs/guide/DEVELOPMENT.md#building-fury-python . You may need to setup gcc/clang and pyenv for install pyfury too, which may take some time.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ty1hI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uH7Gd,fury,1847570845,1198,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-08T17:34:19Z,2023-12-08T17:34:19Z,"Hi @x-wing `HashBasedTable` serialization failure has been fixed in release https://github.com/alipay/fury/releases/tag/v0.4.1 , could you try it out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uH7Gd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1198,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uJjrV,fury,1847999189,1198,NA,x-wing,6486626,XUN WANG,,NA,2023-12-09T00:21:27Z,2023-12-09T00:21:27Z,"> Hi @x-wing `HashBasedTable` serialization failure has been fixed in release https://github.com/alipay/fury/releases/tag/v0.4.1 , could you try it out?

Yes, it is fixed!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uJjrV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1199,https://api.github.com/repos/apache/fury/issues/1199,fury,2022204371,1199,Version 0.4.0 under maven central?,miladamery,15817237,Milad,miladamery@yahoo.com,CLOSED,2023-12-02T21:08:28Z,2023-12-03T02:13:39Z,"Hi.
Thanks for this project. when version 0.4.0 will be available under maven central?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1199/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1199,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgsFg,fury,1837285728,1199,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-03T00:04:57Z,2023-12-03T00:04:57Z,"Hi @miladamery , thanks for filling this issue, I just uploaded it, should be available now. Could you try it again ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tgsFg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1201,https://api.github.com/repos/apache/fury/issues/1201,fury,2022441746,1201,[Rust] support more types for row format,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-12-03T09:37:26Z,2023-12-03T15:26:30Z,"## Is your feature request related to a problem? Please describe.
Rust should support more builtin types for row format.

## Describe the solution you'd like
Support for the following data types should be added in Rust: int8, int16, int32, int64, binary, string, list, date32, and date64.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1201/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1203,https://api.github.com/repos/apache/fury/issues/1203,fury,2022457742,1203,[C++] Add sanitizer configuration in bazel build and CI,PragmaTwice,20042607,Twice,,OPEN,2023-12-03T10:27:43Z,2023-12-03T10:27:43Z,We need to run unit test with address sanitizer and/or ub sanitizer enabled to discover memory bugs.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1205,https://api.github.com/repos/apache/fury/issues/1205,fury,2023711647,1205,[Rust] Support for BTreeMap in Rust row format should be added,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-12-04T12:09:29Z,2023-12-04T15:01:11Z,"## Is your feature request related to a problem? Please describe.
Map is not currently supported and needs to be added 

## Describe the solution you'd like
Support Map and add a MapGetter like ArrayGetter.
Use like  this:
```rust
#[test]
fn rowmap() {
    #[derive(FuryRow)]
    struct Foo {
        f5: BTreeMap<String, String>,
    }

    let mut f5: BTreeMap<String, String> = BTreeMap::new();
    f5.insert(String::from(""k1""), String::from(""v1""));
    f5.insert(String::from(""k2""), String::from(""v2""));

    let row = to_row(&Foo {
        f5,
    },);

    let obj = from_row::<Foo>(&row);
    let binding = obj.f5();

    assert_eq!(binding.keys().size(), 2);
    assert_eq!(binding.keys().get(0), ""k1"");

    assert_eq!(binding.values().size(), 2);
    assert_eq!(binding.values().get(0), ""v1"");

    let f5 = binding.to_btree_map().expect(""should be map"");
    assert_eq!(f5.get(""k1"").expect(""should exists""), &""v1"");
    assert_eq!(f5.get(""k2"").expect(""should exists""), &""v2"");
}
```

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1205/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1207,https://api.github.com/repos/apache/fury/issues/1207,fury,2025554905,1207,[JavaScript] Use Type.object to define protocol will cause error,bytemain,13938334,Artin,artin@cat.ms,CLOSED,2023-12-05T08:13:50Z,2023-12-05T12:02:37Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/alipay/issues) and found no similar issues.


### Version

0.0.18

### Component(s)

JavaScript

### Minimal reproduce step

For example, I define a protolcol like this:

```ts
import Fury, { Type } from '@furyjs/fury';

export { PlatformBuffer } from '@furyjs/fury/dist/lib/platformBuffer';

/**
 * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above.
 * Experimental feature, installation success cannot be guaranteed at this moment
 **/
// import hps from '@furyjs/hps';

const hps = undefined;

// Now we describe data structures using JSON, but in the future, we will use more ways.
const description = Type.object('ws-channel-protocol', {
  kind: Type.string(),
  clientId: Type.string(),
  id: Type.uint64(),
  path: Type.string(),
  content: Type.string(),
  code: Type.uint16(),
  reason: Type.string(),
});

const fury = new Fury({ hps });
const { serialize, deserialize } = fury.registerSerializer(description);

serialize({
  kind: '1234',
//  ^ error occurs here: Argument of type '{ kind: string; }' is not assignable to parameter of type '{ kind: string | null; clientId: string | null; id: number | null; path: string | null; content: string | null; code: number | null; reason: string | null; }'.
});

export { serialize, deserialize };
```
and this will also cause error:

![image](https://github.com/alipay/fury/assets/13938334/4f97e56c-fd79-429f-911a-1a64ae7aa698)


### What did you expect to see?

I think the infered object's typings should have a question mark on its all properties.

for example:

```ts
const description = Type.object('ws-channel-protocol', {
  kind: Type.string(),
  clientId: Type.string(),
  id: Type.uint64(),
  path: Type.string(),
  content: Type.string(),
  code: Type.uint16(),
  reason: Type.string(),
});

// ->

{ kind?: string | null; clientId?: string | null; id?: number | null; path?: string | null; content?: string | null; code?: number | null; reason?: string | null; }
```


### What did you see instead?

{ kind: string | null; clientId: string | null; id: number | null; path: string | null; content: string | null; code: number | null; reason: string | null; }

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [x] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1207/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1207,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tsFb9,fury,1840273149,1207,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2023-12-05T08:40:35Z,2023-12-05T08:40:35Z,"Thanks for your submission. In the JavaScript world, it is common to encounter undefined properties. Therefore, we should handle them appropriately.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5tsFb9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1209,https://api.github.com/repos/apache/fury/issues/1209,fury,2026521785,1209,[Java] Fury codegen error for package access level class,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-05T15:49:56Z,2023-12-05T16:18:31Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/alipay/issues) and found no similar issues.


### Version

445bfa7e9214a4626f8f8f829a8464fb7ce4f622

### Component(s)

Java

### Minimal reproduce step

```java

 Fury fury = Fury.builder().withRefTracking(true).requireClassRegistration(false).build();
    HashBasedTable<Object, Object, Object> table = HashBasedTable.create(2, 4);
    table.put(""r"", ""c"", 100);
```

### What did you expect to see?

No error

### What did you see instead?

```java
java.lang.RuntimeException: Create sequential serializer failed, 
class: class com.google.common.collect.HashBasedTable

	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:962)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:960)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:894)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:791)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1182)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1114)
	at io.fury.Fury.writeRef(Fury.java:342)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:208)
	at io.fury.FuryTestBase.serDeCheckSerializer(FuryTestBase.java:177)
	at io.fury.FuryTest.testPkgAccessLevelParentClass(FuryTest.java:620)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
Caused by: io.fury.codegen.CodegenException: Compile error: 
com.google.common.collect.StandardTableFuryAccessor_622488023_635611994:
/* 0001 */ package com.google.common.collect;
/* 0002 */ 
/* 0003 */ public final class StandardTableFuryAccessor_622488023_635611994 {
/* 0004 */ 
/* 0005 */   public static java.util.Map backingMap(Object obj) {
/* 0006 */       return obj.backingMap;
/* 0007 */   }
/* 0008 */ 
/* 0009 */   public static void backingMap(Object obj, java.util.Map fieldValue) {
/* 0010 */       obj.backingMap = fieldValue;
/* 0011 */   }
/* 0012 */ 
/* 0013 */   public static com.google.common.base.Supplier factory(Object obj) {
/* 0014 */       return obj.factory;
/* 0015 */   }
/* 0016 */ 
/* 0017 */   public static void factory(Object obj, com.google.common.base.Supplier fieldValue) {
/* 0018 */       obj.factory = fieldValue;
/* 0019 */   }
/* 0020 */ 
/* 0021 */ }
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:126)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at io.fury.builder.AccessorHelper.defineAccessorClass(AccessorHelper.java:163)
	at io.fury.builder.AccessorHelper.defineAccessor(AccessorHelper.java:212)
	at io.fury.builder.CodecBuilder.getFieldValue(CodecBuilder.java:207)
	at io.fury.builder.ObjectCodecBuilder.lambda$serializeGroup$9f8a61a4$1(ObjectCodecBuilder.java:185)
	at io.fury.builder.ObjectCodecBuilder.serializeGroup(ObjectCodecBuilder.java:194)
	at io.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:158)
	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:204)
	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:72)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:42)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
	... 40 more
Caused by: org.codehaus.commons.compiler.CompileException: File 'com/google/common/collect/StandardTableFuryAccessor_622488023_635611994.java', Line 6, Column 18: ""backingMap"" is neither a method, a field, nor a member class of ""java.lang.Object""
	at org.codehaus.janino.UnitCompiler.compileError(UnitCompiler.java:13080)
	at org.codehaus.janino.UnitCompiler.reclassifyName(UnitCompiler.java:8896)
	at org.codehaus.janino.UnitCompiler.reclassify(UnitCompiler.java:8698)
	at org.codehaus.janino.UnitCompiler.getConstantValue2(UnitCompiler.java:5992)
	at org.codehaus.janino.UnitCompiler.access$11000(UnitCompiler.java:237)
	at org.codehaus.janino.UnitCompiler$19$1.visitAmbiguousName(UnitCompiler.java:5944)
	at org.codehaus.janino.Java$AmbiguousName.accept(Java.java:4603)
	at org.codehaus.janino.UnitCompiler$19.visitLvalue(UnitCompiler.java:5943)
	at org.codehaus.janino.Java$Lvalue.accept(Java.java:4528)
	at org.codehaus.janino.UnitCompiler.getConstantValue(UnitCompiler.java:5939)
	at org.codehaus.janino.UnitCompiler.compileGetValue(UnitCompiler.java:5876)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2849)
	at org.codehaus.janino.UnitCompiler.access$2800(UnitCompiler.java:237)
	at org.codehaus.janino.UnitCompiler$6.visitReturnStatement(UnitCompiler.java:1591)
	at org.codehaus.janino.UnitCompiler$6.visitReturnStatement(UnitCompiler.java:1576)
	at org.codehaus.janino.Java$ReturnStatement.accept(Java.java:3888)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1576)
	at org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1662)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:3665)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3330)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1448)
	at org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1421)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:830)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:443)
	at org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:237)
	at org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:423)
	at org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:419)
	at org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1688)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:419)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:393)
	at org.codehaus.janino.UnitCompiler.access$000(UnitCompiler.java:237)
	at org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:364)
	at org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:362)
	at org.codehaus.janino.Java$CompilationUnit.accept(Java.java:371)
	at org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:362)
	at org.codehaus.janino.Compiler.compile2(Compiler.java:271)
	at org.codehaus.janino.Compiler.compile(Compiler.java:213)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:106)
	... 55 more

```

### Anything Else?
See HashBasedTable error in #1198 

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1209/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1213,https://api.github.com/repos/apache/fury/issues/1213,fury,2030438731,1213,[Java] Integrate with spring cloud alibaba,wwhbai,30878061,wwhbai,,OPEN,2023-12-07T10:34:42Z,2023-12-07T13:13:10Z,"我想问一下啊，这个的集成方式 是只需要pom文件里面添加一下，任何代码都不需要修改也不需要配置就可以生效的嘛？
网上完全查不到相关资料啊。目前使用的项目是jdk8的 spring cloud 内部调用使用feign，压测链路过长，容易失败。觉得可能序列化的问题，现在是想用这个fury来解决这个问题。
我想知道的是，只需要引入pom即可生效吗？","{""url"": ""https://api.github.com/repos/apache/fury/issues/1213/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1213,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5t_UY4,fury,1845315128,1213,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-07T13:07:49Z,2023-12-07T13:07:49Z," `spring cloud feign` won't use Fury for serialization if you just import `fury` dependency in pom.
 Seems that `spring cloud feign` uses json for serialization, you may need to update the `feign` source code to make it use fury for serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5t_UY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1213,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5t_WMt,fury,1845322541,1213,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-07T13:13:08Z,2023-12-07T13:13:08Z,"About the performance issue, could you use https://github.com/async-profiler/async-profiler to sample a flame graph?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5t_WMt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1214,https://api.github.com/repos/apache/fury/issues/1214,fury,2030628046,1214,[Doc] Detailed comparation doc with other serialization frameworks,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-12-07T12:10:20Z,2023-12-07T12:13:35Z,"## Is your feature request related to a problem? Please describe.
There are so many serialization frameworks, users offen have concerns which cases should use Fury for serialization and which cases shouldn't.

We should provided a clear documentation about how Fury differs from and possibly complements these established projects. 

This documentation should have a comprehensive comparison that will highlight features, design choices, and performance aspects. So the community can understand where Fury fits within the ecosystem, its potential benefits to developers and its limitation.

## Describe the solution you'd like


## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1214/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1217,https://api.github.com/repos/apache/fury/issues/1217,fury,2032615340,1217,Python example in README fails,michaelmior,82501,Michael Mior,michael.mior@gmail.com,CLOSED,2023-12-08T12:59:28Z,2023-12-08T17:29:03Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/alipay/issues) and found no similar issues.


### Version

Fury: 0.4.0
OS: Ubuntu 20.04
Python: 3.12.0

### Component(s)

Python

### Minimal reproduce step

I ran the example below copied directly from the README.

```
from typing import Dict
import pyfury

class SomeClass:
    f1: ""SomeClass""
    f2: Dict[str, str]
    f3: Dict[str, str]

fury = pyfury.Fury(ref_tracking=True)
fury.register_class(SomeClass, ""example.SomeClass"")
obj = SomeClass()
obj.f2 = {""k1"": ""v1"", ""k2"": ""v2""}
obj.f1, obj.f3 = obj, obj.f2
data = fury.serialize(obj)
# bytes can be data serialized by other languages.
print(fury.deserialize(data))
```

### What did you expect to see?

I expected the object to be serialized, deserialized, and printed.

### What did you see instead?

I got the error message below

```
Traceback (most recent call last):
  File ""/tmp/x.py"", line 10, in <module>
    fury.register_class(SomeClass, ""example.SomeClass"")
TypeError: Argument 'class_id' has incorrect type (expected int, got str)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1217/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1217,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uGcMi,fury,1847182114,1217,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-08T13:41:02Z,2023-12-08T13:41:02Z,"Hi @michaelmior , thanks for creating this issue. There is an error in the readme example. I changed `register_class ` to `register_class_tag`, and it can run successfully. 

The current API is a little confusing, the usage is wrong even I write this API :
```python
    def register_class(self, cls, class_id: int = None):
        self.class_resolver.register_class(cls, class_id=class_id)

    def register_class_tag(self, cls: type, type_tag: str = None):
        self.class_resolver.register_class_tag(cls, type_tag)
```

Maybe we should merge those methods into one method:
```python
    def register_class(self, cls, *, class_id: int = None, type_tag: str = None):
        if type_tag is not None:
           assert class_id is None
           self.class_resolver.register_class_tag(cls, type_tag=type_tag)
        else:
           self.class_resolver.register_class(cls, class_id=type_tag)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uGcMi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1217,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uGn9C,fury,1847230274,1217,NA,michaelmior,82501,Michael Mior,michael.mior@gmail.com,NA,2023-12-08T14:11:53Z,2023-12-08T14:11:53Z,Thanks! That did resolve the issue for me. It seems like all that needs to be done for now then is update the example in the README.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uGn9C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1217,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uG5Sr,fury,1847301291,1217,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-08T14:43:22Z,2023-12-08T14:43:22Z,"I will fix this in #1219, and release a new version later. We have some fix for java waiting being released too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uG5Sr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1219,https://api.github.com/repos/apache/fury/issues/1219,fury,2032782935,1219,[Python] Refine py register class method,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-08T14:41:56Z,2023-12-08T16:00:11Z,"## Is your feature request related to a problem? Please describe.
Currently there are tow methods for clasx registration in python:
```python
    def register_class(self, cls, class_id: int = None):
        self.class_resolver.register_class(cls, class_id=class_id)

    def register_class_tag(self, cls: type, type_tag: str = None):
        self.class_resolver.register_class_tag(cls, type_tag)
```

It's easy to use the wrong API, and `register_class_tag` seems a little vargue .


## Describe the solution you'd like
Merge those API into one API:
```python
    def register_class(self, cls, *, class_id: int = None, type_tag: str = None):
        pass
```
## Additional context
#1217 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1219/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1220,https://api.github.com/repos/apache/fury/issues/1220,fury,2032959588,1220,[Java] Clear `extRegistry.getClassCtx` if generate serializer class failed,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-08T16:18:53Z,2023-12-09T00:21:19Z,"## Is your feature request related to a problem? Please describe.
Current `getObjectSerializerClass` will add class to `extRegistry.getClassCtx`, so it a class has a field of self type, the codegen wont throw an error.
```java
if (extRegistry.getClassCtx.contains(cls)) {
        // avoid potential recursive call for seq codec generation.
        return LazyInitBeanSerializer.class;
      } else {
        extRegistry.getClassCtx.add(cls);
        Class<? extends Serializer> sc;
        switch (fury.getCompatibleMode()) {
          case SCHEMA_CONSISTENT:
            sc =
                fury.getJITContext()
                    .registerSerializerJITCallback(
                        () -> ObjectSerializer.class,
                        () -> loadCodegenSerializer(fury, cls),
                        callback);
            extRegistry.getClassCtx.remove(cls);
            return sc;
          case COMPATIBLE:
            // If share class meta, compatible serializer won't be necessary, class
            // definition will be sent to peer to create serializer for deserialization.
            sc =
                fury.getJITContext()
                    .registerSerializerJITCallback(
                        () -> shareMeta ? ObjectSerializer.class : CompatibleSerializer.class,
                        () ->
                            shareMeta
                                ? loadCodegenSerializer(fury, cls)
                                : loadCompatibleCodegenSerializer(fury, cls),
                        callback);
            extRegistry.getClassCtx.remove(cls);
            return sc;
          default:
            throw new UnsupportedOperationException(
                String.format(""Unsupported mode %s"", fury.getCompatibleMode()));
        }
      }
```

But if the codegen itself failed, the added `extRegistry.getClassCtx` won't be cleared, which will make next call of `getObjectSerializerClass` returns  LazyInitBeanSerializer.class, thus swallow root cause error.

And we failed at `io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer#getOrCreateGeneratedSerializer` finally:
```java
            Class<? extends Serializer> sc = fury.getClassResolver().getSerializerClass(type);
            checkArgument(
                Generated.GeneratedSerializer.class.isAssignableFrom(sc),
                ""Expect jit serializer but got %s for class %s"",
                sc,
                type);
```

## Describe the solution you'd like
remote the added class using a `try finally` clause.

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1220/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1220,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uHjwZ,fury,1847475225,1220,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-08T16:22:39Z,2023-12-08T16:22:39Z,"`io.fury.resolver.ClassResolver#isSerializable` may cause the `extRegistry.getClassCtx` not reset, and root exception swallowed in it's method body:
```java
  public boolean isSerializable(Class<?> cls) {
    if (ReflectionUtils.isAbstract(cls) || cls.isInterface()) {
      return false;
    }
    try {
      getSerializerClass(cls, false);
      return true;
    } catch (Throwable t) {
      return false;
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5uHjwZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1224,https://api.github.com/repos/apache/fury/issues/1224,fury,2033790469,1224,[Rust] Remove unnecessary abstraction,theweipeng,16490211,weipeng,wangweipeng@apache.org,CLOSED,2023-12-09T10:46:17Z,2023-12-10T12:40:11Z,"## Is your feature request related to a problem? Please describe.
In rust codebase, we can find some unreachable code like this:
```rust
impl<'r> RowViewer<'r> for MapViewer<'r> {
    fn get_offset_size(&self, _idx: usize) -> (u32, u32) {
        panic!(""unreachable code"")
    }

    fn get_field_bytes(&self, _idx: usize) -> &'r [u8] {
        panic!(""unreachable code"")
    }

    fn get_field_offset(&self, _idx: usize) -> usize {
        panic!(""unreachable code"")
    }

    fn row(&self) -> &'r [u8] {
        self.row
    }
}
```
In relity ,  different viewers have different actions. For example, ArrayViewer and StructViewer can contain fields, but MapViewer cannot. So, making MapViewer implement RowViewer is not reasonable.

## Describe the solution you'd like
Remove unnecessary abstraction, use a Helper to reuse the filed accesstor code  instead of trait

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1227,https://api.github.com/repos/apache/fury/issues/1227,fury,2034441391,1227,[Java] Align string array to collection protocol v2,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-10T16:31:42Z,2023-12-11T06:37:27Z,"## Is your feature request related to a problem? Please describe.
In  #927 , we implement an optimized serialization protocol for Collection, which can reduce space cost and improve performance, this should be applied to array too.


## Describe the solution you'd like
- Create an wrapper List to reuse code in `io.fury.serializer.collection.AbstractCollectionSerializer#writeNullabilityHeader` for write header
- Align implementation of string array serialization to collection serializaiton

## Additional context
#923 #927 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1227/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1229,https://api.github.com/repos/apache/fury/issues/1229,fury,2034444971,1229,[Java] Align object array to collection serialization protocol v2 ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-12-10T16:41:31Z,2023-12-10T16:42:24Z,"## Is your feature request related to a problem? Please describe.
In #923 , we implemented the collection protocol in #927 , which can be 1X faster at most. This can improve  space cost by 1X at most. Such optimization should be applied to array too.

## Describe the solution you'd like
Refactor `io.fury.serializer.ArraySerializers.ObjectArraySerializer` to forward serialization to `FuryArrayAsListSerializer`.
- Wrap array into ArrayAsList`, note this wrapped object can't be reused if nested serialization invoke to this place too.
- Push array component generics to `FuryArrayAsListSerializer`
- If array component doesn't have nested generics, reimplement the serialization in `ObjectArraySerializer` for better peroformance.

## Additional context
#1228 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1229/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1230,https://api.github.com/repos/apache/fury/issues/1230,fury,2041089282,1230,How to import fury as external dependency in my c++ project through bazel?,wufengup,67180610,,,OPEN,2023-12-14T07:23:26Z,2023-12-14T13:43:51Z,"I found that although Fury supports C++, there are no user instructions for using it.

Maybe two points are very necessary for c++ users:
* demo as java/python
* how to import fury as external dependency through bazel.


I'm confused and looking for help.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1230/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1230,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5umHnN,fury,1855486413,1230,NA,PragmaTwice,20042607,Twice,,NA,2023-12-14T09:29:02Z,2023-12-14T09:29:02Z,"For each of your two questions:
- I will add code examples for the C++ part soon.
- I am not familiar with bazel, maybe @chaokunyang can help. BTW I am planning to support cmake as an alternative to bazel.

Note that only row format is supported in C++, and also the current encoder for row format in C++ part is quite experimental and has no ABI-compatibility guarantee.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5umHnN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1230,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5unnnP,fury,1855879631,1230,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-14T13:43:51Z,2023-12-14T13:43:51Z,"Nice! CMAKE is used more common, it would be great if we can add cmake build.

For Bazel setup, I'll take a look at bazel external dependency  setup later","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5unnnP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1235,https://api.github.com/repos/apache/fury/issues/1235,fury,2045820849,1235,ClassNotFoundException:SingletonImmutableBiMap,googlefan,3354782,朱辉,pzzhuhui@gmail.com,CLOSED,2023-12-18T06:17:49Z,2023-12-18T08:21:50Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/alipay/issues) and found no similar issues.


### Version

Fury:4.1.0
OS: macOS
JDK:1.8
Guava:31.1

### Component(s)

Java

### Minimal reproduce step

I use 
<dependency>
    <groupId>org.furyio</groupId>
    <artifactId>fury-core</artifactId>
    <version>4.1.0</version>
</dependency>
in my project instead of Hession serialize protocal.

### What did you expect to see?

I want get success byte[] .

### What did you see instead?

Caused by: com.alipay.remoting.rpc.exception.RpcServerException: [Server]OriginErrorMsg: java.lang.RuntimeException: java.lang.ClassNotFoundException: com.google.common.collect.SingletonImmutableBiMap. AdditionalErrorMsg: AYSNC process rpc request failed in RpcRequestProcessor, id=56
	at io.fury.serializer.collection.GuavaCollectionSerializers.loadClass(GuavaCollectionSerializers.java:411)
	at io.fury.serializer.collection.GuavaCollectionSerializers.registerDefaultSerializers(GuavaCollectionSerializers.java:385)


### Anything Else?

I don't know what caused this exception .I need some help to resolve it.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1235/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1235,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5u2aHk,fury,1859756516,1235,NA,googlefan,3354782,朱辉,pzzhuhui@gmail.com,NA,2023-12-18T08:21:49Z,2023-12-18T08:21:49Z,"由于项目自身的guava 存在多个冲突的版本,应该是在项目启动时,某个类无法加载导致的, 定义统一的guava版本即可解决","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5u2aHk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1236,https://api.github.com/repos/apache/fury/issues/1236,fury,2046011316,1236,Deserialize always return null ,googlefan,3354782,朱辉,pzzhuhui@gmail.com,CLOSED,2023-12-18T08:29:09Z,2023-12-18T09:39:25Z,"在反序列化生成java 对象时,总是返回null:
### 问题描述
我在jraft 的状态机中,对任务的data进行反序列化, 改造前使用的Hessian,可以获取到正确的Java Bean 对象,切换到Fury后,总是返回null,debug 跟踪到如下代码:
```
  public Object deserialize(MemoryBuffer buffer, Iterable<MemoryBuffer> outOfBandBuffers) {
    try {
      jitContext.lock();
      checkDepthForDeserialization();
      byte bitmap = buffer.readByte();
      if ((bitmap & isNilFlag) == isNilFlag) {
        return null;
      }
```
我的调用代码如下
```
try {
    final byte b = data.get();
    cmdType = CommandType.parseByte(b);
} catch (Exception e) {
    log.error(""fsm data get err:{}"", e);
    continue;
}
final byte[] cmdBytes = new byte[data.remaining()];
data.get(cmdBytes);
//cmd = CommandCodec.decodeCommand(cmdBytes, cmdType);
cmd = FurySerializeUtil.getFuryInstance().deserialize(cmdBytes);
```
Fury : 4.1.0
Jraft: 1.3.13","{""url"": ""https://api.github.com/repos/apache/fury/issues/1236/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1236,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5u3ITT,fury,1859945683,1236,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-18T09:39:24Z,2023-12-18T09:39:24Z,The deserialization data is not the data generated by fury,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5u3ITT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1239,https://api.github.com/repos/apache/fury/issues/1239,fury,2050900105,1239,[Java][Doc] Java object graph specification,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-20T16:28:32Z,2024-02-28T15:24:55Z,"## Is your feature request related to a problem? Please describe.
Java object graph spec documentation is missing a specification, many users and developers want to see fury spec for better understanding fury serialization machinery. 

We should have a formal spec document for this, and it can be used by future contributors for better improvement of the prototol and hte implementation.

## Describe the solution you'd like
- Add Fury Java object graph spec documentation
- Ignore the existing implementation if the format can be more efficient
- #925 
- #1243 

## Additional context
#1017 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1239/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1243,https://api.github.com/repos/apache/fury/issues/1243,fury,2053549476,1243,[Spec] ascii optimized enumerated string encoding algorithm,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2023-12-22T08:12:20Z,2023-12-22T08:12:32Z,"## Is your feature request related to a problem? Please describe.

Enumerated string are meta string such as class name, field name, enum value, such sting are limited and we can cache their encoding result in memory. So we can use more time to encode such strings for smaller size.

## Describe the solution you'd like

Here we propose a new numerated string encoding format: the format consists of header and binary.

Header are written using little endian order, Fury can read this flag first to determine how to deserialize the data.

### Header

#### Write by data

If string hasn't been written before, the data will be written as follows:

```
| unsigned int: string binary size + 1bit: not written before | 61bits: murmur hash + 3 bits encoding flags | string binary |
```

Murmur hash can be omitted if caller pass a flag. In such cases, the format will be:

```
| unsigned int: string binary size + 1bit: not written before | 8 bits encoding flags | string binary |
```

5 bits in `8 bits encoding flags` will be left empty.

Encoding flags:

| Encoding Flag | Pattern                                                   | Encoding Action                                                                                                                     |
|---------------|-----------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------|
| 0             | every char is in `a-z._$\|`                               | `LOWER_SPECIAL`                                                                                                                     |
| 1             | every char is in `a-z._$` except first char is upper case | replace first upper case char to lower case, then use `LOWER_SPECIAL`                                                               |
| 2             | every char is in `a-zA-Z._$`                              | replace every upper case char by `\|` + `lower case`, then use `LOWER_SPECIAL`, use this encoding if it's smaller than Encoding `3` |
| 3             | every char is in `a-zA-Z._$`                              | use `LOWER_UPPER_DIGIT_SPECIAL` encoding if it's smaller than Encoding `2`                                                          |
| 4             | any utf-8 char                                            | use `UTF-8` encoding                                                                                                                |

#### Write by ref

If string has been written before, the data will be written as follows:

```
| unsigned int: written string id + 1bit: written before |
```

### String binary

String binary encoding:

| Algorithm                 | Pattern        | Description                                                                                                                                     |
|---------------------------|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
| LOWER_SPECIAL             | `a-z._$\|`     | every char is writen using 5 bits, `a-z`: `0b00000~0b11001`, `._$\|`: `0b11010~0b11101`                                                         |
| LOWER_UPPER_DIGIT_SPECIAL | `a-zA-Z0~9._$` | every char is writen using 6 bits, `a-z`: `0b00000~0b11110`, `A-Z`: `0b11010~0b110011`, `0~9`: `0b110100~0b111101`, `._$`: `0b111110~0b1000000` |
| UTF-8                     | any chars      | UTF-8 encoding                                                                                                                                  |


## Additional context
#1238 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1258,https://api.github.com/repos/apache/fury/issues/1258,fury,2056298797,1258,[Doc] Add Incubator footer to web pages,pjfanning,11783444,PJ Fanning,,CLOSED,2023-12-26T10:57:30Z,2024-01-08T12:14:23Z,"https://fury.apache.org/ will need Apache Incubator footers on its pages like https://opendal.apache.org/ has
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1258/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1258,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wHAZB,fury,1880884801,1258,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-08T12:12:25Z,2024-01-08T12:12:25Z,"> https://fury.apache.org/ will need Apache Incubator footers on its pages like https://opendal.apache.org/ has

Thank you for your reminder. We refactored the page a few days ago, and now it includes the Apache Incubator footers.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wHAZB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1265,https://api.github.com/repos/apache/fury/issues/1265,fury,2057064740,1265,fury serialization & deserialization response times are erratic,lize1516,30529058,李泽,,OPEN,2023-12-27T08:20:33Z,2023-12-27T08:43:30Z,![image](https://github.com/apache/incubator-fury/assets/30529058/8c04a1f8-c3c6-474f-8dc0-12fa497a3793),"{""url"": ""https://api.github.com/repos/apache/fury/issues/1265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1265,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vdyf2,fury,1870079990,1265,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-27T08:43:29Z,2023-12-27T08:43:29Z,"@lize1516 Could you share more details about this issue? Like we did for [bug report](https://github.com/apache/incubator-fury/issues/new?assignees=&labels=bug&projects=&template=bug_report.yml):
- Which java version you used
- Which fury version you used
- How do you create Fury
- What scenario will this happen? Did it happen for every time serialization? Or only for the first time? Or for the first time a new thread?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vdyf2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1269,https://api.github.com/repos/apache/fury/issues/1269,fury,2057746003,1269,Need C++ support,MurphyHou123,61939069,,,OPEN,2023-12-27T20:20:39Z,2023-12-27T20:20:39Z,我做的是C++到Java的数据传输，需要高性能高频数据传输，希望尽快推出C++版本的，我项目还能赶上用。,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1269/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1271,https://api.github.com/repos/apache/fury/issues/1271,fury,2058595057,1271,[Java][License] GPLv2 license of jmh benchmark tool conflict with ASF's license policy ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-28T16:01:20Z,2024-01-02T08:27:46Z,"## Is your feature request related to a problem? Please describe.
[fury-benchmark](https://github.com/apache/incubator-fury/tree/main/java/fury-benchmark) and [perftests](https://github.com/apache/incubator-fury/tree/main/integration_tests/perftests) use https://github.com/openjdk/jmh for benchmark tests. 

JMH is licensed under GPLv2, which doesn't comply with ASF's license policy when releasing source/binary packages, even though Fury just refers to some ""org.openjdk.jmh.""

## Describe the solution you'd like
According to apache license doc: https://www.apache.org/legal/resolved.html#optional
![image](https://github.com/apache/incubator-fury/assets/12445254/bd5cc989-2911-4d43-81da-9b2dd9c4e0c3)

If we make jmh dependency as optional, we can use such dependencies.

## Additional context
https://lists.apache.org/thread/qcxd26yhmx27k5gr4jgrlx6hck6fcsdy","{""url"": ""https://api.github.com/repos/apache/fury/issues/1271/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/1274,fury,2058816881,1274,[LICENSE] update Fury LICENSE to list all the licenses for source files where we've borrowed non-Fury code,pjfanning,11783444,PJ Fanning,,OPEN,2023-12-28T20:59:59Z,2024-03-16T04:09:52Z,"https://github.com/apache/incubator-fury/blob/e0ba03b2f7462a63ee102d42fafce83790a7a392/licenserc.toml seems to have a list of source files that have contain code that is not originally from Fury.

These licenses will need to be acknowledged in the Fury license. And the Fury NOTICE may also need to be updated if some of the code comes from ASL licensed projects that have their own NOTICE files. We still need to do this even if the other code is in ASF projects (eg Arrow and Flink).

We may also need to update some source file headers.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1274/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vj_ay,fury,1871705778,1274,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T03:41:56Z,2023-12-29T03:41:56Z,"@pjfanning We removed such headers and license acknowledgement in #783 , maybe we need to add them back and do more checks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vj_ay/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vklTR,fury,1871860945,1274,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-29T09:10:13Z,2023-12-29T09:10:13Z,@chaokunyang @tisonkun the [LICENSE](https://github.com/apache/incubator-fury/blob/main/LICENSE) makes no mention of any borrowed code. There appears to be lots of borrowed code in Fury and it should all be mentioned in our LICENSE. This issue has nothing to do with #783.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vklTR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkoE7,fury,1871872315,1274,NA,tisonkun,18818196,tison,wander4096@gmail.com,NA,2023-12-29T09:27:03Z,2023-12-29T09:27:03Z,"In LICENSE or NOTICE should be OK. In NOTICE like Kvrocks:

* https://github.com/apache/kvrocks/blob/unstable/NOTICE

In LICENSE like Flink:

* https://github.com/apache/spark/blob/master/LICENSE

I'd prefer to bundle in NOTICE and leave the LICENSE identical to the template.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkoE7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkprD,fury,1871878851,1274,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-29T09:36:37Z,2023-12-29T09:36:37Z,"But the Fury NOTICE also makes zero mention of the borrowed code.

https://github.com/apache/incubator-fury/blob/main/NOTICE

With Pekko, we were forced by Incubator team to mention all the borrowed code in our LICENSEs. I will need to track down the references and the rules that forced us to do this. The problem with ASF projects is that not all ASF projects are compliant with the licensing requirements.

In the mean time, we can start updating the NOTICE.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkprD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52xg7v,fury,1992691439,1274,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-12T22:35:21Z,2024-03-12T22:35:21Z,"Speaking only for myself, I was quite pleased to see my name in an `@author Tommy Ettinger` tag in FuryObjectMap. That was part of Kryo initially; some later enhancements to that class were applied to a different repo ([jdkgdxds](https://github.com/tommyettinger/jdkgdxds), in its ObjectObjectMap class), but they might not improve performance here, or in Kryo. If you want to pull code from jdkgdxds, be my guest; the nextPowerOfTwo(), place(), and resize() methods are different, for instance.

Noting where code came from can be a hassle, especially in a large project, but I think it's important to do.

Fury is doing very well in my benchmarks, and it's definitely been a nice experience using it. I look forward to seeing it advance in the future!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52xg7v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc526ioL,fury,1995057675,1274,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-13T17:18:24Z,2024-03-13T17:18:24Z,"Hi @tommyettinger , the linear probe based ObjectMap you implement are awesome, thanks for this great work. Tha hash lookup is a time-consuming operations. Especially after we applied codegen speedup, the cost of hash look for class dispatch or reference tracking is considerable. So we used this map to reduce cost. We also tried swisstable, but it seems that we can't implement it efficiently in java. Is there any ideas you know to speed this map further?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc526ioL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53C8Rw,fury,1997259888,1274,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-14T11:44:41Z,2024-03-14T11:44:41Z,"Hi @chaokunyang , very nice work on Fury! There's a handful of things I can think of that might speed up maps in your case.

An open-addressing, linear-probing table like this needs a low enough collision rate to be as fast as it can get. If your hashCode() results are known to be fairly-high-quality random numbers, such as for identity hash codes, there's nothing that the map needs to do to mix the hashCode() at all, and `place()` can use `item.hashCode() & mask` instead of needing to do the `long` multiplication and shift. That's only a tiny speedup, but place() may need to be called often. Counterintuitively, a place where a hash table of `Class` objects might have trouble is how Classes are hashed -- they use `Object.hashCode()`, so they use the identity hash code. Identity hash codes have been a strangely slow area in some of my code, and I try to avoid them, but that's harder to do with `Class`. [This article was interesting about System.identityHashCode()](https://varoa.net/jvm/java/openjdk/biased-locking/2017/01/30/hashCode.html); it looks like having any calls to it interferes with ""biased locking."" It also seems like the locking can be an issue even in single-threaded situations. I'm wondering if slowdown in the map could be because the first call to `hashCode()` on each Class, or other type that uses hashCode() from Object, has to do thread-related cautionary work, and not actually from the map code itself.

As an aside, the mixing in `place()` might be able to be simpler because Fury doesn't target as many platforms as this did in its original form (in [libGDX](https://libgdx.com)). Some ideas for mixing without needing 64-bit multiplication might include `final int hash = item.hashCode(); return (hash >>> shift) ^ (hash & mask);`, or some [reversible bitwise operation](https://marc-b-reynolds.github.io/math/2017/10/13/XorRotate.html) followed by masking. That could be `final int hash = item.hashCode(); return (hash ^ (hash << 5 | hash >>> 27) ^ (hash << 24 | hash >>> 8)) & mask;`, or anything else that's fast enough and gets suitable mixing for your key type. Identity hash codes probably only need masking, no mixing needed.

Alternate Map implementations could absolutely do better. You're right that SwissTable doesn't have a good implementation in Java; maybe one isn't possible. I think Robin Hood hashing might be something to look into; Cuckoo hashing is what my code replaced in Kryo and before that in libGDX, and it's somewhat of a precursor to Robin Hood and Hopscotch hashing. I wouldn't recommend Cuckoo hashing unless you're certain you've tested all the corner cases -- the papers that describe it gloss over that it can ""fail"" without describing just how *bad* a failure can be... In libGDX, we had a proof of concept that sent about 40 4-character Strings into a Cuckoo-based map, and that forced that implementation to attempt to use more table entries than Java can actually fit in one array (it would have used an array with more than 2 to the 30 items if it could). There are some possible workarounds for Cuckoo hashing, but they would also need to be tested very thoroughly for their worst-case behavior. Robin Hood Hashing is what Rust used before it switched to hashbrown, which I think is a SwissTable variant, though I'm not that familiar with Rust. Robin Hood Hashing is also in most cases very fast and offers good expected-case performance, but one operation was a disaster in at least some versions of Rust; it was very slow to copy one map into another. [This blog post discusses that issue in great detail](https://www.tumblr.com/accidentallyquadratic/153545455987/rust-hash-iteration-reinsertion); it's a good read. I think that bug might not surface if a Robin Hood hash table didn't change which member of a hash family it uses between instances. FuryObjectMap doesn't actually uses a hash family currently, so that might be an interesting avenue.

Lastly, the simplest option: adjusting the default load factor might make a big difference. One of my several subclasses of ObjectObjectMap in different places used a specific type of key every time, `Coord`, which is a 2D point on an int grid. I found that using the [Cantor Pairing Function](https://en.wikipedia.org/wiki/Pairing_function#Cantor_pairing_function) as a hashCode() actually worked very well in that case, but only when the load factor was 0.5f or lower (the default is higher than that). The reason for that probably has to do with the data I was hashing; it was mostly square grids where I wanted to track a value with each Coord and do so in an order, and Cantor won't produce any duplicate results for points in a right isosceles triangle shape, with the size of the triangle determined by how many bits of the hashCode() were used. A load factor of 0.5f meant an extra bit that wouldn't have been used otherwise, and that essentially doubled the side lengths and made the whole square area covered without any collisions. A lower load factor speeds up several operations by lowering the likelihood of a collision, but it also slows down iteration, since empty table slots need to be iterated past more often.

I hope I didn't get too off-track here... I'd try the load factor first, though it may require some tinkering.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53C8Rw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1274,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53TXDS,fury,2001563858,1274,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-16T04:09:51Z,2024-03-16T04:09:51Z,"Hi @tommyettinger , thanks very much for taking time to share such detailed suggestion, this really helps, and laied a good fundation for future performance optimization. I created an issue for this in #1409 , let's continue the discussion there.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53TXDS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1275,https://api.github.com/repos/apache/fury/issues/1275,fury,2058828720,1275,[LICENSE] need proper licensing of Preconditions class?,pjfanning,11783444,PJ Fanning,,CLOSED,2023-12-28T21:19:56Z,2023-12-29T11:00:10Z,"org.apache.fury.util.Preconditions seems to be basically derived from Guava's class.

If so. we need
* to replace the license header with the license header from the original Guava source file
* ideally add a comment with a link to the Guava source file
* update the LICENSE file to acknowledge the Guava license and copyright

I think we need a very good look at https://github.com/apache/incubator-fury/pull/1244 and https://github.com/apache/incubator-fury/pull/1114 to see if there are other source files where we have borrowed from Guava.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1275/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1275,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vj-l8,fury,1871702396,1275,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T03:30:20Z,2023-12-29T03:30:20Z,"Hi @pjfanning , thanks for bring this license issue up, I'll take a look later","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vj-l8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1275,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vk7dj,fury,1871951715,1275,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-29T11:00:10Z,2023-12-29T11:00:10Z,I'll close this for now. Updating the project LICENSE/NOTICE can be done later.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vk7dj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1276,https://api.github.com/repos/apache/fury/issues/1276,fury,2058830652,1276,CrossLanguageTest in fury-format doesn't clean-up the temporary file created for testing ,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,CLOSED,2023-12-28T21:23:27Z,2023-12-29T08:58:55Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury commit : `26f1fc398249d6c7f663e4ba92a83e086cdf9677`

### Component(s)

Java

### Minimal reproduce step

Run the unit test
`mvn test -Dtest=CrossLanguageTest`

### What did you expect to see?

Files created for testing should be cleaned up after the test execution.

### What did you see instead?

The file created for testing is still present after the test is completed

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1276/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1278,https://api.github.com/repos/apache/fury/issues/1278,fury,2059064884,1278,[Java] Spotless not working with java 8,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,CLOSED,2023-12-29T04:54:46Z,2023-12-29T07:17:44Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Git commit id: 26f1fc398249d6c7f663e4ba92a83e086cdf9677

### Component(s)

Java

### Minimal reproduce step

- Set Java Home to point to Java 1.8
- Run `mvn spotless:apply`

### What did you expect to see?

`mvn spotless:apply` should reformat the code if required.

### What did you see instead?

The command fails with the following error
```
[ERROR] Failed to execute goal com.diffplug.spotless:spotless-maven-plugin:2.41.1:apply (default-cli) on project fury-parent: Execution default-cli of goal com.diffplug.spotless:spotless-maven-plugin:2.41.1:apply failed: Unable to load the mojo 'apply' in the plugin 'com.diffplug.spotless:spotless-maven-plugin:2.41.1' due to an API incompatibility: org.codehaus.plexus.component.repository.exception.ComponentLookupException: com/diffplug/spotless/maven/SpotlessApplyMojo has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
[ERROR] -----------------------------------------------------
[ERROR] realm =    plugin>com.diffplug.spotless:spotless-maven-plugin:2.41.1
[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1278/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1278,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkKu-,fury,1871752126,1278,NA,tisonkun,18818196,tison,wander4096@gmail.com,NA,2023-12-29T06:04:50Z,2023-12-29T06:04:50Z,This is intended. Spotless is dev dependency only. You can use a newer JDK and the produced bytecode is still compatible with JDK 8,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkKu-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1278,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkXD0,fury,1871802612,1278,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T07:15:52Z,2023-12-29T07:15:52Z,"google-java-format need to use a newer JDK to format java `record` class, we can't do it using java8","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkXD0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1278,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkXPi,fury,1871803362,1278,NA,tisonkun,18818196,tison,wander4096@gmail.com,NA,2023-12-29T07:17:33Z,2023-12-29T07:17:33Z,Closed as answer and not a bug.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkXPi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1279,https://api.github.com/repos/apache/fury/issues/1279,fury,2059225310,1279,[Java] support class registration in ThreadSafeFury,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2023-12-29T09:11:57Z,2023-12-29T10:35:03Z,"## Is your feature request related to a problem? Please describe.
`Fury` provide a `register` API to register class and serializer, but `ThreadSafeFury` doesn't provide such API.

Although we provide such doc for registration:
```java
ThreadSafeFury fury =
    new ThreadLocalFury(
        classLoader -> {
          Fury f = Fury.builder().requireClassRegistration(true).build();
          // register and generate serializer code.
          f.register(Foo.class, true);
          return f;
        });
System.out.println(""Init fury at build time"");
```
Users still missed this doc often and ask for help how to register class using `ThreadSafeFury`. Also it's confusing that `Fury` and `ThreadSafeFury` doesn't provide consistent API.


## Describe the solution you'd like
Provide `register` API for `ThreadSafeFury`

## Additional context
#704 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/1281,fury,2059259011,1281,[CODE HEADERS] Can we remove the author tags from the Fury code covered by the code grant?,pjfanning,11783444,PJ Fanning,,CLOSED,2023-12-29T09:54:24Z,2023-12-29T10:16:06Z,It appears to be unusual to have author tags in ASF code bases. There are exceptions for code that is borrowed from 3rd party sources - if it was not explicitly granted to the ASF.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1281/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vktZL,fury,1871894091,1281,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T09:58:40Z,2023-12-29T09:58:40Z,"Hi PJ, do you mean the java doc author tag like:
```java
/**
 * Thread safe serializer interface. {@link Fury} is not thread-safe, the implementation of this
 * interface will be thread-safe. And support switch classloader dynamically.
 *
 * @author chaokunyang
 */
```


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vktZL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkthi,fury,1871894626,1281,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T09:59:31Z,2023-12-29T09:59:31Z,"We have such tags before joining ASF. If it's not recommanded, I can create a PR to remove it all","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkthi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkuTS,fury,1871897810,1281,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-29T10:04:11Z,2023-12-29T10:04:11Z,"Yes - it is the `@author` tags that I am referring to.

The ASF likes the idea of collective code owenership. The git history and git blame give a good idea of authorship anyway. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkuTS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkuo-,fury,1871899198,1281,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T10:06:05Z,2023-12-29T10:06:05Z,Will be removed in #1282,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkuo-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkvni,fury,1871903202,1281,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-29T10:08:28Z,2023-12-29T10:08:28Z,"https://whimsy.apache.org/board/minutes/Confirming_that_the_current_stance_on__author_tags_as.html

It is a recommendation (strong one) that the tags are removed but the PPMC could decide to allow them, if people are very attached to them.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkvni/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1281,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkxnt,fury,1871911405,1281,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2023-12-29T10:11:57Z,2023-12-29T10:11:57Z,I think tags can be removed. Currently only java code contains `@author`. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vkxnt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1287,https://api.github.com/repos/apache/fury/issues/1287,fury,2061261734,1287,[Java]  refine Collection util data structure,mof-dev-3,129163631,,,CLOSED,2024-01-01T02:30:06Z,2024-01-01T07:48:57Z,"1. use local reference when possible
2. make tuple value field final","{""url"": ""https://api.github.com/repos/apache/fury/issues/1287/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/1293,fury,2063682567,1293,Caused by: io.fury.exception.InsecureException: Class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject isn't in allow list for serialization.,Maurice-Betzel,16353975,Maurice Betzel,,CLOSED,2024-01-03T10:10:53Z,2024-01-03T10:54:24Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury 0.4.1
OS Win11 x64
JDK openJDK 1.8

### Component(s)

Java

### Minimal reproduce step

Serializing org.apache.karaf.cellar.dosgi.RemoteServiceCall containing a LinkedBlockingQueue

`Fury instance = Fury.builder()
                .withLanguage(Language.JAVA)
                .withMetaContextShare(false)
                .withRefTracking(true)
                .withIntCompressed(false)
                .withLongCompressed(false)
                .withStringCompressed(false)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withClassVersionCheck(false)
                .withJdkClassSerializableCheck(true)
                .withDeserializeUnexistedClass(false)
                .withAsyncCompilation(true)
                .withCodegen(true)
                .ignoreTimeRef(false)
                .registerGuavaTypes(false)
                .requireClassRegistration(false)
                .suppressClassRegistrationWarnings(false)
                .build();`

### What did you expect to see?

As a drop in replacement for the default Java serialization it should support the whole Java JDK per default.

### What did you see instead?

`java.lang.RuntimeException: Serialize object of type class java.util.concurrent.LinkedBlockingQueue failed, Try to use class io.fury.serializer.JavaSerializer instead by fury.registerSerializer(class java.util.concurrent.LinkedBlockingQueue, new JavaSerializer(fury, class java.util.concurrent.LinkedBlockingQueue)) or implement a custom class io.fury.serializer.Serializer.`

`Caused by: io.fury.exception.InsecureException: Class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject isn't in allow list for serialization. If this class is allowed for serialization, please add it to allow list by AllowListChecker#addAllowClass`



### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1293/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxE5a,fury,1875136090,1293,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-03T10:20:56Z,2024-01-03T10:20:56Z,Only happens with a AllowListChecker added in STRICT mode,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxE5a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxFWC,fury,1875137922,1293,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T10:22:27Z,2024-01-03T10:22:27Z,"Please provide stack using multiple line with indent, it's hard to read to see all stacktrace in one line. You can use markdown \`\`\`\`\`\` syntax for it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxFWC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxFsA,fury,1875139328,1293,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T10:23:28Z,2024-01-03T10:23:28Z,"> If this class is allowed for serialization, please add it to allow list by AllowListChecker#addAllowClass

Like the exception message said: ` If this class is allowed for serialization, please add it to allow list by AllowListChecker#addAllowClass`. You need to add this class by `AllowListChecker#addAllowClass` since you used AllowListChecker added in STRICT mode","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxFsA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxHC0,fury,1875144884,1293,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-03T10:27:29Z,2024-01-03T10:27:29Z,In my understanding of a drop in replacement it should support all of the default JDK classes including the serializable inner classes.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxHC0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxH_4,fury,1875148792,1293,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T10:30:45Z,2024-01-03T10:30:45Z,"> In my understanding of a drop in replacement it should support all of the default JDK classes including the serializable inner classes.

It does support inner class, you just disabled it by class checker","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxH_4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxI4o,fury,1875152424,1293,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T10:33:37Z,2024-01-03T10:33:37Z,![image](https://github.com/apache/incubator-fury/assets/12445254/6ecd9413-d248-4d44-845d-e630ffc72f49),"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxI4o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxKoi,fury,1875159586,1293,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-03T10:39:01Z,2024-01-03T10:39:01Z,"Interesting, is there a reason for this behaviour of disallowing JDK inner classes in STRICT mode and are there any other implecations?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxKoi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxOrf,fury,1875176159,1293,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T10:51:34Z,2024-01-03T10:51:34Z,There are many security vulnerabilities in JDK serialization. We won't allow serialize any jdk serializable objects by default.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxOrf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1293,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxPOT,fury,1875178387,1293,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-03T10:53:31Z,2024-01-03T10:53:31Z,"I order to allow all JDK classes in STRICT mode add the following to the AllowListChecker whitelist:

`Collection<String> whiteList = new HashSet();`
`whiteList.add(""java.*"");`

I was under the impression JDK classes are allowed always.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vxPOT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/1296,fury,2064152457,1296,Consider to remove CODEOWNERS,PragmaTwice,20042607,Twice,,CLOSED,2024-01-03T14:42:04Z,2024-01-08T05:20:44Z,It is outdated and from my view it is unnecessary to keep.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1296/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vyeNl,fury,1875501925,1296,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T14:55:16Z,2024-01-03T14:55:16Z,"Projects like apache/arrow still have such configurations:
![image](https://github.com/apache/incubator-fury/assets/12445254/d13e1783-42f2-479f-8cbd-8ea25c2ff9d6)

It may be useful for some new contributors to ask someone for review code","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vyeNl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-mZ9,fury,1878681213,1296,NA,PragmaTwice,20042607,Twice,,NA,2024-01-05T13:44:30Z,2024-01-05T13:44:30Z,"But in the current CODEOWNERS, just one ID [chaokunyang](https://github.com/chaokunyang) is valid, it's useless.

If you want to add, you can add a new version after deleting the current one.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-mZ9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_LpC,fury,1878833730,1296,NA,liuxiaocs7,42756849,Liu Xiao,,NA,2024-01-05T15:16:09Z,2024-01-05T15:16:09Z,"Hi, @PragmaTwice and @chaokunyang

seems incorrect user id results invalid file

![image](https://github.com/apache/incubator-fury/assets/42756849/8bf168c0-7cd1-4725-b2bb-1bd987acb529)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_LpC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_yUJ,fury,1878992137,1296,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-05T17:05:39Z,2024-01-05T17:05:39Z,"> But in the current CODEOWNERS, just one ID [chaokunyang](https://github.com/chaokunyang) is valid, it's useless.
> 
> If you want to add, you can add a new version after deleting the current one.

It's out-dated, we should update it. But if it did not help with code review, then we should remove it. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_yUJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1296,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wFKCR,fury,1880400017,1296,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-08T05:20:44Z,2024-01-08T05:20:44Z,"Closed for now, feel free to reopen it if current review mechanism does't meet the community requirements","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wFKCR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/1299,fury,2064206273,1299,Consider to rewrite shell scripts in Python,PragmaTwice,20042607,Twice,,OPEN,2024-01-03T15:16:31Z,2024-01-04T03:05:52Z,"TBH these CI scripts are hard to maintain (especially considering the difference between bash and zsh, and the difficulty to execute them on windows), we need a more structure language like python to make them readable and maintanable.

https://github.com/apache/incubator-fury/tree/main/ci","{""url"": ""https://api.github.com/repos/apache/fury/issues/1299/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vyrMw,fury,1875555120,1299,NA,LiangliangSui,116876207,,,NA,2024-01-03T15:31:11Z,2024-01-03T15:31:11Z,"I totally agree with this, it can mask the differences in script syntax (e.g. windows script syntax is very unfriendly), and it is easier to write and code readable.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vyrMw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vy9ll,fury,1875630437,1299,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T16:21:29Z,2024-01-03T16:21:29Z,"Sounds good to me, but rewriting those scripts into python is not an easy work, and most scripts are used by CI only. I suggest we start from rewriting the scripts used by contributors everyday.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vy9ll/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vy-Po,fury,1875633128,1299,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-03T16:23:24Z,2024-01-03T16:23:24Z,"This remind me of `PyTorch`. When you filing an issue, you can execute a python script from `PyTorch`, which can collect system information as much as it can, and print it. Then you can paste such information into the issue for trouble shooting","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5vy-Po/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1N7h,fury,1876221665,1299,NA,LiangliangSui,116876207,,,NA,2024-01-04T02:24:05Z,2024-01-04T02:24:05Z,So can we start by rewriting the C++ CI Build script in Windows? such as `run_ci.py`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1N7h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1299,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1UKg,fury,1876247200,1299,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-04T03:05:51Z,2024-01-04T03:05:51Z,"Yep, we can start from rewriting the C++ CI Build script in Windows","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1UKg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/1300,fury,2064884715,1300,Update fury.apache.org web website content,LiangliangSui,116876207,,,CLOSED,2024-01-04T02:13:16Z,2024-01-10T06:03:58Z,"Currently, some CSS styles of fury.apache.org are inconsistent and need to be updated.

For example, in the first picture, its content is not centered.
![image](https://github.com/apache/incubator-fury/assets/116876207/64125bea-7036-4cef-b5b0-110b7eadae5f)

The question in the second picture is too obtrusive. The font size and color should be adjusted.
![image](https://github.com/apache/incubator-fury/assets/116876207/e9688c4f-7484-416d-9608-caf3b9403e93)


**How is this website maintained and where is the code?**","{""url"": ""https://api.github.com/repos/apache/fury/issues/1300/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1M1T,fury,1876217171,1300,NA,PragmaTwice,20042607,Twice,,NA,2024-01-04T02:16:20Z,2024-01-04T02:16:20Z,"> How is this website maintained and where is the code?

https://github.com/apache/incubator-fury-site.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v1M1T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMFZZ,fury,1882216025,1300,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-09T02:27:28Z,2024-01-09T02:27:28Z,"> Currently, some CSS styles of fury.apache.org are inconsistent and need to be updated.
> 
> For example, in the first picture, its content is not centered. ![image](https://private-user-images.githubusercontent.com/116876207/294069064-64125bea-7036-4cef-b5b0-110b7eadae5f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ3NjcyMjAsIm5iZiI6MTcwNDc2NjkyMCwicGF0aCI6Ii8xMTY4NzYyMDcvMjk0MDY5MDY0LTY0MTI1YmVhLTcwMzYtNGNlZi1iNWIwLTExMGI3ZWFkYWU1Zi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMTA5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDEwOVQwMjIyMDBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1hZmNmMzg2YTczODRjYTMxODY5MjFlMGI5OTQzMDhmNzVhNmE1MWY1ZTA0Zjk2MDA3NGQ2MzUyZTE5NmQzYjM4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.v0Qaxk98W-47aUvIini_na7QCKodez__1fl8vmolbAs)
> 
> The question in the second picture is too obtrusive. The font size and color should be adjusted. ![image](https://private-user-images.githubusercontent.com/116876207/294069123-e9688c4f-7484-416d-9608-caf3b9403e93.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ3NjcyMjAsIm5iZiI6MTcwNDc2NjkyMCwicGF0aCI6Ii8xMTY4NzYyMDcvMjk0MDY5MTIzLWU5Njg4YzRmLTc0ODQtNDE2ZC05NjA4LWNhZjNiOTQwM2U5My5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMTA5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDEwOVQwMjIyMDBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yODRjYTBkYWM0MzhkMzUwNWFhZDlmMDBhMDUwZTlmYzY2MjRmYTk4ZjBiODRkYjgyMzM2NmMwOTlhNjAwNWU1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.rhNplWnHMkgCCoKwmsUv_gW5KNn03WX2QL36Q_qpCi8)
> 
> **How is this website maintained and where is the code?**
@LiangliangSui 
Hi, Are you already working on a fix for it? If not, I'd like to take it on and contribute a solution.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMFZZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMNNW,fury,1882248022,1300,NA,LiangliangSui,116876207,,,NA,2024-01-09T02:44:19Z,2024-01-09T02:44:19Z,"Hi @theweipeng, I'm working on it, but it may take a while, a day or two or so, as late as this Saturday.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMNNW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMYUs,fury,1882293548,1300,NA,LiangliangSui,116876207,,,NA,2024-01-09T03:07:56Z,2024-01-09T03:07:56Z,Is this time acceptable?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMYUs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMcSX,fury,1882309783,1300,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-09T03:16:15Z,2024-01-09T03:16:15Z,"> Is this time acceptable?

Yes, this time is acceptable for me","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wMcSX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOKVt,fury,1882760557,1300,NA,LiangliangSui,116876207,,,NA,2024-01-09T10:01:27Z,2024-01-09T10:01:27Z,"![image](https://github.com/apache/incubator-fury/assets/116876207/0dad97d3-eaab-4851-a40e-e1d58ade8b98)

The effect is as shown in the picture above. Is this okay? If so, I will submit a PR immediately.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOKVt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wONwV,fury,1882774549,1300,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-09T10:09:34Z,2024-01-09T10:09:34Z,Looks good to me,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wONwV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOOQV,fury,1882776597,1300,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-09T10:10:47Z,2024-01-09T10:10:47Z,"> ![image](https://github.com/apache/incubator-fury/assets/116876207/0dad97d3-eaab-4851-a40e-e1d58ade8b98)
> 
> 
> 
> The effect is as shown in the picture above. Is this okay? If so, I will submit a PR immediately.

Yes, It is good! could you please take a screenshot on mobile side?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOOQV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOPa6,fury,1882781370,1300,NA,LiangliangSui,116876207,,,NA,2024-01-09T10:13:41Z,2024-01-09T10:13:41Z,"![image](https://github.com/apache/incubator-fury/assets/116876207/a49fabdd-2985-4c56-846e-dda744cbf179)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOPa6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOs-z,fury,1882902451,1300,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-09T11:30:58Z,2024-01-09T11:30:58Z,"> ![image](https://github.com/apache/incubator-fury/assets/116876207/a49fabdd-2985-4c56-846e-dda744cbf179)
> 
> 

Great","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wOs-z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1300,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wT0Ye,fury,1884243486,1300,NA,LiangliangSui,116876207,,,NA,2024-01-10T06:03:48Z,2024-01-10T06:03:48Z,Fixed by https://github.com/apache/incubator-fury-site/pull/101,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wT0Ye/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1305,https://api.github.com/repos/apache/fury/issues/1305,fury,2065588793,1305,Serializing nested json object throws exception,xiguashu,26504344,liangjie,liangjie3138@gmail.com,CLOSED,2024-01-04T12:37:53Z,2024-01-05T07:27:38Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury:  0.4.1
OS: macOS Big Sur 11.2.3 (20D91)
JDK: 11.0.12

### Component(s)

Java

### Minimal reproduce step

    @Test
    public void test() throws IOException {
        String str = ""{\""f1\"":[{\""ff1\"":\""RECRUITCORE\"",\""ff2\"":\""123\""}]}"";
        JSONObject jsonObject = JSONObject.parseObject(str);

        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .withAsyncCompilation(true)
                .build();

        byte[] bytes = fury.serialize(jsonObject);
        Object res = fury.deserialize(bytes);

    }

### What did you expect to see?

Get the original jsonObject after deserialization.

### What did you see instead?

The exception: 
java.lang.IndexOutOfBoundsException: readerIndex(130) + length(1) exceeds size(130): MemoryBuffer{size=130, readerIndex=130, writerIndex=0, heapMemory=len(130), heapData=[2, -1, 1, 0, -60, -90, 110, 26, 36, -49, 11, -13, 20, 0, 99, 111, 109, 46, 97, 108, 105, 98, 97, 98, 97, 46, 102, 97, 115, 116, 106, 115, 111, 110, 0, 81, -106, 123, 29, -23, -115, 44, -75, 10, 0, 74, 83, 79, 78, 79, 98, 106, 101, 99, 116, 1, -1, 0, 2, 102, 49, -1, 1, 1, 0, 0, 0, 36, 15, -90, 82, 17, 113, -126, -41, 9, 0, 74, 83, 79, 78, 65, 114, 114, 97, 121, 1, 4, 1, 1, 0, 0, 1, 1, 0, 2, -1, 0, 3, 102, 102, 49, -1, 44, 0, 11, 82, 69, 67, 82, 85, 73, 84, 67, 79, 82, 69, -1, 0, 3, 102, 102, 50, -1, 44, 0, 3, 49, 50, 51], heapOffset=0, offHeapBuffer=null, address=16, addressLimit=146}

	at io.fury.memory.MemoryBuffer.readByte(MemoryBuffer.java:2002)
	at io.fury.Fury.readJavaStringRef(Fury.java:654)
	at io.fury.serializer.collection.MapSerializers$StringKeyMapSerializer.read(MapSerializers.java:328)
	at io.fury.serializer.collection.MapSerializers$StringKeyMapSerializer.read(MapSerializers.java:306)
	at io.fury.Fury.readDataInternal(Fury.java:899)
	at io.fury.Fury.readRef(Fury.java:801)
	at io.fury.Fury.deserialize(Fury.java:750)
	at io.fury.Fury.deserialize(Fury.java:681)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1305/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1305,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v8Ddz,fury,1878013811,1305,NA,nandakumar131,8871229,Nandakumar Vadivelu,nandakumar131@gmail.com,NA,2024-01-05T02:07:50Z,2024-01-05T02:07:50Z,"@xiguashu, which `JSONObject` are you using?
I'm not able to reproduce the error with `org.json.JSONObject`.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v8Ddz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1305,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v8KtD,fury,1878043459,1305,NA,xiguashu,26504344,liangjie,liangjie3138@gmail.com,NA,2024-01-05T02:37:22Z,2024-01-05T02:37:22Z,"> @xiguashu, which `JSONObject` are you using? I'm not able to reproduce the error with `org.json.JSONObject`.

JSONObject by com.alibaba.fastjson, with version 1.2.68.noneautotype.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v8KtD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/1308,fury,2066975198,1308,[Feature]  Add PR and issue specification documents,caicancai,77189278,Cancai Cai,,CLOSED,2024-01-05T09:04:21Z,2024-01-06T12:50:51Z,"The specifications of issue and PR are the standards that a good community should have. We should explain these specifications to developers. This is conducive to community archiving and developers to learn. I don’t know if such a document already exists.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1308/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9Tso,fury,1878342440,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-05T09:06:00Z,2024-01-05T09:06:00Z,"I have seen some communities leaving some historical artifacts due to irregularities in submitting pull requests and issues. I hope fury can avoid this, even if it may discourage some developers. I want to hear your opinions.
cc @chaokunyang @PragmaTwice @theweipeng ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9Tso/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9YS7,fury,1878361275,1308,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-05T09:20:57Z,2024-01-05T09:20:57Z,"Hi @caicancai, thanks for bring up this. Could you share some project which have a good pr/issue document? 
Currently, we do need some updates.
One method I can think of is to update our PR/issue template","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9YS7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9aLh,fury,1878368993,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-05T09:27:34Z,2024-01-05T09:27:34Z,"> If we update your PR/issue template, will it address this?

No, to completely solve this problem may require one-to-one communication between the memeber and the developer's PR, but this is unfair to the memeber. We can reduce this problem through documents + update your PR/issue template, etc. The occurrence of similar problems, such as adding a check on the PR title in the cli and updating your PR/issue template, etc. This method is very common in some communities. I know that the calcite community is currently more strict about this, but I feel that the calcite community is too strict.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9aLh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9a5T,fury,1878371923,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-05T09:30:02Z,2024-01-05T09:30:02Z,"My current thoughts are
1. update our PR/issue template
2. Add check for pr title in cli
3. Add this part of the documentation

This is just my opinion, I'm sorry if it offended","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9a5T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-lFb,fury,1878675803,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-05T13:40:04Z,2024-01-05T13:40:04Z,"@chaokunyang I looked at other projects like calcite, spark, etc. I think it is a good choice to add a PR title check in cli. For example, restrict PR to have keywords: issue number, hotfix, etc. The standards we need to specify are which PRs should be issued and which ones are hotfixes.
There are not many developers at present, so this responsibility can be temporarily completed by memeber, but for long-term development, I think it is necessary to add this cli check.
This work may be a long-term process","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-lFb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-pT9,fury,1878693117,1308,NA,PragmaTwice,20042607,Twice,,NA,2024-01-05T13:51:30Z,2024-01-05T13:51:30Z,"For PR titles, we can follow the [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/).

IMHO designing PR and issue templates is quite challenging. Additionally, I believe that excessive restrictions are not beneficial.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-pT9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-shM,fury,1878706252,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-05T13:56:41Z,2024-01-05T13:56:41Z,"> For PR titles, we can follow the [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/).
> 
> IMHO designing PR and issue templates is quite challenging. Additionally, I believe that excessive restrictions are not beneficial.

Thank you for your reply. Yes, how to ensure that there are no excessive restrictions is also a complex issue. Some communities are trying a very strict restriction, and the shortcomings are also very obvious, which may discourage some developers. We should probably think about how to grasp this degree. If we want the community to develop healthily, I think this is indispensable.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v-shM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_F6n,fury,1878810279,1308,NA,eolivelli,9469110,Enrico Olivelli,eolivelli@gmail.com,NA,2024-01-05T14:59:26Z,2024-01-05T14:59:26Z,"Hello,
In my experience it is usually enough to have a good pr/issues template.

We could enforce the PR title to some specific format.

You check it out in apache/pulsar

@tisonkun worked on this topics for the Pulsar community","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v_F6n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1308,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wCYml,fury,1879673253,1308,NA,caicancai,77189278,Cancai Cai,,NA,2024-01-06T12:50:48Z,2024-01-06T12:50:48Z,thank everyone https://github.com/apache/incubator-fury/pull/1317,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wCYml/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1309,https://api.github.com/repos/apache/fury/issues/1309,fury,2066975906,1309,Big Bean compile take too long time,DemonJun,21258148,DemonJun,,OPEN,2024-01-05T09:04:48Z,2024-01-05T11:12:33Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

jdk: 17
fury: 0.4.1

### Component(s)

Java

### Minimal reproduce step

Create a bean containing 350 fields. The first serialization takes nearly 40 seconds.
<img width=""1290"" alt=""image"" src=""https://github.com/apache/incubator-fury/assets/21258148/853451bf-6c78-4776-a4d1-df672f022028"">


### What did you expect to see?

Reduce time, or can be pre-compiled

### What did you see instead?

Reduce time, or can be pre-compiled

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1309,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9VmL,fury,1878350219,1309,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-05T09:12:03Z,2024-01-05T09:12:03Z,"You can invoke Fury to generate serializer code to java files first, then compile it with your project together:
```java
BaseObjectCodecBuilder codecBuilder = new ObjectCodecBuilder(cls, fury);
String code = codecBuilder.genCode();
Files.write(new File(codecBuilder.codecQualifiedClassName(cls).replace(""."", ""/"") + "".java"").toPath(),
      code.getBytes(StandardCharsets.UTF_8));
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v9VmL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1309,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v96c8,fury,1878501180,1309,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-05T11:12:19Z,2024-01-05T11:12:19Z,"Async compilation can be used for such cases too, it will compile generate serializer in background, and the serialization will use intepreter serializer before compilation finishes:
```java
Fury fury=Fury.builder()
  .withLanguage(Language.JAVA)
  // enable reference tracking for shared/circular reference.
  // Disable it will have better performance if no duplicate reference.
  .withRefTracking(false)
  .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
  // enable type forward/backward compatibility
  // disable it for small size and better performance.
  // .withCompatibleMode(CompatibleMode.COMPATIBLE)
  // enable async multi-threaded compilation.
  .withAsyncCompilation(true)
  .build();

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5v96c8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1323,https://api.github.com/repos/apache/fury/issues/1323,fury,2072144207,1323,[Java] Component types on generic arrays are lost during (de-)serialization,mtf90,7063944,Markus Frohme,,CLOSED,2024-01-09T11:04:25Z,2024-01-10T06:44:12Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

* 0.5.0-SNAPSHOT from the nightly builds (current HEAD is a80dce6)
* OS: Linux x64
* Java: fails on JDK 11/17/21 

### Component(s)

Java

### Minimal reproduce step

```java
public class App {

    public static void main(String[] args) {
        final Fury fury = Fury.builder().requireClassRegistration(false).build();
        final ArrayWrapper<String> wrapper = new ArrayWrapper<>(String.class, 2);

        wrapper.array[0] = ""Hello"";

        final byte[] bytes = fury.serialize(wrapper);
        final ArrayWrapper<String> deserialized = (ArrayWrapper<String>) fury.deserialize(bytes);

        deserialized.array[1] = ""World"";
    }

    static class ArrayWrapper<T> {

        private final T[] array;

        public ArrayWrapper(Class<T> clazz, int capacity) {
            this.array = (T[]) Array.newInstance(clazz, capacity);
        }
    }
}
```

### What did you expect to see?

A successfull run of the program

### What did you see instead?

```
Exception in thread ""main"" java.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')
```

### Anything Else?

It appears that the information about the component type (here `String.class`) are lost and the (de-) serializer simply assumes ""Generic Type? => Object!"". The problem here is that one cannot simply replace the `Array.newInstance(clazz, capacity);` with `new Object[capacity];` because then the `wrapper.array[0] = ""Hello"";` statement fails with the same error.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1323,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wPS5c,fury,1883057756,1323,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-09T13:31:23Z,2024-01-09T13:31:23Z,"Thanks @mtf90 , I can reproduce this bug locally. This is a bug in fury. Fury take `Object[]` as a final type, it skip writing class info for such types, so the deserialization got wrong type. I fixed it in #1324. Thanks again for reporting this bug.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wPS5c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1323,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTACZ,fury,1884029081,1323,NA,mtf90,7063944,Markus Frohme,,NA,2024-01-10T01:01:59Z,2024-01-10T01:01:59Z,Seems like fury is not only blazing fast with serialization but also with bug fixes :laughing:. Thank you very much for the quick response. Looking forward to test the nightly once this is merged.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTACZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/1325,fury,2072846995,1325,Create sequential serializer failed,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,CLOSED,2024-01-09T17:35:00Z,2024-01-18T17:58:19Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.

It may be a duplicate of https://github.com/apache/incubator-fury/issues/1176, but the trace suggests it **might** be a different cause.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

Run the serializer against our object graph. It seems to happen intermittently, so could be a threading issue. 

### What did you expect to see?

No runtime exception.

### What did you see instead?

```
17:02:55  Exception in thread ""fury-jit-compiler-2"" java.lang.RuntimeException: Create sequential serializer failed, 
class: class io.citrine.lolo.bags.RegressionBaggerTrainingResult
17:02:55  	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
17:02:55  	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:963)
17:02:55  	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
17:02:55  	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:76)
17:02:55  	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
17:02:55  	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
17:02:55  	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
17:02:55  	at java.base/java.lang.Thread.run(Thread.java:829)
17:02:55  Caused by: java.lang.IllegalArgumentException: Expected AbstractCollectionSerializer but got io.fury.serializer.Serializer
17:02:55  	at io.fury.util.Preconditions.checkArgument(Preconditions.java:78)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeForCollection(BaseObjectCodecBuilder.java:1210)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1162)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.lambda$readContainerElement$12(BaseObjectCodecBuilder.java:1401)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.readRef(BaseObjectCodecBuilder.java:1093)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.readContainerElement(BaseObjectCodecBuilder.java:1398)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.lambda$readContainerElements$2223955c$1(BaseObjectCodecBuilder.java:1360)
17:02:55  	at io.fury.codegen.Expression$ForLoop.doGenCode(Expression.java:2363)
17:02:55  	at io.fury.codegen.Expression.genCode(Expression.java:102)
17:02:55  	at io.fury.codegen.Expression$ListExpression.doGenCode(Expression.java:181)
17:02:55  	at io.fury.codegen.Expression.genCode(Expression.java:102)
17:02:55  	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:120)
17:02:55  	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:68)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.readCollectionCodegen(BaseObjectCodecBuilder.java:1298)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeForCollection(BaseObjectCodecBuilder.java:1220)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1162)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1122)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.lambda$deserializeFor$7(BaseObjectCodecBuilder.java:1073)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.readRef(BaseObjectCodecBuilder.java:1093)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeFor(BaseObjectCodecBuilder.java:1073)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.deserializeFor(BaseObjectCodecBuilder.java:1057)
17:02:55  	at io.fury.builder.ObjectCodecBuilder.lambda$deserializeGroup$37fcf467$1(ObjectCodecBuilder.java:522)
17:02:55  	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:48)
17:02:55  	at io.fury.builder.ObjectCodecOptimizer.invokeGenerated(ObjectCodecOptimizer.java:134)
17:02:55  	at io.fury.builder.ObjectCodecBuilder.deserializeGroup(ObjectCodecBuilder.java:538)
17:02:55  	at io.fury.builder.ObjectCodecBuilder.buildDecodeExpression(ObjectCodecBuilder.java:439)
17:02:55  	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:204)
17:02:55  	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
17:02:55  	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:72)
17:02:55  	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
17:02:55  	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
17:02:55  	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
17:02:55  	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:42)
17:02:55  	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
17:02:55  	... 7 more
```

### Anything Else?

I might be doing something wrong, but would like to help to triage.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1325/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTVsL,fury,1884117771,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-10T03:04:08Z,2024-01-10T03:04:08Z,"Hi @andyczerwonka , thanks for reporting this bug. Can this bug be reproduced locally?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTVsL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTZpY,fury,1884133976,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-10T03:29:26Z,2024-01-10T03:29:26Z,"> Hi @andyczerwonka , thanks for reporting this bug. Can this bug be reproduced locally?

No, we’re seeing it intermittently.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wTZpY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wc_dy,fury,1886648178,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T08:51:40Z,2024-01-11T08:51:40Z,@andyczerwonka Coud you use lastest snapshot jar? Dose it work for you?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wc_dy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wdsTN,fury,1886831821,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T10:42:26Z,2024-01-11T10:42:26Z,"@andyczerwonka I try to fix it in #1333, but I'm not sure whether they are same issue. Could you try this branch in your environment?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wdsTN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wfeQM,fury,1887298572,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-11T14:25:56Z,2024-01-11T14:25:56Z,"> @andyczerwonka I try to fix it in #1333, but I'm not sure whether they are same issue. Could you try this branch in your environment?

Which branch?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wfeQM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wffi2,fury,1887303862,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T14:27:58Z,2024-01-11T14:27:58Z,https://github.com/chaokunyang/fury/tree/refine_collection_serializer_cast,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wffi2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlB0i,fury,1888754978,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-12T09:40:42Z,2024-01-12T09:40:42Z,Do it address your issue ? @andyczerwonka ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlB0i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wnJAA,fury,1889308672,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-12T14:09:54Z,2024-01-12T14:09:54Z,"I haven’t been able to test it yet, but I will be doing it either today or
tomorrow morning.


On Fri, Jan 12, 2024 at 2:40 AM Shawn Yang ***@***.***> wrote:

> Do it work for you ? @andyczerwonka <https://github.com/andyczerwonka>
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/apache/incubator-fury/issues/1325#issuecomment-1888754978>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABB5ETZ2ZP25FCUPAB2RO3YOEAKNAVCNFSM6AAAAABBTPJ37KVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQOBYG42TIOJXHA>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wnJAA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ws901,fury,1890835765,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-14T03:33:59Z,2024-01-14T03:33:59Z,I’m still working on reproduction steps.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ws901/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1Jsp,fury,1892981545,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-16T02:30:50Z,2024-01-16T02:30:50Z,"Hi @andyczerwonka, has this issue been addressed?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1Jsp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1frh,fury,1893071585,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-16T04:57:48Z,2024-01-16T04:57:48Z,@chaokunyang I have been able to reproduce. I now need instructions as to how to build the jar with your fix to validate the fix. Or you can attach it here if that's easier.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1frh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1hAD,fury,1893076995,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-16T05:06:19Z,2024-01-16T05:06:19Z,"@andyczerwonka You can just use 
```xml

<repositories>
  <repository>
    <id>apache</id>
    <url>https://repository.apache.org/snapshots/</url>
    <releases>
      <enabled>false</enabled>
    </releases>
    <snapshots>
      <enabled>true</enabled>
    </snapshots>
  </repository>
</repositories>
<dependency>
  <groupId>org.apache.fury</groupId>
  <artifactId>fury-core</artifactId>
  <version>0.5.0-SNAPSHOT</version>
</dependency>
<!-- row/arrow format support -->
<!-- <dependency>
  <groupId>org.apache.fury</groupId>
  <artifactId>fury-format</artifactId>
  <version>0.5.0-SNAPSHOT</version>
</dependency> -->

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1hAD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1hO0,fury,1893077940,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-16T05:07:46Z,2024-01-16T05:07:46Z,Can your reproduction code be converted into a unit test? Would be great if we can include it into fury unit test,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1hO0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1jjh,fury,1893087457,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-16T05:20:09Z,2024-01-16T05:20:09Z,"I have tested it with the `0.5.0-SNAPSHOT` version and it continues to fail.
```
Exception in thread ""fury-jit-compiler-10"" java.lang.RuntimeException: Create sequential serializer failed,
class: class io.citrine.lolo.bags.RegressionBaggerTrainingResult
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:51)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:966)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:75)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: Expected AbstractCollectionSerializer but got io.fury.serializer.Serializer
	at io.fury.util.Preconditions.checkArgument(Preconditions.java:81)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeForCollection(BaseObjectCodecBuilder.java:1210)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1162)
	at io.fury.builder.BaseObjectCodecBuilder.lambda$readContainerElement$12(BaseObjectCodecBuilder.java:1400)
	at io.fury.builder.BaseObjectCodecBuilder.readRef(BaseObjectCodecBuilder.java:1093)
	at io.fury.builder.BaseObjectCodecBuilder.readContainerElement(BaseObjectCodecBuilder.java:1397)
	at io.fury.builder.BaseObjectCodecBuilder.lambda$readContainerElements$2223955c$1(BaseObjectCodecBuilder.java:1359)
	at io.fury.codegen.Expression$ForLoop.doGenCode(Expression.java:2366)
	at io.fury.codegen.Expression.genCode(Expression.java:105)
	at io.fury.codegen.Expression$ListExpression.doGenCode(Expression.java:184)
	at io.fury.codegen.Expression.genCode(Expression.java:105)
	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:123)
	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:71)
	at io.fury.builder.BaseObjectCodecBuilder.readCollectionCodegen(BaseObjectCodecBuilder.java:1297)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeForCollection(BaseObjectCodecBuilder.java:1220)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1162)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeForNotNull(BaseObjectCodecBuilder.java:1122)
	at io.fury.builder.BaseObjectCodecBuilder.lambda$deserializeFor$7(BaseObjectCodecBuilder.java:1073)
	at io.fury.builder.BaseObjectCodecBuilder.readRef(BaseObjectCodecBuilder.java:1093)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeFor(BaseObjectCodecBuilder.java:1073)
	at io.fury.builder.BaseObjectCodecBuilder.deserializeFor(BaseObjectCodecBuilder.java:1057)
	at io.fury.builder.ObjectCodecBuilder.lambda$deserializeGroup$37fcf467$1(ObjectCodecBuilder.java:525)
	at io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:51)
	at io.fury.builder.ObjectCodecOptimizer.invokeGenerated(ObjectCodecOptimizer.java:137)
	at io.fury.builder.ObjectCodecBuilder.deserializeGroup(ObjectCodecBuilder.java:541)
	at io.fury.builder.ObjectCodecBuilder.buildDecodeExpression(ObjectCodecBuilder.java:442)
	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:208)
	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:57)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:75)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:67)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:147)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:94)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:45)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	... 7 more
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1jjh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1kG3,fury,1893089719,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-16T05:23:07Z,2024-01-16T05:23:07Z,"It's late here, so first thing tomorrow I will try to share the code that reproduces the error.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w1kG3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w5hEu,fury,1894125870,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-16T16:48:07Z,2024-01-16T16:48:07Z,"I have created an example of the failure.

https://gist.github.com/andyczerwonka/23da899e21d3f69618360024038e4be4#file-serdethreadingtest-scala-L20-L22","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w5hEu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8VE-,fury,1894863166,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T03:04:53Z,2024-01-17T03:04:53Z,"Hi @andyczerwonka , I tested with your code, Fury succeeds in serialization:
![image](https://github.com/apache/incubator-fury/assets/12445254/701664df-750d-48f6-9605-3867fd8146bf)

```scala
package org.apache.fury.serializer;
import org.apache.fury.Fury
import org.apache.fury.config.Language

import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.util.Base64
import java.util.zip.GZIPInputStream
import java.util.zip.GZIPOutputStream
import _root_.scala

import _root_.scala.util.{Success, Try}
import _root_.scala.concurrent.Future
import _root_.scala.concurrent.ExecutionContext
import java.util.concurrent.ThreadLocalRandom
import _root_.scala.concurrent.Await
import org.apache.fury.ThreadLocalFury
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

// What makes this fail is the nested collection in the case class. If you change it to
// as 1-dimensional collection, we no longer see the exception
case class SampleData(label: String, data: Seq[Seq[Int]])

class SerdeThreadingTest extends AnyWordSpec with Matchers {
  def threadLocalFury =
    new ThreadLocalFury(classLoader => {
      Fury
        .builder()
        .withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .withScalaOptimizationEnabled(true)
        .withRefTracking(true)
        .withStringCompressed(true)
        .withLongCompressed(true)
        .withIntCompressed(true)
        .withAsyncCompilation(true)
        .withClassLoader(classLoader)
        .build()
    })

  private val fury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .requireClassRegistration(false)
    .withScalaOptimizationEnabled(true)
    .withRefTracking(true)
    .withStringCompressed(true)
    .withLongCompressed(true)
    .withIntCompressed(true)
    .withAsyncCompilation(true)
    .buildThreadSafeFury()

  def encode(sampleData: SampleData) = {
    val raw = fury.serialize(sampleData)
    val bos = new ByteArrayOutputStream(raw.length)
    val zos = new GZIPOutputStream(bos)
    zos.write(raw)
    zos.flush()
    zos.close()
    bos.close()
    sleepBetween(500, 1000)
    Base64.getEncoder.encodeToString(bos.toByteArray)
  }

  def decode(encoded: String) =
    Try {
      val bis = new ByteArrayInputStream(Base64.getDecoder.decode(encoded))
      val zis = new GZIPInputStream(bis)
      val uncompressed = zis.readAllBytes()
      val result = fury.deserialize(uncompressed).asInstanceOf[SampleData]
      zis.close()
      bis.close()
      sleepBetween(500, 1000)
      result
    }

  def sleepBetween(min: Int, max: Int) = {
    val sleepTime = ThreadLocalRandom.current().nextInt(min, max)
    Thread.sleep(sleepTime.toLong)
  }
  ""fury scala object support"" should {
    ""testNonThreadedSerde"" in {
      val data = SampleData(""single sample"", Seq.empty)
      val encoded = encode(data)
      val decoded = decode(encoded)
      println(decoded)
      assert(decoded == Success(data))
    }

    ""testNestedCollectionThreadedSerde"" in {
      import scala.concurrent.duration._
      implicit val ec = ExecutionContext.global

      val tasks = for (i <- 1 to 1) yield Future {
        val data = SampleData(i.toString, Seq.empty)
        val encoded = encode(data)
        encoded
      }

      val decodedFuture = for {
        f <- Future.sequence(tasks)
      } yield for {
        encoded <- f
      } yield {
        val Success(decoded) = decode(encoded)
        decoded
      }

      val result = Await.result(decodedFuture, 20.seconds)
      println(result)
      assert(result.size == 1)
    }
  }
}


```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8VE-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8VWO,fury,1894864270,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T03:06:35Z,2024-01-17T03:06:35Z,"I guess you didn't use latest snapshot version of Fury. The package name has been changed from `io.fury` to `org.apache.fury`. And nested collection serialization in `case class SampleData(label: String, data: Seq[Seq[Int]])` do be  fixed in #1333","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8VWO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8YXx,fury,1894876657,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-17T03:25:25Z,2024-01-17T03:25:25Z,"Is the nested collection issue fixed in the latest snapshot? Also, can you change the code to run 10-20 threads?

```scala 
for (i <- 1 to 10) yield Future

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8YXx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8Zfx,fury,1894881265,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T03:31:44Z,2024-01-17T03:31:44Z,"> Is the nested collection issue fixed in the latest snapshot?

Yep, it has been fixed in latest snapshot:
![image](https://github.com/apache/incubator-fury/assets/12445254/c0ee2dd5-0bf5-4332-b35e-f6c3ae379e62)

Please note  latest snapshot is released under ASF, and the package name has been renamed to `org.apache.fury` instead of `io.fury`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8Zfx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8Z1G,fury,1894882630,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-17T03:33:44Z,2024-01-17T03:33:44Z,"> Please note latest snapshot is released under ASF, and the package name has been renamed to `org.apache.fury` instead of `io.fury`

Which is probably why it didn’t get pulled in. When can we expect a non-snapshot release?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8Z1G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8e29,fury,1894903229,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T04:05:25Z,2024-01-17T04:05:25Z,"You need to add apache snapshot repo:
```xml
<repositories>
  <repository>
    <id>apache</id>
    <url>https://repository.apache.org/snapshots/</url>
    <releases>
      <enabled>false</enabled>
    </releases>
    <snapshots>
      <enabled>true</enabled>
    </snapshots>
  </repository>
</repositories>
<dependency>
  <groupId>org.apache.fury</groupId>
  <artifactId>fury-core</artifactId>
  <version>0.5.0-SNAPSHOT</version>
</dependency>
```

The  non-snapshot release may need a month before we release it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8e29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xBUCL,fury,1896169611,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-17T16:30:15Z,2024-01-17T16:30:15Z,"@chaokunyang I have confirmed that the issue has been resolved in 0.5.0. 

Is there a work-around for this issue? Can it be back-ported to something that can be released earlier? We are in a non-working state and can't move forward.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xBUCL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xLg_H,fury,1898844103,1325,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-18T16:45:40Z,2024-01-18T16:45:40Z,Could you build a jar and use that jar? We may need some time before we release a new jar. We have some issue like license needs being addressed and release blog before we can release a new version,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xLg_H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1325,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xL9J4,fury,1898959480,1325,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-01-18T17:58:18Z,2024-01-18T17:58:18Z,Defect is addressed in the latest snapshot.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xL9J4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1327,https://api.github.com/repos/apache/fury/issues/1327,fury,2075567613,1327,Rename src to cpp,LiangliangSui,116876207,,,CLOSED,2024-01-11T02:05:27Z,2024-01-11T11:07:55Z,"Can we rename src to cpp so that it can be unified with the existing naming method (such as Java, javascript, python, etc.).","{""url"": ""https://api.github.com/repos/apache/fury/issues/1327/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1327,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa3XR,fury,1886090705,1327,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T02:16:49Z,2024-01-11T02:16:49Z,"Could you spit this into two issues? They are not related. For the first one, I agree with you. I plan to rename to cpp previously but haven't started yet. I will submit an pr later","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa3XR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1327,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa6Qg,fury,1886102560,1327,NA,LiangliangSui,116876207,,,NA,2024-01-11T02:31:10Z,2024-01-11T02:31:10Z,I can do this work and I would very much like to be involved in this project if you agree.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa6Qg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1327,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa_RP,fury,1886123087,1327,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T02:46:03Z,2024-01-11T02:46:03Z,"I just created a PR for this, but feel free to submit more PR if you like.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wa_RP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1328,https://api.github.com/repos/apache/fury/issues/1328,fury,2075592186,1328,Integrate incubator-fury-site into incubator-fury,LiangliangSui,116876207,,,CLOSED,2024-01-11T02:28:04Z,2024-01-17T07:15:05Z,"Can we embed incubator-fury-site into incubator-fury to facilitate unified maintenance, such as https://github.com/apache/incubator-opendal/tree/main/website","{""url"": ""https://api.github.com/repos/apache/fury/issues/1328/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1328,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wbCp8,fury,1886136956,1328,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-11T02:55:05Z,2024-01-11T02:55:05Z,"I prefer keeping web-site and code repo separate, this is common in projects like https://github.com/apache/pulsar-site . We may add more informations in web-site which are not related to main repo. 

For example, we may add a `Used by` section in web-site, which allow users to post their logo into our website. I prefer such information not included into the main repo.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wbCp8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1328,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w9qXm,fury,1895212518,1328,NA,LiangliangSui,116876207,,,NA,2024-01-17T07:15:02Z,2024-01-17T07:15:02Z,Sounds reasonable.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w9qXm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1330,https://api.github.com/repos/apache/fury/issues/1330,fury,2075624999,1330,[JavaScript] Specification implementation progress,bytemain,13938334,Artin,artin@cat.ms,OPEN,2024-01-11T02:54:12Z,2024-01-18T09:14:13Z,"Now we have a new java spec:
https://github.com/apache/incubator-fury/blob/main/docs/protocols/java_object_graph.md

and there have been some changes compared to the previous version.

Changes:
- Array/Map

Has not implemented:
- Schema Evolution
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1330/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1330,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wbC95,fury,1886138233,1330,NA,bytemain,13938334,Artin,artin@cat.ms,NA,2024-01-11T02:56:17Z,2024-01-11T02:56:17Z,`Enum` has been done in #1321 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wbC95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1330,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xInGN,fury,1898082701,1330,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-18T09:14:12Z,2024-01-18T09:14:12Z,`Array` has been done in  #1337 . ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xInGN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/1335,fury,2076304957,1335,[Java] Use `org.apache.fury.pool.ThreadPoolFury` as default ThreadSafeFury implementation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-01-11T10:56:38Z,2024-01-21T07:09:04Z,"## Is your feature request related to a problem? Please describe.
Currently we use `org.apache.fury.ThreadLocalFury` as the default implementation of `ThreadSafeFury`. It create a Fury instance for every thread. But threading model is not controlable by Fury, if users create threads frequently, Fury creation may become bottleneck or introduce extra latency.

## Describe the solution you'd like
Use `org.apache.fury.pool.ThreadPoolFury` as default ThreadSafeFury implementation.

We may neeed to benchmark `ThreadPoolFury` vs `ThreadLocalFury`, and optimize `ThreadPoolFury` if it's slow 

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wfvq4,fury,1887369912,1335,NA,zzzk1,36791902,Zhengke Zhou,madzhou1@gmail.com,NA,2024-01-11T15:02:54Z,2024-01-11T15:02:54Z,"I have finished replacing ThreadLocalFury with ThreadPoolFury, but there are some minor issues in the test case. I will submit a PR shortly.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wfvq4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xALiM,fury,1895872652,1335,NA,whyyylyj,98691659,,,NA,2024-01-17T14:00:47Z,2024-01-17T14:00:47Z,"Agreed, and we may consider if using weak key and soft value as default config is suitable for all users, which is not recommended practice in guava doc. maybe we could add some benchmark test under different gc pressure.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xALiM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xAaRS,fury,1895933010,1335,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T14:31:42Z,2024-01-17T14:31:42Z,"Without using soft key，Fury may hold strong ref for classloader, which make classes unable to unload. 

If class unloading is more and issue, strong reference ia more recommended.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xAaRS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xAbKq,fury,1895936682,1335,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T14:33:36Z,2024-01-17T14:33:36Z,"The gc pressure won't be a  big issue, since there won't be much Fury instances.  But if fullgc frequently, Fury may be collected and created frequently too. And that would be a performance issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xAbKq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xNBhU,fury,1899239508,1335,NA,whyyylyj,98691659,,,NA,2024-01-18T21:35:56Z,2024-01-18T21:35:56Z,"Tks for the explanation, could we provide k/v strength or class unloading post-process callback  as configurable items in ThreadSafePoolBuilder for those who know their situation best.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xNBhU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xO4Zd,fury,1899726429,1335,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-19T04:16:35Z,2024-01-19T04:16:35Z,"It's hard to trigger  class unloading post-process callback, since jvm gc is not predictable. Although we can use ReferenceQueue，it still introduce latency before the callback can be invoked.

For k/v strength, could you elaborate more details?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xO4Zd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xZiqi,fury,1902520994,1335,NA,whyyylyj,98691659,,,NA,2024-01-21T05:42:26Z,2024-01-21T05:42:26Z,"> It's hard to trigger class unloading post-process callback, since jvm gc is not predictable. Although we can use ReferenceQueue，it still introduce latency before the callback can be invoked.
> 
> For k/v strength, could you elaborate more details?

The k/v strength means the same as what guava has provided as k/v config (soft 、weak and strong as default), maybe fury could mapping those design and not expose guava for the smooth transition of implementation.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xZiqi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1335,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xZmt3,fury,1902537591,1335,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-21T07:09:03Z,2024-01-21T07:09:03Z,"Sounds good to me, I think we should do this in ThreadSafeFury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xZmt3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/1339,fury,2078383263,1339,support wasm build,ouzhou,7693866,ouzz,,CLOSED,2024-01-12T09:03:59Z,2024-01-12T11:03:19Z,any plan to support wasm build?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1339/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlBn-,fury,1888754174,1339,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-12T09:40:09Z,2024-01-12T09:40:09Z,"Hi @ouzhou , could you elaborate more what needs be done for wasm build? I'm not familiar with this field. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlBn-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlDqc,fury,1888762524,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T09:45:45Z,2024-01-12T09:45:45Z,"use wasm in web
@chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlDqc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlEhd,fury,1888766045,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T09:47:30Z,2024-01-12T09:47:30Z,emcc  or wasm-pack,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlEhd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlNZu,fury,1888802414,1339,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-12T10:10:24Z,2024-01-12T10:10:24Z,"> emcc or wasm-pack

Does your app need to interact with rust？or other languages？","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlNZu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlQOE,fury,1888813956,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T10:15:20Z,2024-01-12T10:15:20Z," i just want to call in the browser, but js only support nodejs, so build rust code or c code to wasm, run webassembly in browser","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlQOE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlRt7,fury,1888820091,1339,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-12T10:19:07Z,2024-01-12T10:19:07Z,"> i just want to call in the browser, but js only support nodejs, so build rust code or c code to wasm, run webassembly in browser
JavaScript impl supports browsers
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlRt7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlSqb,fury,1888823963,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T10:21:44Z,2024-01-12T10:21:44Z,"any idea to test performance , compare with webassembly or pure js","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlSqb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlT6Q,fury,1888829072,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T10:25:14Z,2024-01-12T10:25:14Z," no , not work



> > JavaScript impl supports browsers
![](https://github.com/apache/incubator-fury/assets/7693866/27e681c6-ca75-4a92-84af-80231625bcd7)
 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlT6Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlU5N,fury,1888833101,1339,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-12T10:27:55Z,2024-01-12T10:27:55Z,"> any idea to test performance , compare with webassembly or pure js

Interacting with the JavaScript world from WASM is very costly. Most of the time, WASM might be slower than pure JavaScript because WASM can't create JavaScript objects, except for TypedArrays.

> no , not work
> 
> > > JavaScript impl supports browsers
> > > ![](https://private-user-images.githubusercontent.com/7693866/296206637-27e681c6-ca75-4a92-84af-80231625bcd7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDUwNTU0MTYsIm5iZiI6MTcwNTA1NTExNiwicGF0aCI6Ii83NjkzODY2LzI5NjIwNjYzNy0yN2U2ODFjNi1jYTc1LTRhOTItODRhZi04MDIzMTYyNWJjZDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDExMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAxMTJUMTAyNTE2WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZTE0YjhhNTczOGFhZjAwMTA2ODJiMTUzNzVjYTVjYTVmYjdiYjM4NTcwNzNlZTk4ZWU5MDAzOWJjZGJkMTlkYyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.WnkFJiMiQ6YBQWl25f3hIGY3aGiVLx8JEXy3WkaVGDI)

Try removing HPS; it is used to interact with V8. In the browser, it is not accessible.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlU5N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlWVc,fury,1888839004,1339,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-12T10:32:05Z,2024-01-12T10:32:05Z,"> any idea to test performance , compare with webassembly or pure js

Rust impl is still in its early stages, It could be months to be ready. It has no dependencies on the system interface and can be compiled into wasm. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlWVc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlerN,fury,1888873165,1339,NA,ouzhou,7693866,ouzz,,NA,2024-01-12T10:52:08Z,2024-01-12T10:52:08Z,"done
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlerN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1339,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlia3,fury,1888888503,1339,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-12T11:02:54Z,2024-01-12T11:02:54Z,"> done

Please feel free to open a issue if you are still running into issues and we would be happy to help troubleshoot further.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wlia3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/1340,fury,2078930541,1340,"Failed to serialize Hazelcast exceptions using a Hazelcast global Fury serializer configuration, if exceptions not registered with Fury",Maurice-Betzel,16353975,Maurice Betzel,,CLOSED,2024-01-12T14:11:49Z,2024-01-17T17:42:35Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury 0.4.1

### Component(s)

Java

### Minimal reproduce step

Start a Hazelcast datagrid configured with Fury as a global serializer, here a cluster of 4 instances:
```
<hazelcast>
......
    <tcp-ip enabled=""true"">
        <member>127.0.0.1:5701</member>
        <member>127.0.0.1:5702</member>
        <member>127.0.0.1:5703</member>
        <member>127.0.0.1:5704</member>
    </tcp-ip>
......
    <serialization>
       <portable-version>0</portable-version>
        <serializers>
        <global-serializer override-java-serialization=""true"">
            org.apache.karaf.cellar.fury.HazelcastGlobalSerializer
        </global-serializer>
        </serializers>
    </serialization>
.....
</hazelcast>
```

Fury setup:

```
Fury fury = Fury.builder()
        .withLanguage(Language.JAVA)
        .withMetaContextShare(false)
        .withRefTracking(true)
        .withIntCompressed(false)
        .withLongCompressed(false)
        .withStringCompressed(false)
        .withCompatibleMode(CompatibleMode.COMPATIBLE)
        .withClassVersionCheck(false)
        .withJdkClassSerializableCheck(true)
        .withDeserializeUnexistedClass(false)
        .withAsyncCompilation(false)
        .withCodegen(true)
        .ignoreTimeRef(false)
        .ignoreStringRef(false)
        .ignoreBasicTypesRef(false)
        .registerGuavaTypes(false)
        .requireClassRegistration(false)
        .suppressClassRegistrationWarnings(true)
        .build();
```

Needed registrations to make it work without exceptions:

```
        // Basic Java
        fury.register(ReentrantLock.class, true);
        fury.register(LinkedBlockingQueue.class, true);
        // Karaf Cellar
        fury.register(Event.class, true);
        fury.register(Command.class, true);
        fury.register(HazelcastNode.class, true);
        fury.register(RemoteServiceCall.class, true);
        fury.register(EndpointDescription.class, true);
        fury.register(RemoteServiceResult.class, true);
        fury.registerSerializer(StoreNotFoundException.class, new JavaSerializer(fury, StoreNotFoundException.class));
        fury.registerSerializer(ProducerNotFoundException.class, new JavaSerializer(fury, ProducerNotFoundException.class));
        fury.registerSerializer(RemoteServiceInvocationException.class, new JavaSerializer(fury, RemoteServiceInvocationException.class));
        // Hazelcast operational responses
        fury.register(ErrorResponse.class, true);
        fury.register(NormalResponse.class, true);
        fury.register(BackupAckResponse.class, true);
        fury.register(CallTimeoutResponse.class, true);
        // Hazelcast HazelcastExceptions
        fury.registerSerializer(HazelcastException.class, new JavaSerializer(fury, HazelcastException.class));
        fury.registerSerializer(ConsistencyLostException.class, new JavaSerializer(fury, ConsistencyLostException.class));
        fury.registerSerializer(ServiceNotFoundException.class, new JavaSerializer(fury, ServiceNotFoundException.class));
        fury.registerSerializer(LocalMemberResetException.class, new JavaSerializer(fury, LocalMemberResetException.class));
        fury.registerSerializer(OperationTimeoutException.class, new JavaSerializer(fury, OperationTimeoutException.class));
        fury.registerSerializer(HazelcastOverloadException.class, new JavaSerializer(fury, HazelcastOverloadException.class));
        fury.registerSerializer(TargetDisconnectedException.class, new JavaSerializer(fury, TargetDisconnectedException.class));
        fury.registerSerializer(RuntimeInterruptedException.class, new JavaSerializer(fury, RuntimeInterruptedException.class));
        fury.registerSerializer(ResponseAlreadySentException.class, new JavaSerializer(fury, ResponseAlreadySentException.class));
        fury.registerSerializer(DuplicateInstanceNameException.class, new JavaSerializer(fury, DuplicateInstanceNameException.class));
        fury.registerSerializer(HazelcastSerializationException.class, new JavaSerializer(fury, HazelcastSerializationException.class));
        fury.registerSerializer(DistributedObjectDestroyedException.class, new JavaSerializer(fury, DistributedObjectDestroyedException.class));
        fury.registerSerializer(IndeterminateOperationStateException.class, new JavaSerializer(fury, IndeterminateOperationStateException.class));
        fury.registerSerializer(PartitionStateVersionMismatchException.class, new JavaSerializer(fury, PartitionStateVersionMismatchException.class));
        // Hazelcast core exceptions
        fury.registerSerializer(RetryableIOException.class, new JavaSerializer(fury, RetryableIOException.class));
        fury.registerSerializer(HazelcastInstanceNotActiveException.class, new JavaSerializer(fury, HazelcastInstanceNotActiveException.class));
        // Hazelcast RetryableHazelcastExceptions
        fury.registerSerializer(WrongTargetException.class, new JavaSerializer(fury, WrongTargetException.class));
        fury.registerSerializer(CallerNotMemberException.class, new JavaSerializer(fury, CallerNotMemberException.class));
        fury.registerSerializer(TargetNotMemberException.class, new JavaSerializer(fury, TargetNotMemberException.class));
        fury.registerSerializer(RetryableHazelcastException.class, new JavaSerializer(fury, RetryableHazelcastException.class));
        fury.registerSerializer(PartitionMigratingException.class, new JavaSerializer(fury, PartitionMigratingException.class));
```

### What did you expect to see?

No exceptions serializing exceptions from other frameworks.
Java exceptions are an integral part of the language and should be supported without extra configuration on the part of Fury, because it is not predicable under production circumstances what exceptions need to de (de)serialized to remote runtimes.

### What did you see instead?

```
2024-01-10T16:25:50,267 | WARN  | hz.cellar.partition-operation.thread-0 | ObjectStreamSerializer           | 109 - fury-core - 0.4.1 | class com.hazelcast.internal.partition.PartitionStateVersionMismatchException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-10T16:25:50,276 | INFO  | hz.cellar.partition-operation.thread-0 | CompileUnit                      | 109 - fury-core - 0.4.1 | Generate code for com.hazelcast.internal.partition.PartitionStateVersionMismatchExceptionFuryRefCompatibleCodec_1_538624385_503469352 took 1 ms.
2024-01-10T16:25:50,287 | INFO  | hz.cellar.partition-operation.thread-0 | JaninoUtils                      | 109 - fury-core - 0.4.1 | Compile [PartitionStateVersionMismatchExceptionFuryRefCompatibleCodec_1_538624385_503469352] take 10 ms
2024-01-10T16:25:50,291 | INFO  | hz.cellar.partition-operation.thread-0 | CompileUnit                      | 109 - fury-core - 0.4.1 | Generate code for com.hazelcast.core.HazelcastExceptionFuryRefCompatibleCodec_1_538624385_945155533 took 1 ms.
2024-01-10T16:25:50,299 | INFO  | hz.cellar.partition-operation.thread-0 | JaninoUtils                      | 109 - fury-core - 0.4.1 | Compile [HazelcastExceptionFuryRefCompatibleCodec_1_538624385_945155533] take 7 ms
2024-01-10T16:25:50,301 | INFO  | hz.cellar.partition-operation.thread-0 | CompileUnit                      | 109 - fury-core - 0.4.1 | Generate code for io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1_1409007106 took 0 ms.
2024-01-10T16:25:50,305 | ERROR | hz.cellar.partition-operation.thread-0 | HazelcastGlobalSerializer        | 125 - org.apache.karaf.cellar.fury - 4.2.1.20 | Cannot serialize object com.hazelcast.internal.partition.PartitionStateVersionMismatchException!
2024-01-10T16:25:50,305 | WARN  | hz.cellar.partition-operation.thread-0 | OperationRunnerImpl              | 107 - com.hazelcast - 3.12.13 | [127.0.0.1]:5701 [AbeelPlatformCluster] [3.12.13] While sending op error... op: com.hazelcast.internal.partition.operation.MigrationRequestOperation{serviceName='hz:core:partitionService', identityHash=52363869, partitionId=0, replicaIndex=0, callId=3853, invocationTime=1704900350264 (2024-01-10 16:25:50.264), waitTimeout=-1, callTimeout=300000, migration=MigrationInfo{uuid=9f6202c4-84e2-468b-856a-9c23ce59e054, partitionId=0, source=[127.0.0.1]:5701 - 06a614a9-b3a0-4139-b62c-a92567a65ca5, sourceCurrentReplicaIndex=0, sourceNewReplicaIndex=-1, destination=[127.0.0.1]:5704 - 98a4f2d3-ba52-4ffb-bc81-71b369b49804, destinationCurrentReplicaIndex=3, destinationNewReplicaIndex=0, master=[127.0.0.1]:5704, initialPartitionVersion=1355, partitionVersionIncrement=2, processing=false, status=ACTIVE}}, error: com.hazelcast.internal.partition.PartitionStateVersionMismatchException: Local partition state version is not equal to master's version! Local: 1288, Master: 1355
com.hazelcast.nio.serialization.HazelcastSerializationException: Failed to serialize 'com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse'
	at com.hazelcast.internal.serialization.impl.SerializationUtil.handleSerializeException(SerializationUtil.java:82) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(AbstractSerializationService.java:157) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(AbstractSerializationService.java:133) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(AbstractSerializationService.java:124) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler.send(OutboundResponseHandler.java:114) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.OutboundResponseHandler.sendResponse(OutboundResponseHandler.java:94) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.spi.Operation.sendResponse(Operation.java:456) ~[107:com.hazelcast:3.12.13]
    ...
Caused by: com.hazelcast.nio.serialization.HazelcastSerializationException: Failed to serialize 'com.hazelcast.internal.partition.PartitionStateVersionMismatchException'
	at com.hazelcast.internal.serialization.impl.SerializationUtil.handleSerializeException(SerializationUtil.java:82) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.writeObject(AbstractSerializationService.java:254) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeObject(ByteArrayObjectDataOutput.java:376) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.writeData(ErrorResponse.java:49) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(DataSerializableSerializer.java:244) ~[?:?]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(DataSerializableSerializer.java:51) ~[?:?]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.write(StreamSerializerAdapter.java:43) ~[?:?]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(AbstractSerializationService.java:154) ~[?:?]
	... 12 more
Caused by: java.io.IOException: Compile error: 
io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1_1409007106:
/* 0001 */ package io.fury.builder;
/* 0002 */ 
/* 0003 */ import java.util.List;
/* 0004 */ import java.util.Map;
/* 0005 */ import java.util.Set;
/* 0006 */ import io.fury.Fury;
/* 0007 */ import io.fury.memory.MemoryBuffer;
/* 0008 */ import io.fury.resolver.MapRefResolver;
/* 0009 */ import io.fury.resolver.ClassInfo;
/* 0010 */ import io.fury.resolver.ClassInfoHolder;
/* 0011 */ import io.fury.resolver.ClassResolver;
/* 0012 */ import io.fury.builder.Generated;
/* 0013 */ import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0014 */ import io.fury.serializer.Serializers.EnumSerializer;
/* 0015 */ import io.fury.serializer.Serializer;
/* 0016 */ import io.fury.serializer.StringSerializer;
/* 0017 */ import io.fury.serializer.ObjectSerializer;
/* 0018 */ import io.fury.serializer.CompatibleSerializer;
/* 0019 */ import io.fury.serializer.collection.AbstractCollectionSerializer;
/* 0020 */ import io.fury.serializer.collection.AbstractMapSerializer;
/* 0021 */ import io.fury.builder.Generated.GeneratedCompatibleSerializer;
/* 0022 */ 
/* 0023 */ public final class RuntimeExceptionFuryRefCompatibleCodec_1_1409007106 extends GeneratedCompatibleSerializer {
/* 0024 */ 
/* 0025 */   private final MapRefResolver refResolver;
/* 0026 */   private final ClassResolver classResolver;
/* 0027 */   private final StringSerializer strSerializer;
/* 0028 */   private final io.fury.resolver.FieldResolver fieldResolver;
/* 0029 */   private Fury fury;
/* 0030 */ 
/* 0031 */   public RuntimeExceptionFuryRefCompatibleCodec_1_1409007106(Fury fury, Class classType) {
/* 0032 */       super(fury, classType);
/* 0033 */       this.fury = fury;
/* 0034 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0035 */   
/* 0036 */       io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0037 */       refResolver = ((MapRefResolver)refResolver0);
/* 0038 */       classResolver = fury.getClassResolver();
/* 0039 */       strSerializer = fury.getStringSerializer();
/* 0040 */       fieldResolver = classResolver.getFieldResolver(java.lang.RuntimeException.class);
/* 0041 */   }
/* 0042 */ 
/* 0043 */   public RuntimeException readAndSetFields(MemoryBuffer memoryBuffer, Object object) {
/* 0044 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0045 */       long partFieldInfo = memoryBuffer.readInt();
/* 0046 */       RuntimeException bean = (RuntimeException)object;
/* 0047 */       while (((partFieldInfo & 3L) == ((byte)1))) {
/* 0048 */         if ((fieldResolver.skipDataBy4(memoryBuffer, ((int)partFieldInfo)) == 9223372036854775806L)) {
/* 0049 */             return bean;
/* 0050 */         }
/* 0051 */         partFieldInfo = memoryBuffer.readInt();
/* 0052 */       }
/* 0053 */       long value = memoryBuffer.readInt();
/* 0054 */       partFieldInfo = ((value << 32) | (partFieldInfo & 4294967295L));
/* 0055 */       while (((partFieldInfo & 7L) == ((byte)3))) {
/* 0056 */         if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
/* 0057 */             return bean;
/* 0058 */         }
/* 0059 */         partFieldInfo = memoryBuffer.readLong();
/* 0060 */       }
/* 0061 */       while (((partFieldInfo & 7L) == ((byte)7))) {
/* 0062 */         if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
/* 0063 */             return bean;
/* 0064 */         }
/* 0065 */         partFieldInfo = memoryBuffer.readLong();
/* 0066 */       }
/* 0067 */       fieldResolver.skipEndFields(memoryBuffer, partFieldInfo);
/* 0068 */       return bean;
/* 0069 */   }
/* 0070 */ 
/* 0071 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0072 */       RuntimeException runtimeException1 = (RuntimeException)obj;
/* 0073 */       buffer.writeLong(9223372036854775806L);
/* 0074 */   }
/* 0075 */ 
/* 0076 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0077 */       RuntimeException runtimeException2 = new RuntimeException();
/* 0078 */       refResolver.reference(runtimeException2);
/* 0079 */       Object bean0 = (Object)runtimeException2;
/* 0080 */       RuntimeException runtimeException3 = this.readAndSetFields(buffer, bean0);
/* 0081 */       return runtimeException2;
/* 0082 */   }
/* 0083 */ 
/* 0084 */ }
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.write(HazelcastGlobalSerializer.java:191) ~[125:org.apache.karaf.cellar.fury:4.2.1.20]
```

### Anything Else?

Behaviour seems similar to : https://github.com/apache/incubator-fury/issues/878

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1340/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5womkW,fury,1889691926,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-12T17:29:08Z,2024-01-12T17:29:08Z,"On the sending node I am seeing 2374 bytes written:

```
2024-01-12T18:14:30,798 | WARN  | hz.cellar.partition-operation.thread-13 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:30,810 | INFO  | hz.cellar.partition-operation.thread-13 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.PartitionMigratingExceptionFuryRefCompatibleCodec_1_71516211_2133323345 took 1 ms.
2024-01-12T18:14:30,829 | INFO  | hz.cellar.partition-operation.thread-13 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [PartitionMigratingExceptionFuryRefCompatibleCodec_1_71516211_2133323345] take 19 ms
2024-01-12T18:14:30,833 | INFO  | hz.cellar.partition-operation.thread-13 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.RetryableHazelcastExceptionFuryRefCompatibleCodec_1_71516211_2021899745 took 1 ms.
2024-01-12T18:14:30,841 | WARN  | hz.cellar.partition-operation.thread-18 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:30,846 | INFO  | hz.cellar.partition-operation.thread-13 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [RetryableHazelcastExceptionFuryRefCompatibleCodec_1_71516211_2021899745] take 12 ms
2024-01-12T18:14:30,851 | INFO  | hz.cellar.partition-operation.thread-13 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for com.hazelcast.core.HazelcastExceptionFuryRefCompatibleCodec_1_71516211_1822923426 took 1 ms.
2024-01-12T18:14:30,861 | INFO  | hz.cellar.partition-operation.thread-13 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [HazelcastExceptionFuryRefCompatibleCodec_1_71516211_1822923426] take 9 ms
2024-01-12T18:14:30,867 | INFO  | hz.cellar.partition-operation.thread-18 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1_2091720802 took 1 ms.
2024-01-12T18:14:30,888 | INFO  | hz.cellar.partition-operation.thread-18 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [RuntimeExceptionFuryRefCompatibleCodec_1_2091720802] take 19 ms
2024-01-12T18:14:30,895 | INFO  | hz.cellar.partition-operation.thread-18 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for io.fury.builder.ExceptionFuryRefCompatibleCodec_1_2025480557 took 1 ms.
2024-01-12T18:14:30,918 | INFO  | hz.cellar.partition-operation.thread-18 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [ExceptionFuryRefCompatibleCodec_1_2025480557] take 22 ms
2024-01-12T18:14:30,933 | INFO  | hz.cellar.partition-operation.thread-18 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for io.fury.builder.ThrowableFuryRefCompatibleCodec_1_1174361318 took 9 ms.
2024-01-12T18:14:30,973 | INFO  | hz.cellar.partition-operation.thread-18 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [ThrowableFuryRefCompatibleCodec_1_1174361318] take 39 ms
2024-01-12T18:14:30,987 | INFO  | hz.cellar.partition-operation.thread-18 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for io.fury.builder.StackTraceElementFuryRefCompatibleCodec_1_791452441 took 7 ms.
2024-01-12T18:14:31,017 | INFO  | hz.cellar.partition-operation.thread-18 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [StackTraceElementFuryRefCompatibleCodec_1_791452441] take 29 ms
2024-01-12T18:14:31,023 | DEBUG | hz.cellar.partition-operation.thread-18 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.PartitionMigratingException having buffer length 2374
2024-01-12T18:14:31,023 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.PartitionMigratingException having buffer length 2374
2024-01-12T18:14:31,024 | WARN  | hz.cellar.partition-operation.thread-13 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,028 | INFO  | hz.cellar.partition-operation.thread-13 | CompileUnit                      | 383 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.WrongTargetExceptionFuryRefCompatibleCodec_1_71516211_1155981533 took 1 ms.
2024-01-12T18:14:31,037 | INFO  | hz.cellar.partition-operation.thread-13 | JaninoUtils                      | 383 - fury-core - 0.4.1 | Compile [WrongTargetExceptionFuryRefCompatibleCodec_1_71516211_1155981533] take 8 ms
2024-01-12T18:14:31,042 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.WrongTargetException having buffer length 1732
2024-01-12T18:14:31,043 | WARN  | hz.cellar.partition-operation.thread-13 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,048 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.WrongTargetException having buffer length 1732
2024-01-12T18:14:31,050 | WARN  | hz.cellar.partition-operation.thread-13 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,055 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.WrongTargetException having buffer length 1732
2024-01-12T18:14:31,057 | WARN  | hz.cellar.partition-operation.thread-13 | ObjectStreamSerializer           | 383 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,060 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 393 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.WrongTargetException having buffer length 1732
2024-01-12T18:14:32,222 | INFO  | hz.cellar.migration | MigrationThread                  | 382 - com.hazelcast - 3.12.13 | [127.0.0.1]:5701 [AbeelPlatformCluster] [3.12.13] All migration tasks have been completed. (lastRepartitionTime=Fri Jan 12 18:14:29 CET 2024, completedMigrations=271, totalCompletedMigrations=813, elapsedMigrationTime=1208ms, totalElapsedMigrationTime=2847ms)
```
And on the receiver node of these bytes I am seeing 2372 bytes read?

```
2024-01-12T18:14:30,338 | WARN  | hz.cellar.response-1 | ObjectStreamSerializer           | 498 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:30,348 | INFO  | hz.cellar.response-1 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.PartitionMigratingExceptionFuryRefCompatibleCodec_1_1330087431_230590445 took 1 ms.
2024-01-12T18:14:30,360 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [PartitionMigratingExceptionFuryRefCompatibleCodec_1_1330087431_230590445] take 11 ms
2024-01-12T18:14:30,364 | INFO  | hz.cellar.response-1 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.RetryableHazelcastExceptionFuryRefCompatibleCodec_1_1330087431_369648417 took 1 ms.
2024-01-12T18:14:30,374 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [RetryableHazelcastExceptionFuryRefCompatibleCodec_1_1330087431_369648417] take 9 ms
2024-01-12T18:14:30,377 | INFO  | hz.cellar.response-1 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for com.hazelcast.core.HazelcastExceptionFuryRefCompatibleCodec_1_1330087431_264605371 took 1 ms.
2024-01-12T18:14:30,383 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [HazelcastExceptionFuryRefCompatibleCodec_1_1330087431_264605371] take 5 ms
2024-01-12T18:14:30,384 | ERROR | hz.cellar.response-1 | HazelcastGlobalSerializer        | 508 - org.apache.karaf.cellar.fury - 4.2.1.20 | Cannot deserialize object with buffer length 2372!
2024-01-12T18:14:30,385 | ERROR | hz.cellar.response-1 | InboundResponseHandler           | 497 - com.hazelcast - 3.12.13 | [127.0.0.1]:5702 [AbeelPlatformCluster] [3.12.13] While processing response...
com.hazelcast.nio.serialization.HazelcastSerializationException: java.io.IOException
	at com.hazelcast.internal.serialization.impl.SerializationUtil.handleException(SerializationUtil.java:70) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:275) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100) [497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285) [497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272) [497:com.hazelcast:3.12.13]
Caused by: java.io.IOException
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:242) ~[?:?]
	at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49) ~[?:?]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269) ~[?:?]
	... 10 more
2024-01-12T18:14:30,762 | DEBUG | hz.cellar.generic-operation.thread-8 | HazelcastGlobalSerializer        | 508 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing java.util.HashMap having buffer length 4
2024-01-12T18:14:31,062 | WARN  | hz.cellar.async.thread-18 | ObjectStreamSerializer           | 498 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,072 | INFO  | hz.cellar.async.thread-18 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.WrongTargetExceptionFuryRefCompatibleCodec_1_1330087431_151958156 took 1 ms.
2024-01-12T18:14:31,083 | INFO  | hz.cellar.async.thread-18 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [WrongTargetExceptionFuryRefCompatibleCodec_1_1330087431_151958156] take 10 ms
2024-01-12T18:14:31,089 | INFO  | hz.cellar.async.thread-18 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1_1664276929 took 1 ms.
2024-01-12T18:14:31,102 | INFO  | hz.cellar.async.thread-18 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [RuntimeExceptionFuryRefCompatibleCodec_1_1664276929] take 11 ms
2024-01-12T18:14:31,105 | INFO  | hz.cellar.async.thread-18 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for io.fury.builder.ExceptionFuryRefCompatibleCodec_1_1470331023 took 1 ms.
2024-01-12T18:14:31,113 | INFO  | hz.cellar.async.thread-18 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [ExceptionFuryRefCompatibleCodec_1_1470331023] take 7 ms
2024-01-12T18:14:31,127 | INFO  | hz.cellar.async.thread-18 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for io.fury.builder.ThrowableFuryRefCompatibleCodec_1_1174361318 took 11 ms.
2024-01-12T18:14:31,163 | INFO  | hz.cellar.async.thread-18 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [ThrowableFuryRefCompatibleCodec_1_1174361318] take 35 ms
2024-01-12T18:14:31,177 | INFO  | hz.cellar.async.thread-18 | CompileUnit                      | 498 - fury-core - 0.4.1 | Generate code for io.fury.builder.StackTraceElementFuryRefCompatibleCodec_1_791452441 took 9 ms.
2024-01-12T18:14:31,204 | INFO  | hz.cellar.async.thread-18 | JaninoUtils                      | 498 - fury-core - 0.4.1 | Compile [StackTraceElementFuryRefCompatibleCodec_1_791452441] take 25 ms
2024-01-12T18:14:31,215 | DEBUG | hz.cellar.async.thread-18 | HazelcastGlobalSerializer        | 508 - org.apache.karaf.cellar.fury - 4.2.1.20 | Deserializing com.hazelcast.spi.exception.WrongTargetException
2024-01-12T18:14:31,215 | WARN  | hz.cellar.async.thread-18 | ObjectStreamSerializer           | 498 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,219 | DEBUG | hz.cellar.async.thread-18 | HazelcastGlobalSerializer        | 508 - org.apache.karaf.cellar.fury - 4.2.1.20 | Deserializing com.hazelcast.spi.exception.WrongTargetException
2024-01-12T18:14:31,219 | WARN  | hz.cellar.async.thread-18 | ObjectStreamSerializer           | 498 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.WrongTargetException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T18:14:31,223 | DEBUG | hz.cellar.async.thread-18 | HazelcastGlobalSerializer        | 508 - org.apache.karaf.cellar.fury - 4.2.1.20 | Deserializing com.hazelcast.spi.exception.WrongTargetException
2024-01-12T18:15:26,081 | INFO  | hz.cellar.InvocationMonitorThread | InvocationMonitor                | 497 - com.hazelcast - 3.12.13 | [127.0.0.1]:5702 [AbeelPlatformCluster] [3.12.13] Invocations:2 timeouts:1 backup-timeouts:0
2024-01-12T18:15:26,084 | WARN  | pool-15-thread-1 | QueueConsumer                    | 509 - org.apache.karaf.cellar.hazelcast - 4.2.1 | CELLAR HAZELCAST: consumer task failed to poll the queue
com.hazelcast.core.OperationTimeoutException: PollOperation invocation failed to complete due to operation-heartbeat-timeout. Current time: 2024-01-12 18:15:26.081. Start time: 2024-01-12 18:14:22.448. Total elapsed time: 63633 ms. Last operation heartbeat: 2024-01-12 18:14:25.667. Last operation heartbeat from member: 2024-01-12 18:15:25.675. Invocation{op=com.hazelcast.collection.impl.queue.operations.PollOperation{serviceName='hz:impl:queueService', identityHash=1602471118, partitionId=14, replicaIndex=0, callId=-617, invocationTime=1705079662447 (2024-01-12 18:14:22.447), waitTimeout=10000, callTimeout=10000, name=org.apache.karaf.cellar.event.queue.org.apache.karaf.cellar.dosgi/eu.abeel.platform.facade.oracle.plda.api.spi.StreamPldaPersistenceService/name=stream-plda-persistence/4.3.3}, tryCount=250, tryPauseMillis=500, invokeCount=1, callTimeoutMillis=10000, firstInvocationTimeMs=1705079662448, firstInvocationTime='2024-01-12 18:14:22.448', lastHeartbeatMillis=1705079665667, lastHeartbeatTime='2024-01-12 18:14:25.667', target=[127.0.0.1]:5703, pendingResponse={VOID}, backupsAcksExpected=0, backupsAcksReceived=0, connection=Connection[id=2, /127.0.0.1:5702->/127.0.0.1:52546, qualifier=null, endpoint=[127.0.0.1]:5703, alive=true, type=MEMBER]}
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.newOperationTimeoutException(InvocationFuture.java:163) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolve(InvocationFuture.java:106) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InvocationFuture.resolveAndThrowIfException(InvocationFuture.java:79) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.AbstractInvocationFuture.get(AbstractInvocationFuture.java:163) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.collection.impl.queue.QueueProxySupport.invokeAndGet(QueueProxySupport.java:177) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.collection.impl.queue.QueueProxySupport.pollInternal(QueueProxySupport.java:128) ~[497:com.hazelcast:3.12.13]
	at com.hazelcast.collection.impl.queue.QueueProxyImpl.poll(QueueProxyImpl.java:91) ~[497:com.hazelcast:3.12.13]
	at org.apache.karaf.cellar.hazelcast.QueueConsumer.run(QueueConsumer.java:93) [509:org.apache.karaf.cellar.hazelcast:4.2.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:?]
	at java.lang.Thread.run(Thread.java:750) [?:?]
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5womkW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5woy0t,fury,1889742125,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-12T18:08:45Z,2024-01-12T18:08:45Z,"Definitly looks like the dynamic generated code on each node is not compatible. If I register with JavaSerializer it works fine, but uses Javas default ObjectOutput?

```
2024-01-12T19:01:44,371 | ERROR | hz.cellar.response-1 | HazelcastGlobalSerializer        | 611 - org.apache.karaf.cellar.fury - 4.2.1.20 | Deserializing having buffer length 2374!
2024-01-12T19:01:44,371 | ERROR | hz.cellar.response-0 | HazelcastGlobalSerializer        | 611 - org.apache.karaf.cellar.fury - 4.2.1.20 | Deserializing having buffer length 2374!
2024-01-12T19:01:44,372 | WARN  | hz.cellar.response-1 | ObjectStreamSerializer           | 601 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T19:01:44,372 | WARN  | hz.cellar.response-0 | ObjectStreamSerializer           | 601 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-12T19:01:44,375 | ERROR | hz.cellar.response-0 | HazelcastGlobalSerializer        | 611 - org.apache.karaf.cellar.fury - 4.2.1.20 | Cannot deserialize object with buffer length 2374!
```

```
2024-01-12T19:01:44,370 | DEBUG | hz.cellar.partition-operation.thread-13 | HazelcastGlobalSerializer        | 410 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.PartitionMigratingException having buffer length 2374
2024-01-12T19:01:44,370 | DEBUG | hz.cellar.partition-operation.thread-18 | HazelcastGlobalSerializer        | 410 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.PartitionMigratingException having buffer length 2374
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5woy0t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrOw8,fury,1890380860,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T08:32:57Z,2024-01-13T08:32:57Z,"Hi @Maurice-Betzel , I can serialize Exception succeed:
![image](https://github.com/apache/incubator-fury/assets/12445254/3ecff62e-dd47-4730-9407-9ee60401362d)

Could you paste more stack trace about RuntimeExceptionFuryRefCompatibleCodec_1_1409007106  here?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrOw8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrPBu,fury,1890381934,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T08:37:09Z,2024-01-13T08:37:09Z,"> On the sending node I am seeing 2374 bytes written:

Is there a minimal reproduction code I can try locally? Could you check whether your receiver peer get exactly same buffer as writer peer for deserialization?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrPBu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrYRk,fury,1890419812,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T11:08:32Z,2024-01-13T11:08:32Z,"Minimal reproduction is start a Apache Karaf container, install Karaf Cellar and a global serializer with Fury and apply above Hazelcast config. This is what I have in the log, have to activate stacktraces:

```
Caused by: java.io.IOException: Compile error: 
io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1_1409007106:
/* 0001 */ package io.fury.builder;
/* 0002 */ 
/* 0003 */ import java.util.List;
/* 0004 */ import java.util.Map;
/* 0005 */ import java.util.Set;
/* 0006 */ import io.fury.Fury;
/* 0007 */ import io.fury.memory.MemoryBuffer;
/* 0008 */ import io.fury.resolver.MapRefResolver;
/* 0009 */ import io.fury.resolver.ClassInfo;
/* 0010 */ import io.fury.resolver.ClassInfoHolder;
/* 0011 */ import io.fury.resolver.ClassResolver;
/* 0012 */ import io.fury.builder.Generated;
/* 0013 */ import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0014 */ import io.fury.serializer.Serializers.EnumSerializer;
/* 0015 */ import io.fury.serializer.Serializer;
/* 0016 */ import io.fury.serializer.StringSerializer;
/* 0017 */ import io.fury.serializer.ObjectSerializer;
/* 0018 */ import io.fury.serializer.CompatibleSerializer;
/* 0019 */ import io.fury.serializer.collection.AbstractCollectionSerializer;
/* 0020 */ import io.fury.serializer.collection.AbstractMapSerializer;
/* 0021 */ import io.fury.builder.Generated.GeneratedCompatibleSerializer;
/* 0022 */ 
/* 0023 */ public final class RuntimeExceptionFuryRefCompatibleCodec_1_1409007106 extends GeneratedCompatibleSerializer {
/* 0024 */ 
/* 0025 */   private final MapRefResolver refResolver;
/* 0026 */   private final ClassResolver classResolver;
/* 0027 */   private final StringSerializer strSerializer;
/* 0028 */   private final io.fury.resolver.FieldResolver fieldResolver;
/* 0029 */   private Fury fury;
/* 0030 */ 
/* 0031 */   public RuntimeExceptionFuryRefCompatibleCodec_1_1409007106(Fury fury, Class classType) {
/* 0032 */       super(fury, classType);
/* 0033 */       this.fury = fury;
/* 0034 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0035 */   
/* 0036 */       io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0037 */       refResolver = ((MapRefResolver)refResolver0);
/* 0038 */       classResolver = fury.getClassResolver();
/* 0039 */       strSerializer = fury.getStringSerializer();
/* 0040 */       fieldResolver = classResolver.getFieldResolver(java.lang.RuntimeException.class);
/* 0041 */   }
/* 0042 */ 
/* 0043 */   public RuntimeException readAndSetFields(MemoryBuffer memoryBuffer, Object object) {
/* 0044 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0045 */       long partFieldInfo = memoryBuffer.readInt();
/* 0046 */       RuntimeException bean = (RuntimeException)object;
/* 0047 */       while (((partFieldInfo & 3L) == ((byte)1))) {
/* 0048 */         if ((fieldResolver.skipDataBy4(memoryBuffer, ((int)partFieldInfo)) == 9223372036854775806L)) {
/* 0049 */             return bean;
/* 0050 */         }
/* 0051 */         partFieldInfo = memoryBuffer.readInt();
/* 0052 */       }
/* 0053 */       long value = memoryBuffer.readInt();
/* 0054 */       partFieldInfo = ((value << 32) | (partFieldInfo & 4294967295L));
/* 0055 */       while (((partFieldInfo & 7L) == ((byte)3))) {
/* 0056 */         if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
/* 0057 */             return bean;
/* 0058 */         }
/* 0059 */         partFieldInfo = memoryBuffer.readLong();
/* 0060 */       }
/* 0061 */       while (((partFieldInfo & 7L) == ((byte)7))) {
/* 0062 */         if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
/* 0063 */             return bean;
/* 0064 */         }
/* 0065 */         partFieldInfo = memoryBuffer.readLong();
/* 0066 */       }
/* 0067 */       fieldResolver.skipEndFields(memoryBuffer, partFieldInfo);
/* 0068 */       return bean;
/* 0069 */   }
/* 0070 */ 
/* 0071 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0072 */       RuntimeException runtimeException1 = (RuntimeException)obj;
/* 0073 */       buffer.writeLong(9223372036854775806L);
/* 0074 */   }
/* 0075 */ 
/* 0076 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0077 */       RuntimeException runtimeException2 = new RuntimeException();
/* 0078 */       refResolver.reference(runtimeException2);
/* 0079 */       Object bean0 = (Object)runtimeException2;
/* 0080 */       RuntimeException runtimeException3 = this.readAndSetFields(buffer, bean0);
/* 0081 */       return runtimeException2;
/* 0082 */   }
/* 0083 */ 
/* 0084 */ }
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.write(HazelcastGlobalSerializer.java:191) ~[125:org.apache.karaf.cellar.fury:4.2.1.20]
	at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.write(ByteArraySerializerAdapter.java:39) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.writeObject(AbstractSerializationService.java:252) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataOutput.writeObject(ByteArrayObjectDataOutput.java:376) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.writeData(ErrorResponse.java:49) ~[107:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(DataSerializableSerializer.java:244) ~[?:?]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.write(DataSerializableSerializer.java:51) ~[?:?]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.write(StreamSerializerAdapter.java:43) ~[?:?]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toBytes(AbstractSerializationService.java:154) ~[?:?]
	... 12 more
```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrYRk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wraKq,fury,1890427562,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T11:43:53Z,2024-01-13T11:43:53Z,"Comparing buffer contents results in equal contents but still de-serialize error:

```
Node 1:

2024-01-13T12:34:00,123 | WARN  | hz.cellar.partition-operation.thread-14 | ObjectStreamSerializer           | 417 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-13T12:34:00,133 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.PartitionMigratingExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,136 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class com/hazelcast/spi/exception/PartitionMigratingExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\com\hazelcast\spi\exception\PartitionMigratingExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,150 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [PartitionMigratingExceptionFuryRefCompatibleCodec_1] take 11 ms
2024-01-13T12:34:00,155 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.RetryableHazelcastExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,156 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class com/hazelcast/spi/exception/RetryableHazelcastExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\com\hazelcast\spi\exception\RetryableHazelcastExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,169 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [RetryableHazelcastExceptionFuryRefCompatibleCodec_1] take 11 ms
2024-01-13T12:34:00,175 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for com.hazelcast.core.HazelcastExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,176 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class com/hazelcast/core/HazelcastExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\com\hazelcast\core\HazelcastExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,188 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [HazelcastExceptionFuryRefCompatibleCodec_1] take 10 ms
2024-01-13T12:34:00,193 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for io.fury.builder.RuntimeExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,195 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class io/fury/builder/RuntimeExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\io\fury\builder\RuntimeExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,218 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [RuntimeExceptionFuryRefCompatibleCodec_1] take 20 ms
2024-01-13T12:34:00,224 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for io.fury.builder.ExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,224 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class io/fury/builder/ExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\io\fury\builder\ExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,243 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [ExceptionFuryRefCompatibleCodec_1] take 16 ms
2024-01-13T12:34:00,259 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for io.fury.builder.ThrowableFuryRefCompatibleCodec_1 took 10 ms.
2024-01-13T12:34:00,260 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class io/fury/builder/ThrowableFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\io\fury\builder\ThrowableFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,318 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [ThrowableFuryRefCompatibleCodec_1] take 54 ms
2024-01-13T12:34:00,333 | INFO  | hz.cellar.partition-operation.thread-14 | CompileUnit                      | 417 - fury-core - 0.4.1 | Generate code for io.fury.builder.StackTraceElementFuryRefCompatibleCodec_1 took 8 ms.
2024-01-13T12:34:00,335 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Write generate class io/fury/builder/StackTraceElementFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-mariadb\data\janino\io\fury\builder\StackTraceElementFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,374 | INFO  | hz.cellar.partition-operation.thread-14 | JaninoUtils                      | 417 - fury-core - 0.4.1 | Compile [StackTraceElementFuryRefCompatibleCodec_1] take 37 ms
2024-01-13T12:34:00,379 | DEBUG | hz.cellar.partition-operation.thread-14 | HazelcastGlobalSerializer        | 427 - org.apache.karaf.cellar.fury - 4.2.1.20 | Serializing com.hazelcast.spi.exception.PartitionMigratingException having buffer length 2372 and contents [2, 0, -32, 2, 6, 0, 1, 0, 51, 77, -80, 107, -25, -24, 24, -99, 9, 0, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 120, -76, 26, 118, 76, -103, 50, 36, 9, 0, 84, 104, 114, 111, 119, 97, 98, 108, 101, -73, 100, 28, 12, 0, -107, -86, 118, 0, -50, 2, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 105, 0, 115, 0, 32, 0, 109, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 110, 0, 103, 0, 33, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 58, 0, 32, 0, 91, 0, 49, 0, 50, 0, 55, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 49, 0, 93, 0, 58, 0, 53, 0, 55, 0, 48, 0, 49, 0, 44, 0, 32, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 73, 0, 100, 0, 58, 0, 32, 0, 49, 0, 52, 0, 44, 0, 32, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 58, 0, 32, 0, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 99, 0, 111, 0, 108, 0, 108, 0, 101, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 46, 0, 80, 0, 111, 0, 108, 0, 108, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 44, 0, 32, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 58, 0, 32, 0, 104, 0, 122, 0, 58, 0, 105, 0, 109, 0, 112, 0, 108, 0, 58, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 83, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, -60, 32, -10, -11, 8, 48, -28, 81, 0, 0, -44, 1, 0, 66, 0, -48, 66, -116, 87, 19, -3, -77, 95, 0, 0, 1, 0, -83, 86, -11, 13, 28, -83, 101, -1, 11, 0, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 62, -46, 63, 65, 3, 52, 13, -21, 18, 0, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 10, 0, 0, 0, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 24, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 102, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 36, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 101, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -99, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 126, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 38, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -97, 1, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 74, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 62, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, 101, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -118, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 46, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 6, 114, 0, 117, 0, 110, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 28, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -86, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 54, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 8, 99, 0, 97, 0, 108, 0, 108, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -46, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -128, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 22, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 24, 79, 52, 72, 47, -101, 50, 26, -88, -57, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 25, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 40, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -109, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 122, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 101, 0, 120, 0, 101, 0, 99, 0, 117, 0, 116, 0, 111, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 14, 112, 0, 114, 0, 111, 0, 99, 0, 101, 0, 115, 0, 115, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 125, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 30, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, -120, 114, -119, 33, -22, 90, -12, 121, -2, 0, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 0, -6, 71, 94, -123, 15, -117, 103, 114, 9, 0, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 0, 91, -88, -84, -91, -42, -98, 3, 27, 16, 0, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 0, 1, 22, 127, -123, -96, -6, 31, 100, 18, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 99, 111, 114, 101, 0, 56, -15, -77, 92, -18, 56, -102, 119, 18, 0, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 0, 16, 110, -108, 37, -45, 46, -69, 57, 27, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 115, 112, 105, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 74, 99, 91, 66, -66, -37, -120, -63, 27, 0, 82, 101, 116, 114, 121, 97, 98, 108, 101, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 8, 0, 0, 105, 115, -122, -18, 76, -102, 123, 26, 27, 0, 80, 97, 114, 116, 105, 116, 105, 111, 110, 77, 105, 103, 114, 97, 116, 105, 110, 103, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127]

Node 2:

2024-01-13T12:33:59,920 | INFO  | hz.cellar.migration | MigrationManager                 | 529 - com.hazelcast - 3.12.13 | [127.0.0.1]:5702 [AbeelPlatformCluster] [3.12.13] Re-partitioning cluster data... Migration queue size: 271
2024-01-13T12:34:00,382 | WARN  | hz.cellar.response-1 | ObjectStreamSerializer           | 530 - fury-core - 0.4.1 | class com.hazelcast.spi.exception.PartitionMigratingException customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
2024-01-13T12:34:00,392 | INFO  | hz.cellar.response-1 | CompileUnit                      | 530 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.PartitionMigratingExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,395 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Write generate class com/hazelcast/spi/exception/PartitionMigratingExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-oracle\data\janino\com\hazelcast\spi\exception\PartitionMigratingExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,408 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Compile [PartitionMigratingExceptionFuryRefCompatibleCodec_1] take 10 ms
2024-01-13T12:34:00,411 | INFO  | hz.cellar.response-1 | CompileUnit                      | 530 - fury-core - 0.4.1 | Generate code for com.hazelcast.spi.exception.RetryableHazelcastExceptionFuryRefCompatibleCodec_1 took 1 ms.
2024-01-13T12:34:00,412 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Write generate class com/hazelcast/spi/exception/RetryableHazelcastExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-oracle\data\janino\com\hazelcast\spi\exception\RetryableHazelcastExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,422 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Compile [RetryableHazelcastExceptionFuryRefCompatibleCodec_1] take 8 ms
2024-01-13T12:34:00,425 | INFO  | hz.cellar.response-1 | CompileUnit                      | 530 - fury-core - 0.4.1 | Generate code for com.hazelcast.core.HazelcastExceptionFuryRefCompatibleCodec_1 took 0 ms.
2024-01-13T12:34:00,425 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Write generate class com/hazelcast/core/HazelcastExceptionFuryRefCompatibleCodec_1.java to file C:\Java\platform\runtime-oracle\data\janino\com\hazelcast\core\HazelcastExceptionFuryRefCompatibleCodec_1.java
2024-01-13T12:34:00,434 | INFO  | hz.cellar.response-1 | JaninoUtils                      | 530 - fury-core - 0.4.1 | Compile [HazelcastExceptionFuryRefCompatibleCodec_1] take 7 ms
2024-01-13T12:34:00,436 | ERROR | hz.cellar.response-1 | HazelcastGlobalSerializer        | 540 - org.apache.karaf.cellar.fury - 4.2.1.20 | Cannot deserialize object with buffer length 2372 and contents [2, 0, -32, 2, 6, 0, 1, 0, 51, 77, -80, 107, -25, -24, 24, -99, 9, 0, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 120, -76, 26, 118, 76, -103, 50, 36, 9, 0, 84, 104, 114, 111, 119, 97, 98, 108, 101, -73, 100, 28, 12, 0, -107, -86, 118, 0, -50, 2, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 105, 0, 115, 0, 32, 0, 109, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 110, 0, 103, 0, 33, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 58, 0, 32, 0, 91, 0, 49, 0, 50, 0, 55, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 49, 0, 93, 0, 58, 0, 53, 0, 55, 0, 48, 0, 49, 0, 44, 0, 32, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 73, 0, 100, 0, 58, 0, 32, 0, 49, 0, 52, 0, 44, 0, 32, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 58, 0, 32, 0, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 99, 0, 111, 0, 108, 0, 108, 0, 101, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 46, 0, 80, 0, 111, 0, 108, 0, 108, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 44, 0, 32, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 58, 0, 32, 0, 104, 0, 122, 0, 58, 0, 105, 0, 109, 0, 112, 0, 108, 0, 58, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 83, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, -60, 32, -10, -11, 8, 48, -28, 81, 0, 0, -44, 1, 0, 66, 0, -48, 66, -116, 87, 19, -3, -77, 95, 0, 0, 1, 0, -83, 86, -11, 13, 28, -83, 101, -1, 11, 0, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 62, -46, 63, 65, 3, 52, 13, -21, 18, 0, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 10, 0, 0, 0, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 24, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 102, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 36, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 101, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -99, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 126, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 38, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -97, 1, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 74, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 62, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, 101, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -118, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 46, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 6, 114, 0, 117, 0, 110, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 28, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -86, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 54, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 8, 99, 0, 97, 0, 108, 0, 108, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -46, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -128, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 22, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 24, 79, 52, 72, 47, -101, 50, 26, -88, -57, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 25, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 40, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -109, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 122, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 101, 0, 120, 0, 101, 0, 99, 0, 117, 0, 116, 0, 111, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 14, 112, 0, 114, 0, 111, 0, 99, 0, 101, 0, 115, 0, 115, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 125, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 30, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, -120, 114, -119, 33, -22, 90, -12, 121, -2, 0, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 0, -6, 71, 94, -123, 15, -117, 103, 114, 9, 0, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 0, 91, -88, -84, -91, -42, -98, 3, 27, 16, 0, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 0, 1, 22, 127, -123, -96, -6, 31, 100, 18, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 99, 111, 114, 101, 0, 56, -15, -77, 92, -18, 56, -102, 119, 18, 0, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 0, 16, 110, -108, 37, -45, 46, -69, 57, 27, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 115, 112, 105, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 74, 99, 91, 66, -66, -37, -120, -63, 27, 0, 82, 101, 116, 114, 121, 97, 98, 108, 101, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 8, 0, 0, 105, 115, -122, -18, 76, -102, 123, 26, 27, 0, 80, 97, 114, 116, 105, 116, 105, 111, 110, 77, 105, 103, 114, 97, 116, 105, 110, 103, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127]
2024-01-13T12:34:00,436 | ERROR | hz.cellar.response-1 | InboundResponseHandler           | 529 - com.hazelcast - 3.12.13 | [127.0.0.1]:5702 [AbeelPlatformCluster] [3.12.13] While processing response...
com.hazelcast.nio.serialization.HazelcastSerializationException: java.io.IOException
	at com.hazelcast.internal.serialization.impl.SerializationUtil.handleException(SerializationUtil.java:70) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:275) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187) ~[529:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100) [529:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285) [529:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272) [529:com.hazelcast:3.12.13]
Caused by: java.io.IOException
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:252) ~[?:?]
	at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49) ~[?:?]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269) ~[?:?]
	... 10 more
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wraKq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wraxJ,fury,1890430025,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T11:54:05Z,2024-01-13T11:54:05Z,"Fury stacktrace, I am having a feeling where this is going, OSGi classloading:

```
karaf@root()> java.lang.NullPointerException
        at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:83)
        at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:64)
        at io.fury.serializer.ObjectStreamSerializer$SlotsInfo.lambda$new$1(ObjectStreamSerializer.java:348)
        at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
        at io.fury.serializer.ObjectStreamSerializer$SlotsInfo.<init>(ObjectStreamSerializer.java:345)
        at io.fury.serializer.ObjectStreamSerializer.<init>(ObjectStreamSerializer.java:118)
        at io.fury.serializer.Serializers.createSerializer(Serializers.java:131)
        at io.fury.serializer.Serializers.newSerializer(Serializers.java:106)
        at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1185)
        at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1129)
        at io.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1553)
        at io.fury.Fury.readRef(Fury.java:801)
        at io.fury.Fury.deserialize(Fury.java:750)
        at io.fury.Fury.deserialize(Fury.java:681)
        at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:244)
        at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49)
        at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269)
        at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574)
        at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51)
        at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48)
        at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wraxJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrbA2,fury,1890431030,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T11:59:08Z,2024-01-13T11:59:08Z,"The generated Janino classes compare perfectly:

```
package com.hazelcast.spi.exception;

import java.util.List;
import java.util.Map;
import java.util.Set;
import io.fury.Fury;
import io.fury.memory.MemoryBuffer;
import io.fury.resolver.MapRefResolver;
import io.fury.resolver.ClassInfo;
import io.fury.resolver.ClassInfoHolder;
import io.fury.resolver.ClassResolver;
import io.fury.builder.Generated;
import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
import io.fury.serializer.Serializers.EnumSerializer;
import io.fury.serializer.Serializer;
import io.fury.serializer.StringSerializer;
import io.fury.serializer.ObjectSerializer;
import io.fury.serializer.CompatibleSerializer;
import io.fury.serializer.collection.AbstractCollectionSerializer;
import io.fury.serializer.collection.AbstractMapSerializer;
import io.fury.builder.Generated.GeneratedCompatibleSerializer;

public final class PartitionMigratingExceptionFuryRefCompatibleCodec_1 extends GeneratedCompatibleSerializer {

  private final MapRefResolver refResolver;
  private final ClassResolver classResolver;
  private final StringSerializer strSerializer;
  private final io.fury.resolver.FieldResolver fieldResolver;
  private Fury fury;

  public PartitionMigratingExceptionFuryRefCompatibleCodec_1(Fury fury, Class classType) {
      super(fury, classType);
      this.fury = fury;
      fury.getClassResolver().setSerializerIfAbsent(classType, this);
  
      io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
      refResolver = ((MapRefResolver)refResolver0);
      classResolver = fury.getClassResolver();
      strSerializer = fury.getStringSerializer();
      fieldResolver = classResolver.getFieldResolver(com.hazelcast.spi.exception.PartitionMigratingException.class);
  }

  public com.hazelcast.spi.exception.PartitionMigratingException readAndSetFields(MemoryBuffer memoryBuffer, Object object) {
      io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
      long partFieldInfo = memoryBuffer.readInt();
      com.hazelcast.spi.exception.PartitionMigratingException bean = (com.hazelcast.spi.exception.PartitionMigratingException)object;
      while (((partFieldInfo & 3L) == ((byte)1))) {
        if ((fieldResolver.skipDataBy4(memoryBuffer, ((int)partFieldInfo)) == 9223372036854775806L)) {
            return bean;
        }
        partFieldInfo = memoryBuffer.readInt();
      }
      long value = memoryBuffer.readInt();
      partFieldInfo = ((value << 32) | (partFieldInfo & 4294967295L));
      while (((partFieldInfo & 7L) == ((byte)3))) {
        if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
            return bean;
        }
        partFieldInfo = memoryBuffer.readLong();
      }
      while (((partFieldInfo & 7L) == ((byte)7))) {
        if ((fieldResolver.skipDataBy8(memoryBuffer, partFieldInfo) == 9223372036854775806L)) {
            return bean;
        }
        partFieldInfo = memoryBuffer.readLong();
      }
      fieldResolver.skipEndFields(memoryBuffer, partFieldInfo);
      return bean;
  }

  @Override public final void write(MemoryBuffer buffer, Object obj) {
      com.hazelcast.spi.exception.PartitionMigratingException partitionMigratingException1 = (com.hazelcast.spi.exception.PartitionMigratingException)obj;
      buffer.writeLong(9223372036854775806L);
  }

  @Override public final Object read(MemoryBuffer buffer) {
      Object instance = io.fury.util.Platform.newInstance(com.hazelcast.spi.exception.PartitionMigratingException.class);
      com.hazelcast.spi.exception.PartitionMigratingException partitionMigratingException2 = (com.hazelcast.spi.exception.PartitionMigratingException)instance;
      refResolver.reference(partitionMigratingException2);
      Object bean0 = (Object)partitionMigratingException2;
      com.hazelcast.spi.exception.PartitionMigratingException partitionMigratingException3 = this.readAndSetFields(buffer, bean0);
      return partitionMigratingException2;
  }

}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrbA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrcbQ,fury,1890436816,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T12:20:08Z,2024-01-13T12:20:08Z,"Fur usage in an OSGi environment, where every deployed jar must have an extended manifest to become a bundle, I wrap fury generating this manifest:

`<bundle>wrap:mvn:org.furyio/fury-core/${furyio.version}$Bundle-SymbolicName=fury-core&amp;Bundle-Version=${furyio.version}</bundle>`

```
karaf@root()> headers 546

fury-core (546)
---------------
Archiver-Version = Plexus Archiver
Bnd-LastModified = 1704790940005
Build-Jdk = 21.0.1
Built-By = chaokunyang
Created-By = 1.8.0_362 (Temurin)
Generated-By-Ops4j-Pax-From = wrap:file:/C:/Java/platform/runtime-oracle/data/kar/eu.abeel.platform.karaf.cellar.kar-2.0.0/org/furyio/fury-core/0.4.1/fury-core-0.4.1.jar$Bundle-SymbolicName=fury-core&Bundle-Version=0.4.1
Manifest-Version = 1.0
Originally-Created-By = Apache Maven 3.6.3
Tool = Bnd-2.3.0.201405100607

Bundle-ManifestVersion = 2
Bundle-Name = fury-core
Bundle-SymbolicName = fury-core
Bundle-Version = 0.4.1

Require-Capability =
        osgi.ee;filter:=(&(osgi.ee=JavaSE)(version=1.8))

Export-Package =
        fury,
        io.fury;uses:=""io.fury.builder,io.fury.config,io.fury.memory,io.fury.resolver,io.fury.serializer,io.fury.type,io.fury.util"",
        io.fury.annotation,
        io.fury.builder;uses:=""com.google.common.reflect,io.fury,io.fury.codegen,io.fury.collection,io.fury.memory,io.fury.resolver,io.fury.serializer,io.fury.type"",
        io.fury.codegen;
                uses:=""com.google.common.reflect,
                        com.google.common.util.concurrent,
                        io.fury.shaded.org.codehaus.commons.compiler.util.reflect,
                        io.fury.util.function"",
        io.fury.collection;uses:=com.google.common.collect,
        io.fury.config;uses:=""io.fury,io.fury.serializer"",
        io.fury.exception,
        io.fury.io;uses:=""io.fury,io.fury.memory"",
        io.fury.memory,
        io.fury.pool;uses:=""io.fury,io.fury.memory,io.fury.util"",
        io.fury.resolver;
                uses:=""com.google.common.reflect,
                        io.fury,
                        io.fury.builder,
                        io.fury.codegen,
                        io.fury.collection,
                        io.fury.memory,
                        io.fury.serializer,
                        io.fury.type,
                        io.fury.util"",
        io.fury.serializer;uses:=""io.fury,io.fury.codegen,io.fury.collection,io.fury.config,io.fury.memory,io.fury.resolver,io.fury.type,io.fury.util"",
        io.fury.serializer.collection;uses:=""com.google.common.collect,io.fury,io.fury.collection,io.fury.memory,io.fury.resolver,io.fury.serializer"",
        io.fury.serializer.scala;uses:=""io.fury,io.fury.memory,io.fury.serializer,io.fury.serializer.collection"",
        io.fury.serializer.shim;uses:=""io.fury,io.fury.serializer"",
        io.fury.shaded.javassist;
                uses:=""io.fury.shaded.javassist.bytecode,
                        io.fury.shaded.javassist.compiler,
                        io.fury.shaded.javassist.compiler.ast,
                        io.fury.shaded.javassist.convert,
                        io.fury.shaded.javassist.expr"",
        io.fury.shaded.javassist.bytecode;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode.annotation"",
        io.fury.shaded.javassist.bytecode.analysis;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode"",
        io.fury.shaded.javassist.bytecode.annotation;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode"",
        io.fury.shaded.javassist.bytecode.stackmap;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode"",
        io.fury.shaded.javassist.compiler;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode,io.fury.shaded.javassist.compiler.ast"",
        io.fury.shaded.javassist.compiler.ast;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.compiler"",
        io.fury.shaded.javassist.convert;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode"",
        io.fury.shaded.javassist.expr;uses:=""io.fury.shaded.javassist,io.fury.shaded.javassist.bytecode"",
        io.fury.shaded.javassist.runtime,
        io.fury.shaded.javassist.scopedpool,
        io.fury.shaded.javassist.tools,
        io.fury.shaded.javassist.tools.reflect,
        io.fury.shaded.javassist.tools.rmi,
        io.fury.shaded.javassist.tools.web,
        io.fury.shaded.javassist.util,
        io.fury.shaded.javassist.util.proxy;uses:=io.fury.shaded.javassist,
        io.fury.shaded.org.codehaus.commons.compiler;uses:=io.fury.shaded.org.codehaus.commons.compiler.util.resource,
        io.fury.shaded.org.codehaus.commons.compiler.io;uses:=io.fury.shaded.org.codehaus.commons.compiler.util,
        io.fury.shaded.org.codehaus.commons.compiler.java8.java.util,
        io.fury.shaded.org.codehaus.commons.compiler.java8.java.util.function,
        io.fury.shaded.org.codehaus.commons.compiler.java8.java.util.stream;uses:=io.fury.shaded.org.codehaus.commons.compiler.java8.java.util.function,
        io.fury.shaded.org.codehaus.commons.compiler.java9.java.lang.module;
                uses:=""io.fury.shaded.org.codehaus.commons.compiler.java8.java.util,
                        io.fury.shaded.org.codehaus.commons.compiler.java8.java.util.stream"",
        io.fury.shaded.org.codehaus.commons.compiler.lang,
        io.fury.shaded.org.codehaus.commons.compiler.samples,
        io.fury.shaded.org.codehaus.commons.compiler.util,
        io.fury.shaded.org.codehaus.commons.compiler.util.iterator;uses:=io.fury.shaded.org.codehaus.commons.compiler.util,
        io.fury.shaded.org.codehaus.commons.compiler.util.reflect,
        io.fury.shaded.org.codehaus.commons.compiler.util.resource,
        io.fury.shaded.org.codehaus.commons.nullanalysis,
        io.fury.shaded.org.codehaus.janino;
                uses:=""io.fury.shaded.org.codehaus.commons.compiler,
                        io.fury.shaded.org.codehaus.commons.compiler.util,
                        io.fury.shaded.org.codehaus.commons.compiler.util.resource,
                        io.fury.shaded.org.codehaus.janino.util"",
        io.fury.shaded.org.codehaus.janino.samples,
        io.fury.shaded.org.codehaus.janino.tools,
        io.fury.shaded.org.codehaus.janino.util;uses:=io.fury.shaded.org.codehaus.janino,
        io.fury.shaded.org.codehaus.janino.util.charstream,
        io.fury.shaded.org.codehaus.janino.util.signature,
        io.fury.type;uses:=""com.google.common.reflect,io.fury,io.fury.collection,io.fury.memory,io.fury.resolver,io.fury.serializer"",
        io.fury.util;uses:=""com.google.common.reflect,io.fury,io.fury.collection,io.fury.util.function,org.slf4j,sun.misc"",
        io.fury.util.function;uses:=io.fury.collection,
        io.fury.util.record;uses:=io.fury.collection,
        io.fury.util.unsafe;uses:=""io.fury.collection,sun.misc"",
        org.codehaus.commons.compiler.properties
Import-Package =
        com.google.common.base;resolution:=optional,
        com.google.common.cache;resolution:=optional,
        com.google.common.collect;resolution:=optional,
        com.google.common.io;resolution:=optional,
        com.google.common.reflect;resolution:=optional,
        com.google.common.util.concurrent;resolution:=optional,
        org.slf4j;resolution:=optional,
        org.slf4j.helpers;resolution:=optional,
        sun.misc;resolution:=optional
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrcbQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrio0,fury,1890462260,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T13:41:05Z,2024-01-13T13:41:05Z,"Is it possible that you have some jar conflict? Or there are some classloader switch,  ThreadSafeFury supports switch classloader, you may try that.
Or is it possible you implement customized serializer wrong?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrio0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrj37,fury,1890467323,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T14:05:26Z,2024-01-13T14:05:26Z,"I can reproduce the io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:83) nullpointer, every time it tries to load the java.lang.StackTraceElement class. The previous classes from Hazelcast run into the class not found exception and do there thing.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrj37/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrkOS,fury,1890468754,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T14:11:35Z,2024-01-13T14:11:35Z,"Could you provide reproduction code, I think StackTraceElement can be serialized by Fury correctly","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrkOS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlAm,fury,1890471974,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T14:22:16Z,2024-01-13T14:22:16Z,"The nullpointer gets caught by io.fury.builder.JITContext#registerSerializerJITCallback, this time on a RuntimeException. Stacktrace has no further information.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlAm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlTr,fury,1890473195,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T14:27:57Z,2024-01-13T14:27:57Z,"My serialization code:

```
    @Override
    public byte[] write(Object object) throws IOException {
        Fury fury = null;
        try {
            fury = acquireInstance();
            byte[] buffer = fury.serialize(object);
            String bytesString = Arrays.toString(buffer);
            LOGGER.debug(""Serializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName(), buffer.length, bytesString);
            return buffer;
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error(""Cannot serialize object {}!"", object.getClass().getCanonicalName());
            throw new IOException(e.getMessage());
        } finally {
            releaseInstance(fury);
        }
    }

    @Override
    public Object read(byte[] buffer) throws IOException {
        String bytesString = Arrays.toString(buffer);
        Fury fury = null;
        try {
            fury = acquireInstance();
            Object object = fury.deserialize(buffer);
            if (object instanceof EndpointDescription) {
                LOGGER.trace(""Deserializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName());
            } else {
                LOGGER.debug(""Deserializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName());
            }
            return object;
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error(""Cannot deserialize object with buffer length {} and contents {}"", buffer.length, bytesString);
            throw new IOException(e.getMessage());
        } finally {
            releaseInstance(fury);
        }
    }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlTr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlYM,fury,1890473484,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T14:29:25Z,2024-01-13T14:29:25Z,Why does it work with the default Java serializers?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrlYM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrmTG,fury,1890477254,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T14:45:07Z,2024-01-13T14:45:07Z,"> My serialization code:
> 
> ```
>     @Override
>     public byte[] write(Object object) throws IOException {
>         Fury fury = null;
>         try {
>             fury = acquireInstance();
>             byte[] buffer = fury.serialize(object);
>             String bytesString = Arrays.toString(buffer);
>             LOGGER.debug(""Serializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName(), buffer.length, bytesString);
>             return buffer;
>         } catch (Exception e) {
>             e.printStackTrace();
>             LOGGER.error(""Cannot serialize object {}!"", object.getClass().getCanonicalName());
>             throw new IOException(e.getMessage());
>         } finally {
>             releaseInstance(fury);
>         }
>     }
> 
>     @Override
>     public Object read(byte[] buffer) throws IOException {
>         String bytesString = Arrays.toString(buffer);
>         Fury fury = null;
>         try {
>             fury = acquireInstance();
>             Object object = fury.deserialize(buffer);
>             if (object instanceof EndpointDescription) {
>                 LOGGER.trace(""Deserializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName());
>             } else {
>                 LOGGER.debug(""Deserializing {} having buffer length {} and contents {}"", object.getClass().getCanonicalName());
>             }
>             return object;
>         } catch (Exception e) {
>             e.printStackTrace();
>             LOGGER.error(""Cannot deserialize object with buffer length {} and contents {}"", buffer.length, bytesString);
>             throw new IOException(e.getMessage());
>         } finally {
>             releaseInstance(fury);
>         }
>     }
> ```

This doesn't provide information, We need a runnable unit test to locate the issue.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrmTG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsJFY,fury,1890619736,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T17:51:16Z,2024-01-13T17:51:16Z,"If using ThreadSafeFury, you can set classloader like this:
```java
  @Test
  public void testSerialize() throws Exception {
    BeanA beanA = BeanA.createBeanA(2);
    ThreadSafeFury fury =
        Fury.builder()
            .withLanguage(Language.JAVA)
            .withRefTracking(true)
            .requireClassRegistration(false)
            .withAsyncCompilation(true)
            .buildThreadSafeFury();
    ExecutorService executorService = Executors.newFixedThreadPool(12);
    for (int i = 0; i < 2000; i++) {
      executorService.execute(
          () -> {
            for (int j = 0; j < 10; j++) {
              try {
                fury.setClassLoader(beanA.getClass().getClassLoader());
                assertEquals(fury.deserialize(fury.serialize(beanA)), beanA);
              } catch (Exception e) {
                hasException = true;
                e.printStackTrace();
              }
            }
          });
    }
    executorService.shutdown();
    assertTrue(executorService.awaitTermination(30, TimeUnit.SECONDS));
    assertFalse(hasException);
  }
``

I'm not sure whether your OSGI case has classloader issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsJFY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsNiS,fury,1890637970,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T18:04:59Z,2024-01-13T18:04:59Z,"The point with OSGi is that every bundle has it’s own class loader, which is a good thing as it prevents jar hell and developers are forced to create clean modular semantic versioned code.
As Fury works with configured JavaSerializer, the problem must be sought in the dynamically compiled and loaded code. The options I want to try is to embed Fury into my global Hazelcast serializer bundle giving them the same class loader or do a thread context class loader switch before (de)serializing also setting the class loader to the current bundle.
Is there a special class loader used for loading the dynamic classes?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsNiS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsPbW,fury,1890645718,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T18:10:27Z,2024-01-13T18:10:27Z,"Fury won't use thread's context classloader automatically, you need to use ThreadSafeFury to update classloader. Could you try this method to check whether it's classloader issue. 
Fury supports Exception serialization well, it's probably not the root cause.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsPbW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsSyI,fury,1890659464,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T18:20:23Z,2024-01-13T18:20:23Z,"So Fury will use the class loader from the thread it was created with? I mean,to load the dynamically compiled classes ?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsSyI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsUGs,fury,1890664876,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-13T18:24:20Z,2024-01-13T18:24:20Z,"> Fury won't use thread's context classloader automatically, you need to use ThreadSafeFury to update classloader. Could you try this method to check whether it's classloader issue. Fury supports Exception serialization well, it's probably not the root cause.

I agree, the missing stacktrace beyond the nullpointer is making things hard. Usually I see a class not found exception if OSGi class loading does not match up. So I am guessing this null pointer tells me the same.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsUGs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtkH0,fury,1890992628,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-14T16:05:42Z,2024-01-14T16:05:42Z,"Using the supplied Fury pool with HazelcastGlobalSerializer bundle class loader having dynamic import (import all packages as needed) resulted in below. Trying to embed Fury within the HazelcastGlobalSerializer bundle now:

```
    private static ThreadSafeFury createThreadSafeFury() {
        ThreadSafeFury threadSafeFury = Fury.builder()
                .withLanguage(Language.JAVA)
                .withMetaContextShare(false)
                .withRefTracking(true)
                .withIntCompressed(false)
                .withLongCompressed(false)
                .withStringCompressed(false)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withClassVersionCheck(false)
                .withJdkClassSerializableCheck(true)
                .withDeserializeUnexistedClass(false)
                .withAsyncCompilation(false)
                .withCodegen(true)
                .ignoreTimeRef(false)
                .ignoreStringRef(false)
                .ignoreBasicTypesRef(false)
                .registerGuavaTypes(false)
                .requireClassRegistration(false)
                .suppressClassRegistrationWarnings(true)
                .withClassLoader(HazelcastGlobalSerializer.class.getClassLoader())
                .buildThreadSafeFuryPool(1, 64);
//        registerClasses(fury);
        return threadSafeFury;
    }

karaf@root()> java.lang.RuntimeException: java.lang.NullPointerException
        at io.fury.pool.FuryPooledObjectFactory.returnFury(FuryPooledObjectFactory.java:110)
        at io.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:91)
        at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:281)
        at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49)        at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269)
        at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574)
        at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106)
        at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51)        at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48)
        at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285)
        at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272)
Caused by: java.lang.NullPointerException
        at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:889)
        at com.google.common.cache.LocalCache.getIfPresent(LocalCache.java:3970)
        at com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(LocalCache.java:4857)
        at io.fury.pool.FuryPooledObjectFactory.returnFury(FuryPooledObjectFactory.java:102)
        ... 14 more
```

```
2024-01-14T17:02:31,020 | ERROR | hz.cellar.response-1 | FuryPooledObjectFactory          | 485 - fury-core - 0.4.1 | null
java.lang.NullPointerException: null
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:889) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at com.google.common.cache.LocalCache.getIfPresent(LocalCache.java:3970) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(LocalCache.java:4857) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at io.fury.pool.FuryPooledObjectFactory.getFury(FuryPooledObjectFactory.java:85) [485:fury-core:0.4.1]
	at io.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:88) [485:fury-core:0.4.1]
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:281) [495:org.apache.karaf.cellar.fury:4.2.1.20]
	at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272) [484:com.hazelcast:3.12.13]
2024-01-14T17:02:31,026 | ERROR | hz.cellar.response-1 | FuryPooledObjectFactory          | 485 - fury-core - 0.4.1 | null
java.lang.NullPointerException: null
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:889) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at com.google.common.cache.LocalCache.getIfPresent(LocalCache.java:3970) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(LocalCache.java:4857) ~[500:org.apache.servicemix.bundles.guava:31.1.0.1]
	at io.fury.pool.FuryPooledObjectFactory.returnFury(FuryPooledObjectFactory.java:102) [485:fury-core:0.4.1]
	at io.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:91) [485:fury-core:0.4.1]
	at org.apache.karaf.cellar.fury.HazelcastGlobalSerializer.read(HazelcastGlobalSerializer.java:281) [495:org.apache.karaf.cellar.fury:4.2.1.20]
	at com.hazelcast.internal.serialization.impl.ByteArraySerializerAdapter.read(ByteArraySerializerAdapter.java:49) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.readObject(AbstractSerializationService.java:269) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.ByteArrayObjectDataInput.readObject(ByteArrayObjectDataInput.java:574) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse.readData(ErrorResponse.java:55) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.readInternal(DataSerializableSerializer.java:160) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:106) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.DataSerializableSerializer.read(DataSerializableSerializer.java:51) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.StreamSerializerAdapter.read(StreamSerializerAdapter.java:48) [484:com.hazelcast:3.12.13]
	at com.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:187) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandler.accept(InboundResponseHandler.java:100) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.doRun(InboundResponseHandlerSupplier.java:285) [484:com.hazelcast:3.12.13]
	at com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier$ResponseThread.run(InboundResponseHandlerSupplier.java:272) [484:com.hazelcast:3.12.13]
2024-01-14T17:02:31,030 | ERROR | hz.cellar.response-1 | HazelcastGlobalSerializer        | 495 - org.apache.karaf.cellar.fury - 4.2.1.20 | Cannot deserialize object with buffer length 2379 and contents [2, 0, 1, 0, 16, 110, -108, 37, -45, 46, -69, 57, 27, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 115, 112, 105, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 105, 115, -122, -18, 76, -102, 123, 26, 27, 0, 80, 97, 114, 116, 105, 116, 105, 111, 110, 77, 105, 103, 114, 97, 116, 105, 110, 103, 69, 120, 99, 101, 112, 116, 105, 111, 110, 6, 0, 1, 0, 51, 77, -80, 107, -25, -24, 24, -99, 9, 0, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 120, -76, 26, 118, 76, -103, 50, 36, 9, 0, 84, 104, 114, 111, 119, 97, 98, 108, 101, -73, 100, 28, 12, 0, -107, -86, 118, 0, -48, 2, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 105, 0, 115, 0, 32, 0, 109, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 110, 0, 103, 0, 33, 0, 32, 0, 116, 0, 104, 0, 105, 0, 115, 0, 58, 0, 32, 0, 91, 0, 49, 0, 50, 0, 55, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 49, 0, 93, 0, 58, 0, 53, 0, 55, 0, 48, 0, 51, 0, 44, 0, 32, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 73, 0, 100, 0, 58, 0, 32, 0, 49, 0, 52, 0, 53, 0, 44, 0, 32, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 58, 0, 32, 0, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 99, 0, 111, 0, 108, 0, 108, 0, 101, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 46, 0, 80, 0, 111, 0, 108, 0, 108, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 44, 0, 32, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 58, 0, 32, 0, 104, 0, 122, 0, 58, 0, 105, 0, 109, 0, 112, 0, 108, 0, 58, 0, 113, 0, 117, 0, 101, 0, 117, 0, 101, 0, 83, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, -60, 32, -10, -11, 8, 48, -28, 81, 0, 0, -44, 1, 0, 66, 0, -48, 66, -116, 87, 19, -3, -77, 95, 0, 0, 1, 0, -83, 86, -11, 13, 28, -83, 101, -1, 11, 0, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 0, 62, -46, 63, 65, 3, 52, 13, -21, 18, 0, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 10, 0, 0, 0, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 24, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 102, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 87, 0, 97, 0, 105, 0, 116, 0, 83, 0, 101, 0, 116, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 36, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 101, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -99, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 126, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 112, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 80, 0, 97, 0, 114, 0, 107, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 38, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -97, 1, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 74, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 78, 0, 111, 0, 100, 0, 101, 0, 69, 0, 110, 0, 103, 0, 105, 0, 110, 0, 101, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 8, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 62, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, 101, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -118, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 46, 0, 112, 0, 97, 0, 114, 0, 116, 0, 105, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 70, 0, 105, 0, 110, 0, 97, 0, 108, 0, 105, 0, 122, 0, 101, 0, 77, 0, 105, 0, 103, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 6, 114, 0, 117, 0, 110, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 28, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -86, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 54, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 8, 99, 0, 97, 0, 108, 0, 108, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 48, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -46, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, -128, 1, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 115, 0, 101, 0, 114, 0, 118, 0, 105, 0, 99, 0, 101, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 82, 0, 117, 0, 110, 0, 110, 0, 101, 0, 114, 0, 73, 0, 109, 0, 112, 0, 108, 0, -73, 100, 97, -52, 37, -108, 82, -24, -2, 22, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 24, 79, 52, 72, 47, -101, 50, 26, -88, -57, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 25, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, 0, 40, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, 46, 0, 106, 0, 97, 0, 118, 0, 97, 0, 79, 52, 72, 47, -101, 50, 26, -88, -109, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, 0, 122, 99, 0, 111, 0, 109, 0, 46, 0, 104, 0, 97, 0, 122, 0, 101, 0, 108, 0, 99, 0, 97, 0, 115, 0, 116, 0, 46, 0, 115, 0, 112, 0, 105, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 111, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 101, 0, 120, 0, 101, 0, 99, 0, 117, 0, 116, 0, 111, 0, 114, 0, 46, 0, 105, 0, 109, 0, 112, 0, 108, 0, 46, 0, 79, 0, 112, 0, 101, 0, 114, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 84, 0, 104, 0, 114, 0, 101, 0, 97, 0, 100, 0, -73, 100, 97, -52, 37, -108, 82, -24, 0, 14, 112, 0, 114, 0, 111, 0, 99, 0, 101, 0, 115, 0, 115, 0, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 125, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 30, -2, -1, -1, -1, -1, -1, -1, 127, 0, -77, -96, 48, 121, -95, 47, -101, 2, -2, 28, 79, 52, 72, 47, -101, 50, 26, -88, 110, 0, 0, 0, -73, -84, -57, 36, 123, 17, -52, -49, -2, 29, -73, 100, 97, -52, 37, -108, 82, -24, -2, 18, -2, -1, -1, -1, -1, -1, -1, 127, -120, 114, -119, 33, -22, 90, -12, 121, -2, 0, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 2, 0, 0, -6, 71, 94, -123, 15, -117, 103, 114, 9, 0, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 2, 0, 0, 91, -88, -84, -91, -42, -98, 3, 27, 16, 0, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 0, 1, 22, 127, -123, -96, -6, 31, 100, 18, 0, 99, 111, 109, 46, 104, 97, 122, 101, 108, 99, 97, 115, 116, 46, 99, 111, 114, 101, 0, 56, -15, -77, 92, -18, 56, -102, 119, 18, 0, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 0, 74, 99, 91, 66, -66, -37, -120, -63, 27, 0, 82, 101, 116, 114, 121, 97, 98, 108, 101, 72, 97, 122, 101, 108, 99, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, -2, -1, -1, -1, -1, -1, -1, 127, 1, 1, 0, 0, 1, 1, 0, -2, -1, -1, -1, -1, -1, -1, 127]

```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtkH0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtl9h,fury,1891000161,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-14T16:38:07Z,2024-01-14T16:38:07Z,Could you use ThreadLocalFury and setClassLoader before serialization/deserialization every time?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtl9h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtrcl,fury,1891022629,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-14T18:13:04Z,2024-01-14T18:13:04Z,"> Could you use ThreadLocalFury and setClassLoader before serialization/deserialization every time?

Will try that, here is some useful info about class loader do’s and dont’s in a modular world: https://blog.osgi.org/2011/05/what-you-should-know-about-class.html","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wtrcl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wywjg,fury,1892354272,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-15T15:11:56Z,2024-01-15T15:11:56Z,"> Could you use ThreadLocalFury and setClassLoader before serialization/deserialization every time?

That did improve the null pointer issues. Some partition migrations still fail on de-serialization and on shutdown some deserialisation issues as well.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wywjg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w6AE2,fury,1894252854,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-16T18:08:48Z,2024-01-16T18:08:48Z,"Digging into the class loading I see the nullpointer happening at  CodecUtils line 83 
`beanClassClassLoader.loadClass(Fury.class.getName()); `
Being the result of Fury trying to deserialize an exception from the Hazelcast bundle by using the Hazelcast class loader, which is good, but that bundle does not import Fury onto its classpath. The Hazelcast bundle does not have a notion of Fury, so it  cannot get the generated code I am guessing? Is the generated code loaded by the Fury class loader?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w6AE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8vTO,fury,1894970574,1340,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-17T05:33:01Z,2024-01-17T05:33:01Z,"![image](https://github.com/apache/incubator-fury/assets/12445254/a86fea22-19f0-4515-b6aa-de0c210d6f72)
If  Hazelcast class loader doesn't have Fury class, Fury will create a new classloader to include classes in  Hazelcast class loader and Fury classloader.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w8vTO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w96jU,fury,1895278804,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-17T07:57:14Z,2024-01-17T07:57:14Z,"> ![image](https://private-user-images.githubusercontent.com/12445254/297270344-a86fea22-19f0-4515-b6aa-de0c210d6f72.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDU0NzgzNjMsIm5iZiI6MTcwNTQ3ODA2MywicGF0aCI6Ii8xMjQ0NTI1NC8yOTcyNzAzNDQtYTg2ZmVhMjItMTlmMC00NTE1LWI2YWEtZGUwYzIxMGQ2ZjcyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAxMTclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMTE3VDA3NTQyM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTc1YmJhYWIzZDlmZmYyODE2NGVjYmI1NTBhODcxYjk0YjEwNWQyOWQzODk5ZjdjMDE5Yjc5OGVkODA3NTZmYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.dKhAJpnFnF3-cptx1mijh8WazaKFM9hTMXn5_oTcldk) If Hazelcast class loader doesn't have Fury class, Fury will create a new classloader to include classes in Hazelcast class loader and Fury classloader.

I do not understand the nullpointer, maybe just catch all, not just class not found exception?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w96jU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w-A-3,fury,1895305143,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-17T08:17:45Z,2024-01-17T08:17:45Z,"On RuntimeException the bean class loader is null, looks like a bean info thingy:
![image](https://github.com/apache/incubator-fury/assets/16353975/a2bb171b-733e-4117-9e06-f3e92af3dde7)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w-A-3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1340,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w_CEk,fury,1895571748,1340,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-17T10:57:43Z,2024-01-17T10:57:43Z,"As an enterprise developer I do not venture very often into the JVM bowel of things, the core Java classes loaded by the JVM bootstrap class loader do not have a class loader reference. That was a new fact for me. So the issue is not the null pointer class loader reference of the exception class, but why there is no context class loader in loadOrGenCodecClass.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w_CEk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1341,https://api.github.com/repos/apache/fury/issues/1341,fury,2079177745,1341,[Java] Specify JPMS module names,mtf90,7063944,Markus Frohme,,CLOSED,2024-01-12T16:01:04Z,2024-01-14T11:04:21Z,"## Is your feature request related to a problem? Please describe.

When using fury in a modular (JPMS) application, the `maven-compiler-plugin` warns that

```
[WARNING] ****************************************************************************************************************************************************
[WARNING] * Required filename-based automodules detected: [fury-core-0.5.0-SNAPSHOT.jar]. Please don't publish this project to a public artifact repository! *
[WARNING] ****************************************************************************************************************************************************
```

## Describe the solution you'd like

With this feature request I propose to claim and configure module names to get rid of this warning.

I basically see two feasible approaches to achieve this goal:

1. The least invasive approach would be to use the `Automatic-Module-Name` entries in the `MANIFEST.MF`s of the respective `.jar` files. This does not affect the build process in any way and can be configured relatively easy via configurations in the `maven-jar-plugin` (or the `maven-shade-plugin` if you use it).
2. To fully support *named* modules, you would have to provide a full `module-info.java` descriptor. Since this is a Java9+ feature, you would have to extend the build process to either use multiple compile phases (one for `module-info.java` on Java9+ and one for the remaining code on Java8 to maintain backwards compatibility) or build a multi-release JAR. This would make sense if you want to support tools such as `jlink` or `jpackage` in the future. However, this would also require your dependencies to be fully modularized. So if that is not the case, it is probably not worth the effort for now.

## Additional context

I could lend a hand and provide an initial PR for the first solution. The only thing worth discussing beforehand is which module names you want to claim. You could either go with the direct translation of the maven coordinates, e.g. `org.apache.fury.fury_core`, `org.apache.fury.fury_format`, etc. or go with more idiomatic names such as `org.apache.fury.core`, `org.apache.fury.format`, etc.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1341/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1341,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrMy0,fury,1890372788,1341,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T08:06:26Z,2024-01-13T08:06:26Z,"Hi @mtf90 , thanks for bringing up this. I think we can go with first solution first. Some dependency such as arrow used by fury-format hasn't released support for JPMS. It's supported in main branch: https://github.com/apache/arrow/blob/main/java/memory/memory-core/src/main/java/module-info.java, but not released yet.

And `org.apache.fury.core`, `org.apache.fury.format` looks good to me. Would you like to create a pr for this?

In the long run, I think Fury should support JPMS fully. One thing I'm not sure whether it affect java8 users. Fury will support java8 for a long time, the support for JPMS should not break the support for java8","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrMy0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1341,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrjRA,fury,1890464832,1341,NA,mtf90,7063944,Markus Frohme,,NA,2024-01-13T13:54:08Z,2024-01-13T13:54:08Z,"Dear @chaokunyang, I created a PR. Feel free to change the module names for the test modules. I went with a hierarchical naming convention since you seem to prefer the `org.apache.fury.core` approach.


Maybe I can share some experience for adding full JPMS support in the future since I'm in a similar situation with @LearnLib at the moment (which is why I encountered the missing module names of Fury in the first place).

We went with the two-compilation-phase approach which
* compiles everything to Java 9 in order to use the compiler's built-in checks for sound `module-info.java` definitions and then
* re-compile everything but the `module-info.java` file to Java 8.

This allows us to keep the `module-info.java` file alongside the actual code and profit off of the IDE's support for modules. The main disadvantage is that a Java 9+ compiled class is now alongside the other `.class` files in the built `.jar` file. However, since `module-info` is not a valid Java identifier, you cannot reference this class directly in regular applications. Only (Java 8) code that deliberately scans the contents of a `.jar` file may run into `UnsupportedClassVersionError`s

An alternative would be to keep the `module-info.java` in a separate source directory (something like `src/main/java9`) and construct a multi-release JAR by compiling (only) the `module-info.java` descriptor to the the `META-INF/versions/9` directory of the `.jar` file (which is what, e.g., `slf4j` does). The main disadvantage I see with this approach is (besides the wonky IDE support) that the multi-release semantics are defined only on the `.jar` level. However, with maven, your typical lifecycle is `compile` -> `test` -> `package` so you would need to move certain (unit-) tests to the `integration-test` phase in order to test your module definitions (such as service definitions via `uses` and `provides`). ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wrjRA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1341,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsRDn,fury,1890652391,1341,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-13T18:15:21Z,2024-01-13T18:15:21Z,"Hi @mtf90 , thanks for submitting the PR #1343 , the naming looks good to me.

And thanks for detailed explaination for JMPS solution too, I can see a feasible path top JPMS now. Fury currently dependends on guava, which doesn't support JPMS https://github.com/google/guava/issues/2970. We may need to hold this until guava support it or we remove guava dependencies.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5wsRDn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/1344,fury,2083390037,1344,Segmentation fault when creating Fury instance,wshtbla,142790749,,,CLOSED,2024-01-16T09:10:18Z,2024-02-20T07:01:36Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury: 0.4.1
OS: CentOS Linux release 7.9.2009
JDK: [Azul Zing](https://www.azul.com/lower-cloud-costs/?utm_content=&utm_term=azul+zing&utm_campaign=GS_B_Brand_CP_GCR_EN&utm_source=google&utm_medium=paid-search&_bt=669868943687&_bm=e&_bn=g&gad_source=1) JDK8 (zing21.08.1.0-1-jdk8.0.302-linux_x64)


### Component(s)

Java

### Minimal reproduce step

Start our Java web server, when running serialization, it will initiate Fury instance as ThreadLocal using ThreadSafeFury

Here's how we use Fury:
```
public class SerializationTranscoderV2<T> extends BaseTranscoder<T> {
    private static final Logger s_logger = Logger.getLogger(SerializationTranscoderV2.class);
    private static final ThreadSafeFury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .buildThreadSafeFury();

    @Override
    protected byte[] objectToBinary(T o) throws IOException {
        return fury.serialize(o);
    }

    @Override
    protected T binaryToObject(InputStream in) throws IOException {
        T object;
        try {
            byte[] data = IOUtils.toByteArray(in);
            object = (T) fury.deserialize(data);

        }
        catch (Exception e) {
            s_logger.error(""Failed to read object from stream"", e);
            object = null;
        }
        in.close();
        return object;
    }
```

### What did you expect to see?

When creating Fury instance (with [constructor](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/Fury.java#L117-L140) in Fury.java which is called from ThreadLocalFury with ThreadSafeFury), it succeeds.

### What did you see instead?

When creating Fury instance (with [constructor](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/Fury.java#L117-L140) in Fury.java which is called from ThreadLocalFury with ThreadSafeFury), it fails with segmentation fault.

Java server stdout:
```
2024-01-16 03:19:00,184 main INFO The nolookups option will be ignored. Message Lookups are no longer supported.
2024-01-16 03:19:00,187 main INFO The nolookups option will be ignored. Message Lookups are no longer supported.
2024-01-16 03:19:00,188 main INFO The nolookups option will be ignored. Message Lookups are no longer supported.
0: rip=0x00007f827ca7479b @rip=[0xffffffffffffffff] (os::print_hotspot_os_backtrace()+27) [gcc frame, calls gcc]
1: rip=0x00007f827c34c9dd @rip=[0x00007f82765ea918] (jvm_unexpected_exception_handler+157) [gcc frame, calls gcc]
2: rip=0x00007f827c34ca85 @rip=[0x00007f82765ea9c8] (jvm_unexpected_exception_helper+69) [gcc frame, calls gcc]
3: rip=0x00007f827b5f1767 @rip=[0x00007f82765ea9d8] (jvm_unexpected_exception_handler_wrapper()+615) [gcc frame, calls gcc]
4: rip=0x00007f827c191932 @rip=[0x00007f82765eaa38] (GPGC_Collector::mutator_relocate_object(oopDesc*)+50) [gcc frame, calls gcc]
5: rip=0x00007f827c269a15 @rip=[0x00007f82765eabd8] (oopDesc* GPGC_TLB::lvb_trap_from_c<(OopHelper::EncodingHint)0>(Thread*, oopDesc*, oopDesc* volatile*)+149) [gcc frame, calls gcc]
6: rip=0x00007f827c269750 @rip=[0x00007f82765eac68] (GPGC_TLB::lvb_trap_from_asm(Thread*, oopDesc*, oopDesc* volatile*)+144) [gcc frame, calls gcc]
7: rip=0x000000003000b3da @rip=[0x00007f82765eacb8] (lvb_handler+858) [java frame, calls java]
#
# An unexpected error has been detected by Java Runtime Environment:
#
# Segmentation fault (0xb) at pc=0x7f827c191932, pid=46777, tid=46781
#
# Java VM: Zing 64-Bit Tiered VM (1.8.0_302-zing_21.08.1.0-b1-product-linux-X86_64, mixed mode)
# Problematic frame:
# V [libjvm.so+0x2fd932] GPGC_Collector::mutator_relocate_object(oopDesc*)+0x32
#
# An error report file with more information is saved as:
# /opt/taboola/trc/hs_err_pid46777.log
#
# If you would like to submit a bug report, please visit:
# http://www.azul.com/support/
```

Zing error report: 
```
Stack: [0x7f82763f0000,0x7f82765f0000], sp=0x7f82765eaa40, free space=2026k
Native frames: (J Jn Jo=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x2fd932] GPGC_Collector::mutator_relocate_object(oopDesc*)+0x32
V [libjvm.so+0x3d5a15] oopDesc* GPGC_TLB::lvb_trap_from_c<(OopHelper::EncodingHint)0>(Thread*, oopDesc*, oopDesc* volatile*)+0x95
V [libjvm.so+0x3d5750] GPGC_TLB::lvb_trap_from_asm(Thread*, oopDesc*, oopDesc* volatile*)+0x90
v ~StubRoutines::lvb_handler
Jn sun.misc.Unsafe.getObject(Ljava/lang/Object;J)Ljava/lang/Object;
j io.fury.util.unsafe._Lookup.<clinit>()V+24
v ~StubRoutines::call_stub
v ~StubRoutines::interpreter_resolve_invoke_stub
j io.fury.util.unsafe._JDKAccess$1.computeValue(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;+1
j io.fury.util.unsafe._JDKAccess$1.computeValue(Ljava/lang/Class;)Ljava/lang/Object;+2
j java.lang.ClassValue.getFromHashMap(Ljava/lang/Class;)Ljava/lang/Object;+29
j java.lang.ClassValue.getFromBackup([Ljava/lang/ClassValue$Entry;Ljava/lang/Class;)Ljava/lang/Object;+17
j java.lang.ClassValue.get(Ljava/lang/Class;)Ljava/lang/Object;+27
j io.fury.util.unsafe._JDKAccess._trustedLookup(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;+15
j io.fury.serializer.StringSerializer.<clinit>()V+159
v ~StubRoutines::call_stub
v ~StubRoutines::interpreter__new_stub
j io.fury.resolver.ClassResolver.addDefaultSerializers()V+4
j io.fury.resolver.ClassResolver.initialize()V+329
j io.fury.Fury.<init>(Lio/fury/config/FuryBuilder;Ljava/lang/ClassLoader;)V+131
j io.fury.config.FuryBuilder.newFury(Lio/fury/config/FuryBuilder;Ljava/lang/ClassLoader;)Lio/fury/Fury;+6
j io.fury.config.FuryBuilder.lambda$buildThreadLocalFury$0(Ljava/lang/ClassLoader;)Lio/fury/Fury;+2
j io.fury.config.FuryBuilder$$Lambda$lambda$buildThreadLocalFury$0$3997846765.apply(Ljava/lang/Object;)Ljava/lang/Object;+8
j io.fury.util.LoaderBinding.setClassLoader(Ljava/lang/ClassLoader;Lio/fury/util/LoaderBinding$StagingType;)V+116
j io.fury.util.LoaderBinding.setClassLoader(Ljava/lang/ClassLoader;)V+5
j io.fury.ThreadLocalFury.lambda$new$1(Ljava/util/function/Function;)Lio/fury/util/LoaderBinding;+16
j io.fury.ThreadLocalFury$$Lambda$lambda$new$1$2324057901.get()Ljava/lang/Object;+4
j java.lang.ThreadLocal$SuppliedThreadLocal.initialValue()Ljava/lang/Object;+4
j java.lang.ThreadLocal.setInitialValue()Ljava/lang/Object;+1
```

Can see it failed from 
`j io.fury.util.unsafe._JDKAccess$1.computeValue(Ljava/lang/Class;)Ljava/lang/invoke/MethodHandles$Lookup;+1` 


### Anything Else?

We've also found a strange way to fix this, which is to run the Java server with [Lightrun](https://lightrun.com/) (It's a remote monitoring tool that uses bytecode instrumentation to capture log/metrics/callstack from a running Java program). We suspect there're some JIT/bytecode/instrumentation operations that will be allowed when running our server with Lightrun agent, and Fury might also require it.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1344/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w25nE,fury,1893439940,1344,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-16T10:13:23Z,2024-01-16T10:13:23Z,"Hi @wshtbla , thanks for reporting this bug. Is there any reproduction code? It's not easy to trouble shooting a crash issue without running it locally","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w25nE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w9cv1,fury,1895156725,1344,NA,wshtbla,142790749,,,NA,2024-01-17T06:57:30Z,2024-01-17T06:57:30Z,"@chaokunyang I'll try to find one. It's a heavy and legacy server, so might not be easy. Will let you know.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5w9cv1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xcpXo,fury,1903334888,1344,NA,wshtbla,142790749,,,NA,2024-01-22T06:18:58Z,2024-01-22T06:18:58Z,"We're checking with Azul as well, and good news is the new Zing version 23.08.300.0-2-jdk8.0.401-linux_x64 can work with Fury.
We're still checking why the old version fail with some JVM dump files. Will close this issue first.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xcpXo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WO14,fury,1951985016,1344,NA,wshtbla,142790749,,,NA,2024-02-19T09:00:26Z,2024-02-19T09:00:26Z,"@chaokunyang 
The reason for the crush was because Fury uses Unsafe API that requires Zing to enable a JVM option called UseTrueObjectsForUnsafe. In old Zing, this option is disabled by default, but in new Zing, this option is enabled by default.

By the way, from Zing Engineer, they said Fury might have incorrect usage of Unsafe API.
I will copy their words here (see below):

---
Here is the code which caused the crash: https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/util/unsafe/_Lookup.java#L44
I see incorrect usage of Unsafe API.

How it looks:
```
     try {
       Field implLookup = Lookup.class.getDeclaredField(""IMPL_LOOKUP"");
       long fieldOffset = _JDKAccess.UNSAFE.staticFieldOffset(implLookup);
       trustedLookup = (Lookup) _JDKAccess.UNSAFE.getObject(Lookup.class, fieldOffset);
     } catch (Throwable ignored) {
       // ignored
     }
```

How it should be.
```
     try {
       Field implLookup = Lookup.class.getDeclaredField(""IMPL_LOOKUP"");
       long fieldOffset = _JDKAccess.UNSAFE.staticFieldOffset(implLookup);
       Object fieldBase = _JDKAccess.UNSAFE.staticFieldBase(implLookup);
       trustedLookup = (Lookup) _JDKAccess.UNSAFE.getObject(fieldBase, fieldOffset);
     } catch (Throwable ignored) {
       // ignored
     }
```
When -UseTrueObjectsForUnsafe is used, UNSAFE.getObject expects raw klassOop, not java.lang.Class instance. It leads to issue. 
This code kind of is ok when we use  +UseTrueObjectsForUnsafe and OpenJDK, because 'staticFieldBase' will return Lookup.class in this case. But this is not guaranteed.
 
Please check official documentation, how to get input parameters for Unsafe operations:
https://github.com/keerath/openjdk-8-source/blob/master/jdk/src/share/classes/sun/misc/Unsafe.java#L114

---

Does this make sense?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WO14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1344,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50bpA9,fury,1953402941,1344,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-20T02:52:35Z,2024-02-20T02:52:35Z,"Hi @wshtbla , thanks so much for sharing this to us. We did use the wrong Unsafe API for getting static field.  This is not an easy bug to locate, thanks again for sharing the fix to us. I'll submit a fix right now.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50bpA9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/1350,fury,2092951405,1350,[JavaScript] Several questions about javascript,LiangliangSui,116876207,,,CLOSED,2024-01-22T02:32:02Z,2024-01-25T15:44:32Z,"## 1. JavaScript CI test command replacement
Currently, javascript uses the `node ./node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit` command to start executing ci tests. Can it be replaced by `npm run test`? 
https://github.com/apache/incubator-fury/blob/983bc95deca6f6f93a8a2e5885f8f5838657f9d6/ci/run_ci.sh#L195-L208

## 2. Minimum supported nodejs version
What is the minimum version of nodejs that the current project depends on? I saw that the minimum version configured in [ci.yml](https://github.com/apache/incubator-fury/blob/983bc95deca6f6f93a8a2e5885f8f5838657f9d6/.github/workflows/ci.yml#L113) is 14.x, but now CI fails every time it runs 14.x.

```
2024-01-21T06:17:52.9859563Z + npm install
2024-01-21T06:17:52.9859962Z Executing fury javascript tests
2024-01-21T06:17:57.5144835Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5147611Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin@1.5.4
2024-01-21T06:17:57.5175123Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-js@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5177222Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-js@1.5.4
2024-01-21T06:17:57.5205289Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-jsx@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5207831Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-jsx@1.5.4
2024-01-21T06:17:57.5237040Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-ts@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5240058Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-ts@1.5.4
2024-01-21T06:17:57.5268450Z npm WARN notsup Unsupported engine for @typescript-eslint/utils@6.19.0: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5271138Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/utils@6.19.0
2024-01-21T06:17:57.5319204Z npm WARN notsup Unsupported engine for @typescript-eslint/scope-manager@6.19.0: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5321842Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/scope-manager@6.19.0
2024-01-21T06:17:57.5346460Z npm WARN notsup Unsupported engine for @typescript-eslint/types@6.19.0: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5349005Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/types@6.19.0
2024-01-21T06:17:57.5375746Z npm WARN notsup Unsupported engine for @typescript-eslint/typescript-estree@6.19.0: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5377654Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/typescript-estree@6.19.0
2024-01-21T06:17:57.5414594Z npm WARN notsup Unsupported engine for @typescript-eslint/visitor-keys@6.19.0: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5428920Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/visitor-keys@6.19.0
2024-01-21T06:17:57.5455150Z npm WARN notsup Unsupported engine for ts-api-utils@1.0.3: wanted: {""node"":"">=16.13.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-21T06:17:57.5457216Z npm WARN notsup Not compatible with your version of node/npm: ts-api-utils@1.0.3
2024-01-21T06:17:57.5538963Z npm WARN ts-api-utils@1.0.3 requires a peer of typescript@>=4.2.0 but none is installed. You must install peer dependencies yourself.
2024-01-21T06:17:57.5593829Z npm WARN javascript No license field.
2024-01-21T06:17:57.5597362Z 
2024-01-21T06:17:57.5610342Z added 175 packages from 107 contributors and audited 175 packages in 4.269s
2024-01-21T06:17:57.6091838Z 
2024-01-21T06:17:57.6092329Z 43 packages are looking for funding
2024-01-21T06:17:57.6092921Z   run `npm fund` for details
2024-01-21T06:17:57.6093198Z 
2024-01-21T06:17:57.6093356Z found 0 vulnerabilities
2024-01-21T06:17:57.6093700Z 
2024-01-21T06:17:57.6267810Z + node ./node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit
2024-01-21T06:17:57.6534244Z internal/modules/cjs/loader.js:934
2024-01-21T06:17:57.6534988Z   throw err;
2024-01-21T06:17:57.6535527Z   ^
2024-01-21T06:17:57.6536786Z 
2024-01-21T06:17:57.6538796Z Error: Cannot find module '/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/.bin/jest'
2024-01-21T06:17:57.6541011Z     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:931:15)
2024-01-21T06:17:57.6542594Z     at Function.Module._load (internal/modules/cjs/loader.js:774:27)
2024-01-21T06:17:57.6544054Z     at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:75:12)
2024-01-21T06:17:57.6545130Z     at internal/main/run_main_module.js:17:47 {
2024-01-21T06:17:57.6545845Z   code: 'MODULE_NOT_FOUND',
2024-01-21T06:17:57.6546304Z   requireStack: []
2024-01-21T06:17:57.6546650Z }
2024-01-21T06:17:57.6558572Z + testcode=1
```

After testing, on ubuntu, nodejs 18.x and 20.x can work normally, but 16.x cannot work normally. The failure log is as follows
```
2024-01-22T02:20:45.8169311Z + npm install
2024-01-22T02:20:45.8170137Z Executing fury javascript tests
2024-01-22T02:20:57.9038958Z npm WARN EBADENGINE Unsupported engine {
2024-01-22T02:20:57.9040509Z npm WARN EBADENGINE   package: '@furyjs/hps@0.5.0.dev',
2024-01-22T02:20:57.9041824Z npm WARN EBADENGINE   required: { node: '^20.0.0' },
2024-01-22T02:20:57.9043444Z npm WARN EBADENGINE   current: { node: 'v16.20.2', npm: '8.19.4' }
2024-01-22T02:20:57.9044618Z npm WARN EBADENGINE }
2024-01-22T02:20:57.9045437Z npm WARN EBADENGINE Unsupported engine {
2024-01-22T02:20:57.9046799Z npm WARN EBADENGINE   package: '@furyjs/hps@0.5.0.dev',
2024-01-22T02:20:57.9048065Z npm WARN EBADENGINE   required: { node: '^20.0.0' },
2024-01-22T02:20:57.9049582Z npm WARN EBADENGINE   current: { node: 'v16.20.2', npm: '8.19.4' }
2024-01-22T02:20:57.9050809Z npm WARN EBADENGINE }
2024-01-22T02:20:59.5495779Z npm WARN deprecated @npmcli/move-file@2.0.1: This functionality has been moved to @npmcli/fs
2024-01-22T02:21:04.6954367Z npm ERR! code 1
2024-01-22T02:21:04.6955969Z npm ERR! path /home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps
2024-01-22T02:21:04.6963412Z npm ERR! command failed
2024-01-22T02:21:04.6964229Z npm ERR! command sh -c -- node-gyp rebuild
2024-01-22T02:21:04.6966005Z npm ERR! make: Entering directory '/home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps/build'
2024-01-22T02:21:04.6967570Z npm ERR!   CXX(target) Release/obj.target/hps/src/fastcall.o
2024-01-22T02:21:04.6969441Z npm ERR! make: Leaving directory '/home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps/build'
2024-01-22T02:21:04.6970884Z npm ERR! gyp info it worked if it ends with ok
2024-01-22T02:21:04.6971790Z npm ERR! gyp info using node-gyp@9.4.1
2024-01-22T02:21:04.6973056Z npm ERR! gyp info using node@16.20.2 | linux | x64
2024-01-22T02:21:04.6974612Z npm ERR! gyp info find Python using Python version 3.8.18 found at ""/opt/hostedtoolcache/Python/3.8.18/x64/bin/python3""
2024-01-22T02:21:04.6976760Z npm ERR! gyp http GET https://nodejs.org/download/release/v16.20.2/node-v16.20.2-headers.tar.gz
2024-01-22T02:21:04.6978550Z npm ERR! gyp http 200 https://nodejs.org/download/release/v16.20.2/node-v16.20.2-headers.tar.gz
2024-01-22T02:21:04.6979823Z npm ERR! gyp http GET https://nodejs.org/download/release/v16.20.2/SHASUMS256.txt
2024-01-22T02:21:04.6980771Z npm ERR! gyp http 200 https://nodejs.org/download/release/v16.20.2/SHASUMS256.txt
2024-01-22T02:21:04.6981624Z npm ERR! gyp info spawn /opt/hostedtoolcache/Python/3.8.18/x64/bin/python3
2024-01-22T02:21:04.6982213Z npm ERR! gyp info spawn args [
2024-01-22T02:21:04.6983597Z npm ERR! gyp info spawn args   '/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/node-gyp/gyp/gyp_main.py',
2024-01-22T02:21:04.6984807Z npm ERR! gyp info spawn args   'binding.gyp',
2024-01-22T02:21:04.6985368Z npm ERR! gyp info spawn args   '-f',
2024-01-22T02:21:04.6985920Z npm ERR! gyp info spawn args   'make',
2024-01-22T02:21:04.6986455Z npm ERR! gyp info spawn args   '-I',
2024-01-22T02:21:04.6987446Z npm ERR! gyp info spawn args   '/home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps/build/config.gypi',
2024-01-22T02:21:04.6988393Z npm ERR! gyp info spawn args   '-I',
2024-01-22T02:21:04.6989388Z npm ERR! gyp info spawn args   '/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/node-gyp/addon.gypi',
2024-01-22T02:21:04.6990220Z npm ERR! gyp info spawn args   '-I',
2024-01-22T02:21:04.6991084Z npm ERR! gyp info spawn args   '/home/runner/.cache/node-gyp/16.20.2/include/node/common.gypi',
2024-01-22T02:21:04.6991963Z npm ERR! gyp info spawn args   '-Dlibrary=shared_library',
2024-01-22T02:21:04.6992644Z npm ERR! gyp info spawn args   '-Dvisibility=default',
2024-01-22T02:21:04.6993492Z npm ERR! gyp info spawn args   '-Dnode_root_dir=/home/runner/.cache/node-gyp/16.20.2',
2024-01-22T02:21:04.6994729Z npm ERR! gyp info spawn args   '-Dnode_gyp_dir=/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/node-gyp',
2024-01-22T02:21:04.6995980Z npm ERR! gyp info spawn args   '-Dnode_lib_file=/home/runner/.cache/node-gyp/16.20.2/<(target_arch)/node.lib',
2024-01-22T02:21:04.7001548Z npm ERR! gyp info spawn args   '-Dmodule_root_dir=/home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps',
2024-01-22T02:21:04.7003226Z npm ERR! gyp info spawn args   '-Dnode_engine=v8',
2024-01-22T02:21:04.7003813Z npm ERR! gyp info spawn args   '--depth=.',
2024-01-22T02:21:04.7004555Z npm ERR! gyp info spawn args   '--no-parallel',
2024-01-22T02:21:04.7005173Z npm ERR! gyp info spawn args   '--generator-output',
2024-01-22T02:21:04.7005837Z npm ERR! gyp info spawn args   'build',
2024-01-22T02:21:04.7006369Z npm ERR! gyp info spawn args   '-Goutput_dir=.'
2024-01-22T02:21:04.7006898Z npm ERR! gyp info spawn args ]
2024-01-22T02:21:04.7007745Z npm ERR! gyp info spawn make
2024-01-22T02:21:04.7008902Z npm ERR! gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]
2024-01-22T02:21:04.7009608Z npm ERR! In file included from ../src/fastcall.cc:20:
2024-01-22T02:21:04.7010684Z npm ERR! ../src/v8-fast-api-calls.h:229:10: fatal error: v8-local-handle.h: No such file or directory
2024-01-22T02:21:04.7011701Z npm ERR!   229 | #include ""v8-local-handle.h""  // NOLINT(build/include_directory)
2024-01-22T02:21:04.7012373Z npm ERR!       |          ^~~~~~~~~~~~~~~~~~~
2024-01-22T02:21:04.7016004Z npm ERR! compilation terminated.
2024-01-22T02:21:04.7016980Z npm ERR! make: *** [hps.target.mk:115: Release/obj.target/hps/src/fastcall.o] Error 1
2024-01-22T02:21:04.7017927Z npm ERR! gyp ERR! build error 
2024-01-22T02:21:04.7018919Z npm ERR! gyp ERR! stack Error: `make` failed with exit code: 2
2024-01-22T02:21:04.7021063Z npm ERR! gyp ERR! stack     at ChildProcess.onExit (/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/node-gyp/lib/build.js:203:23)
2024-01-22T02:21:04.7022976Z npm ERR! gyp ERR! stack     at ChildProcess.emit (node:events:513:28)
2024-01-22T02:21:04.7024661Z npm ERR! gyp ERR! stack     at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12)
2024-01-22T02:21:04.7026056Z npm ERR! gyp ERR! System Linux 6.2.0-1018-azure
2024-01-22T02:21:04.7028347Z npm ERR! gyp ERR! command ""/opt/hostedtoolcache/node/16.20.2/x64/bin/node"" ""/home/runner/work/incubator-fury/incubator-fury/javascript/node_modules/.bin/node-gyp"" ""rebuild""
2024-01-22T02:21:04.7030832Z npm ERR! gyp ERR! cwd /home/runner/work/incubator-fury/incubator-fury/javascript/packages/hps
2024-01-22T02:21:04.7032070Z npm ERR! gyp ERR! node -v v16.20.2
2024-01-22T02:21:04.7032892Z npm ERR! gyp ERR! node-gyp -v v9.4.1
2024-01-22T02:21:04.7033937Z npm ERR! gyp ERR! not ok
2024-01-22T02:21:04.7034353Z 
2024-01-22T02:21:04.7034808Z npm ERR! A complete log of this run can be found in:
2024-01-22T02:21:04.7035991Z npm ERR!     /home/runner/.npm/_logs/2024-01-22T02_20_46_033Z-debug-0.log
2024-01-22T02:21:04.7409940Z + npm run test
2024-01-22T02:21:05.0046868Z 
2024-01-22T02:21:05.0047213Z > test
2024-01-22T02:21:05.0047960Z > jest
2024-01-22T02:21:05.0048244Z 
2024-01-22T02:21:05.0115398Z sh: 1: jest: not found
2024-01-22T02:21:05.0188460Z + testcode=127
```

## 3. Turn off unit test coverage
Since the current unit test coverage does not meet the threshold requirements configured in [`jest.config.js`](https://github.com/apache/incubator-fury/blob/983bc95deca6f6f93a8a2e5885f8f5838657f9d6/javascript/jest.config.js#L41), every run fails. However, the returncode check is commented out in [`run_ci.sh`](https://github.com/apache/incubator-fury/blob/983bc95deca6f6f93a8a2e5885f8f5838657f9d6/ci/run_ci.sh#L205), which prevents us from dividing whether the unit test is success.
So should we consider temporarily turning off the coverage threshold limit? After we perfect the unit test to reach the threshold requirement, we can then turn on the threshold configuration. This will allow us to detect unit test failure instead of blocking it.

## 4. About Windows compilation support
Currently, JavaScript fails to compile on Windows, so should you consider increasing the requirement for JavaScript to be compiled on Windows?

The failure log is as follows
```
2024-01-21T06:03:30.7306803Z 2024-01-21 06:03:30,728 - INFO - running command: npm install
2024-01-21T06:04:45.1073893Z 2024-01-21 06:04:45,102 - ERROR - npm WARN EBADENGINE Unsupported engine {
2024-01-21T06:04:45.1075341Z npm WARN EBADENGINE   package: '@furyjs/hps@0.5.0.dev',
2024-01-21T06:04:45.1076332Z npm WARN EBADENGINE   required: { node: '^20.0.0' },
2024-01-21T06:04:45.1077534Z npm WARN EBADENGINE   current: { node: 'v18.19.0', npm: '10.2.3' }
2024-01-21T06:04:45.1078316Z npm WARN EBADENGINE }
2024-01-21T06:04:45.1078848Z npm WARN EBADENGINE Unsupported engine {
2024-01-21T06:04:45.1079822Z npm WARN EBADENGINE   package: '@furyjs/hps@0.5.0.dev',
2024-01-21T06:04:45.1080866Z npm WARN EBADENGINE   required: { node: '^20.0.0' },
2024-01-21T06:04:45.1082114Z npm WARN EBADENGINE   current: { node: 'v18.19.0', npm: '10.2.3' }
2024-01-21T06:04:45.1082922Z npm WARN EBADENGINE }
2024-01-21T06:04:45.1084105Z npm WARN deprecated @npmcli/move-file@2.0.1: This functionality has been moved to @npmcli/fs
2024-01-21T06:04:45.1085392Z npm WARN cleanup Failed to remove some directories [
2024-01-21T06:04:45.1086128Z npm WARN cleanup   [
2024-01-21T06:04:45.1087150Z npm WARN cleanup     'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules',
2024-01-21T06:04:45.1088837Z npm WARN cleanup     [Error: EPERM: operation not permitted, rmdir 'D:\a\incubator-fury\incubator-fury\javascript\node_modules\eslint\lib\rules'] {
2024-01-21T06:04:45.1089732Z npm WARN cleanup       errno: -4048,
2024-01-21T06:04:45.1090322Z npm WARN cleanup       code: 'EPERM',
2024-01-21T06:04:45.1090771Z npm WARN cleanup       syscall: 'rmdir',
2024-01-21T06:04:45.1091587Z npm WARN cleanup       path: 'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\eslint\\lib\\rules'
2024-01-21T06:04:45.1092233Z npm WARN cleanup     }
2024-01-21T06:04:45.1092494Z npm WARN cleanup   ],
2024-01-21T06:04:45.1092756Z npm WARN cleanup   [
2024-01-21T06:04:45.1093621Z npm WARN cleanup     'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\@typescript-eslint\\type-utils\\node_modules',
2024-01-21T06:04:45.1095220Z npm WARN cleanup     [Error: EPERM: operation not permitted, rmdir 'D:\a\incubator-fury\incubator-fury\javascript\node_modules\@typescript-eslint\type-utils\node_modules'] {
2024-01-21T06:04:45.1096170Z npm WARN cleanup       errno: -4048,
2024-01-21T06:04:45.1096801Z npm WARN cleanup       code: 'EPERM',
2024-01-21T06:04:45.1097216Z npm WARN cleanup       syscall: 'rmdir',
2024-01-21T06:04:45.1098170Z npm WARN cleanup       path: 'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\@typescript-eslint\\type-utils\\node_modules'
2024-01-21T06:04:45.1098910Z npm WARN cleanup     }
2024-01-21T06:04:45.1099182Z npm WARN cleanup   ]
2024-01-21T06:04:45.1099439Z npm WARN cleanup ]
2024-01-21T06:04:45.1099693Z npm ERR! code 1
2024-01-21T06:04:45.1100199Z npm ERR! path D:\a\incubator-fury\incubator-fury\javascript\packages\hps
2024-01-21T06:04:45.1100693Z npm ERR! command failed
2024-01-21T06:04:45.1103264Z npm ERR! command C:\Windows\system32\cmd.exe /d /s /c node-gyp rebuild
2024-01-21T06:04:45.1103859Z npm ERR! fastcall.cc
2024-01-21T06:04:45.1105257Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(53,49): error C2065: 'u_int8_t': undeclared identifier [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1107770Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(53,31): error C2923: 'v8::FastApiTypedArray': 'u_int8_t' is not a valid template type argument for parameter 'T' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1110072Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(53,49): message : see declaration of 'u_int8_t' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1112425Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(53,60): error C2955: 'v8::FastApiTypedArray': use of class template requires template argument list [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1114839Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\v8-fast-api-calls.h(340,26): message : see declaration of 'v8::FastApiTypedArray' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1117019Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(54,21): error C2061: syntax error: identifier 'u_int32_t' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1119858Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(56,5): error C2662: 'bool v8::FastApiTypedArray<T>::getStorageIfAligned(T **) const': cannot convert 'this' pointer from 'const v8::FastApiTypedArray' to 'const v8::FastApiTypedArray<T> &' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1122785Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(56,3): message : Reason: cannot convert from 'const v8::FastApiTypedArray' to 'const v8::FastApiTypedArray<T>' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1125320Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(56,3): message : Conversion requires a second user-defined-conversion operator or constructor [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1127833Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\v8-fast-api-calls.h(351,8): message : see declaration of 'v8::FastApiTypedArray<T>::getStorageIfAligned' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1130145Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(56,5): message : while trying to match the argument list '(uint8_t **)' [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1132272Z npm ERR! D:\a\incubator-fury\incubator-fury\javascript\packages\hps\src\fastcall.cc(58,16): error C2065: 'offset': undeclared identifier [D:\a\incubator-fury\incubator-fury\javascript\packages\hps\build\hps.vcxproj]
2024-01-21T06:04:45.1133527Z npm ERR! gyp info it worked if it ends with ok
2024-01-21T06:04:45.1133984Z npm ERR! gyp info using node-gyp@9.4.1
2024-01-21T06:04:45.1134396Z npm ERR! gyp info using node@18.19.0 | win32 | x64
2024-01-21T06:04:45.1135223Z npm ERR! gyp info find Python using Python version 3.8.10 found at ""C:\hostedtoolcache\windows\Python\3.8.10\x64\python3.exe""
2024-01-21T06:04:45.1136289Z npm ERR! gyp http GET https://nodejs.org/download/release/v18.19.0/node-v18.19.0-headers.tar.gz
2024-01-21T06:04:45.1137753Z npm ERR! gyp http 200 https://nodejs.org/download/release/v18.19.0/node-v18.19.0-headers.tar.gz
2024-01-21T06:04:45.1138613Z npm ERR! gyp http GET https://nodejs.org/download/release/v18.19.0/SHASUMS256.txt
2024-01-21T06:04:45.1139457Z npm ERR! gyp http GET https://nodejs.org/download/release/v18.19.0/win-x64/node.lib
2024-01-21T06:04:45.1140192Z npm ERR! gyp http 200 https://nodejs.org/download/release/v18.19.0/SHASUMS256.txt
2024-01-21T06:04:45.1140987Z npm ERR! gyp http 200 https://nodejs.org/download/release/v18.19.0/win-x64/node.lib
2024-01-21T06:04:45.1141638Z npm ERR! gyp info find VS using VS2022 (17.8.34408.163) found at:
2024-01-21T06:04:45.1142317Z npm ERR! gyp info find VS ""C:\Program Files\Microsoft Visual Studio\2022\Enterprise""
2024-01-21T06:04:45.1143065Z npm ERR! gyp info find VS run with --verbose for detailed information
2024-01-21T06:04:45.1143740Z npm ERR! gyp info spawn C:\hostedtoolcache\windows\Python\3.8.10\x64\python3.exe
2024-01-21T06:04:45.1144271Z npm ERR! gyp info spawn args [
2024-01-21T06:04:45.1145112Z npm ERR! gyp info spawn args   'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\node-gyp\\gyp\\gyp_main.py',
2024-01-21T06:04:45.1145916Z npm ERR! gyp info spawn args   'binding.gyp',
2024-01-21T06:04:45.1146347Z npm ERR! gyp info spawn args   '-f',
2024-01-21T06:04:45.1146741Z npm ERR! gyp info spawn args   'msvs',
2024-01-21T06:04:45.1147140Z npm ERR! gyp info spawn args   '-I',
2024-01-21T06:04:45.1147955Z npm ERR! gyp info spawn args   'D:\\a\\incubator-fury\\incubator-fury\\javascript\\packages\\hps\\build\\config.gypi',
2024-01-21T06:04:45.1148686Z npm ERR! gyp info spawn args   '-I',
2024-01-21T06:04:45.1149494Z npm ERR! gyp info spawn args   'D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\node-gyp\\addon.gypi',
2024-01-21T06:04:45.1150223Z npm ERR! gyp info spawn args   '-I',
2024-01-21T06:04:45.1151080Z npm ERR! gyp info spawn args   'C:\\Users\\runneradmin\\AppData\\Local\\node-gyp\\Cache\\18.19.0\\include\\node\\common.gypi',
2024-01-21T06:04:45.1151944Z npm ERR! gyp info spawn args   '-Dlibrary=shared_library',
2024-01-21T06:04:45.1152486Z npm ERR! gyp info spawn args   '-Dvisibility=default',
2024-01-21T06:04:45.1153342Z npm ERR! gyp info spawn args   '-Dnode_root_dir=C:\\Users\\runneradmin\\AppData\\Local\\node-gyp\\Cache\\18.19.0',
2024-01-21T06:04:45.1154478Z npm ERR! gyp info spawn args   '-Dnode_gyp_dir=D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\node-gyp',
2024-01-21T06:04:45.1155846Z npm ERR! gyp info spawn args   '-Dnode_lib_file=C:\\\\Users\\\\runneradmin\\\\AppData\\\\Local\\\\node-gyp\\\\Cache\\\\18.19.0\\\\<(target_arch)\\\\node.lib',
2024-01-21T06:04:45.1157122Z npm ERR! gyp info spawn args   '-Dmodule_root_dir=D:\\a\\incubator-fury\\incubator-fury\\javascript\\packages\\hps',
2024-01-21T06:04:45.1157884Z npm ERR! gyp info spawn args   '-Dnode_engine=v8',
2024-01-21T06:04:45.1158355Z npm ERR! gyp info spawn args   '--depth=.',
2024-01-21T06:04:45.1158812Z npm ERR! gyp info spawn args   '--no-parallel',
2024-01-21T06:04:45.1159314Z npm ERR! gyp info spawn args   '--generator-output',
2024-01-21T06:04:45.1160112Z npm ERR! gyp info spawn args   'D:\\a\\incubator-fury\\incubator-fury\\javascript\\packages\\hps\\build',
2024-01-21T06:04:45.1160830Z npm ERR! gyp info spawn args   '-Goutput_dir=.'
2024-01-21T06:04:45.1161212Z npm ERR! gyp info spawn args ]
2024-01-21T06:04:45.1162002Z npm ERR! gyp info spawn C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe
2024-01-21T06:04:45.1162652Z npm ERR! gyp info spawn args [
2024-01-21T06:04:45.1163085Z npm ERR! gyp info spawn args   'build/binding.sln',
2024-01-21T06:04:45.1163619Z npm ERR! gyp info spawn args   '/clp:Verbosity=minimal',
2024-01-21T06:04:45.1164103Z npm ERR! gyp info spawn args   '/nologo',
2024-01-21T06:04:45.1164668Z npm ERR! gyp info spawn args   '/p:Configuration=Release;Platform=x64'
2024-01-21T06:04:45.1165140Z npm ERR! gyp info spawn args ]
2024-01-21T06:04:45.1165452Z npm ERR! gyp ERR! build error 
2024-01-21T06:04:45.1166604Z npm ERR! gyp ERR! stack Error: `C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe` failed with exit code: 1
2024-01-21T06:04:45.1168049Z npm ERR! gyp ERR! stack     at ChildProcess.onExit (D:\a\incubator-fury\incubator-fury\javascript\node_modules\node-gyp\lib\build.js:203:23)
2024-01-21T06:04:45.1168971Z npm ERR! gyp ERR! stack     at ChildProcess.emit (node:events:517:28)
2024-01-21T06:04:45.1169730Z npm ERR! gyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:292:12)
2024-01-21T06:04:45.1170358Z npm ERR! gyp ERR! System Windows_NT 10.0.20348
2024-01-21T06:04:45.1171621Z npm ERR! gyp ERR! command ""C:\\hostedtoolcache\\windows\\node\\18.19.0\\x64\\node.exe"" ""D:\\a\\incubator-fury\\incubator-fury\\javascript\\node_modules\\node-gyp\\bin\\node-gyp.js"" ""rebuild""
2024-01-21T06:04:45.1172861Z npm ERR! gyp ERR! cwd D:\a\incubator-fury\incubator-fury\javascript\packages\hps
2024-01-21T06:04:45.1173441Z npm ERR! gyp ERR! node -v v18.19.0
2024-01-21T06:04:45.1173834Z npm ERR! gyp ERR! node-gyp -v v9.4.1
2024-01-21T06:04:45.1174165Z npm ERR! gyp ERR! not ok
2024-01-21T06:04:45.1174334Z 
2024-01-21T06:04:45.1175035Z npm ERR! A complete log of this run can be found in: C:\Users\RUNNER~1\AppData\Local\Temp\_logs\2024-01-21T06_03_31_613Z-debug-0.log
2024-01-21T06:04:45.1175648Z 
2024-01-21T06:04:45.1279432Z Traceback (most recent call last):
2024-01-21T06:04:45.1280329Z   File ""./ci/run_ci.py"", line 196, in <module>
2024-01-21T06:04:45.1281341Z   File ""./ci/run_ci.py"", line 192, in _parse_args
2024-01-21T06:04:45.1282221Z   File ""./ci/run_ci.py"", line 119, in _run_js
2024-01-21T06:04:45.1283069Z   File ""./ci/run_ci.py"", line 44, in _exec_cmd
2024-01-21T06:04:45.1284181Z   File ""C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\subprocess.py"", line 516, in run
2024-01-21T06:04:45.1285213Z     raise CalledProcessError(retcode, process.args,
2024-01-21T06:04:45.1286439Z subprocess.CalledProcessError: Command 'npm install' returned non-zero exit status 1.
2024-01-21T06:04:45.3723715Z ##[error]Process completed with exit code 1.
2024-01-21T06:04:45.3894293Z Post job cleanup.
2024-01-21T06:04:45.5677116Z [command]""C:\Program Files\Git\bin\git.exe"" version
2024-01-21T06:04:45.5922175Z git version 2.43.0.windows.1
2024-01-21T06:04:45.6006444Z Temporarily overriding HOME='D:\a\_temp\dfd9d2f6-d199-4757-82e3-ab2ac74d1e14' before making global git config changes
2024-01-21T06:04:45.6008290Z Adding repository directory to the temporary git global config as a safe directory
2024-01-21T06:04:45.6020916Z [command]""C:\Program Files\Git\bin\git.exe"" config --global --add safe.directory D:\a\incubator-fury\incubator-fury
2024-01-21T06:04:45.6259658Z [command]""C:\Program Files\Git\bin\git.exe"" config --local --name-only --get-regexp core\.sshCommand
2024-01-21T06:04:45.6476967Z [command]""C:\Program Files\Git\bin\git.exe"" submodule foreach --recursive ""sh -c \""git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""""
2024-01-21T06:04:46.0633828Z [command]""C:\Program Files\Git\bin\git.exe"" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2024-01-21T06:04:46.0822183Z http.https://github.com/.extraheader
2024-01-21T06:04:46.0849310Z [command]""C:\Program Files\Git\bin\git.exe"" config --local --unset-all http.https://github.com/.extraheader
2024-01-21T06:04:46.1071006Z [command]""C:\Program Files\Git\bin\git.exe"" submodule foreach --recursive ""sh -c \""git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""""
2024-01-21T06:04:46.5018678Z Cleaning up orphan processes
2024-01-21T06:04:46.5251011Z Terminate orphan process: pid (6700) (vctip)
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1350/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbOkM,fury,1902962956,1350,NA,LiangliangSui,116876207,,,NA,2024-01-22T02:35:54Z,2024-01-22T02:35:54Z,"I am trying to port the JavaScript CI from `run_ci.sh` to `run_ci.py`. During the process, I encountered the above problems and some confusion. 

Please help me take a look, thanks! @chaokunyang @theweipeng ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbOkM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbl7k,fury,1903058660,1350,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-22T03:13:15Z,2024-01-22T03:13:15Z,"@LiangliangSui Feel free to post issues here, we are happy to help","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbl7k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbmJc,fury,1903059548,1350,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-22T03:13:37Z,2024-01-22T03:13:37Z,"> I am trying to port the JavaScript CI from `run_ci.sh` to `run_ci.py`. During the process, I encountered the above problems and some confusion.
> 
> Please help me take a look, thanks! @chaokunyang @theweipeng

Thank you for pointing that out !

1. Yes, it can be replaced with `npm run test`.
2. The problem is on my end. JavaScript includes a native module `hps` written in C++, which doesn't work with Node versions earlier than 18. However, `hps` is an optional module. I will submit another PR to address this issue so that it functions correctly on Node 14.
3. JavaScript needs more test cases. We can temporarily turn off the coverage threshold limit.
4. I will submit another PR to fix the error on Windows.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbmJc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbraV,fury,1903081109,1350,NA,LiangliangSui,116876207,,,NA,2024-01-22T03:23:16Z,2024-01-22T03:23:16Z,"Thanks for the help, looking forward to your fix PR. @theweipeng ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xbraV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xshHv,fury,1907495407,1350,NA,LiangliangSui,116876207,,,NA,2024-01-24T07:09:49Z,2024-01-24T07:09:49Z,"Hi @theweipeng , I use `npm run test` to replace `node ./node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit`. It works fine in other versions. In node 14, the following content will be executed in a loop
```
2024-01-24T06:07:58.5271444Z node: v14.21.3
2024-01-24T06:07:58.5272246Z npm: 6.14.18
2024-01-24T06:07:58.5272952Z yarn: 1.22.21
2024-01-24T06:07:58.5273999Z ##[endgroup]
2024-01-24T06:07:58.5485934Z ##[group]Run ./ci/run_ci.sh javascript
2024-01-24T06:07:58.5486484Z [36;1m./ci/run_ci.sh javascript[0m
2024-01-24T06:07:58.5553617Z shell: /usr/bin/bash -e {0}
2024-01-24T06:07:58.5554176Z ##[endgroup]
2024-01-24T06:07:58.5736872Z ++ git rev-parse --show-toplevel
2024-01-24T06:07:58.5749345Z + ROOT=/home/runner/work/incubator-fury/incubator-fury
2024-01-24T06:07:58.5750967Z + echo 'Root path: /home/runner/work/incubator-fury/incubator-fury, home path: /home/runner'
2024-01-24T06:07:58.5752611Z + cd /home/runner/work/incubator-fury/incubator-fury
2024-01-24T06:07:58.5754100Z Root path: /home/runner/work/incubator-fury/incubator-fury, home path: /home/runner
2024-01-24T06:07:58.5757504Z + JDKS=(""zulu21.28.85-ca-jdk21.0.0-linux_x64"" ""zulu17.44.17-ca-crac-jdk17.0.8-linux_x64"" ""zulu15.46.17-ca-jdk15.0.10-linux_x64"" ""zulu13.54.17-ca-jdk13.0.14-linux_x64"" ""zulu11.66.15-ca-jdk11.0.20-linux_x64"" ""zulu8.72.0.17-ca-jdk8.0.382-linux_x64"")
2024-01-24T06:07:58.5759947Z + case $1 in
2024-01-24T06:07:58.5760398Z + set +e
2024-01-24T06:07:58.5760948Z + echo 'Executing fury javascript tests'
2024-01-24T06:07:58.5761630Z + cd /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:07:58.5762205Z + npm install
2024-01-24T06:07:58.5762640Z Executing fury javascript tests
2024-01-24T06:08:07.8944596Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.8946840Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin@1.5.4
2024-01-24T06:08:07.8978466Z npm WARN notsup Unsupported engine for ts-jest@29.1.2: wanted: {""node"":""^16.10.0 || ^18.0.0 || >=20.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.8980403Z npm WARN notsup Not compatible with your version of node/npm: ts-jest@29.1.2
2024-01-24T06:08:07.9010354Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-js@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9012745Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-js@1.5.4
2024-01-24T06:08:07.9061931Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-jsx@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9064574Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-jsx@1.5.4
2024-01-24T06:08:07.9098198Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-ts@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9100998Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-ts@1.5.4
2024-01-24T06:08:07.9136823Z npm WARN notsup Unsupported engine for @typescript-eslint/utils@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9139505Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/utils@6.19.1
2024-01-24T06:08:07.9168402Z npm WARN notsup Unsupported engine for @typescript-eslint/types@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9171322Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/types@6.19.1
2024-01-24T06:08:07.9199107Z npm WARN notsup Unsupported engine for @typescript-eslint/scope-manager@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9201472Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/scope-manager@6.19.1
2024-01-24T06:08:07.9239429Z npm WARN notsup Unsupported engine for @typescript-eslint/typescript-estree@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9242325Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/typescript-estree@6.19.1
2024-01-24T06:08:07.9268364Z npm WARN notsup Unsupported engine for @typescript-eslint/visitor-keys@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9270634Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/visitor-keys@6.19.1
2024-01-24T06:08:07.9295423Z npm WARN notsup Unsupported engine for ts-api-utils@1.0.3: wanted: {""node"":"">=16.13.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
2024-01-24T06:08:07.9297314Z npm WARN notsup Not compatible with your version of node/npm: ts-api-utils@1.0.3
2024-01-24T06:08:07.9335524Z npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^2.3.2 (node_modules/jest-haste-map/node_modules/fsevents):
2024-01-24T06:08:07.9337963Z npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""linux"",""arch"":""x64""})
2024-01-24T06:08:07.9381738Z npm WARN javascript No license field.
2024-01-24T06:08:07.9384374Z 
2024-01-24T06:08:07.9401324Z added 424 packages from 292 contributors and audited 425 packages in 9.065s
2024-01-24T06:08:08.0605278Z 
2024-01-24T06:08:08.0606140Z 67 packages are looking for funding
2024-01-24T06:08:08.0606873Z   run `npm fund` for details
2024-01-24T06:08:08.0607506Z 
2024-01-24T06:08:08.0609762Z found 0 vulnerabilities
2024-01-24T06:08:08.0610135Z 
2024-01-24T06:08:08.1084184Z + npm run test
2024-01-24T06:08:08.2738323Z 
2024-01-24T06:08:08.2739826Z > @ test /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:08.2740976Z > npm run build && jest
2024-01-24T06:08:08.2741362Z 
2024-01-24T06:08:08.4653093Z 
2024-01-24T06:08:08.4654535Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:08.4656220Z > npm run build -w packages/fury -w packages/hps
2024-01-24T06:08:08.4656995Z 
2024-01-24T06:08:08.6349499Z 
2024-01-24T06:08:08.6351581Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:08.6353735Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps""
2024-01-24T06:08:08.6354589Z 
2024-01-24T06:08:08.8094417Z 
2024-01-24T06:08:08.8095754Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:08.8097621Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:08.8098583Z 
2024-01-24T06:08:08.9978316Z 
2024-01-24T06:08:08.9979613Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:08.9982033Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:08.9983396Z 
2024-01-24T06:08:09.1679033Z 
2024-01-24T06:08:09.1680483Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:09.1683416Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:09.1684766Z 
2024-01-24T06:08:09.3417859Z 
2024-01-24T06:08:09.3419461Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:09.3421730Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:09.3423289Z 
2024-01-24T06:08:09.5152304Z 
2024-01-24T06:08:09.5153631Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:09.5157213Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:09.5159266Z 
2024-01-24T06:08:09.6849385Z 
2024-01-24T06:08:09.6851176Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:09.6855323Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:09.6856907Z 
2024-01-24T06:08:09.8540916Z 
2024-01-24T06:08:09.8542249Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:09.8546426Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:09.8549324Z 
2024-01-24T06:08:10.0315180Z 
2024-01-24T06:08:10.0316421Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.0320172Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.0321998Z 
2024-01-24T06:08:10.2036220Z 
2024-01-24T06:08:10.2037618Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.2041538Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.2043412Z 
2024-01-24T06:08:10.3785168Z 
2024-01-24T06:08:10.3786721Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.3790718Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.3793052Z 
2024-01-24T06:08:10.5510422Z 
2024-01-24T06:08:10.5511927Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.5516987Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.5519466Z 
2024-01-24T06:08:10.7261798Z 
2024-01-24T06:08:10.7263110Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.7268408Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.7271094Z 
2024-01-24T06:08:10.8990209Z 
2024-01-24T06:08:10.8991739Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:10.8996098Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:10.8999023Z 
2024-01-24T06:08:11.0736608Z 
2024-01-24T06:08:11.0738135Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.0743549Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.0746711Z 
2024-01-24T06:08:11.2481539Z 
2024-01-24T06:08:11.2482919Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.2488509Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.2491459Z 
2024-01-24T06:08:11.4238786Z 
2024-01-24T06:08:11.4240174Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.4245100Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.4248123Z 
2024-01-24T06:08:11.5973969Z 
2024-01-24T06:08:11.5975472Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.5982427Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.5985858Z 
2024-01-24T06:08:11.7750372Z 
2024-01-24T06:08:11.7751790Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.7759620Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.7763582Z 
2024-01-24T06:08:11.9514724Z 
2024-01-24T06:08:11.9515995Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:11.9522635Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:11.9526261Z 
2024-01-24T06:08:12.1274721Z 
2024-01-24T06:08:12.1276242Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:12.1284031Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:12.1288310Z 
2024-01-24T06:08:12.3049985Z 
2024-01-24T06:08:12.3051482Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:12.3057649Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:12.3061539Z 
2024-01-24T06:08:12.4821414Z 
2024-01-24T06:08:12.4822674Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:12.4829145Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:12.4833689Z 
2024-01-24T06:08:12.6609874Z 
2024-01-24T06:08:12.6611316Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:12.6619141Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:12.6623435Z 
2024-01-24T06:08:12.8403582Z 
2024-01-24T06:08:12.8404810Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:12.8412011Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:12.8416491Z 
2024-01-24T06:08:13.0197910Z 
2024-01-24T06:08:13.0199381Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.0206792Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.0211746Z 
2024-01-24T06:08:13.1998009Z 
2024-01-24T06:08:13.1999416Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.2009580Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.2018676Z 
2024-01-24T06:08:13.3798250Z 
2024-01-24T06:08:13.3799628Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.3806999Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.3811884Z 
2024-01-24T06:08:13.5625573Z 
2024-01-24T06:08:13.5627034Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.5637921Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.5645307Z 
2024-01-24T06:08:13.7460473Z 
2024-01-24T06:08:13.7461807Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.7470217Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.7475878Z 
2024-01-24T06:08:13.9326413Z 
2024-01-24T06:08:13.9328087Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:13.9338708Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:13.9344207Z 
2024-01-24T06:08:14.1167584Z 
2024-01-24T06:08:14.1169035Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:14.1177619Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:14.1183509Z 
2024-01-24T06:08:14.3036427Z 
2024-01-24T06:08:14.3037665Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:14.3045736Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
2024-01-24T06:08:14.3051652Z 
2024-01-24T06:08:14.4927782Z 
2024-01-24T06:08:14.4929236Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
2024-01-24T06:08:14.4937936Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xshHv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xs-CM,fury,1907613836,1350,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-24T08:17:46Z,2024-01-24T08:17:46Z,"> Hi @theweipeng , I use `npm run test` to replace `node ./node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit`. It works fine in other versions. In node 14, the following content will be executed in a loop
> 
> ```
> 2024-01-24T06:07:58.5271444Z node: v14.21.3
> 2024-01-24T06:07:58.5272246Z npm: 6.14.18
> 2024-01-24T06:07:58.5272952Z yarn: 1.22.21
> 2024-01-24T06:07:58.5273999Z ##[endgroup]
> 2024-01-24T06:07:58.5485934Z ##[group]Run ./ci/run_ci.sh javascript
> 2024-01-24T06:07:58.5486484Z �[36;1m./ci/run_ci.sh javascript�[0m
> 2024-01-24T06:07:58.5553617Z shell: /usr/bin/bash -e {0}
> 2024-01-24T06:07:58.5554176Z ##[endgroup]
> 2024-01-24T06:07:58.5736872Z ++ git rev-parse --show-toplevel
> 2024-01-24T06:07:58.5749345Z + ROOT=/home/runner/work/incubator-fury/incubator-fury
> 2024-01-24T06:07:58.5750967Z + echo 'Root path: /home/runner/work/incubator-fury/incubator-fury, home path: /home/runner'
> 2024-01-24T06:07:58.5752611Z + cd /home/runner/work/incubator-fury/incubator-fury
> 2024-01-24T06:07:58.5754100Z Root path: /home/runner/work/incubator-fury/incubator-fury, home path: /home/runner
> 2024-01-24T06:07:58.5757504Z + JDKS=(""zulu21.28.85-ca-jdk21.0.0-linux_x64"" ""zulu17.44.17-ca-crac-jdk17.0.8-linux_x64"" ""zulu15.46.17-ca-jdk15.0.10-linux_x64"" ""zulu13.54.17-ca-jdk13.0.14-linux_x64"" ""zulu11.66.15-ca-jdk11.0.20-linux_x64"" ""zulu8.72.0.17-ca-jdk8.0.382-linux_x64"")
> 2024-01-24T06:07:58.5759947Z + case $1 in
> 2024-01-24T06:07:58.5760398Z + set +e
> 2024-01-24T06:07:58.5760948Z + echo 'Executing fury javascript tests'
> 2024-01-24T06:07:58.5761630Z + cd /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:07:58.5762205Z + npm install
> 2024-01-24T06:07:58.5762640Z Executing fury javascript tests
> 2024-01-24T06:08:07.8944596Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.8946840Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin@1.5.4
> 2024-01-24T06:08:07.8978466Z npm WARN notsup Unsupported engine for ts-jest@29.1.2: wanted: {""node"":""^16.10.0 || ^18.0.0 || >=20.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.8980403Z npm WARN notsup Not compatible with your version of node/npm: ts-jest@29.1.2
> 2024-01-24T06:08:07.9010354Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-js@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9012745Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-js@1.5.4
> 2024-01-24T06:08:07.9061931Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-jsx@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9064574Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-jsx@1.5.4
> 2024-01-24T06:08:07.9098198Z npm WARN notsup Unsupported engine for @stylistic/eslint-plugin-ts@1.5.4: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9100998Z npm WARN notsup Not compatible with your version of node/npm: @stylistic/eslint-plugin-ts@1.5.4
> 2024-01-24T06:08:07.9136823Z npm WARN notsup Unsupported engine for @typescript-eslint/utils@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9139505Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/utils@6.19.1
> 2024-01-24T06:08:07.9168402Z npm WARN notsup Unsupported engine for @typescript-eslint/types@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9171322Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/types@6.19.1
> 2024-01-24T06:08:07.9199107Z npm WARN notsup Unsupported engine for @typescript-eslint/scope-manager@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9201472Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/scope-manager@6.19.1
> 2024-01-24T06:08:07.9239429Z npm WARN notsup Unsupported engine for @typescript-eslint/typescript-estree@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9242325Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/typescript-estree@6.19.1
> 2024-01-24T06:08:07.9268364Z npm WARN notsup Unsupported engine for @typescript-eslint/visitor-keys@6.19.1: wanted: {""node"":""^16.0.0 || >=18.0.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9270634Z npm WARN notsup Not compatible with your version of node/npm: @typescript-eslint/visitor-keys@6.19.1
> 2024-01-24T06:08:07.9295423Z npm WARN notsup Unsupported engine for ts-api-utils@1.0.3: wanted: {""node"":"">=16.13.0""} (current: {""node"":""14.21.3"",""npm"":""6.14.18""})
> 2024-01-24T06:08:07.9297314Z npm WARN notsup Not compatible with your version of node/npm: ts-api-utils@1.0.3
> 2024-01-24T06:08:07.9335524Z npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^2.3.2 (node_modules/jest-haste-map/node_modules/fsevents):
> 2024-01-24T06:08:07.9337963Z npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""linux"",""arch"":""x64""})
> 2024-01-24T06:08:07.9381738Z npm WARN javascript No license field.
> 2024-01-24T06:08:07.9384374Z 
> 2024-01-24T06:08:07.9401324Z added 424 packages from 292 contributors and audited 425 packages in 9.065s
> 2024-01-24T06:08:08.0605278Z 
> 2024-01-24T06:08:08.0606140Z 67 packages are looking for funding
> 2024-01-24T06:08:08.0606873Z   run `npm fund` for details
> 2024-01-24T06:08:08.0607506Z 
> 2024-01-24T06:08:08.0609762Z found 0 vulnerabilities
> 2024-01-24T06:08:08.0610135Z 
> 2024-01-24T06:08:08.1084184Z + npm run test
> 2024-01-24T06:08:08.2738323Z 
> 2024-01-24T06:08:08.2739826Z > @ test /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:08.2740976Z > npm run build && jest
> 2024-01-24T06:08:08.2741362Z 
> 2024-01-24T06:08:08.4653093Z 
> 2024-01-24T06:08:08.4654535Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:08.4656220Z > npm run build -w packages/fury -w packages/hps
> 2024-01-24T06:08:08.4656995Z 
> 2024-01-24T06:08:08.6349499Z 
> 2024-01-24T06:08:08.6351581Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:08.6353735Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:08.6354589Z 
> 2024-01-24T06:08:08.8094417Z 
> 2024-01-24T06:08:08.8095754Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:08.8097621Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:08.8098583Z 
> 2024-01-24T06:08:08.9978316Z 
> 2024-01-24T06:08:08.9979613Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:08.9982033Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:08.9983396Z 
> 2024-01-24T06:08:09.1679033Z 
> 2024-01-24T06:08:09.1680483Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:09.1683416Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:09.1684766Z 
> 2024-01-24T06:08:09.3417859Z 
> 2024-01-24T06:08:09.3419461Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:09.3421730Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:09.3423289Z 
> 2024-01-24T06:08:09.5152304Z 
> 2024-01-24T06:08:09.5153631Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:09.5157213Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:09.5159266Z 
> 2024-01-24T06:08:09.6849385Z 
> 2024-01-24T06:08:09.6851176Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:09.6855323Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:09.6856907Z 
> 2024-01-24T06:08:09.8540916Z 
> 2024-01-24T06:08:09.8542249Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:09.8546426Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:09.8549324Z 
> 2024-01-24T06:08:10.0315180Z 
> 2024-01-24T06:08:10.0316421Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.0320172Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.0321998Z 
> 2024-01-24T06:08:10.2036220Z 
> 2024-01-24T06:08:10.2037618Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.2041538Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.2043412Z 
> 2024-01-24T06:08:10.3785168Z 
> 2024-01-24T06:08:10.3786721Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.3790718Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.3793052Z 
> 2024-01-24T06:08:10.5510422Z 
> 2024-01-24T06:08:10.5511927Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.5516987Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.5519466Z 
> 2024-01-24T06:08:10.7261798Z 
> 2024-01-24T06:08:10.7263110Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.7268408Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.7271094Z 
> 2024-01-24T06:08:10.8990209Z 
> 2024-01-24T06:08:10.8991739Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:10.8996098Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:10.8999023Z 
> 2024-01-24T06:08:11.0736608Z 
> 2024-01-24T06:08:11.0738135Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.0743549Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.0746711Z 
> 2024-01-24T06:08:11.2481539Z 
> 2024-01-24T06:08:11.2482919Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.2488509Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.2491459Z 
> 2024-01-24T06:08:11.4238786Z 
> 2024-01-24T06:08:11.4240174Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.4245100Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.4248123Z 
> 2024-01-24T06:08:11.5973969Z 
> 2024-01-24T06:08:11.5975472Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.5982427Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.5985858Z 
> 2024-01-24T06:08:11.7750372Z 
> 2024-01-24T06:08:11.7751790Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.7759620Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.7763582Z 
> 2024-01-24T06:08:11.9514724Z 
> 2024-01-24T06:08:11.9515995Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:11.9522635Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:11.9526261Z 
> 2024-01-24T06:08:12.1274721Z 
> 2024-01-24T06:08:12.1276242Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:12.1284031Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:12.1288310Z 
> 2024-01-24T06:08:12.3049985Z 
> 2024-01-24T06:08:12.3051482Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:12.3057649Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:12.3061539Z 
> 2024-01-24T06:08:12.4821414Z 
> 2024-01-24T06:08:12.4822674Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:12.4829145Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:12.4833689Z 
> 2024-01-24T06:08:12.6609874Z 
> 2024-01-24T06:08:12.6611316Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:12.6619141Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:12.6623435Z 
> 2024-01-24T06:08:12.8403582Z 
> 2024-01-24T06:08:12.8404810Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:12.8412011Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:12.8416491Z 
> 2024-01-24T06:08:13.0197910Z 
> 2024-01-24T06:08:13.0199381Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.0206792Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.0211746Z 
> 2024-01-24T06:08:13.1998009Z 
> 2024-01-24T06:08:13.1999416Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.2009580Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.2018676Z 
> 2024-01-24T06:08:13.3798250Z 
> 2024-01-24T06:08:13.3799628Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.3806999Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.3811884Z 
> 2024-01-24T06:08:13.5625573Z 
> 2024-01-24T06:08:13.5627034Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.5637921Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.5645307Z 
> 2024-01-24T06:08:13.7460473Z 
> 2024-01-24T06:08:13.7461807Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.7470217Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.7475878Z 
> 2024-01-24T06:08:13.9326413Z 
> 2024-01-24T06:08:13.9328087Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:13.9338708Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:13.9344207Z 
> 2024-01-24T06:08:14.1167584Z 
> 2024-01-24T06:08:14.1169035Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:14.1177619Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:14.1183509Z 
> 2024-01-24T06:08:14.3036427Z 
> 2024-01-24T06:08:14.3037665Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:14.3045736Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> 2024-01-24T06:08:14.3051652Z 
> 2024-01-24T06:08:14.4927782Z 
> 2024-01-24T06:08:14.4929236Z > @ build /home/runner/work/incubator-fury/incubator-fury/javascript
> 2024-01-24T06:08:14.4937936Z > npm run build -w packages/fury -w packages/hps ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps"" ""packages/fury"" ""packages/hps""
> ```

Thank you for the report!
It looks like `npm: 6.14.18` doesn't support workspaces, so I will deal with it in another PR that fixes the compile error on Windows.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xs-CM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x172l,fury,1909964197,1350,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-01-25T11:25:27Z,2024-01-25T11:25:27Z,@LiangliangSui  The fix PR has been merged. Could you help to retry it? ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x172l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x2qpC,fury,1910155842,1350,NA,LiangliangSui,116876207,,,NA,2024-01-25T12:55:52Z,2024-01-25T12:55:52Z,"@theweipeng When using `npm run build` or `npm run test`, the hps module will still be compiled, resulting in an error.

Perhaps the reason is that the build script of the hps module will still be called when using `npm run build`. We should also ignore it when the node version is less than 20.

I submitted a PR which should fix this problem, ptal. https://github.com/apache/incubator-fury/pull/1357

Thank you!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x2qpC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1350,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x33f5,fury,1910470649,1350,NA,LiangliangSui,116876207,,,NA,2024-01-25T15:44:24Z,2024-01-25T15:44:24Z,"Thanks again for the help. The problem has been solved, so I will close this issue.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x33f5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1351,https://api.github.com/repos/apache/fury/issues/1351,fury,2094662225,1351,Fury:Java create a Maven / Gradle plugin for build time compiling and packaging,Maurice-Betzel,16353975,Maurice Betzel,,CLOSED,2024-01-22T20:06:36Z,2024-01-25T13:32:55Z,"## Provide a Maven / Gradle Fury plugin  for generating, compiling and packaging Fury serde classes during build.

## Describe the solution you'd like
Create the serde classes beforehand avoiding runtime penalties.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1351/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1351,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xr8_q,fury,1907347434,1351,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-24T04:12:02Z,2024-01-24T04:12:02Z,"We can implement an annotation processor to generate code at build time, I think that can solve this issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xr8_q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1351,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xw9ns,fury,1908660716,1351,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-24T18:04:39Z,2024-01-24T18:04:39Z,"> We can implement an annotation processor to generate code at build time, I think that can solve this issue

So the annotation is added to the class in question needing a serde class? How to annotate plain Java exceptions or third party classes?  In this case it also adds an extra Fury dependency on those classes. With a Maven plugin I could just add what I want to the plug-ins configuration no matter what origin of the class. I always try to avoid those annotations because then I must install and maintain the lib providing them on remote runtimes not using Fury instances as well. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xw9ns/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1351,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x1X68,fury,1909817020,1351,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-25T10:11:29Z,2024-01-25T10:11:29Z,"You can write an empty class, and annotate it to generate serializers for  other classes. Both annotation processor and maven plugin are executed at compile time, it doesn't introduce extra runtime dependencies. Think it as lombok.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x1X68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1351,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x283i,fury,1910230498,1351,NA,Maurice-Betzel,16353975,Maurice Betzel,,NA,2024-01-25T13:32:55Z,2024-01-25T13:32:55Z,"Empty classes and Lombok, both stuff I do not like. I will create a simple first version.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5x283i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1352,https://api.github.com/repos/apache/fury/issues/1352,fury,2095168812,1352,Class io.fury.exception.ClassNotCompatibleException not found from classloaders ,leeco-cloud,30429349,lee,,OPEN,2024-01-23T03:27:08Z,2024-01-23T03:27:08Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

io.fury：0.11.3

### Component(s)

Java

### Minimal reproduce step

java.lang.IllegalStateException
: Class io.fury.exception.ClassNotCompatibleException not found from classloaders [com.alibaba.global.container.core.classloader.ContainerClassLoader
@5b115d71, com.alibaba.global.container.core.classloader.ContainerClassLoader@5b115d71]
	at io.fury.resolver.ClassResolver.loadClass(ClassResolver.java:1661)
	at io.fury.resolver.ClassResolver.loadBytesToClass(ClassResolver.java:1609)
	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1584)
	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1566)
	at io.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1508)
	at com.alibaba.global.voyager.boot.ipc.protocol.IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.readField1$
(IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.java:291)
	at com.alibaba.global.voyager.boot.ipc.protocol.IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.readSeparateTypesHashFields$(IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.java:317)
	at com.alibaba.global.voyager.boot.ipc.protocol.IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.read(IpcResponseFuryRefCompatibleCodec_199901513_1619402333_1456389706.java:381)
	at io.fury.Fury.readData(Fury.java:819)
	at io.fury.Fury.readReferencableFromJava(Fury.java:727)
	at io.fury.Fury.deserializeInternal(Fury.java:690)
	at io.fury.Fury.deserialize(Fury.java:600)
	at io.fury.ThreadSafeLocalFury.deserialize(ThreadSafeLocalFury.java:50)
	at com.alibaba.global.voyager.boot.ipc.serialization.fury.FurySerializer.deserialize(FurySerializer.java:31)

### What did you expect to see?

-

### What did you see instead?

-

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1352/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1354,https://api.github.com/repos/apache/fury/issues/1354,fury,2095944436,1354,[Scala] use Maven for build,pjfanning,11783444,PJ Fanning,,OPEN,2024-01-23T12:10:04Z,2024-01-24T03:59:31Z,"With Maven, you get to reuse all the plugins that are used to customise the jars and the deployment (that are used in Java build). Maven has a Scala plugin.

I use sbt a lot. We are stuck with sbt in Apache Pekko but we are having to write a lot of sbt plugins - with more still required.

I think the pros and cons for Apache Fury favour using Maven instead. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1354/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1354,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xr02w,fury,1907314096,1354,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-01-24T03:59:30Z,2024-01-24T03:59:30Z,"Looks good to me, using maven can avoid to setup sbt and learn how to use sbt. And the fury scala build is not complex, maven scala plugin is more simple","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5xr02w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1359,https://api.github.com/repos/apache/fury/issues/1359,fury,2104145644,1359,[Golang] unmarshal to struct,Nyx2022,51039208,Nyx2023,,OPEN,2024-01-28T12:41:05Z,2024-03-06T10:07:57Z,"## Is your feature request related to a problem? Please describe.
when i marshal a map in java,and send it by internet to a golang program,i only can unmarshal it to a interface{},but i want and need unmarshal it to a struct in golang so that i can get or set attribute easily,but no i unmarshal it to a struct ,i will get a err like:""reflect.Value.IsNil""

## Describe the solution you'd like
support unmarshal to struct in golang

## Additional context

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1359/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1359,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ymyNq,fury,1922769770,1359,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-02T04:01:21Z,2024-02-02T04:01:21Z,"Hi @Nyx2022, thanks for reporting this issue. Could you provide some test code here?
Fury supports deserialized to struct directly:
```go
a := &A{}
a.A1 = a
bytes, err := fury.Marshal(a)
require.Nil(t, err)
var a1 *A
err = fury.Unmarshal(bytes, &a1)
require.Nil(t, err)
require.Same(t, a1, a1.A1)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5ymyNq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1359,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50SadU,fury,1950984020,1359,NA,Nyx2022,51039208,Nyx2023,,NA,2024-02-18T07:02:20Z,2024-02-18T07:02:20Z,"> Hi @Nyx2022, thanks for reporting this issue. Could you provide some test code here?嗨，感谢您报告此问题。你能在这里提供一些测试代码吗？ Fury supports deserialized to struct directly:Fury 支持直接反序列化为 struct：
> 
> ```go
> a := &A{}
> a.A1 = a
> bytes, err := fury.Marshal(a)
> require.Nil(t, err)
> var a1 *A
> err = fury.Unmarshal(bytes, &a1)
> require.Nil(t, err)
> require.Same(t, a1, a1.A1)
> ```


i marshal some data in java and save bytes into a file,

```java

    public static Map<String, String> createObject() {

        Map<String, String> m = new HashMap<String, String>();

        m.put(""a"", ""4"");
        m.put(""b"", ""3"");
        m.put(""c"", ""2"");
        m.put(""d"", ""1"");

        return m;
    }

    public static void main(String[] args) {

        System.out.println(""Hello world!"");


        Fury fury = Fury.builder().withLanguage(Language.XLANG)
                .withRefTracking(true).build();


        byte[] bytes = fury.serialize(createObject());

        System.out.println(bytes.length);


        try {
            Files.write(Paths.get(""d:/fury.txt""), bytes);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        System.out.println(new String(bytes));
        System.out.println(fury.deserialize(bytes));
    }

```


then read from file and unmarhal to a struct in golang:

the type T is 

```go
type T struct {
	A string `json:""a""`
	B string `json:""b""`
	C string `json:""c""`
	D string `json:""d""`
}
```

```go

        fury := furygo.NewFury(true)
	

	file, err := os.ReadFile(""d:/fury.txt"")
	if err == nil && len(file) > 0 {
		var Caches21 map[interface{}]*T
		start1 := time.Now()
		err6 := fury.Unmarshal(file, &Caches21)
		if err6 == nil {
			fmt.Println(""fury 反序列化耗时："" + time.Now().Sub(start1).String())
			fmt.Println(Caches21)
		}

	}

```

but the error occured :
![image](https://github.com/apache/incubator-fury/assets/51039208/447f42a6-d768-42a4-adf6-3c549b0b433a)

so how can i use fury in multi langs
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50SadU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1359,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52DDrA,fury,1980512960,1359,NA,longbai,1204301,Bai Loong,,NA,2024-03-06T10:07:56Z,2024-03-06T10:07:56Z,"val := event.Query{
        Nat:    1,
        Ip:     ""193.1.2.3"",
        Url:    ""http://baidu.com"",
        Status: 0,
    }
    fury_ := fury.NewFury(true)
    if err := fury_.RegisterTagType(""example.SomeClass"", event.Query{}); err != nil {
        panic(err)
    }

    bt, err := fury_.Marshal(&val)
    if err != nil {
        b.Log(err)
        return
    }
   
       _ = fury_.Unmarshal(bt, &newval)
       }
       报错 
       panic: reflect.Set: value of type *event.Query is not assignable to type event.Query
而且Readme里的文档 是用interface{}, 不是结构体。
测试无论是序列化反序列化 比Go标准库的json 的时间都不如
    ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52DDrA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1362,https://api.github.com/repos/apache/fury/issues/1362,fury,2114555461,1362,[Java] Performance compared with JdkSerializationRedisSerializer,liudaac,2231449,,,CLOSED,2024-02-02T10:05:26Z,2024-02-20T06:46:08Z,"MyCode

[public class FuryRedisSerializer implements RedisSerializer<Object> {

	private ThreadSafeFury fury = Fury.builder()
			  .withLanguage(Language.JAVA)
			  .withRefTracking(false)
			  .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
			  .withAsyncCompilation(true)
			  .requireClassRegistration(false)
			  .buildThreadSafeFury();
	
	@Override
	public byte[] serialize(Object value) throws SerializationException {
		// TODO Auto-generated method stub
		byte[] bytes = fury.serialize(value);
		return bytes;
	}

	@Override
	public Object deserialize(byte[] bytes) throws SerializationException {
		// TODO Auto-generated method stub
		return fury.deserialize(bytes);
	}
	
	@SuppressWarnings(""rawtypes"")
	public static void main(String[] args) {
		String test = ""wqweqweqewqeqweqweqeqweqweqweqwe"";
		FuryRedisSerializer serializer = new FuryRedisSerializer();
		long start1 = System.currentTimeMillis();
		byte[] datas = serializer.serialize(test);
		String out1 = (String)serializer.deserialize(datas);
		long end1 = System.currentTimeMillis();
		
                System.out.println(out1 + ""    ""+(end1 - start1));
		
		JdkSerializationRedisSerializer jdkSerializer = new JdkSerializationRedisSerializer();
		long start2 = System.currentTimeMillis();
		byte[] datas2 = jdkSerializer.serialize(test);
		String out2 = (String)jdkSerializer.deserialize(datas2);
		long end2 = System.currentTimeMillis();
		
                System.out.println(out2 + ""    ""+(end2 - start2));
		
		HttpError httpError = HttpError.instance(AradinCodedEnum.OK, test);
		start1 = System.currentTimeMillis();
		datas = serializer.serialize(httpError);
		HttpError httpError1 = (HttpError)serializer.deserialize(datas);
		end1 = System.currentTimeMillis();
		
		System.out.println(httpError1.getCoded() + ""    ""+(end1 - start1));
		
		start2 = System.currentTimeMillis();
		datas2 = jdkSerializer.serialize(httpError);
		HttpError httpError2 = (HttpError)jdkSerializer.deserialize(datas2);
		end2 = System.currentTimeMillis();

		System.out.println(httpError2.getCoded() + ""    ""+(end2 - start2));
	}
}](https://github.com/liudaac/aradin/blob/main/aradin-spring/aradin-spring-redis-starter/src/main/java/cn/aradin/spring/redis/starter/serializer/FuryRedisSerializer.java)

The main method`s output is below

wqweqweqewqeqweqweqeqweqweqweqwe    2
wqweqweqewqeqweqweqeqweqweqweqwe    4
OK    44
OK    1

So does fury really improve performance like your benchmark-show?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1362/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1362,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yputP,fury,1923541839,1362,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-02T10:42:41Z,2024-02-02T10:42:41Z,"@liudaac You need to warm up before collecting metrics, and execute many times for compute timing. I suggest to use jmh tools for such benchmark","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yputP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1362,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yp2Ly,fury,1923572466,1362,NA,liudaac,2231449,,,NA,2024-02-02T11:02:09Z,2024-02-02T11:02:09Z,"I tested it according to the way you said, excluding the first time, and indeed the subsequent performance is better. Thanks. 
What operation caused the long delay during the first time?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yp2Ly/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1362,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yp9Pg,fury,1923601376,1362,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-02T11:18:57Z,2024-02-02T11:18:57Z,"Fury will generate code at the first time, the codegen is slow","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5yp9Pg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1363,https://api.github.com/repos/apache/fury/issues/1363,fury,2117878760,1363,"[Java] CodeGen Issue: Assignment conversion not possible from type ""java.lang.Object"" to type ""org.zkoss.zhtml.Object""",cn-at-osmit,144779930,,,CLOSED,2024-02-05T07:43:04Z,2024-02-08T04:37:21Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

fury 0.4.1, Java 21, macOS 14.3

### Component(s)

Java

### Minimal reproduce step

Import these dependencies in pom.xml:
```xml
	<dependencies>
		<dependency>
			<groupId>org.furyio</groupId>
			<artifactId>fury-core</artifactId>
			<version>0.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.zkoss.zk</groupId>
			<artifactId>zhtml</artifactId>
			<version>9.6.0.2-jakarta</version>
		</dependency>
		<!-- Requried to make slf4j and to see the stacktrace -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.30</version>
		</dependency>
	</dependencies>
```
And start codegen for any class from `org.zkoss.zhtml`:
```java
  Fury fury = Fury.builder().build();
  fury.register(org.zkoss.zhtml.Text.class, true);
```

### What did you expect to see?

A working fury instance ;)

### What did you see instead?

A stacktrace:
```
[main] INFO io.fury.Fury - Created new fury io.fury.Fury@1e965684
[main] WARN io.fury.serializer.ObjectStreamSerializer - class org.zkoss.zhtml.Text customized jdk serialization, which is inefficient. Please replace it with a io.fury.serializer.Serializer or implements java.io.Externalizable
[main] INFO io.fury.codegen.CompileUnit - Generate code for org.zkoss.zhtml.TextFuryCompatibleCodec_1_414493378_1883919084 took 75 ms.
Exception in thread ""main"" io.fury.codegen.CodegenException: Compile error: 
org.zkoss.zhtml.TextFuryCompatibleCodec_1_414493378_1883919084:
/* 0001 */ package org.zkoss.zhtml;
/* 0002 */ 
/* 0003 */ import java.util.List;
/* 0004 */ import java.util.Map;
/* 0005 */ import java.util.Set;
/* 0006 */ import io.fury.Fury;
/* 0007 */ import io.fury.memory.MemoryBuffer;
/* 0008 */ import io.fury.resolver.NoRefResolver;
/* 0009 */ import io.fury.resolver.ClassInfo;
/* 0010 */ import io.fury.resolver.ClassInfoHolder;
/* 0011 */ import io.fury.resolver.ClassResolver;
/* 0012 */ import io.fury.builder.Generated;
/* 0013 */ import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0014 */ import io.fury.serializer.Serializers.EnumSerializer;
/* 0015 */ import io.fury.serializer.Serializer;
/* 0016 */ import io.fury.serializer.StringSerializer;
/* 0017 */ import io.fury.serializer.ObjectSerializer;
/* 0018 */ import io.fury.serializer.CompatibleSerializer;
/* 0019 */ import io.fury.serializer.collection.AbstractCollectionSerializer;
/* 0020 */ import io.fury.serializer.collection.AbstractMapSerializer;
/* 0021 */ import io.fury.builder.Generated.GeneratedCompatibleSerializer;
/* 0022 */ 
/* 0023 */ public final class TextFuryCompatibleCodec_1_414493378_1883919084 extends GeneratedCompatibleSerializer {
/* 0024 */ 
/* 0025 */   private final NoRefResolver refResolver;
/* 0026 */   private final ClassResolver classResolver;
/* 0027 */   private final StringSerializer strSerializer;
/* 0028 */   private final io.fury.resolver.FieldResolver fieldResolver;
/* 0029 */   private Fury fury;
/* 0030 */ 
/* 0031 */   public TextFuryCompatibleCodec_1_414493378_1883919084(Fury fury, Class classType) {
/* 0032 */       super(fury, classType);
/* 0033 */       this.fury = fury;
/* 0034 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0035 */   
/* 0036 */       io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0037 */       refResolver = ((NoRefResolver)refResolver0);
/* 0038 */       classResolver = fury.getClassResolver();
/* 0039 */       strSerializer = fury.getStringSerializer();
/* 0040 */       fieldResolver = classResolver.getFieldResolver(org.zkoss.zhtml.Text.class);
/* 0041 */   }
/* 0042 */ 
/* 0043 */   private void writeEmbedTypesHashFields(MemoryBuffer memoryBuffer, org.zkoss.zhtml.Text text1) {
/* 0044 */       memoryBuffer.writeLong(-8496222313227271017L);
/* 0045 */       Object object1 = io.fury.util.Platform.getObject(text1, 68L);
/* 0046 */       Integer _tabindex = (Integer)object1;
/* 0047 */       if ((_tabindex == null)) {
/* 0048 */           memoryBuffer.writeByte(((byte)-3));
/* 0049 */       } else {
/* 0050 */           memoryBuffer.writeByte(((byte)0));
/* 0051 */           memoryBuffer.writeVarInt(_tabindex);
/* 0052 */       }
/* 0053 */       memoryBuffer.writeLong(-7420538388875177801L);
/* 0054 */       Object object22 = io.fury.util.Platform.getObject(text1, 64L);
/* 0055 */       String _value = (String)object22;
/* 0056 */       if ((_value == null)) {
/* 0057 */           memoryBuffer.writeByte(((byte)-3));
/* 0058 */       } else {
/* 0059 */           memoryBuffer.writeByte(((byte)0));
/* 0060 */           strSerializer.writeCharsStringCompressed(memoryBuffer, _value);
/* 0061 */       }
/* 0062 */       memoryBuffer.writeLong(3973317070855116847L);
/* 0063 */       boolean value3 = io.fury.util.Platform.getBoolean(text1, 60L);
/* 0064 */       memoryBuffer.writeBoolean(value3);
/* 0065 */   }
/* 0066 */ 
/* 0067 */   private long readEmbedTypesHashFields(long value0, MemoryBuffer memoryBuffer1, org.zkoss.zhtml.Text text2) {
/* 0068 */       StringSerializer strSerializer = this.strSerializer;
/* 0069 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0070 */       if ((value0 == -8496222313227271017L)) {
/* 0071 */           if ((memoryBuffer1.readByte() != ((byte)-3))) {
/* 0072 */               int value1 = memoryBuffer1.readVarInt();
/* 0073 */               io.fury.util.Platform.putObject(text2, 68L, ((Integer)value1));
/* 0074 */           } else {
/* 0075 */               io.fury.util.Platform.putObject(text2, 68L, null);
/* 0076 */           }
/* 0077 */           value0 = memoryBuffer1.readLong();
/* 0078 */       } else {
/* 0079 */           while ((((value0 & 7L) == ((byte)7)) && (value0 < -8496222313227271017L))) {
/* 0080 */             if ((fieldResolver.skipDataBy8(memoryBuffer1, value0) == 9223372036854775806L)) {
/* 0081 */                 return 9223372036854775806L;
/* 0082 */             }
/* 0083 */             value0 = memoryBuffer1.readLong();
/* 0084 */           }
/* 0085 */           if ((value0 == -8496222313227271017L)) {
/* 0086 */               if ((memoryBuffer1.readByte() != ((byte)-3))) {
/* 0087 */                   int value5 = memoryBuffer1.readVarInt();
/* 0088 */                   io.fury.util.Platform.putObject(text2, 68L, ((Integer)value5));
/* 0089 */               } else {
/* 0090 */                   io.fury.util.Platform.putObject(text2, 68L, null);
/* 0091 */               }
/* 0092 */               value0 = memoryBuffer1.readLong();
/* 0093 */           }
/* 0094 */       }
/* 0095 */       if ((value0 == -7420538388875177801L)) {
/* 0096 */           if ((memoryBuffer1.readByte() != ((byte)-3))) {
/* 0097 */               String string = strSerializer.readCompressedCharsString(memoryBuffer1);
/* 0098 */               io.fury.util.Platform.putObject(text2, 64L, string);
/* 0099 */           } else {
/* 0100 */               io.fury.util.Platform.putObject(text2, 64L, null);
/* 0101 */           }
/* 0102 */           value0 = memoryBuffer1.readLong();
/* 0103 */       } else {
/* 0104 */           while ((((value0 & 7L) == ((byte)7)) && (value0 < -7420538388875177801L))) {
/* 0105 */             if ((fieldResolver.skipDataBy8(memoryBuffer1, value0) == 9223372036854775806L)) {
/* 0106 */                 return 9223372036854775806L;
/* 0107 */             }
/* 0108 */             value0 = memoryBuffer1.readLong();
/* 0109 */           }
/* 0110 */           if ((value0 == -7420538388875177801L)) {
/* 0111 */               if ((memoryBuffer1.readByte() != ((byte)-3))) {
/* 0112 */                   String string1 = strSerializer.readCompressedCharsString(memoryBuffer1);
/* 0113 */                   io.fury.util.Platform.putObject(text2, 64L, string1);
/* 0114 */               } else {
/* 0115 */                   io.fury.util.Platform.putObject(text2, 64L, null);
/* 0116 */               }
/* 0117 */               value0 = memoryBuffer1.readLong();
/* 0118 */           }
/* 0119 */       }
/* 0120 */       if ((value0 == 3973317070855116847L)) {
/* 0121 */           boolean value12 = memoryBuffer1.readBoolean();
/* 0122 */           io.fury.util.Platform.putBoolean(text2, 60L, value12);
/* 0123 */           value0 = memoryBuffer1.readLong();
/* 0124 */       } else {
/* 0125 */           while ((((value0 & 7L) == ((byte)7)) && (value0 < 3973317070855116847L))) {
/* 0126 */             if ((fieldResolver.skipDataBy8(memoryBuffer1, value0) == 9223372036854775806L)) {
/* 0127 */                 return 9223372036854775806L;
/* 0128 */             }
/* 0129 */             value0 = memoryBuffer1.readLong();
/* 0130 */           }
/* 0131 */           if ((value0 == 3973317070855116847L)) {
/* 0132 */               boolean value14 = memoryBuffer1.readBoolean();
/* 0133 */               io.fury.util.Platform.putBoolean(text2, 60L, value14);
/* 0134 */               value0 = memoryBuffer1.readLong();
/* 0135 */           }
/* 0136 */       }
/* 0137 */       return value0;
/* 0138 */   }
/* 0139 */ 
/* 0140 */   public org.zkoss.zhtml.Text readAndSetFields(MemoryBuffer memoryBuffer2, Object object0) {
/* 0141 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0142 */       long partFieldInfo = memoryBuffer2.readInt();
/* 0143 */       org.zkoss.zhtml.Text bean = (org.zkoss.zhtml.Text)object0;
/* 0144 */       while (((partFieldInfo & 3L) == ((byte)1))) {
/* 0145 */         if ((fieldResolver.skipDataBy4(memoryBuffer2, ((int)partFieldInfo)) == 9223372036854775806L)) {
/* 0146 */             return bean;
/* 0147 */         }
/* 0148 */         partFieldInfo = memoryBuffer2.readInt();
/* 0149 */       }
/* 0150 */       long value16 = memoryBuffer2.readInt();
/* 0151 */       partFieldInfo = ((value16 << 32) | (partFieldInfo & 4294967295L));
/* 0152 */       while (((partFieldInfo & 7L) == ((byte)3))) {
/* 0153 */         if ((fieldResolver.skipDataBy8(memoryBuffer2, partFieldInfo) == 9223372036854775806L)) {
/* 0154 */             return bean;
/* 0155 */         }
/* 0156 */         partFieldInfo = memoryBuffer2.readLong();
/* 0157 */       }
/* 0158 */       while ((((partFieldInfo & 7L) == ((byte)7)) && (partFieldInfo < -8496222313227271017L))) {
/* 0159 */         if ((fieldResolver.skipDataBy8(memoryBuffer2, partFieldInfo) == 9223372036854775806L)) {
/* 0160 */             return bean;
/* 0161 */         }
/* 0162 */         partFieldInfo = memoryBuffer2.readLong();
/* 0163 */       }
/* 0164 */       partFieldInfo = this.readEmbedTypesHashFields(partFieldInfo, memoryBuffer2, bean);
/* 0165 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0166 */           return bean;
/* 0167 */       }
/* 0168 */       while (((partFieldInfo & 7L) == ((byte)7))) {
/* 0169 */         if ((fieldResolver.skipDataBy8(memoryBuffer2, partFieldInfo) == 9223372036854775806L)) {
/* 0170 */             return bean;
/* 0171 */         }
/* 0172 */         partFieldInfo = memoryBuffer2.readLong();
/* 0173 */       }
/* 0174 */       fieldResolver.skipEndFields(memoryBuffer2, partFieldInfo);
/* 0175 */       return bean;
/* 0176 */   }
/* 0177 */ 
/* 0178 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0179 */       org.zkoss.zhtml.Text text3 = (org.zkoss.zhtml.Text)obj;
/* 0180 */       this.writeEmbedTypesHashFields(buffer, text3);
/* 0181 */       buffer.writeLong(9223372036854775806L);
/* 0182 */   }
/* 0183 */ 
/* 0184 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0185 */       org.zkoss.zhtml.Text text4 = new org.zkoss.zhtml.Text();
/* 0186 */       refResolver.reference(text4);
/* 0187 */       Object bean0 = (Object)text4;
/* 0188 */       org.zkoss.zhtml.Text text5 = this.readAndSetFields(buffer, bean0);
/* 0189 */       return text4;
/* 0190 */   }
/* 0191 */ 
/* 0192 */ }
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:126)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:64)
	at io.fury.serializer.ObjectStreamSerializer$SlotsInfo.lambda$new$1(ObjectStreamSerializer.java:348)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.serializer.ObjectStreamSerializer$SlotsInfo.<init>(ObjectStreamSerializer.java:345)
	at io.fury.serializer.ObjectStreamSerializer.<init>(ObjectStreamSerializer.java:118)
	at io.fury.serializer.Serializers.createSerializer(Serializers.java:131)
	at io.fury.serializer.Serializers.newSerializer(Serializers.java:106)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1185)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1116)
	at io.fury.resolver.ClassResolver.getSerializer(ClassResolver.java:761)
	at io.fury.resolver.ClassResolver.register(ClassResolver.java:411)
	at io.fury.Fury.register(Fury.java:153)
	at io.fury.tests.JavaLangIssueDemo.main(JavaLangIssueDemo.java:9)
Caused by: io.fury.shaded.org.codehaus.commons.compiler.CompileException: File 'org/zkoss/zhtml/TextFuryCompatibleCodec_1_414493378_1883919084.java', Line 45, Column 46: Assignment conversion not possible from type ""java.lang.Object"" to type ""org.zkoss.zhtml.Object""
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compileError(UnitCompiler.java:13080)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.assignmentConversion(UnitCompiler.java:11297)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.access$3900(UnitCompiler.java:237)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$7.visitRvalue(UnitCompiler.java:2765)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$7.visitRvalue(UnitCompiler.java:2755)
	at io.fury.shaded.org.codehaus.janino.Java$Rvalue.accept(Java.java:4498)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:2755)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2742)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.access$2700(UnitCompiler.java:237)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$6.visitLocalVariableDeclarationStatement(UnitCompiler.java:1590)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$6.visitLocalVariableDeclarationStatement(UnitCompiler.java:1576)
	at io.fury.shaded.org.codehaus.janino.Java$LocalVariableDeclarationStatement.accept(Java.java:3842)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1576)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1662)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:3665)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3330)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1448)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1421)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:830)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:443)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:237)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:423)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:419)
	at io.fury.shaded.org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1688)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:419)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:393)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.access$000(UnitCompiler.java:237)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:364)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:362)
	at io.fury.shaded.org.codehaus.janino.Java$CompilationUnit.accept(Java.java:371)
	at io.fury.shaded.org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:362)
	at io.fury.shaded.org.codehaus.janino.Compiler.compile2(Compiler.java:271)
	at io.fury.shaded.org.codehaus.janino.Compiler.compile(Compiler.java:213)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:106)
	... 16 more
```

### Anything Else?

ZK is a Java framework for building enterprise web and mobile apps.
They have a Java class matching each html component, so they also have an `object` class https://github.com/zkoss/zk/blob/master/zhtml/src/main/java/org/zkoss/zhtml/Object.java that matches the `object` html tag.

This Object class in `org.zkoss.zhtml` is preferred by the compiler over `java.lang.Object` as it is in the local package.

Thinks work when I keep the `java.lang.` package prefix here: https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/codegen/CodegenContext.java#L286

What is the best approach to solve this?



### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1363/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1363,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y114d,fury,1926716957,1363,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-05T10:58:19Z,2024-02-05T10:58:19Z,"Hi @cn-at-osmit , thanks for reporting this bug. We omitted `java.lang.Object` to `Object` to reduce generated code size for faster parsing and compilation. I didn't consider that the classes in  some package has higher priority than  over `java.lang`. 

Keeping `java.lang` will resolve the issue, but bloat generated code size. How about we check common classes conflict in `CodegenContext`: `Object/Integer/Long/Double/Boolean/Byte/String/Map/Set/List/Collection`, and reserve `java.lang` prefix for other classes?

The conflict check for some package can be cached globally to reduce class locating cost everytime","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y114d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1363,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y3SAR,fury,1927094289,1363,NA,cn-at-osmit,144779930,,,NA,2024-02-05T14:09:50Z,2024-02-05T14:09:50Z,"The conflict check sounds like a good compromise. Although I have also considered whether the check whether a class exists or not could be more expensive than setting the 'java.lang' consistently.
Therefore the cache is important ;)

I'm new to Fury and just about to implement my first use-case, so I'm not very familiar with the internals yet. Hence the questions:
*  Regarding the conflict check: Is there a good helper class I can use or should I do it via Class.forName()?
* Regarding the cache: CodegenContext does not seem to have a global context. Should I only cache within the current CodegenContext instance or create a static field there to cache over multiple instances?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y3SAR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1363,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y-9i4,fury,1929107640,1363,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-06T09:28:52Z,2024-02-06T09:28:52Z,"1. We have a classloader query logic in `org.apache.fury.builder.CodecUtils#loadOrGenCodecClass`:
```java
    ClassLoader beanClassClassLoader =
        beanClass.getClassLoader() == null
            ? Thread.currentThread().getContextClassLoader()
            : beanClass.getClassLoader();
    try {
      // generated code imported fury classes.
      beanClassClassLoader.loadClass(Fury.class.getName());
      codeGenerator = CodeGenerator.getSharedCodeGenerator(beanClassClassLoader);
    } catch (ClassNotFoundException e) {
      codeGenerator =
          CodeGenerator.getSharedCodeGenerator(
              beanClassClassLoader, fury.getClass().getClassLoader());
    }
```

Maybe we should move it to `CodeGenerator`, then use this classloader for `java.lang.ClassLoader#loadClass(java.lang.String)` check.

2. We can create a static `ConcurrentMap` to cache class loading/check result ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5y-9i4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1364,https://api.github.com/repos/apache/fury/issues/1364,fury,2120436795,1364,[java] Java Proxy classes: Reference missing when InvocationHandler holds reference to the Proxy itself.,cn-at-osmit,144779930,,,CLOSED,2024-02-06T10:26:28Z,2024-02-20T03:40:46Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

fury 0.4.1, Java 21, macOS 14.3

### Component(s)

Java

### Minimal reproduce step

Run this testcase: 

```java

	public static class MyInvocationHandler implements InvocationHandler, Serializable {

		private static final long	serialVersionUID	= 1L;

		private Callable<String>	myProxy;

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			return ""Hello world from "" + (myProxy == null ? ""null"" : proxy.getClass().getName() + ""@"" + System.identityHashCode(proxy));
		}

		public void setMyProxy(Callable<String> myProxy) {
			this.myProxy = myProxy;
		}

		public Callable<String> getMyProxy() {
			return myProxy;
		}
	}

	public static void main(String[] args) throws Exception {

		MyInvocationHandler handler = new MyInvocationHandler();
		@SuppressWarnings(""unchecked"")
		Callable<String> proxy = (Callable<String>) Proxy.newProxyInstance(Class.class.getClassLoader(), new Class<?>[] { Callable.class }, handler);
		handler.setMyProxy(proxy);

		System.out.println(proxy.call());
		assert handler.getMyProxy() == proxy;

		Fury fury = Fury.builder().withRefTracking(true).requireClassRegistration(false).build();
		byte[] serData = fury.serialize(proxy);
		@SuppressWarnings(""unchecked"")
		Callable<String> proxyDeser = (Callable<String>) fury.deserialize(serData);

		System.out.println(proxyDeser.call());
		MyInvocationHandler handlerDeser = (MyInvocationHandler) Proxy.getInvocationHandler(proxyDeser);
		if (handlerDeser.getMyProxy() != proxyDeser) {
			throw new IllegalStateException(""Inner reference not set"");
		}
	}
```

### What did you expect to see?

I expect the `myProxy` object to have a reference to the proxy instance after deserialization

### What did you see instead?

A `null` value

### Anything Else?

PR is on the way...

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1364/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1364,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zSaS-,fury,1934206142,1364,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-08T14:12:53Z,2024-02-08T14:12:53Z,"Thanks for reporting this issue. This is tricky. 

Normally, we can make reference graph right by set self reference first. But is't not easy for proxy object, since we can't create proxy in advance before we read its data:
![image](https://github.com/apache/incubator-fury/assets/12445254/d5636265-9817-4a42-8afc-ae6ccebfd4df)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zSaS-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1367,https://api.github.com/repos/apache/fury/issues/1367,fury,2128314168,1367,[Java] Unable to find Serilizer.java interface as present in java graph guide,aarvy-9,56856715,Rahul Vempati,rahulv2901@gmail.com,CLOSED,2024-02-10T11:02:50Z,2024-02-11T05:34:42Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury - 0.4.1

### Component(s)

Java

### Minimal reproduce step

https://github.com/apache/incubator-fury/blob/ea9602f9425002d633569381c5dc7986706759bb/docs/guide/java_object_graph_guide.md#implement-a-customized-serializer

### What did you expect to see?

Expect to implement customized serializer

### What did you see instead?

Unable to find Serilizer interface as shown in 
https://github.com/apache/incubator-fury/blob/ea9602f9425002d633569381c5dc7986706759bb/docs/guide/java_object_graph_guide.md#implement-a-customized-serializer

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1367/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1367,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zdCNX,fury,1936991063,1367,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-10T12:08:54Z,2024-02-10T12:08:54Z,"Hi @aarvy-9 , thanks for reporting this issue. `org.apache.fury.serializer.Serializer` is an abstract class,  this is an error in uour doc. Could you try `class FooSerializer extends Serializer<Foo>`?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zdCNX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1367,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zdcQ2,fury,1937097782,1367,NA,aarvy-9,56856715,Rahul Vempati,rahulv2901@gmail.com,NA,2024-02-10T19:06:26Z,2024-02-10T19:06:26Z,"Sure...the class we want to serialize constantly evolves and I want to make sure all developers register newly added class with fury. Apart from Serializer abstract class, is there any interface that we can implement?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zdcQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1367,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zera1,fury,1937422005,1367,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-11T04:35:29Z,2024-02-11T04:35:29Z,You can configure Fury with `FuryBuilder#requireClassRegistration(true)` and register every class by `Fury#register` manually,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5zera1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1370,https://api.github.com/repos/apache/fury/issues/1370,fury,2133592247,1370,"Assignment conversion not possible from type ""java.lang.Object"" to type ""net.betzel.fury.test.Object""",Maurice-Betzel,16353975,Maurice Betzel,,CLOSED,2024-02-14T05:47:52Z,2024-02-14T11:58:33Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0-SNAPSHOT b573ac651413520b5153d12380d227cef1b911a9

### Component(s)

Java

### Minimal reproduce step

https://github.com/Maurice-Betzel/net.betzel.fury.test

### What did you expect to see?

No compiler exception 

### What did you see instead?

Exception in thread ""main"" java.lang.RuntimeException: Create compatible serializer failed, 
class: class net.betzel.fury.test.Order
...
Caused by: org.apache.fury.shaded.org.codehaus.commons.compiler.CompileException: File 'net/betzel/fury/test/OrderFuryRefCompatibleCodec_1_414493378_1641313620.java', Line 1602, Column 127: Assignment conversion not possible from type ""java.lang.Object"" to type ""net.betzel.fury.test.Object""


### Anything Else?

CodegenContext needs class-loader fix at line 304:

if (beanClassClassLoader == null) beanClassClassLoader = Fury.class.getClassLoader();

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1370/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/1374,fury,2141375599,1374,[Java] Advice on Java Fury inheritance structure,LiangliangSui,116876207,,,CLOSED,2024-02-19T02:38:06Z,2024-02-21T06:39:47Z,"The current inheritance structure of `ThreadLocalFury / AbstractThreadSafeFury / ThreadSafeFury / Fury` is as follows

![image-20240219100956126](https://github.com/apache/incubator-fury/assets/116876207/31f3aa51-ad9e-443c-83e6-8bd49dcfda8f)

`ThreadSafeFury` and `Fury` are independent of each other, but they also have the same methods. Therefore, is it possible to abstract an interface (named `AbstractFury`), make `Fury` and `ThreadSafeFury` implement` AbstractFury`, and then move the same methods in `Fury` and `ThreadSafeFury` to `AbstractFury`, thus making the entire Fury-related class inheritance system look more complete and clear. 

The adjusted inheritance structure is as follows

![image-20240219101407316](https://github.com/apache/incubator-fury/assets/116876207/b4dfc83f-0189-4b08-a764-5b77fa14a2eb)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1374/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50VQh7,fury,1951729787,1374,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-19T05:31:00Z,2024-02-19T05:31:00Z,Good suggestion! The same methods should be abstracted into an interface.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50VQh7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50VXmy,fury,1951758770,1374,NA,LiangliangSui,116876207,,,NA,2024-02-19T06:04:24Z,2024-02-19T06:04:24Z,I will submit a PR to do this.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50VXmy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WAdW,fury,1951926102,1374,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-19T08:23:36Z,2024-02-19T08:23:36Z,"One concern is about how we name this interface to make it more intuitive for use. `AbstractFury` is used for abstract class instead fo interface. I don't find a better naming, naming is always hard.

The naming should have `Fury` included and not introduce more confusion.

FYI, In scala, we use `Trait` for such cases, like `FuryTrait`, but trait is not used requently in java. `FuryBase/BaseFury` has similar issue as `AbstractFury`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WAdW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WJv1,fury,1951964149,1374,NA,LiangliangSui,116876207,,,NA,2024-02-19T08:47:52Z,2024-02-19T08:47:52Z,"Thanks for the suggestion. I think it is reasonable to use `BaseFury` to name this interface. It can clearly express the role of this interface.

So we can finally use `BaseFury`.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50WJv1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50bufJ,fury,1953425353,1374,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-20T03:24:25Z,2024-02-20T03:24:25Z,`BaseFury` looks good to me too,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50bufJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1374,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50lgTu,fury,1955988718,1374,NA,LiangliangSui,116876207,,,NA,2024-02-21T06:38:20Z,2024-02-21T06:38:20Z,completed via https://github.com/apache/incubator-fury/pull/1382,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc50lgTu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1378,https://api.github.com/repos/apache/fury/issues/1378,fury,2143650943,1378,[Java] Support jdk proxy serialization for graalvm,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-02-20T06:43:36Z,2024-02-20T06:59:45Z,"## Is your feature request related to a problem? Please describe.
Support jdk proxy serialization for graalvm

## Describe the solution you'd like

## Additional context
#1364 #142 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1378/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1383,https://api.github.com/repos/apache/fury/issues/1383,fury,2150079017,1383,Deserialize from InputStream allowing for partial reads,phogh,152499819,,,CLOSED,2024-02-22T22:53:48Z,2024-02-29T11:06:17Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury v0.4.1, Java JDK 8, Ubuntu 20.04

### Component(s)

Java

### Minimal reproduce step

test.dat.gz is a gzipped file containing many serialized objects of type MyClass. I don't know how many objects are in the file so I loop through the file while input is available to deserialize them as below. However as `Fury#readToBufferFromStream` assumes complete reads of the serialized size, an exception is thrown. This ""slow"" inputstream issue was partially resolved in PR https://github.com/apache/incubator-fury/pull/1034.
```java
int i = 0;
try (InputStream input = new GZIPInputStream(new FileInputStream(""test.dat.gz""))) {
  while (input.available() > 0) {
    ++i;
    tick = (MyClass) fury.deserialize(input);
  }
} catch (Exception e) {
  System.out.printf(""Exception for object #%d%n"", i);
  throw e;
}
```

### What did you expect to see?

All objects in the gzipped file should deserialize.

### What did you see instead?

java.lang.IllegalArgumentException
	at io.fury.util.Preconditions.checkArgument(Preconditions.java:47)
	at io.fury.Fury.readToBufferFromStream(Fury.java:1209)
	at io.fury.Fury.deserialize(Fury.java:766)
	at io.fury.Fury.deserialize(Fury.java:760)
[...]

### Anything Else?

The slow InputStream issue addressed in PR https://github.com/apache/incubator-fury/pull/1034 could be extended to allow partial reads of the serialized size in the same way the PR fixed this for the serialized object read. Here's my attempt to fix `Fury#readToBufferFromStream`:
```java
  private static void readToBufferFromStream(InputStream inputStream, MemoryBuffer buffer)
      throws IOException {
    buffer.readerIndex(0);
    int read = readBytes(inputStream, buffer.getHeapMemory(), 0, 4);
    Preconditions.checkArgument(read == 4);
    int size = buffer.readInt();
    buffer.ensure(4 + size);
    read = readBytes(inputStream, buffer.getHeapMemory(), 4, size);
    Preconditions.checkArgument(read == size);
  }
  private static int readBytes(InputStream inputStream, byte[] buffer, int offset, int size) throws IOException {
    int read = 0;
    int count = 0;
    while (read < size) {
      if ((count = inputStream.read(buffer, offset + read, size - read)) == -1) {
        break;
      }
      read += count;
    }
    return (read == 0 && count == -1) ? -1 : read;
  }
```

### Are you willing to submit a PR?

- [x] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1383/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1383,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51d653,fury,1970777719,1383,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-29T09:51:18Z,2024-02-29T09:51:18Z,"Hi @phogh , your fix looks good to me. Would you like to create a PR for it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51d653/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1384,https://api.github.com/repos/apache/fury/issues/1384,fury,2152864354,1384,[Rust] Corrections for Installation and #[derive()] possibilities,ArmDaniel,44145743,debugrman,,CLOSED,2024-02-25T17:33:10Z,2024-02-26T14:17:16Z,"## Is your feature request related to a problem? Please describe.
In the Rust example, right on the Installation procedures, it is marked that a crate called fury_derive should be installed. However, the correct name is ""fury-derive"", otherwise the installation will fail. Also, it points to the same repo as the 'fury' crate. I don't think that is intended? Also, the issue for fury-derive, since it points to the same repo, is that it that does not allow access to the elements specified in the user guide, namely: ""FuryMeta, Deserialize, Serialize"". However, it seems that simply having:
`use fury::{from_buffer, to_buffer, Fury}`
 is enough to do the job.

## Describe the solution you'd like
Remove the ""fury-derive"" crate unless it serves a specific purpose. Add the correct usage of the ""fury"" crate in the user guide.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1384/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1384,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51AS5Y,fury,1963011672,1384,NA,ArmDaniel,44145743,debugrman,,NA,2024-02-25T17:48:23Z,2024-02-25T17:48:23Z,"After further experimentation and playing around, I have that the ""Serialize"", ""Deserialize"" and ""FuryMeta"" traits can indeed be found, but only with :
`use fury::__derive::{Serialize, Deserialize, FuryMeta};`

This should be reflected in the user guide.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51AS5Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1384,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51ATQ7,fury,1963013179,1384,NA,ArmDaniel,44145743,debugrman,,NA,2024-02-25T17:54:48Z,2024-02-25T17:54:48Z,"It should also be noted in the use guide that, for Rust, you must use the following command:
`crate add fury`
since fury is a library crate. Attempting to cargo install will fail as it has no binaries.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51ATQ7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1384,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51Bqxn,fury,1963371623,1384,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-02-26T05:55:16Z,2024-02-26T05:55:16Z,"> ## Is your feature request related to a problem? Please describe.
> In the Rust example, right on the Installation procedures, it is marked that a crate called fury_derive should be installed. However, the correct name is ""fury-derive"", otherwise the installation will fail. Also, it points to the same repo as the 'fury' crate. I don't think that is intended? Also, the issue for fury-derive, since it points to the same repo, is that it that does not allow access to the elements specified in the user guide, namely: ""FuryMeta, Deserialize, Serialize"". However, it seems that simply having: `use fury::{from_buffer, to_buffer, Fury}` is enough to do the job.
> 
> ## Describe the solution you'd like
> Remove the ""fury-derive"" crate unless it serves a specific purpose. Add the correct usage of the ""fury"" crate in the user guide.

Thank you for submitting the issue!  The usage in guide is outdated, using `use fury::{from_buffer, to_buffer, Fury}` is enough to do the job. I will update the guide in a another PR.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51Bqxn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1384,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51Br-r,fury,1963376555,1384,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-02-26T06:00:37Z,2024-02-26T06:00:37Z,"> It should also be noted in the use guide that, for Rust, you must use the following command: `crate add fury` since fury is a library crate. Attempting to cargo install will fail as it has no binaries.

The Xlang protocol is not stable yet, and there is still much work to be done before the first release version is ready. Once fury-rust becomes stable, it will be integrated with Cargo","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51Br-r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1387,https://api.github.com/repos/apache/fury/issues/1387,fury,2157655332,1387,"javax.money.AbstractContext.data: Member with ""package"" access cannot be accessed from type",drse,8675540,David Rose,,CLOSED,2024-02-27T21:42:06Z,2024-02-28T03:53:12Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury 0.4.1
Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 21+35.1 (build 21+35-jvmci-23.1-b15, mixed mode, sharing) 
OSX 14.3.1

### Component(s)

Java

### Minimal reproduce step

```java
ThreadSafeFury fury = Fury.builder()
        .withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .buildThreadSafeFury();

var money = Money.of(100, ""USD"");
byte[] serialized = fury.serialize(money);
```

### What did you expect to see?

A serialized `byte[]`

### What did you see instead?

```
java.lang.RuntimeException: Create sequential serializer failed, 
class: class org.javamoney.moneta.Money
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:963)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:961)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:894)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:791)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1184)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1116)
	at io.fury.Fury.writeRef(Fury.java:342)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:221)
	at io.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:67)
	at atp.bt.backends.backtraderpy.FurySerializationSpec.try serializing Moneta(FurySerializationSpec.groovy:22)
Caused by: java.lang.RuntimeException: Create sequential serializer failed, 
class: class javax.money.MonetaryContext
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:48)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:963)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:961)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:894)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:791)
	at io.fury.builder.BaseObjectCodecBuilder.lambda$getOrCreateSerializer$3(BaseObjectCodecBuilder.java:477)
	at io.fury.builder.JITContext.asyncVisitFury(JITContext.java:170)
	at io.fury.builder.BaseObjectCodecBuilder.visitFury(BaseObjectCodecBuilder.java:191)
	at io.fury.builder.BaseObjectCodecBuilder.getOrCreateSerializer(BaseObjectCodecBuilder.java:477)
	at io.fury.builder.BaseObjectCodecBuilder.serializeForNotNullObject(BaseObjectCodecBuilder.java:426)
	at io.fury.builder.BaseObjectCodecBuilder.serializeForNotNull(BaseObjectCodecBuilder.java:398)
	at io.fury.builder.BaseObjectCodecBuilder.serializeFor(BaseObjectCodecBuilder.java:325)
	at io.fury.builder.BaseObjectCodecBuilder.serializeFor(BaseObjectCodecBuilder.java:301)
	at io.fury.builder.BaseObjectCodecBuilder.serializeFor(BaseObjectCodecBuilder.java:289)
	at io.fury.builder.ObjectCodecBuilder.lambda$serializeGroup$9f8a61a4$1(ObjectCodecBuilder.java:187)
	at io.fury.builder.ObjectCodecBuilder.serializeGroup(ObjectCodecBuilder.java:194)
	at io.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:158)
	at io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:203)
	at io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:72)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:42)
	at io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
	... 13 more
Caused by: io.fury.codegen.CodegenException: Compile error: 
io.fury.builder.AbstractContextFuryAccessor_414493378_1101721002:
/* 0001 */ package io.fury.builder;
/* 0002 */ 
/* 0003 */ public final class AbstractContextFuryAccessor_414493378_1101721002 {
/* 0004 */ 
/* 0005 */   public static java.util.Map data(javax.money.AbstractContext obj) {
/* 0006 */       return obj.data;
/* 0007 */   }
/* 0008 */ 
/* 0009 */   public static void data(javax.money.AbstractContext obj, java.util.Map fieldValue) {
/* 0010 */       obj.data = fieldValue;
/* 0011 */   }
/* 0012 */ 
/* 0013 */ }
	at app//io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:126)
	at app//io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at app//io.fury.builder.AccessorHelper.defineAccessorClass(AccessorHelper.java:168)
	at app//io.fury.builder.AccessorHelper.defineAccessor(AccessorHelper.java:216)
	at app//io.fury.builder.CodecBuilder.getFieldValue(CodecBuilder.java:211)
	at app//io.fury.builder.ObjectCodecBuilder.lambda$serializeGroup$9f8a61a4$1(ObjectCodecBuilder.java:185)
	at app//io.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:48)
	at app//io.fury.builder.ObjectCodecOptimizer.invokeGenerated(ObjectCodecOptimizer.java:134)
	at app//io.fury.builder.ObjectCodecBuilder.serializeGroup(ObjectCodecBuilder.java:196)
	at app//io.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:165)
	at app//io.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:203)
	at app//io.fury.codegen.CompileUnit.getCode(CompileUnit.java:54)
	at app//io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:72)
	at app//io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at app//io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
	at app//io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at app//io.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:42)
	at app//io.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:45)
	... 38 more
Caused by: io.fury.shaded.org.codehaus.commons.compiler.CompileException: File 'io/fury/builder/AbstractContextFuryAccessor_414493378_1101721002.java', Line 6, Column 18: javax.money.AbstractContext.data: Member with ""package"" access cannot be accessed from type ""io.fury.builder.AbstractContextFuryAccessor_414493378_1101721002"".
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileError(UnitCompiler.java:13080)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.checkMemberAccessible(UnitCompiler.java:7745)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.checkAccessible(UnitCompiler.java:7721)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileGet2(UnitCompiler.java:4817)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.access$7900(UnitCompiler.java:237)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16$1.visitFieldAccess(UnitCompiler.java:4749)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16$1.visitFieldAccess(UnitCompiler.java:4746)
	at app//io.fury.shaded.org.codehaus.janino.Java$FieldAccess.accept(Java.java:4697)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16.visitLvalue(UnitCompiler.java:4746)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16.visitLvalue(UnitCompiler.java:4742)
	at app//io.fury.shaded.org.codehaus.janino.Java$Lvalue.accept(Java.java:4528)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileGet(UnitCompiler.java:4742)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileGet2(UnitCompiler.java:4809)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.access$7700(UnitCompiler.java:237)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16$1.visitAmbiguousName(UnitCompiler.java:4747)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16$1.visitAmbiguousName(UnitCompiler.java:4746)
	at app//io.fury.shaded.org.codehaus.janino.Java$AmbiguousName.accept(Java.java:4603)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16.visitLvalue(UnitCompiler.java:4746)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$16.visitLvalue(UnitCompiler.java:4742)
	at app//io.fury.shaded.org.codehaus.janino.Java$Lvalue.accept(Java.java:4528)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileGet(UnitCompiler.java:4742)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileGetValue(UnitCompiler.java:5885)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:2849)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.access$2800(UnitCompiler.java:237)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$6.visitReturnStatement(UnitCompiler.java:1591)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$6.visitReturnStatement(UnitCompiler.java:1576)
	at app//io.fury.shaded.org.codehaus.janino.Java$ReturnStatement.accept(Java.java:3888)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:1576)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileStatements(UnitCompiler.java:1662)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:3665)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:3330)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1448)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileDeclaredMethods(UnitCompiler.java:1421)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:830)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:443)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:237)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:423)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$3.visitPackageMemberClassDeclaration(UnitCompiler.java:419)
	at app//io.fury.shaded.org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1688)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:419)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:393)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.access$000(UnitCompiler.java:237)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:364)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler$2.visitCompilationUnit(UnitCompiler.java:362)
	at app//io.fury.shaded.org.codehaus.janino.Java$CompilationUnit.accept(Java.java:371)
	at app//io.fury.shaded.org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:362)
	at app//io.fury.shaded.org.codehaus.janino.Compiler.compile2(Compiler.java:271)
	at app//io.fury.shaded.org.codehaus.janino.Compiler.compile(Compiler.java:213)
	at app//io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:106)
	... 55 more
```

### Anything Else?

Using `moneta 1.4.4`: https://mvnrepository.com/artifact/org.javamoney/moneta

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1387/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1387,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51S27b,fury,1967877851,1387,NA,drse,8675540,David Rose,,NA,2024-02-27T23:08:56Z,2024-02-27T23:08:56Z,"Note: I'm able to work-around this issue with a custom serializer, but wondering if it's possible to configure fury to look past package-scoped inner classes. This may be related to https://github.com/apache/incubator-fury/issues/1165.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51S27b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1387,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51TxIk,fury,1968116260,1387,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-02-28T03:12:14Z,2024-02-28T03:12:14Z,"Hi @drse , thanks for reporting this bug. I fixed it in https://github.com/apache/incubator-fury/issues/1388","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51TxIk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1389,https://api.github.com/repos/apache/fury/issues/1389,fury,2158695929,1389,"[Release] Tracking issue for Fury v0.5.0 release, the first release under ASF",chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-02-28T11:03:51Z,2024-05-03T17:09:24Z,"## Is your feature request related to a problem? Please describe.
This is a tracking issue for Fury 0.5.0 release, our first release since Fury joined ASF incubator.

Release plan:
| Component | Old version | New version|
|-------------|-------------|------------|
| Java|  0.4.1 |  0.5.0|
| Python |  0.4.1 |  0.5.0 | 0.5.0 |
| Javascript |  0.4.1 |  not released |
| Golang | 0.4.1 |  not released |
| C++ | not released | not released |
| Rust| not released | not released |


## Work items
- [ ] #1421
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1389/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1393,https://api.github.com/repos/apache/fury/issues/1393,fury,2164359062,1393,[Rust] add enum for fury macro derive,peacess,12856556,Peace,,CLOSED,2024-03-01T23:37:26Z,2024-08-28T09:44:41Z,"as title
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1393/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1393,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51wGTu,fury,1975543022,1393,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-03-04T02:27:33Z,2024-03-04T02:27:33Z,"Hi, could you please clarify if you intend to add an enum to the macro, or if you're suggesting that the macro should be modified to support enums? Additional details would be helpful as the request is a bit ambiguous. Thanks!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc51wGTu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1393,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HvxVq,fury,2277447018,1393,NA,jiacai2050,3848910,Jiacai Liu,dev@liujiacai.net,NA,2024-08-09T08:36:36Z,2024-08-09T08:36:36Z,"https://github.com/apache/fury/blob/e99b46f4b83f79a23cf240466479da9e3657810d/rust/fury-derive/src/object/serializer.rs#L25-L29

It seems this is where we need to fix, please assign this issue to me. @theweipeng ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HvxVq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1393,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jcqmm,fury,2305993126,1393,NA,jiacai2050,3848910,Jiacai Liu,dev@liujiacai.net,NA,2024-08-23T01:07:45Z,2024-08-23T01:07:45Z,"[This spec](https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#enum) says enum are serialized as unsigned var int, but in Rust enum could carry payload, such as:

```rust
enum Location {
    Unknown,
    Anonymous,
    Known(Coord),
}

enum ComplexEnum {
    Nothing,
    Something(u32),
    LotsOfThings {
        usual_struct_stuff: bool,
        blah: String,
    }
}
```

Those are actually tagged unions, so in first version I will only support enum without any payload, and we may need to discuss how to serialize those union.

@theweipeng @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jcqmm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1393,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JcrDt,fury,2305994989,1393,NA,jiacai2050,3848910,Jiacai Liu,dev@liujiacai.net,NA,2024-08-23T01:10:22Z,2024-08-23T01:10:22Z,"https://serde.rs/enum-representations.html

Serde has 4 methods to serialize enum.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JcrDt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1399,https://api.github.com/repos/apache/fury/issues/1399,fury,2177443241,1399,[Java] Support for Java Platform Module System,rafaelsilverioit,7604541,Rafael Silvério,,OPEN,2024-03-09T23:24:30Z,2024-03-10T05:33:51Z,"## Is your feature request related to a problem? Please describe.
Kinda. I decided to modularize my application (which uses fury-core) and Maven has warned about fury-core being an unnamed module that has an automatic name generated by the compiler. This means that my application can use it, but in case the project maintainers decide to modularize and therefore give it a stable name, my application may break.

![Screenshot from 2024-03-09 23-15-28](https://github.com/apache/incubator-fury/assets/7604541/24bcfc14-021c-454f-aa89-e0263447a4cf)


## Describe the solution you'd like
Are there any plans to modularize Fury Java libraries in the future?

## Additional context

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1399/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1399,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52b9J6,fury,1987039866,1399,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-10T01:53:36Z,2024-03-10T01:53:36Z,"Hi @rafaelsilverioit , could you try the snapshot version? We added basic module support.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52b9J6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1399,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52cCyw,fury,1987062960,1399,NA,rafaelsilverioit,7604541,Rafael Silvério,,NA,2024-03-10T04:09:31Z,2024-03-10T04:09:31Z,"Hi @chaokunyang, the message is gone, but then I have an exception:
`Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/fury/ThreadSafeFury`

I'll dig a bit more later today because I guess it may be because of me missing something. Thank you for now :smile: ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52cCyw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1399,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52cLOg,fury,1987097504,1399,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-10T05:33:51Z,2024-03-10T05:33:51Z,"This looks strange, could you provide reproduction code here?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52cLOg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1401,https://api.github.com/repos/apache/fury/issues/1401,fury,2178811911,1401,Fix serialization of List<List<Object>>,jorgerod,5095855,Jorge Rodríguez Martín,,CLOSED,2024-03-11T10:46:43Z,2024-03-11T15:16:14Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

```java
package com.mycompany;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.stream.Stream;

import io.fury.Fury;
import io.fury.ThreadSafeFury;
import io.fury.config.Language;
import lombok.Value;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class FurySerializationTest {

  @Value
  public static class Pojo {
    List<List<Object>> data;
  }

  public static Stream<Arguments> testData() {
    return Stream.of(
        Arguments.of(new Pojo(List.of(
            List.of(1, 2),
            List.of(2, 2)
        )))
    );
  }

  @ParameterizedTest
  @MethodSource(""testData"")
  void testFury(Pojo pojo) {

    ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .withRefTracking(true)
        .buildThreadSafeFury();

    byte[] bytes = fury.serialize(pojo);
    Pojo deserializedPojo = (Pojo) fury.deserialize(bytes);

    assertThat(deserializedPojo).usingRecursiveComparison().isEqualTo(pojo);
  }
}
```

### What did you expect to see?

You should get the same result after deserializing

### What did you see instead?

```java
java.lang.AssertionError: 
Expecting actual:
  FurySerializationTest.Pojo(data=[[1, 2], [[1, 2], [1, 2]]])
to be equal to:
  FurySerializationTest.Pojo(data=[[1, 2], [2, 2]])
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1401/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1401,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52g_lO,fury,1988360526,1401,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-11T12:45:54Z,2024-03-11T12:45:54Z,"Hi @jorgerod , thanks for creating this issue. I can reproduce it and will fix it in https://github.com/apache/incubator-fury/pull/1403","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52g_lO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1401,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52h6Zu,fury,1988601454,1401,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-11T14:40:00Z,2024-03-11T14:40:00Z,"Hi @jorgerod, could you try latest snapshot version? I believe I've fixed it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52h6Zu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1401,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52iPW6,fury,1988687290,1401,NA,jorgerod,5095855,Jorge Rodríguez Martín,,NA,2024-03-11T15:16:14Z,2024-03-11T15:16:14Z,"Hi @chaokunyang 

Perfect, it works correctly.

Thank you very much for your speed.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc52iPW6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1404,https://api.github.com/repos/apache/fury/issues/1404,fury,2181714393,1404,【bug】Caused by: org.graalvm.compiler.debug.GraalError: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: An object of type 'ch.qos.logback.core.status.InfoStatus' was found in the image heap,lmm1990,4828501,,,CLOSED,2024-03-12T14:06:34Z,2024-04-09T13:34:18Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

javaFury:0.4.1
os:windows10

### Component(s)

Java

### Minimal reproduce step

springboot bootBuildImage

project see demo.zip
[demo.zip](https://github.com/apache/incubator-fury/files/14573919/demo.zip)


### What did you expect to see?

build success

### What did you see instead?

22:02:03: 正在执行 'bootBuildImage'…

> Task :compileJava
> Task :processResources
> Task :classes
> Task :resolveMainClassName

> Task :processAot

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::               (v3.0.13)

2024-03-12T22:02:07.398+08:00  INFO 13184 --- [           main] demo.demo.DemoApplication                : Starting DemoApplication using Java 21.0.2 with PID 13184 (E:\demo\build\classes\java\main started by lmm in E:\demo)
2024-03-12T22:02:07.404+08:00  INFO 13184 --- [           main] demo.demo.DemoApplication                : No active profile set, falling back to 1 default profile: ""default""

> Task :compileAotJava
> Task :processAotResources
> Task :aotClasses
> Task :collectReachabilityMetadata
> Task :bootJar

> Task :bootBuildImage
Building image 'registry.cn-shanghai.aliyuncs.com/lmm1990/test:1.0.1'

 > Pulling builder image '172.26.253.160:8000/builder-jammy-tiny:0.0.233' ..................................................
 > Pulled builder image '172.26.253.160:5000/builder-jammy-tiny@sha256:1ccf1cc29e7bc447c27a621a355116e0359c1217db08a1eaecc80bb4abb0e84f'
 > Pulling run image '172.26.253.160:8000/run-jammy-tiny:0.2.28' ..................................................
 > Pulled run image '172.26.253.160:5000/run-jammy-tiny@sha256:35677b16aecd3a2697249b679cb6fbb6cf1b8d0574ccb4189c66d7669a4a8e92'
 > Executing lifecycle version v0.18.5
 > Using build cache volume 'pack-cache-c7ee556d6fe7.build'

 > Running creator
    [creator]     ===> ANALYZING
    [creator]     Restoring data for SBOM from previous image
    [creator]     ===> DETECTING
    [creator]     6 of 15 buildpacks participating
    [creator]     paketo-buildpacks/ca-certificates   3.6.8
    [creator]     paketo-buildpacks/bellsoft-liberica 10.5.3
    [creator]     paketo-buildpacks/syft              1.45.0
    [creator]     paketo-buildpacks/executable-jar    6.8.4
    [creator]     paketo-buildpacks/spring-boot       5.27.10
    [creator]     paketo-buildpacks/native-image      5.12.8
    [creator]     ===> RESTORING
    [creator]     Restoring metadata for ""paketo-buildpacks/ca-certificates:helper"" from app image
    [creator]     Restoring metadata for ""paketo-buildpacks/bellsoft-liberica:native-image-svm"" from cache
    [creator]     Restoring metadata for ""paketo-buildpacks/syft:syft"" from cache
    [creator]     Restoring metadata for ""paketo-buildpacks/native-image:native-image"" from cache
    [creator]     Restoring data for ""paketo-buildpacks/bellsoft-liberica:native-image-svm"" from cache
    [creator]     Restoring data for ""paketo-buildpacks/syft:syft"" from cache
    [creator]     Restoring data for ""paketo-buildpacks/native-image:native-image"" from cache
    [creator]     Restoring data for SBOM from cache
    [creator]     ===> BUILDING
    [creator]     
    [creator]     Paketo Buildpack for CA Certificates 3.6.8
    [creator]       https://github.com/paketo-buildpacks/ca-certificates
    [creator]       Launch Helper: Reusing cached layer
    [creator]     
    [creator]     Paketo Buildpack for BellSoft Liberica 10.5.3
    [creator]       https://github.com/paketo-buildpacks/bellsoft-liberica
    [creator]       Build Configuration:
    [creator]         $BP_JVM_JLINK_ARGS           --no-man-pages --no-header-files --strip-debug --compress=1  configure custom link arguments (--output must be omitted)
    [creator]         $BP_JVM_JLINK_ENABLED        false                                                        enables running jlink tool to generate custom JRE
    [creator]         $BP_JVM_TYPE                 JRE                                                          the JVM type - JDK or JRE
    [creator]         $BP_JVM_VERSION              21                                                           the Java version
    [creator]       Launch Configuration:
    [creator]         $BPL_DEBUG_ENABLED           false                                                        enables Java remote debugging support
    [creator]         $BPL_DEBUG_PORT              8000                                                         configure the remote debugging port
    [creator]         $BPL_DEBUG_SUSPEND           false                                                        configure whether to suspend execution until a debugger has attached
    [creator]         $BPL_HEAP_DUMP_PATH                                                                       write heap dumps on error to this path
    [creator]         $BPL_JAVA_NMT_ENABLED        true                                                         enables Java Native Memory Tracking (NMT)
    [creator]         $BPL_JAVA_NMT_LEVEL          summary                                                      configure level of NMT, summary or detail
    [creator]         $BPL_JFR_ARGS                                                                             configure custom Java Flight Recording (JFR) arguments
    [creator]         $BPL_JFR_ENABLED             false                                                        enables Java Flight Recording (JFR)
    [creator]         $BPL_JMX_ENABLED             false                                                        enables Java Management Extensions (JMX)
    [creator]         $BPL_JMX_PORT                5000                                                         configure the JMX port
    [creator]         $BPL_JVM_HEAD_ROOM           0                                                            the headroom in memory calculation
    [creator]         $BPL_JVM_LOADED_CLASS_COUNT  35% of classes                                               the number of loaded classes in memory calculation
    [creator]         $BPL_JVM_THREAD_COUNT        250                                                          the number of threads in memory calculation
    [creator]         $JAVA_TOOL_OPTIONS                                                                        the JVM launch flags
    [creator]         Using Java version 21 from BP_JVM_VERSION
    [creator]       BellSoft Liberica NIK 21.0.2: Reusing cached layer
    [creator]     
    [creator]     Paketo Buildpack for Syft 1.45.0
    [creator]       https://github.com/paketo-buildpacks/syft
    [creator]     
    [creator]     Paketo Buildpack for Executable JAR 6.8.4
    [creator]       https://github.com/paketo-buildpacks/executable-jar
    [creator]       Class Path: Contributing to layer
    [creator]         Writing env.build/CLASSPATH.delim
    [creator]         Writing env.build/CLASSPATH.prepend
    [creator]     
    [creator]     Paketo Buildpack for Spring Boot 5.27.10
    [creator]       https://github.com/paketo-buildpacks/spring-boot
    [creator]       Build Configuration:
    [creator]         $BP_SPRING_CLOUD_BINDINGS_DISABLED   false  whether to contribute Spring Boot cloud bindings support
    [creator]         $BP_SPRING_CLOUD_BINDINGS_VERSION    1      default version of Spring Cloud Bindings library to contribute
    [creator]       Launch Configuration:
    [creator]         $BPL_SPRING_CLOUD_BINDINGS_DISABLED  false  whether to auto-configure Spring Boot environment properties from bindings
    [creator]         $BPL_SPRING_CLOUD_BINDINGS_ENABLED   true   Deprecated - whether to auto-configure Spring Boot environment properties from bindings
    [creator]       Class Path: Contributing to layer
    [creator]         Writing env.build/BP_NATIVE_IMAGE_BUILD_ARGUMENTS_FILE.default
    [creator]         Writing env.build/CLASSPATH.append
    [creator]         Writing env.build/CLASSPATH.delim
    [creator]       Image labels:
    [creator]         org.opencontainers.image.title
    [creator]         org.opencontainers.image.version
    [creator]         org.springframework.boot.version
    [creator]     Warning: BOM table is deprecated in this buildpack api version, though it remains supported for backwards compatibility. Buildpack authors should write BOM information to <layer>.sbom.<ext>, launch.sbom.<ext>, or build.sbom.<ext>.
    [creator]     
    [creator]     Paketo Buildpack for Native Image 5.12.8
    [creator]       https://github.com/paketo-buildpacks/native-image
    [creator]       Build Configuration:
    [creator]         $BP_BINARY_COMPRESSION_METHOD                                                    Compression mechanism used to reduce binary size. Options: `none` (default), `upx` or `gzexe`
    [creator]         $BP_NATIVE_IMAGE                       true                                      enable native image build
    [creator]         $BP_NATIVE_IMAGE_BUILD_ARGUMENTS                                                 arguments to pass to the native-image command
    [creator]         $BP_NATIVE_IMAGE_BUILD_ARGUMENTS_FILE  /workspace/META-INF/native-image/argfile  a file with arguments to pass to the native-image command
    [creator]         $BP_NATIVE_IMAGE_BUILT_ARTIFACT                                                  the built application artifact explicitly, required if building from a JAR
    [creator]       Command ""packages"" is deprecated, use `syft scan` instead
    [creator]       Native Image: Contributing to layer
    [creator]         Executing native-image --no-fallback -H:+StaticExecutableWithDynamicLibC @/workspace/META-INF/native-image/argfile -H:Name=/layers/paketo-buildpacks_native-image/native-image/demo.demo.DemoApplication -cp /workspace:/workspace/BOOT-INF/classes:/workspace/BOOT-INF/lib/fury-core-0.4.1.jar:/workspace/BOOT-INF/lib/spring-webflux-6.0.14.jar:/workspace/BOOT-INF/lib/spring-web-6.0.14.jar:/workspace/BOOT-INF/lib/logback-classic-1.4.11.jar:/workspace/BOOT-INF/lib/log4j-to-slf4j-2.19.0.jar:/workspace/BOOT-INF/lib/jul-to-slf4j-2.0.9.jar:/workspace/BOOT-INF/lib/slf4j-api-2.0.9.jar:/workspace/BOOT-INF/lib/guava-32.1.2-jre.jar:/workspace/BOOT-INF/lib/spring-boot-autoconfigure-3.0.13.jar:/workspace/BOOT-INF/lib/spring-boot-3.0.13.jar:/workspace/BOOT-INF/lib/jakarta.annotation-api-2.1.1.jar:/workspace/BOOT-INF/lib/spring-context-6.0.14.jar:/workspace/BOOT-INF/lib/spring-aop-6.0.14.jar:/workspace/BOOT-INF/lib/spring-beans-6.0.14.jar:/workspace/BOOT-INF/lib/spring-expression-6.0.14.jar:/workspace/BOOT-INF/lib/spring-core-6.0.14.jar:/workspace/BOOT-INF/lib/snakeyaml-1.33.jar:/workspace/BOOT-INF/lib/jackson-datatype-jsr310-2.14.3.jar:/workspace/BOOT-INF/lib/jackson-module-parameter-names-2.14.3.jar:/workspace/BOOT-INF/lib/jackson-annotations-2.14.3.jar:/workspace/BOOT-INF/lib/jackson-core-2.14.3.jar:/workspace/BOOT-INF/lib/jackson-datatype-jdk8-2.14.3.jar:/workspace/BOOT-INF/lib/jackson-databind-2.14.3.jar:/workspace/BOOT-INF/lib/reactor-netty-http-1.1.13.jar:/workspace/BOOT-INF/lib/micrometer-observation-1.10.13.jar:/workspace/BOOT-INF/lib/reactor-netty-core-1.1.13.jar:/workspace/BOOT-INF/lib/reactor-core-3.5.12.jar:/workspace/BOOT-INF/lib/failureaccess-1.0.1.jar:/workspace/BOOT-INF/lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/workspace/BOOT-INF/lib/jsr305-3.0.2.jar:/workspace/BOOT-INF/lib/checker-qual-3.33.0.jar:/workspace/BOOT-INF/lib/error_prone_annotations-2.18.0.jar:/workspace/BOOT-INF/lib/spring-jcl-6.0.14.jar:/workspace/BOOT-INF/lib/netty-codec-http2-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-handler-proxy-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-codec-http-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-resolver-dns-native-macos-4.1.101.Final-osx-x86_64.jar:/workspace/BOOT-INF/lib/netty-resolver-dns-classes-macos-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-resolver-dns-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-transport-native-epoll-4.1.101.Final-linux-x86_64.jar:/workspace/BOOT-INF/lib/micrometer-commons-1.10.13.jar:/workspace/BOOT-INF/lib/reactive-streams-1.0.4.jar:/workspace/BOOT-INF/lib/logback-core-1.4.11.jar:/workspace/BOOT-INF/lib/log4j-api-2.19.0.jar:/workspace/BOOT-INF/lib/netty-handler-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-codec-dns-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-codec-socks-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-codec-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-transport-classes-epoll-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-transport-native-unix-common-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-transport-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-buffer-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-resolver-4.1.101.Final.jar:/workspace/BOOT-INF/lib/netty-common-4.1.101.Final.jar demo.demo.DemoApplication
    [creator]     Warning: The option '-H:+StaticExecutableWithDynamicLibC' is experimental and must be enabled via '-H:+UnlockExperimentalVMOptions' in the future.
    [creator]     Warning: The option '-H:Name=/layers/paketo-buildpacks_native-image/native-image/demo.demo.DemoApplication' is experimental and must be enabled via '-H:+UnlockExperimentalVMOptions' in the future.
    [creator]     Warning: Please re-evaluate whether any experimental option is required, and either remove or unlock it. The build output lists all active experimental options, including where they come from and possible alternatives. If you think an experimental option should be considered as stable, please file an issue.
    [creator]     ================================================================================
    [creator]     GraalVM Native Image: Generating 'demo.demo.DemoApplication' (static executable)...
    [creator]     ================================================================================
    [creator]     For detailed information and explanations on the build output, visit:
    [creator]     https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md
    [creator]     --------------------------------------------------------------------------------
    [creator]     [1/8] Initializing...                                            (8.9s @ 0.17GB)
    [creator]      Java version: 21.0.2+14-LTS, vendor version: Liberica-NIK-23.1.2-1
    [creator]      Graal compiler: optimization level: 2, target machine: x86-64-v3
    [creator]      C compiler: gcc (linux, x86_64, 11.4.0)
    [creator]      Garbage collector: Serial GC (max heap size: 80% of RAM)
    [creator]      2 user-specific feature(s):
    [creator]      - com.oracle.svm.thirdparty.gson.GsonFeature
    [creator]      - org.springframework.aot.nativex.feature.PreComputeFieldFeature
    [creator]     --------------------------------------------------------------------------------
    [creator]      2 experimental option(s) unlocked:
    [creator]      - '-H:Name' (alternative API option(s): -o demo.demo.DemoApplication; origin(s): command line)
    [creator]      - '-H:+StaticExecutableWithDynamicLibC' (origin(s): command line)
    [creator]     --------------------------------------------------------------------------------
    [creator]     Build resources:
    [creator]      - 8.81GB of memory (75.6% of 11.66GB system memory, determined at start)
    [creator]      - 8 thread(s) (100.0% of 8 available processor(s), determined at start)
    [creator]     Field org.apache.commons.logging.LogAdapter#log4jSpiPresent set to true at build time
    [creator]     Field org.apache.commons.logging.LogAdapter#log4jSlf4jProviderPresent set to true at build time
    [creator]     Field org.apache.commons.logging.LogAdapter#slf4jSpiPresent set to true at build time
    [creator]     Field org.apache.commons.logging.LogAdapter#slf4jApiPresent set to true at build time
    [creator]     Field org.springframework.http.converter.json.Jackson2ObjectMapperBuilder#jackson2XmlPresent set to false at build time
    [creator]     Field org.springframework.web.reactive.config.WebFluxConfigurationSupport#jakartaValidatorPresent set to false at build time
    [creator]     Field org.springframework.boot.logging.logback.LogbackLoggingSystem$Factory#PRESENT set to true at build time
    [creator]     Field org.springframework.boot.logging.java.JavaLoggingSystem$Factory#PRESENT set to true at build time
    [creator]     Field org.springframework.cglib.core.AbstractClassGenerator#inNativeImage set to true at build time
    [creator]     Field org.springframework.core.NativeDetector#inNativeImage set to true at build time
    [creator]     Field org.springframework.boot.logging.log4j2.Log4J2LoggingSystem$Factory#PRESENT set to false at build time
    [creator]     Field org.springframework.core.KotlinDetector#kotlinPresent set to false at build time
    [creator]     Field org.springframework.core.KotlinDetector#kotlinReflectPresent set to false at build time
    [creator]     Field org.springframework.aot.AotDetector#inNativeImage set to true at build time
    [creator]     Field org.springframework.core.ReactiveAdapterRegistry#reactorPresent set to true at build time
    [creator]     Field org.springframework.core.ReactiveAdapterRegistry#rxjava3Present set to false at build time
    [creator]     Field org.springframework.core.ReactiveAdapterRegistry#kotlinCoroutinesPresent set to false at build time
    [creator]     Field org.springframework.core.ReactiveAdapterRegistry#mutinyPresent set to false at build time
    [creator]     Field org.springframework.format.support.DefaultFormattingConversionService#jsr354Present set to false at build time
    [creator]     [2/8] Performing analysis...  []                                (20.6s @ 0.42GB)
    [creator]         4,994 reachable types   (63.2% of    7,906 total)
    [creator]         5,497 reachable fields  (47.6% of   11,551 total)
    [creator]        19,194 reachable methods (37.8% of   50,724 total)
    [creator]         2,004 types,   187 fields, and 3,121 methods registered for reflection
    [creator]     
    [creator]     Fatal error: org.graalvm.compiler.debug.GraalError: org.graalvm.compiler.debug.GraalError: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: An object of type 'ch.qos.logback.core.status.InfoStatus' was found in the image heap. This type, however, is marked for initialization at image run time for the following reason: classes are initialized at run time by default.
    [creator]     This is not allowed for correctness reasons: All objects that are stored in the image heap must be initialized at build time.
    [creator]     
    [creator]     You now have two options to resolve this:
    [creator]     
    [creator]     1) If it is intended that objects of type 'ch.qos.logback.core.status.InfoStatus' are persisted in the image heap, add 
    [creator]     
    [creator]         '--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to the native-image arguments. Note that initializing new types can store additional objects to the heap. It is advised to check the static fields of 'ch.qos.logback.core.status.InfoStatus' to see if they are safe for build-time initialization,  and that they do not contain any sensitive data that should not become part of the image.
    [creator]     
    [creator]     2) If these objects should not be stored in the image heap, you can use 
    [creator]     
    [creator]         '--trace-object-instantiation=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with 
    [creator]     
    [creator]         '--initialize-at-run-time=<culprit>'
    [creator]     
    [creator]     to prevent the instantiation of the object.
    [creator]     
    [creator]     The following detailed trace displays from which field in the code the object was reached.
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AnalysisFuture.setException(AnalysisFuture.java:49)
    [creator]     	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:322)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AnalysisFuture.ensureDone(AnalysisFuture.java:63)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapInstance.readFieldValue(ImageHeapInstance.java:110)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.onObjectReachable(ImageHeapScanner.java:472)
    [creator]     	at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.heap.SVMImageHeapScanner.onObjectReachable(SVMImageHeapScanner.java:156)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$markReachable$5(ImageHeapScanner.java:452)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$postTask$14(ImageHeapScanner.java:695)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.CompletionExecutor.executeCommand(CompletionExecutor.java:187)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.CompletionExecutor.lambda$executeService$0(CompletionExecutor.java:171)
    [creator]     	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
    [creator]     	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    [creator]     	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    [creator]     	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    [creator]     	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    [creator]     	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
    [creator]     Caused by: org.graalvm.compiler.debug.GraalError: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: An object of type 'ch.qos.logback.core.status.InfoStatus' was found in the image heap. This type, however, is marked for initialization at image run time for the following reason: classes are initialized at run time by default.
    [creator]     This is not allowed for correctness reasons: All objects that are stored in the image heap must be initialized at build time.
    [creator]     
    [creator]     You now have two options to resolve this:
    [creator]     
    [creator]     1) If it is intended that objects of type 'ch.qos.logback.core.status.InfoStatus' are persisted in the image heap, add 
    [creator]     
    [creator]         '--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to the native-image arguments. Note that initializing new types can store additional objects to the heap. It is advised to check the static fields of 'ch.qos.logback.core.status.InfoStatus' to see if they are safe for build-time initialization,  and that they do not contain any sensitive data that should not become part of the image.
    [creator]     
    [creator]     2) If these objects should not be stored in the image heap, you can use 
    [creator]     
    [creator]         '--trace-object-instantiation=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with 
    [creator]     
    [creator]         '--initialize-at-run-time=<culprit>'
    [creator]     
    [creator]     to prevent the instantiation of the object.
    [creator]     
    [creator]     The following detailed trace displays from which field in the code the object was reached.
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AnalysisFuture.setException(AnalysisFuture.java:49)
    [creator]     	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:322)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AnalysisFuture.ensureDone(AnalysisFuture.java:63)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.getOrCreateImageHeapConstant(ImageHeapScanner.java:212)
    [creator]     	at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.heap.SVMImageHeapScanner.getOrCreateImageHeapConstant(SVMImageHeapScanner.java:109)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.createImageHeapConstant(ImageHeapScanner.java:186)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.createFieldValue(ImageHeapScanner.java:364)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$createImageHeapInstance$4(ImageHeapScanner.java:294)
    [creator]     	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
    [creator]     	... 14 more
    [creator]     Caused by: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: An object of type 'ch.qos.logback.core.status.InfoStatus' was found in the image heap. This type, however, is marked for initialization at image run time for the following reason: classes are initialized at run time by default.
    [creator]     This is not allowed for correctness reasons: All objects that are stored in the image heap must be initialized at build time.
    [creator]     
    [creator]     You now have two options to resolve this:
    [creator]     
    [creator]     1) If it is intended that objects of type 'ch.qos.logback.core.status.InfoStatus' are persisted in the image heap, add 
    [creator]     
    [creator]         '--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to the native-image arguments. Note that initializing new types can store additional objects to the heap. It is advised to check the static fields of 'ch.qos.logback.core.status.InfoStatus' to see if they are safe for build-time initialization,  and that they do not contain any sensitive data that should not become part of the image.
    [creator]     
    [creator]     2) If these objects should not be stored in the image heap, you can use 
    [creator]     
    [creator]         '--trace-object-instantiation=ch.qos.logback.core.status.InfoStatus'
    [creator]     
    [creator]     to find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with 
    [creator]     
    [creator]         '--initialize-at-run-time=<culprit>'
    [creator]     
    [creator]     to prevent the instantiation of the object.
    [creator]     
    [creator]     The following detailed trace displays from which field in the code the object was reached.
    [creator]     	at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationFeature.checkImageHeapInstance(ClassInitializationFeature.java:186)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisUniverse.replaceObject(AnalysisUniverse.java:616)
    [creator]     	at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.ameta.AnalysisConstantReflectionProvider.replaceObject(AnalysisConstantReflectionProvider.java:307)
    [creator]     	at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.ameta.AnalysisConstantReflectionProvider.readArrayElement(AnalysisConstantReflectionProvider.java:158)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.createImageHeapObjectArray(ImageHeapScanner.java:267)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.createImageHeapObject(ImageHeapScanner.java:251)
    [creator]     	at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$getOrCreateImageHeapConstant$2(ImageHeapScanner.java:205)
    [creator]     	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
    [creator]     	... 21 more
    [creator]     --------------------------------------------------------------------------------
    [creator]         3.1s (10.1% of total time) in 91 GCs | Peak RSS: 1.00GB | CPU load: 6.51
    [creator]     ================================================================================
    [creator]     Finished generating 'demo.demo.DemoApplication' in 29.8s.
    [creator]     unable to invoke layer creator
    [creator]     unable to contribute native-image layer
    [creator]     error running build
    [creator]     exit status 1
    [creator]     ERROR: failed to build: exit status 1

> Task :bootBuildImage FAILED
9 actionable tasks: 9 executed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':bootBuildImage'.
> Builder lifecycle 'creator' failed with status code 51

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.
> Get more help at https://help.gradle.org.

BUILD FAILED in 44s
22:02:48: 执行完成 'bootBuildImage'。


### Anything Else?

remove   implementation 'org.furyio:fury-core:0.4.1'
build success

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1404/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1404,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Pbnx,fury,2017311217,1404,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-25T06:25:17Z,2024-03-25T06:25:17Z,"I can't run `springboot bootBuildImage`, how is this the right command for build spring boot image?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Pbnx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1404,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54qjq8,fury,2024422076,1404,NA,lmm1990,4828501,,,NA,2024-03-28T05:20:34Z,2024-03-28T05:20:34Z,"![image](https://github.com/apache/incubator-fury/assets/4828501/53d5b6bd-ebf4-42e1-bbe5-ad96a2988058)
with idea","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54qjq8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1405,https://api.github.com/repos/apache/fury/issues/1405,fury,2182809542,1405,[Java] Suggested technique for Serializers to handle primitive arrays?,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,CLOSED,2024-03-12T22:46:27Z,2024-03-20T03:53:04Z,"## Is your feature request related to a problem? Please describe.
It seems somewhat odd that `MemoryBuffer` provides `readLongsWithSizeEmbedded()` for `long[]`, as well as versions for `byte[]` and `char[]`, but nothing for other primitive arrays. Is there some recommended way for `Serializer`s to handle things like `int[]` written by `writePrimitiveArrayWithSizeEmbedded()` already?

## Describe the solution you'd like
I have implemented [my own versions](https://github.com/tommyettinger/tantrum/blob/main/tantrum-jdkgdxds/src/main/java/com/github/tommyettinger/tantrum/jdkgdxds/helpers/Support.java) of array-reading methods, I just don't know if I'm missing an existing solution that wouldn't require so many copies of Fury code.

## Additional context
I had a hard time finding examples of custom `Serializer`s in the documentation or even the tests. I think I am doing things correctly, but I'm not sure.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1405/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1405,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc526l3K,fury,1995070922,1405,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-13T17:22:13Z,2024-03-13T17:22:13Z,"Hi @tommyettinger , I'm glad to see that you extend Fury for more use cases. Our user doc is not good enough, sorry for this.

If you want to handle other primitive arrays ,you can take https://github.com/apache/incubator-fury/blob/5aba0c8780fb7fdff96a63ec60cde631eb107cb7/java/fury-core/src/main/java/org/apache/fury/serializer/ArraySerializers.java#L418 for an example","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc526l3K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1405,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Ym4H,fury,2002939399,1405,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-18T05:08:50Z,2024-03-18T05:08:50Z,"Oh, that's much simpler than I thought! Thanks! It makes sense that arrays, being reference types, could be serialized like other reference types; I just didn't know there was a serializer already registered. Would it make sense for there to be a listing somewhere of which types have serializers already registered? Even a link to source code where existing types are all shown would be plenty. I know `String` doesn't need to be registered, for example, but I don't know if `String[]` needs to be registered.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Ym4H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1405,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53ZMbs,fury,2003093228,1405,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-18T07:26:26Z,2024-03-18T07:26:26Z,"All registered serializers are lied at `fury-core/src/main/java/org/apache/fury/serializer`. `String[]` are registered too. It's a good suggestion to point out which serializers has been registered. Maybe we can add a link to the source code in the java serialization guide. List serializers sounds good too.

FYI, serializers for `String[]` has been registered in `org.apache.fury.serializer.ArraySerializers.StringArraySerializer`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53ZMbs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1405,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53uSnK,fury,2008623562,1405,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-20T03:53:04Z,2024-03-20T03:53:04Z,That sounds good to me! I'll close this now.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53uSnK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1407,https://api.github.com/repos/apache/fury/issues/1407,fury,2186407841,1407,[Java] register enables check behavior by default,LiangliangSui,116876207,,,CLOSED,2024-03-14T13:36:09Z,2024-03-26T01:47:57Z,"Can we delete the `ClassResolver#registerWithCheck` interface and only keep the `register` interface. The `register` interface carries the check function by default, which always prevents repeated registration, and repeated registration throws an exception.

Now, if you use the `register` interface to repeatedly register a Class, nothing will happen, no exception will be thrown, and the registration will not be successful.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1407/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1407,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54L1lL,fury,2016368971,1407,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-23T06:05:36Z,2024-03-23T06:05:36Z,"Yep, `registerWithCheck` seems unnecessary, maybe we should remove it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54L1lL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1407,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Wyb_,fury,2019239679,1407,NA,LiangliangSui,116876207,,,NA,2024-03-26T01:47:57Z,2024-03-26T01:47:57Z,https://github.com/apache/incubator-fury/pull/1424 has been merged.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Wyb_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/1409,fury,2189754747,1409,[Java] optimize map performance for reference tracking and serializer dispatch,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-03-16T04:02:32Z,2024-04-14T08:45:16Z,"## Is your feature request related to a problem? Please describe.

This issue is to continue the performance optimization discussion of map in https://github.com/apache/incubator-fury/issues/1274#issuecomment-1997259888

## Additional context
Tha hash lookup is a time-consuming operations. Especially after F applied codegen speedup, the cost of hash look for class dispatch or reference tracking is considerable, and sometimes it become the bottleneck of the serialization.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1409/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53TjjL,fury,2001615051,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-16T04:32:38Z,2024-03-16T04:32:38Z,"Hi @tommyettinger , let's continue the discussion in https://github.com/apache/incubator-fury/issues/1274#issuecomment-1997259888 . 

We used `0.25` as the default loader actor for class serializer dispatch in https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/resolver/ClassResolver.java#L201 . But for reference tracking, we used `0.51f`, since the object graph may be huge, a smaller loader factor will use more memory, and then map is big, there may have some L1 cache miss. But I thinks we can change it to `0.5f`.

For class serializer dispatch, some times some class are more hot than others, I was also thinking whether is it possible to adjust the map hierarchy to make it faster for hot keys. But not sure whether it will bring big difference.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53TjjL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Tj52,fury,2001616502,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-16T04:33:26Z,2024-03-16T04:33:26Z,"
Just found that fury has already removed the hash multiplication:
```java
  protected int place(K item) {
    return System.identityHashCode(item) & mask;
  }
``` ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Tj52/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53U2z2,fury,2001956086,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-16T11:27:06Z,2024-03-16T11:27:06Z,"RE: removed multiplication, good, that was one of the optimizations I wasn't sure had made it into Fury.

I've got a JMH benchmark that can test several different Map implementations at once, but I can't run it at the moment because all 12 logical cores on this laptop are currently devoted to an unrelated statistical test on a random number generator, and that test will run for at least several more hours. I've got the JMH benchmark set up to test HashMap, ObjectObjectMap from jdkgdxds, the corresponding Map type in FastUtil, and the hash-based Map in Koloboke 1.0.0 . I'll see if I can add FuryObjectMap, ~~it just needs to implement Map~~ OK, it doesn't implement Map, so it would need to be run separately, which isn't quite a fair comparison. However, ObjectObjectMap from jdkgdxds is very close. It's possible Koloboke will do well here, which it appeared to do 8 years ago when it last updated, but a lot has changed in the current JDK versions. I'll see if I can test on a large number of Class instances, to have similar conditions to the large object graph scenario.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53U2z2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53WizZ,fury,2002398425,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-17T10:29:56Z,2024-03-17T10:29:56Z,Looking forward to your benchmark results,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53WizZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Wj5H,fury,2002402887,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-17T10:43:13Z,2024-03-17T10:43:13Z,"I was able to run the benchmark, and I may have an avenue that could improve contains() and get() performance.

![Contains](https://github.com/apache/incubator-fury/assets/160684/5c8beceb-ae32-43ac-b32e-81b01b70c1d5)

This was testing just contains() with Object keys, some of which were `Class` instances from `java.**` packages, and some of which were simple `Dummy` instances, where Dummy is a class that stores its name and that's it, using identity comparison like Class. The one case where anything performed noticeably better was when hashing the .toString() result of the Object (but .getName() on Class would also work), and I believe that only did well because the String and its hashCode are cached. That didn't do better every time, and some other operations took longer.

The full benchmark data on various operations is available here as a raw .txt:
https://github.com/tommyettinger/assorted-benchmarks/blob/529bd6a8e48ceb3fbbb7f0021f990394e1fd3cf6/jmh/Identity_Map_21.txt
and here as a nicely-formatted spreadsheet (.fods format from LibreOffice and I think OpenOffice): (direct link)
https://github.com/tommyettinger/assorted-benchmarks/raw/2538fcf164e27b3defc368436f8e2799225f75e9/jmh/Identity_Map_Performance_21.fods

The confusing thing is that there seems to be some deoptimization going on in the JVM, since the benchmarks each start about twice as fast as when they actually start recording data. It could be my laptop heating up quickly, but that seems unlikely.

You can run the benchmarks yourself by loading the `jmh` project in [the repo I linked](https://github.com/tommyettinger/assorted-benchmarks/tree/master/jmh) and running the shadowJar task. Then you can use a command like...

```
java -jar benchmarks.jar ""JDKIdentityMapBench"" -p impl=JDK_O2O_HASH,JDK_O2O_IDENTITY,JDKGDXDS_HASH,JDKGDXDS_TOSTR,JDKGDXDS_IDENTITY -p size=100,1000,10000 -wi 4 -i 5 -f 1 -w 5 -r 5 -p payloadType=OBJECT_UNIFORM
```

... which will run the Class-and-Dummy-Object test with the implementations for HashMap, IdentityHashMap, ObjectObjectMap, the new ObjectMapToString, and IdentityObjectMap, on sizes 100, 1000, and 10000, with 4 warmup iterations, 5 actual iterations, and each iteration taking 5 seconds. My apologies for how messy the benchmarking project is... It's mostly a testbed to see if something is worth investigating further.

The catch to the ObjectMapToString is that it needs getName() to always be unique for a Class, and I don't know if that can always be guaranteed. If it is unique and cached (not calculated at runtime), then this could be faster than getting identityHashCode()-s.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53Wj5H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546Z9P,fury,2028576591,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-03-31T06:43:18Z,2024-03-31T06:43:18Z,"OK, I've been thinking about this for a while, and tinkering a lot with different options. I was surprised to find that at least one version of cuckoo hashing really can perform quite well (though not as dramatically better on containsKey() performance), as long as it never encounters two different keys with the same exact hashCode(). I modified an existing Apache v2-licensed cuckoo hash map, reducing allocations as much as possible, and the performance gains are considerable on some operations:

```
POPULATE
IdentityCuckooMap  : 198676.832 ns/op
JDK IdentityHashMap: 508930.787 ns/op
CONTAINS
IdentityCuckooMap  :   1023.728 ns/op
JDK IdentityHashMap:   1418.562 ns/op
COPY
IdentityCuckooMap  :  28171.380 ns/op
JDK IdentityHashMap: 302847.095 ns/op
ITERATE
IdentityCuckooMap  :  27954.503 ns/op
JDK IdentityHashMap: 149939.553 ns/op
```

The catch here is that if a cuckoo hash ""fails,"" it can enter an infinite loop or allocate memory forever, etc. Very bad worst-case properties. However, the internals of this particular cuckoo-hashed map and the existing FuryObjectMap are quite similar, and I'm working on an approach that will ""flip"" from using cuckoo hashing as long as it is viable, to using linear probing as FuryObjectMap currently does, if fully-colliding keys are present (or some other situation would force a rehash). I'm not sure what kind of speed penalty the flipping will impose; it is possible branch prediction will figure out that fully-colliding keys are extremely rare, and that would mean the cost would be very low relative to the above numbers. But, the code is larger for each method, which might be a problem for inlining. I'll have to benchmark and see... I know the JDK HashMap can also change its implementation to use a TreeMap-like Red-Black Tree if it encounters excessive collisions on Comparable keys, so this isn't an unprecedented model.

I'm testing the FlipMap code in [my jdkgdxds repo](https://github.com/tommyettinger/jdkgdxds/blob/master/src/test/java/com/github/tommyettinger/ds/test/FlipMap.java) for correctness, and I'll be benchmarking it using what should be similar code in [my assorted-benchmarks repo](https://github.com/tommyettinger/assorted-benchmarks/blob/master/jmh/src/main/java/de/heidelberg/pvs/container_bench/FlipMap.java).","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546Z9P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546bBr,fury,2028580971,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T07:06:02Z,2024-03-31T07:06:02Z,"Great, looks pretty promising! The caller is `org.apache.fury.resolver.MapRefResolver#writeRefOrNull`, would be nice if it can be inlined into this method.

I took a look at https://github.com/tommyettinger/assorted-benchmarks/blob/master/jmh/src/main/java/de/heidelberg/pvs/container_bench/FlipMap.java#L207. Would it be possible to seperate the branch less hit into a separate method, so the method body is smaller for inline. JVM has a max 325 bytecode size for inline be default. And in fury, we merged the `put` and `get` together into `putOrGet` to reduce two hash look up into one.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546bBr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55XRuL,fury,2036145035,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-04-04T04:06:55Z,2024-04-04T04:06:55Z,"I've done the steps you described, and it has gone from not inlining (code too large) to inlining when hot! I keep finding various small things to change, but they're at least getting smaller. The last major change wouldn't have even affected a map with Class keys (I had accidentally left in some comparisons as `==` from when this was purely an identity-comparing map; they use `equals()` now). I'll look into putOrGet() next.

I have a nagging worry that some major part of this might not behave correctly. I have some tests from a very old version of Apache Harmony that I've been using for some data structures... If you happen to know of a better suite of tests for compatibility with Set and Map, that would be great! I know implementing the interfaces isn't critical for Fury since what's there now doesn't have to implement Map, but being able to run a standard set of tests makes me more confident these will work how they should.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55XRuL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pwl6,fury,2040990074,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-04-06T06:28:56Z,2024-04-06T06:28:56Z,I'm making progress on the rest of the map types now; IdentityMap seems done and ObjectIntMap might be done or close to it. Hybridizing the two shouldn't be hard at all. Is there a particular benchmark that you think would best test the performance of these map types? It looks like running all benchmarks would take well over a day.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pwl6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pxOO,fury,2040992654,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-06T06:40:57Z,2024-04-06T06:40:57Z,"Hi @tommyettinger , thanks for this hard work.

Fury has a `src/main/java/org/apache/fury/benchmark/MapSuite.java` which did some benchmarks for IdentityMap.

For end-to-end tests, `src/main/java/org/apache/fury/benchmark/UserTypeSerializeSuite.java` can be used.  You can use following config:
```java
  public static void main(String[] args) throws IOException {
    if (args.length == 0) {
      String commandLine =
          ""org.apache.fury.*UserTypeSerializeSuite.fury* -f 3 -wi 10 -i 10 -t 1 -w 2s -r 2s -rf csv"";
      System.out.println(commandLine);
      args = commandLine.split("" "");
    }
    Main.main(args);
  }
```
`org.apache.fury.benchmark.state.BenchmarkState#references` should be set to true only, otherwise referecne tracking won't be enabled:
```java
  @Param({""true""})
  public boolean references;
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55pxOO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bKjB,fury,2053941441,1409,NA,tommyettinger,160684,Tommy Ettinger,tommy.ettinger@gmail.com,NA,2024-04-14T07:13:16Z,2024-04-14T07:13:16Z,"Well, the `FlipMap` turned out to be significantly slower than all other maps I tried, due to an error I made when writing `put()` and related code. With `put()` fixed so it actually puts a key and value in place, `FlipMap` is quite slow... I've been thinking about alternatives, though.

I've never used `ClassValue`, myself, but could it maybe be possible to avoid any Class-based hashtable if a ClassValue was registered per-Fury-instance that stores (somehow) a registered ID for a Class, in the Class itself? I also looked into hacky ways that might allow `sun.misc.Unsafe` to store an id directly in a Class, but even if that could work, it doesn't allow multiple `Fury` instances to have different registered classes. ClassValue might be able to do it, but I really have no idea what I am doing with that code.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bKjB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1409,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bRXp,fury,2053969385,1409,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T08:45:14Z,2024-04-14T08:45:14Z,What do you mean use class value? You mean use it to cache a I'd for class? This will have a hash look up cost too ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bRXp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1410,https://api.github.com/repos/apache/fury/issues/1410,fury,2189782004,1410,[Java] Serialized got recompilation when full gc happens,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-03-16T05:10:59Z,2024-03-17T10:47:35Z,"## Is your feature request related to a problem? Please describe.
When there is a memory pressure, serializer class got recompiled, which makes the serialization slow.

## Describe the solution you'd like
`CodeGenerator` use soft reference to cache the generated serializer. When there is a memory pressure, the `CodeGenerator` will be gc. 

We can hold strong reference in `Fury` instance if possible, and use a mixed `WeakReference` and `SoftReference` to delay the reference be set to null by garbage collector.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1410/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1412,https://api.github.com/repos/apache/fury/issues/1412,fury,2191083897,1412,[Java] ClassResolver separates ClassIdAllocator,LiangliangSui,116876207,,,OPEN,2024-03-18T02:16:33Z,2024-03-18T02:18:02Z,"## Is your feature request related to a problem? Please describe.
1. ClassId is allocated using `ClassIdAllocator`. The ClassId allocation task is separated from `ClassResolver`. `ClassIdAllocator` is referenced in `ClassResolver` to reduce the complexity of `ClassResolver`.
2. The interface is exposed to users through the Fury class. Users can obtain a ClassId through the interface instead of specifying it at will (specifying it at will may trigger an exception)


## Additional context

> Could you elabrate more the ClassIdAllocator?
I'm not sure how it handle such an situation: there are three libraries and one client of three libraries. Every libraries has some classes to register, but they can't assume the register order since they don't know which will be registered first, so they use specified class id for such registration. If the client has two versions, the first version use library1 and library2, and the second version use library1 and library3. Then the registered ids in library2 should be left here, those ids shouldn't be used by library3. Will the ClassIdAllocator handle such cases?

The purpose is to retain the ClassId registered in lib2.

Can we define such an interface such as `allocateClassId(short beginClassId)`?

This way the user can specify the starting position of the ClassId.

If the user does not specify `beginClassId`, Fury will take over the entire ClassId assignment.

That is, exposing two interfaces to users
```java
Fury#allocateClassId(short beginClassId)
Fury#allocateClassId()
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1412/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1412,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53X6Ti,fury,2002756834,1412,NA,LiangliangSui,116876207,,,NA,2024-03-18T02:18:02Z,2024-03-18T02:18:02Z,"Hey @chaokunyang , we can discuss `ClassIdAllocator` related content here.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc53X6Ti/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1418,https://api.github.com/repos/apache/fury/issues/1418,fury,2202337756,1418,[Spec][Doc] fury cross-language serialization specification proposal,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-03-22T12:01:12Z,2024-03-30T07:51:33Z,"## Is your feature request related to a problem? Please describe.
We've standardized java serialization spec in #1240, but the cross-language serialzation spec has never been formulized.

The current implementation of fury xlang serialization across multiple languages are all based on the code in one of the languages. It's not complete and pone to inconsistencies. 

And if some one want to implement Fury for a new language such as Fury C# in #686, he must read all Fury java serialization code. This would be a huge burden for new developers. Not even to say someone may don't write java either.

Another thing is that our xlang serialization is not standardized, we can't have a foundation to discuss how to improve our protocol too.

And our current  xlang serialization has many places to improve, such as it didn't resolve the type inconsistencies between languages. Such things should be resolved too.

## Describe the solution you'd like

We should design a new protocol for Fury and standardized it as a document.

## Additional context
Serialization frameworks such as arrow/avro/hession/thrift/flatbuffer/msgpack all have a serialization spec:
- https://github.com/apache/arrow/blob/main/format/Schema.fbs
- https://numpy.org/doc/stable/user/basics.types.html
- https://thrift.apache.org/docs/types
- https://www.caucho.com/resin-3.1/doc/hessian-2.0-spec.xtp
- https://github.com/msgpack/msgpack/blob/master/spec.md

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1418/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1419,https://api.github.com/repos/apache/fury/issues/1419,fury,2203731721,1419,[Java] print read objects when deserialization fail for better trouble shooting,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-03-23T06:47:57Z,2024-03-23T06:54:27Z,"## Is your feature request related to a problem? Please describe.
Currently when deserialization fail, it's hard to locate which object deserialization failed. We must debug locally line by line to find the issue.

## Describe the solution you'd like
We can carry with read objects in exception, so when this exception  is printed, we can know which objects are serialized correctly. Then we more close to the root cause.

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1421,https://api.github.com/repos/apache/fury/issues/1421,fury,2203830583,1421,[Doc] setup release document for fury,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-03-23T11:16:03Z,2024-04-17T08:11:59Z,"## Is your feature request related to a problem? Please describe.

There are some steps for a software released under ASF,  and apache Incubator podlings cannot create official ASF releases; see the [Incubator documentation](http://incubator.apache.org/guides/releasemanagement.html) for details and discussion.

we need a document to guide committers about how to release a new version of Fury.

## Describe the solution you'd like

Apache OpenDAL give a good example about how to make a new release: https://opendal.apache.org/community/committers/release

We can take it as an example.

thanks @xuanwo for your great work.

## Additional context
- https://www.apache.org/legal/release-policy.html
- http://incubator.apache.org/guides/releasemanagement.html
- TLP release doc: https://infra.apache.org/release-distribution
- https://infra.apache.org/release-signing.html
- https://infra.apache.org/release-publishing.html
- https://infra.apache.org/release-download-pages.html
- https://infra.apache.org/publishing-maven-artifacts.html","{""url"": ""https://api.github.com/repos/apache/fury/issues/1421/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1421,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Qcf7,fury,2017576955,1421,NA,Xuanwo,5351546,Xuanwo,github@xuanwo.io,NA,2024-03-25T09:33:27Z,2024-03-25T09:33:27Z,"> Apache OpenDAL give a good example about how to make a new release: https://opendal.apache.org/community/committers/release

Thank you for the reference! Please be aware that OpenDAL is a graduated project, and its release process differs from that of an incubator project. You can refer to previous versions here: https://github.com/apache/opendal/blob/v0.40.0/website/docs/contributing/release.md","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Qcf7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1421,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Rx7U,fury,2017926868,1421,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-25T12:47:21Z,2024-03-25T12:47:21Z,"> > Apache OpenDAL give a good example about how to make a new release: https://opendal.apache.org/community/committers/release
> 
> Thank you for the reference! Please be aware that OpenDAL is a graduated project, and its release process differs from that of an incubator project. You can refer to previous versions here: https://github.com/apache/opendal/blob/v0.40.0/website/docs/contributing/release.md

Thanks @Xuanwo , this really helps.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc54Rx7U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1421,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc560glw,fury,2060585328,1421,NA,heliang666s,147408835,,,NA,2024-04-17T07:37:52Z,2024-04-17T07:37:52Z,"I will try it,please assign me,thank you!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc560glw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1421,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5600Je,fury,2060665438,1421,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T08:11:58Z,2024-04-17T08:11:58Z,"I'm working on this already, and will create a PR in next days","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5600Je/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1433,https://api.github.com/repos/apache/fury/issues/1433,fury,2213022280,1433,Execute an error in the openj9 environment,mintonzhang,45935465,mintonzhang,mintonzhang@163.com,CLOSED,2024-03-28T11:50:08Z,2024-03-30T14:00:01Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

fury-core: 0.4.0
openjdk version ""17.0.10"" 2024-01-16
IBM Semeru Runtime Open Edition 17.0.10.0 (build 17.0.10+7)
Eclipse OpenJ9 VM 17.0.10.0 (build openj9-0.43.0, JRE 17 Mac OS X amd64-64-Bit Compressed References 20240116_636 (JIT enabled, AOT enabled)
OpenJ9   - 2c3d78b48
OMR      - ea8124dbc
JCL      - 2aad089841f based on jdk-17.0.10+7)


### Component(s)

Java

### Minimal reproduce step

```java

    @Getter
    @Setter
    public static class UserCacheInfoTest {

        private String extraUserId;

        private String unionId;

        private String name;

        private String jobNumber;

        private String email;

        private Long userId;

        private String mobile;

        private String avatar;

        private String position;

        private String deptName;
    }

    public static void main(String[] args) {
        UserCacheInfoTest userCacheInfoTest = new UserCacheInfoTest();
        userCacheInfoTest.setExtraUserId(""1"");
        userCacheInfoTest.setUnionId(""1"");
        userCacheInfoTest.setName(""1"");
        userCacheInfoTest.setJobNumber(""1"");
        userCacheInfoTest.setEmail(""1"");
        userCacheInfoTest.setUserId(0L);
        userCacheInfoTest.setMobile(""1"");
        userCacheInfoTest.setAvatar(""1"");
        userCacheInfoTest.setPosition(""1"");
        userCacheInfoTest.setDeptName(""1"");
        //ThreadLocalFury fury = new ThreadLocalFury(classLoader -> );

/
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .withCodegen(true)
                //.registerGuavaTypes(true)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .requireClassRegistration(false)
                .suppressClassRegistrationWarnings(true)
                .build();



        byte[] serialize = fury.serialize(userCacheInfoTest);

        UserCacheInfoTest deserialize = (UserCacheInfoTest) fury.deserialize(serialize);

        System.out.println();
    }
```




### What did you expect to see?

Normal serialization and deserialization

### What did you see instead?

```
Exception in thread ""main"" java.lang.RuntimeException: Create compatible serializer failed, 
class: class com.jasolar.todo.TestConfig$UserCacheInfoTest
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:58)
	at io.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:976)
	at io.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:132)
	at io.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:971)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:894)
	at io.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:791)
	at io.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1182)
	at io.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1114)
	at io.fury.Fury.writeRef(Fury.java:342)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:208)
	at com.jasolar.todo.TestConfig.main(TestConfig.java:114)
Caused by: io.fury.codegen.CodegenException: Compile error: 
com.jasolar.todo.TestConfig_UserCacheInfoTestFuryCompatibleCodec_1_-2072095631_213584418:
/* 0001 */ package com.jasolar.todo;
/* 0002 */ 
/* 0003 */ import java.util.List;
/* 0004 */ import java.util.Map;
/* 0005 */ import java.util.Set;
/* 0006 */ import io.fury.Fury;
/* 0007 */ import io.fury.memory.MemoryBuffer;
/* 0008 */ import io.fury.resolver.NoRefResolver;
/* 0009 */ import io.fury.resolver.ClassInfo;
/* 0010 */ import io.fury.resolver.ClassInfoHolder;
/* 0011 */ import io.fury.resolver.ClassResolver;
/* 0012 */ import io.fury.builder.Generated;
/* 0013 */ import io.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0014 */ import io.fury.serializer.Serializers.EnumSerializer;
/* 0015 */ import io.fury.serializer.Serializer;
/* 0016 */ import io.fury.serializer.StringSerializer;
/* 0017 */ import io.fury.serializer.ObjectSerializer;
/* 0018 */ import io.fury.serializer.CompatibleSerializer;
/* 0019 */ import io.fury.serializer.collection.AbstractCollectionSerializer;
/* 0020 */ import io.fury.serializer.collection.AbstractMapSerializer;
/* 0021 */ import io.fury.builder.Generated.GeneratedCompatibleSerializer;
/* 0022 */ 
/* 0023 */ public final class TestConfig_UserCacheInfoTestFuryCompatibleCodec_1_-2072095631_213584418 extends io.fury.builder.Generated.GeneratedSerializer {
/* 0024 */ 
/* 0025 */   private final NoRefResolver refResolver;
/* 0026 */   private final ClassResolver classResolver;
/* 0027 */   private final StringSerializer strSerializer;
/* 0028 */   private final io.fury.resolver.FieldResolver fieldResolver;
/* 0029 */   private Fury fury;
/* 0030 */ 
/* 0031 */   public TestConfig_UserCacheInfoTestFuryCompatibleCodec_1_-2072095631_213584418(Fury fury, Class classType) {
/* 0032 */       super(fury, classType);
/* 0033 */       this.fury = fury;
/* 0034 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0035 */   
/* 0036 */       io.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0037 */       refResolver = ((NoRefResolver)refResolver0);
/* 0038 */       classResolver = fury.getClassResolver();
/* 0039 */       strSerializer = fury.getStringSerializer();
/* 0040 */       fieldResolver = classResolver.getFieldResolver(com.jasolar.todo.TestConfig.UserCacheInfoTest.class);
/* 0041 */   }
/* 0042 */ 
/* 0043 */   private void writeEmbedTypes4Fields(MemoryBuffer memoryBuffer, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest1) {
/* 0044 */       memoryBuffer.writeInt(-968087463);
/* 0045 */       Object object1 = io.fury.util.Platform.getObject(userCacheInfoTest1, 16L);
/* 0046 */       String name = (String)object1;
/* 0047 */       if ((name == null)) {
/* 0048 */           memoryBuffer.writeByte(((byte)-3));
/* 0049 */       } else {
/* 0050 */           memoryBuffer.writeByte(((byte)0));
/* 0051 */           StringSerializer.writeBytesString(memoryBuffer, name);
/* 0052 */       }
/* 0053 */   }
/* 0054 */ 
/* 0055 */   private void writeEmbedTypes9Fields(MemoryBuffer memoryBuffer1, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest2) {
/* 0056 */       memoryBuffer1.writeLong(-5248567258096544589L);
/* 0057 */       Object object00 = io.fury.util.Platform.getObject(userCacheInfoTest2, 20L);
/* 0058 */       String jobNumber = (String)object00;
/* 0059 */       if ((jobNumber == null)) {
/* 0060 */           memoryBuffer1.writeByte(((byte)-3));
/* 0061 */       } else {
/* 0062 */           memoryBuffer1.writeByte(((byte)0));
/* 0063 */           StringSerializer.writeBytesString(memoryBuffer1, jobNumber);
/* 0064 */       }
/* 0065 */       memoryBuffer1.writeLong(700233596083L);
/* 0066 */       Object object21 = io.fury.util.Platform.getObject(userCacheInfoTest2, 24L);
/* 0067 */       String email = (String)object21;
/* 0068 */       if ((email == null)) {
/* 0069 */           memoryBuffer1.writeByte(((byte)-3));
/* 0070 */       } else {
/* 0071 */           memoryBuffer1.writeByte(((byte)0));
/* 0072 */           StringSerializer.writeBytesString(memoryBuffer1, email);
/* 0073 */       }
/* 0074 */       memoryBuffer1.writeLong(40571567920307L);
/* 0075 */       Object object32 = io.fury.util.Platform.getObject(userCacheInfoTest2, 36L);
/* 0076 */       String avatar = (String)object32;
/* 0077 */       if ((avatar == null)) {
/* 0078 */           memoryBuffer1.writeByte(((byte)-3));
/* 0079 */       } else {
/* 0080 */           memoryBuffer1.writeByte(((byte)0));
/* 0081 */           StringSerializer.writeBytesString(memoryBuffer1, avatar);
/* 0082 */       }
/* 0083 */       memoryBuffer1.writeLong(53645671375027L);
/* 0084 */       Object object43 = io.fury.util.Platform.getObject(userCacheInfoTest2, 32L);
/* 0085 */       String mobile = (String)object43;
/* 0086 */       if ((mobile == null)) {
/* 0087 */           memoryBuffer1.writeByte(((byte)-3));
/* 0088 */       } else {
/* 0089 */           memoryBuffer1.writeByte(((byte)0));
/* 0090 */           StringSerializer.writeBytesString(memoryBuffer1, mobile);
/* 0091 */       }
/* 0092 */       memoryBuffer1.writeLong(62511325027491L);
/* 0093 */       Object object54 = io.fury.util.Platform.getObject(userCacheInfoTest2, 28L);
/* 0094 */       Long userId = (Long)object54;
/* 0095 */       if ((userId == null)) {
/* 0096 */           memoryBuffer1.writeByte(((byte)-3));
/* 0097 */       } else {
/* 0098 */           memoryBuffer1.writeByte(((byte)0));
/* 0099 */           memoryBuffer1.writeSliLong(userId);
/* 0100 */       }
/* 0101 */       memoryBuffer1.writeLong(3995295286467763L);
/* 0102 */       Object object65 = io.fury.util.Platform.getObject(userCacheInfoTest2, 12L);
/* 0103 */       String unionId = (String)object65;
/* 0104 */       if ((unionId == null)) {
/* 0105 */           memoryBuffer1.writeByte(((byte)-3));
/* 0106 */       } else {
/* 0107 */           memoryBuffer1.writeByte(((byte)0));
/* 0108 */           StringSerializer.writeBytesString(memoryBuffer1, unionId);
/* 0109 */       }
/* 0110 */       memoryBuffer1.writeLong(178512161548574899L);
/* 0111 */       Object object76 = io.fury.util.Platform.getObject(userCacheInfoTest2, 44L);
/* 0112 */       String deptName = (String)object76;
/* 0113 */       if ((deptName == null)) {
/* 0114 */           memoryBuffer1.writeByte(((byte)-3));
/* 0115 */       } else {
/* 0116 */           memoryBuffer1.writeByte(((byte)0));
/* 0117 */           StringSerializer.writeBytesString(memoryBuffer1, deptName);
/* 0118 */       }
/* 0119 */       memoryBuffer1.writeLong(233262162698749107L);
/* 0120 */       Object object87 = io.fury.util.Platform.getObject(userCacheInfoTest2, 40L);
/* 0121 */       String position = (String)object87;
/* 0122 */       if ((position == null)) {
/* 0123 */           memoryBuffer1.writeByte(((byte)-3));
/* 0124 */       } else {
/* 0125 */           memoryBuffer1.writeByte(((byte)0));
/* 0126 */           StringSerializer.writeBytesString(memoryBuffer1, position);
/* 0127 */       }
/* 0128 */   }
/* 0129 */ 
/* 0130 */   private void writeEmbedTypesHashFields(MemoryBuffer memoryBuffer2, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest3) {
/* 0131 */       memoryBuffer2.writeLong(9153287876233170103L);
/* 0132 */       Object object90 = io.fury.util.Platform.getObject(userCacheInfoTest3, 8L);
/* 0133 */       String extraUserId = (String)object90;
/* 0134 */       if ((extraUserId == null)) {
/* 0135 */           memoryBuffer2.writeByte(((byte)-3));
/* 0136 */       } else {
/* 0137 */           memoryBuffer2.writeByte(((byte)0));
/* 0138 */           StringSerializer.writeBytesString(memoryBuffer2, extraUserId);
/* 0139 */       }
/* 0140 */   }
/* 0141 */ 
/* 0142 */   private long readEmbedTypes4Fields(MemoryBuffer memoryBuffer3, long value8, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest4) {
/* 0143 */       StringSerializer strSerializer = this.strSerializer;
/* 0144 */       if ((value8 == -968087463L)) {
/* 0145 */           if ((memoryBuffer3.readByte() != ((byte)-3))) {
/* 0146 */               String string = strSerializer.readBytesString(memoryBuffer3);
/* 0147 */               io.fury.util.Platform.putObject(userCacheInfoTest4, 16L, string);
/* 0148 */           } else {
/* 0149 */               io.fury.util.Platform.putObject(userCacheInfoTest4, 16L, null);
/* 0150 */           }
/* 0151 */           value8 = memoryBuffer3.readInt();
/* 0152 */       } else {
/* 0153 */           while ((((value8 & 3L) == ((byte)1)) && (value8 < -968087463L))) {
/* 0154 */             if ((fieldResolver.skipDataBy4(memoryBuffer3, ((int)value8)) == 9223372036854775806L)) {
/* 0155 */                 return 9223372036854775806L;
/* 0156 */             }
/* 0157 */             value8 = memoryBuffer3.readInt();
/* 0158 */           }
/* 0159 */           if ((value8 == -968087463L)) {
/* 0160 */               if ((memoryBuffer3.readByte() != ((byte)-3))) {
/* 0161 */                   String string1 = strSerializer.readBytesString(memoryBuffer3);
/* 0162 */                   io.fury.util.Platform.putObject(userCacheInfoTest4, 16L, string1);
/* 0163 */               } else {
/* 0164 */                   io.fury.util.Platform.putObject(userCacheInfoTest4, 16L, null);
/* 0165 */               }
/* 0166 */               value8 = memoryBuffer3.readInt();
/* 0167 */           }
/* 0168 */       }
/* 0169 */       return value8;
/* 0170 */   }
/* 0171 */ 
/* 0172 */   private long readEmbedTypes9Fields(MemoryBuffer memoryBuffer4, long value13, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest5) {
/* 0173 */       StringSerializer strSerializer = this.strSerializer;
/* 0174 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0175 */       if ((value13 == -5248567258096544589L)) {
/* 0176 */           if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0177 */               String string0 = strSerializer.readBytesString(memoryBuffer4);
/* 0178 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 20L, string0);
/* 0179 */           } else {
/* 0180 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 20L, null);
/* 0181 */           }
/* 0182 */           value13 = memoryBuffer4.readLong();
/* 0183 */       } else {
/* 0184 */           while ((((value13 & 7L) == ((byte)3)) && (value13 < -5248567258096544589L))) {
/* 0185 */             if ((fieldResolver.skipDataBy8(memoryBuffer4, value13) == 9223372036854775806L)) {
/* 0186 */                 return 9223372036854775806L;
/* 0187 */             }
/* 0188 */             value13 = memoryBuffer4.readLong();
/* 0189 */           }
/* 0190 */           if ((value13 == -5248567258096544589L)) {
/* 0191 */               if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0192 */                   String string2 = strSerializer.readBytesString(memoryBuffer4);
/* 0193 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 20L, string2);
/* 0194 */               } else {
/* 0195 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 20L, null);
/* 0196 */               }
/* 0197 */               value13 = memoryBuffer4.readLong();
/* 0198 */           }
/* 0199 */       }
/* 0200 */       if ((value13 == 700233596083L)) {
/* 0201 */           if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0202 */               String string3 = strSerializer.readBytesString(memoryBuffer4);
/* 0203 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 24L, string3);
/* 0204 */           } else {
/* 0205 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 24L, null);
/* 0206 */           }
/* 0207 */           value13 = memoryBuffer4.readLong();
/* 0208 */       } else {
/* 0209 */           while ((((value13 & 7L) == ((byte)3)) && (value13 < 700233596083L))) {
/* 0210 */             if ((fieldResolver.skipDataBy8(memoryBuffer4, value13) == 9223372036854775806L)) {
/* 0211 */                 return 9223372036854775806L;
/* 0212 */             }
/* 0213 */             value13 = memoryBuffer4.readLong();
/* 0214 */           }
/* 0215 */           if ((value13 == 700233596083L)) {
/* 0216 */               if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0217 */                   String string4 = strSerializer.readBytesString(memoryBuffer4);
/* 0218 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 24L, string4);
/* 0219 */               } else {
/* 0220 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 24L, null);
/* 0221 */               }
/* 0222 */               value13 = memoryBuffer4.readLong();
/* 0223 */           }
/* 0224 */       }
/* 0225 */       if ((value13 == 40571567920307L)) {
/* 0226 */           if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0227 */               String string5 = strSerializer.readBytesString(memoryBuffer4);
/* 0228 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 36L, string5);
/* 0229 */           } else {
/* 0230 */               io.fury.util.Platform.putObject(userCacheInfoTest5, 36L, null);
/* 0231 */           }
/* 0232 */           value13 = memoryBuffer4.readLong();
/* 0233 */       } else {
/* 0234 */           while ((((value13 & 7L) == ((byte)3)) && (value13 < 40571567920307L))) {
/* 0235 */             if ((fieldResolver.skipDataBy8(memoryBuffer4, value13) == 9223372036854775806L)) {
/* 0236 */                 return 9223372036854775806L;
/* 0237 */             }
/* 0238 */             value13 = memoryBuffer4.readLong();
/* 0239 */           }
/* 0240 */           if ((value13 == 40571567920307L)) {
/* 0241 */               if ((memoryBuffer4.readByte() != ((byte)-3))) {
/* 0242 */                   String string6 = strSerializer.readBytesString(memoryBuffer4);
/* 0243 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 36L, string6);
/* 0244 */               } else {
/* 0245 */                   io.fury.util.Platform.putObject(userCacheInfoTest5, 36L, null);
/* 0246 */               }
/* 0247 */               value13 = memoryBuffer4.readLong();
/* 0248 */           }
/* 0249 */       }
/* 0250 */       return value13;
/* 0251 */   }
/* 0252 */ 
/* 0253 */   private long readEmbedTypes9Fields1(MemoryBuffer memoryBuffer5, long value26, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest6) {
/* 0254 */       StringSerializer strSerializer = this.strSerializer;
/* 0255 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0256 */       if ((value26 == 53645671375027L)) {
/* 0257 */           if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0258 */               String string7 = strSerializer.readBytesString(memoryBuffer5);
/* 0259 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 32L, string7);
/* 0260 */           } else {
/* 0261 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 32L, null);
/* 0262 */           }
/* 0263 */           value26 = memoryBuffer5.readLong();
/* 0264 */       } else {
/* 0265 */           while ((((value26 & 7L) == ((byte)3)) && (value26 < 53645671375027L))) {
/* 0266 */             if ((fieldResolver.skipDataBy8(memoryBuffer5, value26) == 9223372036854775806L)) {
/* 0267 */                 return 9223372036854775806L;
/* 0268 */             }
/* 0269 */             value26 = memoryBuffer5.readLong();
/* 0270 */           }
/* 0271 */           if ((value26 == 53645671375027L)) {
/* 0272 */               if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0273 */                   String string8 = strSerializer.readBytesString(memoryBuffer5);
/* 0274 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 32L, string8);
/* 0275 */               } else {
/* 0276 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 32L, null);
/* 0277 */               }
/* 0278 */               value26 = memoryBuffer5.readLong();
/* 0279 */           }
/* 0280 */       }
/* 0281 */       if ((value26 == 62511325027491L)) {
/* 0282 */           if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0283 */               long value31 = memoryBuffer5.readSliLong();
/* 0284 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 28L, ((Long)value31));
/* 0285 */           } else {
/* 0286 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 28L, null);
/* 0287 */           }
/* 0288 */           value26 = memoryBuffer5.readLong();
/* 0289 */       } else {
/* 0290 */           while ((((value26 & 7L) == ((byte)3)) && (value26 < 62511325027491L))) {
/* 0291 */             if ((fieldResolver.skipDataBy8(memoryBuffer5, value26) == 9223372036854775806L)) {
/* 0292 */                 return 9223372036854775806L;
/* 0293 */             }
/* 0294 */             value26 = memoryBuffer5.readLong();
/* 0295 */           }
/* 0296 */           if ((value26 == 62511325027491L)) {
/* 0297 */               if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0298 */                   long value34 = memoryBuffer5.readSliLong();
/* 0299 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 28L, ((Long)value34));
/* 0300 */               } else {
/* 0301 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 28L, null);
/* 0302 */               }
/* 0303 */               value26 = memoryBuffer5.readLong();
/* 0304 */           }
/* 0305 */       }
/* 0306 */       if ((value26 == 3995295286467763L)) {
/* 0307 */           if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0308 */               String string9 = strSerializer.readBytesString(memoryBuffer5);
/* 0309 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 12L, string9);
/* 0310 */           } else {
/* 0311 */               io.fury.util.Platform.putObject(userCacheInfoTest6, 12L, null);
/* 0312 */           }
/* 0313 */           value26 = memoryBuffer5.readLong();
/* 0314 */       } else {
/* 0315 */           while ((((value26 & 7L) == ((byte)3)) && (value26 < 3995295286467763L))) {
/* 0316 */             if ((fieldResolver.skipDataBy8(memoryBuffer5, value26) == 9223372036854775806L)) {
/* 0317 */                 return 9223372036854775806L;
/* 0318 */             }
/* 0319 */             value26 = memoryBuffer5.readLong();
/* 0320 */           }
/* 0321 */           if ((value26 == 3995295286467763L)) {
/* 0322 */               if ((memoryBuffer5.readByte() != ((byte)-3))) {
/* 0323 */                   String string10 = strSerializer.readBytesString(memoryBuffer5);
/* 0324 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 12L, string10);
/* 0325 */               } else {
/* 0326 */                   io.fury.util.Platform.putObject(userCacheInfoTest6, 12L, null);
/* 0327 */               }
/* 0328 */               value26 = memoryBuffer5.readLong();
/* 0329 */           }
/* 0330 */       }
/* 0331 */       return value26;
/* 0332 */   }
/* 0333 */ 
/* 0334 */   private long readEmbedTypes9Fields2(MemoryBuffer memoryBuffer6, long value41, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest7) {
/* 0335 */       StringSerializer strSerializer = this.strSerializer;
/* 0336 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0337 */       if ((value41 == 178512161548574899L)) {
/* 0338 */           if ((memoryBuffer6.readByte() != ((byte)-3))) {
/* 0339 */               String string11 = strSerializer.readBytesString(memoryBuffer6);
/* 0340 */               io.fury.util.Platform.putObject(userCacheInfoTest7, 44L, string11);
/* 0341 */           } else {
/* 0342 */               io.fury.util.Platform.putObject(userCacheInfoTest7, 44L, null);
/* 0343 */           }
/* 0344 */           value41 = memoryBuffer6.readLong();
/* 0345 */       } else {
/* 0346 */           while ((((value41 & 7L) == ((byte)3)) && (value41 < 178512161548574899L))) {
/* 0347 */             if ((fieldResolver.skipDataBy8(memoryBuffer6, value41) == 9223372036854775806L)) {
/* 0348 */                 return 9223372036854775806L;
/* 0349 */             }
/* 0350 */             value41 = memoryBuffer6.readLong();
/* 0351 */           }
/* 0352 */           if ((value41 == 178512161548574899L)) {
/* 0353 */               if ((memoryBuffer6.readByte() != ((byte)-3))) {
/* 0354 */                   String string12 = strSerializer.readBytesString(memoryBuffer6);
/* 0355 */                   io.fury.util.Platform.putObject(userCacheInfoTest7, 44L, string12);
/* 0356 */               } else {
/* 0357 */                   io.fury.util.Platform.putObject(userCacheInfoTest7, 44L, null);
/* 0358 */               }
/* 0359 */               value41 = memoryBuffer6.readLong();
/* 0360 */           }
/* 0361 */       }
/* 0362 */       if ((value41 == 233262162698749107L)) {
/* 0363 */           if ((memoryBuffer6.readByte() != ((byte)-3))) {
/* 0364 */               String string13 = strSerializer.readBytesString(memoryBuffer6);
/* 0365 */               io.fury.util.Platform.putObject(userCacheInfoTest7, 40L, string13);
/* 0366 */           } else {
/* 0367 */               io.fury.util.Platform.putObject(userCacheInfoTest7, 40L, null);
/* 0368 */           }
/* 0369 */           value41 = memoryBuffer6.readLong();
/* 0370 */       } else {
/* 0371 */           while ((((value41 & 7L) == ((byte)3)) && (value41 < 233262162698749107L))) {
/* 0372 */             if ((fieldResolver.skipDataBy8(memoryBuffer6, value41) == 9223372036854775806L)) {
/* 0373 */                 return 9223372036854775806L;
/* 0374 */             }
/* 0375 */             value41 = memoryBuffer6.readLong();
/* 0376 */           }
/* 0377 */           if ((value41 == 233262162698749107L)) {
/* 0378 */               if ((memoryBuffer6.readByte() != ((byte)-3))) {
/* 0379 */                   String string14 = strSerializer.readBytesString(memoryBuffer6);
/* 0380 */                   io.fury.util.Platform.putObject(userCacheInfoTest7, 40L, string14);
/* 0381 */               } else {
/* 0382 */                   io.fury.util.Platform.putObject(userCacheInfoTest7, 40L, null);
/* 0383 */               }
/* 0384 */               value41 = memoryBuffer6.readLong();
/* 0385 */           }
/* 0386 */       }
/* 0387 */       return value41;
/* 0388 */   }
/* 0389 */ 
/* 0390 */   private long readEmbedTypesHashFields(MemoryBuffer memoryBuffer7, long value50, com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest8) {
/* 0391 */       StringSerializer strSerializer = this.strSerializer;
/* 0392 */       if ((value50 == 9153287876233170103L)) {
/* 0393 */           if ((memoryBuffer7.readByte() != ((byte)-3))) {
/* 0394 */               String string15 = strSerializer.readBytesString(memoryBuffer7);
/* 0395 */               io.fury.util.Platform.putObject(userCacheInfoTest8, 8L, string15);
/* 0396 */           } else {
/* 0397 */               io.fury.util.Platform.putObject(userCacheInfoTest8, 8L, null);
/* 0398 */           }
/* 0399 */           value50 = memoryBuffer7.readLong();
/* 0400 */       } else {
/* 0401 */           while ((((value50 & 7L) == ((byte)7)) && (value50 < 9153287876233170103L))) {
/* 0402 */             if ((fieldResolver.skipDataBy8(memoryBuffer7, value50) == 9223372036854775806L)) {
/* 0403 */                 return 9223372036854775806L;
/* 0404 */             }
/* 0405 */             value50 = memoryBuffer7.readLong();
/* 0406 */           }
/* 0407 */           if ((value50 == 9153287876233170103L)) {
/* 0408 */               if ((memoryBuffer7.readByte() != ((byte)-3))) {
/* 0409 */                   String string16 = strSerializer.readBytesString(memoryBuffer7);
/* 0410 */                   io.fury.util.Platform.putObject(userCacheInfoTest8, 8L, string16);
/* 0411 */               } else {
/* 0412 */                   io.fury.util.Platform.putObject(userCacheInfoTest8, 8L, null);
/* 0413 */               }
/* 0414 */               value50 = memoryBuffer7.readLong();
/* 0415 */           }
/* 0416 */       }
/* 0417 */       return value50;
/* 0418 */   }
/* 0419 */ 
/* 0420 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0421 */       com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest9 = (com.jasolar.todo.TestConfig.UserCacheInfoTest)obj;
/* 0422 */       this.writeEmbedTypes4Fields(buffer, userCacheInfoTest9);
/* 0423 */       this.writeEmbedTypes9Fields(buffer, userCacheInfoTest9);
/* 0424 */       this.writeEmbedTypesHashFields(buffer, userCacheInfoTest9);
/* 0425 */       buffer.writeLong(9223372036854775806L);
/* 0426 */   }
/* 0427 */ 
/* 0428 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0429 */       io.fury.resolver.FieldResolver fieldResolver = this.fieldResolver;
/* 0430 */       com.jasolar.todo.TestConfig.UserCacheInfoTest userCacheInfoTest10 = new com.jasolar.todo.TestConfig.UserCacheInfoTest();
/* 0431 */       refResolver.reference(userCacheInfoTest10);
/* 0432 */       long partFieldInfo = buffer.readInt();
/* 0433 */       while ((((partFieldInfo & 3L) == ((byte)1)) && (partFieldInfo < -968087463L))) {
/* 0434 */         if ((fieldResolver.skipDataBy4(buffer, ((int)partFieldInfo)) == 9223372036854775806L)) {
/* 0435 */             return userCacheInfoTest10;
/* 0436 */         }
/* 0437 */         partFieldInfo = buffer.readInt();
/* 0438 */       }
/* 0439 */       partFieldInfo = this.readEmbedTypes4Fields(buffer, partFieldInfo, userCacheInfoTest10);
/* 0440 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0441 */           return userCacheInfoTest10;
/* 0442 */       }
/* 0443 */       while (((partFieldInfo & 3L) == ((byte)1))) {
/* 0444 */         if ((fieldResolver.skipDataBy4(buffer, ((int)partFieldInfo)) == 9223372036854775806L)) {
/* 0445 */             return userCacheInfoTest10;
/* 0446 */         }
/* 0447 */         partFieldInfo = buffer.readInt();
/* 0448 */       }
/* 0449 */       long value55 = buffer.readInt();
/* 0450 */       partFieldInfo = ((value55 << 32) | (partFieldInfo & 4294967295L));
/* 0451 */       while ((((partFieldInfo & 7L) == ((byte)3)) && (partFieldInfo < -5248567258096544589L))) {
/* 0452 */         if ((fieldResolver.skipDataBy8(buffer, partFieldInfo) == 9223372036854775806L)) {
/* 0453 */             return userCacheInfoTest10;
/* 0454 */         }
/* 0455 */         partFieldInfo = buffer.readLong();
/* 0456 */       }
/* 0457 */       partFieldInfo = this.readEmbedTypes9Fields(buffer, partFieldInfo, userCacheInfoTest10);
/* 0458 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0459 */           return userCacheInfoTest10;
/* 0460 */       }
/* 0461 */       partFieldInfo = this.readEmbedTypes9Fields1(buffer, partFieldInfo, userCacheInfoTest10);
/* 0462 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0463 */           return userCacheInfoTest10;
/* 0464 */       }
/* 0465 */       partFieldInfo = this.readEmbedTypes9Fields2(buffer, partFieldInfo, userCacheInfoTest10);
/* 0466 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0467 */           return userCacheInfoTest10;
/* 0468 */       }
/* 0469 */       while (((partFieldInfo & 7L) == ((byte)3))) {
/* 0470 */         if ((fieldResolver.skipDataBy8(buffer, partFieldInfo) == 9223372036854775806L)) {
/* 0471 */             return userCacheInfoTest10;
/* 0472 */         }
/* 0473 */         partFieldInfo = buffer.readLong();
/* 0474 */       }
/* 0475 */       while ((((partFieldInfo & 7L) == ((byte)7)) && (partFieldInfo < 9153287876233170103L))) {
/* 0476 */         if ((fieldResolver.skipDataBy8(buffer, partFieldInfo) == 9223372036854775806L)) {
/* 0477 */             return userCacheInfoTest10;
/* 0478 */         }
/* 0479 */         partFieldInfo = buffer.readLong();
/* 0480 */       }
/* 0481 */       partFieldInfo = this.readEmbedTypesHashFields(buffer, partFieldInfo, userCacheInfoTest10);
/* 0482 */       if ((partFieldInfo == 9223372036854775806L)) {
/* 0483 */           return userCacheInfoTest10;
/* 0484 */       }
/* 0485 */       while (((partFieldInfo & 7L) == ((byte)7))) {
/* 0486 */         if ((fieldResolver.skipDataBy8(buffer, partFieldInfo) == 9223372036854775806L)) {
/* 0487 */             return userCacheInfoTest10;
/* 0488 */         }
/* 0489 */         partFieldInfo = buffer.readLong();
/* 0490 */       }
/* 0491 */       fieldResolver.skipEndFields(buffer, partFieldInfo);
/* 0492 */       return userCacheInfoTest10;
/* 0493 */   }
/* 0494 */ 
/* 0495 */ }
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:126)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:64)
	at io.fury.codegen.CodeGenerator.compile(CodeGenerator.java:144)
	at io.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:91)
	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:64)
	at io.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:56)
	at io.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:55)
	... 12 more
Caused by: io.fury.shaded.org.codehaus.commons.compiler.CompileException: File 'com/jasolar/todo/TestConfig_UserCacheInfoTestFuryCompatibleCodec_1_-2072095631_213584418.java', Line 23, Column 70: '{' expected instead of '-'
	at io.fury.shaded.org.codehaus.janino.TokenStreamImpl.compileException(TokenStreamImpl.java:362)
	at io.fury.shaded.org.codehaus.janino.TokenStreamImpl.read(TokenStreamImpl.java:149)
	at io.fury.shaded.org.codehaus.janino.Parser.read(Parser.java:3802)
	at io.fury.shaded.org.codehaus.janino.Parser.parseClassBody(Parser.java:851)
	at io.fury.shaded.org.codehaus.janino.Parser.parseClassDeclarationRest(Parser.java:746)
	at io.fury.shaded.org.codehaus.janino.Parser.parsePackageMemberTypeDeclarationRest(Parser.java:492)
	at io.fury.shaded.org.codehaus.janino.Parser.parseAbstractCompilationUnit(Parser.java:267)
	at io.fury.shaded.org.codehaus.janino.Compiler.parseAbstractCompilationUnit(Compiler.java:316)
	at io.fury.shaded.org.codehaus.janino.Compiler.compile2(Compiler.java:236)
	at io.fury.shaded.org.codehaus.janino.Compiler.compile(Compiler.java:213)
	at io.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:106)

```

### Anything Else?

Run the same code, use the openj9-jdk17 error, use the zuul-jdk17 is indeed normal.I suspect openj9 does not support fury, but I don't know how to change it.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1433/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1433,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544SSO,fury,2028020878,1433,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-30T11:32:21Z,2024-03-30T11:32:21Z,"Hi @mintonzhang , thanks for creating this issue. We haven't test fury on openj9 yet. There may need some work. I did a quick fix for compile issue in #1436 , but I'm not sure whether there won't be other issues","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544SSO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/1435,fury,2216353970,1435,Fury fails when deserializing from InputStream,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,CLOSED,2024-03-30T09:29:48Z,2024-04-08T14:37:07Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0-SNAPSHOT, 0.4.1

### Component(s)

Java

### Minimal reproduce step

```java
import org.apache.fury.Fury;
import org.apache.fury.config.Language;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Arrays;

public class Reproducer {
    public static void main(String[] args) {
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withMetaContextShare(false)
                .build();

        byte[] data = fury.serializeJavaObject(new TestRecord(""Some string"", 123));

        try {
            TestRecord result = fury.deserializeJavaObject(Arrays.copyOf(data, data.length), TestRecord.class);
            System.out.println(""Byte array result: "" + result);
        } catch (Exception e) {
            System.out.println(""Byte array result: "" + e.getClass().getSimpleName());
            e.printStackTrace();
        }

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(Arrays.copyOf(data, data.length));
        try {
            TestRecord result = fury.deserializeJavaObject(byteArrayInputStream, TestRecord.class);
            System.out.println(""ByteArrayInputStream result: "" + result);
        } catch (Exception e) {
            System.out.println(""ByteArrayInputStream result: "" + e.getClass().getSimpleName());
            e.printStackTrace();
        }

        // hack: Fury have an optimisation for ByteArrayInputStream, which we want to avoid
        InputStream inputStream = new BufferedInputStream(new ByteArrayInputStream(Arrays.copyOf(data, data.length)));
        try {
            TestRecord result = fury.deserializeJavaObject(inputStream, TestRecord.class);
            System.out.println(""InputStream result: "" + result);
        } catch (Exception e) {
            System.out.println(""InputStream result: "" + e.getClass().getSimpleName());
            e.printStackTrace();
        }
    }

    public static class TestRecord {
        public final String a;
        public final int b;

        public TestRecord(String a, int b) {
            this.a = a;
            this.b = b;
        }

        @Override
        public String toString() {
            return ""TestRecord{"" +
                    ""a='"" + a + '\'' +
                    "", b="" + b +
                    '}';
        }
    }
}

```

### What did you expect to see?

No exception to be throwed, the data should be deserialized correctly.

### What did you see instead?

`java.lang.UnsupportedOperationException: Unsupported coder 111` when deserializing with `ByteArrayInputStream` and `java.lang.IllegalArgumentException` when deserializing with any other `InputStream`.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1435/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544PRr,fury,2028008555,1435,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-03-30T10:40:52Z,2024-03-30T10:40:52Z,"After hours of coding I finally came up that I have to manually prefix the byte array with it's original size. However I wasn't able to find any information about this on the documentation.
I think, either documentation have to be updated, either InputStream size read should be refactored with `available()` method, either this size should be written by Fury method.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544PRr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544SKv,fury,2028020399,1435,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-30T11:31:00Z,2024-03-30T11:31:00Z,"Hi @Munoon, `fury.deserializeJavaObject(intputstream, class)` should only be used with `fury.serializeJavaObject(outputstream, object)`. You can't use it to deserialize the data from `fury.serializeJavaObject(object)`. 

Our document didn't pointed out this, sorry for the inconvenience. We do have plans to align the implementation between those methods, but that may take a little time to implement.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544SKv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544TF1,fury,2028024181,1435,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-03-30T11:46:41Z,2024-03-30T11:46:41Z,"> Hi @Munoon, `fury.deserializeJavaObject(intputstream, class)` should only be used with `fury.serializeJavaObject(outputstream, object)`. You can't use it to deserialize the data from `fury.serializeJavaObject(object)`.

Can you please explain what's the benefit of writing this size?
In my app I am using Fury to write the data in to the file (currently it is implemented using `Files.writeAllBytes(fury.deserializeJavaObject(obj))`) and then read it later.
So I'm trying to understand which case suits better here.

Also, I found out that the fastest way to read the data from the file with Fury is by passing the `FileChannel -> ByteBuffer -> MemoryBuffer` wrapper. Since, I guess, this is a very popular use case in using Fury, such API may be added.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc544TF1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546MsK,fury,2028522250,1435,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T01:39:51Z,2024-03-31T01:39:51Z,"Currently fury doesn't support streaming read, so we prefix the size in fury.serializeJavaObject(outputstream, object. Then when deserialization, we can read size first and read binary from the stream to deserialize the  object like you did manually. If you want to fury do this for you, you must use fury.serializeJavaObject(outputstream, object) for serialization.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546MsK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546MwP,fury,2028522511,1435,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T01:42:02Z,2024-03-31T01:42:02Z,"It is possible to support streaming natively. We can make MemoryBuffer hold a read channel Or input stream object, and read data only in checkReadableBytes method. 

I prefer using channel since it provide opportunities for zero copy.

It's feasible, but we don't have time for this currently.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc546MwP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55HpfK,fury,2032048074,1435,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-02T13:29:21Z,2024-04-02T13:29:21Z,"Fury seems like an interesting project to me, so I'd like to contribute, actually.
If you think, that this feature worth implementing - I'd like to make a try.

Also, I think that MemoryBuffer could become interface now, where different implementations holds different data sources (native address, byte array, `InputStream`, channel, etc)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55HpfK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55J1pV,fury,2032622165,1435,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-02T17:21:15Z,2024-04-02T17:21:15Z,"> Fury seems like an interesting project to me, so I'd like to contribute, actually. If you think, that this feature worth implementing - I'd like to make a try.
> 
> Also, I think that MemoryBuffer could become interface now, where different implementations holds different data sources (native address, byte array, `InputStream`, channel, etc)

That would be really great,  @Munoon .

I try to implement the native streaming deserialization in #1451 . It's a little complicated due to we don't employ a polymorphic design for `MemoryBuffer`.  The streaming reading for `InputStream` are basiclly finished, but the support for `java.nio.Channel` are not included in that PR. Maybe it can be taken as an example to implement the streaming channel deserializaiton.

I thought about make `MemoryBuffer` polymorphic when I create fury several years ago, but polymorphism will make the invocation and other performance optimization such as bound checks elimination infeasible. 
And considering many cases are small object deserializaiton, the streaming are unnecessary, so I made it as a final classes in the end.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55J1pV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1435,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55KBjh,fury,2032670945,1435,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-02T17:41:26Z,2024-04-02T17:41:26Z,"In those days, objects are getting bigger and bigger, the steaming is important to reduce latency for big objects, especially for big data and tensor computing.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55KBjh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1438,https://api.github.com/repos/apache/fury/issues/1438,fury,2216787003,1438,[Java] genearate class leak on openj9 jdk,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-03-31T05:20:15Z,2024-04-27T16:35:55Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury: 0.5.0-SNAPSHOT
OS:linux
JDK:openj9 17

### Component(s)

Java

### Minimal reproduce step

Fury will cache generated classes using weak/soft reference, so the generate serializer classes will be eligable for GC. But it doesn't work for openj9 on linux. Openj9 on windows17 works fine.

This is fine mostly, if we are not int a environment which hot swap/load classes. But for dynamic load classes cases, this will cause class leak.

Reproduction: `mvn test -Dtest=org.apache.fury.FuryTest#testClassGC`

### What did you expect to see?

class be gc

### What did you see instead?

 test timeout

### Anything Else?

#1437 #1433 

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1438/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1440,https://api.github.com/repos/apache/fury/issues/1440,fury,2216959614,1440,need to mention the V8 file license in Fury LICENSE/NOTICE,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T12:55:36Z,2024-04-03T08:55:17Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Other

### Minimal reproduce step

n/a

### What did you expect to see?

javascript/packages/hps/src/v8-fast-api-calls.h

```
// Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
```

This needs to be mentioned in the NOTICE. I honestly think all of this should be in the LICENSE and not the NOTICE (according to @tisonkun). I will be interested to see what the Incubator PMC makes of our LICENSE and NOTICE.


### What did you see instead?

need to mention all non Fury origin source files

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1440/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1440,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547WZo,fury,2028824168,1440,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T17:03:20Z,2024-03-31T17:03:20Z,"@pjfanning Currently we included following statements in NOTICE file:

```

================================================================
Node.js licenses
================================================================
The following components are provided under the Node.js License. See project link for details.
The text of each license is also included in licenses/LICENSE-[project].txt.

* node (https://github.com/nodejs/node)
    Files:
      javascript/packages/hps/src/v8-fast-api-calls.h

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547WZo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1440,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547Wqu,fury,2028825262,1440,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T17:06:36Z,2024-03-31T17:06:36Z,"LICENSE-node.txt has mentioned V8:

```
- V8, located at deps/v8, is licensed as follows:
  """"""
    This license applies to all parts of V8 that are not externally
    maintained libraries.  The externally maintained libraries used by V8
    are:

      - PCRE test suite, located in
        test/mjsunit/third_party/regexp-pcre/regexp-pcre.js.  This is based on the
        test suite from PCRE-7.3, which is copyrighted by the University
        of Cambridge and Google, Inc.  The copyright notice and license
        are embedded in regexp-pcre.js.

      - Layout tests, located in test/mjsunit/third_party/object-keys.  These are
        based on layout tests from webkit.org which are copyrighted by
        Apple Computer, Inc. and released under a 3-clause BSD license.

      - Strongtalk assembler, the basis of the files assembler-arm-inl.h,
        assembler-arm.cc, assembler-arm.h, assembler-ia32-inl.h,
        assembler-ia32.cc, assembler-ia32.h, assembler-x64-inl.h,
        assembler-x64.cc, assembler-x64.h, assembler.cc and assembler.h.
        This code is copyrighted by Sun Microsystems Inc. and released
        under a 3-clause BSD license.

      - Valgrind client API header, located at src/third_party/valgrind/valgrind.h
        This is released under the BSD license.

      - The Wasm C/C++ API headers, located at third_party/wasm-api/wasm.{h,hh}
        This is released under the Apache license. The API's upstream prototype
        implementation also formed the basis of V8's implementation in
        src/wasm/c-api.cc.

    These libraries have their own licenses; we recommend you read them,
    as their terms may differ from the terms below.

    Further license information can be found in LICENSE files located in
    sub-directories.

    Copyright 2014, the V8 project authors. All rights reserved.
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials provided
          with the distribution.
        * Neither the name of Google Inc. nor the names of its
          contributors may be used to endorse or promote products derived
          from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  """"""
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547Wqu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1440,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547XYH,fury,2028828167,1440,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-31T17:12:10Z,2024-03-31T17:12:10Z,"thanks @chaokunyang

I'll close this","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547XYH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1440,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547YWR,fury,2028832145,1440,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T17:21:27Z,2024-03-31T17:21:27Z,"@pjfanning Actually this file is not from nodejs, we should include v8 license instead. I fixed it in #1446 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547YWR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1441,https://api.github.com/repos/apache/fury/issues/1441,fury,2216960506,1441,add Apache license to build.sbt,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T12:58:11Z,2024-03-31T17:00:23Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Other

### Minimal reproduce step

n/a

### What did you expect to see?

license headers

### What did you see instead?

missing header

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1441/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1443,https://api.github.com/repos/apache/fury/issues/1443,fury,2216963692,1443,add license header to gyp file ,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T13:03:48Z,2024-04-03T08:55:17Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Other

### Minimal reproduce step

n/a

### What did you expect to see?

header in javascript/packages/hps/binding.gyp

### What did you see instead?

n/a

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1443/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1444,https://api.github.com/repos/apache/fury/issues/1444,fury,2216965291,1444,add license headers to python files,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T13:07:51Z,2024-04-03T08:55:16Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Python

### Minimal reproduce step

n/a

### What did you expect to see?

Apache RAT shows that these files don't header have license headers

```
  ./python/pyfury/__init__.pxd
  ./python/pyfury/_serialization.pyx
  ./python/pyfury/_util.pxd
  ./python/pyfury/_util.pyx
  ./python/pyfury/format/_format.pyx
  ./python/pyfury/format/encoder.pxi
  ./python/pyfury/format/row.pxi
  ./python/pyfury/format/vectorized.pxi
  ./python/pyfury/includes/__init__.pxd
  ./python/pyfury/includes/libabsl.pxd
  ./python/pyfury/includes/libformat.pxd
  ./python/pyfury/includes/libutil.pxd
  ./python/pyfury/lib/__init__.pxd
  ./python/pyfury/lib/mmh3/__init__.pxd
  ./python/pyfury/lib/mmh3/mmh3.pxd
  ./python/pyfury/lib/mmh3/mmh3.pyx
```

### What did you see instead?

n/a

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1444/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1445,https://api.github.com/repos/apache/fury/issues/1445,fury,2216966201,1445,add license header to javascript/.eslintrc.cjs,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T13:10:10Z,2024-04-03T08:55:16Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Other

### Minimal reproduce step

n/a

### What did you expect to see?

need license header in javascript/.eslintrc.cjs

### What did you see instead?

n/a

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1445/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1447,https://api.github.com/repos/apache/fury/issues/1447,fury,2217089099,1447,rename blacklist code,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-31T17:11:31Z,2024-04-01T17:26:42Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

n/a

### Component(s)

Other

### Minimal reproduce step

n/a

### What did you expect to see?

Blacklist has taken on negative connotations. In the modern era, many people don't want to associate colours with connotations of good or bad. Likewise, whitelist is unpopular now.

Could we rename these files are disallow or disallow-list or something like that?

### What did you see instead?

n/a

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1447/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1447,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547Xgx,fury,2028828721,1447,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-03-31T17:14:18Z,2024-03-31T17:14:18Z,"Good catch, I think we can rename it to disallow-list or forbidden-list","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc547Xgx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/1454,fury,2221380801,1454,deserialize failing with java.lang.OutOfMemoryError: Java heap space,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,OPEN,2024-04-02T20:23:36Z,2024-04-03T02:49:58Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

latest 0.5.0 snapshot

### Component(s)

Java/Scals

### Minimal reproduce step

Here's the exception we're seeing.
```
org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [PredictorStorageData(null,null,null), ConfigurationMetadata(Perfume SMILES price-process,Default Graph Model generated from data inspection.,null), Some(null), {}]
	at org.apache.fury.Fury.handleReadFailed(Fury.java:784)
	at org.apache.fury.Fury.deserialize(Fury.java:755)
	at org.apache.fury.Fury.deserialize(Fury.java:685)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:99)
	at io.citrine.mithril.modules.predictors.Predictor$.$anonfun$decode$1(Predictor.scala:111)
	at scala.util.Try$.apply(Try.scala:210)
	at io.citrine.mithril.modules.predictors.Predictor$.decode(Predictor.scala:107)
	at io.citrine.mithrilworkbench.Main$.$anonfun$tryToDecodeThisPredictor$1(Main.scala:330)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scribe.LoggerSupport.elapsed(LoggerSupport.scala:67)
	at scribe.LoggerSupport.elapsed$(LoggerSupport.scala:62)
	at scribe.package$.elapsed(package.scala:8)
	at io.citrine.mithrilworkbench.Main$.tryToDecodeThisPredictor(Main.scala:323)
	at io.citrine.mithrilworkbench.Main$.$anonfun$main$5(Main.scala:340)
	at io.citrine.mithrilworkbench.Main$.$anonfun$main$5$adapted(Main.scala:340)
	at mainargs.Invoker$.$anonfun$invoke0$3(Invoker.scala:63)
	at mainargs.Result.flatMap(Result.scala:13)
	at mainargs.Result.flatMap$(Result.scala:12)
	at mainargs.Result$Success.flatMap(Result.scala:23)
	at mainargs.Invoker$.invoke0(Invoker.scala:62)
	at mainargs.Invoker$.invoke(Invoker.scala:72)
	at mainargs.Invoker$.$anonfun$runMains$1(Invoker.scala:92)
	at mainargs.Result.flatMap(Result.scala:13)
	at mainargs.Result.flatMap$(Result.scala:12)
	at mainargs.Result$Success.flatMap(Result.scala:23)
	at mainargs.Invoker$.groupArgs$1(Invoker.scala:92)
	at mainargs.Invoker$.runMains(Invoker.scala:107)
	at mainargs.ParserForMethods.runRaw0(Parser.scala:170)
	at mainargs.ParserForMethods.runEither(Parser.scala:108)
	at mainargs.ParserForMethods.runEither(Parser.scala:151)
	at mainargs.ParserForMethods.runOrExit(Parser.scala:56)
	at io.citrine.mithrilworkbench.Main$.main(Main.scala:341)
	at io.citrine.mithrilworkbench.Main.main(Main.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.base/java.lang.reflect.Array.multiNewArray(Native Method)
	at java.base/java.lang.reflect.Array.newInstance(Array.java:114)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.newArray(ArraySerializers.java:177)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.read(ArraySerializers.java:126)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.read(ArraySerializers.java:43)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.collection.AbstractMapSerializer.generalJavaRead(AbstractMapSerializer.java:568)
	at org.apache.fury.serializer.collection.AbstractMapSerializer.genericJavaRead(AbstractMapSerializer.java:443)
	at org.apache.fury.serializer.collection.AbstractMapSerializer.readElements(AbstractMapSerializer.java:435)
	at org.apache.fury.serializer.collection.MapSerializer.read(MapSerializer.java:46)
	at org.apache.fury.serializer.collection.MapSerializer.read(MapSerializer.java:27)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:818)
	at org.apache.fury.Fury.deserialize(Fury.java:751)
	at org.apache.fury.Fury.deserialize(Fury.java:685)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:99)
```

### What did you expect to see?

We're working with a 1G binary and we have 8G of heap space.

### What did you see instead?

```
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.base/java.lang.reflect.Array.multiNewArray(Native Method)
	at java.base/java.lang.reflect.Array.newInstance(Array.java:114)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.newArray(ArraySerializers.java:177)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1454/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MeL_,fury,2033312511,1454,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T00:14:01Z,2024-04-03T00:14:01Z,"Hi @andyczerwonka , can I reproduce this error in my local environment?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MeL_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MeTB,fury,2033312961,1454,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T00:14:34Z,2024-04-03T00:14:34Z,And could you provide your Fury creation code here too?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MeTB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mffe,fury,2033317854,1454,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-03T00:20:35Z,2024-04-03T00:20:35Z,"> And could you provide your Fury creation code here too?

```scala
private val fury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .requireClassRegistration(false)
    .withScalaOptimizationEnabled(true)
    .withRefTracking(true)
    .withStringCompressed(true)
    .withLongCompressed(true)
    .withIntCompressed(true)
    .withAsyncCompilation(true)
    .buildThreadSafeFury()
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mffe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mf3L,fury,2033319371,1454,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-03T00:22:26Z,2024-04-03T00:22:26Z,"> Hi @andyczerwonka , can I reproduce this error in my local environment?

Unfortunately not, because the code is proprietary and I cannot share it. I was hoping the stack tracewould give us some insight into where it's failing so I could create a sample model.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mf3L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mk3g,fury,2033339872,1454,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T00:36:25Z,2024-04-03T00:36:25Z,Could you disable sync compilation and try it again? There are some inconsistentency between compile mode and interpretor mode,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mk3g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Modt,fury,2033354605,1454,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-03T00:57:53Z,2024-04-03T00:57:53Z,"> Could you disable sync compilation and try it again? There are some inconsistentency between compile mode and interpretor mode

Assuming you want me to `withAsyncCompilation(false)`, yes?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Modt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1454,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55M8NJ,fury,2033435465,1454,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T02:49:58Z,2024-04-03T02:49:58Z,"> > Could you disable sync compilation and try it again? There are some inconsistentency between compile mode and interpretor mode
> 
> Assuming you want me to `withAsyncCompilation(false)`, yes?

Yes, that's what I mean. Does it still fail?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55M8NJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/1455,fury,2221462957,1455,deserialize fails with java.lang.NullPointerException,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,OPEN,2024-04-02T21:16:36Z,2024-04-27T05:36:38Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0-rc2

### Component(s)

Java

### Minimal reproduce step

We are attempting to replace the latest snapshot with rc2, and we're getting the following exception
```
org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [<clipped stringified model>, null, scala.collection.generic.DefaultSerializationProxy@5d2828c9, scala.collection.IterableFactory$ToFactory@3a082ff4, null]
	at org.apache.fury.Fury.handleReadFailed(Fury.java:784)
	at org.apache.fury.Fury.deserialize(Fury.java:755)
	at org.apache.fury.Fury.deserialize(Fury.java:685)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:99)
	at io.citrine.mithril.modules.predictors.Predictor$.$anonfun$decode$1(Predictor.scala:111)
	at scala.util.Try$.apply(Try.scala:210)
	at io.citrine.mithril.modules.predictors.Predictor$.decode(Predictor.scala:107)
	at io.citrine.mithrilworkbench.Main$.$anonfun$tryToDecodeThisPredictor$1(Main.scala:334)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scribe.LoggerSupport.elapsed(LoggerSupport.scala:67)
	at scribe.LoggerSupport.elapsed$(LoggerSupport.scala:62)
	at scribe.package$.elapsed(package.scala:8)
	at io.citrine.mithrilworkbench.Main$.tryToDecodeThisPredictor(Main.scala:323)
	at io.citrine.mithrilworkbench.Main$.$anonfun$main$5(Main.scala:351)
	at io.citrine.mithrilworkbench.Main$.$anonfun$main$5$adapted(Main.scala:351)
	at mainargs.Invoker$.$anonfun$invoke0$3(Invoker.scala:63)
	at mainargs.Result.flatMap(Result.scala:13)
	at mainargs.Result.flatMap$(Result.scala:12)
	at mainargs.Result$Success.flatMap(Result.scala:23)
	at mainargs.Invoker$.invoke0(Invoker.scala:62)
	at mainargs.Invoker$.invoke(Invoker.scala:72)
	at mainargs.Invoker$.$anonfun$runMains$1(Invoker.scala:92)
	at mainargs.Result.flatMap(Result.scala:13)
	at mainargs.Result.flatMap$(Result.scala:12)
	at mainargs.Result$Success.flatMap(Result.scala:23)
	at mainargs.Invoker$.groupArgs$1(Invoker.scala:92)
	at mainargs.Invoker$.runMains(Invoker.scala:107)
	at mainargs.ParserForMethods.runRaw0(Parser.scala:170)
	at mainargs.ParserForMethods.runEither(Parser.scala:108)
	at mainargs.ParserForMethods.runEither(Parser.scala:151)
	at mainargs.ParserForMethods.runOrExit(Parser.scala:56)
	at io.citrine.mithrilworkbench.Main$.main(Main.scala:352)
	at io.citrine.mithrilworkbench.Main.main(Main.scala)
Caused by: java.lang.NullPointerException
	at scala.collection.IterableFactory$ToFactory.newBuilder(Factory.scala:275)
	at scala.collection.generic.DefaultSerializationProxy.readObject(DefaultSerializationProxy.scala:48)
	at org.apache.fury.serializer.ObjectStreamSerializer.read(ObjectStreamSerializer.java:221)
	at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:316)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
	at org.apache.fury.Fury.readData(Fury.java:884)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:284)
	at org.apache.fury.serializer.collection.CollectionSerializers$JDKCompatibleCollectionSerializer.read(CollectionSerializers.java:574)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:818)
	at org.apache.fury.serializer.ObjectStreamSerializer$FuryObjectInputStream.readObjectOverride(ObjectStreamSerializer.java:693)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:480)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:447)
	at scala.collection.generic.DefaultSerializationProxy.readObject(DefaultSerializationProxy.scala:54)
	at org.apache.fury.serializer.ObjectStreamSerializer.read(ObjectStreamSerializer.java:221)
	at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:316)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
	at org.apache.fury.Fury.readData(Fury.java:884)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:284)
	at org.apache.fury.serializer.collection.CollectionSerializers$JDKCompatibleCollectionSerializer.read(CollectionSerializers.java:574)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:831)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:438)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:382)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:316)
	at org.apache.fury.Fury.readDataInternal(Fury.java:916)
	at org.apache.fury.Fury.readRef(Fury.java:818)
	at org.apache.fury.Fury.deserialize(Fury.java:751)
```

### What did you expect to see?

We expect it to work.

### What did you see instead?

```
Caused by: java.lang.NullPointerException
	at scala.collection.IterableFactory$ToFactory.newBuilder(Factory.scala:275)
	at scala.collection.generic.DefaultSerializationProxy.readObject(DefaultSerializationProxy.scala:48)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1455/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MdkQ,fury,2033309968,1455,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T00:10:57Z,2024-04-03T00:10:57Z,"Hi @andyczerwonka , could you provide reproduction code here? I'll debug into your code to find out what happened","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55MdkQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mo6m,fury,2033356454,1455,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-03T01:00:34Z,2024-04-03T01:00:34Z,"> Hi @andyczerwonka , could you provide reproduction code here? I'll debug into your code to find out what happened

Unfortunately we're in the same situation as we are [here](https://github.com/apache/incubator-fury/issues/1454#issuecomment-2033319371).","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Mo6m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55WqAD,fury,2035982339,1455,NA,LiangliangSui,116876207,,,NA,2024-04-04T01:52:09Z,2024-04-04T01:52:09Z,"Can we improve the log system and insert some info and debug logs into the code? For this situation where reproducible code cannot be provided but is reproducible stably, users can dynamically configure the log level through ENV, and then upload the collected log, we can restore the problem through these logs.

But I'm also worried that too many insert points in the code will cause performance degradation.

WDYT? @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55WqAD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__i7,fury,2080372923,1455,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-27T05:36:13Z,2024-04-27T05:36:13Z,"> Can we improve the log system and insert some info and debug logs into the code? For this situation where reproducible code cannot be provided but is reproducible stably, users can dynamically configure the log level through ENV, and then upload the collected log, we can restore the problem through these logs.
> 
> But I'm also worried that too many insert points in the code will cause performance degradation.
> 
> WDYT? @chaokunyang

The log will be in critical path. If the error happens occasionally, the users may won't enable such log level. 

If the error happens frequently, we may not need the log to restore the error","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__i7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1455,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__lk,fury,2080373092,1455,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-27T05:36:36Z,2024-04-27T05:36:36Z,"Hi @andyczerwonka , could you reproduce this error locally now?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__lk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1456,https://api.github.com/repos/apache/fury/issues/1456,fury,2221872230,1456,"[Java] Does Fury preregister common Java collection classes, or do I need to register them manually?",cdxf,6419729,,,CLOSED,2024-04-03T04:36:37Z,2024-04-03T10:23:08Z,"I would like to know if Fury automatically handles the registration of these common Java collection classes: ```ArrayList```, ```HashMap``` or classes that are not part of the public API (which I can't access directly), like: ```ImmutableCollections.Map1```, ```ImmutableCollections.List12```, ```ImmutableCollections.ListN```...

Or if I need to explicitly register them myself when using Fury?

And what about Interface class, do I need to register the Interface class also (for example ```List.class```)","{""url"": ""https://api.github.com/repos/apache/fury/issues/1456/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1456,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NZS-,fury,2033554622,1456,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T05:24:46Z,2024-04-03T05:24:46Z,"They are all registered by fury, you can access ClassResolver first a detailed registered list","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NZS-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1456,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NaIa,fury,2033558042,1456,NA,LiangliangSui,116876207,,,NA,2024-04-03T05:27:24Z,2024-04-03T05:27:24Z,@cdxf Details can be viewed at https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/resolver/ClassResolver.java#L262,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NaIa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1456,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NbPH,fury,2033562567,1456,NA,LiangliangSui,116876207,,,NA,2024-04-03T05:30:31Z,2024-04-03T05:30:31Z,Should we indicate in https://github.com/apache/incubator-fury/blob/main/docs/guide/java_object_graph_guide.md which classes have been registered and which Serializers have been registered? Currently these things are in the documentation It's rather vague. @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55NbPH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1456,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Pwwb,fury,2034175003,1456,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T10:23:06Z,2024-04-03T10:23:06Z,"@LiangliangSui Yes, we'd better document those classes in our doc","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Pwwb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1457,https://api.github.com/repos/apache/fury/issues/1457,fury,2222251632,1457,Suggestion for some refactorying for MemoryBuffer class.,pushrsp,58874665,pushrsp,,CLOSED,2024-04-03T08:19:45Z,2024-04-03T16:28:07Z,"Can i do some refactor for `MemoryBuffer` class?
e.g
```java
public void writeBoolean(boolean value) {
    final int writerIdx = writerIndex;
    final int newIdx = writerIdx + 1; // we can replace this number to static variable which make more understandable.
    ensure(newIdx);
    final long pos = address + writerIdx;
    UNSAFE.putByte(heapMemory, pos, (byte) (value ? 1 : 0));
    writerIndex = newIdx;
  }
```

```java
public byte readByte() {
    int readerIdx = readerIndex;
   // every readX method use this for checking bound, so we can make short for it.
    if (BoundsChecking.BOUNDS_CHECKING_ENABLED && readerIdx > size - 1) { 
      throw new IndexOutOfBoundsException(
          String.format(
              ""readerIndex(%d) + length(%d) exceeds size(%d): %s"", readerIdx, 1, size, this));
    }
    readerIndex = readerIdx + 1;
    return UNSAFE.getByte(heapMemory, address + readerIdx);
  }
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1457/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1457,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55O98b,fury,2033966875,1457,NA,LiangliangSui,116876207,,,NA,2024-04-03T08:57:01Z,2024-04-03T08:57:01Z,"Hi @pushrsp ，thanks for your suggession.

Regarding your first proposal, I think it is unnecessary, we use one byte to store the value of boolean type. We can also know it from the code `UNSAFE.putByte(heapMemory, pos, (byte) (value ? 1 : 0));` below, so `writerIdx + 1` itself is easy to understand.

Regarding the second suggestion, how to simplify it? Extract a function separately for the checked logic and call it in readXXX?

cc @chaokunyang 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55O98b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1457,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55PETv,fury,2033992943,1457,NA,pushrsp,58874665,pushrsp,,NA,2024-04-03T09:08:02Z,2024-04-03T09:08:02Z,"> Regarding the second suggestion, how to simplify it? Extract a function separately for the checked logic and call it in readXXX?

i would simplify like this below.
```java
public byte readByte() {
    int readerIdx = readerIndex;
    throwIfOutOfBound(readerIdx, 1);
    readerIndex = readerIdx + 1;
    return UNSAFE.getByte(heapMemory, address + readerIdx);
  }

public short readShort() {
    int readerIdx = readerIndex;
    throwIfOutOfBound(readerIdx, 2)
    readerIndex = readerIdx + 2;
    final long pos = address + readerIdx;
    if (LITTLE_ENDIAN) {
      return UNSAFE.getShort(heapMemory, pos);
    } else {
      return Short.reverseBytes(UNSAFE.getShort(heapMemory, pos));
    }
  }

...

private void throwIfOutOfBound(int readerIdx, int dataSize) {
    if(BoundsChecking.BOUNDS_CHECKING_ENABLED && readerIdx > size - dataSize) {
      throw new IndexOutOfBoundsException(
              String.format(
                      ""readerIndex(%d) + length(%d) exceeds size(%d): %s"", readerIdx, dataSize, size, this));
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55PETv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1457,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55PTB2,fury,2034053238,1457,NA,LiangliangSui,116876207,,,NA,2024-04-03T09:35:59Z,2024-04-03T09:35:59Z,"LGTM.

We don't have to worry about `throwIfOutOfBound` function not being inlined because `throwIfOutOfBound` is rarely executed.

BTW, we can also use [throwIndexOutOfBoundsException function](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/memory/MemoryBuffer.java#L1866-L1870) to replace `throw new IndexOutOfBoundsException(...)`.

What do you think about this suggestion? @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55PTB2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1457,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Qo3v,fury,2034404847,1457,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-03T12:08:21Z,2024-04-03T12:08:21Z,"I refactorized this code, it has been replaced by a `StreamReader` in pr #1451 .

For changes here, seems throwIfOutOfBound will be invoked every time. The method invocation is not ignorable in such primitives. Jvm inline doesn't happens sometimes.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55Qo3v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1458,https://api.github.com/repos/apache/fury/issues/1458,fury,2222776899,1458,[Java] How to register classes when using Fury Builder?,cdxf,6419729,,,CLOSED,2024-04-03T12:18:03Z,2024-04-03T15:03:43Z,"I couldn't find any method in the builder to register classes. How can I register classes using the Fury builder?

```
        ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                .requireClassRegistration(true)
                .buildThreadSafeFury();
```
Secondly, I'm unsure about when to use ```buildThreadSafeFury``` and when to instantiate ThreadLocalFury directly. The documentation doesn't provide clear guidance on this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1458/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1458,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55SEwx,fury,2034781233,1458,NA,LiangliangSui,116876207,,,NA,2024-04-03T14:26:14Z,2024-04-03T14:26:14Z,"> I couldn't find any method in the builder to register classes. How can I register classes using the Fury builder?

`FuryBuilder` cannot register classes directly. You need to use `Fury#register(...)` to register. However, we can make `FuryBuilder` support registration. I will submit a PR to do this later.


> Secondly, I'm unsure about when to use buildThreadSafeFury and when to instantiate ThreadLocalFury directly. The documentation doesn't provide clear guidance on this.

The implementation principle of `buildThreadSafeFury` is also to directly instantiate the `ThreadLocalFury` object(see [code](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/config/FuryBuilder.java#L336-L350)), and pass a lambda expression to the constructor of `ThreadLocalFury` to create a Fury instance.

In the expression passed in when you instantiate `ThreadLocalFury` yourself, you can do some operations on the Fury instance by default. For example, you can register the `FooClass` class for each thread Fury instance, which is something buildThreadSafeFury cannot do.

Directly instantiating `ThreadLocalFury` is more flexible than `buildThreadSafeFury`.

There is currently no essential difference between the two implementations. In the future, we will use [`buildThreadSafeFuryPool`](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/config/FuryBuilder.java#L359-L361) as the default implementation of `buildThreadSafeFury`. #1335 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55SEwx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/1459,fury,2224338405,1459,[Java] FuryBuilder supports registered classes,LiangliangSui,116876207,,,OPEN,2024-04-04T02:52:23Z,2024-04-07T13:16:27Z,"## Is your feature request related to a problem? Please describe.
Currently, classes can only be registered through the `Fury#register` interface. Could we build Fury and register the class in one go?

Some users have reported that classes cannot be registered through `FuryBuilder`. #1458 

## Describe the solution you'd like
Could we support chained(In the process of building Fury) class registration in `FuryBuilder`?

```java
// e.g. 
Fury fury = Fury.builder().withLanguage(Language.JAVA)
        .requireClassRegistration(true)
        // --------- Chain execution registration.
        .register(Foo.class)
        .register(Foo1.class)
        .build();
```

## Additional context
N / A
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1459/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55cMhZ,fury,2037434457,1459,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-04T14:54:05Z,2024-04-04T14:54:05Z,"Looks good to me, we can add API for register class by order, register class by id, and register serializer by class.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55cMhZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55craJ,fury,2037560969,1459,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-04T15:44:18Z,2024-04-04T15:44:18Z,"One concern is that BaseFury already supports register classes/serializers, do we still need to add this API to FuryBuilder?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55craJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55qQ8c,fury,2041122588,1459,NA,LiangliangSui,116876207,,,NA,2024-04-06T15:47:10Z,2024-04-06T15:47:10Z,"> One concern is that BaseFury already supports register classes/serializers, do we still need to add this API to FuryBuilder?

We can extract all `register(...)` methods in `BaseFury` into an interface, for example named `ClassRegister`, and then let `BaseFury` extends `ClassRegister`, and `FuryBuilder` can also implements `ClassRegister`. `registerSerializer(...)` is similar, we can extract an interface named `SerializerRegister`.

WDYT? @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55qQ8c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55q5PO,fury,2041287630,1459,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-07T02:57:36Z,2024-04-07T02:57:36Z,"I perfer not. `Fury` is not a `ClassRegister`, there is no such a straightforward `is-a` relationship between these two classes. And it's not that intuitive for a builder class to implement some interface.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55q5PO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55q7hX,fury,2041296983,1459,NA,LiangliangSui,116876207,,,NA,2024-04-07T03:39:25Z,2024-04-07T03:39:25Z,"I agree with you, `Fury` and `ClassRegister` have a `has-a` relationship.

If we don't implement some interfaces in `FuryBuilder`, then we can only repeatedly define the registerXXX function, or do you have some other good suggestions?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55q7hX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55ri93,fury,2041458551,1459,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-07T12:42:34Z,2024-04-07T12:42:34Z,I still don't know why users can't invoke `BaseFury` to register a class/serializer? If we need a new inferface for this registration. It looks a little too heavy to me. The basic principle is try to avoid unnecessary abstraction,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55ri93/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55rkij,fury,2041464995,1459,NA,LiangliangSui,116876207,,,NA,2024-04-07T13:06:37Z,2024-04-07T13:06:37Z,"It is also possible to use `BaseFury` to register classes and Serializers, but these steps need to be done after Fury build. It is best to register during the FuryBuilder build process, but currently, this will cause the overall structure to be very heavy (in order to achieve this function will lead to architectural redundancy). 

Currently, only one user has made this suggestion. We can also observe whether other users make this suggestion in the future. If so, we will consider adjusting the structure to implement this function.

We can keep this issue for continuous observation to see if there are any similar suggestions.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55rkij/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1459,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55rlbU,fury,2041468628,1459,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-07T13:16:26Z,2024-04-07T13:16:26Z,"Ok, we can keep the issue open. If the demand for  registering classes on FuryBuilder continues grow, we can support it later. And all similar methods such as setClassChecker/setSerializerFactory have similar issues. We should take those API into consideration too. 

I believe we will receive more feedbacks when we made several releases under ASF.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55rlbU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1460,https://api.github.com/repos/apache/fury/issues/1460,fury,2225968308,1460,[Java] optimize MemoryBuffer.readVarUint64 inline and performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-04T16:18:14Z,2024-04-05T00:40:19Z,"## Is your feature request related to a problem? Please describe.
Currently `MemoryBuffer.readVarUint64` is not optimizal:
```java
  public long readVarUint64() {
    int readIdx = readerIndex;
    if (size - readIdx < 9) {
      return readPositiveVarLongSlow();
    }
    // varint are written using little endian byte order, so read by little endian byte order.
    long eightByteValue = unsafeGetLong(readIdx);
    long b = eightByteValue & 0xFF;
    readIdx++; // read one byte
    long result = b & 0x7F;
    if ((b & 0x80) != 0) {
      readIdx++; // read one byte
      b = (eightByteValue >>> 8) & 0xFF;
      result |= (b & 0x7F) << 7;
      if ((b & 0x80) != 0) {
        readIdx++; // read one byte
        b = (eightByteValue >>> 16) & 0xFF;
        result |= (b & 0x7F) << 14;
        if ((b & 0x80) != 0) {
          readIdx++; // read one byte
          b = (eightByteValue >>> 24) & 0xFF;
          result |= (b & 0x7F) << 21;
          if ((b & 0x80) != 0) {
            readIdx++; // read one byte
            b = (eightByteValue >>> 32) & 0xFF;
            result |= (b & 0x7F) << 28;
            if ((b & 0x80) != 0) {
              readIdx++; // read one byte
              b = (eightByteValue >>> 40) & 0xFF;
              result |= (b & 0x7F) << 35;
              if ((b & 0x80) != 0) {
                readIdx++; // read one byte
                b = (eightByteValue >>> 48) & 0xFF;
                result |= (b & 0x7F) << 42;
                if ((b & 0x80) != 0) {
                  readIdx++; // read one byte
                  b = (eightByteValue >>> 56) & 0xFF;
                  result |= (b & 0x7F) << 49;
                  if ((b & 0x80) != 0) {
                    b = unsafeGet(readIdx++); // read one byte
                    result |= b << 56;
                  }
                }
              }
            }
          }
        }
      }
    }
    readerIndex = readIdx;
    return result;
  }
```

The bit shift operations are unnecessary, and current method body is boo big(351 bytes of byte code), which can't be inlined into caller sometimes:
![image](https://github.com/apache/incubator-fury/assets/12445254/437493a6-62b2-4465-8995-6dd06bc51c89)


## Describe the solution you'd like
We can optimized it into:

```java
  public long readVarUint64() {
    int readIdx = readerIndex;
    if (size - readIdx < 9) {
      return readPositiveVarLongSlow();
    }
    // varint are written using little endian byte order, so read by little endian byte order.
    long value = unsafeGetLong(readIdx);
    // Duplicate and manual inline for performance.
    // noinspection Duplicates
    readIdx++;
    long result = value & 0x7F;
    if ((value & 0x80) != 0) {
      readIdx++;
      // 0x3f80: 0b1111111 << 7
      result |= (value >>> 1) & 0x3f80;
      // 0x8000: 0b1 << 15
      if ((value & 0x8000) != 0) {
        readIdx++;
        // 0x1fc000: 0b1111111 << 14
        result |= (value >>> 2) & 0x1fc000;
        // 0x800000: 0b1 << 23
        if ((value & 0x800000) != 0) {
          readIdx++;
          // 0xfe00000: 0b1111111 << 21
          result |= (value >>> 3) & 0xfe00000;
          if ((value & 0x80000000L) != 0) {
            readIdx++;
            result |= (value >>> 4) & 0x7f0000000L;
            if ((value & 0x8000000000L) != 0) {
              readIdx++;
              result |= (value >>> 5) & 0x3f800000000L;
              if ((value & 0x800000000000L) != 0) {
                readIdx++;
                result |= (value >>> 6) & 0x1fc0000000000L;
                if ((value & 0x80000000000000L) != 0) {
                  readIdx++;
                  result |= (value >>> 7) & 0xfe000000000000L;
                  if ((value & 0x8000000000000000L) != 0) {
                    long b = UNSAFE.getByte(heapMemory, address + readIdx++);
                    result |= b << 56;
                  }
                }
              }
            }
          }
        }
      }
    }
    readerIndex = readIdx;
    return result;
  }

```
![image](https://github.com/apache/incubator-fury/assets/12445254/69335615-58b0-4c02-b34c-8ca15cf79131)

This is much smaller, better for inline and faster
## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1460/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1460,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55dRRY,fury,2037716056,1460,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-04T16:53:42Z,2024-04-04T16:53:42Z,"The streaming read in https://github.com/apache/incubator-fury/pull/1451 make thebytecode of readXXX method bigger, which will affect the primitives inline. It's importance we reduce the primitives code size.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55dRRY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1461,https://api.github.com/repos/apache/fury/issues/1461,fury,2225996171,1461,[Java] optimize MemoryBuffer.readVarUint32 inline and performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-04T16:27:30Z,2024-04-05T00:40:57Z,"## Is your feature request related to a problem? Please describe.
Currently readVarUint32 inntroduced unnecessary bit shift operations , which makes code body big ,  which has 174 bytes, the jit inline will be affected. 
Unnecessary operations also make the execution slower.

```java
  public int readVarUint32() {
    int readIdx = readerIndex;
    if (size - readIdx < 5) {
      return readPositiveVarIntSlow();
    }
    // varint are written using little endian byte order, so read by little endian byte order.
    int fourByteValue = unsafeGetInt(readIdx);
    int b = fourByteValue & 0xFF;
    readIdx++; // read one byte
    int result = b & 0x7F;
    if ((b & 0x80) != 0) {
      readIdx++; // read one byte
      b = (fourByteValue >>> 8) & 0xFF;
      result |= (b & 0x7F) << 7;
      if ((b & 0x80) != 0) {
        readIdx++; // read one byte
        b = (fourByteValue >>> 16) & 0xFF;
        result |= (b & 0x7F) << 14;
        if ((b & 0x80) != 0) {
          readIdx++; // read one byte
          b = (fourByteValue >>> 24) & 0xFF;
          result |= (b & 0x7F) << 21;
          if ((b & 0x80) != 0) {
            b = unsafeGet(readIdx++); // read one byte
            result |= (b & 0x7F) << 28;
          }
        }
      }
    }
    readerIndex = readIdx;
    return result;
  }
```

![image](https://github.com/apache/incubator-fury/assets/12445254/45342abc-ccc8-4336-9bbb-0088afa4f304)


## Describe the solution you'd like
It can be optimized into:
```java
  public int readVarUint32() {
    int readIdx = readerIndex;
    if (size - readIdx < 5) {
      return readPositiveVarIntSlow();
    }
    // | 1bit + 7bits | 1bit + 7bits | 1bit + 7bits | 1bit + 7bits |
    int fourByteValue = unsafeGetInt(readIdx);
    readIdx++;
    int result = fourByteValue & 0x7F;
    // Duplicate and manual inline for performance.
    // noinspection Duplicates
    if ((fourByteValue & 0x80) != 0) {
      readIdx++;
      // 0x3f80: 0b1111111 << 7
      result |= (fourByteValue >>> 1) & 0x3f80;
      // 0x8000: 0b1 << 15
      if ((fourByteValue & 0x8000) != 0) {
        readIdx++;
        // 0x1fc000: 0b1111111 << 14
        result |= (fourByteValue >>> 2) & 0x1fc000;
        // 0x800000: 0b1 << 23
        if ((fourByteValue & 0x800000) != 0) {
          readIdx++;
          // 0xfe00000: 0b1111111 << 21
          result |= (fourByteValue >>> 3) & 0xfe00000;
          if ((fourByteValue & 0x80000000) != 0) {
            result |= (UNSAFE.getByte(heapMemory, address + readIdx++) & 0x7F) << 28;
          }
        }
      }
    }
    readerIndex = readIdx;
    return result;
  }

```
![image](https://github.com/apache/incubator-fury/assets/12445254/02cba9bb-530b-48e5-bf1f-dcfbf862c6a2)

Now it has 141 bytes only.

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1461/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1461,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55dHLa,fury,2037674714,1461,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-04T16:31:31Z,2024-04-04T16:31:31Z,"The streaming read in https://github.com/apache/incubator-fury/pull/1451 make thebytecode of  readXXX method bigger, which will affect the primitives inline. It's importance we reduce the primitives code size.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55dHLa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1465,https://api.github.com/repos/apache/fury/issues/1465,fury,2226045877,1465,[Java] optimize MemoryBuffer.unsafeWritePositiveVarLong bytecode size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-04T16:49:19Z,2024-05-29T07:03:30Z,"## Is your feature request related to a problem? Please describe.
The bytecode size of `MemoryBuffer.unsafeWritePositiveVarLong` is 466 bytes, which is too big for jvm jit inline.

![image](https://github.com/apache/incubator-fury/assets/12445254/9204e795-b33a-46e8-af8c-b2ffb141f5a7)


## Describe the solution you'd like
We can rewrite it using algorithms like I used in #1463 

## Additional context
Add any other context or screenshots about the feature request here.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1465/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1465,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WxC5,fury,2136674489,1465,NA,wangjie-fourth,46479343,wangjie,wangjie_fourth@163.com,NA,2024-05-29T06:57:29Z,2024-05-29T06:57:29Z,@chaokunyang it is done. maybe need close this issue?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WxC5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1466,https://api.github.com/repos/apache/fury/issues/1466,fury,2226046665,1466,[Java] optimize MemoryBuffer.unsafePutPositiveVarInt bytecode size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-04T16:49:46Z,2024-04-11T10:19:42Z,"## Is your feature request related to a problem? Please describe.
The bytecode size of `MemoryBuffer.unsafePutPositiveVarInt` is 466 bytes, which is too big for inline.

![image](https://github.com/apache/incubator-fury/assets/12445254/5720f452-9d84-4a47-ad72-84825f01e08d)

## Describe the solution you'd like
We can rewrite it using algorithms like I used in #1462 

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1466/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1478,https://api.github.com/repos/apache/fury/issues/1478,fury,2230594439,1478,Failed to serialize BigInteger,xiguashu,26504344,liangjie,liangjie3138@gmail.com,CLOSED,2024-04-08T08:34:02Z,2024-04-08T11:33:13Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0-SNAPSHOT

### Component(s)

Java

### Minimal reproduce step

        BigInteger bigInteger = new BigInteger(""11111111110101010000283895380202208220050200000000111111111"");
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .withAsyncCompilation(true)
                .build();
        fury.serialize(bigInteger);

### What did you expect to see?

Be serialized to a byte[]

### What did you see instead?

java.lang.IllegalArgumentException
	at org.apache.fury.util.Preconditions.checkArgument(Preconditions.java:46)
	at org.apache.fury.serializer.Serializers$BigIntegerSerializer.write(Serializers.java:365)
	at org.apache.fury.serializer.Serializers$BigIntegerSerializer.write(Serializers.java:357)
	at org.apache.fury.Fury.writeData(Fury.java:555)
	at org.apache.fury.Fury.writeRef(Fury.java:348)
	at org.apache.fury.Fury.write(Fury.java:323)
	at org.apache.fury.Fury.serialize(Fury.java:251)
	at org.apache.fury.Fury.serialize(Fury.java:199)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1478/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/1481,fury,2231568043,1481,[Java] Map serialization bug,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,CLOSED,2024-04-08T15:51:40Z,2024-04-11T14:42:42Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

```java
import io.fury.Fury;
import io.fury.memory.MemoryBuffer;
import io.fury.serializer.Serializer;
import io.fury.serializer.collection.MapSerializers;

import java.util.HashMap;

public class Test {
    public static void main(String[] args) {
        Fury fury = Fury.builder().requireClassRegistration(false).build();
        fury.registerSerializer(Storage.class, StorageSerializer.class);

        HashMap<Key, String> map = new HashMap<>();
        map.put(new Key(1, 2), ""abc"");
        Storage storage = new Storage(map);
        byte[] data = fury.serializeJavaObject(storage);

        Storage deserializedStorage = fury.deserializeJavaObject(data, Storage.class);
        System.out.println(deserializedStorage.map().get(new Key(1, 0)));
    }

    public static class StorageSerializer extends Serializer<Storage> {
        public StorageSerializer(Fury fury) {
            super(fury, Storage.class);
        }

        @Override
        public void write(MemoryBuffer buffer, Storage value) {
            MapSerializers.HashMapSerializer mapSerializer = new MapSerializers.HashMapSerializer(fury);
            mapSerializer.setKeySerializer(new KeySerializer(fury));

            mapSerializer.write(buffer, value.map());
        }

        @Override
        public Storage read(MemoryBuffer buffer) {
            MapSerializers.HashMapSerializer mapSerializer;
            mapSerializer = new MapSerializers.HashMapSerializer(fury);
            mapSerializer.setKeySerializer(new KeySerializer(fury));

            HashMap<Key, String> map = mapSerializer.read(buffer);
            return new Storage(map);
        }
    }

    public static class KeySerializer extends Serializer<Key> {

        public KeySerializer(Fury fury) {
            super(fury, Key.class);
        }

        @Override
        public void write(MemoryBuffer buffer, Key value) {
            buffer.writeInt(value.a());
        }

        @Override
        public Key read(MemoryBuffer buffer) {
            int a = buffer.readInt();
            return new Key(a, 0);
        }
    }

    public record Storage(
            HashMap<Key, String> map
    ) {
    }

    public record Key(
            int a,
            int b
    ) {
    }
}
```

### What did you expect to see?

Better performance. Also I don't wont to initialize `MapSerializers.HashMapSerializer` on each read/write.

### What did you see instead?

If I reuse `MapSerializers.HashMapSerializer`, which was created in the serializer constructor for example, I got an exception.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1481/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x7fq,fury,2043131882,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-08T16:02:45Z,2024-04-08T16:02:45Z,"When I execute this code, fury takes from 1673 ms to 3432 ms to initialize, which is super slow to me.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x7fq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x8Z8,fury,2043135612,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-08T16:04:40Z,2024-04-08T16:04:40Z,Why not make  `MapSerializers.HashMapSerializer mapSerializer  ` as an instance variable of your serializer,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x8Z8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x9-R,fury,2043142033,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-08T16:07:48Z,2024-04-08T16:07:48Z,"I have an idea, you can make the `map` attr use a HashMap subclass, and you custimized the serialization for this class.
You can take `org.apache.fury.serializer.collection.MapSerializers.StringKeyMapSerializer` as an example","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x9-R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x_aZ,fury,2043147929,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-08T16:10:42Z,2024-04-08T16:10:42Z,"> Why not make `MapSerializers.HashMapSerializer mapSerializer ` as an instance variable of your serializer

The following refactoring:
```java
public static class StorageSerializer extends Serializer<Storage> {
        private final MapSerializers.HashMapSerializer mapSerializer;

        public StorageSerializer(Fury fury) {
            super(fury, Storage.class);
            this.mapSerializer = new MapSerializers.HashMapSerializer(fury);
            this.mapSerializer.setKeySerializer(new KeySerializer(fury));
        }

        @Override
        public void write(MemoryBuffer buffer, Storage value) {
            mapSerializer.write(buffer, value.map());
        }

        @Override
        public Storage read(MemoryBuffer buffer) {
            HashMap<Key, String> map = mapSerializer.read(buffer);
            return new Storage(map);
        }
    }
```

Leads to the following exception:
```
Exception in thread ""main"" java.lang.IndexOutOfBoundsException: readerIndex(13) + length(2) exceeds size(14): MemoryBuffer{size=14, readerIndex=13, writerIndex=0, heapMemory=len(14), heapData=[-1, 1, -1, 1, 0, 0, 0, -1, 44, 0, 3, 97, 98, 99], heapOffset=0, offHeapBuffer=null, address=16, addressLimit=30}
	at io.fury.memory.MemoryBuffer.readShort(MemoryBuffer.java:2031)
	at io.fury.resolver.EnumStringResolver.trySkipEnumStringBytes(EnumStringResolver.java:140)
	at io.fury.resolver.EnumStringResolver.readEnumStringBytes(EnumStringResolver.java:110)
	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1628)
	at io.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1606)
	at io.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1585)
	at io.fury.Fury.readRef(Fury.java:814)
	at io.fury.serializer.collection.AbstractMapSerializer.generalJavaRead(AbstractMapSerializer.java:569)
	at io.fury.serializer.collection.AbstractMapSerializer.genericJavaRead(AbstractMapSerializer.java:444)
	at io.fury.serializer.collection.AbstractMapSerializer.readElements(AbstractMapSerializer.java:436)
	at io.fury.serializer.collection.MapSerializer.read(MapSerializer.java:47)
	at Test$StorageSerializer.read(Test.java:38)
	at Test$StorageSerializer.read(Test.java:22)
	at io.fury.Fury.readDataInternal(Fury.java:899)
	at io.fury.Fury.deserializeJavaObject(Fury.java:1060)
	at io.fury.Fury.deserializeJavaObject(Fury.java:1042)
	at Test.main(Test.java:18)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55x_aZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yB6s,fury,2043158188,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-08T16:15:12Z,2024-04-08T16:15:12Z,"You need to  invoke `this.mapSerializer.setKeySerializer(keySerializer);` in `write/read` method. It will be set to null every time to avoid nested map serialization exception
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yB6s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yEih,fury,2043168929,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-08T16:20:30Z,2024-04-08T16:20:30Z,"> You need to invoke `this.mapSerializer.setKeySerializer(keySerializer);` in `write/read` method. It will be set to null every time to avoid nested map serialization exception

Thank you, it works for me and solves my problem. But maybe it worth adding some option to remove this logic?
Also, is such long initialization normal to fury? Looks like a bug to me.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yEih/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yFgS,fury,2043172882,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-08T16:22:37Z,2024-04-08T16:22:37Z,Could you provide a profiler flame graph for your init. @LiangliangSui is optimizing this in #1482 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yFgS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yJW6,fury,2043188666,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-08T16:31:07Z,2024-04-08T16:31:07Z,"Sure. I've used the original code from the issue description.
[Test__1__2024_04_08_192640.jfr.zip](https://github.com/apache/incubator-fury/files/14908435/Test__1__2024_04_08_192640.jfr.zip)

I've also profile a code, which creates fury 100 times (it contains `StorageSerializer` registration, but didn't serialize/deserialize anything). The execution takes 5s, so the issue seems to be in some static code.
[Test__1__2024_04_08_192846.jfr.zip](https://github.com/apache/incubator-fury/files/14908463/Test__1__2024_04_08_192846.jfr.zip)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yJW6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yL-1,fury,2043199413,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-08T16:36:27Z,2024-04-08T16:36:27Z,"Looks like the logger initialization issue (I have some log4j configuration files in classpath). However, disabling logging still didn't help, as it is still initialize in `ShimDispatcher`. I guess, it should be refactored with Furies `LoggerFactory`. WDYT?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yL-1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc554Rxd,fury,2044795997,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-09T11:20:28Z,2024-04-09T11:20:28Z,"> Looks like the logger initialization issue (I have some log4j configuration files in classpath). However, disabling logging still didn't help, as it is still initialize in `ShimDispatcher`. I guess, it should be refactored with Furies `LoggerFactory`. WDYT?

Yes, all logger should use FURY LoggerFactory, would you like to submit a PR to fix this","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc554Rxd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc554Ugc,fury,2044807196,1481,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-09T11:23:02Z,2024-04-09T11:23:02Z,"![image](https://github.com/apache/incubator-fury/assets/12445254/0874a429-27eb-459b-9a94-a72c944aeb9e)
SLFJ4 seems took too long for init. 

Actually, I'm thinking whether we should remove SLFJ4","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc554Ugc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1481,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56LlVt,fury,2049856877,1481,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-04-11T14:42:41Z,2024-04-11T14:42:41Z,Looks like fixed in #1485,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56LlVt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/1482,fury,2231604229,1482,[Java] Optimize ClassResolver#register bytecode size,LiangliangSui,116876207,,,CLOSED,2024-04-08T16:10:04Z,2024-04-14T16:23:26Z,"## Is your feature request related to a problem? Please describe.
`ClassResolver#register` bytecode size is 341 bytes，hot method too big
![image](https://github.com/apache/incubator-fury/assets/116876207/f9828d94-01e2-4104-ae4f-c3602e4e00d0)

## Describe the solution you'd like
Reduce `ClassResolver#register` bytecode size so that `ClassResolver#register` hot method can still be inlined.

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1482/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yAGc,fury,2043150748,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-08T16:12:09Z,2024-04-08T16:12:09Z,The registration is only executed for Fury init. It's not on the critical path. Do we need to optimize this?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yAGc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yGm5,fury,2043177401,1482,NA,LiangliangSui,116876207,,,NA,2024-04-08T16:25:05Z,2024-04-08T16:25:05Z,"Although it is only executed during init, it is also identified as hot code. When I benchmark, I think we can try to optimize it.

I want to try to extract the following code in ClassResolver#register into a function (because it is not often called) and see how much the bytecode size can be reduced.
```java
if (registeredId2ClassInfo.length <= id) {
  // extract a method below.
  ClassInfo[] tmp = new ClassInfo[(id + 1) * 2];
  System.arraycopy(registeredId2ClassInfo, 0, tmp, 0, registeredId2ClassInfo.length);
  registeredId2ClassInfo = tmp;
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc55yGm5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5513Tk,fury,2044163300,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-09T05:15:46Z,2024-04-09T05:15:46Z,@LiangliangSui You can also use async-profiler to cpature a flame graph to identify the most time-consuming part,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5513Tk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56ZkYu,fury,2053522990,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-13T06:24:27Z,2024-04-13T06:24:27Z,@LiangliangSui do we have any updates on this?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56ZkYu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aFSN,fury,2053657741,1482,NA,LiangliangSui,116876207,,,NA,2024-04-13T14:12:12Z,2024-04-13T14:12:12Z,"I extracted a piece of logic that is not executed frequently into a function to reduce the bytecode size of the register method. The extracted function is as follows:

```java
  public void register(Class<?> cls, int classId) {
    ......

    short id = (short) classId;
    if (id < registeredId2ClassInfo.length && registeredId2ClassInfo[id] != null) {
      throw new IllegalArgumentException(
          String.format(
              ""Class %s with id %s has been registered, registering class %s with same id are not allowed."",
              registeredId2ClassInfo[id].getCls(), id, cls.getName()));
    }
    extRegistry.registeredClassIdMap.put(cls, id);
    if (registeredId2ClassInfo.length <= id) {
      ensure(id);
    }
    ......
  }

  private void ensure(short id) {
    ClassInfo[] tmp = new ClassInfo[(id + 1) * 2];
    System.arraycopy(registeredId2ClassInfo, 0, tmp, 0, registeredId2ClassInfo.length);
    registeredId2ClassInfo = tmp;
  }

```

Then the `register` function bytecode is reduced from 341 to 314, which is lower than `-XX:+FreqInlineSize(325)`, and is successfully inlined.

![image](https://github.com/apache/incubator-fury/assets/116876207/02e2c438-90bb-4b7c-a523-76a83b944727)

I will upload a PR later to do this.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aFSN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aIzF,fury,2053672133,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-13T15:06:29Z,2024-04-13T15:06:29Z,"The Fury creation is not frequent, the Jvm compiler is still in c1 stage. The inline threshold is 34 byte in such cases.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aIzF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aI0z,fury,2053672243,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-13T15:06:52Z,2024-04-13T15:06:52Z,Is this the most timeconsuming part of Fury creation?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aI0z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aLRD,fury,2053682243,1482,NA,LiangliangSui,116876207,,,NA,2024-04-13T15:39:02Z,2024-04-13T15:39:02Z,"> The Fury creation is not frequent, the Jvm compiler is still in c1 stage. The inline threshold is 34 byte in such cases.

We can optimize is that when `register` becomes a hot method, it cannot be inlined because its bytecode is larger than `-XX:+FreqInlineSize(325)`.

`-XX:+MaxInlineSize(35)` should be the maximum limit that can be inlined before `register` becomes a hotspot method.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aLRD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aLls,fury,2053683564,1482,NA,LiangliangSui,116876207,,,NA,2024-04-13T15:44:14Z,2024-04-13T15:44:14Z,"> Is this the most timeconsuming part of Fury creation?

During the Fury creation process, the most time-consuming thing should be the `org.apache.fury.resolver.ClassResolver#addDefaultSerializers` function, not the `register` function.

![image](https://github.com/apache/incubator-fury/assets/116876207/2b525678-cf3d-4294-bbea-76985685a122)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56aLls/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgDX,fury,2054029527,1482,NA,LiangliangSui,116876207,,,NA,2024-04-14T12:15:37Z,2024-04-14T12:15:37Z,"We have optimized `register` in https://github.com/apache/incubator-fury/issues/1510, but I think by reducing the generated bytecode size the same can be done by inlining `register` when it becomes a hot method. Also useful for `register`.
@chaokunyang WDYT?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgDX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgWQ,fury,2054030736,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T12:19:22Z,2024-04-14T12:19:22Z,"The thing is that it should not be a hot method. If it does, it means users created lots of Fury, which is not allowed.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgWQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgaK,fury,2054030986,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T12:20:09Z,2024-04-14T12:20:09Z,"After I optimized register in https://github.com/apache/incubator-fury/issues/1510 , I found Map.put is hte bottleneck now Maybe we should optimize that first.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgaK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgo3,fury,2054031927,1482,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T12:23:02Z,2024-04-14T12:23:02Z,"@LiangliangSui I will start the work of meta string in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#meta-string to reduce classname serialization space cost before we make release for #1389 . If you'd like to optimize FUry creation, I think maybe we can go that way to optimize the most time-consuming part first","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bgo3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bg55,fury,2054033017,1482,NA,LiangliangSui,116876207,,,NA,2024-04-14T12:27:06Z,2024-04-14T12:27:06Z,"> The thing is that it should not be a hot method. If it does, it means users created lots of Fury, which is not allowed.

Got it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bg55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1482,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bhB-,fury,2054033534,1482,NA,LiangliangSui,116876207,,,NA,2024-04-14T12:29:12Z,2024-04-14T12:29:12Z,"> @LiangliangSui I will start the work of meta string in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#meta-string to reduce classname serialization space cost before we make release for #1389 . If you'd like to optimize FUry creation, I think maybe we can go that way to optimize the most time-consuming part first

That's really cool, I'd be very interested in doing it and learning from you at the same time.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bhB-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1484,https://api.github.com/repos/apache/fury/issues/1484,fury,2233240360,1484,[Java] Remove SLF4J logger library,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-09T11:36:12Z,2024-04-09T13:34:18Z,"## Is your feature request related to a problem? Please describe.
SLF4J introduces some conflicts in graalvm image build, see #1404 
And it's time consuming in #1481 

## Describe the solution you'd like
Since the log won't be printed frequently, we may be able to replace it with a simple logger implemented by Fury.

`Thread.currentThread().getStackTrace()[1].getLineNumber()` can be used to extrac line number

The primitive library should have less dependencies for broader adoption

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1484/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1497,https://api.github.com/repos/apache/fury/issues/1497,fury,2238125179,1497,[Java] Improve Fury Logger documentation. ,LiangliangSui,116876207,,,OPEN,2024-04-11T16:32:42Z,2024-04-11T16:32:42Z,"## Is your feature request related to a problem? Please describe.
Fury Logger is optional between `FuryLogger` and `Slf4jLogger`, or disable Fury log completely.

## Describe the solution you'd like
We should improve the usage documentation in [java_object_graph_guide.md](https://github.com/apache/incubator-fury/blob/main/docs/guide/java_object_graph_guide.md).

In addition, we should also improve the [LoggerFactory](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/logging/LoggerFactory.java) javadoc.

## Additional context
Logger related PR
- https://github.com/apache/incubator-fury/pull/1485
- https://github.com/apache/incubator-fury/pull/1492
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1497/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1498,https://api.github.com/repos/apache/fury/issues/1498,fury,2239192023,1498,[Discuss][License] do wen need to move license content from NOTICE to LICENSE file,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-12T06:33:03Z,2024-04-15T05:27:48Z,"## Is your feature request related to a problem? Please describe.
Fury borrowed some code from spark/guava/v8/etc. Currently we add the license of those project in NOTICE file. 

Projects [flink](https://github.com/apache/opendal/blob/master/NOTICE)/[pytorch](https://github.com/pytorch/pytorch/blob/main/NOTICE)  use this method. 

Other projects  such as [spark](https://github.com/apache/spark/blob/master/LICENSE)/[arrow](https://github.com/apache/arrow/blob/main/LICENSE.txt)/etc all put license into `LICENSE` file.

Both ways look good to me, @tisonkun @pjfanning do you have any suggestions?


## Additional context
#1440","{""url"": ""https://api.github.com/repos/apache/fury/issues/1498/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1498,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56Sz77,fury,2051751675,1498,NA,pjfanning,11783444,PJ Fanning,,NA,2024-04-12T13:20:54Z,2024-04-12T13:20:54Z,It is my understanding that 3rd party licenses should be mentioned in our LICENSE and notices in those 3rd party projects should be mentioned in our NOTICE file. Not every Apache project seems to do this - so I could be wrong. It might be better to ask this on the general@incubator.apache.org list or something like the ASF legal-discuss mailing list.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56Sz77/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1498,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56To4G,fury,2051968518,1498,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-12T15:20:24Z,2024-04-12T15:20:24Z,"> It is my understanding that 3rd party licenses should be mentioned in our LICENSE and notices in those 3rd party projects should be mentioned in our NOTICE file. Not every Apache project seems to do this - so I could be wrong. It might be better to ask this on the [general@incubator.apache.org](mailto:general@incubator.apache.org) list or something like the ASF legal-discuss mailing list.

It's my understanding too. Maybe both are legal, but mention 3rd party license in our license and mention notice in our notice reduce the confusion to people since its more intuitive","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56To4G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/1510,fury,2241886123,1510,[Java] Optimize Fury creation speed,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-14T03:33:45Z,2024-04-14T12:46:48Z,"## Is your feature request related to a problem? Please describe.
Current fury creation takes about 2 millseconds, which is slow, we need to optimize it.

A profiler shows that Fury creation is slow at ClassResolver:
![image](https://github.com/apache/incubator-fury/assets/12445254/b172b34a-6d30-4c1d-a0b7-9d57a74512ed)
![image](https://github.com/apache/incubator-fury/assets/12445254/19c7e30f-1f02-4878-83e3-84aea9a8eeb5)

## Describe the solution you'd like
Avoid String generation, and reduce map resize cost by creating a map with bigger size

## Additional context
#1482","{""url"": ""https://api.github.com/repos/apache/fury/issues/1510/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bBE4,fury,2053902648,1510,NA,LiangliangSui,116876207,,,NA,2024-04-14T04:47:25Z,2024-04-14T04:47:25Z,`String#format` takes up most of the time in `register`. Maybe we can use if judgment instead of using `Preconditions#checkArgument`.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bBE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bBwC,fury,2053905410,1510,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T05:00:09Z,2024-04-14T05:00:09Z,"> `String#format` takes up most of the time in `register`. Maybe we can use if judgment instead of using `Preconditions#checkArgument`.

Preconditions support string template, which can avoid this cost.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bBwC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bFiL,fury,2053920907,1510,NA,LiangliangSui,116876207,,,NA,2024-04-14T05:55:37Z,2024-04-14T05:55:37Z,"> > `String#format` takes up most of the time in `register`. Maybe we can use if judgment instead of using `Preconditions#checkArgument`.
> 
> Preconditions support string template, which can avoid this cost.

Using `if` can reduce unnecessary `HashMap#get` costs.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bFiL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bFtv,fury,2053921647,1510,NA,LiangliangSui,116876207,,,NA,2024-04-14T05:58:08Z,2024-04-14T05:58:08Z,"In addition, is it necessary to output the INFO Log in the [Fury constructor](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/Fury.java#L143)? I think it is more like a debug log. It was also very time consuming during the creation of Fury.

![image](https://github.com/apache/incubator-fury/assets/116876207/9ea938c7-6fca-401d-b436-0e4ef94819a0)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bFtv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bF07,fury,2053922107,1510,NA,LiangliangSui,116876207,,,NA,2024-04-14T06:00:34Z,2024-04-14T06:00:34Z,"When we use `FuryLogger` to output logs, the operation of obtaining the line number is the most expensive.

This cost should be unavoidable. Do you have any good suggestions for this cost?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bF07/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bK3_,fury,2053942783,1510,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T07:17:59Z,2024-04-14T07:17:59Z,"> In addition, is it necessary to output the INFO Log in the [Fury constructor](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/Fury.java#L143)? I think it is more like a debug log. It was also very time consuming during the creation of Fury.
> 
> ![image](https://private-user-images.githubusercontent.com/116876207/322250648-9ea938c7-6fca-401d-b436-0e4ef94819a0.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMwNzkyMzAsIm5iZiI6MTcxMzA3ODkzMCwicGF0aCI6Ii8xMTY4NzYyMDcvMzIyMjUwNjQ4LTllYTkzOGM3LTZmY2EtNDAxZC1iNDM2LTBlNGVmOTQ4MTlhMC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwNDE0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDQxNFQwNzE1MzBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04MDg0ZjQ5MDhlNDExYWU0ZDU2OWIxNmRmY2RmODYzNDFhZjA0ZDFhZGE4NDYyZjQ2ZjdkZDNlZWM2NjBjZDc2JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.-oaBGJ51lGEkWlsDT9-UxbMtmFHM2IHQ34pI0rFZXKo)

We dont' allow users to create fur every frequently, users should create fury and cache it. This log is used to remind him that he is creating fury frequently","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bK3_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1510,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bLDZ,fury,2053943513,1510,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-14T07:20:52Z,2024-04-14T07:20:52Z,"> When we use `FuryLogger` to output logs, the operation of obtaining the line number is the most expensive.
> 
> This cost should be unavoidable. Do you have any good suggestions for this cost?

You may need to deep into log4j to see how it handlle this. There may have some thread safe cache in their implementation","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56bLDZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1518,https://api.github.com/repos/apache/fury/issues/1518,fury,2243905996,1518,[Java] concat meta string len with flags to reduce meta string serialized size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-15T14:59:14Z,2024-04-15T16:51:59Z,"## Is your feature request related to a problem? Please describe.
Currently fury java write type tag by sharing it in a context. If tag is written, the tag will be written as an ID. 

But fury use one byte to flag which encoding to use, which is space wasting

## Describe the solution you'd like
Concat meta string len with flags to reduce serialized type tag size

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1518/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1519,https://api.github.com/repos/apache/fury/issues/1519,fury,2243907100,1519,[Python] concat meta string len with flags to reduce serialized python object size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-15T14:59:41Z,2024-04-15T16:52:00Z,"## Is your feature request related to a problem? Please describe.
Currently fury python write type tag by sharing it in a context. If tag is written, the tag will be written as an ID. 

But fury use one byte to flag which encoding to use, which is space wasting

## Describe the solution you'd like
Concat meta string len with flags to reduce serialized type tag size

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1519/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1520,https://api.github.com/repos/apache/fury/issues/1520,fury,2243908187,1520,[Golang] Concat meta string len with flags to reduce serialized type tag size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-15T15:00:10Z,2024-04-15T16:52:00Z,"## Is your feature request related to a problem? Please describe.
Currently fury go write type tag by sharing it in a context. If tag is written, the tag will be written as an ID. 

But fury use one byte to flag which encoding to use, which is space wasting

## Describe the solution you'd like
Concat meta string len with flags to reduce serialized type tag size

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1520/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1521,https://api.github.com/repos/apache/fury/issues/1521,fury,2243912082,1521,[Python] concat class id with flags to reduce python class write size,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-15T15:01:55Z,2024-04-15T16:52:01Z,"## Is your feature request related to a problem? Please describe.
Currently python use one byte for flagging whether write class by id or by string. This flag took one byte, which is costly.

## Describe the solution you'd like
concat class id with flags to reduce python class write size

## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1521/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1522,https://api.github.com/repos/apache/fury/issues/1522,fury,2244872339,1522,[Document]How about add some Chinese documents ,heliang666s,147408835,,,OPEN,2024-04-16T00:38:19Z,2024-04-17T02:28:59Z,"## Is your feature request related to a problem? Please describe.
I find that the documents are easy and in-English，Maybe we should add some Chinese.

## Describe the solution you'd like
more Chinese documents

## Additional context
Add any other context or screenshots about the feature request here.
I can get it,If you think it is neccessary,please assign me,thanks~","{""url"": ""https://api.github.com/repos/apache/fury/issues/1522/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1522,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zI3C,fury,2060225986,1522,NA,LiangliangSui,116876207,,,NA,2024-04-17T02:28:58Z,2024-04-17T02:28:58Z,"English documents are universal. I think it is not necessary to add Chinese documents. If Chinese documents are added, we need to maintain two documents for the same content, which will also increase the complexity of maintenance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zI3C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1524,https://api.github.com/repos/apache/fury/issues/1524,fury,2245307491,1524,[Java] ThreadPoolFury and ThreadLocalFury concurrency security issues,LiangliangSui,116876207,,,OPEN,2024-04-16T07:22:06Z,2024-04-16T07:22:23Z,"## Is your feature request related to a problem? Please describe.
1. `org.apache.fury.ThreadLocalFury#processCallback` will access the `LoaderBinding` of all threads, which has potential thread safety issues
  ```java
// org.apache.fury.ThreadLocalFury
  @Override
  protected void processCallback(Consumer<Fury> callback) {
    factoryCallback = factoryCallback.andThen(callback);
    // All LoaderBinding
    for (LoaderBinding binding : allFury.keySet()) {
      binding.visitAllFury(callback);
      binding.setBindingCallback(factoryCallback);
    }
  }
  ```


2. In `org.apache.fury.pool.ThreadPoolFury#processCallback`, all `ClassLoaderFuryPooled` will also be accessed, but traversing `allFury` and `setFactoryCallback` does not lock the variables to ensure the safety of the variables.
```java
// org.apache.fury.pool.ThreadPoolFury
@Override
protected void processCallback(Consumer<Fury> callback) {
  factoryCallback = factoryCallback.andThen(callback);
  // All ClassLoaderFuryPooled
  for (ClassLoaderFuryPooled furyPooled :
      furyPooledObjectFactory.classLoaderFuryPooledCache.asMap().values()) {
    furyPooled.allFury.keySet().forEach(callback);
    furyPooled.setFactoryCallback(factoryCallback);
  }
}
```

```java
// org.apache.fury.pool.ClassLoaderFuryPooled
void setFactoryCallback(Consumer<Fury> factoryCallback) {
  this.factoryCallback = factoryCallback;
}
```

## Describe the solution you'd like
Use lock to ensure variables are thread-safe.

## Additional context

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1524/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/1528,fury,2246804617,1528,[Java] serialize to output stream is limited to 2GB,Neiko2002,1197324,Nico Hezel,,OPEN,2024-04-16T20:08:15Z,2024-04-24T10:12:53Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.4.1
OS: Windows
JDK: 21

### Component(s)

Java

### Minimal reproduce step

```java
public static void main(String[] args) throws Exception {
	Fury fury = Fury.builder().requireClassRegistration(false).build();
	try (OutputStream output = new BufferedOutputStream(Files.newOutputStream(Files.createTempFile(null, null)))) {
		fury.serialize(output, new BigObj());
	}
}
	
static public class BigObj {
	public byte[] b1 = new byte[Integer.MAX_VALUE/2];
	public byte[] b2 = new byte[Integer.MAX_VALUE/2];
}
```

### What did you expect to see?

I was hoping to get a file with 2147483646 bytes, all zero.

### What did you see instead?

```java
Exception in thread ""main"" java.lang.NegativeArraySizeException: -2147483510
	at io.fury.memory.MemoryBuffer.ensure(MemoryBuffer.java:1980)
	at io.fury.memory.MemoryBuffer.writePrimitiveArrayWithSizeEmbedded(MemoryBuffer.java:1946)
	at io.fury.serializer.ArraySerializers$ByteArraySerializer.write(ArraySerializers.java:290)
```

### Anything Else?

I think when providing an OutputStream to the serialize method the intermediate MemoryBuffer should behave like the buffer inside the BufferedOutputStream. When the buffer is full it should flush its content to the underlying OutputStream in order to free up its bytes.


### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zbdC,fury,2060302146,1528,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T04:02:41Z,2024-04-17T04:02:41Z,"Fury need to go back in the buffer to update some header in some situations. In such cases, flush ahead is not possible. In the long run, we may be able to streaming write if we provide options to disable such look back.

But could you share which cases you need to serialize such big object? It's rare in a production environment, and protobuf don't support it too
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zbdC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc560-2p,fury,2060709289,1528,NA,Neiko2002,1197324,Nico Hezel,,NA,2024-04-17T08:35:18Z,2024-04-17T08:35:18Z,"We have quite large files on disk and can not use protobuf because of the 2GB limitation. Thats why we where looking for alternatives: fast serialization with cross-language support. I feel in the future if we store machine learning embeddings in a column based style to a file, the 2GB limit will be a problem quite a lot. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc560-2p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc561d_q,fury,2060836842,1528,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T09:38:06Z,2024-04-17T09:38:06Z,"> We have quite large files on disk and can not use protobuf because of the 2GB limitation. Thats why we where looking for alternatives: fast serialization with cross-language support. I feel in the future if we store machine learning embeddings in a column based style to a file, the 2GB limit will be a problem quite a lot.

This is interesting, if embeddings are storaged, we may need larger limitation. Could we split a big object into some small objects for serialization. I mean, you can serialize like this:

```java
Fury fury = xxx;
OutputStream stream = xxx;
fury.serialize(stream, o1);
fury.serialize(stream, o2);
fury.serialize(stream, o3);
```

Then for deserializaion, you can:
```java
Fury fury = xxx;
FuryInputStream stream = xxx;
Object o1 = fury.deserialize(stream);
Object o2 = fury.deserialize(stream);
Object o3 = fury.deserialize(stream);
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc561d_q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc561gQL,fury,2060846091,1528,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T09:42:29Z,2024-04-17T09:42:29Z,"If we can't split an object graph into multiple serialization, then we do need to support larger size limit","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc561gQL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5619et,fury,2060965805,1528,NA,Neiko2002,1197324,Nico Hezel,,NA,2024-04-17T10:44:12Z,2024-04-17T10:44:12Z,"In our case we have a file with meta information and embeddings of several millions images. All the embeddings are stored in column-based styles for fast access and distance calculations. The embeddings are around 1000 dimensions, which means we can only store 2 million images in one file otherwise just the embeddings alone are to large for fury.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5619et/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc562DWw,fury,2060989872,1528,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T10:58:34Z,2024-04-17T10:58:34Z,Why not split this file into smaller files,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc562DWw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1528,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc562J_D,fury,2061017027,1528,NA,Neiko2002,1197324,Nico Hezel,,NA,2024-04-17T11:14:08Z,2024-04-17T11:14:08Z,"It is just a hassle, right now the meta information of all images are stored in row-based style, followed by the embeddings information of all the images in column-based style. I see three options with the current implementation of fury to handle large files:

1. Store meta information and embeddings in seperate files, and split the embedding file into smaller files to cirumvent the 2GB limit
2. Try to keep everything in one file, but create additional files if its breaks the 2GB barrier
3. Store everything in row-based format (meta information and embedding per image) and split the files if needed

For 2 and 3 we would need to keep track of how big the file already is in order to make reasonable splits (not splitting the meta data or embedding of an image into two files). Finding a good splitting point for option 1 is more straight forward since the number of embeddings fitting into one file can be calculated in advanced. In all cases ideal memory allocation and ordering of data would need more consideration.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc562J_D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1529,https://api.github.com/repos/apache/fury/issues/1529,fury,2246951779,1529,[Java]We can use the new features in JDK17 to improve performance ,heliang666s,147408835,,,OPEN,2024-04-16T22:03:10Z,2024-04-17T02:04:07Z,"## Is your feature request related to a problem? Please describe.
![图片](https://github.com/apache/incubator-fury/assets/147408835/99d0e469-507c-4911-8c5d-a515d8123369)
* ### When judging the type of variable，use many if else.This is not aesthetically pleasing and at the same time mediocre in performance

## Describe the solution you'd like
### We can use the new feature of the jdk17:**Pattern Matching for switch**.

## Additional context
If you agree it,please assign me,I can solve it.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1529/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1529,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zD_a,fury,2060206042,1529,NA,LiangliangSui,116876207,,,NA,2024-04-17T02:04:05Z,2024-04-17T02:04:05Z,"Hi @heliang666s , Fury needs to be compatible with jdk 1.8, if we use Pattern Matching for switch, this will break this compatibility.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc56zD_a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/1534,fury,2248395488,1534,put RC2 back ,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,CLOSED,2024-04-17T14:08:14Z,2024-04-17T15:12:31Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

RC2

### Component(s)

Java

### Minimal reproduce step

RC2 was removed from the staging repository, breaking builds that depend on it.

### What did you expect to see?

I don’t expect versions to disappear so quickly, I expect new ones to appear and only removing old ones after a deprecation cycle.

### What did you see instead?

RC2 was removed.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1534/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563xac,fury,2061440668,1534,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T14:48:08Z,2024-04-17T14:48:08Z,"Hi, @andyczerwonka , sorry for removing rc2 jars, we're releasing rc3. I will add rc2 back and remove it when we have a final release.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563xac/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zCD,fury,2061447299,1534,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T14:51:07Z,2024-04-17T14:51:07Z,"@andyczerwonka At the same time, could you try rc3 out?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zCD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zFv,fury,2061447535,1534,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-17T14:51:14Z,2024-04-17T14:51:14Z,"> and remove it when we have a final release.

Let's not remove it until people have time to move off of it. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zFv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zqN,fury,2061449869,1534,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-17T14:51:59Z,2024-04-17T14:51:59Z,"> could you try rc3 out?

Yes, but we'll do that locally first. Right now we need RC2 back to get build working.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc563zqN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5639El,fury,2061488421,1534,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-17T15:05:39Z,2024-04-17T15:05:39Z,"@andyczerwonka It's reuploaded, please check it . Please keep an eye on this, we will make a final release in next days, and remove thse release candicate.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5639El/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc564AAS,fury,2061500434,1534,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-17T15:09:58Z,2024-04-17T15:09:58Z,@chaokunyang **Please do not remove the RC versions**. Just add the final release when it's ready. This allows people to move onto the release at their own pace.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc564AAS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1534,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc564Bne,fury,2061507038,1534,NA,andyczerwonka,138898,Andy Czerwonka,andy.czerwonka@gmail.com,NA,2024-04-17T15:12:31Z,2024-04-17T15:12:31Z,RC2 is back. Thanks @chaokunyang !!,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc564Bne/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1537,https://api.github.com/repos/apache/fury/issues/1537,fury,2248733426,1537,[Java] serializeJavaObject(...) is faster than serialize(...),Neiko2002,1197324,Nico Hezel,,OPEN,2024-04-17T16:37:53Z,2024-04-24T12:13:36Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.5.0-SNAPSHOT
OS: Windows
JDK: 22

### Component(s)

Java

### Minimal reproduce step

```java
public static void main(String[] args) throws Exception {
	final byte[] data = new byte[406991872];

	int runs = 5;
	Fury fury = Fury.builder().withLanguage(Language.JAVA)
			.withRefTracking(false)
			.requireClassRegistration(true)
			.withNumberCompressed(false)
			.withStringCompressed(false)
			.build();

	{
		try (Output output = new Output(Files.newOutputStream(furyFile), 1024*1024)) {
			fury.serializeJavaObject(output, data); // warmup
		}			
		long start = System.currentTimeMillis();
		for (int i = 0; i < runs; i++) {	
			try (Output output = new Output(Files.newOutputStream(furyFile), 1024*1024)) {
				fury.serializeJavaObject(output, data);
			}
		}
		System.out.println(""serializeJavaObject took ""+(System.currentTimeMillis()-start)+""ms"");
	}

	{
		try (Output output = new Output(Files.newOutputStream(furyFile), 1024*1024)) {
			fury.serialize(output, data); // warmup
		}			
		long start = System.currentTimeMillis();
		for (int i = 0; i < runs; i++) {				
			try (Output output = new Output(Files.newOutputStream(furyFile), 1024*1024)) {
				fury.serialize(output, data);
			}
		}
		System.out.println(""serialize took ""+(System.currentTimeMillis()-start)+""ms"");
	}
}
```

### What did you expect to see?

I would expect the serializeJavaObject(...) runs a little bit slower because of the additional class information which need to be stored, but the method is actually faster than serialize(...). In this example its only 10% difference. For a more complex project we get 25% faster serialization times for serializeJavaObject(...) than serialize(...)

### What did you see instead?

```
18:26:27.900 [main] INFO org.apache.fury.Fury -- Created new fury org.apache.fury.Fury@52aa2946
serializeJavaObject took 7352ms
serialize took 7849ms
```


### Anything Else?

This is not a perfect benchmark (no JMH), but no matter how many additional runs we add to the test or if we change the execution order the results are always the same.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1537/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1537,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57AHHi,fury,2063626722,1537,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-18T11:18:36Z,2024-04-18T11:18:36Z,"`serializeJavaObject` won't store classinfo of outermost object, so it would be faster. But The difference between `serializeJavaObject` and `serialize` should be small, since it only save a classinto write for passed object type","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57AHHi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1537,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57ALq5,fury,2063645369,1537,NA,heliang666s,147408835,,,NA,2024-04-18T11:30:05Z,2024-04-18T11:30:05Z,"The difference between the two is very small, and it is likely that it is due to error. I copied your code and tested it, and the object was a 2M size image. The number of cycles was increased in turn, and it was found that there was not much difference between the two.When cycles is small, **serializeJavaObject** is faster,but But when the number of cycles is large, the situation is reversed.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57ALq5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1537,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57p6S_,fury,2074584255,1537,NA,Neiko2002,1197324,Nico Hezel,,NA,2024-04-24T10:04:55Z,2024-04-24T10:04:55Z,"In my original question, I used a class not included in the Java JDK, making it hard for others to understand the behavior. Unfortunately, the BufferedOutputStream class from the JDK is very slow in this use case, which is why I used the Output class from Kryo. Below, I provide a standalone program without external dependencies, where I've copied the important parts of the Kryo Output class.

```java
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.apache.fury.Fury;
import org.apache.fury.config.Language;

public class FuryRegressionBench {

	public static final Path furyFile = Paths.get(""test.fury"");
	
	public static final int warumup = 3;
	public static final int runs = 5;
	public static final byte[] data = new byte[406991872];

	public static void main(String[] args) throws Exception {

		Fury fury = Fury.builder().withLanguage(Language.JAVA)
				.withRefTracking(false)
				.requireClassRegistration(true)
				.withNumberCompressed(false)
				.withStringCompressed(false)
				.build();
		
		interface SerializeFunc {
			public void execute(OutputStream output) throws IOException; 
			
			public static void run(String funcName, SerializeFunc func)  {
				try {			
					for (int i = 0; i < warumup; i++) {				
						try (OutputStream output = new BufferedOutput(Files.newOutputStream(furyFile), 1024*1024)) {
							func.execute(output);
						}
					}
					
					long start = System.currentTimeMillis();
					for (int i = 0; i < runs; i++) {				
						try (OutputStream output = new BufferedOutput(Files.newOutputStream(furyFile), 1024*1024)) {
							func.execute(output);
						}
					}
					System.out.println(funcName+"" took ""+(System.currentTimeMillis()-start)+""ms"");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		SerializeFunc.run(""BufferedOutput"", (output) -> output.write(data));
		SerializeFunc.run(""serializeJavaObject"", (output) -> fury.serializeJavaObject(output, data));
		SerializeFunc.run(""serialize"", (output) -> fury.serialize(output, data));
	}
	
	/**
	 * Extract of kryo Output.java
	 */
	public static class BufferedOutput extends OutputStream implements AutoCloseable {

		// Maximum reasonable array length. See: https://stackoverflow.com/questions/3038392/do-java-arrays-have-a-maximum-size
		public static final int maxArraySize = Integer.MAX_VALUE - 8;

		private int maxCapacity;
		private int position;
		private int capacity;
		private byte[] buffer;
		private OutputStream outputStream;

		/** Creates a new Output for writing to a byte[].
		 * @param bufferSize The initial size of the buffer.
		 * @param maxBufferSize If {@link #flush()} does not empty the buffer, the buffer is doubled as needed until it exceeds
		 *           maxBufferSize and an exception is thrown. Can be -1 for no maximum. */
		public BufferedOutput (int bufferSize, int maxBufferSize) {
			if (bufferSize > maxBufferSize && maxBufferSize != -1) throw new IllegalArgumentException(
					""bufferSize: "" + bufferSize + "" cannot be greater than maxBufferSize: "" + maxBufferSize);
			if (maxBufferSize < -1) throw new IllegalArgumentException(""maxBufferSize cannot be < -1: "" + maxBufferSize);
			this.capacity = bufferSize;
			this.maxCapacity = maxBufferSize == -1 ? maxArraySize : maxBufferSize;
			buffer = new byte[bufferSize];
		}

		/** Creates a new Output for writing to an OutputStream with the specified buffer size. */
		public BufferedOutput (OutputStream outputStream, int bufferSize) {
			this(bufferSize, bufferSize);
			if (outputStream == null) throw new IllegalArgumentException(""outputStream cannot be null."");
			this.outputStream = outputStream;
		}

		/** Flushes the buffered bytes. The default implementation writes the buffered bytes to the {@link #getOutputStream()
		 * OutputStream}, if any, and sets the position to 0. Can be overridden to flush the bytes somewhere else. */
		public void flush() throws IOException {
			if (outputStream == null) return;
			try {
				outputStream.write(buffer, 0, position);
				outputStream.flush();
			} catch (IOException ex) {
				throw new IOException(ex);
			}
			position = 0;
		}

		/** Ensures the buffer is large enough to read the specified number of bytes.
		 * @return true if the buffer has been resized. */
		protected boolean require(int required) throws IOException {
			if (capacity - position >= required) return false;
			flush();
			if (capacity - position >= required) return true;
			if (required > maxCapacity - position) {
				if (required > maxCapacity)
					throw new IOException(""Buffer overflow. Max capacity: "" + maxCapacity + "", required: "" + required);
				throw new IOException(
						""Buffer overflow. Available: "" + (maxCapacity - position) + "", required: "" + required);
			}
			if (capacity == 0) capacity = 16;
			do {
				capacity = Math.min(capacity * 2, maxCapacity);
			} while (capacity - position < required);
			byte[] newBuffer = new byte[capacity];
			System.arraycopy(buffer, 0, newBuffer, 0, position);
			buffer = newBuffer;
			return true;
		}

		@Override
		public void write(int value) throws IOException {
			if (position == capacity) require(1);
			buffer[position++] = (byte)value;
		}		

		/** Writes the bytes. Note the number of bytes is not written. */
		public void write(byte[] bytes) throws IOException {
			if (bytes == null) throw new IllegalArgumentException(""bytes cannot be null."");
			writeBytes(bytes, 0, bytes.length);
		}

		/** Writes the bytes. Note the number of bytes is not written. */
		public void write(byte[] bytes, int offset, int length) throws IOException {
			writeBytes(bytes, offset, length);
		}

		/** Writes the bytes. Note the number of bytes is not written. */
		public void writeBytes(byte[] bytes, int offset, int count) throws IOException {
			if (bytes == null) throw new IllegalArgumentException(""bytes cannot be null."");
			int copyCount = Math.min(capacity - position, count);
			while (true) {
				System.arraycopy(bytes, offset, buffer, position, copyCount);
				position += copyCount;
				count -= copyCount;
				if (count == 0) return;
				offset += copyCount;
				copyCount = Math.min(Math.max(capacity, 1), count);
				require(copyCount);
			}
		}

		/** Flushes any buffered bytes and closes the underlying OutputStream, if any. */
		@Override
		public void close() throws IOException {
			flush();
			if (outputStream != null) {
				try {
					outputStream.close();
				} catch (IOException ignored) {
				}
			}
		}
	}
}
```

This snippet could help to investigate the performance differences in a scenario where a file is written to disk. On an old HDD I currently get these numbers:
```
BufferedOutput took 1847ms
serializeJavaObject took 2231ms
serialize took 2756ms
```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57p6S_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1537,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qv9h,fury,2074804065,1537,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-24T12:13:35Z,2024-04-24T12:13:35Z,"I run yoyr code locally, here is my result:
```java
2024-04-24 08:12:19 INFO  Fury:144 [main] - Created new fury org.apache.fury.Fury@dfd3711
BufferedOutput took 1275ms
serializeJavaObject took 1975ms
serialize took 1784ms
```
serializeJavaObject/serialize should have similar result, there are not so much difference in those two methods","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qv9h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/1540,fury,2252059688,1540,[Go] Implement meta string encoding algorithm for golang,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-19T04:28:21Z,2024-08-02T02:10:38Z,"## Is your feature request related to a problem? Please describe.
We've implemented  meta string encoding algorithm in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#meta-string for java in #1514   , it's time to implement it in golang.

## Describe the solution you'd like
Java implementation in #1514 can be taken as a reference. But note that the meta string encoding algorithm is used for encode field name only, so the special charater can't be `.` or `$`, thus the implementation will be simpler

## Additional context
#1413 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1540/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PC-K,fury,2067541898,1540,NA,qingoba,51332889,,,NA,2024-04-20T04:08:44Z,2024-04-20T04:08:44Z,Could you assign it to me? This is my first try of open source and I'm very interested in this task. Thanks. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PC-K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PDUQ,fury,2067543312,1540,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-20T04:14:03Z,2024-04-20T04:14:03Z,"Great, thanks for the willingness to contribute to Fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PDUQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57TRdZ,fury,2068649817,1540,NA,qingoba,51332889,,,NA,2024-04-22T07:12:24Z,2024-04-22T07:12:24Z,"In function `public MetaString encode(String input, Encoding encoding)` in file `MetaStringEncoder.java`, there is a section of code:
```java
default:
  byte[] bytes = input.getBytes(StandardCharsets.UTF_8);
  return new MetaString(
      input, Encoding.UTF_8, specialChar1, specialChar2, bytes, bytes.length * 8, 0);
```
why the `numBits` is `0`, rather `bytes.length * 8` ?
why the `numChars` is `bytes.length * 8`, rather `bytes.length` ?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57TRdZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57V_BE,fury,2069360708,1540,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-22T13:05:50Z,2024-04-22T13:05:50Z,"hmm, this is a bug, UTF-8 is barely used in meta string. Acutally, most chars are ascii chars. So it's not covered in Fury serialization tests. We need to fix it and add some unit tests.

Thanks for pointing out this bug @qingoba ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57V_BE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57dcCh,fury,2071314593,1540,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T02:54:10Z,2024-04-23T02:54:10Z,"I have a new idea, we can add a bit to incidate whether strip last char in encoded meta string if the encoding is not UTF-8. In this way, we don't have to store num bits and num chars in MetaString","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57dcCh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57oD_j,fury,2074099683,1540,NA,qingoba,51332889,,,NA,2024-04-24T05:58:55Z,2024-04-24T05:58:55Z,"Exactly. 
Because `5 + 5 > 8`, in the last byte, there is at most one empty character.
Suppose we use `empty` to mark whether last char is empty, then the actual number of characters is equal to `len(bytes) * 8 / 5 - empty`

 

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57oD_j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57oRsb,fury,2074155803,1540,NA,qingoba,51332889,,,NA,2024-04-24T06:21:22Z,2024-04-24T06:21:22Z,"In this way, the Decoder does not need to accept `numBits` arguments.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57oRsb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1540,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qY5K,fury,2074709578,1540,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-24T11:19:26Z,2024-04-24T11:19:26Z,"

> I have a new idea, we can add a bit to incidate whether strip last char in encoded meta string if the encoding is not UTF-8. In this way, we don't have to store num bits and num chars in MetaString

Hi @qingoba , I added stip last char flag to spec in #1565 . I believe this will make the implementation simpler","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qY5K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1541,https://api.github.com/repos/apache/fury/issues/1541,fury,2252060520,1541,[Python] Implement meta string encoding algorithm for python,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-19T04:29:13Z,2024-07-08T13:40:40Z,"## Is your feature request related to a problem? Please describe.
We've implemented  meta string encoding algorithm in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#meta-string for java in #1514   , it's time to implement it in python.

## Describe the solution you'd like
Java implementation in #1514 can be taken as a reference. But note that the meta string encoding algorithm is used for encode field name only, so the special charater can't be `.` or `$`, thus the implementation will be simpler

## Additional context
#1413 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1541/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/1542,fury,2252061448,1542,[JavaScript] Implement meta string encoding algorithm for JavaScript,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-19T04:30:02Z,2024-10-26T16:48:22Z,"## Is your feature request related to a problem? Please describe.
We've implemented  meta string encoding algorithm in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#meta-string for java in #1514   , it's time to implement it in javascript.

## Describe the solution you'd like
Java implementation in #1514 can be taken as a reference. But note that the meta string encoding algorithm is used for encode field name only, so the special charater can't be `.` or `$`, thus the implementation will be simpler

## Additional context
#1413 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1542/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_xKlE,fury,2143594820,1542,NA,Forchapeatl,24577149,FORCHA PEARL,forchapearl1@gmail.com,NA,2024-06-01T21:24:53Z,2024-06-01T21:24:53Z,"Hello @chaokunyang  , I am Forcha Pearl from Cameroon . I am very good  bit manipulation, endianess, encoding DataStructures and Algorithm. I also experienced with Java, python and javascript.  I am interested in participting in OSPP 2024 under Apache furry this year. Please  has this issue ben reserved for the OSPP  contribution period.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_xKlE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_0PnM,fury,2144401868,1542,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-03T06:47:21Z,2024-06-03T06:47:21Z,"> Hello @chaokunyang , I am Forcha Pearl from Cameroon . I am very good bit manipulation, endianess, encoding DataStructures and Algorithm. I also experienced with Java, python and javascript. I am interested in participting in OSPP 2024 under Apache furry this year. Please has this issue ben reserved for the OSPP contribution period.

Hi @Forchapeatl , this is not an issue reserved for the OSPP. If it's not taken by someone else in this month, we will take it over. The issues for OSPP can be found at #1670","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_0PnM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_1n4K,fury,2144763402,1542,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-06-03T09:49:04Z,2024-06-03T09:49:04Z,"> Hello @chaokunyang , I am Forcha Pearl from Cameroon . I am very good bit manipulation, endianess, encoding DataStructures and Algorithm. I also experienced with Java, python and javascript. I am interested in participting in OSPP 2024 under Apache furry this year. Please has this issue ben reserved for the OSPP contribution period.

@Forchapeatl 
Hi, I am the mentor for the OSPP Fury Javascript project. Your participation is welcome. However, I noticed that the OSPP application period is about to end on June 4th at 18:00. You should submit your application on OSPP as soon as possible.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_1n4K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_5sMg,fury,2145829664,1542,NA,Forchapeatl,24577149,FORCHA PEARL,forchapearl1@gmail.com,NA,2024-06-03T18:11:11Z,2024-06-03T18:11:11Z,"Thank you @theweipeng . @chaokunyang , Please  assign this issue to me. I would love to work on this","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_5sMg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_8Bbx,fury,2146440945,1542,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-04T02:16:23Z,2024-06-04T02:16:23Z,"> Thank you @theweipeng . @chaokunyang , Please assign this issue to me. I would love to work on this

Great, assigned to you","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_8Bbx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RageR,fury,2439645073,1542,NA,barrerajuanjose,2962484,Juan Jose Barrera,barrerajuanjose@gmail.com,NA,2024-10-26T16:33:53Z,2024-10-26T16:33:53Z,"Hi @chaokunyang. I would like to take care of this issue, is there someone else working on it? Thanks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RageR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1542,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RaiO3,fury,2439652279,1542,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-26T16:48:22Z,2024-10-26T16:48:22Z,"Hi @barrerajuanjose , thanks form contribuing to Fury. This has been implemented by @Forchapeatl in #1774. If you are interested at Fury, you can take other issues.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RaiO3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1543,https://api.github.com/repos/apache/fury/issues/1543,fury,2252062487,1543,[C++] Implement meta string encoding algorithm for C++,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-04-19T04:30:47Z,2024-05-23T05:56:43Z,"## Is your feature request related to a problem? Please describe.
We've implemented  meta string encoding algorithm in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#meta-string for java in #1514   , it's time to implement it in c++.

## Describe the solution you'd like
Java implementation in #1514 can be taken as a reference. But note that the meta string encoding algorithm is used for encode field name only, so the special charater can't be `.` or `$`, thus the implementation will be simpler

## Additional context
#1413 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1543/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1543,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IOdd,fury,2065753949,1543,NA,heliang666s,147408835,,,NA,2024-04-19T04:54:01Z,2024-04-19T04:54:01Z,"please assign me,thanks!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IOdd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1543,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IO7L,fury,2065755851,1543,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-19T04:56:22Z,2024-04-19T04:56:22Z,"> please assign me,thanks!

Great! Feel free to ask if you have further questions when implement this feature.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IO7L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1543,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-u9wi,fury,2126240802,1543,NA,Yangsx-1,85615957,Hauru,,NA,2024-05-23T05:05:24Z,2024-05-23T05:05:24Z,"Hi, i'm new in here and want to do some work. It seems to be inactivated for a while and i want to try this. Could you assign this task to me? @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-u9wi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1543,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-vKee,fury,2126292894,1543,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-23T05:56:42Z,2024-05-23T05:56:42Z,"> Hi, i'm new in here and want to do some work. It seems to be inactivated for a while and i want to try this. Could you assign this task to me? @chaokunyang

Assigned, thanks for contributing to Apache Fury @Yangsx-1 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-vKee/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1544,https://api.github.com/repos/apache/fury/issues/1544,fury,2252062957,1544,[Rust] Implement meta string encoding algorithm for rust,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-19T04:31:17Z,2024-07-17T14:30:44Z,"## Is your feature request related to a problem? Please describe.
We've implemented  meta string encoding algorithm in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#meta-string for java in #1514   , it's time to implement it in rust.

## Describe the solution you'd like
Java implementation in #1514 can be taken as a reference. But note that the meta string encoding algorithm is used for encode field name only, so the special charater can't be `.` or `$`, thus the implementation will be simpler

## Additional context
#1413 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1544/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1544,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58DjMS,fury,2081305362,1544,NA,Kelvinyu1117,26522479,Kelvin Wu,kelvinyu1117@gmail.com,NA,2024-04-28T03:06:13Z,2024-04-28T03:06:13Z,I would like to try.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58DjMS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1544,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58DkBl,fury,2081308773,1544,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-28T03:23:16Z,2024-04-28T03:23:16Z,"Great, thanks for the willingness to contribute to Apache Fury. Note that Java implementation in https://github.com/apache/incubator-fury/pull/1514 has some changes, please see latest code in main branch","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58DkBl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1544,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6C373k,fury,2195701220,1544,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-06-27T21:35:39Z,2024-06-27T21:35:39Z,Hi！I saw this issue in the Alibaba Cloud Tianchi TONGYI Lingma competition. I would like to try implementing it.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6C373k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1544,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6C5tIc,fury,2196165148,1544,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-28T05:23:00Z,2024-06-28T05:23:00Z,"> Hi！I saw this issue in the Alibaba Cloud Tianchi TONGYI Lingma competition. I would like to try implementing it.

Great! thanks for contributing to Apache Fury. Seems @Kelvinyu1117 hasn't been working on this, you could take it over","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6C5tIc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/1545,fury,2252081019,1545,[Go] Support convert utf16 encoded string to utf8 string,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-04-19T04:51:26Z,2024-04-24T12:07:52Z,"## Is your feature request related to a problem? Please describe.
Currently Fury xlang serialization use utf8 for string encoding, which is not performance efficient in many languages. 

We introduced utf16 in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#string . But golang doesn't support utf16, we should support to transcode  utf16 encoded string to utf8 string in fury go deserialization.

## Describe the solution you'd like

Implement utf16 to utf8 transcoding in fury go. The implementation should use SIMD to provide faster speed.

## Additional context
#1413
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1545/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57Iggn,fury,2065827879,1545,NA,LiangliangSui,116876207,,,NA,2024-04-19T06:09:30Z,2024-04-19T06:09:30Z,"Hi @chaokunyang , Have you started implementing this feature? If it hasn't been implemented yet, I can take over and implement this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57Iggn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IpO1,fury,2065863605,1545,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-19T06:43:22Z,2024-04-19T06:43:22Z,"@LiangliangSui I haven't, feel free to take over it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57IpO1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57ItkJ,fury,2065881353,1545,NA,LiangliangSui,116876207,,,NA,2024-04-19T06:58:16Z,2024-04-19T06:58:16Z,"Okay, I will do this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57ItkJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57pqFN,fury,2074517837,1545,NA,LiangliangSui,116876207,,,NA,2024-04-24T09:32:30Z,2024-04-24T09:32:30Z,"@chaokunyang  We currently use UTF8 for cross-language serialization, and only Java(not cross-language) uses Latin/UTF16.

```java
  public void writeString(MemoryBuffer buffer, String value) {
    if (isJava) {
      writeJavaString(buffer, value);
    } else {
      writeUTF8String(buffer, value);
    }
  }
```

Will we use UTF16 as the default cross-language String encoding in the future?

I see that the cross-language currently designed in fury_xlang_serialization_spec still uses UTF8 as the default.
![image](https://github.com/apache/incubator-fury/assets/116876207/544654fe-09d0-4697-b7e2-378e62b5711b)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57pqFN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qaci,fury,2074715938,1545,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-24T11:23:06Z,2024-04-24T11:23:06Z,"Depends on the language and the string. For golang, since the string is utf-8 encoded already. Fury go will encode data as utf8 string by a copy. But java/javascript/python may encode string as latin1 or utf16 and send to furygo. So we need to support utf16 too. And if the peer language, we may configure furygo use latin1/utf16 by default too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qaci/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qiHn,fury,2074747367,1545,NA,LiangliangSui,116876207,,,NA,2024-04-24T11:41:35Z,2024-04-24T11:41:35Z,"> But java/javascript/python may encode string as latin1 or utf16 and send to furygo.

Latin1/UTF16 is only used in `Language.JAVA` and will not be sent to furygo.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qiHn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qkwA,fury,2074758144,1545,NA,LiangliangSui,116876207,,,NA,2024-04-24T11:47:58Z,2024-04-24T11:47:58Z,"Okay, I got it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qkwA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1545,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qtPR,fury,2074792913,1545,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-24T12:07:50Z,2024-04-24T12:07:50Z,"In the future,  java/javascript/python may all encode string as `latin1/utf16` and send to furygo.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qtPR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1546,https://api.github.com/repos/apache/fury/issues/1546,fury,2252082312,1546,[C++] Support convert utf16 encoded string to utf8 string,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-04-19T04:53:00Z,2024-07-15T04:55:02Z,"## Is your feature request related to a problem? Please describe.
Currently Fury xlang serialization use utf8 for string encoding, which is not performance efficient in many languages. 

We introduced utf16 in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#string . But c++ doesn't support utf16, and most users assume the `std::string` is utf-8 encoded if it's used as a string instead of buffer. we should support to transcode  utf16 encoded string to utf8 string in fury C++ deserialization.

## Describe the solution you'd like

Implement utf16 to utf8 convertion in fury c++. The implementation should use SIMD to provide faster speed.

## Additional context
#1413
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1546/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/1547,fury,2252084550,1547,[Rust] Support convert utf16 encoded string to utf8 string,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-04-19T04:55:34Z,2024-07-23T16:08:21Z,"## Is your feature request related to a problem? Please describe.
Currently Fury xlang serialization use utf8 for string encoding, which is not performance efficient in many languages. 

We introduced utf16 in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#string . But rust native string doesn't support utf16, it's is utf-8 encoded. 

We should support to transcode  utf16 encoded string to utf8 string in fury rust deserialization.

## Describe the solution you'd like

Implement utf16 to utf8 convertion in fury rust. The implementation should use SIMD to provide faster speed.

## Additional context
#1413
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0qAN,fury,2211618829,1547,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-06T03:43:12Z,2024-07-06T03:43:12Z,"Hi, I've created a basic demo. Since Rust's string encoding is UTF-8, we can directly use the String's API to convert UTF-16 encoded data into a string. However, this method doesn't utilize SIMD. So, I'm wondering what else needs to be done on top of this. 
```rust
let bytes = [
        0b01101000, // 'h'
        0b00000000, 
        0b01100101, // 'e'
        0b00000000, 
        0b01101100, // 'l'
        0b00000000, 
        0b01101100, // 'l'
        0b00000000, 
        0b01101111, // 'o'
        0b00000000, 
        0b00010110, // '世' in UTF-16 little-endian
        0b01001110, 
        0b01001100, // '界' in UTF-16 little-endian
        0b01110101, 
    ];
    let utf16_vec: Vec<u16> = bytes
        .chunks_exact(2)
        .map(|chunk| u16::from_le_bytes([chunk[0], chunk[1]]))
        .collect();
    let utf8_string = String::from_utf16(&utf16_vec).expect(""Invalid UTF-16 sequence"");
    println!(""{}"", utf8_string);
```
I'm not familiar with high-performance computing and I've only found the [std::simd](https://doc.rust-lang.org/beta/std/simd/index.html) library, however, it is a **nightly-only experimental** API.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0qAN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0q_J,fury,2211622857,1547,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-06T04:04:52Z,2024-07-06T04:04:52Z,"SIMD can be left in later pr. This pr can implement basic function only. The some for this method should not be difficult. We may implement some on fury directly instead of depend on a library. In this way, We can minimize dependencies.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0q_J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0vxD,fury,2211642435,1547,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-06T05:00:18Z,2024-07-06T05:00:18Z,"So for current step, my task is to implement a function like `fn utf16_to_string(utf16_data: &[u8], is_little_endian: bool) -> Result<String, Error>` instead of using String's API ? Although `String` is a part of `std` library. Got it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D0vxD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ET9ZC,fury,2219824706,1547,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-10T08:04:33Z,2024-07-10T08:04:33Z,"I just wrote a demo about this , using cpp, and only big endian for UTF-16. I have a question about whether the Byte Order of UTF-16 encoding and decoding in Xlang has been unified in Fury.
I'll create a rust version soon.
```cpp
#include <iostream>
#include <vector>
#include <codecvt>
#include <codecvt>
#include <locale>

std::vector<uint8_t> utf16_to_utf8(const std::vector<uint16_t> &utf16)
{
    std::vector<uint8_t> utf8;
    for (size_t i = 0; i < utf16.size(); ++i)
    {
        uint16_t wc = utf16[i];
        if (wc < 0x80)
        {
            // 1-byte UTF-8
            utf8.push_back(static_cast<uint8_t>(wc));
            std::cout << 1 << ""\n"";
        }
        else if (wc < 0x800)
        {
            // 2-byte UTF-8
            // 110????? 10??????
            // need 11 bit suffix of wc
            uint8_t second = static_cast<uint8_t>(wc & 0b111111 | 0b10000000);
            uint8_t first = static_cast<uint8_t>(wc >> 6 & 0b11111 | 0b11000000);
            utf8.push_back(first);
            utf8.push_back(second);
            std::cout << 2 << ""\n"";
        }
        else if (wc >= 0xD800 && wc <= 0xDBFF)
        {
            // Surrogate pair (4-byte UTF-8)
            if (i + 1 < utf16.size())
            {
                // need extra byte
                uint16_t wc2 = utf16[++i];
                // utf16 to unicode
                uint32_t code_point = (((wc - 0xD800) << 10) | (wc2 - 0xDC00)) + 0x10000;
                // 11110??? 10?????? 10?????? 10??????
                // need 21 bit suffix of code_point
                uint8_t fourth = static_cast<uint8_t>(code_point & 0b111111 | 0b10000000);
                uint8_t third = static_cast<uint8_t>(code_point >> 6 & 0b111111 | 0b10000000);
                uint8_t second = static_cast<uint8_t>(code_point >> 12 & 0b111111 | 0b10000000);
                uint8_t first = static_cast<uint8_t>(code_point >> 18 & 0b111 | 0b11110000);
                utf8.push_back(first);
                utf8.push_back(second);
                utf8.push_back(third);
                utf8.push_back(fourth);
                std::cout << 3 << ""\n"";
            }
            else
            {
                throw std::runtime_error(""Invalid UTF-16 string"");
            }
        }
        else
        {
            // 3-byte UTF-8
            // 1110???? 10?????? 10??????
            // need 16 bit suffix of wc, as same as wc itself
            uint8_t third = static_cast<uint8_t>(wc & 0b111111 | 0b10000000);
            uint8_t second = static_cast<uint8_t>(wc >> 6 & 0b111111 | 0b10000000);
            uint8_t first = static_cast<uint8_t>(wc >> 12 | 0b11100000);
            utf8.push_back(first);
            utf8.push_back(second);
            utf8.push_back(third);
            std::cout << 4 << ""\n"";
        }
    }
    return utf8;
}

int main()
{
    std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> convert;
    std::u16string utf16_s = convert.from_bytes(""Hé€lo, 世界!😀"");
    std::vector<uint16_t> utf16;
    std::cout << ""=====init utf16:"" << std::endl;
    for (uint16_t c : utf16_s)
    {
        printf(""0x%04x,"", c);
        utf16.push_back(c);
    }
    std::cout << ""\n"";
    //   ====================================
    std::vector<uint8_t> utf8 = utf16_to_utf8(utf16);
    //   ====================================
    std::cout << ""=====utf8:"" << std::endl;
    for (uint8_t byte : utf8)
    {
        printf(""0x%02x,"", byte);
    }
    std::cout << std::endl;
    // final UTF-8 string
    std::cout << ""final string: "" << std::string(utf8.begin(), utf8.end());
    return 0;
}
```
print as follows
```
=====init utf16:
0x0048,0x00e9,0x20ac,0x006c,0x006f,0x002c,0x0020,0x4e16,0x754c,0x0021,0xd83d,0xde00,
=====utf8:
0x48,0xc3,0xa9,0xe2,0x82,0xac,0x6c,0x6f,0x2c,0x20,0xe4,0xb8,0x96,0xe7,0x95,0x8c,0x21,0xf0,0x9f,0x98,0x80,
final string: Hé€lo, 世界!😀
```
![image](https://github.com/apache/fury/assets/61675635/6cbcb980-9f6c-47de-a859-55d7037798ee)
![image](https://github.com/apache/fury/assets/61675635/93adb98e-05bc-4533-91fc-aa547691278c)
![image](https://github.com/user-attachments/assets/b62db174-c465-4151-b1a5-21f65f13062c)


","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ET9ZC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EU1Ym,fury,2220054054,1547,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-10T09:51:31Z,2024-07-10T09:51:31Z,"The byte order are little endian currently, but we plan to add big endian support later to support zero-copy for string encoding. So maybe we can left an option in current implementation.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EU1Ym/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1547,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F2f3b,fury,2245656027,1547,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-23T16:08:19Z,2024-07-23T16:08:19Z,"Hi, I'd like to continue to implement the simd approach.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F2f3b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1548,https://api.github.com/repos/apache/fury/issues/1548,fury,2253255361,1548,[Java] Performance issue when deserializing from FuryInputStream with ZstdInputStream,yihwang6,139317744,,,CLOSED,2024-04-19T15:14:26Z,2024-04-20T06:40:37Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.5.0-SNAPSHOT
OS: Windows
JDK: 8
CommitId：bb419ddf8d4983f438e4b1527c7cb9da74477022

### Component(s)

Java

### Minimal reproduce step

    public static final Fury FURY_RELEASE = Fury.builder()
        .withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .build();

    public static <T> ByteArrayOutputStream zstdFurySerialize_Release(T origin) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             ZstdOutputStream zstdOutputStream = new ZstdOutputStream(outputStream)) {
            FURY_RELEASE.serializeJavaObject(zstdOutputStream, origin);
            return outputStream;
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }

    public static <T> T zstdFuryDeserialize_Release(ByteArrayInputStream inputStream, Class<T> clazz) {
        try (ZstdInputStream zstdInputStream = new ZstdInputStream(inputStream)) {
            return FURY_RELEASE.deserializeJavaObject(zstdInputStream, clazz);
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }


    public static final org.apache.fury.Fury FURY_SNAPSHOT = org.apache.fury.Fury.builder()
        .withLanguage(org.apache.fury.config.Language.JAVA)
        .requireClassRegistration(false)
        .build();

    public static <T> ByteArrayOutputStream zstdFurySerialize_Snapshot(T origin) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             ZstdOutputStream zstdOutputStream = new ZstdOutputStream(outputStream)) {
            FURY_SNAPSHOT.serializeJavaObject(zstdOutputStream, origin);
            return outputStream;
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }

    public static <T> T zstdFuryDeserialize_Snapshot(ByteArrayInputStream inputStream, Class<T> clazz) {
        try (ZstdInputStream zstdInputStream = new ZstdInputStream(inputStream);
             FuryInputStream furyInputStream = new FuryInputStream(zstdInputStream)) {
            return FURY_SNAPSHOT.deserializeJavaObject(furyInputStream, clazz);
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }

### What did you expect to see?

I tested Fury with zstd and found that using FuryInputStream as input for deserializeJavaObject(...) in the latest snapshot version 0.5.0-SNAPSHOT resulted in significantly lower performance compared to the release version 0.4.0.. 

### What did you see instead?

![image](https://github.com/apache/incubator-fury/assets/139317744/ea00189b-4a07-46a3-bf5b-b0e81afbd90a)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1548/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1548,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57NF3M,fury,2067029452,1548,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-19T17:44:30Z,2024-04-19T17:44:30Z,"I can't run this script on mac, is there something extra to configure?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57NF3M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1548,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57NQOT,fury,2067071891,1548,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-19T18:15:27Z,2024-04-19T18:15:27Z,How big is your data? Could you add a flamegraph here?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57NQOT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1548,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PAh6,fury,2067531898,1548,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-20T03:25:24Z,2024-04-20T03:25:24Z,"The `com.github.luben.zstd.ZstdInputStreamNoFinalizer#available` return `1` instead of actual available data, which make the read slow.

I do think it should return acutal available data:
```java

  public synchronized int available() throws IOException {
    if (this.isClosed) {
      throw new IOException(""Stream closed"");
    } else {
      return !this.needRead ? 1 : this.in.available();
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PAh6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1548,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PDkb,fury,2067544347,1548,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-20T04:17:12Z,2024-04-20T04:17:12Z,"Hi @yihwang6 , could you use this https://github.com/apache/incubator-fury/pull/1551 to rerun your benchmark?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57PDkb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1554,https://api.github.com/repos/apache/fury/issues/1554,fury,2255167917,1554,[Java] Cannot disable logging with ThreadSafeFury in native-image,alessiodf,35549818,,,CLOSED,2024-04-21T16:49:38Z,2024-04-23T10:50:39Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.5.0 (built from source)
OS: macOS
JDK: 22

After following the [GraalVM guide](https://github.com/apache/incubator-fury/blob/main/docs/guide/graalvm_guide.md) by using a static class field for `native-image` compilation, I was able to disable logging with `LoggerFactory.disableLogging()` if a using a `Fury`. However, logging is not disabled if a `ThreadSafeFury` is used instead.

### Component(s)

Java

### Minimal reproduce step

```
import org.apache.fury.Fury;
import org.apache.fury.ThreadSafeFury;
import org.apache.fury.logging.LoggerFactory;
public class Main {
    static ThreadSafeFury fury;
    static {
        LoggerFactory.disableLogging();
        fury = new ThreadLocalFury(classLoader -> {
            return Fury.builder().build();
        });
        // Also tried: fury = Fury.builder().buildThreadSafeFury();
    }
    public static void main(String[] args) {
        fury.serialize(Main.class);
    }
}
```

### What did you expect to see?

No output

### What did you see instead?

`2024-04-21 05:33:31 INFO  Fury:144 [main] - Created new fury org.apache.fury.Fury@50c4ee77`

### Anything Else?

Correct behaviour is observed in the JVM with a `ThreadSafeFury`, i.e. when not compiled with `native-image`. Similarly, correct behaviour is observed in both the JVM and `native-image` when using a `Fury` instead of a `ThreadSafeFury`.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1554/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1554,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57d-xK,fury,2071456842,1554,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T05:46:35Z,2024-04-23T05:46:35Z,"Hi @alessiodf , I tested it locally, I think maybe you init some classes at build time by accident. And those classes init Fury first without disable Logging","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57d-xK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1554,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57d-_G,fury,2071457734,1554,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T05:47:31Z,2024-04-23T05:47:31Z,"This is my test code, no logs are printed.
![image](https://github.com/apache/incubator-fury/assets/12445254/d245ccab-501f-4a00-a548-e72e3a7c36bb)
![image](https://github.com/apache/incubator-fury/assets/12445254/e0c6ffd6-a613-48cb-aa43-2d7c5f986a5f)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57d-_G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1555,https://api.github.com/repos/apache/fury/issues/1555,fury,2255192711,1555,[Java] Cannot use `CompatibleMode.COMPATIBLE` with native-image when registering classes with `createSerializer: true`,alessiodf,35549818,,,CLOSED,2024-04-21T17:50:53Z,2024-04-27T05:25:54Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.5.0 (built from source)
OS: macOS
JDK: 22

The `withCompatibleMode(CompatibleMode.COMPATIBLE)` option causes a compilation failure in GraalVM `native-image` if `fury.register()` is called with `createSerializer` set to `true`. Compilation works fine if `withCompatibleMode(CompatibleMode.COMPATIBLE)` is not used.

### Component(s)

Java

### Minimal reproduce step

```
import org.apache.fury.Fury;
import org.apache.fury.config.CompatibleMode;
public class Main {
    private final int myVar = 1;
    static Fury fury;
    static {
        fury = Fury.builder().withCompatibleMode(CompatibleMode.COMPATIBLE).build();
        fury.register(Main.class, true);
    }
    public static void main(String[] args) {
        fury.deserialize(fury.serialize(Main.class));
    }
}
```

### What did you expect to see?

Compilation should succeed in `native-image`

### What did you see instead?

Compilation fails with:
```
Error: Class initialization of org.example.Main failed. Use the option 

    '--initialize-at-run-time=org.example.Main'
```

Of course, we can't use `--initialize-at-run-time=org.example.Main` because a `java.lang.UnsupportedOperationException` error will occur at runtime, which is totally expected due to the constraints of using `native-image`.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1555/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1555,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57jhyC,fury,2072910978,1555,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T16:49:10Z,2024-04-23T16:49:10Z,"Hi @alessiodf , thanks for reporting this bug. Fury do not support compatible mode on graalvm. I tested it locally, and it throw following exception:
```java
Error: Class initialization of org.apache.fury.graalvm.ThreadSafeExample failed. Use the option 

    '--initialize-at-run-time=org.apache.fury.graalvm.ThreadSafeExample'

 to explicitly request initialization of this class at run time.
com.oracle.svm.core.util.UserError$UserException: Class initialization of org.apache.fury.graalvm.ThreadSafeExample failed. Use the option 

    '--initialize-at-run-time=org.apache.fury.graalvm.ThreadSafeExample'

 to explicitly request initialization of this class at run time.
        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:85)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.ensureClassInitialized(ClassInitializationSupport.java:195)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ProvenSafeClassInitializationSupport.forceInitializeHosted(ProvenSafeClassInitializationSupport.java:219)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ProvenSafeClassInitializationSupport.initializeAtBuildTime(ProvenSafeClassInitializationSupport.java:195)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.initializeAtBuildTime(ClassInitializationSupport.java:224)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.InitKind.lambda$stringConsumer$2(InitKind.java:87)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationFeature.lambda$processClassInitializationOptions$1(ClassInitializationFeature.java:91)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
        at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
        at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationFeature.processClassInitializationOptions(ClassInitializationFeature.java:81)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:879)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:590)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:538)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:720)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:142)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:97)
Caused by: java.lang.ExceptionInInitializerError
        at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
        at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1160)
        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.ensureClassInitialized(ClassInitializationSupport.java:177)
        ... 22 more
Caused by: java.lang.RuntimeException: Create compatible serializer failed, 
class: class org.apache.fury.graalvm.Foo
        at org.apache.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:57)
        at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:957)
        at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:131)
        at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:952)
        at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:875)
        at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:772)
        at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1158)
        at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1097)
        at org.apache.fury.resolver.ClassResolver.getSerializer(ClassResolver.java:743)
        at org.apache.fury.resolver.ClassResolver.register(ClassResolver.java:403)
        at org.apache.fury.Fury.register(Fury.java:154)
        at org.apache.fury.graalvm.ThreadSafeExample.lambda$static$0(ThreadSafeExample.java:45)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:127)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:95)
        at org.apache.fury.ThreadLocalFury.lambda$new$2(ThreadLocalFury.java:59)
        at java.base/java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:357)
        at java.base/java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:225)
        at java.base/java.lang.ThreadLocal.get(ThreadLocal.java:194)
        at java.base/java.lang.ThreadLocal.get(ThreadLocal.java:172)
        at org.apache.fury.ThreadLocalFury.<init>(ThreadLocalFury.java:67)
        at org.apache.fury.graalvm.ThreadSafeExample.<clinit>(ThreadSafeExample.java:40)
        ... 25 more
Caused by: java.lang.IllegalStateException: Field offset will change between graalvm build time and runtime, should bye accessed by following graalvm auto rewrite pattern.
        at org.apache.fury.util.ReflectionUtils.getFieldOffset(ReflectionUtils.java:374)
        at org.apache.fury.util.FieldAccessor.createAccessor(FieldAccessor.java:118)
        at org.apache.fury.resolver.FieldResolver$FieldInfo.<init>(FieldResolver.java:721)
        at org.apache.fury.resolver.FieldResolver.<init>(FieldResolver.java:279)
        at org.apache.fury.resolver.FieldResolver.of(FieldResolver.java:206)
        at org.apache.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:56)
        at org.apache.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:54)
        ... 45 more
```

We need to make `FieldResolver` support graalvm","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57jhyC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/1558,fury,2258292461,1558,Sporadic java.lang.ArrayIndexOutOfBoundsException/Can't deserialize lambda if RuntimeException is deserialized,johannschenkl,16838670,Johann Schenkl,johann.schenkl@trinnovative.de,OPEN,2024-04-23T08:40:16Z,2024-05-13T06:48:59Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

We are using fury as a replacement for jdk serialization in a java rpc application. If on the server side an exception is thrown, this exception in serialized and sent to the client.
In some cases we seen and exception when the serialization is done.
Thanks for your help and for that great project!

Fury setup:

`var fury = Fury.builder()
.withLanguage(Language.JAVA)
.withRefTracking(true)
.requireClassRegistration(false)
.withAsyncCompilation(true).build();`

Relevant parts of logs:

> io.fury.serializer.LambdaSerializer.read(LambdaSerializer.java:88)
>  io.fury.Fury.readRef(Fury.java:828)
>  io.fury.resolver.FieldResolver.skipDataBy4(FieldResolver.java:433)
>  com.mycompany.SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.readAndSetFields(SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.java:258)
>  com.mycompany.SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.read(SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.java:324)
>  com.mycompany.RemoteInvocationResultFuryRefCodec_1_815033865_718325701.readFields$(RemoteInvocationResultFuryRefCodec_1_815033865_718325701.java:111)
>  com.mycompany.RemoteInvocationResultFuryRefCodec_1_815033865_718325701.read(RemoteInvocationResultFuryRefCodec_1_815033865_718325701.java:127)
>  io.fury.Fury.readDataInternal(Fury.java:899)
>  io.fury.Fury.readRef(Fury.java:801)
>  io.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1135)
>  io.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1121)
>  com.mycompany.Serializer.deserialize(Serializer.java:35)
> 
> ...
> 
> 
> Caused by: 
> Index -1 out of bounds for length 512
> java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 512
> io.fury.collection.IntArray.pop(IntArray.java:51)
>  io.fury.resolver.MapRefResolver.reference(MapRefResolver.java:194)
>  io.fury.builder.SerializedLambdaFuryRefCodec_1_1361449601.read(SerializedLambdaFuryRefCodec_1_1361449601.java:193)
>  io.fury.serializer.LambdaSerializer.read(LambdaSerializer.java:85)
>  io.fury.Fury.readRef(Fury.java:828)
>  io.fury.resolver.FieldResolver.skipDataBy4(FieldResolver.java:433)
>  com.mycompany.SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.readAndSetFields(SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.java:258)
>  com.mycompany.SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.read(SomeExceptionFuryRefCompatibleCodec_1_815033865_986095905.java:324)
>  com.mycompany.RemoteInvocationResultFuryRefCodec_1_815033865_718325701.readFields$(RemoteInvocationResultFuryRefCodec_1_815033865_718325701.java:111)
>  com.mycompany.RemoteInvocationResultFuryRefCodec_1_815033865_718325701.read(RemoteInvocationResultFuryRefCodec_1_815033865_718325701.java:127)
>  io.fury.Fury.readDataInternal(Fury.java:899)
>  io.fury.Fury.readRef(Fury.java:801)
>  io.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1135)
>  io.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1121)
>  com.mycompany.Serializer.deserialize(Serializer.java:35)

### What did you expect to see?

The deserialized payload.

### What did you see instead?

An ArrayIndexOutOfBoundsException.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1558/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fUMn,fury,2071806759,1558,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T09:11:46Z,2024-04-23T09:11:46Z,"Hi @johannschenkl ， thanks for reporting this bug. It seems that our current implementation has some inconsistency between interpreter mode and codegen mode. This has been reported in #1455, #1325 and #1176.

The fix won't be difficult. But none of this can provide reproduction code, so I can't debug to find out what's going wrong.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fUMn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fUy-,fury,2071809214,1558,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T09:12:59Z,2024-04-23T09:12:59Z,Will it still raise execpetion if you disabled asyncCompilation?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fUy-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fVDy,fury,2071810290,1558,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-23T09:13:30Z,2024-04-23T09:13:30Z,It would be really great if you can provide reproduction code. I try to fix it for a long time,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fVDy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fjLo,fury,2071868136,1558,NA,johannschenkl,16838670,Johann Schenkl,johann.schenkl@trinnovative.de,NA,2024-04-23T09:42:42Z,2024-04-23T09:42:42Z,"Hi @chaokunyang, thanks for the quick response. Currently, the issue is only reproducible on a qa machine and only for some users. I was not able to reproduce it by myself. As of yet, it only happend in conjunction with a serialized RuntimeException.
I'll check if disabling asyncCompilation helps and if I can somehow build a test case.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57fjLo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__V4,fury,2080372088,1558,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-27T05:32:57Z,2024-04-27T05:32:57Z,Hi @johannschenkl . Is this issue still persisits?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57__V4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58GOSA,fury,2082006144,1558,NA,johannschenkl,16838670,Johann Schenkl,johann.schenkl@trinnovative.de,NA,2024-04-29T06:56:08Z,2024-04-29T06:56:08Z,"Hi @chaokunyang, unfortunately yes. I'm still trying to get a reproducer working.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58GOSA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58GXKy,fury,2082042546,1558,NA,johannschenkl,16838670,Johann Schenkl,johann.schenkl@trinnovative.de,NA,2024-04-29T07:21:18Z,2024-04-29T07:21:18Z,"We're self-managing Fury in a ThreadLocal, is that the issue, maybe?

```
private static final ThreadLocal<Fury> THE_FURY = ThreadLocal.withInitial(() -> {
        var fury = Fury.builder().withLanguage(Language.JAVA)
                .withRefTracking(true)
                .requireClassRegistration(false)
                .withAsyncCompilation(true)
                .suppressClassRegistrationWarnings(true) // as checker is enabled, see below
                .build();
        fury.getClassResolver().setClassChecker(...);
        return fury;
    });
```
                
I know there's also the ...buildThreadSafeFury/buildThreadLocalFury implementations. But we did not see a way to register a classchecker on them.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58GXKy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58G7Je,fury,2082189918,1558,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-29T08:53:02Z,2024-04-29T08:53:02Z,"This is right, or you can use `org.apache.fury.ThreadLocalFury#ThreadLocalFury`, which let you to set anything in the factory","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58G7Je/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1558,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59kuTp,fury,2106778857,1558,NA,johannschenkl,16838670,Johann Schenkl,johann.schenkl@trinnovative.de,NA,2024-05-13T06:48:58Z,2024-05-13T06:48:58Z,"Hi @chaokunyang, sorry for the late response. After using the provided factory & disabling async compilation, the issue did not show up again. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59kuTp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1564,https://api.github.com/repos/apache/fury/issues/1564,fury,2260972653,1564,【JAVA】deserialize class not found USE withRefTracking(true).requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury()  ,weijiang157152688,16550122,wei,,CLOSED,2024-04-24T10:35:55Z,2024-04-26T08:48:50Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Version: 0.5.0 (built from source)
OS: macOS

### Component(s)

Java

### Minimal reproduce step

```java
package alsc.ele.lpd.dispatch.matrix.service.tt;

import alsc.ele.lpd.dispatch.matrix.service.dto.AssignDetailInfoLog;
import alsc.ele.lpd.dispatch.matrix.service.dto.AssignType;
import alsc.ele.lpd.dispatch.matrix.service.util.FuryUtils;
import me.ele.lpd.dispatch.matrix.score.infra.config.CompressEnum;
import me.ele.lpd.dispatch.matrix.score.infra.utils.CompressObjectUtils;
import me.ele.lpd.dispatch.matrix.score.infra.utils.Lz4Util;
import org.xerial.snappy.Snappy;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;

public class Test {


    public static void main(String[] args) throws IOException {

        // read
        read();

//        write();

    }

    public static void write() throws IOException {
        AssignDetailInfoLog assignDetailInfoLog = new AssignDetailInfoLog();
        assignDetailInfoLog.setType(AssignType.DEFAULT);
        assignDetailInfoLog.setId(""dsa"");
        byte[] data = FuryUtils.serialize(assignDetailInfoLog);
        saveToFile(""test_file"", data);
    }

    public static void read() throws IOException {

        // read
        byte[] data = readFileToBytes(""test_file"");
        FuryUtils.zeroCopyDeserialize(data);

    }

    public static void saveToFile(String fileName, byte[] data) {
        try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
            outputStream.write(data);  // 写入byte[]
            System.out.println(""Data has been written to "" + fileName);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static byte[] readFileToBytes(String filePath) {
        try {
            return Files.readAllBytes(new File(filePath).toPath());
        } catch (Exception e) {
            return null;
        }
    }
}

package alsc.ele.lpd.dispatch.matrix.service.dto;

import lombok.Data;

@Data
public class AssignDetailInfoLog {
    String id;
    AssignType  type;

}


package alsc.ele.lpd.dispatch.matrix.service.dto;

public enum AssignType {
    DEFAULT;
}


package alsc.ele.lpd.dispatch.matrix.service.util;

import org.apache.fury.Fury;
import org.apache.fury.ThreadSafeFury;
import org.apache.fury.config.CompatibleMode;
import org.apache.fury.logging.LoggerFactory;

import java.nio.ByteBuffer;

public class FuryUtils {
    private static final ThreadSafeFury fury;

    public FuryUtils() {
    }

    public static <T> byte[] serialize(T t) {
        return fury.serialize(t);
    }

    public static Object zeroCopyDeserialize(byte[] byteBuffer) {
        return fury.deserialize(byteBuffer);
    }

    public static Object zeroCopyDeserialize(ByteBuffer byteBuffer) {
        return fury.deserialize(byteBuffer);
    }

    static {
        fury = Fury.builder().withRefTracking(true).requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();
        LoggerFactory.disableLogging();
    }
}
```



### What did you expect to see?

deserialize 

### What did you see instead?


After deleting the AssignType file, an error occurred.


Deserialize failed, read objects are: [AssignDetailInfoLog(id=dsa), null]
	at org.apache.fury.Fury.handleReadFailed(Fury.java:788)
	at org.apache.fury.Fury.deserialize(Fury.java:750)
	at org.apache.fury.Fury.deserialize(Fury.java:676)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:130)
	at alsc.ele.lpd.dispatch.matrix.service.util.FuryUtils.zeroCopyDeserialize(FuryUtils.java:21)
	at alsc.ele.lpd.dispatch.matrix.service.tt.Test.main(Test.java:30)
Caused by: java.lang.IllegalStateException: Class alsc.ele.lpd.dispatch.matrix.service.dto.AssignType not found from classloaders [sun.misc.Launcher$AppClassLoader@18b4aac2, sun.misc.Launcher$AppClassLoader@18b4aac2]
	at org.apache.fury.resolver.ClassResolver.loadClass(ClassResolver.java:1688)
	at org.apache.fury.resolver.ClassResolver.loadBytesToClass(ClassResolver.java:1636)

### Anything Else?

deserialize

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1564/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1564,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qeLG,fury,2074731206,1564,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-24T11:32:04Z,2024-04-24T11:32:04Z,"I can run this successfully locally:
![image](https://github.com/apache/incubator-fury/assets/12445254/6276c288-5b31-459c-8cd3-dbfe855cd0d8)

Here is my code:
```java
package org.apache.fury;

import lombok.Data;
import org.apache.fury.config.CompatibleMode;
import org.apache.fury.logging.LoggerFactory;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;

public class Test {
  @Data
  public static class AssignDetailInfoLog {
    String id;
    AssignType  type;

  }



  public enum AssignType {
    DEFAULT;
  }



  public static class FuryUtils {
    private static final ThreadSafeFury fury;

    public FuryUtils() {
    }

    public static <T> byte[] serialize(T t) {
      return fury.serialize(t);
    }

    public static Object zeroCopyDeserialize(byte[] byteBuffer) {
      return fury.deserialize(byteBuffer);
    }

    public static Object zeroCopyDeserialize(ByteBuffer byteBuffer) {
      return fury.deserialize(byteBuffer);
    }

    static {
      fury = Fury.builder().withRefTracking(true).requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();
      LoggerFactory.disableLogging();
    }
  }

  public static void main(String[] args) throws IOException {

    // read
    read();

//        write();

  }

  public static void write() throws IOException {
    AssignDetailInfoLog assignDetailInfoLog = new AssignDetailInfoLog();
    assignDetailInfoLog.setType(AssignType.DEFAULT);
    assignDetailInfoLog.setId(""dsa"");
    byte[] data = FuryUtils.serialize(assignDetailInfoLog);
    saveToFile(""test_file"", data);
  }

  public static void read() throws IOException {
    write();
    // read
    byte[] data = readFileToBytes(""test_file"");
    FuryUtils.zeroCopyDeserialize(data);

  }

  public static void saveToFile(String fileName, byte[] data) {
    try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
      outputStream.write(data);  // 写入byte[]
      System.out.println(""Data has been written to "" + fileName);
    } catch (IOException e) {
      e.printStackTrace();
    }

  }

  public static byte[] readFileToBytes(String filePath) {
    try {
      return Files.readAllBytes(new File(filePath).toPath());
    } catch (Exception e) {
      return null;
    }
  }
}



```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57qeLG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1570,https://api.github.com/repos/apache/fury/issues/1570,fury,2261564045,1570,[java]ThreadLocalFury has performance issues under virtual threads in jdk21,gongziyiyi,26919714,,,OPEN,2024-04-24T15:23:42Z,2024-04-26T05:16:45Z,"## Is your feature request related to a problem? Please describe.
ThreadLocal has performance issues under virtual threads in jdk21

## Describe the solution you'd like
maybe use CarrierThreadLocal ??

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1570/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1570,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57yp1x,fury,2076876145,1570,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-25T10:35:26Z,2024-04-25T10:35:26Z,"Will It create lots of Fury objects? For example, if we have million of virtual threads, will we have millions of Fury object?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc57yp1x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1570,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5741JE,fury,2078495300,1570,NA,gongziyiyi,26919714,,,NA,2024-04-26T02:01:15Z,2024-04-26T02:01:15Z,"@chaokunyang 
Yes. CarrierThreadLocal can fix it, but unfortunately, it has not been leaked for external use and can only be opened with ""--add-opens"" at the moment

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5741JE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1570,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc575ab-,fury,2078648062,1570,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-26T05:16:44Z,2024-04-26T05:16:44Z,"We may need to add a new maven module to fury/java.

And I'm wondering whether can we use ThreadPoolFury, which use an object pool. This may be more friently to virtual thread","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc575ab-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1576,https://api.github.com/repos/apache/fury/issues/1576,fury,2265125848,1576,[Java] Memory issue about FuryInputStream,yihwang6,139317744,,,OPEN,2024-04-26T07:19:56Z,2024-04-26T12:13:22Z,"In #1551, I noticed that a growBuffer method was added to FuryInputStream, which continuously increases the size of the buffer. This operation may potentially give rise to memory-related concerns due to the large buffer size. It might be better to consider implementing the buffered streaming reading with a fixed-size buffer.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1576/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1576,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc576CTv,fury,2078811375,1576,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-26T07:39:26Z,2024-04-26T07:39:26Z,`org.apache.fury.io.FuryInputStream#shrinkBuffer` will be invoked after the deserialziation finished,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc576CTv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1576,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc576KqM,fury,2078845580,1576,NA,yihwang6,139317744,,,NA,2024-04-26T08:02:37Z,2024-04-26T08:02:37Z,"Ok, but there may still be a large buffer size when deserializing a large object.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc576KqM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1576,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc577xyN,fury,2079267981,1576,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-26T12:12:58Z,2024-04-26T12:12:58Z,"Yes, that is possible. We don't release buffer before we finished the deserialization. One case I can imagine is that when buffer close to int max size, we can't multiple 1.5.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc577xyN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1576,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc577x8W,fury,2079268630,1576,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-26T12:13:21Z,2024-04-26T12:13:21Z,Would you like to help optimize this?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc577x8W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1577,https://api.github.com/repos/apache/fury/issues/1577,fury,2265202473,1577,serialize ByteBuffer report error,stardustman,22998204,stardust,aoyunyoung@gmail.com,CLOSED,2024-04-26T08:03:37Z,2024-04-26T16:19:13Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

1. jdk1.8.0_241
2. fury v0.4.1

### Component(s)

Java

### Minimal reproduce step

test code as follows:

```java
public class FurySerde {

    // Note that Fury instances should be reused between
    // multiple serializations of different objects.
    private static final ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
        Fury f = Fury.builder()
                .withLanguage(Language.JAVA)
                .withClassLoader(classLoader)
                .requireClassRegistration(false)
                .build();
        return f;
    });

    public static byte[] encoder(Object object) {
        return fury.serialize(object);
    }

    public static <T> T decoder(byte[] bytes) {
        return (T) fury.deserialize(bytes);
    }

    public static void main(String[] args) {
        byte len = 10;
        ByteBuffer byteBuffer = ByteBuffer.allocate(len);
        for (int i = 0; i < len; i++) {
            byteBuffer.put((byte) i);
        }
        System.out.println(FurySerde.encoder(byteBuffer).length);
    }

}
```


### What did you expect to see?

get the size of serialization byte array

### What did you see instead?

Exception in thread ""main"" java.lang.NoSuchMethodError: java.nio.ByteBuffer.position(I)Ljava/nio/ByteBuffer;
	at io.fury.memory.MemoryBuffer.put(MemoryBuffer.java:404)
	at io.fury.memory.MemoryBuffer.write(MemoryBuffer.java:1935)
	at io.fury.memory.MemoryBuffer.write(MemoryBuffer.java:1928)
	at io.fury.serializer.BufferObject$ByteBufferBufferObject.writeTo(BufferObject.java:59)
	at io.fury.Fury.writeBufferObject(Fury.java:571)
	at io.fury.serializer.BufferSerializers$ByteBufferSerializer.write(BufferSerializers.java:45)
	at io.fury.serializer.BufferSerializers$ByteBufferSerializer.write(BufferSerializers.java:36)
	at io.fury.Fury.writeData(Fury.java:551)
	at io.fury.Fury.writeRef(Fury.java:344)
	at io.fury.Fury.write(Fury.java:319)
	at io.fury.Fury.serialize(Fury.java:255)
	at io.fury.Fury.serialize(Fury.java:221)
	at io.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:67)
	at benchmarks.serde.FurySerde.encoder(FurySerde.java:37)
	at benchmarks.serde.FurySerde.main(FurySerde.java:51)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1577/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/1588,fury,2266856185,1588,Remove commented content in git  commit message,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-04-27T05:53:51Z,2024-07-09T14:49:42Z,"## Is your feature request related to a problem? Please describe.
Currently there are many comments contents in PR.
```
<!--
**Thanks for contributing to Fury.**

**If this is your first time opening a PR on fury, you can refer to [CONTRIBUTING.md](https://github.com/apache/incubator-fury/blob/main/CONTRIBUTING.md).**

Contribution Checklist

    - The **Apache Fury (incubating)** community has restrictions on the naming of pr titles. You can also find instructions in [CONTRIBUTING.md](https://github.com/apache/incubator-fury/blob/main/CONTRIBUTING.md).

    - Fury has a strong focus on performance. If the PR you submit will have an impact on performance, please benchmark it first and provide the benchmark result here.
-->

## What does this PR do?

<!-- Describe the purpose of this PR. -->


## Related issues

<!--
Is there any related issue? Please attach here.

- #xxxx0
- #xxxx1
- #xxxx2
-->


## Does this PR introduce any user-facing change?

<!--
If any user-facing interface changes, please [open an issue](https://github.com/apache/incubator-fury/issues/new/choose) describing the need to do so and update the document if necessary.
-->

- [ ] Does this PR introduce any public API change?
- [ ] Does this PR introduce any binary protocol compatibility change?


## Benchmark

<!--
When the PR has an impact on performance (if you don't know whether the PR will have an impact on performance, you can submit the PR first, and if it will have impact on performance, the code reviewer will explain it), be sure to attach a benchmark data here.
-->

```

If contributor doesn't remove it, it will be included in the commited message, which make the git history kinds of messy.

## Describe the solution you'd like
We should remove such conents automatically before merge PR

## Additional context
#1477 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1588/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DnLy5,fury,2208087225,1588,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-04T04:13:27Z,2024-07-04T04:13:27Z,"That's strange. Do you copy the PR body into the merge description when confirming a merge? If so, I think we can modify the PR raw text body automatically after people create the PR. I found a GitHub Actions plugin: [Update PR Description](https://github.com/marketplace/actions/update-pr-description) that works as follows.
![image](https://github.com/apache/fury/assets/61675635/23d50839-ac6b-40ce-b1c0-ca4372178725)
and it works on my demo
![image](https://github.com/apache/fury/assets/61675635/78ad863e-7263-435b-8991-b883530858cc)
However, for this issue, it might be necessary to create a custom action plugin. I'd like to take this on, but I'm not very familiar with writing action plugins. Could you allow me a few days to study this and then we can continue the discussion?
 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DnLy5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Dot_0,fury,2208489460,1588,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-04T09:11:20Z,2024-07-04T09:11:20Z,"Of course, feel free to study this at your own pace. This is not urgent","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Dot_0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D1NvS,fury,2211765202,1588,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-06T13:08:56Z,2024-07-06T13:08:56Z,"I have created a github action: [Remove markdown comments in PR](https://github.com/marketplace/actions/remove-markdown-comments-in-pr), detail usage are provided in its README. But if `<!-- comment -->` in PR body `code blocks` , it will also be removed.
![image](https://github.com/apache/fury/assets/61675635/7ec2cd8d-3bee-44ba-8ed9-b65a2f842d30)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D1NvS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ELM3q,fury,2217528810,1588,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-09T12:26:11Z,2024-07-09T12:26:11Z,"I have tested it in my own copied repository, and it is effective, you can see in https://github.com/urlyy/fury_action_test/pull/1. But I don't know if you are satisfied with this effect, and whether submitting a PR about modifying the project's CI/CD is dangerous. Looking forward to your reply.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ELM3q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EMbBr,fury,2217848939,1588,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-09T14:11:03Z,2024-07-09T14:11:03Z,"I will take a look later. It needs a token, we need to ensure it's safe. I'm not familiar with github action. 
BTW, this is a common issue, is there any github action which has implemented this feature?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EMbBr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1588,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EMcfH,fury,2217854919,1588,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-09T14:13:47Z,2024-07-09T14:13:47Z,"> I will take a look later. It needs a token, we need to ensure it's safe. I'm not familiar with github action. BTW, this is a common issue, is there any github action which has implemented this feature?

Sorry, I didn't spend much time searching to see if relavant github action exists. I'll go check it out now.

 And if you want to know the process of my action ,only need to look at the `index.js` and `action.yml`, the `dist` directory is generated by `index.js` and something else, I learned at https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action#commit-tag-and-push-your-action-to-github. 

And for https://github.com/urlyy/fury_action_test/pull/1 , I just add a yaml file at https://github.com/urlyy/fury_action_test/blob/main/.github/workflows/remove-pr-comment.yaml","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EMcfH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1593,https://api.github.com/repos/apache/fury/issues/1593,fury,2268025267,1593,[Java]Compatible with lower versions of guava,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,CLOSED,2024-04-29T02:59:16Z,2024-04-29T05:00:10Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

master 

### Component(s)

Java

### Minimal reproduce step

dependency fury and guava version 18

### What did you expect to see?

run without error

### What did you see instead?

Caused by: java.lang.NoSuchMethodError: com.google.common.collect.ImmutableBiMap$Builder: method 'void <init>(int)' not found

### Anything Else?

with guava 18, `ImmutableMap.Builder` only `Builder()` contructor. 
builderCtrCache should support ` lookup.findConstructor(builderClass, MethodType.methodType(void.class));` when throw excption.

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1593/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1595,https://api.github.com/repos/apache/fury/issues/1595,fury,2268314936,1595,[Java] Support userContext for user custom global data,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,OPEN,2024-04-29T07:24:53Z,2024-04-29T09:07:13Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

when I want compress some `Map<String, String> map`,  it have lots of same string key, I want make user serializer contain a map key dict suche as `Map<String, Integer> dict` and I can just serializer key as int, then write dict data after metaContext.
but fury cant costum metaContext to save user global data.

btw, `stringRefIgnored` open will take slow serilizer time.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

maybe we can support user context with open interface like interface `userContext` with method `wirteData(MemoryBuffer buffer)` and `write(MemoryBuffer buffer)` and `constructr(Fury fury)`. we can take it just like `fury.registerUserContext(""name"", CompressStringDictMapContext.class)`.  we can take userContext like `fury.getUserContext(""name"")`
when after wirte metaContext, wirte all register userContext data by register order, same to read.

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->

I make a simple compress map version in my local project, so I think a userContext can take better flexibility

thanks","{""url"": ""https://api.github.com/repos/apache/fury/issues/1595/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1595,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58G6Vh,fury,2082186593,1595,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-04-29T08:51:09Z,2024-04-29T08:51:09Z,"Hi, Fury has a `SerializationContext` class. Could we use this class to implement this feature?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58G6Vh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1595,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58HCJR,fury,2082218577,1595,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-04-29T09:07:13Z,2024-04-29T09:07:13Z,"sure, I will take a simple code for this feature. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc58HCJR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1600,https://api.github.com/repos/apache/fury/issues/1600,fury,2279223948,1600,[Upgrade to Fury 0.5] class org.apache.fury.serializer.UnexistedClassSerializers$UnexistedSkipClass cannot be cast to class,cdxf,6419729,,,CLOSED,2024-05-04T22:34:22Z,2024-05-20T06:56:47Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0

### Component(s)

Java

### Minimal reproduce step

I have the following code:
```
//Fury Configuration
    public static ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {
        Fury f = Fury.builder()
                .requireClassRegistration(false)
                .withRefTracking(true)
                .withAsyncCompilation(true)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .withJdkClassSerializableCheck(false)
                .withLanguage(Language.JAVA).withClassLoader(classLoader).build();
        f.register(CircularFifoQueue.class);

// Function 
public T get(String key) {
            try {
                return (T) fury.deserialize(bytes);
            } catch (Exception ex) {
                logger.error(""Error deserializing object"", ex);
                return null;
            }
}
... later

        Queue<Long> result = get(...);

```




### What did you expect to see?

Fury should throw Exception (which is what I am expecting when upgrading to new version and Fury failed to deserialize the byte[] from the old version) instead of silently deserialize the bytes into UnexistedClassSerializers$UnexistedSkipClass

### What did you see instead?

It works fine in Fury 0.4.1, but since I upgraded to 0.5.0, my app throws the following errors:

> java.lang.ClassCastException: class org.apache.fury.serializer.UnexistedClassSerializers$UnexistedSkipClass cannot be cast to class java.util.Queue (org.apache.fury.serializer.UnexistedClassSerializers$UnexistedSkipClass is in unnamed module of loader org.springframework.boot.loader.launch.LaunchedClassLoader @1d56ce6a; java.util.Queue is in module java.base of loader 'bootstrap')

### Anything Else?

If it is expected behavior, where should I look at in the documentation.
What should I do instead? Is there any configuration I can change to make it throw Exception instead of returning UnexistedSkipClass

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1600/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1600,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc582Lp7,fury,2094578299,1600,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-05T04:34:36Z,2024-05-05T04:34:36Z,"Hi @cdxf , thanks for reporting this issue. It seems that you use newer version of Fury to deserialize data from old version Fury. Fury read a class id for `UnexistedSkipClass`, so it throw such exception. 

Fury registered `UnexistedSkipClass` https://github.com/apache/incubator-fury/blob/48361cb7b7c13e703f0d5e1a10d5d104c9cd78a2/java/fury-core/src/main/java/org/apache/fury/resolver/ClassResolver.java#L349 
This registered class id may be used by other class in older Fury, it's possible to read it as `UnexistedSkipClass`, which is the error you see. I can submit a PR to skip register `UnexistedSkipClass`, but if you use newer Fury to deserialize older Fury, you will still see other strange error. Currently we didn' provide binary compatibility. Such compatibility will be provided in the future, but not now.  Could you try https://fury.apache.org/docs/guide/java_object_graph_guide#upgrade-fury to upgrade Fury?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc582Lp7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1604,https://api.github.com/repos/apache/fury/issues/1604,fury,2279980885,1604,No type mapping from class java.lang.String to class java.lang.String,galaxyxym,84667613,,,CLOSED,2024-05-06T04:07:18Z,2024-05-06T16:29:37Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

fury: 0.5.0
os: linux
jdk: openjdk17
fastjson: 1.2.70

### Component(s)

Java

### Minimal reproduce step

use fury.serialize(output, obj); in dubbo spi

```java
public class TestMain {

    static ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withRefTracking(true)
            .registerGuavaTypes(false)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .buildThreadSafeFury();

    public static void main(String[] args) {
        DemoResponse resp = new DemoResponse();
        byte[] serialize = fury.serialize(resp);
        System.out.println(""size:"" + serialize.length);
    }
}


import com.alibaba.fastjson.JSONObject;
@Data
public class DemoResponse {
    private JSONObject filterJson;

    public DemoResponse() {

    }
}

```

### What did you expect to see?

serialize successfully

### What did you see instead?

```
at org.apache.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:62)
	at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:967)
	at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:131)
	at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:962)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:885)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:782)
	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1168)
	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1107)
	at org.apache.fury.Fury.write(Fury.java:312)
	at org.apache.fury.Fury.serialize(Fury.java:248)
	at org.apache.fury.Fury.lambda$serialize$0(Fury.java:264)
	at org.apache.fury.Fury.serializeToStream(Fury.java:1236)
	at org.apache.fury.Fury.serialize(Fury.java:264)
```

```
Caused by: java.lang.IllegalArgumentException: No type mapping from class java.lang.String to class java.lang.String
	at org.apache.fury.reflect.TypeRef.populateTypeMappings(TypeRef.java:508)
	at org.apache.fury.reflect.TypeRef.populateTypeMappings(TypeRef.java:499)
	at org.apache.fury.reflect.TypeRef.getSubtype(TypeRef.java:458)
	at org.apache.fury.type.TypeUtils.mapOf(TypeUtils.java:513)
	at org.apache.fury.builder.CompatibleCodecBuilder.createDescriptor(CompatibleCodecBuilder.java:149)
	at org.apache.fury.builder.CompatibleCodecBuilder.lambda$buildEncodeExpression$a78febb8$4(CompatibleCodecBuilder.java:265)
	at org.apache.fury.codegen.ExpressionOptimizer.invokeGenerated(ExpressionOptimizer.java:49)
	at org.apache.fury.builder.CompatibleCodecBuilder.lambda$buildEncodeExpression$4(CompatibleCodecBuilder.java:254)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.apache.fury.builder.CompatibleCodecBuilder.buildEncodeExpression(CompatibleCodecBuilder.java:251)
	at org.apache.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:205)
	at org.apache.fury.codegen.CompileUnit.getCode(CompileUnit.java:53)
	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:81)
	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
	at org.apache.fury.codegen.CodeGenerator.compile(CodeGenerator.java:145)
	at org.apache.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:110)
	at org.apache.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:65)
	at org.apache.fury.builder.CodecUtils.loadOrGenCompatibleCodecClass(CodecUtils.java:57)
	at org.apache.fury.serializer.CodegenSerializer.loadCompatibleCodegenSerializer(CodegenSerializer.java:59)
	... 37 more
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1604/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1607,https://api.github.com/repos/apache/fury/issues/1607,fury,2281080779,1607,[All] Clear serialization language flag ,LiangliangSui,116876207,,,CLOSED,2024-05-06T14:57:03Z,2024-05-08T15:50:58Z,"## Is your feature request related to a problem? Please describe.
The current Fury implementation (Java/golang/javascript, etc.), the language used for serialization will be added to the Fury Header(Contradicts the current xlang_spec).

Fury Header looks like the following format.

```
|    2 bytes   |     4 bits    | 1 bit | 1 bit | 1 bit  | 1 bit |  1 byte  |          optional 4 bytes              |
+--------------+---------------+-------+-------+--------+-------+----------+-------------------------------------+
| magic number | reserved bits |  oob  | xlang | endian |  null | language | unsigned int for meta start offset |
```

code show as below

![image](https://github.com/apache/incubator-fury/assets/116876207/2e2c63b5-d857-41bf-af8a-b679ef484858)

![image](https://github.com/apache/incubator-fury/assets/116876207/9c7d6b06-5ab7-4915-9dc1-c4eee5b6639b)


## Describe the solution you'd like
Do we need to remove these redundant language identifiers?

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1607/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1607,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588glR,fury,2096236881,1607,NA,LiangliangSui,116876207,,,NA,2024-05-06T14:57:30Z,2024-05-06T14:57:30Z,cc @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588glR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1607,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588zLQ,fury,2096313040,1607,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-06T15:33:57Z,2024-05-06T15:33:57Z,"If the deserialization knows the encoding language, it may be able to do better encoding. For example, if sender is golang, and receiver is javascript, golang can use utf16 as the encoding instead of native utf8, then javascript deserialization will be faster.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588zLQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1607,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588ze7,fury,2096314299,1607,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-06T15:34:38Z,2024-05-06T15:34:38Z,"I think we can keep this currently, and add the design choice to the spec","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc588ze7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1607,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc589H5n,fury,2096397927,1607,NA,LiangliangSui,116876207,,,NA,2024-05-06T16:03:39Z,2024-05-06T16:03:39Z,"Yes, we can also keep it and add an explanation in xlang_spec. This will create an extra byte in the Fury Header. I'll update the spec later","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc589H5n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1610,https://api.github.com/repos/apache/fury/issues/1610,fury,2282813410,1610,Upgrade dubbo-serialization-fury fury-core dependency to 0.5.0,huisman6,10751595,,,CLOSED,2024-05-07T10:00:18Z,2024-05-08T01:26:05Z,"We are going to adopt fury as the default implementation of Dubbo serialization in the production environment, and expect to upgrade [dubbo-serialization-fury](https://github.com/apache/dubbo-spi-extensions/tree/master/dubbo-serialization-extensions/dubbo-serialization-fury) dependency fury-core to 0.5.0. Starting from 0.5.x, the Java package name has been adjusted from io.fury to org.apache.fury, which can be considered stable.

Is there any upgrade plan recently? We expect to start testing in June this year. If there is not enough time, I will use the lower version first.

Thanks.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1610,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ECly,fury,2098211186,1610,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-07T11:44:13Z,2024-05-07T11:44:13Z,"We plan to upgrade [dubbo-serialization-fury](https://github.com/apache/dubbo-spi-extensions/tree/master/dubbo-serialization-extensions/dubbo-serialization-fury) next week.

The 0.5.0 is just released, we'd like to get some feedbacks before upgrading downstream frameworks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ECly/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1610,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59JMcS,fury,2099562258,1610,NA,huisman6,10751595,,,NA,2024-05-08T01:25:35Z,2024-05-08T01:25:35Z,Got it . We should have enough time to wait for the new version to be released. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59JMcS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1615,https://api.github.com/repos/apache/fury/issues/1615,fury,2287311694,1615,"In asyncCompilation to true, under the condition of it. The ""it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap"" serialization failure",foxmia,7445011,,,CLOSED,2024-05-09T09:44:10Z,2024-05-09T14:49:18Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0、0.4.1

### Component(s)

Java

### Minimal reproduce step

Serialization fails only if `asyncCompilation` is `true`, there is no problem if `asyncCompilation` is `false`

```java
@Data
public class Object2ObjectOpenHashMapTest {
    Map<String, String> ext = new Object2ObjectOpenHashMap<>();
}
```
```java
ThreadSafeFury fury = Fury.builder()
        .requireClassRegistration(false)
        .withCompatibleMode(CompatibleMode.COMPATIBLE)
        .withAsyncCompilation(true)
        .buildThreadSafeFury();

Object2ObjectOpenHashMapTest object2ObjectOpenHashMapTest = new Object2ObjectOpenHashMapTest();
byte[] bytes = fury.serializeJavaObject(object2ObjectOpenHashMapTest);
```
The error message is as follows

```
Exception in thread ""main"" java.lang.ClassCastException: class org.apache.fury.serializer.collection.MapSerializers$JDKCompatibleMapSerializer cannot be cast to class org.apache.fury.serializer.collection.MapSerializer (org.apache.fury.serializer.collection.MapSerializers$JDKCompatibleMapSerializer and org.apache.fury.serializer.collection.MapSerializer are in unnamed module of loader 'app')
	at org.apache.fury.serializer.CompatibleSerializer.writeMapKVFinal(CompatibleSerializer.java:258)
	at org.apache.fury.serializer.CompatibleSerializer.writeSeparateFieldValue(CompatibleSerializer.java:226)
	at org.apache.fury.serializer.CompatibleSerializer.readAndWriteFieldValue(CompatibleSerializer.java:155)
	at org.apache.fury.serializer.CompatibleSerializer.write(CompatibleSerializer.java:110)
	at org.apache.fury.Fury.writeData(Fury.java:550)
	at org.apache.fury.Fury.serializeJavaObject(Fury.java:1050)
	at org.apache.fury.Fury.serializeJavaObject(Fury.java:1025)
	at org.apache.fury.ThreadLocalFury.serializeJavaObject(ThreadLocalFury.java:180)
```

### What did you expect to see?

expect it to work.

### What did you see instead?

class org.apache.fury.serializer.collection.MapSerializers$JDKCompatibleMapSerializer cannot be cast to class org.apache.fury.serializer.collection.MapSerializer (org.apache.fury.serializer.collection.MapSerializers$JDKCompatibleMapSerializer and org.apache.fury.serializer.collection.MapSerializer are in unnamed module of loader 'app')

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1615/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1615,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59TwB-,fury,2102329470,1615,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-09T09:49:15Z,2024-05-09T09:49:15Z,Hi @foxmia  could you provide code for Object2ObjectOpenHashMap?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59TwB-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1615,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59T9qZ,fury,2102385305,1615,NA,foxmia,7445011,,,NA,2024-05-09T10:21:28Z,2024-05-09T10:21:28Z,"> Hi @foxmia could you provide code for Object2ObjectOpenHashMap?

This is dependency
```xml
<dependency>
    <groupId>it.unimi.dsi</groupId>
    <artifactId>fastutil</artifactId>
    <version>8.5.6</version>
</dependency>
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59T9qZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/1619,fury,2287859503,1619,[Java|Go] Check string is ascii before using meta string encoding,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-05-09T14:52:11Z,2024-05-14T11:34:41Z,"## Is your feature request related to a problem? Please describe.
In #1514 and #1566 , we compress every char using 5/6 bytes. But we didn't check the encoding is ascii. In UTF-8, some byte may be in range of ascii char, but some not. We may take a utf-8 string as a meta string by accident?

## Describe the solution you'd like
Check string is ascii before using meta string encoding

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1619/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59Yhu6,fury,2103581626,1619,NA,jasonmokk,106209849,Jason Mok,,NA,2024-05-09T23:08:55Z,2024-05-09T23:08:55Z,"Hi @chaokunyang I'd like to contribute to Apache Fury, can you please assign this issue to me?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59Yhu6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59Y_pq,fury,2103704170,1619,NA,LiangliangSui,116876207,,,NA,2024-05-10T01:48:48Z,2024-05-10T01:48:48Z,Great! thanks for the willingness to contribute to Fury.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59Y_pq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59awDB,fury,2104164545,1619,NA,LiangliangSui,116876207,,,NA,2024-05-10T08:20:03Z,2024-05-10T08:20:03Z,"```java
// org/apache/fury/meta/MetaStringEncoder.java
public MetaString encode(String input) {
  if (input.isEmpty()) {
    return new MetaString(input, Encoding.UTF_8, specialChar1, specialChar2, new byte[0]);
  }
  Encoding encoding = computeEncoding(input);
  return encode(input, encoding);
}
```

Could we judge here whether the `input` is all ASCII encoded? If not, just return UTF-8 encoded `MetaString` directly, so that we can save time on `computeEncoding` and `encode`.

WDYT @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59awDB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59a0HK,fury,2104181194,1619,NA,LiangliangSui,116876207,,,NA,2024-05-10T08:30:27Z,2024-05-10T08:30:27Z,"In addition, we also need to add unit tests to cover this issue","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59a0HK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59fUXk,fury,2105361892,1619,NA,jasonmokk,106209849,Jason Mok,,NA,2024-05-10T22:57:23Z,2024-05-10T22:57:23Z,"@LiangliangSui Thanks for bringing that up, can I submit another PR to correct that/add unit tests? I also think it would be optimal to have the ASCII check early and just directly return a UTF-8 encoded `MetaString`.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59fUXk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1619,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59kyKf,fury,2106794655,1619,NA,LiangliangSui,116876207,,,NA,2024-05-13T06:58:15Z,2024-05-13T06:58:15Z,"> can I submit another PR to correct that/add unit tests?

Sure, that is great!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59kyKf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1621,https://api.github.com/repos/apache/fury/issues/1621,fury,2289146524,1621,"feat(java): Enumerating new values, deserializing without any new enumerations, resulting in the array being out of bounds and unable to parse properly",weijiang157152688,16550122,wei,,CLOSED,2024-05-10T07:33:17Z,2024-05-11T06:27:34Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0

### Component(s)

Java

### Minimal reproduce step

Serialization has more enumeration content than deserialization, resulting in the deserialized array being out of bounds

### What did you expect to see?

Serialization has more enumeration content than deserialization, resulting in deserialization exception enumeration returning null

### What did you see instead?

...

### Anything Else?

...

### Are you willing to submit a PR?

- [x] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1621/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1627,https://api.github.com/repos/apache/fury/issues/1627,fury,2292222154,1627,[Java] Serialization error for java inner class,chao89619,17587916,,,OPEN,2024-05-13T08:56:18Z,2024-05-13T08:58:43Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

使用的 fury0.1.0版本， jdk11

### Component(s)

Java

### Minimal reproduce step

有内部类(枚举)的情况下序列化出错

### What did you expect to see?

序列化成功

### What did you see instead?

报错信息
java.lang.IllegalArgumentException: Expect jit serializer but got class io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer
	at io.fury.util.Utils.checkArgument(Utils.java:55)
	at io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer.getOrCreateGeneratedSerializer(CodegenSerializer.java:96)
	at io.fury.serializer.CodegenSerializer$LazyInitBeanSerializer.write(CodegenSerializer.java:76)
	at ele.biz.growth.task.core.facade.model.mission.admin.mission.MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.writeClassAndObject1$(MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.java:170)
	at ele.biz.growth.task.core.facade.model.mission.admin.mission.MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.writeField2$(MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.java:178)
	at ele.biz.growth.task.core.facade.model.mission.admin.mission.MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.writeSeparateTypesHashFields$(MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.java:188)
	at ele.biz.growth.task.core.facade.model.mission.admin.mission.MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.write(MissionActionFuryRefCompatibleCodec_1488540289_1791280119_678690039.java:315)
	at ele.biz.growth.task.core.service.model.MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.writeClassAndObject10$(MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.java:729)
	at ele.biz.growth.task.core.service.model.MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.writeField12$(MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.java:737)
	at ele.biz.growth.task.core.service.model.MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.writeSeparateTypesHashFields1$(MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.java:977)
	at ele.biz.growth.task.core.service.model.MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.write(MissionFuryRefCompatibleCodec_1488540289_1791280119_2139685353.java:2071)
	at io.fury.Fury.writeData(Fury.java:483)
	at io.fury.Fury.writeRef(Fury.java:283)
	at io.fury.Fury.serialize(Fury.java:233)
	at io.fury.Fury.serialize(Fury.java:193)
	at io.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:64)
	at ele.biz.growth.task.core.service.mission.service.MissionNewConfigService.serialize(MissionNewConfigService.java:138)
	at ele.biz.growth.task.core.service.mission.service.MissionNewConfigService.putRedisData(MissionNewConfigService.java:196)
	at ele.biz.growth.task.core.service.mission.service.MissionNewConfigService.refreshOnlineMissonId(MissionNewConfigService.java:443)
	at ele.biz.growth.task.core.service.mission.service.MissionNewConfigService$$FastClassBySpringCGLIB$$3b5509e9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:736)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:84)
	at ele.biz.growth.task.core.service.aop.PreLogAspect.around(PreLogAspect.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor1029.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:671)
	at ele.biz.growth.task.core.service.mission.service.MissionNewConfigService$$EnhancerBySpringCGLIB$$ce1f2123.refreshOnlineMissonId(<generated>)
	at ele.biz.growth.task.core.service.mission.service.MissionService.useMissionCopy(MissionService.java:2100)
	at ele.biz.growth.task.core.service.mission.service.MissionService$$FastClassBySpringCGLIB$$d8b0935f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:736)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:84)
	at ele.biz.growth.task.core.service.aop.PreLogAspect.around(PreLogAspect.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor1029.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:283)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:671)
	at ele.biz.growth.task.core.service.mission.service.MissionService$$EnhancerBySpringCGLIB$$8ca8eff.useMissionCopy(<generated>)
	at ele.biz.growth.task.core.service.admin.controller.MissionAdminServiceImpl.controllMission(MissionAdminServiceImpl.java:899)
	at ele.biz.growth.task.core.service.admin.controller.MissionAdminServiceImpl$$FastClassBySpringCGLIB$$b11096da.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:736)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:84)
	at ele.biz.growth.task.core.service.aop.PreLogAspect.around(PreLogAspect.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor1029.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:671)
	at ele.biz.growth.task.core.service.admin.controller.MissionAdminServiceImpl$$EnhancerBySpringCGLIB$$326a6bad.controllMission(<generated>)
	at ele.biz.growth.task.core.facade.api.MissionAdminServiceDubboWrap16.invokeMethod(MissionAdminServiceDubboWrap16.java)
	at org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:71)
	at org.apache.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:99)
	at org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:55)
	at org.apache.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56)
	at org.apache.dubbo.rpc.filter.ClassLoaderCallbackFilter.invoke(ClassLoaderCallbackFilter.java:38)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.common.filter.BidirectionServerResponseFilter.invoke(BidirectionServerResponseFilter.java:19)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.filter.InvocationHandlerWrapper.invoke(InvocationHandlerWrapper.java:32)
	at com.taobao.uic.common.hsf.UICHSFProviderFilter.invoke(UICHSFProviderFilter.java:35)
	at com.taobao.hsf.filter.Dubbo2HSFFilterWrapper.invoke(Dubbo2HSFFilterWrapper.java:63)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.filter.InvocationHandlerWrapper.invoke(InvocationHandlerWrapper.java:32)
	at com.alibaba.alsc.waimai.common.core.monitor.check.hsf.HsfProviderMonitorCheckFilter.invoke(HsfProviderMonitorCheckFilter.java:63)
	at com.taobao.hsf.filter.Dubbo2HSFFilterWrapper.invoke(Dubbo2HSFFilterWrapper.java:63)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at me.ele.jarch.hsf.filter.EtraceServerFilter.invoke(EtraceServerFilter.java:90)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.filter.InvocationHandlerWrapper.invoke(InvocationHandlerWrapper.java:32)
	at com.alibaba.reactive.backpressure.hsf.ConcurrentLimitsServerFilter.invoke(ConcurrentLimitsServerFilter.java:102)
	at com.taobao.hsf.filter.Dubbo2HSFFilterWrapper.invoke(Dubbo2HSFFilterWrapper.java:63)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.filter.InvocationHandlerWrapper.invoke(InvocationHandlerWrapper.java:32)
	at com.alibaba.reactive.backpressure.hsf.ConcurrentLimitsServerFilter.invoke(ConcurrentLimitsServerFilter.java:102)
	at com.taobao.hsf.filter.Dubbo2HSFFilterWrapper.invoke(Dubbo2HSFFilterWrapper.java:63)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at me.ele.jarch.hsf.filter.EleContextCompatibleFilter.invoke(EleContextCompatibleFilter.java:59)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.msha.bridge.rpc.hsf3.unit.MshaProviderServerFilter.invoke(MshaProviderServerFilter.java:102)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.plugins.octopus.OctopusServerFilter.invoke(OctopusServerFilter.java:65)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.region.service.impl.RegionServerFilter.invoke(RegionServerFilter.java:40)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.spas.dubbo.SpasServerFilter.invoke(SpasServerFilter.java:120)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.plugins.txc.TXCServerFilter.invoke(TXCServerFilter.java:33)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.tps.component.TPSServerFilter.invoke(TPSServerFilter.java:61)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.invocation.stats.InvocationStatsServerFilter.invoke(InvocationStatsServerFilter.java:57)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.monitor.log.filter.MonitorLogServerFilter.invoke(MonitorLogServerFilter.java:69)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.plugins.eagleeye.EagleEyeServerFilter.invoke(EagleEyeServerFilter.java:65)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.rpc.server.MethodAbsenceFilter.invoke(MethodAbsenceFilter.java:44)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.top.TopServerFilter.invoke(TopServerFilter.java:101)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.common.filter.BidirectionServerRequestFilter.invoke(BidirectionServerRequestFilter.java:20)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.common.filter.CommonServerFilter.invoke(CommonServerFilter.java:47)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.debug.DebugServerFilter.invoke(DebugServerFilter.java:60)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.invocation.HSFExceptionFilter.invoke(HSFExceptionFilter.java:23)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:99)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker.invoke(Invoker.java:55)
	at com.alibaba.csp.sentinel.adapter.dubbo.SentinelDubboProviderFilter.invoke(SentinelDubboProviderFilter.java:69)
	at com.alibaba.dubbo.rpc.Filter.invoke(Filter.java:29)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:46)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:131)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.auth.filter.ProviderAuthFilter.invoke(ProviderAuthFilter.java:53)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.context.RPCContextServerFilter.invoke(RPCContextServerFilter.java:43)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.context.DubboRPCContextServerFilter.invoke(DubboRPCContextServerFilter.java:32)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.invocation.ObjectAttachmentConvertServerFilter.invoke(ObjectAttachmentConvertServerFilter.java:39)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.rpc.generic.GenericInvocationServerFilter.invoke(GenericInvocationServerFilter.java:141)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:54)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:41)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.invocation.LocalServerFilter.invoke(LocalServerFilter.java:43)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.plugins.eagleeye.EagleEyeServerBeforeFilter.invoke(EagleEyeServerBeforeFilter.java:21)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.common.filter.ParamConvertServerFilter.invoke(ParamConvertServerFilter.java:38)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at org.apache.dubbo.rpc.filter.ProfilerServerFilter.invoke(ProfilerServerFilter.java:58)
	at org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode.invoke(FilterChainBuilder.java:93)
	at com.taobao.hsf.rpc.HSFRequestProcessor.handleRequest(HSFRequestProcessor.java:72)
	at com.taobao.hsf.io.netty.http.HttpServerHandler.lambda$process$0(HttpServerHandler.java:214)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.dubbo.common.threadlocal.InternalRunnable.run(InternalRunnable.java:41)
	at java.base/java.lang.Thread.run(Thread.java:991)

### Anything Else?

public class A extends B {
//当有内部枚举类的情况下就出错了
    private VisitType visitType;

    @AllArgsConstructor
    enum VisitType {
        H5(""目标页为h5""),
        NATIVE(""目标页为native"");
        @NonNull
        String desc;
    }
   
    }
序列化出错的代码

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1627/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1627,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59lp3g,fury,2107022816,1627,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-13T08:58:41Z,2024-05-13T08:58:41Z,"Hi @chao89619 , thanks for reporting this issue could you use fury 0.5.0 instead?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59lp3g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1629,https://api.github.com/repos/apache/fury/issues/1629,fury,2294206405,1629,JSONObject Enum key searializer fail java.lang.ClassCastException:,weijiang157152688,16550122,wei,,CLOSED,2024-05-14T02:18:16Z,2024-05-15T06:14:27Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step

public enum BlackoutTakerSourceEnum {
  USER,
  RISK_CONTROL,
  MERCHANT,
  SUSPECTED_ZOMBIE_BLACKOUT;

  private BlackoutTakerSourceEnum() {
  }
}


 public void test() {
   ThreadSafeFury fury = Fury.builder()
       .withRefTracking(true).requireClassRegistration(false).withDeserializeUnexistedClass(true).withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();
    Map<BlackoutTakerSourceEnum, List<Long>> data = JSONObject.parseObject(""{\""RISK_CONTROL\"":[]}"", new TypeReference<Map<BlackoutTakerSourceEnum, List<Long>>>() {                         });
    fury.deserialize(fury.serialize(data));

  }

### What did you expect to see?

searializer succec

### What did you see instead?

java.lang.ClassCastException: org.apache.fury.serializer.BlackoutTakerSourceEnum cannot be cast to java.lang.String

	at org.apache.fury.serializer.collection.MapSerializers$StringKeyMapSerializer.write(MapSerializers.java:329)
	at org.apache.fury.serializer.collection.MapSerializers$StringKeyMapSerializer.write(MapSerializers.java:318)
	at org.apache.fury.Fury.writeData(Fury.java:552)
	at org.apache.fury.Fury.write(Fury.java:316)
	at org.apache.fury.Fury.serialize(Fury.java:250)
	at org.apache.fury.Fury.serialize(Fury.java:222)
	at org.apache.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:91)
	at org.apache.fury.serializer.ObjectSerializerTest.testSerializationCollectionsEmptyMap2(ObjectSerializerTest.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1629/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1629,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59tz3E,fury,2109160900,1629,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-14T02:31:43Z,2024-05-14T02:31:43Z,Which json library are you using? I can't reproduce your error,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59tz3E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1629,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593W8m,fury,2111663910,1629,NA,weijiang157152688,16550122,wei,,NA,2024-05-15T06:14:24Z,2024-05-15T06:14:24Z,"Using fastJSON version 2.0.36 will result in jsonpass type exceptions. Theoretically, it should be converted to a normal map type, but in reality, it should be converted to a jsonobject type","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593W8m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1630,https://api.github.com/repos/apache/fury/issues/1630,fury,2294392552,1630,Multi Thread Serialize/Deserialize benchmark issue 多线程下序列化性能异常,j9kkk,9739864,jk4n,,OPEN,2024-05-14T04:46:00Z,2024-06-05T07:54:06Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

os：windows 10
java: 1.8.0_271
fury：
<groupId>org.apache.fury</groupId>
<artifactId>fury-core</artifactId>
<version>0.5.0</version>

### Component(s)

Java

### Minimal reproduce step

    private void benchmark(BaseFury fury) {
        long start = System.nanoTime();
        for (int i = 0; i < COUNT; i++) {
            User user = new User(""John"", ""Doe"", 30);
            byte[] serialize = fury.serialize(user);
            Object deserialize = fury.deserialize(serialize);
        }
        long end = System.nanoTime();
        long elapsed = end - start;
        log.info(""Elapsed time: {} ns, tps= {} /s"", elapsed, String.format(""%.2f"", COUNT / (elapsed / 1e9)));
    }

    @Test
    public void testFury() {
        Fury fury = Fury.builder().withLanguage(Language.JAVA)
                // Allow to deserialize objects unknown types, more flexible
                // but may be insecure if the classes contains malicious code.
                .requireClassRegistration(true)
                .build();
        // Registering types can reduce class name serialization overhead, but not mandatory.
        // If class registration enabled, all custom types must be registered.
        fury.register(TestFury.class);
        fury.register(User.class);

        benchmark(fury);
    }

    @Test
    public void testMultiFury() throws InterruptedException {
        ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                // Allow to deserialize objects unknown types, more flexible
                // but may be insecure if the classes contains malicious code.
                .requireClassRegistration(true)
                .buildThreadSafeFury();
        fury.register(TestFury.class);
        fury.register(User.class);

        int threads = Runtime.getRuntime().availableProcessors();
        for (int i = 0; i < threads; i++) {
            new Thread(() -> {
                benchmark(fury);
            }).start();
        }

        Thread.currentThread().join();
    }

```
class User {
    private String firstName;
    private String lastName;
    private int age;

    public User(String john, String doe, int i) {
        this.firstName = john;
        this.lastName = doe;
        this.age = i;
    }
```

### What did you expect to see?

单线程与多线程序列化反序列化性能一致

### What did you see instead?

单线程Fury Benchmark
```
2024-05-14 12:38:36 INFO  Fury:144 [main] - Created new fury org.apache.fury.Fury@29626d54
2024-05-14 12:38:36 INFO  CompileUnit:55 [main] - Generate code for com.example.test.UserFuryCodec_1_414493378_1516500233 took 71 ms.
2024-05-14 12:38:36 INFO  JaninoUtils:121 [main] - Compile [UserFuryCodec_1_414493378_1516500233] take 265 ms
24/05/14 12:38:58.959 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 22694408600 ns, tps= 4406371.71 /s 
```

多线程ThreadSafeFury Benchmark
```
2024-05-14 12:38:58 INFO  Fury:144 [main] - Created new fury org.apache.fury.Fury@624ea235
2024-05-14 12:38:58 INFO  Fury:144 [Thread-3] - Created new fury org.apache.fury.Fury@4ff7ff2e
2024-05-14 12:38:58 INFO  Fury:144 [Thread-2] - Created new fury org.apache.fury.Fury@60bfb620
2024-05-14 12:38:58 INFO  Fury:144 [Thread-6] - Created new fury org.apache.fury.Fury@7ff887
2024-05-14 12:38:58 INFO  Fury:144 [Thread-4] - Created new fury org.apache.fury.Fury@44de8d4a
2024-05-14 12:38:58 INFO  Fury:144 [Thread-5] - Created new fury org.apache.fury.Fury@159886f2
2024-05-14 12:38:58 INFO  Fury:144 [Thread-7] - Created new fury org.apache.fury.Fury@1d5fc898
2024-05-14 12:38:58 INFO  Fury:144 [Thread-1] - Created new fury org.apache.fury.Fury@47540be1
2024-05-14 12:38:58 INFO  Fury:144 [Thread-8] - Created new fury org.apache.fury.Fury@69b38d00
24/05/14 12:39:28.896 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 29918667800 ns, tps= 3342394.81 /s 
24/05/14 12:39:30.318 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 31341023100 ns, tps= 3190706.30 /s 
24/05/14 12:39:33.827 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 34851435100 ns, tps= 2869322.30 /s 
24/05/14 12:39:34.476 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 35503676500 ns, tps= 2816609.71 /s 
24/05/14 12:39:35.605 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 36628779700 ns, tps= 2730093.68 /s 
24/05/14 12:39:36.613 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 37636506500 ns, tps= 2656994.75 /s 
24/05/14 12:39:36.622 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 37644876100 ns, tps= 2656404.01 /s 
24/05/14 12:39:36.769 [INFO ] 23 com.example.test.TestFury[23] - Elapsed time: 37792022400 ns, tps= 2646061.09 /s 
```



问题
1. 多线程tps约为单线程tps一半
2. 多线程之间tps结果差异较大


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1630/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1630,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AFC03,fury,2148805943,1630,NA,galaxyxym,84667613,,,NA,2024-06-05T03:56:27Z,2024-06-05T03:56:27Z,It is recommended to use JMH for load testing; unit test is not accurate,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AFC03/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1630,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AGRP6,fury,2149127162,1630,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-05T07:54:05Z,2024-06-05T07:54:05Z,@j9kkk  Could you try 0.5.1 out? And it would be better if you can provide a profiling graph,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AGRP6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/1632,fury,2294515081,1632,[java] FuryPooledObjectFactory#classLoaderFuryPooledCache remove softValues,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,CLOSED,2024-05-14T06:09:07Z,2024-05-20T06:55:56Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

classLoaderFuryPooledCache with `weakKeys`,`softValues`,`expireAfterAccess` , values removed too frequently. In some case it will create too much fury.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

I'd like to remove `softValues` options. even `weakKey` can be removed too, just remain `expireAfterAccess`
## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1632/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59wTOK,fury,2109813642,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-14T10:13:08Z,2024-05-14T10:13:08Z,"If we remove it, those classes will never be collected. In some hot-loading classes scenarios, it will may cause class leak","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59wTOK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59wTmp,fury,2109815209,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-14T10:14:00Z,2024-05-14T10:14:00Z,"Maybe we can resolve this in another way. Like let users call Fury to clear classes explicitly.

In this way, we can remove those weak/soft values","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59wTmp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59xGHW,fury,2110022102,1632,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T12:00:37Z,2024-05-14T12:00:37Z,"> If we remove it, those classes will never be collected. In some hot-loading classes scenarios, it will may cause class leak

I see it could be just remain `weakKeys`, `softValues` will cause that fury must create again when after gc.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59xGHW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59xQxR,fury,2110065745,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-14T12:22:18Z,2024-05-14T12:22:18Z,"> > If we remove it, those classes will never be collected. In some hot-loading classes scenarios, it will may cause class leak
> 
> I see it could be just remain `weakKeys`, `softValues` will cause that fury must create again when after gc.

The values can  have strong references to keys. If value are not soft references, the weak key won't make the classes eligible for gc. If we remove soft values. The weak keys should be removed too","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59xQxR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59x8pm,fury,2110245478,1632,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T13:26:29Z,2024-05-14T13:26:29Z,"> > > If we remove it, those classes will never be collected. In some hot-loading classes scenarios, it will may cause class leak
> > 
> > 
> > I see it could be just remain `weakKeys`, `softValues` will cause that fury must create again when after gc.
> 
> The values can have strong references to keys. If value are not soft references, the weak key won't make the classes eligible for gc. If we remove soft values. The weak keys should be removed too

I'd like think whether `softValue` or not will not effect `weakKeys`. `weakKeys` will take key reference as `WeakEntry`, and won't effected be valueReference. maybe we can take a test for it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59x8pm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593HPi,fury,2111599586,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-15T05:11:47Z,2024-05-15T05:11:47Z,"The value may have strong reference to key, so the key are always strong reachable, and it' will never be taken as weak. The thing here is that Fury will hold strong reference to classes of user objects. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593HPi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593P1-,fury,2111634814,1632,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-15T05:48:34Z,2024-05-15T05:48:34Z,I see,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593P1-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593Z7u,fury,2111676142,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-15T06:24:56Z,2024-05-15T06:24:56Z,"How about removing weakkeys & soft values, we can make `org.apache.fury.util.LoaderBinding#clearClassLoader` as a method in `ThreadSafeFury`, and let users to clear classloader explicitly. Then we can remove all weak/soft values in Fury.

The weak/soft values in `CodeGenerator` should still be preserved, since it's a static global state","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593Z7u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc594TAP,fury,2111909903,1632,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-15T08:39:18Z,2024-05-15T08:39:18Z,"It is a simple way and users mostly time need't to take this method.
if for may way, I'd like clear `Fury#ClassLoader`, set ClassLoader when `gerFury()` and clear classLoader when `returnFury()`. :)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc594TAP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1632,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc595Nbp,fury,2112149225,1632,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-15T10:31:36Z,2024-05-15T10:31:36Z,"> It is a simple way and users mostly time need't to take this method. if for may way, I'd like clear `Fury#ClassLoader`, set ClassLoader when `gerFury()` and clear classLoader when `returnFury()`. :)

The thing is that Fury itself doesn't support  change classloader currently, so we use a map to switch classloaders. Different classloader may have class with same name but different fields. So Fury made the classloader inmutable for simplicity.

But in the long run, it would be great if we can allow update classloader on Fury itself without introducing extra performance overhead.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc595Nbp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/1633,fury,2295346904,1633,NullPointerException when serializing a custom type,asalabaev-nymbus,55148517,Artem Salabaev,,CLOSED,2024-05-14T12:44:57Z,2024-05-16T13:41:51Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury 0.5.0, Java 17

### Component(s)

Java

### Minimal reproduce step

I have a custom complex (but not too complex) class and I Use the example from the Fury Guide to serialise it to byte[] 
I cannot provide it here due to IP but I expect this is some basic error that might be investigated from the code base.

### What did you expect to see?

A byte array

### What did you see instead?


java.lang.NullPointerException
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.captureAsTypeVariable(TypeRef.java:887)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer$1.captureAsTypeVariable(TypeRef.java:921)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:878)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:868)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:868)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture(TypeRef.java:848)
	at org.apache.fury.reflect.TypeRef.resolveType(TypeRef.java:219)
	at org.apache.fury.type.TypeUtils.getMapKeyValueType(TypeUtils.java:474)
	at org.apache.fury.resolver.FieldResolver$FieldInfo.of(FieldResolver.java:754)
	at org.apache.fury.resolver.FieldResolver.<init>(FieldResolver.java:319)
	at org.apache.fury.resolver.FieldResolver.of(FieldResolver.java:206)
	at org.apache.fury.resolver.FieldResolver.of(FieldResolver.java:190)
	at org.apache.fury.resolver.ClassResolver.getFieldResolver(ClassResolver.java:1019)
	at com.mediaspectrum.sapi.wso.DatabeanFuryRefCompatibleCodec_1_128893786_1204030294.<init>(DatabeanFuryRefCompatibleCodec_1_128893786_1204030294.java:52)
	at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:129)
	at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104)
	at org.apache.fury.serializer.ObjectStreamSerializer$SlotsInfo.<init>(ObjectStreamSerializer.java:361)
	at org.apache.fury.serializer.ObjectStreamSerializer.<init>(ObjectStreamSerializer.java:119)
	at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:129)
	at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104)
	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1169)
	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1107)
	at org.apache.fury.Fury.write(Fury.java:312)
	at org.apache.fury.Fury.serialize(Fury.java:248)
	at org.apache.fury.Fury.serialize(Fury.java:220)
	at org.apache.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:91)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1633/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59x_xY,fury,2110258264,1633,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T13:32:22Z,2024-05-14T13:32:22Z," maybe you can take your fury code and try run as `.withCodegen(false)`, so that we can see error more clearly. :)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59x_xY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yBmz,fury,2110265779,1633,NA,asalabaev-nymbus,55148517,Artem Salabaev,,NA,2024-05-14T13:35:50Z,2024-05-14T13:35:50Z,"Wow, that did the trick. No clear error, it just worked! 
Do you know how impactful it would be to run with the codeGen = false as opposed to true?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yBmz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yISu,fury,2110293166,1633,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T13:47:46Z,2024-05-14T13:47:46Z,"> Wow, that did the trick. No clear error, it just worked! Do you know how impactful it would be to run with the codeGen = false as opposed to true?

`codeGen = true` will take much high performance, I missed my data. however we should check why your fury running error. I guess your class maybe have a map which is not normal java class. maybe you can try a little class to test. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yISu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yKNF,fury,2110300997,1633,NA,asalabaev-nymbus,55148517,Artem Salabaev,,NA,2024-05-14T13:50:54Z,2024-05-14T13:50:54Z,"I will. Thank you! This class contains inner classes and TreeMaps and ReentrantLocks, I'll try to reproduce on something simple.
BTW does Fury omit transient variables during serialisation?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yKNF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yOJE,fury,2110317124,1633,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T13:57:36Z,2024-05-14T13:57:36Z,`org.apache.fury.annotation.Ignore`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59yOJE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ymDN,fury,2110415053,1633,NA,asalabaev-nymbus,55148517,Artem Salabaev,,NA,2024-05-14T14:36:29Z,2024-05-14T14:36:29Z,But if I am using 3rd party code I cannot insert this annotation. Will the transient variables be serialised?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ymDN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ytmP,fury,2110445967,1633,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-14T14:49:14Z,2024-05-14T14:49:14Z,it will ignore transient field.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc59ytmP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc590tKp,fury,2110968489,1633,NA,asalabaev-nymbus,55148517,Artem Salabaev,,NA,2024-05-14T19:12:14Z,2024-05-14T19:12:14Z,"ok, I was able to reproduce a somewhat similar. And it is also similar to the #1325 

now the error is the combination of the two bugs - I see both errors now. The details are below. But it maybe another issue since initially when opening this ticket there was only NullPointerException that I have seen.
```
Create sequential serializer failed, 
class: class i.MyClass
java.lang.RuntimeException: Create sequential serializer failed, 
class: class i.MyClass
	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:52)
	at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:954)
	at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:131)
	at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:952)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:885)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:782)
	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1168)
	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1107)
	at org.apache.fury.Fury.write(Fury.java:312)
	at org.apache.fury.Fury.serialize(Fury.java:248)
	at org.apache.fury.Fury.serialize(Fury.java:202)
	at i.FuryTest.testFury(FuryTest.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
Caused by: java.lang.NullPointerException
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.captureAsTypeVariable(TypeRef.java:887)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer$1.captureAsTypeVariable(TypeRef.java:921)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:878)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:868)
	at org.apache.fury.reflect.TypeRef$WildcardCapturer.capture0(TypeRef.java:868)
```
The code to reproduce it was to add generics: 
```
package i;

import org.apache.fury.Fury;
import org.apache.fury.config.Language;
import org.junit.Test;

import java.util.Map;
import java.util.TreeMap;


class MyInternalClass<T> {
    public int c = 9;
}
class MyInternalBaseClass extends MyInternalClass<String> {
    public int d = 19;

}

class MyClass {
    protected Map<String, MyInternalClass<?>> fields;
    private transient int r = 13;

    public MyClass() {
        fields = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
        fields.put(""test"", new MyInternalBaseClass());
    }
}

public class FuryTest {

    static Fury fury = Fury.builder().withLanguage(Language.JAVA)
//            .withCodegen(false)
            .build();
    static {
        fury.register(MyClass.class); //
        fury.register(MyInternalClass.class); //
        fury.register(MyInternalBaseClass.class); //
        fury.register(String.CASE_INSENSITIVE_ORDER.getClass()); //
    }

    @Test
    public void testFury() {
        byte[] serialize = fury.serialize(new MyClass());
        System.out.println(""Code size ="" + serialize.length);
    }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc590tKp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593Aq3,fury,2111572663,1633,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-15T04:44:22Z,2024-05-15T04:44:22Z,"@Munoon Seems this is a bug introduced in #1553 

> ok, I was able to reproduce a somewhat similar. And it is also similar to the #1325
> 
> now the error is the combination of the two bugs - I see both errors now. The details are below. But it maybe another issue since initially when opening this ticket there was only NullPointerException that I have seen.
> 
> ```
> Create sequential serializer failed, 
> class: class i.MyClass
> java.lang.RuntimeException: Create sequential serializer failed, 
> class: class i.MyClass
> 	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:52)
> 	at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:954)
> 	at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:131)
> 	at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:952)
> 	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:885)
> 	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:782)
> 	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1168)
> 	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1107)
> 	at org.apache.fury.Fury.write(Fury.java:312)
> 	at org.apache.fury.Fury.serialize(Fury.java:248)
> 	at org.apache.fury.Fury.serialize(Fury.java:202)
> 	at i.FuryTest.testFury(FuryTest.java:43)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc593Aq3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc599oKe,fury,2113307294,1633,NA,Munoon,43534008,Nikita Ivchenko,nikita@blynk.cc,NA,2024-05-15T19:26:41Z,2024-05-15T19:26:41Z,"> @Munoon Seems this is a bug introduced in https://github.com/apache/incubator-fury/pull/1553

Agree. I'm feel sick a bit right now, so I will take a look a bit later. Hopefully during this week.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc599oKe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1633,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-BR6g,fury,2114264736,1633,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-16T07:25:19Z,2024-05-16T07:25:19Z,"> > @Munoon Seems this is a bug introduced in #1553
> 
> Agree. I'm feel sick a bit right now, so I will take a look a bit later. Hopefully during this week.

@Munoon, health comes first! Please take all the time you need to feel better. I'll try to fix it later. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-BR6g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1635,https://api.github.com/repos/apache/fury/issues/1635,fury,2299077728,1635,Concerning license in the javadoc jar,hyandell,477715,Henri Yandell,,OPEN,2024-05-16T00:30:58Z,2024-08-07T13:47:32Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.0 - https://repo1.maven.org/maven2/org/apache/fury/fury-core/0.5.0/fury-core-0.5.0-javadoc.jar

### Component(s)

Java

### Minimal reproduce step

Hi there from the ASF Legal Committee side of the house (though this came up initially at work) :)

The javadoc jar has an Oracle Proprietary license in legal/LICENSE - ""Oracle No-Fee Terms and Conditions (NFTC)"". This should not be in there, and neither (perhaps) should any content it relates to. I see the following on files within the documentation jar:

- ./link.svg: ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
- ./copy.svg: ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
- ./script.js: * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
- ./search-page.js: * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
- ./search.js: * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

From initial inspection, I don't see how it gets there. It's not in the GitHub source. I've looked at the 0.5.1 draft release, but I don't see a javadoc jar there to review. 

I'm definitely interested if this is something being introduced by an Oracle JDK. We knew that they were injecting other open source licenses (see: https://www.apache.org/legal/resolved.html#from-java-9-onwards-javadoc-can-include-search-functionality-that-includes-javascript-under-other-open-source-licenses-can-apache-projects-include-this-javadoc ) but this is the first time I've seen proprietary potentially injected. Perhaps it comes down to the JVM/JDK used to make the release and we need rules about that.

### What did you expect to see?

That an Apache release did not include proprietary licensing.

### What did you see instead?

:)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1635/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1635,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-BP9d,fury,2114256733,1635,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-16T07:22:42Z,2024-05-16T07:22:42Z,"Hi @hyandell , thanks for bring up this issue. I checked out the 0.5.1 draft release, the jar https://repository.apache.org/content/repositories/orgapachefury-1007/org/apache/fury/fury-core/0.5.1/fury-core-0.5.1-javadoc.jar contains same issue :
![image](https://github.com/apache/incubator-fury/assets/12445254/5c682474-05ef-439f-91c8-7b8be9fa1fca)

I never think about the javadoc jar would introduce an legal issue.

I used oracle jdk8 for release fury 0.5.0 jar.

I tested with openjdk 1.8, everything is fine. 
![image](https://github.com/apache/incubator-fury/assets/12445254/2d7c84e6-dfaf-43e1-b8f1-21032eed88a6)

I will create a PR to validate the release packages and add checks to fury release document.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-BP9d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1635,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Ic5R,fury,2116144721,1635,NA,hyandell,477715,Henri Yandell,,NA,2024-05-16T20:44:14Z,2024-05-16T20:44:14Z,"Thanks Shawn that sounds great.

And leaves a need for a ""Please make releases with OpenJDK"" or some instruction; or at least ""Do not use Oracle to make Apache releases"". I'll take that to the licensing side to headscratch on that.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Ic5R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1635,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HbjtT,fury,2272148307,1635,NA,ceki,115476,Ceki Gülcü,,NA,2024-08-06T21:03:17Z,2024-08-06T21:03:17Z,@hyandell  I tried openJDK 22.0.2 and the result was the same. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HbjtT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1635,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hgyzx,fury,2273520881,1635,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-07T13:47:30Z,2024-08-07T13:47:30Z,"> @hyandell I tried openJDK 22.0.2 and the result was the same.

Hi @ceki ,thanks for reporting this. I forgot to switch jdk before releasing. I'm writing a automatic release script to release jar. I will check jdk in the script. Hope this issue can be avoided in future release.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hgyzx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1638,https://api.github.com/repos/apache/fury/issues/1638,fury,2300433739,1638,  it's a bit troublesome to install on apple systems. error: externally-managed-environment......,69567272,16573031,,,OPEN,2024-05-16T13:35:05Z,2024-05-19T13:45:17Z,"According to the documentation, I ran the following two commands, but the first one reported an error, how to solve it?
I'm new here. I'm a little confused.
1、pip install pyarrow==14.0.0
Error: externally-managed-environment
× This environment is externally managed
╰─> To install Python packages system-wide, try brew install
    xyz, where xyz is the package you are trying to
    install.
    
    If you wish to install a Python library that isn't in Homebrew,
    use a virtual environment:
    
    python3 -m venv path/to/venv
    source path/to/venv/bin/activate
    python3 -m pip install xyz
    
    If you wish to install a Python application that isn't in Homebrew,
    it may be easiest to use 'pipx install xyz', which will manage a
    virtual environment for you. You can install pipx with
    
    brew install pipx
    
    You may restore the old behavior of pip by passing
    the '--break-system-packages' flag to pip, or by adding
    'break-system-packages = true' to your pip.conf file. The latter
    will permanently disable this error.
    
    If you disable this error, we STRONGLY recommend that you additionally
    pass the '--user' flag to pip, or set 'user = true' in your pip.conf
    file. Failure to do this can result in a broken Homebrew installation.
    
    Read more about this behavior here: <https://peps.python.org/pep-0668/>

note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
hint: See PEP 668 for the detailed specification.

2、bazel build //cpp/fury/row:fury_row_format

Why not brew install pyarrow?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1638/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1638,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-F3s9,fury,2115468093,1638,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-16T14:53:57Z,2024-05-16T14:53:57Z,"Yes, you can install pyarrow by brew. It's a comon practice to install python packages using something like conda/pyenv to resolve package conflicts","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-F3s9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1638,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-URqd,fury,2119244445,1638,NA,69567272,16573031,,,NA,2024-05-19T13:45:16Z,2024-05-19T13:45:16Z," brew search arrow
==> Formulae
apache-arrow 
  Is this it? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-URqd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1640,https://api.github.com/repos/apache/fury/issues/1640,fury,2303269045,1640,[java] jit code of collection with abstract class deserialize error,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,CLOSED,2024-05-17T17:30:19Z,2024-05-20T06:49:31Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

master

### Component(s)

Java

### Minimal reproduce step

suche code
```java
  @Data
  abstract static class Foo {
      private int f1;
  }

  static class Foo1 extends Foo {}

    @Data
    static class CollectionAbstractTest {
      private List<Foo> foos;
    }

    @Test
    public void testCollectionAbstractCodegen() {
        Fury fury =
                Fury.builder()
                        .withCodegen(true)
                        .requireClassRegistration(false)
                        .build();
        CollectionAbstractTest test = new CollectionAbstractTest();
        test.foos = new ArrayList<>(ImmutableList.of(new Foo1(), new Foo1()));
        CollectionAbstractTest object = serDe(fury, test);
```
it create `sameElementClassWrite` function as
```java
  private void sameElementClassWrite(int value0, MemoryBuffer memoryBuffer1, java.util.List list2, boolean value1) {
      for (int i = 0; i < value0; i+=1) {
        Object object = list2.get(i);
        if (value1) {
            if ((object == null)) {
                memoryBuffer1.writeByte(((byte)-3));
            } else {
                memoryBuffer1.writeByte(((byte)0));
                fooClassInfoHolder.getSerializer().write(memoryBuffer1, object);
            }
        } else {
            fooClassInfoHolder.getSerializer().write(memoryBuffer1, object);
        }
      }
  }
```
casuse of it don't know abstract class will be same class or not. so it take a deseralize error.

### What did you expect to see?

i want it will be could deserialize right.

maybe it can generate code withou `serializer`, the `sameElementClassWrite` mothed  just like 
```java
      if (((value2 & 4) != 4)) {
          throw new RuntimeExcption();
      } else {
          serializer2 = classResolver.readClassInfo(memoryBuffer5, foo1ClassInfoHolder).getSerializer();
      }
```

### What did you see instead?

deserialize error.

### Anything Else?

btw. it have to iterator all data for check collection is same class. mostly time we won't take different class in one collection unless it like `Set<Object>`. maybe it can reduce array traversal.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1640/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1640,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Tyeo,fury,2119116712,1640,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-19T06:12:47Z,2024-05-19T06:12:47Z,"Hi @MrChang0 , thanks for reporting this bug, I can reproduce it locally. I fixed it in https://github.com/apache/incubator-fury/pull/1641. Could you take a look at it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Tyeo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1640,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-UKQ6,fury,2119214138,1640,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-19T12:11:58Z,2024-05-19T12:11:58Z,"fine, I will test it tomorrow.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-UKQ6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1640,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-VpJ2,fury,2119602806,1640,NA,MrChang0,13114229,Shuchang Li,lscdtc@hotmail.com,NA,2024-05-20T03:38:03Z,2024-05-20T03:38:03Z,"> Hi @MrChang0 , thanks for reporting this bug, I can reproduce it locally. I fixed it in #1641. Could you take a look at it?

thanks, i think it fixed my question.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-VpJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1640,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Vtsg,fury,2119621408,1640,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-20T04:05:28Z,2024-05-20T04:05:28Z,"Turns out the inlineable Expression implemented before has some issues, I reverted the previous fix and  fixed it in a more low-level manner in https://github.com/apache/incubator-fury/pull/1641.. I believe this fix will be better and will resolve more broad range, could you test it again?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-Vtsg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/1644,fury,2310383856,1644,Enum equality does not work across serialization-deserialization,Frnd-me,80909536,Marlon Etheredge,,OPEN,2024-05-22T12:16:08Z,2024-05-22T18:15:00Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

```java
public class EnumEquality {

  @Test
  public void testEnumEquality() throws URISyntaxException {
    final var fury = Fury.builder()
        .withLanguage(Language.XLANG)
        .requireClassRegistration(true)
        .build();

    fury.register(SomeEnum.class, ""SomeEnum"");

    final var someEnumOut = SomeEnum.A;

    final var someEnumIn = fury.deserialize(fury.serialize(someEnumOut));

    assertEquals(SomeEnum.A, someEnumIn);
  }

  public enum SomeEnum {
    A,
    B,
    C
  }
}
```

### What did you expect to see?

I expect a test for equality of the original and deserialized enum values to result in a true value.

### What did you see instead?

After deserializing, a test for equality of the deserialized enum value with the original value yields false.

### Anything Else?

This must have something to do with Java's enums being singletons.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1644/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-o7mw,fury,2124659120,1644,NA,Frnd-me,80909536,Marlon Etheredge,,NA,2024-05-22T12:21:38Z,2024-05-22T12:21:38Z,"I am using the following as a workaround:

```java
someEnumIn = SomeEnum.valueOf(someEnumIn.name());
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-o7mw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-pUfE,fury,2124761028,1644,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-22T13:09:41Z,2024-05-22T13:09:41Z,"Hi @Frnd-me, could you use `withLanguage(Language.JAVA)` instead? Enum is not supported in xlang serialization for now., though fury serialization spec has included enum serialization protocol. Currently enum will be serialized as an struct, which is why deserialized value is not same reference","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-pUfE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-paHo,fury,2124784104,1644,NA,Frnd-me,80909536,Marlon Etheredge,,NA,2024-05-22T13:20:35Z,2024-05-22T13:20:35Z,"I could try that, but that would imply that the cross-language serialization and deserialization would not work. I am trying to use Fury specifically for this feature.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-paHo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-qPNl,fury,2125001573,1644,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-22T14:51:05Z,2024-05-22T14:51:05Z,"> I could try that, but that would imply that the cross-language serialization and deserialization would not work. I am trying to use Fury specifically for this feature.

We're reactoring fury cross-language serialization. Could you hold this for some time? BTW, which languages you used fury for xlang serialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-qPNl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1644,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-r-_D,fury,2125459395,1644,NA,Frnd-me,80909536,Marlon Etheredge,,NA,2024-05-22T18:14:59Z,2024-05-22T18:14:59Z,"Sure, I will temporarily switch to Protocol Buffers, but I'll keep an eye on Fury. My system is implemented in Java, but would require cross-language serialization and deserialization from a range of other languages. I was currently testing Java <-> Python, but I can also see at least C++ and Go to be important languages for us.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5-r-_D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1645,https://api.github.com/repos/apache/fury/issues/1645,fury,2310759687,1645,"Mac install using “conda install -c conda-forge pyarrow” command is completed, how to set pyarrow of environment variables? ",69567272,16573031,,,OPEN,2024-05-22T14:52:14Z,2024-05-22T14:52:14Z,"Error in fail: Python Configuration Error: Problem getting pyarrow include path.
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
ModuleNotFoundError: No module named 'pyarrow'
Is the Python binary path set up right? (See ./configure or python3.) Is distutils installed?
ERROR: no such package '@@local_config_pyarrow//': Python Configuration Error: Problem getting pyarrow include path.
Traceback (most recent call last):

How solve  this compilation error? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1645/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1647,https://api.github.com/repos/apache/fury/issues/1647,fury,2315510724,1647,[Doc] Use a script to update documentation when code is modified,LiangliangSui,116876207,,,OPEN,2024-05-24T14:10:08Z,2024-05-24T14:10:14Z,"## Is your feature request related to a problem? Please describe.
Currently, when we add or modify configuration fields in [FuryBuilder](https://github.com/apache/incubator-fury/blob/main/java/fury-core/src/main/java/org/apache/fury/config/FuryBuilder.java), we need to manually update the table in [java_serialization_guide.md#furybuilder--options](https://github.com/apache/incubator-fury/blob/main/docs/guide/java_serialization_guide.md#furybuilder--options)

## Describe the solution you'd like
Code a script to automatically update the content in `java_serialization_guide.md#furybuilder--options` when the content in `FuryBuilder` is modified.

Divide the feature into three stages for implementation.
1. Code a script to implement the above functions.
2. Add comments to all configuration fields in `FuryBuilder` to provide `Description` for automatic generation.
3. Configure CI and enable `FuryBuilder` configuration field detection in CI. When a configuration field is added or modified, if the doc is not updated, CI fails and prompts that the doc needs to be updated.

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1647/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/1649,fury,2317626558,1649,[Rust] Please publish fury for rust to crates.io,miladamery,15817237,Milad,miladamery@yahoo.com,OPEN,2024-05-26T10:23:34Z,2025-02-08T12:16:05Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1649/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WRFk,fury,2136543588,1649,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-29T05:30:21Z,2024-05-29T05:30:21Z,"Hi @miladamery , thanks for reporting this issue. Fury rust is not stable and still experimental, we plan publish it to crates.io when it's stable","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WRFk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6W9ZPK,fury,2532676554,1649,NA,happysalada,5317234,Yt,raphael@megzari.com,NA,2024-12-10T19:25:20Z,2024-12-10T19:25:20Z,"Hi, just a friendly bump on this.
Im starting a new project and im wondering how close to stable the rust version is ? If its a couple of weeks away or if it looks like it will be another 6 months ?
No worries in both cases, just wondering.
Thank you for the project !","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6W9ZPK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XAsyx,fury,2533543089,1649,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-11T03:25:15Z,2024-12-11T03:25:15Z,"Hi @happysalada , if everything goes right, we will make a formal release in next two monthes.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XAsyx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dq84P,fury,2645282319,1649,NA,happysalada,5317234,Yt,raphael@megzari.com,NA,2025-02-08T12:11:12Z,2025-02-08T12:11:12Z,"Hey just wanted to follow up on this, I saw in another thread that the next release process starts tomorrow, will that release include rust ?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dq84P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1649,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6drB8E,fury,2645303044,1649,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-08T12:15:47Z,2025-02-08T12:15:47Z,"How @happysalada , It doesn't include rust, the rust implementation still take time","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6drB8E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1651,https://api.github.com/repos/apache/fury/issues/1651,fury,2320055066,1651,dubbo-serialization-fury allowList/allowListPrefix doesn't take affect,huisman6,10751595,,,OPEN,2024-05-28T03:35:47Z,2024-08-11T12:38:10Z,"## Is your feature request related to a problem? Please describe.

When Dubbo class serialization security check is enabled:
```
dubbo.application.serialize-check-status=STRICT
dubbo.application.auto-trust-serialize-class=true
dubbo.application.trust-serialize-class-level=3
```

Dubbo Serialization Fury keeps running an exception during deserialization, indicating that it is not in the serialization allowlist.

After debugging, the reason for this exception is that FuryCheckerListener#notifyPrefix method calls AllowListChecker without adding `*` to the allowedList and Fury AllowListChecker uses the suffix character `*` to determine whether it is a prefix match or an exact match..

For example, for DTO `io.github.playground.server.model.User`, the allowedList finally parsed by the dubbo security mechanism `io.github.playground` is added to AllowListChecker through FuryCheckerListener and saved in allowList instead of allowListPrefix.


## Describe the solution you'd like

FuryCheckerListener adapts to AllowListChecker by appending the suffix character `*` .


## Additional context

dubbo: 3.2
dubbo-serialization-fury: 3.2.0
dubbo security mechanism: https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/class-check/","{""url"": ""https://api.github.com/repos/apache/fury/issues/1651/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1651,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ID_Si,fury,2282747042,1651,NA,heliang666s,147408835,,,NA,2024-08-11T12:38:08Z,2024-08-11T12:38:08Z,I am interested in it.Please assign to me~,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ID_Si/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1654,https://api.github.com/repos/apache/fury/issues/1654,fury,2321378183,1654,Fury 0.5.1 is not backward compatible with 0.5.0,wkuranowski,8386252,,,CLOSED,2024-05-28T15:31:47Z,2024-10-15T13:06:43Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

Fury 0.5.1
Java 22


### Component(s)

Java

### Minimal reproduce step

I am unable to deserialize objects from Fury 0.5.0.

example bytes which works fine with 0.5.0:
`byte[] bytes0_5_0 = new byte[] {2, -1, -80, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3};`

In Fury 0.5.1 I get an exception:
```
java.lang.NullPointerException: Cannot read field ""serializer"" because ""classInfo"" is null
        at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1129) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1563) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.Fury.readRef(Fury.java:825) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.serializer.collection.GuavaCollectionSerializers$ImmutableSortedSetSerializer.newCollection(GuavaCollectionSerializers.java:196) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:50) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:27) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.Fury.readDataInternal(Fury.java:923) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.Fury.readRef(Fury.java:825) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.Fury.deserialize(Fury.java:760) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.Fury.deserialize(Fury.java:682) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.pool.ThreadPoolFury.lambda$deserialize$9(ThreadPoolFury.java:124) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:73) ~[fury-core-0.5.1.jar!/:0.5.1]
        at org.apache.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:124) ~[fury-core-0.5.1.jar!/:0.5.1]
```



### What did you expect to see?

Backward compatibility with 0.5.x

### What did you see instead?

Fury 0.5.1 produces similar bytes, but with one difference:
`byte[] bytes0_5_1 = new byte[] {2, -1, **-68**, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3};`

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1654/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1654,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WQq-,fury,2136541886,1654,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-29T05:28:51Z,2024-05-29T05:28:51Z,"Hi @wkuranowski , thanks for reporting this issue. Currently fury do not provide binary compatibility. We will provide such compatibility but it may wait for some versions","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WQq-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1654,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WYNB,fury,2136572737,1654,NA,wkuranowski,8386252,,,NA,2024-05-29T05:55:25Z,2024-05-29T05:55:25Z,"@chaokunyang 
https://github.com/apache/incubator-fury?tab=readme-ov-file#binary-compatibility

> binary compatibility is not guaranteed between Fury major releases for now. **However, it is guaranteed between minor versions.**
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_WYNB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1656,https://api.github.com/repos/apache/fury/issues/1656,fury,2322397600,1656,Fury 0.5.1 Deserialize Error,weijiang157152688,16550122,wei,,OPEN,2024-05-29T05:36:26Z,2024-05-29T13:30:20Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.1

### Component(s)

Java

### Minimal reproduce step

https://github.com/apache/incubator-fury/pull/1655

### What did you expect to see?

 Deserialize ok

### What did you see instead?

at org.apache.fury.Fury.handleReadFailed(Fury.java:800)
	at org.apache.fury.Fury.deserialize(Fury.java:762)
	at org.apache.fury.Fury.deserialize(Fury.java:680)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:130)
	at org.apache.fury.serializer.DeserializeTest.test(DeserializeTest.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)
Caused by: java.lang.AssertionError: 0
	at org.apache.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:1060)
	at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1590)
	at org.apache.fury.resolver.FieldResolver.skipObjectField(FieldResolver.java:515)
	at org.apache.fury.resolver.FieldResolver.skipDataBy8(FieldResolver.java:493)
	at org.apache.fury.resolver.FieldResolver.skipEndFields(FieldResolver.java:527)
	at me.ele.lpd.dispatch.matrix.score.common.oss.AssignContextOtherPackageFuryRefCompatibleCodec_1_414493378_355518265.read(AssignContextOtherPackageFuryRefCompatibleCodec_1_414493378_355518265.java:144)
	at org.apache.fury.Fury.readDataInternal(Fury.java:933)
	at org.apache.fury.Fury.readRef(Fury.java:835)
	at org.apache.fury.Fury.deserialize(Fury.java:758)
	... 30 more


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1656/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1656,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_Znnx,fury,2137422321,1656,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-05-29T13:30:19Z,2024-05-29T13:30:19Z,"It fails at :
![image](https://github.com/apache/incubator-fury/assets/12445254/94fff95e-649b-4f52-9ae8-7f93bbba1537)

The serialization and deserialization has different schema, could you share the classdef of your serialization peer?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_Znnx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1658,https://api.github.com/repos/apache/fury/issues/1658,fury,2323279079,1658,Scala object type field serialization failure,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-05-29T13:03:39Z,2024-05-29T13:13:24Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/incubator-fury/issues) and found no similar issues.


### Version

0.5.1

### Component(s)

Java

### Minimal reproduce step

```java
public class SparkTypeTest extends TestBase {
  @Test(dataProvider = ""enableCodegen"")
  public void testObjectType(boolean enableCodegen) {
    Fury fury = builder().withRefTracking(true).withCodegen(enableCodegen).build();
    fury.serialize(DecimalType$.MODULE$);
    fury.serialize(new DecimalType(10, 10));
  }
}
```

Spark 2.4.1

### What did you expect to see?

No compile error

### What did you see instead?

```
java.lang.RuntimeException: Create sequential serializer failed, 
class: class org.apache.spark.sql.types.DecimalType
	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:52)
	at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$2(ClassResolver.java:954)
	at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:131)
	at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:952)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:885)
	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:782)
	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1168)
	at org.apache.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:1062)
	at org.apache.spark.sql.types.StructFieldFuryRefCodec_1_666988784_1856050011.writeClassAndObject$(StructFieldFuryRefCodec_1_666988784_1856050011.java:52)
	at org.apache.spark.sql.types.StructFieldFuryRefCodec_1_666988784_1856050011.writeFields$(StructFieldFuryRefCodec_1_666988784_1856050011.java:74)
	at org.apache.spark.sql.types.StructFieldFuryRefCodec_1_666988784_1856050011.write(StructFieldFuryRefCodec_1_666988784_1856050011.java:119)
	at org.apache.fury.Fury.writeNonRef(Fury.java:441)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.write(ArraySerializers.java:104)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.write(ArraySerializers.java:42)
	at org.apache.spark.sql.types.StructTypeFuryRefCodec_1_666988784_1735054408.writeClassAndObject$(StructTypeFuryRefCodec_1_666988784_1735054408.java:71)
	at org.apache.spark.sql.types.StructTypeFuryRefCodec_1_666988784_1735054408.writeFields$(StructTypeFuryRefCodec_1_666988784_1735054408.java:137)
	at org.apache.spark.sql.types.StructTypeFuryRefCodec_1_666988784_1735054408.write(StructTypeFuryRefCodec_1_666988784_1735054408.java:364)
	at org.apache.fury.serializer.collection.CollectionSerializers$DefaultJavaCollectionSerializer.write(CollectionSerializers.java:541)
	at org.apache.fury.Fury.writeNonRef(Fury.java:441)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.write(ArraySerializers.java:104)
	at org.apache.fury.serializer.ArraySerializers$ObjectArraySerializer.write(ArraySerializers.java:42)
	at org.apache.fury.Fury.writeData(Fury.java:550)
	at org.apache.fury.Fury.write(Fury.java:314)
	at org.apache.fury.Fury.serialize(Fury.java:248)
	at org.apache.fury.Fury.serialize(Fury.java:220)
	at org.apache.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:91)
	at com.alibaba.sparklib.FurySerializerInstance.serialize(FurySerializer.scala:35)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:555)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:955)
Caused by: org.apache.fury.codegen.CodegenException: Compile error: 
org.apache.spark.sql.types.DecimalTypeFuryRefCodec_1_666988784_533377181:
	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:133)
	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
	at org.apache.fury.codegen.CodeGenerator.compile(CodeGenerator.java:145)
	at org.apache.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:110)
	at org.apache.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:43)
	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:49)
	... 30 more
Caused by: org.apache.fury.shaded.org.codehaus.commons.compiler.CompileException: File 'org/apache/spark/sql/types/DecimalTypeFuryRefCodec_1_666988784_533377181.java', Line 28, Column 21: IDENTIFIER expected instead of '2'
	at org.apache.fury.shaded.org.codehaus.janino.TokenStreamImpl.read(TokenStreamImpl.java:195)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.read(Parser.java:3804)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.parseClassBodyDeclaration(Parser.java:1040)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.parseClassBody(Parser.java:856)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.parseClassDeclarationRest(Parser.java:746)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.parsePackageMemberTypeDeclarationRest(Parser.java:492)
	at org.apache.fury.shaded.org.codehaus.janino.Parser.parseAbstractCompilationUnit(Parser.java:267)
	at org.apache.fury.shaded.org.codehaus.janino.Compiler.parseAbstractCompilationUnit(Compiler.java:316)
	at org.apache.fury.shaded.org.codehaus.janino.Compiler.compile2(Compiler.java:236)
	at org.apache.fury.shaded.org.codehaus.janino.Compiler.compile(Compiler.java:213)
	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:115)
	... 35 more

```

```java
/* 0001 */ package org.apache.spark.sql.types;
/* 0002 */ 
/* 0003 */ import org.apache.fury.Fury;
/* 0004 */ import org.apache.fury.memory.MemoryBuffer;
/* 0005 */ import org.apache.fury.resolver.MapRefResolver;
/* 0006 */ import org.apache.fury.memory.Platform;
/* 0007 */ import org.apache.fury.resolver.ClassInfo;
/* 0008 */ import org.apache.fury.resolver.ClassInfoHolder;
/* 0009 */ import org.apache.fury.resolver.ClassResolver;
/* 0010 */ import org.apache.fury.builder.Generated;
/* 0011 */ import org.apache.fury.serializer.CodegenSerializer.LazyInitBeanSerializer;
/* 0012 */ import org.apache.fury.serializer.Serializers.EnumSerializer;
/* 0013 */ import org.apache.fury.serializer.Serializer;
/* 0014 */ import org.apache.fury.serializer.StringSerializer;
/* 0015 */ import org.apache.fury.serializer.ObjectSerializer;
/* 0016 */ import org.apache.fury.serializer.CompatibleSerializer;
/* 0017 */ import org.apache.fury.serializer.collection.AbstractCollectionSerializer;
/* 0018 */ import org.apache.fury.serializer.collection.AbstractMapSerializer;
/* 0019 */ import org.apache.fury.builder.Generated.GeneratedObjectSerializer;
/* 0020 */ 
/* 0021 */ public final class DecimalTypeFuryRefCodec_1_666988784_533377181 extends GeneratedObjectSerializer {
    /* 0022 */ 
    /* 0023 */   private final MapRefResolver refResolver;
    /* 0024 */   private final ClassResolver classResolver;
    /* 0025 */   private final StringSerializer strSerializer;
    /* 0026 */   private Fury fury;
    /* 0027 */   private ClassInfo ClassInfo;
    /* 0028 */   private ClassInfo 2ClassInfo;
    /* 0029 */   private ClassInfo 4ClassInfo;
    /* 0030 */   private ClassInfo 6ClassInfo;
    /* 0031 */   private final ClassInfoHolder 8ClassInfoHolder;
    /* 0032 */   private final ClassInfoHolder 9ClassInfoHolder;
    /* 0033 */   private final ClassInfoHolder 10ClassInfoHolder;
/* 0034 */   private final ClassInfoHolder 11ClassInfoHolder;
/* 0035 */ 
/* 0036 */   public DecimalTypeFuryRefCodec_1_666988784_533377181(Fury fury, Class classType) {
    /* 0037 */       super(fury, classType);
    /* 0038 */       this.fury = fury;
    /* 0039 */       fury.getClassResolver().setSerializerIfAbsent(classType, this);
/* 0040 */   
/* 0041 */       org.apache.fury.resolver.RefResolver refResolver0 = fury.getRefResolver();
/* 0042 */       refResolver = ((MapRefResolver)refResolver0);
/* 0043 */       classResolver = fury.getClassResolver();
/* 0044 */       strSerializer = fury.getStringSerializer();
/* 0045 */       ClassInfo = classResolver.nilClassInfo();
/* 0046 */       2ClassInfo = classResolver.nilClassInfo();
/* 0047 */       4ClassInfo = classResolver.nilClassInfo();
/* 0048 */       6ClassInfo = classResolver.nilClassInfo();
/* 0049 */       8ClassInfoHolder = classResolver.nilClassInfoHolder();
/* 0050 */       9ClassInfoHolder = classResolver.nilClassInfoHolder();
/* 0051 */       10ClassInfoHolder = classResolver.nilClassInfoHolder();
/* 0052 */       11ClassInfoHolder = classResolver.nilClassInfoHolder();
/* 0053 */   }
/* 0054 */ 
/* 0055 */   private void writeClassAndObject(MemoryBuffer memoryBuffer, org.apache.spark.sql.types.Decimal. 1) {
/* 0056 */       ClassResolver classResolver = this.classResolver;
/* 0057 */       Class value = ClassInfo.getCls();
/* 0058 */       Class cls = 1.getClass();
/* 0059 */       if ((value != cls)) {
/* 0060 */           ClassInfo = classResolver.getClassInfo(cls);
/* 0061 */       }
/* 0062 */       classResolver.writeClass(memoryBuffer, ClassInfo);
/* 0063 */       ClassInfo.getSerializer().write(memoryBuffer, 1);
/* 0064 */   }
/* 0065 */ 
/* 0066 */   private void writeClassAndObject1(MemoryBuffer memoryBuffer1, org.apache.spark.sql.types.Decimal. 3) {
/* 0067 */       ClassResolver classResolver = this.classResolver;
/* 0068 */       Class value0 = 2ClassInfo.getCls();
/* 0069 */       Class cls0 = 3.getClass();
/* 0070 */       if ((value0 != cls0)) {
/* 0071 */           2ClassInfo = classResolver.getClassInfo(cls0);
/* 0072 */       }
/* 0073 */       classResolver.writeClass(memoryBuffer1, 2ClassInfo);
/* 0074 */       2ClassInfo.getSerializer().write(memoryBuffer1, 3);
/* 0075 */   }
/* 0076 */ 
/* 0077 */   private void writeClassAndObject2(MemoryBuffer memoryBuffer2, org.apache.spark.sql.types.Decimal. 5) {
/* 0078 */       ClassResolver classResolver = this.classResolver;
/* 0079 */       Class value1 = 4ClassInfo.getCls();
/* 0080 */       Class cls1 = 5.getClass();
/* 0081 */       if ((value1 != cls1)) {
/* 0082 */           4ClassInfo = classResolver.getClassInfo(cls1);
/* 0083 */       }
/* 0084 */       classResolver.writeClass(memoryBuffer2, 4ClassInfo);
/* 0085 */       4ClassInfo.getSerializer().write(memoryBuffer2, 5);
/* 0086 */   }
/* 0087 */ 
/* 0088 */   private void writeClassAndObject3(MemoryBuffer memoryBuffer3, org.apache.spark.sql.types.Decimal. 7) {
/* 0089 */       ClassResolver classResolver = this.classResolver;
/* 0090 */       Class value2 = 6ClassInfo.getCls();
/* 0091 */       Class cls2 = 7.getClass();
/* 0092 */       if ((value2 != cls2)) {
/* 0093 */           6ClassInfo = classResolver.getClassInfo(cls2);
/* 0094 */       }
/* 0095 */       classResolver.writeClass(memoryBuffer3, 6ClassInfo);
/* 0096 */       6ClassInfo.getSerializer().write(memoryBuffer3, 7);
/* 0097 */   }
/* 0098 */ 
/* 0099 */   private void writeFields(org.apache.spark.sql.types.DecimalType decimalType1, MemoryBuffer memoryBuffer4) {
/* 0100 */       MapRefResolver refResolver = this.refResolver;
/* 0101 */       Object object1 = Platform.getObject(decimalType1, 40L);
/* 0102 */       org.apache.spark.sql.types.Decimal. asIntegral = (org.apache.spark.sql.types.Decimal.)object1;
/* 0103 */       if ((!refResolver.writeRefOrNull(memoryBuffer4, asIntegral))) {
/* 0104 */           this.writeClassAndObject(memoryBuffer4, asIntegral);
/* 0105 */       }
/* 0106 */       Object object22 = Platform.getObject(decimalType1, 32L);
/* 0107 */       org.apache.spark.sql.types.Decimal. fractional = (org.apache.spark.sql.types.Decimal.)object22;
/* 0108 */       if ((!refResolver.writeRefOrNull(memoryBuffer4, fractional))) {
/* 0109 */           this.writeClassAndObject1(memoryBuffer4, fractional);
/* 0110 */       }
/* 0111 */       Object object33 = Platform.getObject(decimalType1, 28L);
/* 0112 */       org.apache.spark.sql.types.Decimal. numeric = (org.apache.spark.sql.types.Decimal.)object33;
/* 0113 */       if ((!refResolver.writeRefOrNull(memoryBuffer4, numeric))) {
/* 0114 */           this.writeClassAndObject2(memoryBuffer4, numeric);
/* 0115 */       }
/* 0116 */       Object object44 = Platform.getObject(decimalType1, 36L);
/* 0117 */       org.apache.spark.sql.types.Decimal. ordering = (org.apache.spark.sql.types.Decimal.)object44;
/* 0118 */       if ((!refResolver.writeRefOrNull(memoryBuffer4, ordering))) {
/* 0119 */           this.writeClassAndObject3(memoryBuffer4, ordering);
/* 0120 */       }
/* 0121 */   }
/* 0122 */ 
/* 0123 */   private void readFields(org.apache.spark.sql.types.DecimalType decimalType2, MemoryBuffer memoryBuffer5) {
/* 0124 */       MapRefResolver refResolver = this.refResolver;
/* 0125 */       ClassResolver classResolver = this.classResolver;
/* 0126 */       int refId = refResolver.tryPreserveRefId(memoryBuffer5);
/* 0127 */       if ((refId >= ((byte)-1))) {
/* 0128 */           Object object0 = classResolver.readClassInfo(memoryBuffer5, 8ClassInfoHolder).getSerializer().read(memoryBuffer5);
/* 0129 */           refResolver.setReadObject(refId, object0);
/* 0130 */           Platform.putObject(decimalType2, 40L, ((org.apache.spark.sql.types.Decimal.)object0));
/* 0131 */       } else {
/* 0132 */           Platform.putObject(decimalType2, 40L, ((org.apache.spark.sql.types.Decimal.)refResolver.getReadObject()));
/* 0133 */       }
/* 0134 */       int refId1 = refResolver.tryPreserveRefId(memoryBuffer5);
/* 0135 */       if ((refId1 >= ((byte)-1))) {
/* 0136 */           Object object5 = classResolver.readClassInfo(memoryBuffer5, 9ClassInfoHolder).getSerializer().read(memoryBuffer5);
/* 0137 */           refResolver.setReadObject(refId1, object5);
/* 0138 */           Platform.putObject(decimalType2, 32L, ((org.apache.spark.sql.types.Decimal.)object5));
/* 0139 */       } else {
/* 0140 */           Platform.putObject(decimalType2, 32L, ((org.apache.spark.sql.types.Decimal.)refResolver.getReadObject()));
/* 0141 */       }
/* 0142 */       int refId2 = refResolver.tryPreserveRefId(memoryBuffer5);
/* 0143 */       if ((refId2 >= ((byte)-1))) {
/* 0144 */           Object object6 = classResolver.readClassInfo(memoryBuffer5, 10ClassInfoHolder).getSerializer().read(memoryBuffer5);
/* 0145 */           refResolver.setReadObject(refId2, object6);
/* 0146 */           Platform.putObject(decimalType2, 28L, ((org.apache.spark.sql.types.Decimal.)object6));
/* 0147 */       } else {
/* 0148 */           Platform.putObject(decimalType2, 28L, ((org.apache.spark.sql.types.Decimal.)refResolver.getReadObject()));
/* 0149 */       }
/* 0150 */       int refId3 = refResolver.tryPreserveRefId(memoryBuffer5);
/* 0151 */       if ((refId3 >= ((byte)-1))) {
/* 0152 */           Object object7 = classResolver.readClassInfo(memoryBuffer5, 11ClassInfoHolder).getSerializer().read(memoryBuffer5);
/* 0153 */           refResolver.setReadObject(refId3, object7);
/* 0154 */           Platform.putObject(decimalType2, 36L, ((org.apache.spark.sql.types.Decimal.)object7));
/* 0155 */       } else {
/* 0156 */           Platform.putObject(decimalType2, 36L, ((org.apache.spark.sql.types.Decimal.)refResolver.getReadObject()));
/* 0157 */       }
/* 0158 */   }
/* 0159 */ 
/* 0160 */   @Override public final void write(MemoryBuffer buffer, Object obj) {
/* 0161 */       org.apache.spark.sql.types.DecimalType decimalType3 = (org.apache.spark.sql.types.DecimalType)obj;
/* 0162 */       buffer.grow(16);
/* 0163 */       byte[] base = buffer.getHeapMemory();
/* 0164 */       buffer._unsafeWriteVarInt32(Platform.getInt(decimalType3, 12L));
/* 0165 */       buffer._unsafeWriteVarInt32(Platform.getInt(decimalType3, 16L));
/* 0166 */       this.writeFields(decimalType3, buffer);
/* 0167 */   }
/* 0168 */ 
/* 0169 */   @Override public final Object read(MemoryBuffer buffer) {
/* 0170 */       org.apache.spark.sql.types.DecimalType decimalType4 = new org.apache.spark.sql.types.DecimalType();
/* 0171 */       refResolver.reference(decimalType4);
/* 0172 */       byte[] heapBuffer = buffer.getHeapMemory();
/* 0173 */       Platform.putInt(decimalType4, 12L, buffer._readVarInt32OnLE());
/* 0174 */       Platform.putInt(decimalType4, 16L, buffer._readVarInt32OnLE());
/* 0175 */       this.readFields(decimalType4, buffer);
/* 0176 */       return decimalType4;
/* 0177 */   }
/* 0178 */ 
/* 0179 */ }
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1658/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1664,https://api.github.com/repos/apache/fury/issues/1664,fury,2325143839,1664,[Java] Implement zstd based compressor for type metadata,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-05-30T09:06:00Z,2024-06-05T15:21:49Z,"## Is your feature request related to a problem? Please describe.
In https://github.com/apache/incubator-fury/pull/1663, we add a `MetaCompressor` interface and deflater based implementation.

Zstd has better compression rate and can learn from train corpu, we should support using zstd as meta compressor

## Describe the solution you'd like
Add a new java maven module, impement zstd based meta compressor.

## Additional context
#1663","{""url"": ""https://api.github.com/repos/apache/fury/issues/1664/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1664,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AGheU,fury,2149193620,1664,NA,wangjie-fourth,46479343,wangjie,wangjie_fourth@163.com,NA,2024-06-05T08:26:03Z,2024-06-05T08:26:03Z,"@chaokunyang 
Hi, I would like to try this. But i have question first, do i need create new maven module for this? It looks like just add new Class in `fury-core`?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AGheU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1664,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AK6ad,fury,2150344349,1664,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-05T15:21:47Z,2024-06-05T15:21:47Z,"If we add a new class directly into fury-core, we must aovid introducing a new jar dependency. MethodHandle or reflection is feasible. If we don't use reflection, we may need to add a new maven module","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AK6ad/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1669,https://api.github.com/repos/apache/fury/issues/1669,fury,2329679882,1669,"[scala]Can Fury support serializing Seq collections and case classes in Scala, and then deserializing the resulting objects into corresponding Java objects in Java?",xiaxianggo,4047903,XiaXiang,xiaxianggo@gmail.com,OPEN,2024-06-02T14:16:38Z,2024-07-21T06:27:10Z," Can furry support serializing Seq collections and case classes in Scala, and then deserializing the resulting objects into corresponding Java objects in Java?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1669/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1669,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_z2pH,fury,2144299591,1669,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-03T05:16:51Z,2024-06-03T05:16:51Z,"Hi @xiaxianggo , you can register a customized serializer for this:
```java
class SeqSerializer extends AbstractCollectionSerializer {

  @Override
  public Collection onCollectionWrite(MemoryBuffer buffer, Object value) {

  }

  @Override
  public Object read(MemoryBuffer buffer) {

  }

  @Override
  public Collection newCollection(MemoryBuffer buffer) {
    int numElements = buffer.readVarUint32Small7();
    setNumElements(numElements);
    ArrayList arrayList = new ArrayList(numElements);
    fury.getRefResolver().reference(arrayList);
    return arrayList;
  }

  @Override
  public Object onCollectionRead(Collection collection) {

  }
}
```

Take `org.apache.fury.serializer.collection.CollectionSerializers.ArrayListSerializer` as an example","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc5_z2pH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1670,https://api.github.com/repos/apache/fury/issues/1670,fury,2330196840,1670,[JavaScript] Type Forward/Backward compatible object serialization for Fury JavaScript ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-06-03T05:20:20Z,2025-01-29T04:01:06Z,"## Is your feature request related to a problem? Please describe.

Type forward and backward compatible serialization is a common requirement for RPC between microservices. As the calling and receiving ends of the service are deployed and upgraded independently, the serialized objects may exist in different versions across services.

The object structure may have a different number of fields between services. Serialization frameworks need to be able to efficiently support object serialization under situations of type inconsistency between the two ends, ensuring accuracy while providing more compact data and extreme performance.

The Flatbuffer serialization framework suffers from significant data inflation and lacks flexibility, whereas Protobuf achieves type forward and backward compatibility through a KV structure. For each field of the object, during serialization, the object's TAG and type are written.

During deserialization, this information can be used to skip fields not present in the current version. This approach incurs additional performance overhead and space overhead for Message List serialization.

Fury has designed a type compatibility protocol based on metadata compression shared, which at runtime, performs extreme compression of the object's field names and types and other metadata, and shares it across multiple object serializations to minimize metadata overhead. Furthermore, based on this metadata, a deserializer fully consistent with serialization can be dynamically generated during deserialization, completely solving the issues of performance, usability, and space redundancy.

The detailed spec can be fount at https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#schema-evolution

## Describe the solution you'd like

- [ ] #1671
- [ ] #1672
- [ ] #1673
- [ ] #1674


## Additional context
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1670/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1670,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DaZFO,fury,2204733774,1670,NA,Forchapeatl,24577149,FORCHA PEARL,forchapearl1@gmail.com,NA,2024-07-02T23:58:32Z,2024-07-02T23:58:32Z,"Hi @chaokunyang , please Could you provide more details on the specific requirements , expected results and constraints for the JavaScript implementations. Are these features independent or does one affect the other ?  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DaZFO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1670,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D5h9C,fury,2212896578,1670,NA,Forchapeatl,24577149,FORCHA PEARL,forchapearl1@gmail.com,NA,2024-07-08T03:08:57Z,2024-07-08T03:08:57Z,"Hello @theweipeng , please can shed some light here.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D5h9C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1670,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GaKGE,fury,2255004036,1670,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-07-29T05:56:35Z,2024-07-29T05:56:35Z,"> Hello @theweipeng , please can shed some light here.

Thanks for your great work on the MetaString.
The main goal of Forward/Backward compatibility is to generate code at runtime. 
Currently, we have implemented the MetaString compression algorithm, but we are unable to pass the JSON string to the other endpoint, as the metadata we communicate across languages will be packed into binary. 
The binary layout is described in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#type-meta. 
Therefore, could you please implement the 'type meta' part of our protocol.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GaKGE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1670,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cNAdt,fury,2620655469,1670,NA,Forchapeatl,24577149,FORCHA PEARL,forchapearl1@gmail.com,NA,2025-01-29T03:34:48Z,2025-01-29T03:34:48Z,"@chaokunyang  ,  please close this issue and all javascript issues that have a merged Pull Request.  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cNAdt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1671,https://api.github.com/repos/apache/fury/issues/1671,fury,2330199540,1671,[JavaScript] Implement the object metadata compression protocol,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-03T05:23:01Z,2024-06-03T05:28:31Z,"## Is your feature request related to a problem? Please describe.

Implement the object metadata compression protocol: type metadata encoding and parsing.

## Describe the solution you'd like

#1556 can be taken as an example to type meta encoding. 

Note that #1556 is only for type meta in java serialization, not for type encoding in java for xlang serialization
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1671/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1672,https://api.github.com/repos/apache/fury/issues/1672,fury,2330199608,1672,[JavaScript] Support generating deserializers based on the type metadata parsed during deserialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-03T05:23:04Z,2024-06-03T05:24:11Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1672/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1673,https://api.github.com/repos/apache/fury/issues/1673,fury,2330199672,1673,[JavaScript] Implement metadatascoped share mode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-03T05:23:07Z,2024-06-03T05:24:02Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1673/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1674,https://api.github.com/repos/apache/fury/issues/1674,fury,2330199732,1674,[JavaScript] Support encoding field names with varint in type metadata,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-03T05:23:11Z,2024-06-03T05:23:48Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1674/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1676,https://api.github.com/repos/apache/fury/issues/1676,fury,2335775489,1676,[Rust] About Enum Naming ,Xuanwo,5351546,Xuanwo,github@xuanwo.io,CLOSED,2024-06-05T12:28:44Z,2024-06-07T05:47:14Z,"## Is your feature request related to a problem? Please describe.

Our current rust naming doesn't fit well with most rust projects.

https://github.com/apache/incubator-fury/blob/31d37f9cf2021899f3dc2f1b06d5b45e79099251/rust/fury/src/types.rs#L156-L183

Clippy will complain about:

```shell
error: name `JAVASCRIPT` contains a capitalized acronym
   --> fury/src/types.rs:254:5
    |
254 |     JAVASCRIPT = 5,
    |     ^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Javascript`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms
```

Do those names align with our protocol? Can we change them for better clarity?

## Describe the solution you'd like

Update namings to make rust clippy happy.

## Additional context

None.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1676/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1676,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AIo3W,fury,2149748182,1676,NA,Xuanwo,5351546,Xuanwo,github@xuanwo.io,NA,2024-06-05T12:40:36Z,2024-06-05T12:40:36Z,cc @chaokunyang for ideas.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AIo3W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1676,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AKXxY,fury,2150202456,1676,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-05T14:34:39Z,2024-06-05T14:34:39Z,"Our protocol doesn't enforce name convention for enum names. I think we should align with rust name conventions.

How do you think? @theweipeng ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AKXxY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1676,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AOwYc,fury,2151351836,1676,NA,theweipeng,16490211,weipeng,wangweipeng@apache.org,NA,2024-06-06T03:38:31Z,2024-06-06T03:38:31Z,"> Our protocol doesn't enforce name convention for enum names. I think we should align with rust name conventions.
> 
> 
> 
> How do you think? @theweipeng 

Yes, the language enum just flags the language in the protocol. Currently, Rust is just compatible with xlang. We should align with rust name conventions.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AOwYc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1676,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AO19e,fury,2151374686,1676,NA,Xuanwo,5351546,Xuanwo,github@xuanwo.io,NA,2024-06-06T04:10:25Z,2024-06-06T04:10:25Z,"Great, seems we have reached consensus. Please assign this issue to me. I'm willing to help address this.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6AO19e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1679,https://api.github.com/repos/apache/fury/issues/1679,fury,2346667488,1679,[Java] fast object copy framework in fury java,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-11T15:03:27Z,2024-06-11T15:06:21Z,"## Is your feature request related to a problem? Please describe.
Deep copy is common in programing to avoid modify existing data, which may introduce side effect and subtle bugs.

Currently fury doesn't support copy natively, users need to serialized data into binary, then deserialize it into object. This is costly, it introduce extra copy, and for immutable objects such as string, time objects, boxed objects, there is no need to copy.

## Describe the solution you'd like

We should support copy natively in fury:
- Design a copy interface
- Make`Serializer` implement the copy interface, throw UnsupportedException by default.
- For non-jit serializer, override the copy interface to implement copy
- For immutable object such as `String`, `java.time`, just return itself
- For mutable object, create new object and set all attributes
- For pojo/bean/record object, implement the copy in a separate class, and forward the copy to that class to reuse the copy implementation in `ObjectSerializer/CompatibleObjectSerializer`

## Additional context
#1014","{""url"": ""https://api.github.com/repos/apache/fury/issues/1679/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1680,https://api.github.com/repos/apache/fury/issues/1680,fury,2346670982,1680,[Java] fast object copy implementation using JIT codegen,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-06-11T15:05:05Z,2024-06-11T15:06:05Z,"## Is your feature request related to a problem? Please describe.
In #1679 , the copy is implemented using loop and branch. We can optimize it by generate code to copy object attributes recusively.

## Describe the solution you'd like
- For JIT serializer, don't generate copy code in previous serializer builder. copy is not needed by all scenarios, generate code for copy will make the jit slower and use more metaspace.
-  Instead, we should generate a class which implement the copy interface and forward the copy to that class. 

For example, we can add a copy forward implemetation in `io.fury.builder.Generated.GeneratedSerializer`:
```java
    public Object copy(Object o) {
      Copy copier = this.copier;
      if (copier == null) {
        this.copier = copier = classResolver.getJITCopier(o.getClass());
      }
      return copier.copy(o);
    }
```
## Additional context
#1679  #1014","{""url"": ""https://api.github.com/repos/apache/fury/issues/1680/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1682,https://api.github.com/repos/apache/fury/issues/1682,fury,2346834677,1682,Doc: Broken link on website,sebbASF,16689231,Sebb,,CLOSED,2024-06-11T16:26:29Z,2024-07-21T06:26:43Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

NA

### Component(s)

Other

### Minimal reproduce step

https://github.com/apache/incubator-fury-site
Click README.md
Click DISCLAIMER

### What did you expect to see?

The DISCLAIMER text

### What did you see instead?

404 - page not found

### Anything Else?

This form is not really suitable for reporting issues with the website

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1682/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1682,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6A0UTz,fury,2161198323,1682,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-11T16:43:36Z,2024-06-11T16:43:36Z,"Hi @sebbASF , thanks for reporting this issue, I fixed it in https://github.com/apache/incubator-fury-site/pull/129","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6A0UTz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/1683,fury,2347757751,1683,[Scala] support default not-null value in COMPATIBLE mode.,LoranceChen,8775828,LoranceChen,,OPEN,2024-06-12T04:05:32Z,2024-12-04T05:23:54Z,"Currently, for scala, add new field and deserialize from old binary data will get a `null` as new field value. But avoid null is a good practice in scala language.
```scala
  val personBytes = readBytesFromFile(""person_v1"") // there are old version `Person(1,true,some text)`
  //  append field as new person: case class Person(a: Int, b: Boolean, c: String, d: String = ""default d"")
  val deserPerson = fury.deserializeJavaObject(personBytes, classOf[Person])
  println(s""deserPerson: ${deserPerson}"") // deserPerson: Person(1,true,some text,null)
```

I think it's better using default value our a empty value to set the new field. Such as give the result:
```scala
// deserPerson: Person(1,true,some text, ""default d"")
```
And if there not a default value in the field define, can give a empty value. For String is `""""` will be better for null.

If the new field is a structure, can using a default value to instance this one.
`case class Foo(a: String, b: Int)` can setting the default value as `Foo("""", 0)`

However, for some performance care scenario. Using `null` should be better and handle by developer.

I'm advice add a new configuration to decide using the default value or `null` for new field.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1683/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BchHa,fury,2171736538,1683,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-16T15:09:04Z,2024-06-16T15:09:04Z,"Hi @LoranceChen , thanks for bring this up. It's very necessary to support this in Apache Fury.

Scala didn't provide a method to construct object with default value at bytecode level. It generate bytecode to invoke constructor with all parameters provided, and default params are provided at callsite. 

If we need to provide default value when creating object, we need to extract the default value. Fortunately, scala generate a 
method like `SomeClass$.apply$default$2:()I`:

```scala
case class SomeClass(v: List[IdAnyVal], x:Int=1)

// Callsite bytecode
      34: getstatic     #131                // Field org/apache/fury/serializer/SomeClass$.MODULE$:Lorg/apache/fury/serializer/SomeClass$;
      37: invokevirtual #135                // Method org/apache/fury/serializer/SomeClass$.apply$default$2:()I
      40: invokespecial #138                // Method org/apache/fury/serializer/SomeClass.""<init>"":(Lscala/collection/immutable/List;I)V
      43: putstatic     #87                 // Field p:Lorg/apache/fury/serializer/SomeClass;
      46: getstatic     #143                // Field scala/Predef$.MODULE$:Lscala/Predef$;
```

We may can detect whether such method exists to know which parameter has default value, and provide it as default value when constructing object. This will take some horse work. We don't have time for this currently. Would you like to contribute to this? The `record` contructor in Fury `org.apache.fury.builder.ObjectCodecBuilder#createRecord/org.apache.fury.serializer.ObjectSerializer#read` can be taken as an example.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BchHa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Bdueg,fury,2172053408,1683,NA,LoranceChen,8775828,LoranceChen,,NA,2024-06-17T02:21:15Z,2024-06-17T02:21:15Z,"Hi, great to see can solve it.
Glade to take a PR if possiable and I need sometime to familiar with the repository.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Bdueg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BdzBA,fury,2172072000,1683,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-17T02:45:50Z,2024-06-17T02:45:50Z,"If the field doesn't exist in serialization process, but does exist in deserialization process, we can invoke method like ` SomeClass$.apply$default$2:()I` to get default value for such field, and set it the object","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6BdzBA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DT5wQ,fury,2203032592,1683,NA,LoranceChen,8775828,LoranceChen,,NA,2024-07-02T12:26:33Z,2024-07-02T12:26:33Z,"Hi, @chaokunyang , do you some advice to debug the codegen init process?
The generated code seems not easy to trace the logic where it is.
![image](https://github.com/apache/fury/assets/8775828/00c82564-c342-41af-ab51-00d3bd88f348)

Thanks
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DT5wQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DT-0u,fury,2203053358,1683,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-02T12:37:11Z,2024-07-02T12:37:11Z,"You can configure FURY_CODE_DIR environment variable to set generated code dir, if you set it to src directory, then you can debug it in IDE when rerun the code","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DT-0u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1683,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V-oVw,fury,2516223344,1683,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-04T05:23:52Z,2024-12-04T05:23:52Z,"Hi @LoranceChen , are you still working on this issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V-oVw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1685,https://api.github.com/repos/apache/fury/issues/1685,fury,2347773491,1685,[Scala] proposol a new capability mode for maintain core data strucutre in the server,LoranceChen,8775828,LoranceChen,,OPEN,2024-06-12T04:23:13Z,2024-06-12T06:23:11Z,"[Background]
For safe maintain core persistence data compatible are the most consider things in server-side.
In many server-side project, only add new field in every new release version and carefully delete existing field is a good practice usually.

Our `COMPATIBLE` mode are not check for delete field. There are difficult check safty when release new version. 

[Advice]
Add a new `CompatibleMode` only allow add new field and explicitly give a register process allow ignore field. Such as:
```scala
case class Foo(a: Int, b: String, c: Long)

val fury = Fury.builder()..withCompatibleMode(CompatibleMode.ALLOW_NEW_FIELD).build()
fury.registerDeletableField(""Foo.c"") // which means Foo.c bytes data can ignored when doing deserilaize process.
```
This can give a great help to check new release version are safe on data structure level.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1685/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1687,https://api.github.com/repos/apache/fury/issues/1687,fury,2352696847,1687,[Java] Snapshot Jar not uploaded,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-06-14T07:14:35Z,2024-06-14T09:46:57Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

Java

### Minimal reproduce step
https://repository.apache.org/content/groups/snapshots/org/apache/fury/fury-core/
![image](https://github.com/apache/fury/assets/12445254/728a3496-aa98-4346-a195-2bc0bdc7f04d)


### What did you expect to see?

0.6.0-SNAPSHOT jar

### What did you see instead?

0.5.0-SNAPSHOT jar

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1687/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1692,https://api.github.com/repos/apache/fury/issues/1692,fury,2363370073,1692," Meta context must be set before serialization, please set meta context by SerializationContext.setMetaContext",naah69,25682169,Naah,nayan3480232@163.com,CLOSED,2024-06-20T02:15:47Z,2024-09-13T06:38:15Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

java：jdk17
fury：0.5.0

### Component(s)

Java

### Minimal reproduce step

when use multithread

```java
    private static ThreadSafeFury getBuildThreadSafeFury() {
        return Fury.builder().withLanguage(Language.JAVA)
                   .requireClassRegistration(false)
                   .withRefTracking(false)
                   .withMetaContextShare(true)
                   .withIntCompressed(true)
                   .withLongCompressed(true)
                   .withStringCompressed(true)
                   .withCompatibleMode(CompatibleMode.COMPATIBLE)
                   .withClassLoader(CLASS_LOADER)
                   .buildThreadSafeFury();
    }

 fury.serialize(source);
```

### What did you expect to see?

no exception

### What did you see instead?

```log
java.lang.NullPointerException: Meta context must be set before serialization, please set meta context by SerializationContext.setMetaContext
    at org.apache.fury.util.Preconditions.checkNotNull(Preconditions.java:33)
    at org.apache.fury.resolver.ClassResolver.writeClassWithMetaShare(ClassResolver.java:1256)
    at org.apache.fury.resolver.ClassResolver.writeClass(ClassResolver.java:1240)
    at org.apache.fury.Fury.write(Fury.java:313)
    at org.apache.fury.Fury.serialize(Fury.java:248)
    at org.apache.fury.Fury.serialize(Fury.java:220)
    at org.apache.fury.ThreadLocalFury.serialize(ThreadLocalFury.java:91)
    at com.mindflow.common.event.recovery.EventBusExceptionRecover.serializeObject(EventBusExceptionRecover.java:157)
    at com.mindflow.common.event.recovery.EventBusExceptionRecover.save(EventBusExceptionRecover.java:108)
    at com.mindflow.common.exception.mapper.EventExceptionMapper.lambda$handle$1(EventExceptionMapper.java:66)
    at java.util.Optional.ifPresent(Optional.java:178)
    at com.mindflow.common.exception.mapper.EventExceptionMapper.lambda$handle$2(EventExceptionMapper.java:66)
    at java.util.Optional.ifPresent(Optional.java:178)
    at com.mindflow.common.exception.mapper.EventExceptionMapper.handle(EventExceptionMapper.java:66)
    at com.mindflow.common.exception.mapper.EventExceptionMapper.handle(EventExceptionMapper.java:30)
    at io.vertx.core.impl.ContextBase.reportException(ContextBase.java:199)
    at io.vertx.core.impl.DuplicatedContext.reportException(DuplicatedContext.java:108)
    at io.vertx.core.impl.future.FutureImpl$2.onFailure(FutureImpl.java:117)
    at io.vertx.core.impl.future.FutureBase.lambda$emitFailure$1(FutureBase.java:69)
    at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
    at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
    at java.lang.Thread.run(Thread.java:833)
```

### Anything Else?
<img width=""871"" alt=""image"" src=""https://github.com/apache/fury/assets/25682169/33f596d1-b75d-48be-bde5-8a50ac27606b"">
<img width=""873"" alt=""image"" src=""https://github.com/apache/fury/assets/25682169/3b596d9e-159e-4f64-9743-21a20d438f19"">


### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1692/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1692,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6B7Nz3,fury,2179783927,1692,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-20T04:30:37Z,2024-06-20T04:30:37Z,"As the error message said, you need to set meta context before serializing. This is an advanced feature. We have a new option scopedMetaShare, which can set meta context automatically, but it is still in main branch","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6B7Nz3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1693,https://api.github.com/repos/apache/fury/issues/1693,fury,2363860828,1693,C++,yangzeyi666,171243301,,,OPEN,2024-06-20T08:34:00Z,2024-06-29T11:04:55Z,能够补充提供下C++的示例demo吗？在官网未看到,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1693/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1693,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DBHII,fury,2198106632,1693,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-29T11:03:51Z,2024-06-29T11:03:51Z,"The C++ implementation is not stable yet, we plan to provide more detailed document after we make it more complete.

Currently the fury c++ use bazel to build and referenced the arrow lib, we may need to provide cmake based build in the future. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DBHII/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1695,https://api.github.com/repos/apache/fury/issues/1695,fury,2364968768,1695,Fury eagerly loads non-base module classes,mtf90,7063944,Markus Frohme,,OPEN,2024-06-20T17:55:22Z,2024-06-21T16:52:48Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury 0.5.1, as released on Maven Central

```
mvn --version
Apache Maven 3.9.7 (8b094c9513efc1b9ce2d952b3b9c8eaedaf8cbf0)
Maven home: /usr/share/java/maven
Java version: 11.0.23, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk
Default locale: de_DE, platform encoding: UTF-8
OS name: ""linux"", version: ""6.9.5-arch1-1"", arch: ""amd64"", family: ""unix""
```

### Component(s)

Java

### Minimal reproduce step

`pom.xml`:
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.mtf90</groupId>
    <artifactId>fury-module</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>11</maven.compiler.release>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.fury</groupId>
            <artifactId>fury-core</artifactId>
            <version>0.5.1</version>
        </dependency>
    </dependencies>
</project>
```

`module-info.java`:
```java
module com.github.mtf90.fury {
    requires org.apache.fury.core;
}
```

Application:
```java
package com.github.mtf90;

import org.apache.fury.Fury;

public class App {

    public static void main(String[] args) {
        Fury fury = Fury.builder().requireClassRegistration(false).build();
        fury.serialize(new MyObject());
    }

    static class MyObject {}

}
```


### What did you expect to see?

The programm should run without any issues.

### What did you see instead?

```
java.lang.NoClassDefFoundError: java/sql/Date
	at org.apache.fury.core@0.5.1/org.apache.fury.type.TypeUtils.<clinit>(TypeUtils.java:86)
	at org.apache.fury.core@0.5.1/org.apache.fury.resolver.ClassResolver.<init>(ClassResolver.java:265)
	at org.apache.fury.core@0.5.1/org.apache.fury.Fury.<init>(Fury.java:134)
	at org.apache.fury.core@0.5.1/org.apache.fury.config.FuryBuilder.newFury(FuryBuilder.java:332)
	at org.apache.fury.core@0.5.1/org.apache.fury.config.FuryBuilder.build(FuryBuilder.java:347)
	at com.github.mtf90.fury/com.github.mtf90.App.main(App.java:8)
Caused by: java.lang.ClassNotFoundException: java.sql.Date
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:527)
	... 6 more
Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at org.apache.fury.core@0.5.1/org.apache.fury.memory.Platform.<clinit>(Platform.java:34)
	at org.apache.fury.core@0.5.1/org.apache.fury.config.FuryBuilder.newFury(FuryBuilder.java:336)
	at org.apache.fury.core@0.5.1/org.apache.fury.config.FuryBuilder.build(FuryBuilder.java:347)
	at com.github.mtf90.fury/com.github.mtf90.App.main(App.java:8)
Caused by: java.lang.UnsupportedOperationException: Unsafe is not supported in this platform.
	at org.apache.fury.core@0.5.1/org.apache.fury.util.unsafe._JDKAccess.<clinit>(_JDKAccess.java:76)
	... 4 more
```

### Anything Else?

As far as I can tell, this is issue comes down to the static initializations in the `TypeUtils` class which load the classes `java.sql.Date` and `java.sql.Timestamp`. You can workaround this issue by adding

``` java
requires java.sql;
requires jdk.unsupported;
```

to the `module-info.java`. However, I would argue that Fury should not force users to add (even unsupported) dependencies to their project that are not actually needed. I'm not sure about the direct dependencies here (i.e., whether the `Unsafe` stuff is only needed as a fallback since it doesn't find `Date` in the first place).

Given that the types are initialized via `TypeRef.of(Date.class)` and `TypeDef.of(Timestamp.class)` (i.e., there does not happen any major background magic) the initializations may simply be removed as they can be easily added in user-land if needed?

Alternatively, they could be added on-demand, e.g., only if user-land actually uses these types. Although this could be a little bit complicated given the static nature of the initialization.

A third idea may be to look at `java.util.Date` as potential substitute for at least `java.sql.Date`.

*Edit: A fourth idea would be to actually declare `java.sql` and `jdk.unsupported` as transitive dependencies of the `fury.core` module. However, this would require Fury to support full JPMS modules and not just `Automatic-Module-Names` (cf. #1341).*

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1695/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1695,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CH4U2,fury,2183103798,1695,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-21T16:52:47Z,2024-06-21T16:52:47Z,"Lazy on-demand loading is better, we may be maintain a classname to class Id and serializer map in ClassResolver. This is also useful if some class doesn't existin some version but we need put a placeholder for class id in class resolver","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CH4U2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1700,https://api.github.com/repos/apache/fury/issues/1700,fury,2374460643,1700,RuntimeException: Create sequential serializer failed,galaxyxym,84667613,,,CLOSED,2024-06-26T06:31:25Z,2024-06-30T11:05:20Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury: 0.6.0.SNAPSHOT
os: linux
jdk: openjdk8
fastjson: 1.2.70

### Component(s)

Java

### Minimal reproduce step

```
public class TestMain {

    static ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withRefTracking(true)
            .registerGuavaTypes(false)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .withScopedMetaShare(true)
            .buildThreadSafeFury();

    public static void main(String[] args) {
        DemoResponse resp = new DemoResponse();
        byte[] serialize = fury.serialize(resp);
        System.out.println(""size:"" + serialize.length);
    }
}


import com.alibaba.fastjson.JSONObject;
@Data
public class DemoResponse {

    private List<JSONObject> jsonObjs;

    public DemoResponse() {

    }
}
```

### What did you expect to see?

serialize successfully

### What did you see instead?
```
RuntimeException: Create sequential serializer failed

Caused by: org.apache.fury.codegen.CodegenException: Compile error: 

DemoResponseFuryRefCodec_1_1309552426_1675763772.java', Line 88, Column 13: Expression ""value0"" is not an rvalue
```
```
/* 0086 */   private void writeMap(MemoryBuffer memoryBuffer2, com.alibaba.fastjson.JSONObject jSONObject1) {
/* 0087 */       AbstractMapSerializer abstractMapSerializer0;
/* 0088 */       if (((value0 & 4) != 4)) {
/* 0089 */           abstractMapSerializer0 = jDKCompatibleMapSerializer;
/* 0090 */       } else {
/* 0091 */           abstractMapSerializer0 = ((AbstractMapSerializer)jSONObjectClassInfoHolder.getSerializer());
/* 0092 */       }
/* 0093 */       
/* 0094 */       if (abstractMapSerializer0.supportCodegenHook()) {
/* 0095 */           java.util.Map map = abstractMapSerializer0.onMapWrite(memoryBuffer2, jSONObject1);
/* 0096 */           java.util.Set entrySet = map.entrySet();
/* 0097 */           java.util.Iterator iter = entrySet.iterator();
/* 0098 */           int i0 = 0;
/* 0099 */           while (iter.hasNext()) {
/* 0100 */               Object elemValue = iter.next();
/* 0101 */               java.util.Map.Entry entry = (java.util.Map.Entry)elemValue;
/* 0102 */               Object keyObj = entry.getKey();
/* 0103 */               String key = (String)keyObj;
/* 0104 */               if ((key == null)) {
/* 0105 */                   memoryBuffer2.writeByte(((byte)-3));
/* 0106 */               } else {
/* 0107 */                   memoryBuffer2.writeByte(((byte)0));
/* 0108 */                   strSerializer.writeCharsStringCompressed(memoryBuffer2, key);
/* 0109 */               }
/* 0110 */               Object valueObj = entry.getValue();
/* 0111 */               if ((!refResolver.writeRefOrNull(memoryBuffer2, valueObj))) {
/* 0112 */                   this.writeClassAndObject(memoryBuffer2, valueObj);
/* 0113 */               }
/* 0114 */               i0++;
/* 0115 */           }
/* 0116 */       } else {
/* 0117 */           abstractMapSerializer0.write(memoryBuffer2, jSONObject1);
/* 0118 */       }
/* 0119 */   }
```

### Anything Else?

serialize ok when withScopedMetaShare ""false"", 
but failed when withScopedMetaShare ""true"" or withMetaContextShare ""true"" or withMetaShare ""true""
0.5.1 version also has this problem

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1700/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1700,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Cl1Vq,fury,2190955882,1700,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-26T06:57:22Z,2024-06-26T06:57:22Z,@galaxyxym which fastjson version are you using? could you provide your maven dependency config,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Cl1Vq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1700,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CmGMn,fury,2191024935,1700,NA,galaxyxym,84667613,,,NA,2024-06-26T07:37:33Z,2024-06-26T07:37:33Z,"> @galaxyxym which fastjson version are you using? could you provide your maven dependency config

Hi, version is com.alibaba:fastjson:1.2.70

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CmGMn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1703,https://api.github.com/repos/apache/fury/issues/1703,fury,2376944086,1703,[Java] Move StringSerializer#isLatin to StringUtils,LiangliangSui,116876207,,,CLOSED,2024-06-27T03:48:48Z,2024-06-29T11:01:38Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

Currently, the `isLatin(char[])` judgment is coupled in `org.apache.fury.serializer.StringSerializer`, but it is not strongly related to `org.apache.fury.serializer.StringSerializer`. `org.apache.fury.serializer.StringSerializer` is only responsible for serializing related content.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->
`isLatin(char[])` should be moved to `org.apache.fury.util.StringUtils`

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1703/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1703,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CvSh6,fury,2193434746,1703,NA,LiangliangSui,116876207,,,NA,2024-06-27T03:49:44Z,2024-06-27T03:49:44Z,Maybe we can add a good first issue label to the current task.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CvSh6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/1704,fury,2377018308,1704,[Java] NPE when serializing with withMetaShare,LiangliangSui,116876207,,,CLOSED,2024-06-27T04:04:05Z,2024-07-01T09:50:45Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main branch

### Component(s)

Java

### Minimal reproduce step

```java
public void repoduct() {
    Fury fury =
        Fury.builder()
            .withRefTracking(true)
            .requireClassRegistration(false)
            .withMetaShare(true)
            .build();
    String str = ""Hello world"";
    byte[] bytes = fury.serialize(str);
    Object obj = fury.deserialize(bytes);
}
```

### What did you expect to see?

Serialization and deserialization succeeded.

### What did you see instead?

```
java.lang.NullPointerException
	at org.apache.fury.resolver.ClassResolver.writeClassDefs(ClassResolver.java:1412)
	at org.apache.fury.Fury.write(Fury.java:322)
	at org.apache.fury.Fury.serialize(Fury.java:251)
	at org.apache.fury.Fury.serialize(Fury.java:205)
```

### Anything Else?

```java
  public SerializationContext(Config config) {
    scopedMetaShareEnabled = config.isScopedMetaShareEnabled();
    if (scopedMetaShareEnabled) {
      metaContext = new MetaContext();
    }
  }
```
`MetaContext` is created only when `scopedMetaShareEnabled`. We should change it to create `MetaContext` only when `withMetaShare` is enabled.

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1704/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CxWs3,fury,2193976119,1704,NA,LiangliangSui,116876207,,,NA,2024-06-27T07:22:00Z,2024-06-27T07:22:00Z,"Could we instantiate a `MetaContext` object in the `SerializationContext constructor` with `withMetaShare` enabled, without requiring the user to manually set a `MetaContext` instance through the `SerializationContext#setMetaContext` interface?

For example, the following implementation.

```java
package org.apache.fury.resolver;

import java.util.IdentityHashMap;
import org.apache.fury.config.Config;
import org.apache.fury.config.FuryBuilder;

/**
 * A context is used to add some context-related information, so that the serializers can set up
 * relation between serializing different objects. The context will be reset after finished
 * serializing/deserializing the object tree.
 */
public final class SerializationContext {
  private final IdentityHashMap<Object, Object> objects = new IdentityHashMap<>();
  private final boolean scopedMetaShareEnabled;
  private final boolean withMetaShare;
  private MetaContext metaContext;

  public SerializationContext(Config config) {
    scopedMetaShareEnabled = config.isScopedMetaShareEnabled();
    withMetaShare = config.isMetaShareEnabled();
    if (withMetaShare) {
      metaContext = new MetaContext();
    }
  }

  /** Return the previous value associated with <tt>key</tt>, or <tt>null</tt>. */
  public Object add(Object key, Object value) {
    return objects.put(key, value);
  }

  public boolean containsKey(Object key) {
    return objects.containsKey(key);
  }

  public Object get(Object key) {
    return objects.get(key);
  }

  public MetaContext getMetaContext() {
    return metaContext;
  }

  /**
   * Set meta context, which can be used to share data across multiple serialization call. Note that
   * {@code metaContext} will be cleared after the serialization is finished. Please set the context
   * before every serialization if metaShare is enabled by {@link FuryBuilder#withMetaShare(boolean)}
   */
  public void setMetaContext(MetaContext metaContext) {
    this.metaContext = metaContext;
  }

  public void resetWrite() {
    if (!objects.isEmpty()) {
      objects.clear();
    }
    if (scopedMetaShareEnabled) {
      metaContext.classMap.clear();
      metaContext.writingClassDefs.clear();
    } else if (withMetaShare) {
      metaContext = new MetaContext();
    } else {
      metaContext = null;
    }
  }

  public void resetRead() {
    if (!objects.isEmpty()) {
      objects.clear();
    }
    if (scopedMetaShareEnabled) {
      metaContext.readClassInfos.clear();
      metaContext.readClassDefs.clear();
    } else if (withMetaShare) {
      metaContext = new MetaContext();
    } else {
      metaContext = null;
    }
  }

  public void reset() {
    if (!objects.isEmpty()) {
      objects.clear();
    }
    if (scopedMetaShareEnabled) {
      metaContext.classMap.clear();
      metaContext.writingClassDefs.clear();
      metaContext.readClassInfos.clear();
      metaContext.readClassDefs.clear();
    } else if (withMetaShare) {
      metaContext = new MetaContext();
    } else {
      metaContext = null;
    }
  }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6CxWs3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DC9Zd,fury,2198591069,1704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-06-30T15:02:42Z,2024-06-30T15:02:42Z,"No, we can't. That's what scopedMetaShare option do. We will make it as the default option in the future. But the meta share itself, will always need to set MetaContext. As you can see, the NPE here is throw by fury on purpose
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DC9Zd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFKXd,fury,2199168477,1704,NA,LiangliangSui,116876207,,,NA,2024-07-01T03:39:34Z,2024-07-01T03:39:34Z,Users will not use the created MetaContext directly. What is the purpose of letting users set MetaContext through the setMetaContext interface? Is it just to let users know that MetaContext is shared between multiple serializations?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFKXd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFLJQ,fury,2199171664,1704,NA,LiangliangSui,116876207,,,NA,2024-07-01T03:44:03Z,2024-07-01T03:44:03Z,"If we just want to let users know that MetaContext is shared between multiple serializations, can we explain this problem in the withMetaShare option?

Our goal should be to let users know that MetaContext is shared between multiple serializations, and it can be set optionally through the setMetaContext interface, rather than forcing users to set it when enabling withMetaShare.

I don't know if I understand it correctly","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFLJQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFnLG,fury,2199286470,1704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-01T05:45:51Z,2024-07-01T05:45:51Z,I think adding a precheck in `org.apache.fury.resolver.ClassResolver#writeClassDefs` is enough. We can provide a detailed error message to indicate users need to set MetaContext here.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFnLG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFntc,fury,2199288668,1704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-01T05:47:55Z,2024-07-01T05:47:55Z,"> If we just want to let users know that MetaContext is shared between multiple serializations, can we explain this problem in the withMetaShare option?
> 
> Our goal should be to let users know that MetaContext is shared between multiple serializations, and it can be set optionally through the setMetaContext interface, rather than forcing users to set it when enabling withMetaShare.
> 
> I don't know if I understand it correctly

Not exactly, users will use this API directly, as you can see from the use case:
```java
  public void testSimpleRecordMetaShared(boolean codegen) {
    Fury fury =
        Fury.builder()
            .requireClassRegistration(false)
            .withCodegen(codegen)
            .withMetaShare(true)
            .build();
    Foo foo = new Foo(10, ""abc"", new ArrayList<>(Arrays.asList(""a"", ""b"")), 'x');
    MetaContext context = new MetaContext();
    fury.getSerializationContext().setMetaContext(context);
    byte[] bytes = fury.serialize(foo);
    fury.getSerializationContext().setMetaContext(context);
    Assert.assertEquals(fury.deserialize(bytes), foo);
  }
```

This will be used by rpc framework too reuse meta across multiple serializaition. Or used by bigdata frameworks to serialize data by batch.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFntc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DF0Ef,fury,2199339295,1704,NA,LiangliangSui,116876207,,,NA,2024-07-01T06:27:41Z,2024-07-01T06:27:41Z,"> Not exactly, users will use this API directly, as you can see from the use case:

I mean that users will not directly use any API and data in MetaContext, but it is exposed to users.

> This will be used by rpc framework too reuse meta across multiple serializaition. Or used by bigdata frameworks to serialize data by batch.

I have another question, will MetaContext be shared across different Fury objects?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DF0Ef/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHFpL,fury,2199673419,1704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-01T09:30:31Z,2024-07-01T09:30:31Z,"Users will use this API:
```java
  @Test(dataProvider = ""codegen"")
  public void testBatch(boolean codegen) {
    Fury fury =
        Fury.builder()
            .requireClassRegistration(false)
            .withCodegen(codegen)
            .withMetaShare(true)
            .build();
    MetaContext context = new MetaContext();
    for (int i = 0; i < 10000; i++) {
      Foo foo = new Foo(10, ""abc"", new ArrayList<>(Arrays.asList(""a"", ""b"")), 'x');
      fury.getSerializationContext().setMetaContext(context);
      byte[] bytes = fury.serialize(foo);
      fury.getSerializationContext().setMetaContext(context);
      Assert.assertEquals(fury.deserialize(bytes), foo);
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHFpL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHF9m,fury,2199674726,1704,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-01T09:31:07Z,2024-07-01T09:31:07Z,"MetaContext will be shared across different Fury objects, that's what it is used for","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHF9m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1704,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHPRC,fury,2199712834,1704,NA,LiangliangSui,116876207,,,NA,2024-07-01T09:50:42Z,2024-07-01T09:50:42Z,"> MetaContext will be shared across different Fury objects, that's what it is used for

Ok, got it, if it is reused in different Fury objects, then we do need setMetaContext.

Thank you for helping me solve this problem. Thanks again.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DHPRC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1705,https://api.github.com/repos/apache/fury/issues/1705,fury,2377051826,1705,[Golang] Implement xlang string for furygo,LiangliangSui,116876207,,,OPEN,2024-06-27T04:10:12Z,2024-07-03T14:48:17Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
The current string implementation protocol in furygo is different from the xlang protocol.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->
We need to implement it in furygo according to the design format of string in xlang protocol.
## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
https://github.com/apache/fury/pull/1413","{""url"": ""https://api.github.com/repos/apache/fury/issues/1705/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1715,https://api.github.com/repos/apache/fury/issues/1715,fury,2382085584,1715,[Golang] Implement xlang list and map for furygo ,bytemain,13938334,Artin,artin@cat.ms,OPEN,2024-06-30T05:01:51Z,2024-06-30T05:01:51Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

Implement xlang list and map for furygo 

https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#map

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1715/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1716,https://api.github.com/repos/apache/fury/issues/1716,fury,2382243271,1716,[JAVA] ClassCastException when serialize list<JSONObject> with fastjson 1.x version,galaxyxym,84667613,,,CLOSED,2024-06-30T12:55:58Z,2024-06-30T15:02:53Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

- fury: 0.6.0.SNAPSHOT
- os: mac
- jdk: openjdk8
- fastjson: 1.2.70  (https://mvnrepository.com/artifact/com.alibaba/fastjson/1.2.70), **not fastjson2**

### Component(s)

Java

### Minimal reproduce step

```
public class TestMain {

    static ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withRefTracking(true)
            .registerGuavaTypes(false)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .withScopedMetaShare(true)
            .buildThreadSafeFury();

    public static void main(String[] args) {
        DemoResponse resp = new DemoResponse();
        byte[] serialize = fury.serialize(resp);
        System.out.println(""size:"" + serialize.length);
    }
}


import com.alibaba.fastjson.JSONObject;
@Data
public class DemoResponse {

    private List<JSONObject> jsonObjs;

    public DemoResponse() {

    }
}
```

```
  <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <version>1.2.70</version>
  </dependency>
```

### What did you expect to see?

serialize successfuly.

0.6.0-SNAPSHOT is OK with fastjson2 2.x version, is failed with fastjon 1.x version

### What did you see instead?

```
java.lang.ClassCastException: org.apache.fury.serializer.collection.MapSerializers$StringKeyMapSerializer cannot be cast to org.apache.fury.serializer.collection.MapSerializers$JDKCompatibleMapSerializer

	at org.apache.fury.benchmark.state.JsonTest_DemoResponseFuryRefCodec_1_414493378_1225373914.<init>(JsonTest_DemoResponseFuryRefCodec_1_414493378_1225373914.java:51)
	at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:129)
	at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104)
	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1188)
	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1126)
	at org.apache.fury.Fury.write(Fury.java:314)
	at org.apache.fury.Fury.serialize(Fury.java:250)
	at org.apache.fury.Fury.serialize(Fury.java:204)
	at org.apache.fury.benchmark.state.JsonTest.testSerializeJso

```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1716/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1718,https://api.github.com/repos/apache/fury/issues/1718,fury,2382683602,1718,default value of deserializeUnexistedClass is false when set to CompatibleMode mode,shaozhen2012,13158527,Sen,304954038@qq.com,CLOSED,2024-07-01T02:52:16Z,2024-07-21T06:25:55Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.4.1

### Component(s)

Java

### Minimal reproduce step

    The document states that when set to CompatibleMode mode, deserializeUnexistedClass will default to true, but it does not seem to take effect, so you need to explicitly set it.
  document:
![image](https://github.com/apache/fury/assets/13158527/869a1480-91bf-46b5-80cc-918153f7936b)

 ____

### What did you expect to see?

deserializeUnexistedClass is true when set to CompatibleMode mode

### What did you see instead?

deserializeUnexistedClass is false when set to CompatibleMode mode, you need to explicitly set it

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1718/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1718,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFOjs,fury,2199185644,1718,NA,LiangliangSui,116876207,,,NA,2024-07-01T04:02:27Z,2024-07-01T04:02:27Z,"Hi @shaozhen2012 , Could you try this feature in v0.5.1? We haven't introduced it in v0.4.1 yet.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFOjs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1718,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFPBr,fury,2199187563,1718,NA,LiangliangSui,116876207,,,NA,2024-07-01T04:04:54Z,2024-07-01T04:04:54Z,I think we should indicate in the config options of the document which version introduced. @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFPBr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1718,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFn4Q,fury,2199289360,1718,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-01T05:48:37Z,2024-07-01T05:48:37Z,Would you like to update the document? @LiangliangSui ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DFn4Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1718,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DF0SF,fury,2199340165,1718,NA,LiangliangSui,116876207,,,NA,2024-07-01T06:28:18Z,2024-07-01T06:28:18Z,"> Would you like to update the document? @LiangliangSui

I will update this document.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6DF0SF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1721,https://api.github.com/repos/apache/fury/issues/1721,fury,2394162372,1721,"class CircularFifoQueue customized jdk serialization, which is inefficient. Please replace it with a org.apache.fury.serializer.Serializer or implements java.io.Externalizable",cdxf,6419729,,,CLOSED,2024-07-07T18:17:57Z,2024-07-11T14:34:46Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.5.1

### Component(s)

Java

### Minimal reproduce step

Try to serialize org.apache.commons.collections4.queue.CircularFifoQueue class

### What did you expect to see?

I want more explanation why it is inefficient, will it causes memory leak, what can I do to improve this

### What did you see instead?

class org.apache.commons.collections4.queue.CircularFifoQueue customized jdk serialization, which is inefficient. Please replace it with a org.apache.fury.serializer.Serializer or implements java.io.Externalizable

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1721/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1721,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Egd9D,fury,2223103811,1721,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-11T14:34:42Z,2024-07-11T14:34:42Z,"As the warn log said, you may need to implement a Fury Serializer for CircularFifoQueue. CircularFifoQueue implements JDK writeObject/readObject method. Fury must invoke those methods to ensure compatibility. You can register a customized serializer instead to speed serialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Egd9D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1723,https://api.github.com/repos/apache/fury/issues/1723,fury,2395616336,1723,java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 8192,yzhsss,20329077,,,OPEN,2024-07-08T13:15:02Z,2024-07-11T14:35:41Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

          <dependency>
                <groupId>org.apache.fury</groupId>
                <artifactId>fury-core</artifactId>
                <version>0.5.1</version>
            </dependency>

### Component(s)

Java

### Minimal reproduce step

        int processorCount = Runtime.getRuntime().availableProcessors();
        SERIALIZER = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withRefTracking(true)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .withDeserializeUnexistedClass(true)
            .buildThreadSafeFuryPool(processorCount, processorCount * 2, 5, TimeUnit.MINUTES);


Occasional errors occur

### What did you expect to see?

no error

### What did you see instead?

java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 8192
	at io.fury.collection.IntArray.pop(IntArray.java:51)
	at io.fury.resolver.MapRefResolver.reference(MapRefResolver.java:194)
	at xx.ListSearchResponseTypeFuryRefCompatibleCodec_1_1441410416_471140463.read(ListSearchResponseTypeFuryRefCompatibleCodec_1_1441410416_471140463.java:312)
	at io.fury.Fury.readDataInternal(Fury.java:899)
	at io.fury.Fury.deserializeJavaObject(Fury.java:1060)
	at io.fury.Fury.deserializeJavaObject(Fury.java:1042)
	at io.fury.pool.ThreadPoolFury.deserializeJavaObject(ThreadPoolFury.java:152)
	at xx.ZstdFuryFormatter.deserialize(ZstdFuryFormatter.java:77)
	at xx.ServiceClientBase.deserializeResponse(ServiceClientBase.java:2466)
	at xx.ServiceClientBase.invokeInternal(ServiceClientBase.java:1635)
	at xx.ServiceClientBase.lambda$invoke0$7(ServiceClientBase.java:1568)
	at xx.facade.CommandExecutor.execute(CommandExecutor.java:57)
	at xx.CHystrixCommandExecutor.execute(CHystrixCommandExecutor.java:134)
	at xxoss.baiji.rpc.client.ServiceClientBase.invoke0(ServiceClientBase.java:1565)
	at xxoss.baiji.rpc.client.ServiceClientBase.invoke(ServiceClientBase.java:1536)
	at xxoss.baiji.rpc.client.ServiceClientBase.invoke(ServiceClientBase.java:1530)
	at xx.ServiceClientExtension.invokeSync(ServiceClientExtension.java:272)
	at xx.ServiceClientExtension.invoke(ServiceClientExtension.java:145)
	at xx.listSearch(FlightXFacade.java:370)
	at xx.getFlightResponse(FlightXFacade.java:106)
	at xx.requestLeg(FlightXFlightBusiness.java:2052)
	at xx.lambda$requestFlight$26(FlightXFlightBusiness.java:1874)
	at xx.FlightParallel.lambda$process$0(FlightParallel.java:230)
	at xx.cat.async.CatWrappedRunnable.lambda$run$0(CatWrappedRunnable.java:30)
	at xx.cat.async.CatAsyncSupportTemplate.doExecute(CatAsyncSupportTemplate.java:121)
	at xx.cat.async.CatAsyncSupportTemplate.execute(CatAsyncSupportTemplate.java:96)
	at xx.cat.async.CatWrappedRunnable.run(CatWrappedRunnable.java:29)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:131)
	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:74)
	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:82)
	at java.base/java.util.concurrent.ThreadPerTaskExecutor$TaskRunner.run(ThreadPerTaskExecutor.java:314)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1723/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1723,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D-Mzi,fury,2214120674,1723,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-08T13:45:24Z,2024-07-08T13:45:24Z,"Hi @yzhsss , thanks for reporting this issue, could you provide reproduction code?This is a data related bug. Without reproduction code, it's hard to know whatgoes wrong","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D-Mzi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1723,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D-g8s,fury,2214203180,1723,NA,yzhsss,20329077,,,NA,2024-07-08T14:16:25Z,2024-07-08T14:16:25Z,"What kind of code do you need?
I can try to get you a base64String data","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6D-g8s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1723,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgehC,fury,2223106114,1723,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-11T14:35:40Z,2024-07-11T14:35:40Z,We need an unit test to debug line by line. ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgehC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1724,https://api.github.com/repos/apache/fury/issues/1724,fury,2395932321,1724,class org.apache.fury.serializer.ObjectSerializer cannot be cast to class org.apache.fury.serializer.collection.AbstractCollectionSerializer,KouShenhai,48756217,laokou,2413176044@qq.com,CLOSED,2024-07-08T15:21:19Z,2024-07-12T02:41:20Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.5.1

### Component(s)

Java

### Minimal reproduce step

[FuryFactory.java](https://github.com/KouShenhai/KCloud-Platform-IoT/blob/master/laokou-common/laokou-common-mybatis-plus/src/main/java/org/laokou/common/mybatisplus/config/FuryFactory.java)

[FurySerialCaffeineJsqlParseCache.java](https://github.com/KouShenhai/KCloud-Platform-IoT/blob/master/laokou-common/laokou-common-mybatis-plus/src/main/java/org/laokou/common/mybatisplus/config/FurySerialCaffeineJsqlParseCache.java)


```java
	static {
		JsqlParserGlobal.setJsqlParseCache(new FurySerialCaffeineJsqlParseCache(
				cache -> cache.maximumSize(1024).expireAfterWrite(5, TimeUnit.SECONDS)));
	}
```

```shell
Caused by: java.lang.ClassCastException: class org.apache.fury.serializer.ObjectSerializer cannot be cast to class org.apache.fury.serializer.collection.AbstractCollectionSerializer (org.apache.fury.serializer.ObjectSerializer and org.apache.fury.serializer.collection.AbstractCollectionSerializer are in unnamed module of loader 'app')
	at net.sf.jsqlparser.statement.insert.InsertFuryCodec_1_1175962212_1656594904.writeCollectionClassInfo3$(InsertFuryCodec_1_1175962212_1656594904.java:536) ~[?:?]
	at net.sf.jsqlparser.statement.insert.InsertFuryCodec_1_1175962212_1656594904.writeFields4$(InsertFuryCodec_1_1175962212_1656594904.java:591) ~[?:?]
	at net.sf.jsqlparser.statement.insert.InsertFuryCodec_1_1175962212_1656594904.write(InsertFuryCodec_1_1175962212_1656594904.java:1084) ~[?:?]
	at org.apache.fury.serializer.collection.AbstractCollectionSerializer.writeSameTypeElements(AbstractCollectionSerializer.java:403) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.serializer.collection.AbstractCollectionSerializer.generalJavaWrite(AbstractCollectionSerializer.java:384) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.serializer.collection.AbstractCollectionSerializer.writeElements(AbstractCollectionSerializer.java:313) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.serializer.collection.AbstractCollectionSerializer.write(AbstractCollectionSerializer.java:298) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.Fury.writeData(Fury.java:552) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.Fury.write(Fury.java:316) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.Fury.serialize(Fury.java:250) ~[fury-core-0.5.1.jar:0.5.1]
	at org.apache.fury.Fury.serialize(Fury.java:204) ~[fury-core-0.5.1.jar:0.5.1]
```


### What did you expect to see?

Normal serialization

### What did you see instead?

class org.apache.fury.serializer.ObjectSerializer cannot be cast to class org.apache.fury.serializer.collection.AbstractCollectionSerializer

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1724/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1724,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Egf88,fury,2223111996,1724,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-11T14:38:11Z,2024-07-11T14:38:11Z,"I noticed you used Fury instead of TheadSafeFury as a global static serializer. This is not thread safe, maybe this is the reason why this error happen","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Egf88/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1724,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ElG_b,fury,2224320475,1724,NA,KouShenhai,48756217,laokou,2413176044@qq.com,NA,2024-07-12T02:41:20Z,2024-07-12T02:41:20Z,"Thank you for your reply. I have changed the data type of Caffeine cache from storing objects to storing arrays. The code issue has been resolved. Thank you

> 我注意到您使用 Fury 而不是 TheadSafeFury 作为全局静态序列化程序。这不是线程安全的，也许这就是发生此错误的原因

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ElG_b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1727,https://api.github.com/repos/apache/fury/issues/1727,fury,2398751643,1727,[debugtool] parsing the serialized bytes and show its binary structure in yaml format. And vice versa is also helpful.,justincui,7495860,,,OPEN,2024-07-09T17:15:25Z,2024-07-11T14:42:37Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
I'm always frustrated when debugging serialized data because it's difficult to visualize the binary structure. Understanding the detailed binary layout and content of serialized bytes would greatly enhance debugging and development efficiency.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->
I would like a feature in the Fury debugtool component that can parse serialized bytes and display their binary structure in a human-readable YAML format (with depth control as a parameter). Additionally, the ability to convert the YAML representation back into the original binary format would be extremely helpful for verifying and testing changes during debugging. This bidirectional functionality would provide a robust tool for developers to work seamlessly with serialized data.

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
Implementing this feature would bridge the gap between serialized data and its human-readable representation, making it easier to inspect, debug, and validate serialized objects. It would be particularly useful for developers working with complex data serialization and deserialization processes, enabling them to make changes in YAML and convert them back to binary for testing purposes.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1727/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1727,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgigI,fury,2223122440,1727,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-11T14:42:37Z,2024-07-11T14:42:37Z,"Thanks for propose this feature. This is very useful for debugging. With this feature, we can debug the binary data without the need of deserializing it with the type schema. 

This is possible for meta shared compatible mode, Fury write all meta of a class into the binary data. So it's possible to decode the data and print it. We can implement this tool in python for xlang serialization. And for pure java serialization, we need to implement it in java, but it's possible to package this jar into python wheel and build a command line to parse the data using this jar.

For shema consistent mode, it's not possible to parse the bytes since Fury skip write some object meta. So we don't know how to parse the data.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgigI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1728,https://api.github.com/repos/apache/fury/issues/1728,fury,2400531058,1728,【Java】remove guava jar reference,dylan-tao,13051685,Dylan Tao,dylan_tao@foxmail.com,CLOSED,2024-07-10T11:38:31Z,2024-11-11T11:25:58Z,"## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
remove guava jar reference
## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->
remove guava jar reference
## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
remove guava jar reference","{""url"": ""https://api.github.com/repos/apache/fury/issues/1728/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1728,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgcdK,fury,2223097674,1728,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-11T14:32:14Z,2024-07-11T14:32:14Z,"We have an issue tracking this: #1113. We did some work before, but there some remaining work hasn't been taken currently ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6EgcdK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/1735,fury,2413477942,1735,FR: Only serialize annotated fields,Frotty,1486037,Frotty,,CLOSED,2024-07-17T12:23:12Z,2024-07-28T16:38:09Z,"## Is your feature request related to a problem? Please describe.
I want to move an existing project to fury, but right now data fields in classes are marked with an annotation. Fury only supports not de-/serializing transient fields, but it's not convenient to mark a majority of fields as transient.

## Describe the solution you'd like
I would like there to be an annotation that allows me to mark only the fields of a class that should be de-/serialized.

## Additional context
This was discussed @chaokunyang in https://www.reddit.com/r/java/comments/1cll68f/comment/ld3suns/?context=3 and he is generally supportive. However, there seems to be no real guide for me to start implementing this. Perhaps someone else can do it in a shorter amount of time.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1735/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnMPZ,fury,2241643481,1735,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-21T15:06:17Z,2024-07-21T15:06:17Z,"@chaokunyang I'm interested in this issue. However , as it's my first time delving into the Java version of Fury, I'm not quite sure if my approach is correct. By using DEBUG, I've traced the code and found a method `Descriptor::createAllDescriptorsMap(...)` which obtains the list of fields of the object being serialized, and the `descriptorMap` ultimately participates in Serializer codegen. Here is already a check on the `Ignore` annotation; I need to modify the logic.
Do you have some advice? To be honest I don't know if it's enough to modify this method , maybe I should explore more. 
And what's the name of the annotation? `FuryOnly`?`Include`?

![image](https://github.com/user-attachments/assets/e466c7f8-dbf5-4fbc-8622-37bf4d507f14)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnMPZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnnzJ,fury,2241756361,1735,NA,Frotty,1486037,Frotty,,NA,2024-07-21T19:55:56Z,2024-07-21T19:55:56Z,"Cool, would be nice to see this implemented. I suppose there must be a configuration or mode, or annotation on the class itself, to switch the fury behavior to only serialize marked fields. Otherwise, might be quite straightforward. Currently, the annotation is `@Exposed` but I don't really care about the name.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnnzJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FoUL2,fury,2241938166,1735,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-22T02:43:26Z,2024-07-22T02:43:26Z,"The implementation should not be complex, but the naming is an issue. This is a public API, how do we name this annotation?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FoUL2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fz8Dj,fury,2244985059,1735,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-23T11:30:49Z,2024-07-23T11:30:49Z,"@Frotty We have added an annotation named `Expose`. And if fileds of a Class are annotated with both `@Expose` and `@Ignore`, it will throw a RuntimeException. We can only use one kind.
```java
@Data
@AllArgsConstructor
private static class ExposeFields {
  @Expose int f1;
  @Expose long f2;
  long f3;
  @Expose ImmutableMap<String, Integer> map1;
  ImmutableMap<String, Integer> map2;
}

@Test
public void testExposeFields() {
  Fury fury = Fury.builder().requireClassRegistration(false).build();
  ImmutableMap<String, Integer> map1 = ImmutableMap.of(""1"", 1);
  ImmutableMap<String, Integer> map2 = ImmutableMap.of(""2"", 2);
  ExposeFields o = serDe(fury, new ExposeFields(1, 2, 3, map1, map2));
  assertEquals(1, o.f1);
  assertEquals(2, o.f2);
  assertEquals(0, o.f3);
  assertEquals(o.map1, map1);
  assertNull(o.map2);
}

@Data
@AllArgsConstructor
private static class ExposeFields2 {
  @Expose int f1;
  @Ignore long f2;
  long f3;
}

@Test
public void testExposeFields2() {
  Fury fury = Fury.builder().requireClassRegistration(false).build();
  assertThrows(RuntimeException.class, () -> serDe(fury, new ExposeFields2(1, 2, 3)));
}
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fz8Dj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GXOvi,fury,2254236642,1735,NA,Pil0tXia,41445332,Pil0tXia,xiatian@apache.org,NA,2024-07-27T19:40:04Z,2024-07-27T19:40:04Z,Good job. Might we consider this issue as completed?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GXOvi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GYDvr,fury,2254453739,1735,NA,Frotty,1486037,Frotty,,NA,2024-07-28T09:45:19Z,2024-07-28T09:45:19Z,"I wasn't able to test it yet, when will it be available in a release?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GYDvr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1735,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GYhfZ,fury,2254575577,1735,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-28T16:38:07Z,2024-07-28T16:38:07Z,"> I wasn't able to test it yet, when will it be available in a release?

You can use snapshot jar for test. A release jar will be released by the end of this week","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GYhfZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1738,https://api.github.com/repos/apache/fury/issues/1738,fury,2416226538,1738,feat(java):add Ignore type inconsistent deserialize,weijiang157152688,16550122,wei,,CLOSED,2024-07-18T12:26:33Z,2024-07-27T10:10:31Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step

 // type is inconsistent use serialize type, except enum

### What did you expect to see?

deserialize ok

### What did you see instead?

.

### Anything Else?

.

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1738/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1738,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWt2X,fury,2254101911,1738,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-27T10:10:30Z,2024-07-27T10:10:30Z,Finished in #1737,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWt2X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1740,https://api.github.com/repos/apache/fury/issues/1740,fury,2420827260,1740,[Java] supports jdk17+ record copy,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-20T10:53:53Z,2024-07-20T11:02:29Z,"## Is your feature request related to a problem? Please describe.
supports jdk17+ record copy

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
#1679","{""url"": ""https://api.github.com/repos/apache/fury/issues/1740/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1742,https://api.github.com/repos/apache/fury/issues/1742,fury,2420832226,1742,[Java] Support deep copy in graalvm,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-07-20T10:58:42Z,2024-10-14T10:39:57Z,"## Is your feature request related to a problem? Please describe.
Support deep copy in graalvm. Currently the fields info are built lazily, which will fail at graalvm runtime. 

## Describe the solution you'd like
Build  fields info eagerly at graalvm build time

## Additional context
#1679 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1742/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1742,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pp0D4,fury,2410103032,1742,NA,vivekkoya,67130044,,,NA,2024-10-14T06:11:26Z,2024-10-14T06:11:26Z,"Hello, I would like to take this task. Can you please provide a reference to the relevant files and directories to implement this task?

Thanks for the help","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pp0D4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1742,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PsfAF,fury,2410803205,1742,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-14T10:39:56Z,2024-10-14T10:39:56Z,"Hi @vivekkoya , thanks for contributing to fury, you can add some deep tests in src/main/java/org/apache/fury/graalvm, and see whether the copy fail","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PsfAF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1743,https://api.github.com/repos/apache/fury/issues/1743,fury,2420834957,1743,[Java] Optimize collection deep copy performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-20T11:01:07Z,2024-07-27T08:53:28Z,"## Is your feature request related to a problem? Please describe.
collection elements are homogeneous mostly, we can cache the previoues immutable info and reduce type dispatch cost to speed up performance.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
#1679","{""url"": ""https://api.github.com/repos/apache/fury/issues/1743/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/1744,fury,2420835618,1744,[Java] Optimize map deep copy performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-20T11:01:44Z,2024-07-27T08:18:57Z,"## Is your feature request related to a problem? Please describe.
Map kv items are homogeneous mostly, we can cache the previoues immutable info and reduce kv items type dispatch cost to speed up performance.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
#1679","{""url"": ""https://api.github.com/repos/apache/fury/issues/1744/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnijJ,fury,2241734857,1744,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-21T18:25:57Z,2024-07-21T18:25:57Z,"Excuse me, I don't understand the issue requirement , do you mean that in code below, we should not invoke the `copyObject`'s `getClassInfo` , but instead get the `info` instance before loop? Is this enough? Sorry I don't know where can cache (as MapSerilizer is not only for one type kv map ). 
```java
Map newMap = fury.copy(oldMap);

@Override
public T copy(T originMap) {
  ......
  copyEntry(originMap, newMap);
  return onMapCopy(newMap);
}

protected <K, V> void copyEntry(Map<K, V> originMap, Map<K, V> newMap) {
  ++ ClassInfo keyClassInfo= classResolver.getOrUpdateClassInfo(entry.getKey().getClass());
  ++ ClassInfo valueClassInfo= classResolver.getOrUpdateClassInfo(entry.getValue().getClass());
  for (Map.Entry<K, V> entry : originMap.entrySet()) {
     -- newMap.put(fury.copyObject(entry.getKey()), fury.copyObject(entry.getValue()));
     ++ newMap.put(fury.copyObject(entry.getKey(),keyClassInfo), fury.copyObject(entry.getValue(), valueClassInfo));
  }
}


-- public <T> T copyObject(T ob) {
// We can add a new method with additional parameter classInfo
++ public <T> T copyObject(T obj, ClassInfo classInfo) {
    if (obj == null) {
      return null;
    }
    Object copy;
    -- ClassInfo classInfo = classResolver.getOrUpdateClassInfo(obj.getClass());
    switch (classInfo.getClassId()) {
      case ClassResolver.PRIMITIVE_BOOLEAN_CLASS_ID:
      case ClassResolver.PRIMITIVE_BYTE_CLASS_ID:
      case ClassResolver.PRIMITIVE_CHAR_CLASS_ID:
      case ClassResolver.PRIMITIVE_SHORT_CLASS_ID:
      case ClassResolver.PRIMITIVE_INT_CLASS_ID:
      case ClassResolver.PRIMITIVE_FLOAT_CLASS_ID:
      case ClassResolver.PRIMITIVE_LONG_CLASS_ID:
      case ClassResolver.PRIMITIVE_DOUBLE_CLASS_ID:
      case ClassResolver.BOOLEAN_CLASS_ID:
      case ClassResolver.BYTE_CLASS_ID:
      case ClassResolver.CHAR_CLASS_ID:
      case ClassResolver.SHORT_CLASS_ID:
      case ClassResolver.INTEGER_CLASS_ID:
      case ClassResolver.FLOAT_CLASS_ID:
      case ClassResolver.LONG_CLASS_ID:
      case ClassResolver.DOUBLE_CLASS_ID:
      case ClassResolver.STRING_CLASS_ID:
        return obj;
      case ClassResolver.PRIMITIVE_BOOLEAN_ARRAY_CLASS_ID:
        boolean[] boolArr = (boolean[]) obj;
        return (T) Arrays.copyOf(boolArr, boolArr.length);
      ......
      case ClassResolver.ARRAYLIST_CLASS_ID:
        copy = arrayListSerializer.copy((ArrayList) obj);
        break;
      case ClassResolver.HASHMAP_CLASS_ID:
        copy = hashMapSerializer.copy((HashMap) obj);
        break;
        // todo: add fastpath for other types.
      default:
        copyDepth++;
        copy = classInfo.getSerializer().copy(obj);
        copyDepth--;
    }
    return (T) copy;
  }

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FnijJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fobu0,fury,2241969076,1744,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-22T03:24:00Z,2024-07-22T03:24:00Z,"It's like:
```java
  protected <K, V> void copyEntry(Map<K, V> originMap, Map<K, V> newMap) {
    ClassResolver classResolver = fury.getClassResolver();
    for (Map.Entry<K, V> entry : originMap.entrySet()) {
      K key = entry.getKey();
      if (key != null) {
        ClassInfo classInfo = classResolver.getClassInfo(key.getClass(), keyClassInfoWriteCache);
        key = fury.copyObject(key, classInfo.getClassId());
      }
      V value = entry.getValue();
      if (value != null) {
        ClassInfo classInfo =
            classResolver.getClassInfo(value.getClass(), valueClassInfoWriteCache);
        value = fury.copyObject(value, classInfo.getClassId());
      }
      newMap.put(key, value);
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fobu0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FobyE,fury,2241969284,1744,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-22T03:24:18Z,2024-07-22T03:24:18Z,Same for collection and object array deep copy,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6FobyE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F1Nt-,fury,2245319550,1744,NA,urlyy,61675635,urlyy,liuyuyang0201@gmail.com,NA,2024-07-23T13:51:39Z,2024-07-23T13:51:39Z,"> It's like:
> 
> ```java
>   protected <K, V> void copyEntry(Map<K, V> originMap, Map<K, V> newMap) {
>     ClassResolver classResolver = fury.getClassResolver();
>     for (Map.Entry<K, V> entry : originMap.entrySet()) {
>       K key = entry.getKey();
>       if (key != null) {
>         ClassInfo classInfo = classResolver.getClassInfo(key.getClass(), keyClassInfoWriteCache);
>         key = fury.copyObject(key, classInfo.getClassId());
>       }
>       V value = entry.getValue();
>       if (value != null) {
>         ClassInfo classInfo =
>             classResolver.getClassInfo(value.getClass(), valueClassInfoWriteCache);
>         value = fury.copyObject(value, classInfo.getClassId());
>       }
>       newMap.put(key, value);
>     }
>   }
> ```

The `classResolver.getOrUpdateClassInfo(obj.getClass())`already use a Class -> ClassInfo map `classInfoMap` in `ClassResolver.java`, why do we introduce another `classInfoWriteCache` ? I'm sorry, but I'm struggling to understand this part.
```java
@Internal
public ClassInfo getOrUpdateClassInfo(Class<?> cls) {
  ClassInfo classInfo = classInfoCache;
  if (classInfo.cls != cls) {
    classInfo = classInfoMap.get(cls);
    if (classInfo == null || classInfo.serializer == null) {
      addSerializer(cls, createSerializer(cls));
      classInfo = classInfoMap.get(cls);
    }
    classInfoCache = classInfo;
  }
  return classInfo;
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F1Nt-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1744,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWclh,fury,2254031201,1744,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-27T08:08:27Z,2024-07-27T08:08:27Z,"If we  serialize nested object, the classinfo may be overwriten by other map","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GWclh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1745,https://api.github.com/repos/apache/fury/issues/1745,fury,2420948801,1745,license issue in fury-core jar,pjfanning,11783444,PJ Fanning,,CLOSED,2024-07-20T15:41:30Z,2024-07-23T10:18:01Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

The META-INF/LICENSE in https://repository.apache.org/content/repositories/orgapachefury-1043/org/apache/fury/fury-core/0.6.0/fury-core-0.6.0.jar is the source license. There should be a dedicated license file for the jars.
I see that the janino and kryo licenses are included in META-INF/licenses but they should be mentioned in META-INF/LICENSE.

### Component(s)

Java

### Minimal reproduce step

n/a

### What did you expect to see?

better LICENSE in jar

### What did you see instead?

n/a

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1745/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1745,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fmk6L,fury,2241482379,1745,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-21T05:34:39Z,2024-07-21T05:34:39Z,"We have text `The text of each license is also included in licenses/LICENSE-[project].txt` in `java/fury-core/src/main/resources/META-INF/LICENSE`:
```
The following components are provided under the BSD-3-Clause License. See project link for details.
The text of each license is also included in licenses/LICENSE-[project].txt.


* kryo (https://github.com/EsotericSoftware/kryo)
    Files:
      java/fury-core/src/main/java/org/apache/fury/collection/FuryObjectMap.java
      java/fury-core/src/main/java/org/apache/fury/collection/IdentityMap.java
      java/fury-core/src/main/java/org/apache/fury/collection/IdentityObjectIntMap.java
      java/fury-core/src/main/java/org/apache/fury/collection/LongMap.java
      java/fury-core/src/main/java/org/apache/fury/collection/ObjectIntMap.java
      java/fury-core/src/main/java/org/apache/fury/type/Generics.java

* janino (https://github.com/janino-compiler/janino)
    Files:
      Shaded classes under org/apache/fury/shaded/org/codehaus/janino/*
```

Do we need to update it into specific file name in this LICENSE file?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fmk6L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1745,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fr9_H,fury,2242895815,1745,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-22T12:57:20Z,2024-07-22T12:57:20Z,the LICENSE doesn't mention `shaded/org/codehaus/commons/` - there are classes in fury-core that are shaded versions of commons compiler classes. I guess this is part of Janino but we should update the Janino section to mention `shaded/org/codehaus/commons/`.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Fr9_H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1745,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ftopb,fury,2243332699,1745,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-22T16:13:53Z,2024-07-22T16:13:53Z,"I see, thanks. I will fix this soon.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ftopb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1747,https://api.github.com/repos/apache/fury/issues/1747,fury,2421248487,1747,[Java] Support copy ref in JAVA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-21T06:21:47Z,2024-07-27T10:11:04Z,"## Is your feature request related to a problem? Please describe.
Support copy ref in JAVA.

Current implementation will throw StackOverFlowException:
![image](https://github.com/user-attachments/assets/3c16431f-aa37-4f78-920f-489903c7d977)

```java
  @Test(dataProvider = ""fury"")
  public void testBean(FuryBuilder builder) {
    Fury fury = builder.withMetaShare(false).withRefTracking(true).build();
    for (Object[] objects : beans()) {
      Object notCyclic = objects[0];
      Object cyclic = objects[1];
      Assert.assertEquals(notCyclic, fury.deserialize(fury.serialize(notCyclic)));
      Assert.assertEquals(cyclic, fury.deserialize(fury.serialize(cyclic)));
      Object[] arr = new Object[2];
      arr[0] = arr;
      arr[1] = cyclic;
      Assert.assertEquals(arr[1], ((Object[]) fury.deserialize(fury.serialize(arr)))[1]);
      List<Object> list = new ArrayList<>();
      list.add(list);
      list.add(cyclic);
      list.add(arr);
      fury.copy(cyclic);
    }
  }
```


## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
#1679 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1747/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1749,https://api.github.com/repos/apache/fury/issues/1749,fury,2421249563,1749,[Java] Optimize object array copy performance,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-21T06:25:02Z,2024-07-27T09:08:05Z,"## Is your feature request related to a problem? Please describe.
Object array elements are homogeneous mostly, we can cache the previoues immutable info and reduce type dispatch cost to speed up performance.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
#1679
#1743 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1749/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1750,https://api.github.com/repos/apache/fury/issues/1750,fury,2421254774,1750,[JavaScript] Move platform-buffer.jpg into benchmark data directory,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-07-21T06:44:11Z,2024-07-21T06:44:11Z,"## Is your feature request related to a problem? Please describe.
Move platform-buffer.jpg into benchmark data directory

cc @bytemain 

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1750/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1754,https://api.github.com/repos/apache/fury/issues/1754,fury,2424166962,1754,[Java] implement fast utf16 to utf8 conversion,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-23T03:33:42Z,2024-10-21T16:31:55Z,"## Is your feature request related to a problem? Please describe.
Currently Fury use `java.lang.StringCoding#encode(java.nio.charset.Charset, char[], int, int)` to convert  utf16 to utf8.
```java
  static byte[] encode(Charset cs, char[] ca, int off, int len) {
        CharsetEncoder ce = cs.newEncoder();
        int en = scale(len, ce.maxBytesPerChar());
        byte[] ba = new byte[en];
        if (len == 0)
            return ba;
        boolean isTrusted = false;
        if (System.getSecurityManager() != null) {
            if (!(isTrusted = (cs.getClass().getClassLoader0() == null))) {
                ca =  Arrays.copyOfRange(ca, off, off + len);
                off = 0;
            }
        }
        ce.onMalformedInput(CodingErrorAction.REPLACE)
          .onUnmappableCharacter(CodingErrorAction.REPLACE)
          .reset();
        if (ce instanceof ArrayEncoder) {
            int blen = ((ArrayEncoder)ce).encode(ca, off, len, ba);
            return safeTrim(ba, blen, cs, isTrusted);
        } else {
            ByteBuffer bb = ByteBuffer.wrap(ba);
            CharBuffer cb = CharBuffer.wrap(ca, off, len);
            try {
                CoderResult cr = ce.encode(cb, bb, true);
                if (!cr.isUnderflow())
                    cr.throwException();
                cr = ce.flush(bb);
                if (!cr.isUnderflow())
                    cr.throwException();
            } catch (CharacterCodingException x) {
                throw new Error(x);
            }
            return safeTrim(ba, bb.position(), cs, isTrusted);
        }
    }
```

This invoke `sun.nio.cs.UTF_8.Encoder#encode`:
```java
        public int encode(char[] sa, int sp, int len, byte[] da) {
            int sl = sp + len;
            int dp = 0;
            int dlASCII = dp + Math.min(len, da.length);

            // ASCII only optimized loop
            while (dp < dlASCII && sa[sp] < '\u0080')
                da[dp++] = (byte) sa[sp++];

            while (sp < sl) {
                char c = sa[sp++];
                if (c < 0x80) {
                    // Have at most seven bits
                    da[dp++] = (byte)c;
                } else if (c < 0x800) {
                    // 2 bytes, 11 bits
                    da[dp++] = (byte)(0xc0 | (c >> 6));
                    da[dp++] = (byte)(0x80 | (c & 0x3f));
                } else if (Character.isSurrogate(c)) {
                    if (sgp == null)
                        sgp = new Surrogate.Parser();
                    int uc = sgp.parse(c, sa, sp - 1, sl);
                    if (uc < 0) {
                        if (malformedInputAction() != CodingErrorAction.REPLACE)
                            return -1;
                        da[dp++] = repl;
                    } else {
                        da[dp++] = (byte)(0xf0 | ((uc >> 18)));
                        da[dp++] = (byte)(0x80 | ((uc >> 12) & 0x3f));
                        da[dp++] = (byte)(0x80 | ((uc >>  6) & 0x3f));
                        da[dp++] = (byte)(0x80 | (uc & 0x3f));
                        sp++;  // 2 chars
                    }
                } else {
                    // 3 bytes, 16 bits
                    da[dp++] = (byte)(0xe0 | ((c >> 12)));
                    da[dp++] = (byte)(0x80 | ((c >>  6) & 0x3f));
                    da[dp++] = (byte)(0x80 | (c & 0x3f));
                }
            }
            return dp;
        }

```



This implementation is not effficient enough, we need a faster one.

## Describe the solution you'd like
Most chars in utf16 string are latin1 chars, we can calculate an approximate chars stats using SIMD or super word, then dispatch to different codepath:

```
int latin1Chars, len;
if (latin1Chars * 2 >= len) {
  // Check and write 8 bytes every time 
  fastUtf8Encode(utf16Bytes);
} else {
  // check byte by byte every time
  utf8Encode(utf16Bytes);
}
```

Multiple encoding strategy:
- If latin1 chars is greater than 50%, use this optimized utf16 encoding
- If latin1 chars is less than 50%, use utf16 encoding

Add a new Fury Config option such as `StringEncoding` enum:
```java
enum StingEncoding {
  NATIVE_STRING,
  LATIN1_UTF16,
  LATIN1_UTF8_16,
}
```
Users can set string encoding in FuryBuilder

## Additional context

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1754/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1754,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F6sQR,fury,2246755345,1754,NA,manojks1999,64463831,,,NA,2024-07-24T02:43:38Z,2024-07-24T02:43:38Z,"@chaokunyang , can I work on this ?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F6sQR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1754,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F7W_a,fury,2246930394,1754,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-24T05:27:06Z,2024-07-24T05:27:06Z,"> @chaokunyang , can I work on this ?

Of course, feel free to take over it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F7W_a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1754,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Im-uM,fury,2291919756,1754,NA,FormerKinG,78777016,FormerKinG,,NA,2024-08-15T18:29:19Z,2024-08-15T18:29:19Z,"Can I work on this issue ? If yes, I need the class name, I'm new to the contibution and looking forward to working on Fury.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Im-uM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1754,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLH0,fury,2295116276,1754,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-18T05:07:41Z,2024-08-18T05:07:41Z,"Hi @FormerKinG , thanks for the willingnesee to contribute to Apache Fury. You can take `org.apache.fury.serializer.StringSerializer` as the start point","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLH0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1757,https://api.github.com/repos/apache/fury/issues/1757,fury,2427041823,1757,java.lang.IndexOutOfBoundsException: No enough data in the stream java.io.ByteArrayInputStream@36f0f1be,zhangchaoxiang,31200408,,,CLOSED,2024-07-24T09:24:58Z,2024-07-24T12:02:16Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step

        ThreadSafeFury fury = Fury.builder().requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        fury.serialize(bas, Lists.newArrayList(1, 2, 3));
        fury.serialize(bas,Lists.newArrayList(10,9,7));
        fury.serialize(bas,Lists.newArrayList(7,5,4));
        bas.flush();

        InputStream bis = new ByteArrayInputStream(bas.toByteArray());
        FuryInputStream stream = of(bis);
        Object lobj1 =  fury.deserialize(stream);
        Object lobj2 =  fury.deserialize(stream);
        Object lobj3 =  fury.deserialize(stream);

### What did you expect to see?

no exception



### What did you see instead?

java.lang.IndexOutOfBoundsException: No enough data in the stream java.io.ByteArrayInputStream@36f0f1be

	at org.apache.fury.io.FuryInputStream.fillBuffer(FuryInputStream.java:66)
	at org.apache.fury.memory.MemoryBuffer.readerIndex(MemoryBuffer.java:1274)
	at org.apache.fury.resolver.ClassResolver.readClassDefs(ClassResolver.java:1469)
	at org.apache.fury.Fury.deserialize(Fury.java:758)
	at org.apache.fury.Fury.deserialize(Fury.java:780)
	at org.apache.fury.Fury.deserialize(Fury.java:773)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:160)

### Anything Else?

In version 0.5.1 it ran successfully, but after upgrading to 0.6.0 an exception was thrown, which is related to enabling COMPATIBLE.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1757/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F9BYN,fury,2247366157,1757,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-24T09:33:20Z,2024-07-24T09:33:20Z,"We enabled scoped meta share mode by default, but it doesn't support native streaming deserializaiton. Could you use `org.apache.fury.io.BlockedStreamUtils` instead? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F9BYN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F9MOo,fury,2247410600,1757,NA,zhangchaoxiang,31200408,,,NA,2024-07-24T09:44:55Z,2024-07-24T09:44:55Z,"I have checked the BlockedStreamUtils method. The deserialization process reads the entire byte stream before performing the actual deserialization. However, my file is large and requires streaming reads. It's not feasible to read the entire byte stream into memory.
Is there any other solution available?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F9MOo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1757,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F90fO,fury,2247575502,1757,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-24T10:45:00Z,2024-07-24T10:45:00Z,"Could you disable scopedMetaShare option?  I tested locally, It works","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6F90fO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1759,https://api.github.com/repos/apache/fury/issues/1759,fury,2429083201,1759,"org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [null]",zhangchaoxiang,31200408,,,CLOSED,2024-07-25T05:52:47Z,2024-07-25T06:46:46Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0-SNAPSHOT

### Component(s)

Java

### Minimal reproduce step

    @Test
    public void test() throws IOException {
        ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                //开启共享引用/循环引用支持
                .withRefTracking(true)
                .requireClassRegistration(false)
                //开启异步多线程编译
                .withStringCompressed(true)
                .withNumberCompressed(false)
                //开启类型前后兼容
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .buildThreadSafeFury();
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        List list = new ArrayList<>();
        HashMap<String, String> map = new HashMap<>();
        for (int i = 0; i < 500000; i++) {
            list.add(i);
            map.put(""key"" + i, ""value"" + i);
        }
        fury.serialize(bas, list);
        fury.serialize(bas, map);
        fury.serialize(bas, list);
        bas.flush();

        InputStream bis = new ByteArrayInputStream(bas.toByteArray());
        FuryInputStream stream = of(bis);
        Object lobj1 = fury.deserialize(stream);
        Object lobj2 = fury.deserialize(stream);
        Object lobj3 = fury.deserialize(stream);
    }

    @Test
    public void test1() throws IOException {
        ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                //开启共享引用/循环引用支持
                .withRefTracking(true)
                .requireClassRegistration(false)
                //开启异步多线程编译
                .withStringCompressed(true)
                .withNumberCompressed(false)
                //开启类型前后兼容
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .buildThreadSafeFury();
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        fury.serialize(bas, new HashMap[5000000]);
        fury.serialize(bas, new long[5000000]);
        fury.serialize(bas, new int[5000000]);
        bas.flush();

        InputStream bis = new ByteArrayInputStream(bas.toByteArray());
        FuryInputStream stream = of(bis);
        Object lobj1 = fury.deserialize(stream);
        Object lobj2 = fury.deserialize(stream);
        Object lobj3 = fury.deserialize(stream);
    }

### What did you expect to see?

no exception

### What did you see instead?

org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [null]
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserialize(Fury.java:793)
	at org.apache.fury.Fury.deserialize(Fury.java:812)
	at org.apache.fury.Fury.deserialize(Fury.java:805)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:160)
	at me.ele.roadnet.algo.odps.cli.FuryTest.test1(FuryTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: java.lang.NullPointerException
	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1153)
	at org.apache.fury.resolver.ClassResolver.readClassInfoWithMetaShare(ClassResolver.java:1345)
	at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1603)
	at org.apache.fury.Fury.readRef(Fury.java:857)
	at org.apache.fury.Fury.deserialize(Fury.java:789)
	... 31 more

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1759/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/1761,fury,2430424815,1761,Null Pointer in FuryLogger log method,davidnadeau,228949,,,CLOSED,2024-07-25T16:04:36Z,2024-07-26T02:10:56Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step

Pass in a null msg, and the logger will fail to log the error message and instead print:

```
j.l.NullPointerException: Cannot invoke ""String.length()"" because ""msg"" is null
	at o.a.f.l.FuryLogger.log(FuryLogger.java:145)
	at o.a.f.l.FuryLogger.error(FuryLogger.java:133)
```

The null pointer is caused by this line: https://github.com/apache/fury/blob/releases-0.6/java/fury-core/src/main/java/org/apache/fury/logging/FuryLogger.java#L145. We should first check that the msg is not null, before trying to get its length.

### What did you expect to see?

I expect the stack trace to print if mayPrintTrace is true, even when the msg is null.

### What did you see instead?

the actual error is not printed, instead we get a null pointer printed, this makes debugging the actual error more difficult.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1761/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKTCJ,fury,2250846345,1761,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-25T16:12:36Z,2024-07-25T16:12:36Z,"Do you use FuryLogger directly? Fury didn't pass null message to FuryLogger. But still, I will fix right now","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKTCJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKVat,fury,2250856109,1761,NA,davidnadeau,228949,,,NA,2024-07-25T16:15:16Z,2024-07-25T16:15:16Z,"No I do not, this stack trace shows better that fury is passing in null messages to FuryLogger:
```
java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""msg"" is null
	at org.apache.fury.logging.FuryLogger.log(FuryLogger.java:145)
	at org.apache.fury.logging.FuryLogger.error(FuryLogger.java:133)
	at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:81)
	at org.apache.fury.pool.ThreadPoolFury.serialize(ThreadPoolFury.java:92)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKVat/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKf5t,fury,2250899053,1761,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-25T16:30:51Z,2024-07-25T16:30:51Z,"I see, thanks. I fixed it in #1762. I'm curious about why ThreadPoolFury throws exception. Do you invoked this method with your function?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKf5t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKp9p,fury,2250940265,1761,NA,davidnadeau,228949,,,NA,2024-07-25T16:38:50Z,2024-07-25T16:38:50Z,"I have this setup:
```scala
val fury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(false)
    .buildThreadSafeFuryPool(Runtime.getRuntime.availableProcessors() * 2, Runtime.getRuntime.availableProcessors() * 2)
```

Then I call `fury.serialize(value)` and `fury.deserialize(bytes).asInstanceOf[Value]`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKp9p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKsW2,fury,2250950070,1761,NA,davidnadeau,228949,,,NA,2024-07-25T16:42:36Z,2024-07-25T16:42:36Z,"I wonder if there is an issue with Scala compatibility. I am seeing strange errors like:

```
java.lang.NullPointerException: Cannot read field ""serializer"" because ""classInfo"" is null at 
org.apache.==fury==.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1151) at 
org.apache.==fury==.resolver.ClassResolver.readClassInfo(ClassResolver.java:1609) at 
org.apache.fury.Fury.readRef(Fury.java:825) at org.apache.fury.Fury.deserialize(Fury.java:760) at 
org.apache.fury.Fury.deserialize(Fury.java:682) at 
org.apache.fury.pool.ThreadPoolFury.lambda$deserialize$9(ThreadPoolFury.java:135) at 
org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:79) at 
org.apache.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:135)
```
and 
```
Failed to deserialize key: ��+mxe���(��(�(� due to exception: java.lang.NullPointerException: Cannot read field ""serializer"" because ""classInfo"" is null""
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKsW2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKs6J,fury,2250952329,1761,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-25T16:43:34Z,2024-07-25T16:43:34Z,Could you provide reproduction code?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKs6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKt2y,fury,2250956210,1761,NA,davidnadeau,228949,,,NA,2024-07-25T16:45:09Z,2024-07-25T16:45:09Z,I will try today to see if I can create a reproducible code snippet,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKt2y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKugs,fury,2250958892,1761,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-25T16:46:14Z,2024-07-25T16:46:14Z,"If the schema are inconsistent, you may need to set CompatibleMode to  Compatible","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKugs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKwZw,fury,2250966640,1761,NA,davidnadeau,228949,,,NA,2024-07-25T16:49:13Z,2024-07-25T16:49:13Z,"Thanks, the schema of the class is not changing the data looks like
```scala
case class Features(id: Long, counts: Option[CountFeature], timeseries: Option[TimeseriesFeature])
case class CountFeature(featureA: Option[Long], featureB: Option[Long], featureC: Option[Long], featureD: Option[Long])
case class TimeseriesFeature(
  featureA: Option[List[TimestampedId]],
  featureB: Option[List[TimestampedId]],
  featureC: Option[List[TimestampedId]],
  featureD: Option[List[TimestampedId]]
)
case class TimestampedId(timestamp: Instant, id: Long)
```

Features is the type being serialized to and from using Fury.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GKwZw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GLs5V,fury,2251214421,1761,NA,davidnadeau,228949,,,NA,2024-07-25T19:05:29Z,2024-07-25T19:05:29Z,"I havn't been able to reproduce this issue outside of my company infrastructure, which is k8s running debian 11, jdk 17. I created a small Scala app that uses Fury andTwitter Finagle, and in a loop serializes and deserializes randomly generated Features objects on multiple different threads. However, this code was not able to reproduce any errors.


The issue only happens at pod startup, I will see a large surge of errors like:

```
java.lang.NullPointerException: Cannot read field ""serializer"" because ""classInfo"" is null at org.apache.==fury==.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1151) at org.apache.==fury==.resolver.ClassResolver.readClassInfo(ClassResolver.java:1609) at org.apache.fury.Fury.readRef(Fury.java:825) at org.apache.fury.Fury.deserialize(Fury.java:760) at org.apache.fury.Fury.deserialize(Fury.java:682) at org.apache.fury.pool.ThreadPoolFury.lambda$deserialize$9(ThreadPoolFury.java:135) at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:79) at org.apache.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:135)
```
and
```
Failed to deserialize key: ��+mxe���(��(�(� due to exception: java.lang.NullPointerException: Cannot read field ""serializer"" because ""classInfo"" is null""
```

Then they subside after a few seconds, and fury serialization/deserialization becomes stable.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GLs5V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GL3Wv,fury,2251257263,1761,NA,davidnadeau,228949,,,NA,2024-07-25T19:32:51Z,2024-07-25T19:32:51Z,"I'll try to keep digging, and open up another issue if I find something conclusive. If you have any hints or ideas, that would help me a lot.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GL3Wv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1761,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOEN9,fury,2251834237,1761,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-26T02:10:55Z,2024-07-26T02:10:55Z,"I see `  Wrapped by: j.l.NoClassDefFoundError: Could not initialize class com.etsy.mmx.core.se..` from your pasted stacktrace in slack, could you share more detailed stack?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOEN9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/1763,fury,2430989949,1763,NullPointer from ThreadPoolFury.serialize,davidnadeau,228949,,,CLOSED,2024-07-25T21:16:48Z,2024-08-05T12:15:19Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step

I have not been able to produce a minimal code example. It is very difficult to debug, since I am just getting: `java.lang.NullPointerException: null` as the exception. This is occurring when trying to serialize values.

I am also seeing some errors when trying to deserialize values (far fewer then the serialize error):
```
java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""msg"" is null
	at org.apache.fury.logging.FuryLogger.log(FuryLogger.java:145)
	at org.apache.fury.logging.FuryLogger.error(FuryLogger.java:133)
	at org.apache.fury.pool.FuryPooledObjectFactory.getPooledCache(FuryPooledObjectFactory.java:95)
	at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:77)
	at org.apache.fury.pool.ThreadPoolFury.deserialize(ThreadPoolFury.java:135)
```

### What did you expect to see?

No null pointers when serializing and deserializing data.

### What did you see instead?

j.l.NullPointerException: null

### Anything Else?

I am using Scala 2.13.12, my application runs in k8s (debian 11), with JDK 17. In production there are around 200 pods, and 20 cpus per pod.

I configure Fury in a scala Object like so:

```scala
object FuryUtils {
  lazy val fury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(false)
    .buildThreadSafeFuryPool(Runtime.getRuntime.availableProcessors() * 2, Runtime.getRuntime.availableProcessors() * 2)
}
```

and i serialize/deserialze my values like:
```scala
fury.serialize(value)
fury.deserialize(bytes).asInstanceOf[MyData]
```

I am calling this function ~20,000 times per second. And it is failing ~30 times per second.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1763/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GN2Mo,fury,2251776808,1763,NA,davidnadeau,228949,,,NA,2024-07-26T01:19:42Z,2024-07-26T01:19:42Z,Maybe this is related? https://github.com/apache/fury/issues/1524,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GN2Mo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GODDv,fury,2251829487,1763,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-26T02:04:30Z,2024-07-26T02:04:30Z,"> Maybe this is related? #1524

https://github.com/apache/fury/issues/1524 will happen only when you register classes in different threads at the same time.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GODDv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOFW5,fury,2251838905,1763,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-26T02:17:05Z,2024-07-26T02:17:05Z,"@davidnadeau Could you use the snapshot jar instead? It fixed NPE in FUryLogger, and will provide the stacktrace of the ro ot cause","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOFW5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOIAO,fury,2251849742,1763,NA,davidnadeau,228949,,,NA,2024-07-26T02:30:24Z,2024-07-26T02:30:24Z,"Oh nice, thank you. I'll try that.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GOIAO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6G7UgC,fury,2263697410,1763,NA,davidnadeau,228949,,,NA,2024-08-01T18:25:57Z,2024-08-01T18:25:57Z,"I got more details using the snapshot version. This null pointer occurs when attempting to deserialize a value. I only see these when redeploying the application, so it appears to be something related to application startup. The errors do stop on their own. We only see a few (less the 20) of these messages when redeploying our application with 200 pods. 

```
j.l.NullPointerException: null
	at c.g.c.b.Preconditions.checkNotNull(Preconditions.java:906)
	at c.g.c.c.LocalCache.getIfPresent(LocalCache.java:4024)
	at c.g.c.c.LocalCache$LocalManualCache.getIfPresent(LocalCache.java:4927)
	at o.a.f.p.FuryPooledObjectFactory.getPooledCache(FuryPooledObjectFactory.java:88)
	... 45 common frames omitted
Wrapped by: j.l.RuntimeException: java.lang.NullPointerException
	at o.a.f.p.FuryPooledObjectFactory.getPooledCache(FuryPooledObjectFactory.java:96)
	at o.a.f.p.ThreadPoolFury.execute(ThreadPoolFury.java:77)
	... 44 common frames omitted
Wrapped by: j.l.RuntimeException: java.lang.RuntimeException: java.lang.NullPointerException
	at o.a.f.p.ThreadPoolFury.execute(ThreadPoolFury.java:82)
	at o.a.f.p.ThreadPoolFury.deserialize(ThreadPoolFury.java:135)
	at c.e.m.c.s.m.FuryUtils$MemcachedSerializableRivuletListingFeatures$.deserialize(FuryUtils.scala:25)
	at c.e.m.c.s.m.FuryUtils$MemcachedSerializableRivuletListingFeatures$.deserialize(FuryUtils.scala:17)
	at c.e.m.c.s.m.MemcachedSerializable$.deserialize(MemcachedSerializable.scala:50)
	at c.e.m.c.s.m.MemcachedClient.$anonfun$get$5(MemcachedClient.scala:79)
	at scala.util.Try$.apply(Try.scala:210)
	at c.e.m.c.s.m.MemcachedClient.$anonfun$get$4(MemcachedClient.scala:79)
	at s.c.Iterator$$anon$10.nextCur(Iterator.scala:594)
	at s.c.Iterator$$anon$10.hasNext(Iterator.scala:608)
	at s.c.mutable.Growable.addAll(Growable.scala:61)
	at s.c.mutable.Growable.addAll$(Growable.scala:57)
	at s.c.i.MapBuilderImpl.addAll(Map.scala:710)
	at s.c.immutable.Map$.from(Map.scala:661)
	at s.c.immutable.Map$.from(Map.scala:172)
	at s.collection.MapOps.flatMap(Map.scala:321)
	at s.collection.MapOps.flatMap$(Map.scala:321)
	at s.c.AbstractMap.flatMap(Map.scala:405)
	at c.e.m.c.s.m.MemcachedClient.$anonfun$get$3(MemcachedClient.scala:78)
	at c.t.util.Return.map(Try.scala:308)
	at c.t.util.Future.$anonfun$map$1(Future.scala:1913)
	at c.t.u.Promise$TryTransformer.liftedTree2$1(Promise.scala:275)
	at c.t.u.Promise$TryTransformer.k(Promise.scala:275)
	at c....""
```

I have not made a lot of progress debugging the NullPointer that is occuring at serialization time. Other then the fact that it doesn't appear to be getting thrown from `fury.serialize()`. Which means it is being thrown in my application logic. I'll debug more to see whether for some certain data inputs, the output of fury.serialize is causing my application layer to throw a nullpointer.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6G7UgC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6G-IfR,fury,2264434641,1763,NA,LiangliangSui,116876207,,,NA,2024-08-02T03:17:46Z,2024-08-02T03:17:46Z,"Hi @davidnadeau , from the backtrce, should be that `classLoaderLocal.get()` got the null `ClassLoader`

```java
// org.apache.fury.pool.FuryPooledObjectFactory
public ClassLoaderFuryPooled getPooledCache() {
  try {
    ClassLoader classLoader = classLoaderLocal.get();
    ClassLoaderFuryPooled classLoaderFuryPooled =
        classLoaderFuryPooledCache.getIfPresent(classLoader);
    if (classLoaderFuryPooled == null) {
      // double check cache
      return getOrAddCache(classLoader);
    }
    return classLoaderFuryPooled;
  } catch (Exception e) {
    LOG.error(e.getMessage(), e);
    throw new RuntimeException(e);
  }
}
```

The `ClassLoader` obtained from the `classLoaderLocal` initialization function is null
```java
// org.apache.fury.pool.FuryPooledObjectFactory
private final ThreadLocal<ClassLoader> classLoaderLocal =
      ThreadLocal.withInitial(() -> Thread.currentThread().getContextClassLoader());
```

`Thread#getContextClassLoader` seems to be a focus of analysis.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6G-IfR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1763,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HPSXS,fury,2268931538,1763,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-05T12:15:09Z,2024-08-05T12:15:09Z,"Hi @davidnadeau , I fixed this issue in https://github.com/apache/fury/pull/1792, could you try lastest snapshot jar?
```java
<dependency>
  <groupId>org.apache.fury</groupId>
  <artifactId>fury-core</artifactId>
  <version>0.8.0-SNAPSHOT</version>
</dependency>
```

If the error still persists, please reopen this issue again.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HPSXS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1764,https://api.github.com/repos/apache/fury/issues/1764,fury,2432528409,1764,Enum with abstract method throw java.lang.UnsupportedOperationException: Class class com.cloud.thales.infrast.persist.Gender doesn't support serialization. ,zjpjohn,10722542,,,CLOSED,2024-07-26T16:00:29Z,2024-07-26T17:39:28Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.6.0

### Component(s)

Java

### Minimal reproduce step
```java
@Getter
@AllArgsConstructor
public enum Gender {
    FEMALE(1, ""女"") {
        @Override
        public void operate() {
            System.out.println(this.description());
        }
    },
    MALE(2, ""男"") {
        @Override
        public void operate() {
            System.out.println(this.description());
        }
    };

    private final Integer gender;
    private final String name;

    public Integer value() {
        return this.gender;
    }

    public String description() {
        return this.name;
    }

    public abstract void operate();
}

@Slf4j
@Data
@NoArgsConstructor
public class UserInfoDo {

    private Long userId;
    private String nickname;
    private String phone;
    private Gender gender;

    public UserInfoDo(String nickname, String phone) {
        this.nickname = nickname;
        this.phone = phone;
        this.gender = Gender.MALE;
    }

    public UserInfoDo(Long userId, String nickname, String phone) {
        this.userId = userId;
        this.nickname = nickname;
        this.phone = phone;
        this.gender = Gender.MALE;
    }

    public static void main(String[] args) {
        UserInfoDo userInfo = new UserInfoDo(""张三"", ""13312344321"");
        Fury fury = Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build();
        byte[] serialize = fury.serialize(userInfo);
        UserInfoDo deserialize = (UserInfoDo)fury.deserialize(serialize);
        System.out.println(deserialize.getNickname());
    }
}

```

### What did you expect to see?

java.lang.UnsupportedOperationException: Class class com.cloud.thales.infrast.persist.Gender doesn't support serialization. 

### What did you see instead?

0.5.1 version is ok, but version 0.6.0 is UnsupportedOperationException

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1764/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1764,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GS3ON,fury,2253091725,1764,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-26T16:23:08Z,2024-07-26T16:23:08Z,"Hi @zjpjohn , thanks for reporting this bug, I fixed in https://github.com/apache/fury/pull/1765. Seems it's introduced in https://github.com/apache/fury/pull/1646","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GS3ON/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/1766,fury,2433277580,1766,Who is Using Apache Fury?,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-07-27T05:47:51Z,2024-12-09T08:34:23Z,"## Who is Using Apache Fury?
We sincerely thank everyone who uses and supports Apache Fury. Your input helps us improve Fury and foster a thriving community and ecosystem.

## Purpose of This Issue
1. To gather feedback from the community to enhance Apache Fury
2. To encourage more partners to contribute to the project
3. To understand real-world use cases of Apache Fury
4. To collect feature requests for future development planning

## How You Can Contribute
Please submit a comment on this issue with the following information:

Required:
1. Your company, school, or organization name
2. Your organization's logo (with permission for use on our website)

Optional:
1. Your city and country
2. Contact information (e.g., email, Twitter handle)
3. Which situation you use Apache Fury
4. How much benifits Apache Fury brings to your project

## How you use Apache Fury
Features you'd like to see in future releases
## Why Your Input Matters
Your participation and support drive our progress. By sharing your experience, you help shape the future of Apache Fury and inspire others to join our community.

## Recognition
We appreciate your contribution! After you share your information, we'll feature your organization's logo on our [Users page](https://fury.apache.org/user).

Thank you for being part of the Apache Fury community!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1766/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GVoJh,fury,2253816417,1766,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-27T06:18:35Z,2024-07-27T06:18:35Z,"Here are some companies/products we know that are using Apache Fury:
- [AntGroup](https://www.antgroup.com/)
- [Alipay](https://www.alipay.com/)
- [Alibaba](https://www.alibaba.com/)
- [Taobao](https://www.taobao.com/)
- [Tmall](http://www.tmall.com/)
- [饿了么](https://www.ele.me/)
- [高德地图](https://amap.com/)
- [唯品会](VIP.com)
- [redisson](https://github.com/redisson/redisson)
- [途虎养车](https://www.tuhu.cn/cn/home/default)
- [安恒](https://www.dbappsecurity.com.cn/)
- [lindorm](https://www.alibabacloud.com/help/en/lindorm)
- [LakeSoul](https://github.com/lakesoul-io/LakeSoul)
- [jfinal](https://github.com/jfinal/)
- [libgdx](https://libgdx.com/) and [tantrum](https://github.com/tommyettinger/tantrum)
- [solon](https://github.com/opensolon/solon)
- [mangooio](https://github.com/svenkubiak/mangooio)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GVoJh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IcEuv,fury,2289060783,1766,NA,LofiSu,163713803,LofiSu,,NA,2024-08-14T15:03:07Z,2024-08-14T15:03:07Z,"> 
> * **logo**: your **company/school/organization logo**.
> * **name**: your **company/school/organization name**
> * **website**: your **company/school/organization** website
> * **contact**: contact info, e.g: blog, email, Twitter (at least one).
> * **usage Scenario**: for what business scenario do you use Fury.
> 
> 衷心感谢所有使用和支持 Fury 的人。我们将尽最大努力让Fury变得更加完善，让社区和生态更加繁荣。
> 
> 为了倾听更多社区的声音，让 Fury 更完善, 吸引更多的用户和开发者加入，诚邀大家登记使用信息, 包括实际使用场景等。
> 
> 我们期待您提供以下信息，这些信息将更新在Fury官方网站的用户页面：
> 
> * **logo**: 您的 **公司/学校/组织** logo
> * **名称**: 您的 **公司/学校/组织** 名称
> * **网站**: 您的 **公司/学校/组织** 官网
> * **联系方式**: 如:博客, email, Twitter
> * **使用场景**: 您使用 Fury 的业务场景是什么。
> * **收益**: Fury 为您的业务场景带来多少的性能和成本收益(比如延迟下降XXX毫秒，吞吐提升XXX，成本下降XXX)。

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IcEuv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JKWtb,fury,2301193051,1766,NA,KouShenhai,48756217,laokou,2413176044@qq.com,NA,2024-08-21T05:58:47Z,2024-08-21T05:58:47Z,"![image](https://github.com/user-attachments/assets/faab9c55-b324-4ddc-b67c-f0ebdb93f275)

名称: KCloud-Platform-IoT
网站: https://github.com/KouShenhai/KCloud-Platform-IoT
联系方式: 2413176044@qq.com
使用场景: 序列化与反序列化JSqlParser，用来缓存SQL，加快Mybatis Plus查询速度","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JKWtb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6J7OIb,fury,2314002971,1766,NA,KayLi1021,34885101,KayLi,,NA,2024-08-28T02:45:31Z,2024-08-28T02:45:31Z,"名称：飞猪
网站：https://www.fliggy.com/","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6J7OIb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LrKil,fury,2343348389,1766,NA,Hen1ng,72974271,hn,,NA,2024-09-11T11:15:49Z,2024-09-11T11:15:49Z,"饿了么
https://www.ele.me/","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LrKil/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L2JRF,fury,2346226757,1766,NA,wangjie-fourth,46479343,wangjie,wangjie_fourth@163.com,NA,2024-09-12T13:02:35Z,2024-09-12T13:02:35Z,"![image](https://github.com/user-attachments/assets/5902a953-abdc-47f2-85e2-ad535d782d09)
名称: 携程
网站: https://www.ctrip.com/
联系方式: wangjie_fourth@163.com
使用场景: 解决服务接口大报文的序列化和反序列化耗时高的问题

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L2JRF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6P06sV,fury,2413013781,1766,NA,WeiCheng97,18473871,WilliamJiang97,williamjiang97@gmail.com,NA,2024-10-15T06:35:38Z,2024-10-15T06:35:38Z,"![image](https://github.com/user-attachments/assets/20f6ed4c-1a0a-405d-b833-81ea2d9703f0)
名称：去哪儿
网站：https://www.qunar.com/
使用场景：解决缓存数据大报文/复杂数据结构的序列化反序列化，时间和cpu开销大的问题。相比protostuff减少平均15%时长，P98 50%时长，cpu占用优于protostuff约32%","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6P06sV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q5xpB,fury,2431064641,1766,NA,farmerworking,29476659,,,NA,2024-10-23T06:48:59Z,2024-10-23T06:48:59Z,"名称：Lindorm
产品：https://www.aliyun.com/product/apsaradb/lindorm

使用场景：Lindorm面向海量泛时序、半结构化和非结构化数据提供低成本存储、在线查询和离线分析等一站式数据服务，针对AI场景支持正排、全文、向量融合检索和AI推理能力；兼容MySQL协议、HBase、ES、Hive、Spark、HDFS等开源标准。提供宽表、时序、向量等数据模型，是互联网、车联网、广告、金融、监控、游戏等场景的首选。","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q5xpB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UydA2,fury,2496254006,1766,NA,PanagiotisDrakatos,11703704,Panagiotis Drakatos,,NA,2024-11-24T21:54:19Z,2024-11-24T21:54:19Z,"![Adrastus5-01](https://github.com/user-attachments/assets/e46ff7ac-c2db-4c80-9b65-01b2849ed5e8)

- **Name**: Adrestus.net
- **Website**: https://www.adrestus.net/
- **Contact**: panagiotisdrakatos@gmail.com, https://stackoverflow.com/users/3163824/panagiotis-drakatos, https://x.com/The_PanosDR
- **Usage Scenario**: Adrestus is a project dedicated to building the infrastructure for a truly decentralized internet and implementing the Adrestus cryptocurrency. Our core principle is that diverse blockchains will emerge to address specific business challenges across various industries. Consequently, the Adrestus network is designed to support unique blockchain topologies and provide a trustless mechanism for interoperability between chains
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UydA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V96HN,fury,2516033997,1766,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-04T02:30:33Z,2024-12-04T02:30:33Z,"
![image](https://github.com/user-attachments/assets/73c7c138-8d80-4e8e-a204-19a899ab5553)
- Name: quarkus 
- Website: https://github.com/quarkusio/quarkus
- Introduction: a Cloud Native, (Linux) Container First framework for writing Java applications
- Integration code: https://github.com/quarkiverse/quarkus-fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V96HN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1766,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wovk1,fury,2527263029,1766,NA,zhfeng,1246139,Zheng Feng,zfeng@redhat.com,NA,2024-12-09T08:34:22Z,2024-12-09T08:34:22Z,"![camel](https://camel.apache.org/_/img/logo-d-a567cee6fa.svg)

- **Name**: Apache Camel
- **Website**: https://camel.apache.org/
- **Introduction**: Camel is an Open Source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data. and `camel-fury` is introduced as a data foramt which people can use with `marshal` and `unmarshal` DSL.
- **Docs**: https://camel.apache.org/components/next/dataformats/fury-dataformat.html","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wovk1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1772,https://api.github.com/repos/apache/fury/issues/1772,fury,2433409913,1772,[Java] add fury deep copy documentation,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-07-27T10:17:38Z,2024-07-27T10:29:25Z,"## Is your feature request related to a problem? Please describe.
add fury deep copy documentation
## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1772/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1776,https://api.github.com/repos/apache/fury/issues/1776,fury,2434592472,1776,[Java] Optimize the copy performance of some thread-safe classes,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,OPEN,2024-07-29T06:46:59Z,2024-07-30T03:38:57Z,"## Is your feature request related to a problem? Please describe.
Some thread-safe classes use a generic copyElements() method, for example: `CopyOnWriteArrayList`...
when adding elements, locking operations are performed, which is very time-consuming.


## Describe the solution you'd like
Optimize the performance of these copy classes

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
![image](https://github.com/user-attachments/assets/fcd746e0-0c5e-4e64-81d8-5c4643df3da5)
![image](https://github.com/user-attachments/assets/9519d32b-b542-4b22-b582-771eb0728df6)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1776/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1776,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjRul,fury,2257394597,1776,NA,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,NA,2024-07-30T03:38:56Z,2024-07-30T03:38:56Z,"I will deal with it. If there is anything to add, please let me know. @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjRul/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1777,https://api.github.com/repos/apache/fury/issues/1777,fury,2434618275,1777,[Java] Support copy capabilities for some classes without no-argument constructors,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,CLOSED,2024-07-29T07:02:42Z,2024-08-13T06:14:52Z,"## Is your feature request related to a problem? Please describe.
Some classes with no-argument constructors will report an error when calling `copy()`

## Describe the solution you'd like
These classes can use the copy capability normally.

## Additional context
![image](https://github.com/user-attachments/assets/c7764252-ccb5-42bd-80d5-bda7e418f02e)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1777/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1777,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjRyf,fury,2257394847,1777,NA,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,NA,2024-07-30T03:39:14Z,2024-07-30T03:39:14Z,"I will deal with it. If there is anything to add, please let me know. @chaokunyang ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjRyf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1777,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjSOJ,fury,2257396617,1777,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-30T03:41:37Z,2024-07-30T03:41:37Z,Would you like to submit a PR to support the copy of all guava Container?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjSOJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1777,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjUki,fury,2257406242,1777,NA,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,NA,2024-07-30T03:54:27Z,2024-07-30T03:54:27Z,"> Would you like to submit a PR to support the copy of all guava Container?

yes","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GjUki/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1779,https://api.github.com/repos/apache/fury/issues/1779,fury,2439434572,1779,[Go] example is wrong,donnol,5707519,donnol,,CLOSED,2024-07-31T08:21:04Z,2024-07-31T11:28:06Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

latest

### Component(s)

Go

### Minimal reproduce step

[From](https://fury.apache.org/docs/start/usage#golang)

[Play](https://go.dev/play/p/E4UW68-5Rgj)

```go
package main

import furygo ""https://github.com/apache/fury/go/fury""
import ""fmt""

func main() {
	type SomeClass struct {
		F1 *SomeClass
		F2 map[string]string
		F3 map[string]string
	}
	fury := furygo.NewFury(true)
	if err := fury.RegisterTagType(""example.SomeClass"", SomeClass{}); err != nil {
		panic(err)
	}
	value := &SomeClass{F2: map[string]string{""k1"": ""v1"", ""k2"": ""v2""}}
	value.F3 = value.F2
	value.F1 = value
	bytes, err := fury.Marshal(value)
	if err != nil {
	}
	var newValue interface{}
	// bytes can be data serialized by other languages.
	if err := fury.Unmarshal(bytes, &newValue); err != nil {
		panic(err)
	}
	fmt.Println(newValue)
}
```

### What did you expect to see?

Run successfully.

### What did you see instead?

prog.go:5:2: invalid import path: https://github.com/apache/fury/go/fury

### Anything Else?

should remove `https://` in the import path : `https://github.com/apache/fury/go/fury` like [this](https://go.dev/play/p/7dw-NQ55JbB).

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1779/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1779,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GuWij,fury,2260297891,1779,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-07-31T11:27:42Z,2024-07-31T11:27:42Z,"Good catch, thanks for reporting this issue @donnol ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6GuWij/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1781,https://api.github.com/repos/apache/fury/issues/1781,fury,2442432452,1781,[CI] Rust ci failed,LiangliangSui,116876207,,,CLOSED,2024-08-01T13:15:07Z,2024-08-01T15:26:40Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

N/A

### Component(s)

Other

### Minimal reproduce step

Rust ci pass

### What did you expect to see?

Rust ci has failed

### What did you see instead?

N/A

### Anything Else?

```
error: doc list item missing indentation
  --> fury/src/serializer.rs:52:5
   |
52 | /// The order of function calls is reserved_space -> serialize -> write.
   |     ^
   |
   = help: if this is supposed to be its own paragraph, add a blank line
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation
   = note: `-D clippy::doc-lazy-continuation` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::doc_lazy_continuation)]`
help: indent this line
   |
52 | ///    The order of function calls is reserved_space -> serialize -> write.
   |     +++

error: doc list item missing indentation
  --> fury/src/serializer.rs:60:5
   |
60 | /// If the object is in a Vec, the call order is reserved_space -> serialize -> write -> write_vec.
   |     ^
   |
   = help: if this is supposed to be its own paragraph, add a blank line
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation
help: indent this line
   |
60 | ///    If the object is in a Vec, the call order is reserved_space -> serialize -> write -> write_vec.
   |     +++

error: doc list item missing indentation
  --> fury/src/serializer.rs:61:5
   |
61 | /// The write_vec function is used to write the elements of the Vec. But why can't we just loop through the elements and write each eleme...
   |     ^
   |
   = help: if this is supposed to be its own paragraph, add a blank line
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation
help: indent this line
   |
61 | ///    The write_vec function is used to write the elements of the Vec. But why can't we just loop through the elements and write each element one by one?
   |     +++

error: doc list item missing indentation
  --> fury/src/serializer.rs:62:5
   |
62 | /// This is because Fury includes some primitive types like FuryPrimitiveBoolArray which do not include the head of the elements,
   |     ^
   |
   = help: if this is supposed to be its own paragraph, add a blank line
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation
help: indent this line
   |
62 | ///    This is because Fury includes some primitive types like FuryPrimitiveBoolArray which do not include the head of the elements,
   |     +++

error: doc list item missing indentation
  --> fury/src/serializer.rs:63:5
   |
63 | /// but other Vecs do. So the write_vec function is necessary to handle the differences. Primitive arrays can overwrite the function.
   |     ^
   |
   = help: if this is supposed to be its own paragraph, add a blank line
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation
help: indent this line
   |
63 | ///    but other Vecs do. So the write_vec function is necessary to handle the differences. Primitive arrays can overwrite the function.
   |     +++

error: could not compile `fury` (lib) due to 5 previous errors
```

https://github.com/apache/fury/actions/runs/10179616626/job/28155735743
https://github.com/apache/fury/actions/runs/10198545711/job/28215186316?pr=1780

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1781/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1784,https://api.github.com/repos/apache/fury/issues/1784,fury,2443262973,1784,$JAVA_HOME/bin/java -agentlib:native-image-agent=config-output-dir=/path/to/config-dir/ ...,Sandra-Amina-Boss,168736114,,,CLOSED,2024-08-01T19:38:26Z,2024-08-01T19:43:18Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1784/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1785,https://api.github.com/repos/apache/fury/issues/1785,fury,2443361427,1785,The fact that this function is enough now and doesn't break tests is pretty surprising- I think it relates to some work @Andarist might've done here.,Sandra-Amina-Boss,168736114,,,CLOSED,2024-08-01T20:32:43Z,2024-08-05T07:03:24Z,"The fact that this function is enough now and doesn't break tests is pretty surprising- I think it relates to some work @Andarist might've done here.

_Originally posted by @DanielRosenwasser in https://github.com/microsoft/TypeScript/pull/59504#discussion_r1700690732_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1785/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1786,https://api.github.com/repos/apache/fury/issues/1786,fury,2444467294,1786,Can fury support serializing enumerations by enumeration name?,lionel-xie,30900091,lionel.xie,,OPEN,2024-08-02T09:05:35Z,2024-08-04T03:31:09Z,"## Is your feature request related to a problem? Please describe.
Can fury support serializing enumerations by enumeration name? Serializing enumeration names like a string serializer. Serializing existing enumerations through ordinal will cause errors if the order is destroyed when adding new enumerations. Maybe can directly reuse the write and read methods in the stringSerializer?
![image](https://github.com/user-attachments/assets/3f43eba3-98c7-4c21-914b-4523ce98ca89)

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1786/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1786,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HBBbx,fury,2265192177,1786,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-02T11:51:48Z,2024-08-02T11:51:48Z,"Yes, this make sense, would you like to contribute to it? The implementation is not complex. But we'd like to keep serializing by ordinal as default. And encode enum string by Fury MetaString algorithm using `org.apache.fury.resolver.ClassResolver#getMetaStringResolver`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HBBbx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1786,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HI-bz,fury,2267277043,1786,NA,lionel-xie,30900091,lionel.xie,,NA,2024-08-04T03:31:08Z,2024-08-04T03:31:08Z,"OK, I can try it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HI-bz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1788,https://api.github.com/repos/apache/fury/issues/1788,fury,2447157982,1788,[Scala] Support scala object copy,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-08-04T14:25:17Z,2024-08-18T05:06:32Z,"## Is your feature request related to a problem? Please describe.
We implemented scala serializers in fury-scala, we should also implement copy method in those serializers
## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. -->

## Additional context
<!-- Add any other context or screenshots about the feature request here. -->
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1788/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1788,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HUMDC,fury,2270216386,1788,NA,LiangliangSui,116876207,,,NA,2024-08-06T01:56:00Z,2024-08-06T01:56:00Z,I will do this.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HUMDC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1788,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ii4qD,fury,2290846339,1788,NA,LiangliangSui,116876207,,,NA,2024-08-15T07:58:27Z,2024-08-15T07:58:27Z,"Hello @chaokunyang , I'm about to start working on this, could you add some details?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ii4qD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1788,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLDz,fury,2295116019,1788,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-18T05:06:31Z,2024-08-18T05:06:31Z,"We have scala serializers src/main/scala/org/apache/fury/serializer/scala/CollectionSerializer.scala/MapSerializer.scala, we should add copy support for such serializers","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLDz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/1793,fury,2450523335,1793,Fury FAQ,LofiSu,163713803,LofiSu,,CLOSED,2024-08-06T10:26:27Z,2024-08-08T02:55:24Z,"# Apache Fury 
### **Apache Fury  ── A blazing-fast cross-language serialization framework powered by just-in-time compilation and zero-copy !**
>  # FAQ
### You can write about some problems you encounter during use here or create issues .
#### Create issues：https://github.com/apache/fury/issues
#### Road Map:#1017 
#### Users: #1766




","{""url"": ""https://api.github.com/repos/apache/fury/issues/1793/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HiEiU,fury,2273855636,1793,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-07T16:24:39Z,2024-08-07T16:24:39Z,"If uses have some issues, they should create it in https://github.com/apache/fury/issues instead of here. Do we really need this issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HiEiU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HiKn5,fury,2273880569,1793,NA,LofiSu,163713803,LofiSu,,NA,2024-08-07T16:39:12Z,2024-08-07T16:39:12Z,"> If uses have some issues, they should create it in https://github.com/apache/fury/issues instead of here. Do we really need this issue?

I'm not sure about this, but it seems that almost all communities have FAQ links. Maybe we can shrink the font size of the navigation bar a bit and leave room for the “Team” and “Users” pages.I think it is more important to fill in the content now. At present, the home page is empty and needs to be filled with more introductions and content.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6HiKn5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hlw9i,fury,2274824034,1793,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-08T02:26:52Z,2024-08-08T02:26:52Z,Maybe it should be a page like https://arrow.apache.org/faq/ rather than an issue?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hlw9i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hl2V9,fury,2274846077,1793,NA,LofiSu,163713803,LofiSu,,NA,2024-08-08T02:45:43Z,2024-08-08T02:45:43Z,"> Maybe it should be a page like https://arrow.apache.org/faq/ rather than an issue?

This is a much better choice.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hl2V9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1793,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hl46q,fury,2274856618,1793,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-08T02:55:11Z,2024-08-08T02:55:11Z,"I will close this issue, we can open a new issue to add a new FAQ page. But more importantly, we need to decide what should be included here. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Hl46q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1796,https://api.github.com/repos/apache/fury/issues/1796,fury,2459212551,1796,[Java] Add support for deserialization between applications and use of typeTag on thread safe instances,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,CLOSED,2024-08-10T17:29:57Z,2024-09-29T08:34:25Z,"I have been using Fury as a mean for serialization in a single application. When it comes to move serialized objects between applications, I have not been able to deal with different DTO packages/classNames (different origin and target classes).

I have tried using XLANG serialization and registering classes with the same typeTag, but it does not work. My understanding is that it should work similarly to a cross language de-serialization. 

As an additional comment, the typeTag registration is not available on thread safe classes in Java (not defined on BaseFury). I don't see a reason why not to have the option on thread safe usages.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1796/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1796,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N7zBn,fury,2381262951,1796,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-29T08:34:24Z,2024-09-29T08:34:24Z,"Type tag was designed for xlang serialization. But you come up with a good use scenario. We should extend type tag to support Java serialization. After it's supported, We should add this to BaseFury interface.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N7zBn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1799,https://api.github.com/repos/apache/fury/issues/1799,fury,2462439447,1799,"[Java] Deserialization optimization, instead of discarding fields, puts non-existent fields into a specified field.",DemonJun,21258148,DemonJun,,OPEN,2024-08-13T05:48:33Z,2024-08-13T05:48:33Z,"## Is your feature request related to a problem? Please describe.
When the upstream and downstream attributes are inconsistent, for example, the upstream is 10 fields, the downstream is not synchronized to update the field attributes, and there are only 9 attributes, then the downstream non-existent attributes will be ignored during deserialization. 

## Describe the solution you'd like
In some scenarios, we don't want the attribute to be lost, so can we put the attribute into a specified field, such as the `other` field (a map collection)?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1799/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/1801,fury,2469971452,1801,Scala: wrong class name in generated java source for class inside nested objects,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,CLOSED,2024-08-16T10:22:35Z,2024-09-05T05:11:00Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java, Other

### Minimal reproduce step

https://github.com/yoohaemin/fury-bugreport/blob/65788b6902939e71aa136959183c13b132861ce6/src/main/scala/Main.scala

You can clone the repo and try `sbt run` at the root of the repo.

### What did you expect to see?

serialization round-trip works

### What did you see instead?

generate java source failed to compile. See the linked file above for the message.

### Anything Else?

See: https://stackoverflow.com/questions/30809070/accessing-scala-nested-classes-from-java

This shows the correct format of referring to classes inside nested scala `object`s. In this case, it should be `test.A$B$C`. It generated `test.A.B$.C` (See line 40 of the generated code inside my example).

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1801/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6It8hP,fury,2293745743,1801,NA,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,NA,2024-08-16T15:46:41Z,2024-08-16T15:46:41Z,"I wonder if it's possible to fallback to disabling jit when code compilation fails, instead of failing.
We get performance penalty but at least it will work correctly.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6It8hP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IxA4M,fury,2294550028,1801,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-17T02:20:38Z,2024-08-17T02:20:38Z,Disabling jit at runtime may swallow some errors. The codegen error is limitted. There is barely java codegen error. Scala is a little complicated but I believe we can fix this soon,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IxA4M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IxFiY,fury,2294569112,1801,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-17T02:32:25Z,2024-08-17T02:32:25Z,You can workaround this by register ObjectSerializer for this type,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IxFiY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLwH,fury,2295118855,1801,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-18T05:21:26Z,2024-08-18T05:21:26Z,"Hi @yoohaemin , I fixed this issue in #1809, please take a look","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzLwH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1801,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6K6kit,fury,2330609837,1801,NA,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,NA,2024-09-05T05:10:59Z,2024-09-05T05:10:59Z,"@chaokunyang Thank you very much, I was able to verify the issue does not appear on 0.8.0-SNAPSHOT","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6K6kit/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1802,https://api.github.com/repos/apache/fury/issues/1802,fury,2470465322,1802,Scala 3: ClassCastException on deserializing an Array of intersection types,kaepaokaawela,160617110,,,CLOSED,2024-08-16T15:12:32Z,2024-08-16T15:13:14Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0
Java 22
Linux

### Component(s)

Java, Other

### Minimal reproduce step

Please see: https://github.com/yoohaemin/fury-bugreport/blob/b4800828e98d605ab76155505b70b7f36f0b02d5/src/main/scala/Main2.scala

### What did you expect to see?

Deserialization success

### What did you see instead?

```
Exception in thread ""main"" java.lang.ClassCastException: class [Ljava.io.Serializable; cannot be cast to class [Lscala.deriving.Mirror$Singleton; ([Ljava.io.Serializable; is in module java.base of loader 'bootstrap'; [Lscala.deriving.Mirror$Singleton; is in unnamed module of loader 'app')
  at test2.Main$.main(Main2.scala:43)
  at test2.Main.main(Main2.scala)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1802/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1802,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Itvub,fury,2293693339,1802,NA,kaepaokaawela,160617110,,,NA,2024-08-16T15:13:14Z,2024-08-16T15:13:14Z,"Oh oops so sorry, used work account...","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Itvub/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1803,https://api.github.com/repos/apache/fury/issues/1803,fury,2470469371,1803,Scala 3: ClassCastException on deserializing an Array of intersection types,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,CLOSED,2024-08-16T15:14:59Z,2024-09-06T18:21:13Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0
Linux
Java 22

### Component(s)

Java, Other

### Minimal reproduce step

Please see: https://github.com/yoohaemin/fury-bugreport/blob/b4800828e98d605ab76155505b70b7f36f0b02d5/src/main/scala/Main2.scala

### What did you expect to see?

Deserialization success

### What did you see instead?

```
Exception in thread ""main"" java.lang.ClassCastException: class [Ljava.io.Serializable; cannot be cast to class [Lscala.deriving.Mirror$Singleton; ([Ljava.io.Serializable; is in module java.base of loader 'bootstrap'; [Lscala.deriving.Mirror$Singleton; is in unnamed module of loader 'app')
  at test2.Main$.main(Main2.scala:43)
  at test2.Main.main(Main2.scala)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1803/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1803,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JCp4m,fury,2299174438,1803,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-20T15:45:08Z,2024-08-20T15:45:08Z,"@yoohaemin Seems it didn't go to fury code path
![image](https://github.com/user-attachments/assets/10b407a3-8e62-4041-b2e1-c5ae2dc25f82)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JCp4m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1803,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LJxi7,fury,2334595259,1803,NA,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,NA,2024-09-06T18:21:13Z,2024-09-06T18:21:13Z,"I'm starting to think this is a Scala compiler issue, sorry for the trouble.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LJxi7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1804,https://api.github.com/repos/apache/fury/issues/1804,fury,2470473280,1804,Scala: IllegalArgumentException on serialization of array of singleton object in compatible mode,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,CLOSED,2024-08-16T15:17:22Z,2024-08-21T12:21:08Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0
Java 22
Linux

### Component(s)

Java, Other

### Minimal reproduce step

See: https://github.com/yoohaemin/fury-bugreport/blob/b4800828e98d605ab76155505b70b7f36f0b02d5/src/main/scala/Main3.scala

### What did you expect to see?

Serialization success

### What did you see instead?

```
    // Exception in thread ""main"" java.lang.RuntimeException: Create sequential serializer failed, 
    //class: class test3.B$KO
    //	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:52)
    //	at org.apache.fury.resolver.ClassResolver.lambda$getObjectSerializerClass$4(ClassResolver.java:997)
    //	at org.apache.fury.builder.JITContext.registerSerializerJITCallback(JITContext.java:121)
    //	at org.apache.fury.resolver.ClassResolver.getObjectSerializerClass(ClassResolver.java:993)
    //	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:916)
    //	at org.apache.fury.resolver.ClassResolver.getSerializerClass(ClassResolver.java:808)
    //	at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1202)
    //	at org.apache.fury.resolver.ClassResolver.getOrUpdateClassInfo(ClassResolver.java:1141)
    //	at org.apache.fury.Fury.write(Fury.java:343)
    //	at org.apache.fury.Fury.serialize(Fury.java:267)
    //	at org.apache.fury.Fury.serialize(Fury.java:221)
    //	at test3.Main$.main(Main3.scala:45)
    //	at test3.Main.main(Main3.scala)
    //Caused by: java.lang.IllegalArgumentException
    //	at org.apache.fury.util.Preconditions.checkArgument(Preconditions.java:46)
    //	at org.apache.fury.builder.CodecBuilder.getFieldOffset(CodecBuilder.java:328)
    //	at org.apache.fury.builder.CodecBuilder.unsafeAccessField(CodecBuilder.java:287)
    //	at org.apache.fury.builder.CodecBuilder.getFieldValue(CodecBuilder.java:232)
    //	at org.apache.fury.builder.ObjectCodecBuilder.lambda$serializeGroup$ce689565$1(ObjectCodecBuilder.java:210)
    //	at org.apache.fury.builder.ObjectCodecBuilder.serializeGroup(ObjectCodecBuilder.java:219)
    //	at org.apache.fury.builder.ObjectCodecBuilder.addGroupExpressions(ObjectCodecBuilder.java:191)
    //	at org.apache.fury.builder.ObjectCodecBuilder.buildEncodeExpression(ObjectCodecBuilder.java:168)
    //	at org.apache.fury.builder.BaseObjectCodecBuilder.genCode(BaseObjectCodecBuilder.java:203)
    //	at org.apache.fury.codegen.CompileUnit.getCode(CompileUnit.java:53)
    //	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:81)
    //	at org.apache.fury.codegen.JaninoUtils.toBytecode(JaninoUtils.java:73)
    //	at org.apache.fury.codegen.CodeGenerator.compile(CodeGenerator.java:145)
    //	at org.apache.fury.builder.CodecUtils.loadOrGenCodecClass(CodecUtils.java:110)
    //	at org.apache.fury.builder.CodecUtils.loadOrGenObjectCodecClass(CodecUtils.java:43)
    //	at org.apache.fury.serializer.CodegenSerializer.loadCodegenSerializer(CodegenSerializer.java:49)
    //	... 12 more
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1804/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1805,https://api.github.com/repos/apache/fury/issues/1805,fury,2470491352,1805,Scala: ArrayIndexOutOfBoundsException when deserializing zio.Chunk values in COMPATIBLE mode,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,CLOSED,2024-08-16T15:28:05Z,2024-08-21T12:21:08Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0
Java 22
Linux
Scala 3.3.3
ZIO 2.1.7

### Component(s)

Java, Other

### Minimal reproduce step

Please see: https://github.com/yoohaemin/fury-bugreport/blob/df47c881521607d09367c3b33b6ecb33e8ad9ed5/src/main/scala/Main4.scala

### What did you expect to see?

Deserialization success

### What did you see instead?

Initially:
```
    Exception in thread ""main""
    Exception: java.lang.NullPointerException thrown from the UncaughtExceptionHandler in thread ""main""
```

However, NPE seems to be an issue in the zio library (field is not yet initialized and tried to do `.toString`)

With debugger:
```
java.lang.ArrayIndexOutOfBoundsException: Index 179 out of bounds for length 5
	at org.apache.fury.resolver.MetaStringBytes.decode(MetaStringBytes.java:69)
	at org.apache.fury.resolver.ClassResolver.populateBytesToClassInfo(ClassResolver.java:1708)
	at org.apache.fury.resolver.ClassResolver.loadBytesToClassInfo(ClassResolver.java:1699)
	at org.apache.fury.resolver.ClassResolver.readClassInternal(ClassResolver.java:1588)
	at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:310)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
	at zio.Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.readField$(Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.java:153)
	at zio.Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.readSeparateTypesHashFields$(Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.java:193)
	at zio.Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.read(Chunk_SingletonFuryRefCompatibleCodec_1_414493378_1392906938.java:289)
	at org.apache.fury.serializer.collection.CollectionSerializers$DefaultJavaCollectionSerializer.read(CollectionSerializers.java:715)
	at test4.B_KOFuryRefMetaShared6541939900001207120Codec_1_414493378_2143437117.read(B_KOFuryRefMetaShared6541939900001207120Codec_1_414493378_2143437117.java:103)
	at org.apache.fury.Fury.readDataInternal(Fury.java:955)
	at org.apache.fury.Fury.readRef(Fury.java:857)
	at org.apache.fury.Fury.deserialize(Fury.java:789)
	at org.apache.fury.Fury.deserialize(Fury.java:711)
	at test4.Main$.main(Main4.scala:36)
	at test4.Main.main(Main4.scala)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1805/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1806,https://api.github.com/repos/apache/fury/issues/1806,fury,2470886626,1806,[Java] Custom Serializer for fields ,miladamery,15817237,Milad,miladamery@yahoo.com,OPEN,2024-08-16T19:43:25Z,2024-08-21T10:57:29Z,"Hi. When using Akka toolkit you need to serialize objects for persistence and clustering. Akka gives you the option for providing
your own serializer. The problem is, in akka you have something called `ActorRef`. this class is used for replying to actors that send commands. but this `ActorRef` serialization/deserialization is special in `Akka`. [Here](https://doc.akka.io/docs/akka/current/serialization.html#serializing-actorrefs) describes how you can serizlize/deserialize `ActorRef`.
Fury provides custom serializers for whole class according to [here](https://fury.apache.org/docs/guide/java_object_graph_guide#implement-a-customized-serializer).
Here is my implementation for serializing `ActorRef` (I appreciate it if some one can say if this is correct)
```java
import akka.actor.typed.ActorRef;
import akka.actor.typed.ActorRefResolver;
import org.apache.fury.Fury;
import org.apache.fury.memory.MemoryBuffer;
import org.apache.fury.serializer.Serializer;

public class FuryActorRefSerializer extends Serializer<ActorRef> {

    private final ActorRefResolver actorRefResolver;

    public FuryActorRefSerializer(Fury fury, ActorRefResolver actorRefResolver) {
        super(fury, ActorRef.class);
        this.actorRefResolver = actorRefResolver;
    }

    @Override
    public void write(MemoryBuffer buffer, ActorRef value) {
       // toSerializationFormat returns String
        var serialized = actorRefResolver.toSerializationFormat(value).getBytes();
        buffer.writeInt32(serialized.length);
        buffer.writeBytes(serialized);
    }

    @Override
    public ActorRef read(MemoryBuffer buffer) {
        var length = buffer.readInt32();
        var ref = buffer.readBytes(length);
        return actorRefResolver.resolveActorRef(new String(ref));
    }
}
```
but this `ActorRef` discussed earlier is usually used as a field in commands(which are Java Records) not as a standalone class.
 Because creating a custom serializer for each Record of my project is not logical Is there a way that Fury support this?
 I mean writing a serializer like above and fury understands class field it is serializing and 
use appropriate serializer for that field?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1806/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1806,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Iw--w,fury,2294542256,1806,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-17T02:12:23Z,2024-08-17T02:12:23Z,"Hi @miladamery , you are right. If you register a serializer for a type, the serialization for fields of this type will use this serializer too","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Iw--w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1806,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzYgp,fury,2295171113,1806,NA,miladamery,15817237,Milad,miladamery@yahoo.com,NA,2024-08-18T08:12:40Z,2024-08-18T08:12:40Z,"@chaokunyang 
Thanks for your reply, i really appreciate it.
The serializer mentioned in issue didn't work so I though problem is that fury doesn't respect custom serializers for fields which was wrong. By debugging I found what the problem was.
`ActorRef` is an interface not the implementation, on serializing/deserializing fury was checking the actual implementation type which was `ActorRefAdapter` and was choosing the general serializer for `ActorRefAdapter` not the custom one provided. So i changed `FuryActorRefSerializer` type from `ActorRef` to `ActorRefAdapter` and everything works now.
But my question is shouldn't fury pick the custom serializer for interface and its implementations?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzYgp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1806,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzjQ7,fury,2295215163,1806,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-18T10:43:31Z,2024-08-18T10:43:31Z,"Hi @miladamery , Fury should pick customized serializer for interface. It should get serializer for concrete type first. If It doesn't exist, it should pick serializer for its inferface. Would you like to contribute this feature?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IzjQ7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1806,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JMjHO,fury,2301768142,1806,NA,miladamery,15817237,Milad,miladamery@yahoo.com,NA,2024-08-21T10:57:28Z,2024-08-21T10:57:28Z,"@chaokunyang 
Hi, I will try to see if i can do it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JMjHO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1808,https://api.github.com/repos/apache/fury/issues/1808,fury,2471443545,1808,How to save/load and where is save file location?,Xeaker,120211657,,,CLOSED,2024-08-17T09:13:05Z,2024-08-18T08:17:58Z,"Hi, I want to save every variable in my Data Class. How do I do it? I tried this from the instruction post.
```
               fury = Fury.builder().withLanguage(Language.JAVA)
                  .requireClassRegistration(true)
                  .build();
                fury.register(Data.class);
                fury.register(Hexagon.class);
                fury.register(Vector3.class);
                fury.register(Units.class);
                fury.register(Array.class);
                fury.register(FactionList.class);
                fury.register(Point.class);
                byte[] bytes = fury.serialize(data);
                System.out.println(fury.deserialize(bytes));
```

But how do I load them back? With JSON I do this:
```
//Saving
serializedInts = json.toJson(data); 
prefs.putString(""data"", serializedInts); 
prefs.flush();       
//Loading
serializedInts = prefs.getString(""data"",""No Array stored""); 
data=json.fromJson(Data.class,serializedInts);        
```

Also where is the save file located?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1808/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1808,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyQwZ,fury,2294877209,1808,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-17T14:35:53Z,2024-08-17T14:35:53Z,"What do you mean load back? You can just cast the deserialized object into your type:
```java
Point  p = (Point) fury.deserialize(bytes);
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyQwZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1808,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyURP,fury,2294891599,1808,NA,Xeaker,120211657,,,NA,2024-08-17T15:30:42Z,2024-08-17T15:30:42Z,"> What do you mean load back? You can just cast the deserialized object into your type:
> 
> ```java
> Point  p = (Point) fury.deserialize(bytes);
> ```

But where is the save file located? If I close my game and restart it, how can I load the saved data with fury? ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyURP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1808,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyVCq,fury,2294894762,1808,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-17T15:42:03Z,2024-08-17T15:42:03Z,"This is not related to Fury, you can save the serialized bytes to file by yourself","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyVCq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1808,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyVgW,fury,2294896662,1808,NA,Xeaker,120211657,,,NA,2024-08-17T15:50:13Z,2024-08-17T15:50:13Z,"Ok, I will try in libgdx forum. Thanks.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6IyVgW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1814,https://api.github.com/repos/apache/fury/issues/1814,fury,2482606675,1814,fury loading issue,JavaLionLi,31852897,CrazyLionLi,,CLOSED,2024-08-23T08:26:56Z,2024-08-26T05:00:24Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java

### Minimal reproduce step

https://github.com/redisson/redisson/issues/6116

I also get an error when I initialize fury's bean separately in starter
Externally, let spring scan automatically is normal

### What did you expect to see?

Successfully run

### What did you see instead?

![image](https://github.com/user-attachments/assets/cc4290ba-38b0-4a22-83bb-436ba389003b)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1814/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1814,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JpWqe,fury,2309319326,1814,NA,JavaLionLi,31852897,CrazyLionLi,,NA,2024-08-26T05:00:19Z,2024-08-26T05:00:19Z,"Changed the computer and it worked well, it should be the new version of idea maven refresh problem","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JpWqe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1815,https://api.github.com/repos/apache/fury/issues/1815,fury,2485178430,1815,[Question] Can you reduce file size somehow?,Xeaker,120211657,,,CLOSED,2024-08-25T10:55:01Z,2024-08-26T07:49:57Z,"### Question

Hi, my save file with fury is twice as big as with JSON. Is there a way to reduce it? That's how I do it:

![fury](https://github.com/user-attachments/assets/b3fc7dd9-7ecf-44c3-9b27-48eed7547b9c)

And then:
 
![fur2](https://github.com/user-attachments/assets/ff2ce668-99a5-413a-bab5-0813d644ffbd)

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1815/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1815,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JnYz1,fury,2308803829,1815,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-25T12:02:58Z,2024-08-25T12:02:58Z,"You convert a binary into string, maybe that is why size got bigger. And could you provide the reproduction code? It's not possible to find out what happened if we have just a screencut ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JnYz1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1815,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jn--e,fury,2308960158,1815,NA,Xeaker,120211657,,,NA,2024-08-25T19:05:58Z,2024-08-25T19:05:58Z,"> You convert a binary into string, maybe that is why size got bigger. And could you provide the reproduction code? It's not possible to find out what happened if we have just a screencut

What is reproduction code? Do you need the save files?
I can't send you my project it's a huge game.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jn--e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1815,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JpO8k,fury,2309287716,1815,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-26T04:28:14Z,2024-08-26T04:28:14Z,"> > You convert a binary into string, maybe that is why size got bigger. And could you provide the reproduction code? It's not possible to find out what happened if we have just a screencut
> 
> What is reproduction code? Do you need the save files? I can't send you my project it's a huge game.

I need the code which can produce larger binary than json locally. Then we can start to figure out what happened. 

To be honest, fury serialized binary is far smaller than json. We never came across a situation which the produced binary is bigger","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JpO8k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1815,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JqSjy,fury,2309564658,1815,NA,Xeaker,120211657,,,NA,2024-08-26T07:47:16Z,2024-08-26T07:47:16Z,"> I need the code which can produce larger binary than json locally. Then we can start to figure out what happened.

I saved the file now as .bin instead of .txt and it is now a little smaller than with JSON. Thanks!

In case someone else wants to know I saved like this:
```
//Saving
bytes = fury.serialize(data);
file= Gdx.files.local(""files/myfile.bin"");
file.writeBytes(bytes, false);

//Loading
file= Gdx.files.local(""files/myfile.bin"");
data = (Data) fury.deserialize(file.readBytes());
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6JqSjy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1816,https://api.github.com/repos/apache/fury/issues/1816,fury,2486653783,1816,create sequential serializer failed,KayLi1021,34885101,KayLi,,CLOSED,2024-08-26T11:41:20Z,2024-08-27T16:31:45Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java

### Minimal reproduce step

我们是在javaAgent实现的mock和流量采集插件中使用fury的，在拦截到目标方法的返回值时，用fury序列化，报错create sequential serializer failed，代码如下
<img width=""1054"" alt=""image"" src=""https://github.com/user-attachments/assets/0712ee36-1047-4275-8ed8-bb19415e2a63"">


### What did you expect to see?

正确序列化

### What did you see instead?

<img width=""1572"" alt=""image"" src=""https://github.com/user-attachments/assets/f9c133e9-9fcf-4f6a-bcd6-61cd783af04c"">


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1816/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1816,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jr_-R,fury,2310012817,1816,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-08-26T11:47:45Z,2024-08-26T11:47:45Z,Could you provide reproduction code here,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Jr_-R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1818,https://api.github.com/repos/apache/fury/issues/1818,fury,2488054613,1818,MutableMap.withDefault { null } causes serialization failure,jeffreytkj,34398950,Jeffrey Tan Kah Jun,,CLOSED,2024-08-27T01:07:18Z,2024-08-27T10:33:18Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java

### Minimal reproduce step

```
class Test {
    var id: Long? = null
    var map: MutableMap<String, Any?>

    constructor(map: Map<String, Any?>) {
        val camelCaseMap = mutableMapOf<String, Any?>()
        for ((k, v) in map) {
            // Change to camel case
            val prop = toCamelCase(k)
            camelCaseMap[prop] = v
        }
        this.map = camelCaseMap.withDefault { null }
    }

    fun toCamelCase(name: String): String {
        if (name.isEmpty()) {
            return """"
        }
        var camelCase = name.substring(0, 1).toLowerCase()

        if (name.length > 1) {
            var wordStart = false;

            for (i in 1..(name.length - 1)) {
                var currChar = name[i]
                if (currChar == '_') {
                    wordStart = true
                } else {
                    if (wordStart) {
                        camelCase += currChar.toUpperCase()
                    } else {
                        camelCase += currChar.toLowerCase()
                    }
                    wordStart = false
                }
            }
        }
        return camelCase
    }
}

fun main(args: Array<String>) {
    println(""Hello World!"")

    // Try adding program arguments via Run/Debug configuration.
    // Learn more about running applications: https://www.jetbrains.com/help/idea/running-applications.html.
    println(""Program arguments: ${args.joinToString()}"")
    val fury = Fury.builder().build()
    fury.register(Test::class.java)
    val bytes = fury.serialize(Test(mapOf(""id"" to ""123"")))
    println(fury.deserialize(bytes))
}
```


### What did you expect to see?

Able to serialize Test object and deserialize it to see the values of the properties

### What did you see instead?

![image (5)](https://github.com/user-attachments/assets/f8c0de71-3ac7-4406-9458-ffcfdb3d8f00)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1818/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1822,https://api.github.com/repos/apache/fury/issues/1822,fury,2500888814,1822,[Java] Undocumented CompatibleMode.COMPATIBLE default behaviour changes,lixfel,26159085,,,CLOSED,2024-09-02T12:45:12Z,2024-09-04T07:39:27Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java, Doc

### Minimal reproduce step

Set CompatibleMode.COMPATIBLE in FuryBuilder without explicitly setting MetaShare or ScopedMetaShare options.

### What did you expect to see?

According to https://fury.apache.org/docs/guide/java_object_graph_guide/#furybuilder--options meta sharing should be disabled by default, independent of the CompatibleMode.

### What did you see instead?

Meta sharing has been enabled (see https://github.com/apache/fury/blob/main/java/fury-core/src/main/java/org/apache/fury/config/FuryBuilder.java#L345).

### Anything Else?

Please update the documentation to match code behaviour.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1822/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1822,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6KpbzP,fury,2326117583,1822,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-03T10:04:02Z,2024-09-03T10:04:02Z,"Thanks for bring this up, scoped meta share is enabled by default when compitible mode is enabled, we will update the doc right now","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6KpbzP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1824,https://api.github.com/repos/apache/fury/issues/1824,fury,2501991975,1824,How to register a non-public class,Kn0688,128996369,,,CLOSED,2024-09-03T06:04:25Z,2024-09-06T06:11:42Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury: 0.7.0

### Component(s)

Java

### Minimal reproduce step

<img width=""1136"" alt=""image"" src=""https://github.com/user-attachments/assets/3afc1f42-f892-448b-b19a-74b83200fc5d"">
full name: com.google.protobuf.LongArrayList
The proto buffer object shown in the above figure

### What did you expect to see?

register non-public class

### What did you see instead?

register non-public class

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1824/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1824,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6KoQyo,fury,2325810344,1824,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-03T07:38:30Z,2024-09-03T07:38:30Z,You could use reflection like `fury.register(Class.forName)`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6KoQyo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1824,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LE5H-,fury,2333315582,1824,NA,Kn0688,128996369,,,NA,2024-09-06T06:09:52Z,2024-09-06T06:09:52Z,ok,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LE5H-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1827,https://api.github.com/repos/apache/fury/issues/1827,fury,2505057837,1827,Language.XLANG MutableMap.withDefault { null } causes serialization failure,jeffreytkj,34398950,Jeffrey Tan Kah Jun,,OPEN,2024-09-04T11:22:18Z,2024-09-05T11:44:58Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java

### Minimal reproduce step

class Test {
    var id: Long? = null
    var map: MutableMap<String, Any?>

    constructor(map: Map<String, Any?>) {
        val camelCaseMap = mutableMapOf<String, Any?>()
        for ((k, v) in map) {
            // Change to camel case
            val prop = toCamelCase(k)
            camelCaseMap[prop] = v
        }
        this.map = camelCaseMap.withDefault { null }
    }

    fun toCamelCase(name: String): String {
        if (name.isEmpty()) {
            return """"
        }
        var camelCase = name.substring(0, 1).toLowerCase()

        if (name.length > 1) {
            var wordStart = false;

            for (i in 1..(name.length - 1)) {
                var currChar = name[i]
                if (currChar == '_') {
                    wordStart = true
                } else {
                    if (wordStart) {
                        camelCase += currChar.toUpperCase()
                    } else {
                        camelCase += currChar.toLowerCase()
                    }
                    wordStart = false
                }
            }
        }
        return camelCase
    }
}

fun main(args: Array<String>) {
    println(""Hello World!"")

    // Try adding program arguments via Run/Debug configuration.
    // Learn more about running applications: https://www.jetbrains.com/help/idea/running-applications.html.
    println(""Program arguments: ${args.joinToString()}"")
    val fury = Fury.builder()..withLanguage(Language.XLANG).build()
    fury.register(Test::class.java)
    val bytes = fury.serializeJavaObject(Test(mapOf(""id"" to ""123"")))
    println(fury.deserializeJavaObject(bytes, Test::class.java))
}

### What did you expect to see?

Able to serialize Test object and deserialize it to see the values of the properties with **Language.XLANG**

### What did you see instead?

Class class kotlin.collections.MutableMapWithDefaultImpl doesn't have a no-arg constructor

java.lang.RuntimeException: Class class kotlin.collections.MutableMapWithDefaultImpl doesn't have a no-arg constructor\n\tat org.apache.fury.reflect.ReflectionUtils.getCtrHandle(ReflectionUtils.java:126)\n\tat org.apache.fury.serializer.collection.AbstractMapSerializer.newMap(AbstractMapSerializer.java:791)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1827/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1827,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6K9PRj,fury,2331309155,1827,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-05T11:44:57Z,2024-09-05T11:44:57Z,"Fury XLANG doesn't support kotlin yet, please use `Language.JAVA` instead. Currently FURY support kotlin by implementing JDK serialization interface, we have not check kotlin class type and optimize for kotlin types yet. The xlang serialization won't follow JDK serialization interface, so we do not support kotlin for xlang serialization yet","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6K9PRj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1828,https://api.github.com/repos/apache/fury/issues/1828,fury,2510994801,1828,Generated code fails to compile for class izumi.reflect.macrortti.LightTypeTag$ParsedLightTypeTag230Plus,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,OPEN,2024-09-06T18:35:35Z,2024-09-10T10:41:18Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.8.0-SNAPSHOT
 https://github.com/apache/fury/commit/d8738f99963b69baec2bf1db7cc7c88ad3732748

### Component(s)

Java, Other

### Minimal reproduce step

https://github.com/yoohaemin/fury-bugreport/commit/9b074e61f9d612034437514dea1916224275a7e7

### What did you expect to see?

1. Generated code succeed compiling
2. Fury uses the registered class to serialize/deserialize

### What did you see instead?

1. Code is generated, which probably means registered class is not used (?)
2. Generated code fails to compile.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1828/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1828,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LLXZs,fury,2335012460,1828,NA,yoohaemin,22650536,Haemin Yoo,github@zzz.pe.kr,NA,2024-09-07T02:49:59Z,2024-09-07T02:49:59Z,"related: https://github.com/apache/fury/issues/1806#issuecomment-2295215163

I understand the registered class problem now, it uses the serialization from the most concrete class, and does not look for superclass.

The generated code problem still exists, but is now low priority because I know how to register a custom serializer.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LLXZs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1828,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Lfj1H,fury,2340306247,1828,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-10T10:41:16Z,2024-09-10T10:41:16Z,"@yoohaemin I can't reproduce your issue, could you try latest snapshot jar instead?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Lfj1H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1829,https://api.github.com/repos/apache/fury/issues/1829,fury,2511080129,1829,Long meta string than 32767 is not allowed,davidnadeau,228949,,,CLOSED,2024-09-06T19:35:16Z,2024-10-15T13:03:50Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### Component(s)

Java, Other

### Minimal reproduce step

FuryUtils.scala
```scala
package testing

import testing.ListingFeatures
import org.apache.fury._
import org.apache.fury.config._
import org.apache.fury.resolver.MetaContext

object FuryUtils {
  val cores = Runtime.getRuntime().availableProcessors()
  lazy val fury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(true)
    .withMetaShare(true)
    .buildThreadSafeFuryPool(cores, cores)

  val context: MetaContext = new MetaContext()

  def toFury(value: ListingFeatures): Array[Byte] = {
    fury.execute((f) => {
      f.getSerializationContext.setMetaContext(context)
      f.serialize(value)
    })
  }

  def fromFury(bytes: Array[Byte]): ListingFeatures = {
    fury.execute((f) => {
      f.getSerializationContext.setMetaContext(context)
      f.deserialize(bytes).asInstanceOf[ListingFeatures]
    })
  }

  fury.register(
    Class.forName(""scala.collection.generic.DefaultSerializationProxy"")
  )
  fury.register(Class.forName(""scala.collection.immutable.$colon$colon""))
  fury.register(Class.forName(""scala.collection.immutable.Nil$""))
  fury.register(Class.forName(""scala.collection.IterableFactory$ToFactory""))
  fury.register(Class.forName(""scala.collection.immutable.List$""))
  fury.register(Class.forName(""scala.collection.generic.SerializeEnd$""))
  fury.register(Class.forName(""scala.Some""))
  fury.register(Class.forName(""testing.TimestampedUserId""))
  fury.register(Class.forName(""testing.ListingCountFeatures""))
  fury.register(
    Class.forName(""testing.ListingTimeseriesFeatures"")
  )
  fury.register(Class.forName(""testing.ListingFeatures""))
}
```

ListingFeatures.scala
```scala
package testing

import java.time.Instant

case class TimestampedUserId(
    timestamp: Instant,
    userId: Long
)

trait FamilyType {
  def isEmpty: Boolean
}

case class ListingCountFeatures(
    feature1: Option[Long] = None,
    feature2: Option[Long] = None,
    feature3: Option[Long] = None,
    feature4: Option[Long] = None
) extends FamilyType {
  def isEmpty: Boolean = this == ListingCountFeatures()
}

case class ListingTimeseriesFeatures(
    feature5: Option[List[TimestampedUserId]] = None,
    feature6: Option[List[TimestampedUserId]] = None,
    feature7: Option[List[TimestampedUserId]] = None,
    feature8: Option[List[TimestampedUserId]] = None
) extends FamilyType {
  def isEmpty: Boolean = this == ListingTimeseriesFeatures()
}

case class ListingFeatures(
    id: Long,
    counts: Option[ListingCountFeatures] = None,
    timeseries: Option[ListingTimeseriesFeatures] = None
)
```

Generators.scala (generates data for the test)
```scala
package testing

package testing

import java.time.Instant

object Generators {
  val random = new scala.util.Random(0)

  val listingFeatures = ListingFeatures(
    id = random.nextLong(),
    counts = Some(
      ListingCountFeatures(
        feature1 = Some(random.nextLong()),
        feature2 = Some(random.nextLong()),
        feature3 = Some(random.nextLong()),
        feature4 = Some(random.nextLong())
      )
    ),
    timeseries = Some(
      ListingTimeseriesFeatures(
        feature5 = Some(
          List.fill(random.between(0, 51))(
            TimestampedUserId(Instant.now(), random.nextLong())
          )
        ),
        feature6 = Some(
          List.fill(random.between(0, 51))(
            TimestampedUserId(Instant.now(), random.nextLong())
          )
        ),
        feature7 = Some(
          List.fill(random.between(0, 51))(
            TimestampedUserId(Instant.now(), random.nextLong())
          )
        ),
        feature8 = Some(
          List.fill(random.between(0, 51))(
            TimestampedUserId(Instant.now(), random.nextLong())
          )
        )
      )
    )
  )
}
```

SerializationBenchmarks.scala
```scala
package testing

import testing.serialization._
import org.openjdk.jmh.annotations._

import java.util.concurrent.TimeUnit

@State(Scope.Benchmark)
class SerializationBenchmarks {
  var features: ListingFeatures = _

  @Setup(Level.Trial)
  def setup(): Unit = {
    features = Generators.listingFeatures
  }

  @Benchmark
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MICROSECONDS)
  @Warmup(iterations = 100)
  @Measurement(iterations = 10000)
  def furySerializationRoundTrip(): ListingFeatures = {
    FuryUtils.fromFury(FuryUtils.toFury(features))
  }
}
```

build.sbt
```scala
ThisBuild / version := ""0.0.0""

ThisBuild / scalaVersion := ""2.13.14""

lazy val root = (project in file("".""))
  .settings(
    name := ""testing"",
    libraryDependencies ++= Seq(
      ""org.apache.fury"" % ""fury-core"" % ""0.7.0"",
       ""org.openjdk.jmh"" % ""jmh-core"" % ""1.37"",
      ""org.openjdk.jmh"" % ""jmh-generator-annprocess"" % ""1.37"",
    )
  )
```

### What did you expect to see?

The benchmark to run.

### What did you see instead?

```
[info] java.lang.RuntimeException: java.lang.IllegalArgumentException: Long meta string than 32767 is not allowed
[info]  at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:82)
[info]  at testing.serialization.FuryUtils$.fromFury(FuryUtils.scala:29)
[info]  at testing.SerializationBenchmarks.furySerializationRoundTrip(SerializationBenchmarks.scala:23)
[info]  at com.etsy.cachetesting.jmh_generated.SerializationBenchmarks_furySerializationRoundTrip_jmhTest.furySerializationRoundTrip_avgt_jmhStub(SerializationBenchmarks_furySerializationRoundTrip_jmhTest.java:236)
[info]  at com.etsy.cachetesting.jmh_generated.SerializationBenchmarks_furySerializationRoundTrip_jmhTest.furySerializationRoundTrip_AverageTime(SerializationBenchmarks_furySerializationRoundTrip_jmhTest.java:176)
[info]  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info]  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[info]  at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
[info]  at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
[info]  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info]  at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info]  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info]  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info]  at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info]  at java.base/java.lang.Thread.run(Thread.java:833)
[info] Caused by: java.lang.IllegalArgumentException: Long meta string than 32767 is not allowed
[info]  at org.apache.fury.util.Preconditions.checkArgument(Preconditions.java:58)
[info]  at org.apache.fury.meta.MetaStringEncoder.encode(MetaStringEncoder.java:80)
[info]  at org.apache.fury.resolver.ClassResolver.populateBytesToClassInfo(ClassResolver.java:1713)
[info]  at org.apache.fury.resolver.ClassResolver.loadBytesToClassInfo(ClassResolver.java:1699)
[info]  at org.apache.fury.resolver.ClassResolver.readClassInternal(ClassResolver.java:1588)
[info]  at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:310)
[info]  at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
[info]  at org.apache.fury.Fury.readData(Fury.java:923)
[info]  at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:284)
[info]  at org.apache.fury.serializer.collection.CollectionSerializers$JDKCompatibleCollectionSerializer.read(CollectionSerializers.java:743)
[info]  at scala.SomeFuryCodec_1_1108411398_52533857.read(SomeFuryCodec_1_1108411398_52533857.java:70)
[info]  at testing.ListingTimeseriesFeaturesFuryCodec_1_1108411398_981481512.readFields$(ListingTimeseriesFeaturesFuryCodec_1_1108411398_981481512.java:137)
[info]  at testing.ListingTimeseriesFeaturesFuryCodec_1_1108411398_981481512.read(ListingTimeseriesFeaturesFuryCodec_1_1108411398_981481512.java:171)
[info]  at scala.SomeFuryCodec_1_1108411398_52533857.read(SomeFuryCodec_1_1108411398_52533857.java:70)
[info]  at com.etsy.cachetesting.ListingFeaturesFuryCodec_1_1108411398_857240609.readFields$(ListingFeaturesFuryCodec_1_1108411398_857240609.java:97)
[info]  at com.etsy.cachetesting.ListingFeaturesFuryCodec_1_1108411398_857240609.read(ListingFeaturesFuryCodec_1_1108411398_857240609.java:118)
[info]  at org.apache.fury.Fury.readDataInternal(Fury.java:955)
[info]  at org.apache.fury.Fury.readRef(Fury.java:857)
[info]  at org.apache.fury.Fury.deserialize(Fury.java:789)
[info]  at org.apache.fury.Fury.deserialize(Fury.java:711)
[info]  at testing.serialization.FuryUtils$.$anonfun$fromFury$1(FuryUtils.scala:31)
[info]  at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:79)
[info]  ... 16 more
```

### Anything Else?

This error occurs when forcing class registration. When I turn class registration off, I instead get:

```
[info] Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 447 out of bounds for length 14
[info]  at org.apache.fury.collection.ObjectArray.get(ObjectArray.java:62)
[info]  at org.apache.fury.resolver.ClassResolver.readClassInfoWithMetaShare(ClassResolver.java:1348)
[info]  at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1638)
[info]  at scala.collection.immutable._colon_colonFuryMetaShared8782623466212560208Codec_1_1108411398_975194116.readFields$(_colon_colonFuryMetaShared8782623466212560208Codec_1_1108411398_975194116.java:73)
[info]  at scala.collection.immutable._colon_colonFuryMetaShared8782623466212560208Codec_1_1108411398_975194116.read(_colon_colonFuryMetaShared8782623466212560208Codec_1_1108411398_975194116.java:122)
[info]  at scala.SomeFuryMetaShared2848185738884915280Codec_1_1108411398_52533857.read(SomeFuryMetaShared2848185738884915280Codec_1_1108411398_52533857.java:47)
[info]  at com.etsy.cachetesting.ListingTimeseriesFeaturesFuryMetaShared7510468037580857040Codec_1_1108411398_981481512.readFields$(ListingTimeseriesFeaturesFuryMetaShared7510468037580857040Codec_1_1108411398_981481512.java:51)
[info]  at com.etsy.cachetesting.ListingTimeseriesFeaturesFuryMetaShared7510468037580857040Codec_1_1108411398_981481512.read(ListingTimeseriesFeaturesFuryMetaShared7510468037580857040Codec_1_1108411398_981481512.java:80)
[info]  at scala.SomeFuryMetaShared2848185738884915280Codec_1_1108411398_52533857.read(SomeFuryMetaShared2848185738884915280Codec_1_1108411398_52533857.java:47)
[info]  at com.etsy.cachetesting.ListingFeaturesFuryMetaShared8713304253468170576Codec_1_1108411398_857240609.readFields$(ListingFeaturesFuryMetaShared8713304253468170576Codec_1_1108411398_857240609.java:53)
[info]  at com.etsy.cachetesting.ListingFeaturesFuryMetaShared8713304253468170576Codec_1_1108411398_857240609.read(ListingFeaturesFuryMetaShared8713304253468170576Codec_1_1108411398_857240609.java:66)
[info]  at org.apache.fury.Fury.readDataInternal(Fury.java:955)
[info]  at org.apache.fury.Fury.readRef(Fury.java:857)
[info]  at org.apache.fury.Fury.deserialize(Fury.java:789)
[info]  at org.apache.fury.Fury.deserialize(Fury.java:711)
[info]  at com.etsy.cachetesting.serialization.FuryUtils$.$anonfun$fromFury$1(FuryUtils.scala:31)
[info]  at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:79)
[info]  ... 16 more
```

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1829/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1829,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LfXzn,fury,2340256999,1829,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-10T10:18:15Z,2024-09-10T10:18:15Z,"Hi @davidnadeau, could you use fury snapshot jar instead? I believe this issue has been addressed in main branch in #1812","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6LfXzn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1831,https://api.github.com/repos/apache/fury/issues/1831,fury,2512214594,1831,[Java] ConcurrentHashMapKeySetView Serializer ignored java.util.concurrent.ConcurrentHashMap#keySet(V),chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-09-08T05:59:23Z,2024-09-09T11:04:05Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

ConcurrentHashMapKeySetView Serializer ignored `java.util.concurrent.ConcurrentHashMap#keySet(V)`, it will deserialize inconsistent values if the backed set is referenced somewhere else and ignore map values.

### Component(s)

Java

### Minimal reproduce step
```java
  @SuppressWarnings(""rawtypes"")
  @Test(dataProvider = ""javaFury"")
  public void testConcurrentMapKeySetViewMap(Fury fury) {
    final ConcurrentHashMap.KeySetView<String, Boolean> set = ConcurrentHashMap.newKeySet();
    set.add(""a"");
    set.add(""b"");
    set.add(""c"");
    Assert.assertEquals(set, serDe(fury, set));
    Assert.assertEquals(
        fury.getClassResolver().getSerializerClass(set.getClass()),
        CollectionSerializers.ConcurrentHashMapKeySetView.class);
    CollectionViewTestStruct o = serDeCheck(fury, new CollectionViewTestStruct(set, set));
    if (fury.trackingRef()) {
      assertSame(o.collection, o.set);
    }
    ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();
    map.put(""k1"", ""v1"");
    if (fury.trackingRef()) {
      ArrayList<Serializable> list = serDeCheck(fury, ofArrayList(map.keySet(""v0""), map));
      assertSame(((ConcurrentHashMap.KeySetView)(list.get(0))).getMap(), list.get(1));
    }
```

### What did you expect to see?
No error
### What did you see instead?

```java

java.lang.AssertionError:
Expected :{k1=v1}
Actual   :{k1=true}
<Click to see difference>


	at org.testng.Assert.fail(Assert.java:110)
	at org.testng.Assert.failNotSame(Assert.java:1409)
	at org.testng.Assert.assertSame(Assert.java:1358)
	at org.testng.Assert.assertSame(Assert.java:1368)
	at org.apache.fury.serializer.collection.CollectionSerializersTest.testConcurrentMapKeySetViewMap(CollectionSerializersTest.java:454)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
```


### Anything Else?

Introduced in https://github.com/apache/fury/pull/1616

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1831/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1832,https://api.github.com/repos/apache/fury/issues/1832,fury,2512214909,1832,[Java] SetFromMapSerializer didn't handle nested reference right,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-09-08T06:00:23Z,2024-09-09T11:04:05Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

Java

### Minimal reproduce step
```java
  @Data
  @AllArgsConstructor
  public static class CollectionViewTestStruct {
    Collection<String> collection;
    Set<String> set;
  }

  @Test(dataProvider = ""javaFury"")
  public void testSetFromMap(Fury fury) {
    Set<String> set = Collections.newSetFromMap(Maps.newConcurrentMap());
    set.add(""a"");
    set.add(""b"");
    set.add(""c"");
    serDeCheck(fury, set);
    Assert.assertEquals(
      fury.getClassResolver().getSerializerClass(set.getClass()),
        CollectionSerializers.SetFromMapSerializer.class);
    serDeCheck(fury, new CollectionViewTestStruct(set, set));
    set = Collections.newSetFromMap(new HashMap<String, Boolean>() {});
    set.add(""a"");
    set.add(""b"");
    serDeCheck(fury, set);
    serDeCheck(fury, new CollectionViewTestStruct(set, set));
  }
```

### What did you expect to see?

//

### What did you see instead?

```java
org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [{}]

	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserialize(Fury.java:796)
	at org.apache.fury.Fury.deserialize(Fury.java:714)
	at org.apache.fury.FuryTestBase.serDe(FuryTestBase.java:270)
	at org.apache.fury.FuryTestBase.serDeCheck(FuryTestBase.java:262)
	at org.apache.fury.serializer.collection.CollectionSerializersTest.testSetFromMap(CollectionSerializersTest.java:409)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4
	at org.apache.fury.collection.IntArray.pop(IntArray.java:54)
	at org.apache.fury.resolver.MapRefResolver.reference(MapRefResolver.java:192)
	at org.apache.fury.serializer.collection.CollectionSerializers$SetFromMapSerializer.newCollection(CollectionSerializers.java:482)
	at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:68)
	at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:27)
	at org.apache.fury.Fury.readDataInternal(Fury.java:958)
	at org.apache.fury.Fury.readRef(Fury.java:860)
	at org.apache.fury.Fury.deserialize(Fury.java:792)
	... 29 more
```

### Anything Else?

https://github.com/apache/fury/pull/1616

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1832/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1834,https://api.github.com/repos/apache/fury/issues/1834,fury,2515743365,1834,【Java】java.lang.ArrayIndexOutOfBoundsException: 195 when deserializing  Protobuf  Model in COMPATIBLE mode ,hifishzlj,15904703,HiFish,,OPEN,2024-09-10T08:18:40Z,2024-09-10T08:18:40Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Java 1.8
fury 0.7.0

### Component(s)

Java

### Minimal reproduce step

	public static void main(String[] args) {
                 //any protocol model
		Protobuf.RequestHeader requestHeader = Protobuf.RequestHeader
				.newBuilder().setSid(1).setSseqNo(2).setReqTime(3).setCid(4)
				.setCseqNo(5).setSms(""6"").setSignkey(""7"").build();
		ThreadSafeFury threadSafeFury = Fury.builder()
				.withLanguage(Language.JAVA).withRefTracking(true)
				.requireClassRegistration(false)
				.withCompatibleMode(CompatibleMode.COMPATIBLE)
				.buildThreadSafeFury();
		byte[] serialize = threadSafeFury.serializeJavaObject(requestHeader);
		Protobuf.RequestHeader deserialize = threadSafeFury
				.deserializeJavaObject(serialize, Protobuf.RequestHeader.class);
	}

### What did you expect to see?

//

### What did you see instead?

Exception in thread ""main"" org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [null, null]
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1117)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1094)
	at org.apache.fury.ThreadLocalFury.deserializeJavaObject(ThreadLocalFury.java:195)
	at test.Test.main(Test.java:26)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 195
	at org.apache.fury.resolver.MetaStringBytes.decode(MetaStringBytes.java:69)
	at org.apache.fury.resolver.ClassResolver.populateBytesToClassInfo(ClassResolver.java:1708)
	at org.apache.fury.resolver.ClassResolver.loadBytesToClassInfo(ClassResolver.java:1699)
	at org.apache.fury.resolver.ClassResolver.readClassInternal(ClassResolver.java:1588)
	at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:310)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
	at org.apache.fury.Fury.readData(Fury.java:923)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:284)
	at org.apache.fury.Fury.readDataInternal(Fury.java:955)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1111)
	... 3 more

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1834/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1835,https://api.github.com/repos/apache/fury/issues/1835,fury,2518618930,1835,"When the class name is too long, an ArrayIndexOutOfBoundsException will be reported",yunshen-Lee,24450765,yunshen.lfzzz,,CLOSED,2024-09-11T06:14:42Z,2024-09-12T06:33:24Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury 0.7.0
JDK 1.8

### Component(s)

Java

### Minimal reproduce step
```java
public class TestClassLengthTestClassLengthTestClassLengthTestClassLengthTestClassLengthTestClassLengthTestClassLength implements Serializable {

  private static final long serialVersionUID = 612789657789099089L;

  private String name;

  private InnerClassTestLengthInnerClassTestLengthInnerClassTestLength innerClassTestLength;
  
  public static class InnerClassTestLengthInnerClassTestLengthInnerClassTestLength implements Serializable {

    private static final long serialVersionUID = -867612757789099089L;

    private Long itemId;

  }

}

fury = Fury.builder()
              .withLanguage(Language.JAVA)
              .requireClassRegistration(false)
              .withAsyncCompilation(true)
              .withRefTracking(true)
              .withCompatibleMode(CompatibleMode.COMPATIBLE)
              .withJdkClassSerializableCheck(false)
              .build();
fury.serializeJavaObjectAndClass() and fury.deserializeJavaObjectAndClass()
```
After defining a class with a relatively long class name, an ArrayIndexOutOfBoundsEException will be reported during deserialization. If there is an inner class, an Invalid character value for LOWERS_SPECIAL: 31 will be reported

### What did you expect to see?

Do not encounter errors during deserialization

### What did you see instead?

There are no internal classes：
```java
org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [{}]
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1227)
	at org.apache.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1208)
Caused by: java.lang.ArrayIndexOutOfBoundsException: -30469
	at org.apache.fury.resolver.ClassResolver.getRegisteredClass(ClassResolver.java:507)
	at org.apache.fury.meta.ClassDef$RegisteredFieldType.toTypeToken(ClassDef.java:458)
	at org.apache.fury.meta.ClassDef$FieldInfo.toDescriptor(ClassDef.java:307)
	at org.apache.fury.meta.ClassDef.getDescriptors(ClassDef.java:237)
```
There are internal classes available：
```java
org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: []
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1227)
	at org.apache.fury.Fury.deserializeJavaObjectAndClass(Fury.java:1208)
Caused by: java.lang.IllegalArgumentException: Invalid character value for LOWER_SPECIAL: 31
```
### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1835/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1838,https://api.github.com/repos/apache/fury/issues/1838,fury,2521191567,1838,"[Question] java.lang.LinkageError: bad method type alias: (Fury,Class)void not visible from class",deadpoolssr,47958908,,,CLOSED,2024-09-12T02:32:34Z,2024-10-04T06:19:13Z,"### Question

线上代码


 ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withCompatibleMode(CompatibleMode.COMPATIBLE)
                .withClassLoader(classLoader)
                .buildThreadSafeFury();

fury.setClassLoader(classLoader, LoaderBinding.StagingType.SOFT_STAGING);
return fury.deserialize(bytes);

报错堆栈
java.lang.IllegalAccessException: no such constructor: com.alibaba.alsc.chameleon.api.model.region.ChameleonCardFuryCompatibleCodec_1_1116884706_299406744.<init>(Fury,Class)void/invokeSpecial
  at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:959)
  at java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1101)
  at java.base/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:2030)
  at java.base/java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:1264)
  at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:126)
  at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:103)
  at org.apache.fury.resolver.ClassResolver.createSerializer(ClassResolver.java:1179)
  at org.apache.fury.resolver.ClassResolver.getClassInfo(ClassResolver.java:1072)
  at org.apache.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1634)
  at org.apache.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1607)
  at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1588)
  at org.apache.fury.serializer.collection.AbstractCollectionSerializer.generalJavaRead(AbstractCollectionSerializer.java:617)
  at org.apache.fury.serializer.collection.AbstractCollectionSerializer.readElements(AbstractCollectionSerializer.java:545)
  at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:53)
  at org.apache.fury.serializer.collection.CollectionSerializer.read(CollectionSerializer.java:27)
  at org.apache.fury.Fury.readDataInternal(Fury.java:923)
  at org.apache.fury.Fury.readRef(Fury.java:838)
  at org.apache.fury.serializer.collection.AbstractMapSerializer.generalJavaRead(AbstractMapSerializer.java:569)
  at org.apache.fury.serializer.collection.AbstractMapSerializer.genericJavaRead(AbstractMapSerializer.java:443)
  at org.apache.fury.serializer.collection.AbstractMapSerializer.readElements(AbstractMapSerializer.java:435)
  at org.apache.fury.serializer.collection.MapSerializer.read(MapSerializer.java:46)
  at org.apache.fury.serializer.collection.MapSerializer.read(MapSerializer.java:27)
  at org.apache.fury.Fury.readDataInternal(Fury.java:923)
  at org.apache.fury.Fury.readRef(Fury.java:825)
  at org.apache.fury.Fury.deserialize(Fury.java:760)
  at org.apache.fury.Fury.deserialize(Fury.java:682)
  at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:130)
  at com.alibaba.kondyle.service.contrib.solution.impl.protocol.FuryProtocol.deserializeResponseInner(FuryProtocol.java:40)
  at com.alibaba.kondyle.service.contrib.solution.impl.protocol.AbstractProtocol$DeserializeFunction.apply(AbstractProtocol.java:42)
  at com.alibaba.kondyle.service.contrib.solution.impl.protocol.AbstractProtocol$DeserializeFunction.apply(AbstractProtocol.java:34)
  at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:642)
  at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
  at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2073)
  at com.alibaba.kondyle.concurrent.future.MonitorCompletableFuture.complete(MonitorCompletableFuture.java:105)
  at com.alibaba.glaucus.concurrent.SolutionInvokerGrpcImpl$RpcFinishCallback.accept(SolutionInvokerGrpcImpl.java:865)
  at com.alibaba.glaucus.concurrent.SolutionInvokerGrpcImpl$RpcFinishCallback.accept(SolutionInvokerGrpcImpl.java:828)
  at com.alibaba.glaucus.concurrent.SolutionInvokerGrpcImpl.lambda$invokeAsyncInnerSpan$43(SolutionInvokerGrpcImpl.java:395)
  at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:930)
  at java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:907)
  at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
  at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2073)
  at com.alibaba.glaucus.concurrent.SolutionInvokeGrpcCallback.onResponse(SolutionInvokeGrpcCallback.java:42)
  at com.alibaba.kondyle.mesh.grpc.GrpcConsumer$2.handleNormal(GrpcConsumer.java:262)
  at com.alibaba.kondyle.mesh.grpc.client.ResultConsumer.accept(ResultConsumer.java:27)
  at com.alibaba.kondyle.mesh.grpc.processor.client.RevealProcessor$RevealProcessorListener.handleNormal(RevealProcessor.java:85)
  at com.alibaba.kondyle.mesh.grpc.client.ResultConsumer.accept(ResultConsumer.java:27)
  at com.alibaba.kondyle.mesh.grpc.processor.client.MulticastProcessor$MultiCastListener.handleNormal(MulticastProcessor.java:124)
  at com.alibaba.kondyle.mesh.grpc.client.ResultConsumer.accept(ResultConsumer.java:27)
  at com.alibaba.kondyle.mesh.grpc.processor.client.TailOutboundProcessor$1.onCompleted(TailOutboundProcessor.java:87)
  at com.alibaba.kondyle.mesh.grpc.processor.client.TailOutboundProcessor$1.onCompleted(TailOutboundProcessor.java:54)
  at com.alibaba.glaucus.rpc.RpcClientServiceImpl$GlaucusStreamObserver.onResponseInner(RpcClientServiceImpl.java:394)
  at com.alibaba.glaucus.rpc.RpcClientServiceImpl$GlaucusStreamObserver.onNext(RpcClientServiceImpl.java:359)
  at com.alibaba.glaucus.rpc.RpcClientServiceImpl$GlaucusStreamObserver.onNext(RpcClientServiceImpl.java:330)
  at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onMessage(ClientCalls.java:440)
  at io.grpc.ForwardingClientCallListener.onMessage(ForwardingClientCallListener.java:33)
  at com.alibaba.tpp.rpc.client.MeshClientInterceptor$1$1.onMessage(MeshClientInterceptor.java:168)
  at io.grpc.ForwardingClientCallListener.onMessage(ForwardingClientCallListener.java:33)
  at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1MessagesAvailable.runInternal(ClientCallImpl.java:658)
  at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1MessagesAvailable.runInContext(ClientCallImpl.java:643)
  at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
  at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
  at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
  at java.base/java.lang.Thread.run(Thread.java:991)
  at java.base/com.alibaba.wisp.engine.WispTask.runOutsideWisp(WispTask.java:308)
  at java.base/com.alibaba.wisp.engine.WispTask.runCommand(WispTask.java:297)
  at java.base/com.alibaba.wisp.engine.WispTask$CacheableCoroutine.run(WispTask.java:269)
  at java.base/java.dyn.CoroutineBase.startInternal(CoroutineBase.java:74)
Caused by: java.lang.LinkageError: bad method type alias: (Fury,Class)void not visible from class com.alibaba.alsc.chameleon.api.model.region.ChameleonCardFuryCompatibleCodec_1_1116884706_299406744
  at java.base/java.lang.invoke.MemberName.checkForTypeAlias(MemberName.java:872)
  at java.base/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:1074)
  at java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1098)
  ... 66 more


但把这个byte[]复制到本地之后，反序列化是可以成功的，可能是什么原因？


","{""url"": ""https://api.github.com/repos/apache/fury/issues/1838/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1838,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9cr7,fury,2348141307,1838,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-13T06:34:43Z,2024-09-13T06:34:43Z,"Seems it's a classloader issue in your project instead of Fury issue. Maybe you included two Fury jars in different classloaders, so it throws ` java.lang.LinkageError: bad method type alias: (Fury,Class)void not visible from class`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9cr7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1838,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9da1,fury,2348144309,1838,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-13T06:37:07Z,2024-09-13T06:37:07Z,"If not, please provide reproduction code in this issue, we can't trouble shooting without reproduction code","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9da1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1838,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OoNxg,fury,2392906848,1838,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-04T06:19:12Z,2024-10-04T06:19:12Z,This is fixed in fury 0.8.0,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OoNxg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/1840,fury,2521960003,1840,[Java] CPU Utilization 100%,eryanwcp,3665555,eryan,,CLOSED,2024-09-12T10:13:25Z,2024-10-17T06:45:39Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.0

### code

  


    public class FurySerializer implements Serializer {

    private final ThreadSafeFury fury;

    public FurySerializer(){
        LoggerFactory.useSlf4jLogging(true);
        this.fury = Fury.builder().withLanguage(Language.JAVA)
                // Allow to deserialize objects unknown types, more flexible
                // but may be insecure if the classes contains malicious code.
                .withRefTracking(true)
                .requireClassRegistration(false)
                .buildThreadSafeFury();
    }

    @Override
    public String name() {
        return ""fury"";
    }

    @Override
    public byte[] serialize(Object obj) throws IOException {
        return fury.serialize(obj);
    }

    @Override
    public Object deserialize(byte[] bytes) throws IOException {
        return fury.deserialize(bytes);
    }

    }

    public class SerializationUtils {

   
    private static Serializer g_serializer;

    /**
     * 初始化序列化器
     * @param ser  serialization method
     * @param props serializer properties
     */
    public static void init() {
        g_serializer = new FurySerializer();
    }

     public static Object deserialize(byte[] bytes) throws IOException {
        if (bytes == null || bytes.length == 0)
            return null;
            return g_serializer.deserialize(bytes);
        }
    }




### 出现大量线程CPU100%，异常：

  at java.util.WeakHashMap.put(java.base@17.0.12/WeakHashMap.java:459)
        at org.apache.fury.ThreadLocalFury.lambda$new$2(ThreadLocalFury.java:60)
        at org.apache.fury.ThreadLocalFury$$Lambda$1294/0x00007f9fb0bcd7e8.get(Unknown Source)
        at java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(java.base@17.0.12/ThreadLocal.java:305)
        at java.lang.ThreadLocal.setInitialValue(java.base@17.0.12/ThreadLocal.java:195)
        at java.lang.ThreadLocal.get(java.base@17.0.12/ThreadLocal.java:172)
        at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:130)
        at com.eryansky.j2cache.util.FurySerializer.deserialize(FurySerializer.java:40)



### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1840/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L1AW-,fury,2345928126,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-12T10:44:00Z,2024-09-12T10:44:00Z,"@eryanwcp Do you create too much Fury instance? As the document cleared: 
![image](https://github.com/user-attachments/assets/39df0219-1b7b-4af8-a12b-a4948f75eaa5)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L1AW-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9PO4,fury,2348086200,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-13T05:52:10Z,2024-09-13T05:52:10Z,"Could you use `ThreadPoolFury` instead? Seems you created too much threads, and every thread will create a new Fury instance","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6L9PO4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6MA2DJ,fury,2349031625,1840,NA,eryanwcp,3665555,eryan,,NA,2024-09-13T13:58:17Z,2024-09-13T13:58:17Z,"@chaokunyang Only One Fury instance. 

Spring Boot 3.3+[dragonwell17](https://github.com/dragonwell-project/dragonwell17)

https://github.com/eryanwcp/ec/blob/3.2/j2cache-spring-boot-starter/src/main/java/com/eryansky/j2cache/cache/support/util/J2CacheSerializer.java

 SerializationUtils.deserialize(bytes)
Occasionally, CPU 100% occurs and persists
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6MA2DJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6MCHJr,fury,2349363819,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-13T16:37:11Z,2024-09-13T16:37:11Z,`private final ThreadSafeFury fury;` should be `private final static ThreadSafeFury fury;` instead.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6MCHJr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJkWT,fury,2418427283,1840,NA,qinzhikui,19801304,kui,,NA,2024-10-17T03:35:29Z,2024-10-17T03:35:29Z,"`private final WeakHashMap<LoaderBinding, Object> allFury = new WeakHashMap();

    public ThreadLocalFury(Function<ClassLoader, Fury> furyFactory) {
        this.bindingThreadLocal = ThreadLocal.withInitial(() -> {
            LoaderBinding binding = new LoaderBinding(furyFactory);
            binding.setBindingCallback(this.factoryCallback);
            binding.setClassLoader(Thread.currentThread().getContextClassLoader());
            this.allFury.put(binding, (Object)null);
            return binding;
        });
        Fury fury = ((LoaderBinding)this.bindingThreadLocal.get()).get();
        ClassResolver._addGraalvmClassRegistry(fury.getConfig().getConfigHash(), fury.getClassResolver());
    }`
It seems that allFury. put() has caused a concurrency conflict","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJkWT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJljO,fury,2418432206,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-17T03:40:56Z,2024-10-17T03:40:56Z,"Could you provide more details? ThreadLocalFury is created only once, I don't see concurrency conflict","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJljO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJm03,fury,2418437431,1840,NA,qinzhikui,19801304,kui,,NA,2024-10-17T03:46:39Z,2024-10-17T03:46:39Z,"This is threadLocal, and each thread will create one. When multiple threads are created simultaneously, they will be put into allFury at the same time","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJm03/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJtfQ,fury,2418464720,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-17T04:18:31Z,2024-10-17T04:18:31Z,"I see, thanks. This is indeed a bug, would you like to create a pr?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QJtfQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QKV38,fury,2418630140,1840,NA,qinzhikui,19801304,kui,,NA,2024-10-17T06:24:35Z,2024-10-17T06:24:35Z,"sorry，I am not familiar with using PR. using Collections.synchronizedMap(new WeakHashMap())  or ConcurrentHashMap can solve this problem.
sorry","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QKV38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1840,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QKdFB,fury,2418659649,1840,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-17T06:45:37Z,2024-10-17T06:45:37Z,"@qinzhikui thanks for your suggestion, I fixed it in https://github.com/apache/fury/pull/1889","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QKdFB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1842,https://api.github.com/repos/apache/fury/issues/1842,fury,2524227661,1842,[Java] Maximum size of Java arrays is not correct,fink-arthur,7756372,Arthur Finkelstein,,CLOSED,2024-09-13T08:33:41Z,2024-09-13T09:10:17Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

8.1.0

### Component(s)

Java

### Minimal reproduce step

`MemoryBuffer memoryBuffer = MemoryBuffer.newHeapBuffer(10);`
 `memoryBuffer.grow(Integer.MAX_VALUE);`

### What did you expect to see?

A MemoryBuffer of the maximum size

### What did you see instead?

`java.lang.OutOfMemoryError: Requested array size exceeds VM limit`


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1842/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1849,https://api.github.com/repos/apache/fury/issues/1849,fury,2544296207,1849,[Java] Object deep copy didn't handle transient fields correctly,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-09-24T04:43:38Z,2024-11-03T15:38:27Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main branch

### Component(s)

Java

### Minimal reproduce step

In `org.apache.fury.serializer.AbstractObjectSerializer`, we added transient fields for copy too. But not all fields are copyable. For example, we may have a transient field such as a Lock, it's will introduce subtle bugs if we copy such objects.

### What did you expect to see?

We should copy non-transient and non-static fields only, and follow object serialization semantics.

`AbstractObjectSerializer` needs to change and all serializers which extends `AbstractObjectSerializer` needs to change to. We still need to following object serialization process, just skip writing data to buffer

### What did you see instead?

transient fields are copied too.

### Anything Else?

#1701
#1739

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1849/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/1854,fury,2548373175,1854,Cannot de-serialize serializable JDK proxy,theigl,661800,Thomas Heigl,thomas@umschalt.com,CLOSED,2024-09-25T15:57:04Z,2024-09-26T12:23:46Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury: 0.71
JDK: 21

### Component(s)

Java

### Minimal reproduce step

```java
import org.apache.fury.Fury;
import org.apache.fury.config.Language;
import org.junit.jupiter.api.Test;

import java.io.ObjectStreamException;
import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ProxySerializerTest {

	@Test
	void serializeProxy() {
		final Fury fury = Fury.builder()
				.withLanguage(Language.JAVA)
				.requireClassRegistration(false)
				.build();

		final Object o = ProxyFactory.createProxy(TestInterface.class);
		final byte[] s = fury.serialize(o);
		assertEquals(fury.deserialize(s), o);
	}

	interface TestInterface {
		void test();
	}

	static class ProxyFactory {

		static <T> T createProxy(final Class<T> type) {
			return new JdkProxyFactory().createProxy(type);
		}

		static final class JdkProxyFactory {

			@SuppressWarnings(""unchecked"")
			<T> T createProxy(final Class<T> type) {
				final JdkHandler handler = new JdkHandler(type);
				try {
					final ClassLoader cl = Thread.currentThread().getContextClassLoader();
					return (T) Proxy.newProxyInstance(cl, new Class[]{type, Serializable.class}, handler);
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(""Could not create proxy for type ["" + type.getName() + ""]"", e);
				}
			}

			static class JdkHandler implements InvocationHandler, Serializable {

				private final String typeName;

				private JdkHandler(Class<?> type) {
					typeName = type.getName();
				}

				@Override
				public Object invoke(Object proxy, Method method, Object[] args) {
					return null;
				}

				public Object writeReplace() throws ObjectStreamException {
					return new ProxyReplacement(typeName);
				}
			}

			static final class ProxyReplacement implements Serializable {

				private final String type;

				ProxyReplacement(final String type) {
					this.type = type;
				}

				private Object readResolve() throws ObjectStreamException {
					final Class<?> clazz;
					try {
						clazz = Class.forName(type, false, Thread.currentThread().getContextClassLoader());
					} catch (ClassNotFoundException ex) {
						throw new RuntimeException(ex);
					}
					return ProxyFactory.createProxy(clazz);
				}
			}
		}
	}
}
```


### What did you expect to see?

Serializable JDK proxies can be de-serialized.

### What did you see instead?

The following exception is thrown:

> java.lang.ClassCastException: class xyz.$Proxy8 cannot be cast to class java.lang.reflect.InvocationHandler

The problem seems to be the `JdkProxySerializer` and the `ReplaceResolveSerializer` get in each other's way because the `InvocationHandler` implements `writeReplace`.


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1854/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NjNQm,fury,2374816806,1854,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-25T18:04:36Z,2024-09-25T18:04:36Z,Thanks for reporting this issue. I thought we've addressed all corner case for jdk serialization compatibility. I will take a look at it today later,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NjNQm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Nlky9,fury,2375437501,1854,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-25T23:21:08Z,2024-09-25T23:21:08Z,"Hi @theigl , I used JDK serialization to serialize your object, it throw ClassCastException too:
```java
java.lang.RuntimeException: java.lang.ClassCastException: cannot assign instance of org.apache.fury.serializer.$Proxy6 to field java.lang.reflect.Proxy.h of type java.lang.reflect.InvocationHandler in instance of org.apache.fury.serializer.$Proxy6

	at org.apache.fury.FuryTestBase.jdkDeserialize(FuryTestBase.java:339)
	at org.apache.fury.serializer.JdkProxySerializerTest.serializeProxy(JdkProxySerializerTest.java:142)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136)
	at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219)
	at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
	at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923)
	at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192)
	at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:808)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
	at org.testng.SuiteRunner.run(SuiteRunner.java:326)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.runSuites(TestNG.java:1092)
	at org.testng.TestNG.run(TestNG.java:1060)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
Caused by: java.lang.ClassCastException: cannot assign instance of org.apache.fury.serializer.$Proxy6 to field java.lang.reflect.Proxy.h of type java.lang.reflect.InvocationHandler in instance of org.apache.fury.serializer.$Proxy6
	at java.base/java.io.ObjectStreamClass$FieldReflector.setObjFieldValues(ObjectStreamClass.java:2102)
	at java.base/java.io.ObjectStreamClass$FieldReflector.checkObjectFieldValueTypes(ObjectStreamClass.java:2066)
	at java.base/java.io.ObjectStreamClass.checkObjFieldValueTypes(ObjectStreamClass.java:1355)
	at java.base/java.io.ObjectInputStream$FieldValues.defaultCheckFieldValues(ObjectInputStream.java:2682)
	at java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2483)
	at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2269)
	at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1747)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:525)
	at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:483)
	at org.apache.fury.FuryTestBase.jdkDeserialize(FuryTestBase.java:337)
	... 26 more
```
Here is my code for JDK serialization invocation:
```java
 public static byte[] jdkSerialize(Object o) {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(bos)) {
      objectOutputStream.writeObject(o);
      objectOutputStream.flush();
      return bos.toByteArray();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static Object jdkDeserialize(byte[] data) {
    try (ByteArrayInputStream bis = new ByteArrayInputStream(data);
        ObjectInputStream objectInputStream =
            new ClassLoaderObjectInputStream(Thread.currentThread().getContextClassLoader(), bis)) {
      return objectInputStream.readObject();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
```

Seems `ProxyFactory.JdkProxyFactory.ProxyReplacement#readResolve`  should return `JdkHandler` instead of `Proxy` instance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Nlky9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NoI8-,fury,2376109886,1854,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-09-26T07:10:14Z,2024-09-26T07:10:14Z,You are right. This code is taken from Apache Wicket and I greatly simplified it. It seems I simplified it a bit too much. I will re-check my example and get back to you later today.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NoI8-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NoSWk,fury,2376148388,1854,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-09-26T07:31:11Z,2024-09-26T07:31:11Z,"There was an important interface missing on the proxy: `IWriteReplace` that exposes the `writeReplace` method. This code now serializes fine with JDK serialization:

```java
static class ProxyFactory {

	static <T> T createProxy(final Class<T> type) {
		return new JdkProxyFactory().createProxy(type);
	}

	public interface IWriteReplace {
		Object writeReplace() throws ObjectStreamException;
	}

	static final class JdkProxyFactory {

		@SuppressWarnings(""unchecked"")
		<T> T createProxy(final Class<T> type) {
			final JdkHandler handler = new JdkHandler(type);
			try {
				final ClassLoader cl = Thread.currentThread().getContextClassLoader();
				return (T) Proxy.newProxyInstance(cl, new Class[]{type, IWriteReplace.class, Serializable.class}, handler);
			} catch (IllegalArgumentException e) {
				throw new RuntimeException(""Could not create proxy for type ["" + type.getName() + ""]"", e);
			}
		}

		static class JdkHandler implements InvocationHandler, IWriteReplace, Serializable {

			private final String typeName;

			private JdkHandler(Class<?> type) {
				typeName = type.getName();
			}

			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				if (isWriteReplaceMethod(method)) {
					return writeReplace();
				}
				return null;
			}

			public Object writeReplace() throws ObjectStreamException {
				return new ProxyReplacement(typeName);
			}

			static boolean isWriteReplaceMethod(final Method method) {
				return (method.getReturnType() == Object.class) &&
						(method.getParameterTypes().length == 0) && method.getName().equals(""writeReplace"");
			}
		}

		public static final class ProxyReplacement implements Serializable {

			private final String type;

			public ProxyReplacement(final String type) {
				this.type = type;
			}

			private Object readResolve() throws ObjectStreamException {
				try {
					final Class<?> clazz = Class.forName(type, false, Thread.currentThread().getContextClassLoader());
					return ProxyFactory.createProxy(clazz);
				} catch (ClassNotFoundException ex) {
					throw new RuntimeException(ex);
				}
			}
		}
	}
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NoSWk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NpYiT,fury,2376435859,1854,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-26T09:31:18Z,2024-09-26T09:31:18Z,"I see, Fury does not handle this right, thanks for reporting this up. It's really a subtle bug. I fixed it in https://github.com/apache/fury/pull/1857","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6NpYiT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1854,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Nqy_v,fury,2376806383,1854,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-09-26T12:23:45Z,2024-09-26T12:23:45Z,Thank you very much @chaokunyang!,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Nqy_v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1855,https://api.github.com/repos/apache/fury/issues/1855,fury,2549378115,1855,java.lang.UnsupportedOperationException: Class class java.util.LinkedHashMap$Entry doesn't support serialization,DemonJun,21258148,DemonJun,,OPEN,2024-09-26T02:52:56Z,2024-09-30T04:01:15Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.1

### Component(s)

Java

### Minimal reproduce step
```
 List<Class<?>> NEED_REGISTER_CLASS = List.of(JSONObject.class, JSONArray.class);
    Fury fury =
        Fury.builder()
            .withLanguage(Language.JAVA)
            .withClassLoader(Thread.currentThread().getClass().getClassLoader())
            .withRefTracking(false)
            .withNumberCompressed(true)
            .withLongCompressed(true)
            .withStringCompressed(true)
            .registerGuavaTypes(true)
            // 关闭类型注册
            .requireClassRegistration(false)
            // 开启异步编译，提高第一次序列化效率
            .withAsyncCompilation(true)
            .build();
    AllowListChecker classChecker = new AllowListChecker();
    for (Class<?> aclass : NEED_REGISTER_CLASS) {
      fury.register(aclass);
    }

    // 因为关闭了 类型注册检查，这里额外添加一些，运行序列化的类前缀路径，尽量为了安全
    classChecker.allowClass(""sun.util.calendar.ZoneInfo"");

    fury.getClassResolver().setClassChecker(classChecker);

    JSONObject data = JSONObject.of();
    data.put(""a"",1);

    JSONObject copy = fury.copy(data);
    System.out.println(copy);
```
### What did you expect to see?

可以正常序列化 map 类型

### What did you see instead?

downgrade to 0.7.0

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1855/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1863,https://api.github.com/repos/apache/fury/issues/1863,fury,2553835129,1863,"A Class that implements Map interface cannot be deserialized, ... OutOfBoundsException",istinnstudio,36081997,,,CLOSED,2024-09-27T22:30:16Z,2024-10-08T12:04:54Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.7.1

### Component(s)

Java

### Minimal reproduce step

There is a class that implements Map interface. This class cannot be deserialized. I will provide full reproducible example.. The example contains 2 classes, the customHashMap class and a deep copy example I use. Uncomment the field to switch between a valid Map and the erroneous explicit CustomHashMap Object
```
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import org.apache.fury.Fury;
import org.apache.fury.config.CompatibleMode;
import static org.apache.fury.config.Language.JAVA;
import org.apache.fury.logging.FuryLogger;
import org.apache.fury.memory.MemoryBuffer;
import org.apache.fury.memory.MemoryUtils;

public class DeepCopyApacheFury {

// Method to deep copy an object using Apache Fury with dynamic buffer allocation
public static Object deepCopyFuryWithByteBufferExample(Object theObj) throws Exception {
    long startTime = System.nanoTime();  // Start time for performance tracking

    // Initialize Apache Fury serialization
    Fury fury = Fury.builder()
            .withLanguage(JAVA)  // Use Java language configuration
            .withRefTracking(true)  // Enable reference tracking (if needed)
            .requireClassRegistration(true)  // Ensure all classes are registered
            .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
//            .withMetaShare(false)
//            .withScopedMetaShare(false)
//            .withRefCopy(false)
//            .withAsyncCompilation(false)
            .build();

    // Manually register classes to improve performance
    registerFuryLargeObjectExample(fury);

    System.out.println(""Starting Fury serialization..."");

    // Use ByteArrayOutputStream for dynamic buffer allocation
    ByteArrayOutputStream byteArrayOutStream = new ByteArrayOutputStream();
    Object newObj = null;

    try {     
    
          // Serialize the object into the ByteArrayOutputStream
        fury.serialize(byteArrayOutStream, theObj);
        byte[] serializedData = byteArrayOutStream.toByteArray();

        long serializationEndTime = System.nanoTime();
        System.out.println(""Serialization completed in "" + (serializationEndTime - startTime) / 1_000_000_000.0 + "" seconds"");
        
        // Calculate the size of the serialized data in MB
        double serializedSizeMB = serializedData.length / (1024.0 * 1024.0);
        System.out.println(""Serialized object size: "" + serializedSizeMB + "" MB"");

        // Allocate a ByteBuffer of the exact size of the serialized data
        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(serializedData.length);
        byteBuffer.put(serializedData);
        byteBuffer.flip();  // Switch to reading mode

        // Wrap the ByteBuffer in a MemoryBuffer for deserialization
        MemoryBuffer memoryBuffer = MemoryUtils.wrap(byteBuffer);
       System.out.println(""memoryBuffer size = ""+memoryBuffer.size());
        // Deserialize the object from the ByteBuffer using Fury
        System.out.println(""Starting Fury deserialization..."");
        newObj = fury.deserialize(memoryBuffer);
        
        long deserializationEndTime = System.nanoTime();
        System.out.println(""Deserialization completed in "" + (deserializationEndTime - startTime) / 1_000_000_000.0 + "" seconds"");
    
    } catch (Exception e) { // not in use as it breaks fury debugging log
//       getLogger(DeepCopyApacheFury.class.getName()).log(System.Logger.Level.DEBUG, ""Exception in DeepCopyApacheFury"", e);
       FuryLogger furyLogger = new FuryLogger(Object.class);
       String msg = ""FURY LOGGER: Exception in DeepCopyApacheFury"";
               furyLogger.error(msg, e);
//               getLogger(DeepCopyApacheFury.class.getName()).log(System.Logger.Level.DEBUG, ""Exception in DeepCopyApacheFury"", e);
    }
            // Verify types for debugging
        System.out.println(""------------------ VERIFY ------------------"");
        System.out.println(""Original object type: "" + theObj.getClass().getName());
        if (newObj!=null) {
      System.out.println(""Deserialized object type: "" + newObj.getClass().getName());
   } else{System.err.println(""newObj IS NULL"");}

    return newObj;
}
      private static void registerFuryLargeObjectExample(Fury fury) {
        fury.register(LargeMapObject.class);
        fury.register(CustomHashMap.class);
    }    
   
        // Main method demonstrating the deep copy with large object
    public static void main(String[] args) throws Exception {

        // Create a large object (e.g., Map with a large number of entries)
        LargeMapObject originalObject = new LargeMapObject();
        originalObject.populateLargeMap(1_000_000);  // Populate with 1,000,000 entries

        // Perform deep copy using Fury
        LargeMapObject copiedObject = (LargeMapObject) deepCopyFuryWithByteBuffer(originalObject);

        // Check if deep copy was successful (you can add further validation if needed)
        System.out.println(""Original object size: "" + originalObject.getMapSize());
        if (copiedObject!=null) {
        System.out.println(""Copied object size: "" + copiedObject.getMapSize());
        } else{System.err.println(""COPY OF MAP IS NULL"");}

    }

// Example class to demonstrate serialization with large data
static class LargeMapObject {
//    private Map<String, Integer> largeMap = new HashMap<>();
    private CustomHashMap<String, Integer> largeMap = new CustomHashMap<>();

    // Populate the map with a large number of entries
    public void populateLargeMap(int numEntries) {
        for (int i = 0; i < numEntries; i++) {
            largeMap.put(""key"" + i, i);
        }
    }

    // Get the size of the map (for validation)
    public int getMapSize() {
        return largeMap.size();
    }

    @Override
    public String toString() {
        return ""LargeObject{mapSize="" + largeMap.size() + '}';
    }}
 }


```

```
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

@SuppressWarnings({ ""rawtypes"", ""unchecked"" })
public class CustomHashMap<K, V> implements Map<K, V> ,Serializable , Cloneable { // Cloneable for deep clone method
    private Map<K, V> entryMap;
    // SET: Adds the specified element to this set if it is not already present.
    private Set<K> entrySet;

    public CustomHashMap() {
        super();
        entryMap = new HashMap<K, V>(); // changed to linked
        entrySet = Collections.newSetFromMap(new HashMap<>());
        
    }
      @Override
    public Set<Map.Entry<K, V>> entrySet() {
    return new HashSet<>(entryMap.entrySet());
}    
    @Override
    public V put(K key, V value) {
        V oldValue = entryMap.get(key);
        insertionRule(key, value);
        return oldValue;
    }
    @Override
    public void putAll(Map<? extends K, ? extends V> t) {
        for (Iterator i = t.keySet().iterator(); i.hasNext();) {
            K key = (K) i.next();
            insertionRule(key, t.get(key));
        }
    }

    @Override
    public void clear() {
        entryMap.clear();
        entrySet.clear();
    }
    @Override
    public boolean containsKey(Object key) {
        return entryMap.containsKey(key);
    }
    @Override
    public boolean containsValue(Object value) {
        return entryMap.containsValue(value);
    }
    public Set entrySetOriginal() {
        return entryMap.entrySet();
    }
    @Override
    public boolean equals(Object o) {
        return entryMap.equals(o);
    }
    @Override
    public V get(Object key) {
        return entryMap.get(key);
    }
    @Override
    public int hashCode() {
        return entryMap.hashCode();
    }
    @Override
    public boolean isEmpty() {
        return entryMap.isEmpty();
    }
    @Override
    public Set keySet() {
        return entrySet;
    }
    @Override
    public V remove(Object key) {
        entrySet.remove(key);
        return entryMap.remove(key);
    }
    @Override
    public int size() {
        return entryMap.size();
    }
    @Override
    public Collection values() {
        return entryMap.values();
    }
   
   // Method to return a Map from a CustomHashMap. It can return a map anyway but it is more obvious this way
    public Map<K, V> getMap() {
        return this;
    }

   public Map<K, V> getEntryMap() {
      return entryMap;
   }

   public Set<K> getEntrySet() {
      return entrySet;
   }


    @Override
    public Map<K, V> clone() {
        try {
            CustomHashMap<K, V> clonedMap = (CustomHashMap<K, V>) super.clone();
            clonedMap.entryMap = new HashMap<>(entryMap); // Shallow copy the entryMap
            clonedMap.entrySet = new HashSet<>(entrySet); // Shallow copy the entrySet
            return clonedMap;
        } catch (CloneNotSupportedException e) {
            // This should never happen since CustomHashMap is Cloneable
            throw new InternalError(e);
        }
    }
    
        public synchronized boolean insertionRule(K key, V value) {
        // KEY as null and EMPTY String is not allowed.
        if (key == null || (key instanceof String && ((String) key).trim().equals("""") ) ) {
            return false;
        }

        // If key already available then, we are not overriding its value.
        if (entrySet.contains(key)) { // Then override its value, but we are not allowing
            return false;
        } else { // Add the entry
            entrySet.add(key);
            entryMap.put(key, value);
            return true;
        }
    }

}
```


### What did you expect to see?

a deserialized object

### What did you see instead?

Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: Range [260, 2) out of bounds for length 262. This probably is for the example, could be different on other Map content, generally is ""OutOfBoundsException""

### Anything Else?

I have various error messages as this custom map class is being used on more complex classes, and I have a fair conclusion that this one creates several issues, but I am not entirely sure. This explicit customhashmap usage was done by mistake and stayed there for one small object even if it is a bit ""heavier"" comparing to the native Map as it is now an Object. Eventually it will be replaced by a true Map but that will be tricky as versioning will take place in various classes. FST serializer v2.57 works OK with it, so there should be a bug or a missing case in Fury...

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1863/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1863,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OoNg1,fury,2392905781,1863,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-04T06:18:19Z,2024-10-04T06:18:19Z,"I'm on vacation, I will take a look at it tomorrow","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OoNg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1863,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzUS-,fury,2395817150,1863,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T03:21:55Z,2024-10-07T03:21:55Z,"@istinnstudio Could you try 0.8.0 version, I tested locally, it works fine.
![image](https://github.com/user-attachments/assets/07d1470b-1000-4c21-a190-fa5834f3782e)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzUS-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1863,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzUfK,fury,2395817930,1863,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T03:23:00Z,2024-10-07T03:23:00Z,"And if you are using Fury for production usage, do not create Fury every time. Create a static ThreadFury object instead.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzUfK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1863,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PB-PH,fury,2399658951,1863,NA,istinnstudio,36081997,,,NA,2024-10-08T12:04:53Z,2024-10-08T12:04:53Z,"Thanks. this seems to work for the example, though I still have some casting error messages upon deserializing my objects but it should be now irrelevant of this issue. e.g. Caused by: java.lang.ClassCastException: class java.awt.Color cannot be cast to class [Ljava.awt.Color; (java.awt.Color and [Ljava.awt.Color; are in module java.desktop of loader 'bootstrap'). At the moment, I am not able to trace the cause of the issue as logs do not provide exact breakpoints. I might create an other issue if I have more data to provide.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PB-PH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/1864,fury,2554364716,1864,[Java] ClassNotCompatibleException even with CompatibleMode.COMPATIBLE,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,CLOSED,2024-09-28T16:09:42Z,2024-10-01T00:55:15Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

OpenJDK 23, Fury 0.7.1, 6.8.0-45-generic #45-Ubuntu.

ClassNotCompatibleException even with CompatibleMode.COMPATIBLE being used.

### Component(s)

Java

### Minimal reproduce step

```
import org.apache.fury.Fury;
import org.apache.fury.config.CompatibleMode;
import org.apache.fury.config.Language;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Serialization test.
 */
public class SerializationTest {

	/** Tests the DTO serialization. */
	@Test
	public void testDtoSerialization() throws Exception {
		final DtoTestObject testObject = new DtoTestObject(1L, ""2"", ""3"", 4, new int[] { 5 }, 6);

		final Fury objectSerializer = Fury.builder().registerGuavaTypes(false).withLanguage(Language.XLANG).withCompatibleMode(CompatibleMode.COMPATIBLE)
				.withClassVersionCheck(false).build();
		objectSerializer.register(DtoTestObject.class, DtoTestObject.class.getName());
		final Fury dtoSerializer = Fury.builder().registerGuavaTypes(false).withLanguage(Language.XLANG).withCompatibleMode(CompatibleMode.COMPATIBLE)
				.withClassVersionCheck(false).withDeserializeNonexistentClass(true).build();
		dtoSerializer.register(DtoTestObjectDto.class, DtoTestObject.class.getName());

		// Serializes using general object serializer and de-seralizes using DTO
		// serializer.
		final byte[] serializedObject = objectSerializer.serialize(testObject);
		final DtoTestObjectDto deserializedDto = (DtoTestObjectDto) dtoSerializer.deserialize(serializedObject);
		Assertions.assertEquals(testObject.getId(), deserializedDto.getId());

	}

}

```

### What did you expect to see?

De-serialized object.

### What did you see instead?

ClassNotCompatibleException

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1864/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6LT-,fury,2380838142,1864,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-28T17:13:35Z,2024-09-28T17:13:35Z,"Hi @rvcoutinho , please set language to Java. Xlang doesn't compatible mode yet.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6LT-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6McH,fury,2380842759,1864,NA,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,NA,2024-09-28T17:32:39Z,2024-09-28T17:32:39Z,"@chaokunyang JAVA does not seem to support typeTag. So, I cannot serialize/deserealize using different classes with similar schemas. Am I wrong?

Using short id is only viable on static (with no new classes and changes added) applications.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6McH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6UDP,fury,2380873935,1864,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-28T19:31:21Z,2024-09-28T19:31:21Z,Short is a big range. You can assign different classes to same id,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6UDP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6XLQ,fury,2380886736,1864,NA,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,NA,2024-09-28T20:27:48Z,2024-09-28T20:27:48Z,It does not work on my use case. It would be used to serialize data between applications. Registering would have to be done dynamically. One application cannot manage other applications ids. TypeTag would solve it.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N6XLQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N7x3q,fury,2381258218,1864,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-09-29T08:20:37Z,2024-09-29T08:20:37Z,"I see, thanks. We can update register typetag to make loadClass recognize typetag mapped classes If language is Java, But do not create struct serializer.. I think this will resolve your issue. Would you like to create a pr for it?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N7x3q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N9FOi,fury,2381599650,1864,NA,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,NA,2024-09-29T20:54:41Z,2024-09-29T20:54:41Z,I am forking it and will take a look,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6N9FOi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OGoJ8,fury,2384102012,1864,NA,rvcoutinho,1753197,Rômulo Coutinho,me@rvcoutinho.com,NA,2024-09-30T20:37:36Z,2024-09-30T20:37:36Z,"@chaokunyang Can you explain a bit better what is on your mind? I have spent some time reading the codebase, but your suggestion is not clear to me. If I understood it right, only StructSerializer adds the type tag to the serialized object.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OGoJ8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1864,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OIa3J,fury,2384571849,1864,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-01T00:55:14Z,2024-10-01T00:55:14Z,"For fury Java serialization, We write full class name instead of type tag, We can take type tag as class name too. Just like Class.getName return type tag","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OIa3J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1866,https://api.github.com/repos/apache/fury/issues/1866,fury,2558228269,1866,[Question] Python Pypi的包过旧，未支持magic number,ffgan,114909534,,,CLOSED,2024-10-01T05:34:48Z,2024-10-03T12:15:31Z,"### Question

pypi的包目前最新的是0.4.1,23年12月发布的，，Go读取py序列化的bytes会报the fury xlang serialization must start with magic number...  。

pyfury在2024.4.20添加了magic number支持，希望能新打包一个版本让pypi的版本跟上
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1866/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1866,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Of68R,fury,2390732561,1866,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-03T07:40:12Z,2024-10-03T07:40:12Z,"We are refactoring pyfury, we may release pyfury in fury 0.9 version","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Of68R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1868,https://api.github.com/repos/apache/fury/issues/1868,fury,2558869759,1868,[Question] large string has bigger serialized size,shaoxiao,11438257,,,CLOSED,2024-10-01T10:51:50Z,2024-10-21T16:31:54Z,"### Question

自定义类型对象有字段string，该字段是一个大文本，发现该对象序列化出来的体积比JDK序列化要大很多，如何解决？","{""url"": ""https://api.github.com/repos/apache/fury/issues/1868/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OfpCL,fury,2390659211,1868,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-03T06:55:04Z,2024-10-03T06:55:04Z,Could you provide reproduction code？,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OfpCL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Owlj3,fury,2395101431,1868,NA,shaoxiao,11438257,,,NA,2024-10-05T16:00:10Z,2024-10-05T16:00:10Z,"`String data=""{""floatLayerList"":[],""abBuriedTag"":[""tsabtest|base64|UENUZXN0XzU2MDc1fGJhc2U9MA|tsabtest""],""291"":[{""comment_num"":""0"",""ad_type"":""3"",""color"":""【玄鹿 白杆】0.5mm"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""81"",""type"":""3""},{""num"":""28"",""type"":""4""},{""num"":""200+"",""type"":""8""},{""num"":""1000+"",""type"":""6""},{""num"":""2000+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""施耐德（Schneider） 中性笔德国限定版菲尔Fave商务办公速干笔学生考试按动式水笔书写黑色 【玄鹿 白杆】0.5mm"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVtDqLHNMktMUy_UhLjOo6SCsJxDYYcZ_xSPJW70rHsIzgb0yywcIDtYVQwXGLjaR-qTzSyv_00Pwmj2pHRxi4xG1DzDBbuoeYNK9XVJ9xTPj3QVqcJUJopX0smA2qvexxZ3hKUZ2XKp4_EqpiedZKlZgqkkphIk1ydr2aaT_cCSF6woefYNIlY_B5eDfeVohR2TIGX3JAdjMgOl21FddzaLKvOI4WNhHP7LDpK8f5JYtbeFYEJcToD5MPjZ9jsC5nCT7sBvzLoTTB3280qXxj6Ylc2mEzVb53_HIdboWE74V6sPr2VjzbE33GF9o0vuMQRKNsDwDZ16TR_j0jdCUCVbJCff6yLDzPMidl2XAbdL5zHPZ6uoNCuNvnuaqZP2Plxb3R_NXxCtT1g_j0yJdiRc9q0WDgTyDlDUpzgKnWmqWe3gcArcW106LsKjKnk1rRigxHi2ok2buMlbQLH0pfiejyzHjZEpLqLvVuVf9FrhuvJEi9RYenoy4VObF26c8KOpTibLevKYeCwQgSzALH7fK1zPuJUds-fuGJXBdkHAwg8Q-zdSgdxeNHtPWQsTNIhms1tRBMSa4bqoMeDev2uop3nQFkJG-rimajMBuBvpUddmH2qsLimFiwDH65lz12ROsWJdi0LyaywHyNfh0tmTbesdFQLY7RP5hClyb1mq0llZ3PytozgrePVuxxwMkGUKnKSp6s_nDuGGB5Xpm6rDSmI3elBuOb6c06XQcFe5n87RsnVxjW6BO_l-YSNNPaa65rbA0MWi2kRR2GPohOcD-PnreX6jQaI8jx6AD1YN-lc_svuTAlmzevEBszH6X6JZUBU9Uz1253C9Yt1UWZd_606Zn0Il84WfFS7PHfXvE15oHYlsB-3O91Aciyph4SyAkZNpQXs4xSnY5aSjXInwTt9-09hBNEtC6H4gq1MXZBOrxhKtzxE8KkOd7Qdk7ZDk1spByEOTgfx5POlXsUTaKFaWX8SmzMSy35b8dnIJxs4xk1I6Whd25G386dQ4ksAIA_GoZlLvy5Y91k1ob_37qV4R4jq69o4XQvyEbQvPqTnX5XQF-0YcD4fmNrPZLlfMCAdMzT1ys23LePj5PIaoYqTzYFxvcLI0_feGZ71aiS5IfNiaT6mtRTGm-XaIWf7oWb6tmgF1gbNZ89NKj4HinFSpHSNcdX1Xt3fFltZ6w&v=404"",""vender_id"":""10411649"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10043913504894.html"",""click_url"":"""",""spu_id"":""10043913504890"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10043913504894\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""23392321892\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/130833/31/21877/143022/61ee4cf2Ed92a5c75/ed0d2080a6674a45.jpg"",""sku_id"":""10043913504894"",""fuzzy_comment_num"":""2000+"",""jdcs_white_label"":""0"",""shop_id"":""10265225"",""good_rate"":""11"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""施耐德办公文具旗舰店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""8"",""sku_fuzzy_comment_num"":""100+"",""sku_price"":""8"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":8.0},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""23392321892"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDA0MzkxMzUwNDg5NC5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVtDqLHNMktMUy_UhLjOo6SCsJxDYYcZ_xSPJW70rHsIzgb0yywcIDtYVQwXGLjaR-qTzSyv_00Pwmj2pHRxi4xG1DzDBbuoeYNK9XVJ9xTPj3QVqcJUJopX0smA2qvexxZ3hKUZ2XKp4_EqpiedZKlZgqkkphIk1ydr2aaT_cCSF6woefYNIlY_B5eDfeVohR2TIGX3JAdjMgOl21FddzabkOdmoVXVFKi8fM7n0dNgxdWxQkuiKPEoxmXjfmCIFvWFYyBxtdXkPOJgVG1CJbYrl4Sk26HvRvj6jSAtVe2iNMW-BkXFHN3zpIZsG9KUr9OqaCuUSqsIRA1NJYIEgS_1XKVgkDGiWDo761RQXIEMA63vX--kGl5zbwF3eE_QTfZ_xSfhpK5YIE5bGmQAzyArjsOSogXpOLTqTZ2Xa0i_UFciWczHg9ieT46FEqlnmtP6ycTUrOyQfykHOc89rjP482ETcFN0od-x_CyGK0Yyd1W6aboWSAk9oucH02OllrhhpvasWHuTqxEw9qeujVMu25Opix9nE9VmdtPZZ3pGP3Xhhrwxbv5Gj-7WAie0qD4o8PzSqZTgBM5vmgQYYE113Bu33e0RT-c1HBl4HwKzxF6TBhahhrPoCKKVZ0Bb5XSZOkqKNiR8E0zYvnMJ_pLadIMeTwAu1qz03S8vyiXqAMmmsfoTxYJFQJ8ySom8FlKudJoZSNAvWh-O5GVqSEg0sHsW08NwiW781PP0dqtxXjNA-idyoGKX3BkXFEqDJ4pJUynr9qy638MO76G-LpZBA-6iRA7uRNZrQQaitp2ZOHuELuS2E5wBdXS5t1zgwDYS3Bn5PSF4vNgQ4TE8JNc6KRiWJnGfzhKU_yxUSLfJwcHbQJMR123eLnXuRzzcTukhxEh5XICtqavqqhYWpm9X6r_bi7nQlYkE03LN1aRXnGKWnu34MlQTpLxyVAHk9zJiGWZssEZc1XB6wgGKOLGsPGQUK9298bKiSx5LNKeAX2_cWd-Ob-TDcI1b-eRzZRc5p8hE4TZ0aEIsa4E3n95PeEJ2vju-urkE6FPpI5Xc3EaMTPU0Emj6qmpM8cnD2zJf1C0GZyvqDwFFYCCW8z6fiG8paWmWVVf3W_FDfF5Xf4_MK6FzsR8Of6H8JYrk2WDq59ilQtmb6o1zCSzH0ik&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""【锦鲤 黑杆加三支笔芯】0.5mm"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""81"",""type"":""3""},{""num"":""28"",""type"":""4""},{""num"":""200+"",""type"":""8""},{""num"":""1000+"",""type"":""6""},{""num"":""2000+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""施耐德（Schneider） 中性笔德国限定版菲尔Fave商务办公速干笔学生考试按动式水笔书写黑色 【锦鲤 黑杆加三支<font class=\""skcolor_ljg\"">笔芯</font>
】0.5mm"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVYdBxeTj0eT_-8c8-Mz7gNcHQ7cdh4B-SG3NA5EbaO358Aee74V9Rqyqw-jUsLQGQPk9YXK7eUtKTzoYT4d3uAszUhyb96VryBgridFuY7RvTxmMrA5k6KzhkFRZEBjX7yGpWeIBGqST4cWVpaucnE-7Uaptfaph7T1cudBDR_4Cs_xEP9kMEpjDoaU6HqwoWHvzLiHAslQ3rZMHuLMt7giKEr1Gc3cIKR9Wg02HFg3CSyw6YwB1vaRCziMuscYXCa2y313vygipVBuxd929zUYmK4OuNl8RVuOTxqP2XVLhpsT4ktxseJrYYCu88BWVUP14JDuld8h_PKFTkTAbTd66urRne0tcw5UNFyCwR5PDkdYRGk4-YJ0HeABWy4uLfUEXeAJLuzVCt2KB2cgQ7DQz641VPVkM2hPIFjcP6rB2Ll8QiIXyyAso_N2D8LJSvjee4drUjjq7Vv1_nrJRazCqns8tngA3Nmz1EfjHf6y3cDd7Q3MTMywf90ZB4E1zf-otHcE41VpLQHs29Q27vgtV0xGovb2g7Vsb_GN4qaO0zIDKgbi6UVmQS__CZGA8XIGL2hVxgJYJc9IQ_KUmca8C4kX6KEhe5UolAdWsK4T3_Gw2xGMo_6XC_QsLd9ywmo7_FJ_P7i3LlFkTn-21JBQW0edGaoOjdXbqe7WzYM9HU8-rJlJnnYtkC8SmY1d0u_svuU-4amG266izPM57zOGQicldopTGfnlRVoTAg4sc9FWvx5BIUXuJNGoD-sKuIeDMVkmXJryY4yKoZ5zUogrIfoOv9tM7W_FnOjecvovu_Ocrit4GiNXfAw6qWF9LTuTlUUuBphEdTmJG6KAjPuyxbJM4lOURyGwf0YJtnr3rQBbY7yihbuG6a9oEJhRlb2-gHWyATq1IfI2vM0vsriaUF44m5F8wxHXsOc-vUFZn76dgl7BEVIp8pM7VyMVWxW8zj_tEdF1a4K8OVB61eM4z9sMKis4q-AhOJq71PAZP8sPw0sdvf82lgXkrpYwT_eVIglygAuq7w6wckajMA6FX2WjckgC2wIumKgQHLIhotRFtOUpccSr7L6VFkvqkQDa_ux4FNPc0aVInj0xlCzX-eXCZ49zlH_2jp4pxacPenHgaZFZOZEyd8n_AsZMRGfW7gv49Dd7qQ2VEZTwYfMXstFFvP-MEzljw3ynnFkrA&v=404"",""vender_id"":""10411649"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10043913504905.html"",""click_url"":"""",""spu_id"":""10043913504890"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10043913504905\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""23392321889\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/99562/23/22346/160223/61ee4b88E058c614c/ebb83987085dc82d.jpg"",""sku_id"":""10043913504905"",""fuzzy_comment_num"":""2000+"",""jdcs_white_label"":""0"",""shop_id"":""10265225"",""good_rate"":""11"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""施耐德办公文具旗舰店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""21"",""sku_fuzzy_comment_num"":""100+"",""sku_price"":""21"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":20.0},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""23392321889"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDA0MzkxMzUwNDkwNS5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVYdBxeTj0eT_-8c8-Mz7gNcHQ7cdh4B-SG3NA5EbaO358Aee74V9Rqyqw-jUsLQGQPk9YXK7eUtKTzoYT4d3uAszUhyb96VryBgridFuY7RvTxmMrA5k6KzhkFRZEBjX7yGpWeIBGqST4cWVpaucnE-7Uaptfaph7T1cudBDR_4Cs_xEP9kMEpjDoaU6HqwoWHvzLiHAslQ3rZMHuLMt7gk9E4vgZwmCnDi9we-5FLtz4xBuA85R4t7HiJgJacA1jBUFk3GprCO04TqwZrGNSeB7muR6kIH0fH47ya4DWz2hd_66JVQ_aeCbGwwVRBWukgs0TmmgQuVtfR2xRsiMS5SUtf18oy-Vl0WT2JyyTTMiFTwSsMAuVe2yJtczWqvWW0A7787K6mFi4_vA_D7AB3T7PaJ24j04Arhe_A_Fwak-m98I8MPzjBdi8LcJEyQOeHFTl_sOpCsIBNYOyl80Vw_jPmWqLeO-F8NC0lFUpWxorGCM7Wfq4cDrpOuW3qYcMC9vfk5xqO-dEXTyzjz2mnC6bJwsBDTaPgrUuzPPvYzmc1jO41JfDUgUUkBKJDbod6QRFuC8C_RkoWgeBoS3fROY7UpwHVFFNTurKK7YfwlAYWwhK4Qt-GwgtSjtEyt2Dn6f3X2wDKtUMUUIt2l7ZzKgVEXpXg83Yg9pIZjoYM5gXNvkDFi08GKmY7L52WblnQwFEijmPLd8LgpvfPgs5m40O_1cgpUkyR-9Wl443sKDweaM5h5Xtj0a8qOFe84WQzw1bhsMouMx0cWesXXdX1DRG1yG3wmf8EjmmZcL8fLweblYWz3o7iDCmA0gm6nJNwpC0x0dEmQTmwYIHX0uddDROgSMDKYPpV2SkISUIjSuP5W6_gJwpW97gb1UBTakMeDAaUsPZjAxKz1405wJdrd_NwszTklOiNEriz9NETLeJmsiBVN-AnMg0PF4ztw9Xkpzmdc18hmHRiUMfS5Hgh_4iQPVMaS3SwDCxWJAJ7jjtyZHWpT9-eNd4_12ILFt5fYFcwVrwM6BHnRW83uTrI_4Gbe9iHlZkshoGn5y4NZ7d7y8c4St0BipSy2gXP77pybMB8RfgAvhoS1oxIH0tUPQpKRVjYJpjmtGEvO-qd2HPwH4KRVrWkygg3tZV_JWriSygXmjLjrHBEXuCy1cVQ&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""【0.38 按动全针管】20支"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""2000+"",""type"":""3""},{""num"":""500+"",""type"":""4""},{""num"":""200+"",""type"":""8""},{""num"":""1000+"",""type"":""6""},{""num"":""5000+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""得力（deli） <font class=\""skcolor_ljg\"">笔芯</font>
黑色 签字<font class=\""skcolor_ljg\"">笔芯</font>
中性<font class=\""skcolor_ljg\"">笔芯</font>
碳素水<font class=\""skcolor_ljg\"">笔芯</font>
水性<font class=\""skcolor_ljg\"">笔芯</font>
学生笔替芯 文具学习用品 【0.38 按动全针管】20支"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVXPalkkdkavo2vEJreYjtYnlEw7d6gw_0QRWFbKAHD56WEZy__VISfe9HwLXCBwYd2KWTzTzdo6gozPUGqw-2ViW1uQncwsdZKEUdG1-cFnu1OnwRVJjI6wscPxdqU3m2QylG-POOlmO__74u9qEEKquYQdDGcj8-3VXN0UrbeItcwg-xvMjEOnyjbEkaeeIqdFkYfB2WGMJ29wa2-WvKzcU-aXXuogKjxJ0bN5eCTF1VXV-KwhzC-8ayWLAgOxCG4kQVsNbJzSkDH1Psvm8QUJkgg0OBoOdJc9IgGmgiFjH0ACLkG3ZxUDDB7N30rVF_jUgncikKV24pUC5BX21VhGhedkqvKy5JVfj8T-9cx2qYOknDk48-YfKxdPodV9u8lQwcImKBORCNxdRyS-wHV3TAH7bD9v6Cf_EuqYSBa0flRmbMdGx5oLJJxKTs59WpRuUrk1H-IORl5JWGbPPSds3tig-6v5xDguoUBnzme23oxxjcbzHziYhZIqnh3HiNeeGryDXJbMntxAxOPFzIDNciheLoB4vaoTKpdK7AfAOYJbBAF9He9BrR99NlISQvWNTz0Ql3LBEZAEY2jtK2Z-6zfqt9tctd3tMZn93XHmjzK_LumIXdZb9MuMLbHSJ54jBo2YAhIbIvBePeEGAhyKIJaJibjEilCBUEdvw09RkM-O5RAO__0L1NO6tuGocSzgpNVysepjS7Do1YvdBfULXkIwvmDmLTEQSg9sy-QkxCO9rXIXqPSM3kvF6HdBntg9ds-1ZFa1urFXHwjEJN_MKBg4pH5uczWtr9qI8rQRLp_kjSV1hnaeRlD4hYdeFCDsmPXu45cFOLQiuhNw1JV50C6ynkHjcRMRVgJlxXEeVlgZPkvj9nBLMz5p-j3ld33SqrYtnTLR7suD_gdDh_QFgjVt2IJxXfoMFeuIdzVU4bsGxXpPfMvdCy_O3k1JINGjl83X2T_F-9ors7SMbLReGPiusaCZtEUNWMLv2maSwxf6W0buCd13Tq9jMgL6i1jkWypIcsw8FBbmF0QZF3A1XdKWQtNAtZwXQC0Vc5vO1OB7VE1PwsUraZF_DNlE2vz8CT3VUVZJOleLMiVabL8&v=404"",""vender_id"":""643046"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/71000826322.html"",""click_url"":"""",""spu_id"":""71000826317"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""71000826322\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""5154467801\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37713"",""image_url"":""jfs/t1/180869/28/2751/58495/6094e93aEd44bcd8c/900bacfa55e1acee.jpg"",""sku_id"":""71000826322"",""fuzzy_comment_num"":""5000+"",""jdcs_white_label"":""0"",""shop_id"":""638588"",""good_rate"":""9"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得力齐达利专卖店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""14.2"",""sku_fuzzy_comment_num"":""2000+"",""sku_price"":""14.2"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""5.0\"",\""tob_price\"":14.20},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""5154467801"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS83MTAwMDgyNjMyMi5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVXPalkkdkavo2vEJreYjtYnlEw7d6gw_0QRWFbKAHD56WEZy__VISfe9HwLXCBwYd2KWTzTzdo6gozPUGqw-2ViW1uQncwsdZKEUdG1-cFnu1OnwRVJjI6wscPxdqU3m2QylG-POOlmO__74u9qEEKquYQdDGcj8-3VXN0UrbeItcwg-xvMjEOnyjbEkaeeIqdFkYfB2WGMJ29wa2-WvKziCTOAzk56S3WBVTgxw8GuD3W2aH1-w8Ir92iZbu_0IIKjvKBKe9CjNaTvXfrP7NdIjdq3RrmmWdmkAr7t5c6apyhcTeZt8f7eZajY_BCJ_HKLOa8Z-vCVDRB8nLeSU9-NLmTJHl2OQvpHq-QOYS_93TYzVMRqWDS9m4M2oSCFi_oFOfUo2dtQTiMir74UV4s6dcpqkOwWMibu_MUf_p2grlTybMwCRG1SPN7jDOaePLIiiEH2PnrOXBbKbmD0l9iMvkm_eMJUAywjZsadeKmueXxapf9aQzP9l0FoBFs0G7-JExPfwIRlIDHe_893KL1Gx_LmHxpOgBAA8XGYYaqGJIbuA9mEk15odINieIPpcR9yfNqK_bNdxAujqt3ZJ3PJypukfC8IDJBR0DlNSFnnAWVuTK2yPgw7uBuI3eQRxkTxTucx28B5w9GL-HV3mriBG0KxFegT3RoxJuC4ieajX2NnIJ0ba9b4RfSHVdzvNWGyjZ4n0Ino0x7IIhYwGnXqGddio5tp0IYlgJh1x_umIzVNmh5L4bZkKFdL4YRkINh9a_IuqAZ0XYN-azt6UGk33n2bjQbm_YLR458ssGUKK0yNXcW6HWqGkzMEgQWX39mnE4eOqr2toz4xPEjHQMEcS3vOV5j_ZXH8ZDUi5Y5ef-yursbipAmX61NGbje9iuVGywRaQiCFnbXNaZE8B9E9Ohw92sqmB-ThFB1ygdUnpaYLkWk1sR4TmdcJ9PmhV_uJHFbe8hM06mHeFa-nGENPFaNPBqcsC9rbtgbZ-fKHGj8HJOCarjsn3d0SGoVhNFKcq7JO16EKsG_zKKo0HCgnJbQrrGYGzvxIEkMSl7sZchNhnjdmd0Ig04_JoRVrws&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""蓝色笔芯【5支】"",""period_comment_sale"":[{""num"":""13"",""type"":""3""},{""num"":""13"",""type"":""4""},{""num"":""32"",""type"":""8""},{""num"":""32"",""type"":""6""},{""num"":""13"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""德国LAMY凌美宝珠笔safari狩猎签字笔学生办公商务中性笔定制LOGO 蓝色<font class=\""skcolor_ljg\"">笔芯</font>
【5支】"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUUd91Onf9pC9ZnumnMsqec4JSBy_llVK3GEg8aENJlyhNUmcfq7eVNAJAHu_IFdgZ7JWUZThcYeVF8HCp5CjkC37TxwmlzYLql9oHxbCe-A-I06TyotJN1HtUd6ES70rYZkgogiCPhS55gePRudDlwRHOopRh1wx0-VpwIpNgjdJI3VDEtr-vPN-0VLG0qB1zVMxobqrS028TceG2rARd_bQ-uzgWkC8CQb215oFJlDbsOG5zN-Qm4bSC5nepuTrWXdhGzCBYiuQc7LhkUPkh1KpjVJx5JY0RNO7As2Trn__7C-hr91lXZw-nQbD3ODbbJXEIsh-0Z15NdQnllC5LwmI2-YQdgkmGVL-WdhAS2ftWu5HOIMKoScAyparsPIcQoDoICRQXsJTVI7I6R0OjPs_hs4ueMl2rRhjzLNFNVLKr9pB0MQRQ2qutvzU1bs5My_2XOYxToPKoZaXRXrHBvZ918R8b759l0a2-tAZDkgdeRJxlkag9oTOh1UC9EExjJDPSYTGpx2YlGWp7pq2YfL0JoArnJ7K6CLgGh3GEMyV9dAwMw9BcsDMbNNtz2i55iY7osnKG5VKWn4J4j6Y6yDUIwGqnNZK_vCn8a7947jbVjPoJ5Eoha2UEAGTs2doI0JqO8rgzCjzgHpyKF1R8SL1_fK9cz-cRfxPr7neLAXBYVj8byPe9fXxfA-ngIamKr3OlulhPsRThnMc8aCvBf7oUEgocAR1SeSRMC7F0BiV25eNvN1BXjz6OUfXu1pL9sNb_3x8EZct_2N6JSO3EX3rbtzwHugx6DhJzvfKrbT_ssO-qQ3YHGPEBWdvw1g3zOwMOME0XPxIcYoFqTgacAwKnCT7vF4LIgoS0hJcoGYJZ86SdQk0SujkORCiH7AdXZTDfkGwiT4mLyugz69zYQ3VU1A1JuTltT4WIunnc-Pdnm45htE2Qe58pEWAP9phZn6Kuexb7KG_bAbCCeQ5v8yYEhCkfJmqP3p349yYGlcIH_IzeDoSc7_YEWwgJAwMzZ-kazKym9B0NJecKZKNCIYV-vXmVVv_lRD71sNXwLxzRl_GIqqLZGvqYIsWEE9TnmGPe1RgDqGt7ZYvE6tufFlvdjGPOBMyYhj4743CD4SSLEFjaQ8DEzm6U2khYUUvWxKEwlYe4SzdViGdSPyqPUk&v=404"",""vender_id"":""17764955"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10108036549129.html"",""click_url"":"""",""spu_id"":""10108036504004"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10108036549129\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""8567622271576074648\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""1"",""click_url_redirected"":""0"",""sku_cid3"":""37710"",""image_url"":""jfs/t1/241229/23/12493/22667/667fb37eFd92f30d9/166f176e2802c6df.png"",""sku_id"":""10108036549129"",""fuzzy_comment_num"":""13"",""jdcs_white_label"":""0"",""shop_id"":""16169149"",""good_rate"":""15"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""有趣的钢笔小店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""55"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""55"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""\"",\""tob_price\"":55.0},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""8567622271576074648"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMTA4MDM2NTQ5MTI5Lmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUUd91Onf9pC9ZnumnMsqec4JSBy_llVK3GEg8aENJlyhNUmcfq7eVNAJAHu_IFdgZ7JWUZThcYeVF8HCp5CjkC37TxwmlzYLql9oHxbCe-A-I06TyotJN1HtUd6ES70rYZkgogiCPhS55gePRudDlwRHOopRh1wx0-VpwIpNgjdJI3VDEtr-vPN-0VLG0qB1zX4hQ9bfde4OlVUkZJZwlsdMi6xu0jDh87R7_vA3oV2TUbD1id325fSR8x-1eCIaqI4Q81fP_GXHzh92tEcB6CXecuDgVVi5LAvzi0qD0_dGN4OToNdmQFVf0j62tfOU0bybcMoiD2udrChZEhlMyeEdcZO9d3u3kH2cNLQWy-2RA8i_HOYSXxX4CyjOckoBcEdqFqJLQymIf60L-ikXk2Nf7M68enmbNR8JodtaDqMebJb7M5MyQGBToGO2WvnEzhj5MAjClHyWj3thcwcYFjfnZEe_aIwRq-sosrVLSgy2bqvy-2qsevTmBYjw5GsL5pmab3JRPT933Ux0dt_w7kF1KXn6-chuSnylfspNxuMREgD1yElzmhmXecxiB6quXmLRRn8R_-5pIUCfMbZ9L_Yf0EsfG-U84BeucZuUI1wU_9vo1J3EUvH2DlFNP2sD72773dJEPUybO-6gIvpB_mENR3MOlKOtRjX_2dYowhN_4MQAvOqWK1cq65pk1r90ogbrzXAaEyRO1N4nkuDrhrNFdW9S2f7tFf2qd9WqLUQgUA9KpYzG_6V9IAhZP9HY_jYWR3_6mP0EftDQG0Rhxj3jERNgVcLvuDVnl2Bxf2niqaI0ZmmgLG-9D02FiAsA6oGNZIwYL0YkdsBy3XUqpJAQ7cnPNtVA49sIUnP6mzmboVrMugF0-wsUJhUDri58r1dUCJ1yA2PEoZOwH3JYgxqrf-n6D2reDFLkR1-iWwnTcVV4HZWrIuuhB3TTkAmdPUx5Pslvs6bMMtHMioVCJVTLRE4JDb9bh5pgKxtABqA98jNaeyJzGZTo1bebp54VYGknqFH4UWYyufI-R82hpuzNiJduspDjdt2EOMNg5ITqUWbfXFqSUz7CuU6WDSzw2PIFCkRNAT6KimW8wVijdjImz7Mv206YPkKpju2CassPkHcAnU7EY2UR8XHFcDcPIA&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""[主图款]金属银色+珠光白色+灰色 (加混色"",""period_comment_sale"":[{""num"":""7"",""type"":""3""},{""num"":""6"",""type"":""4""},{""num"":""55"",""type"":""8""},{""num"":""66"",""type"":""6""},{""num"":""49"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""百乐日本juice果汁笔ins日系限量版彩笔高颜值冰淇淋按动中性笔 [主图款]金属银色+珠光白色+灰色 (加混色 0.5mm"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXA1rdSrruQu3w--a-ooeUITsIqb8QZvQn7CANrsbarIq-nPY4_-cRlJowcH5O4nRzIqYK53JwwQLykiZiyr0IY_V60sT7f_P74tUaIJxajmnKQB0u-sqHYO9-X7EgTj6Jh0TsJTi8ElvW6PB4HvdlK4lfVP1L7U38Cx0LSrwJAG1_nplWgobLxd1Z3wfI55MUiXswJXk7f3DPoRTwluDMqdqSgIzFuP7QFltXghOjxDI-Mre2aFSvVwPLQjsctcUwh_RallJBiNYvpiTX6PLVqv7nJGbClVnuApXw2N9jK7LcS8uBjI8Hh2PC7Wkf95KpBJ8RYtqGE2u_LqOQRNmoybIXE3LHwUjAyrrTHE6V2lgwBl-VpCv5JbaDcb-KoHRRDowCrg585bpO9dk5-gVdQ13YesaUoUje-Ud_ZHR_i1IA-fA7R2_9PXFE6oD1QtA4YNB4_xozaujqtdNNpNpLQIvxl76NLvZU26TgsrjtaE5mKOkwkHu-V172u3tDOlLhW8P4iD-32YgxVgs4IJUa5QaIhFU19HSO_khJWgQytpEIbVwO5_CDYJuDBj2MPSsSEVco1HeGJBIo6iIFTltKtAzvOXogz2l682UzN9tTf2yAhGBcYXIxoRzV6mjhwHd_YPFB5Or-izsRv4cLoDEsfPMGySOrbFEoJvbUSz_HczzJuxDmgk6OJmqac7rISv9kBPUDY9yFdkRNJDz-WyDc0f8wNChOjxgK2rJYR5zGXycAUeTlMpY8STyxQYwgmeyJDShnwpz32-RPFKgIeJ9D9iNZ9VZs4nNGzIBmjoWkz6xEBLO4F1T0VQXDScSGYp54z-JNSrvWMqq2zdr_c_4QZ5RKEHarnDzV7jHQmODXhRj_NCfL7yv5fVtm8Oa1skIEe2-g49BgNJ27voZZ8IcGr3gi_X9HwzczeDhQBuDTZKkC2lRxM8x9KEB0hIIOpvPrwIplqxIlFSe9OuKDIdf4VwAG_jX7nhirQxCkQYWeHlZpTtTbqm5c0Zf2cD_oFmQnsSMkKwe9PfBQDuc6Bju0sg4bI6jipfbrNR1rhPkbpT0EPNGp6SgF5U7CAlpCIRNp6uTFg2Tek5UiHkL2EaLrB&v=404"",""vender_id"":""15739384"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10097609863763.html"",""click_url"":"""",""spu_id"":""10097609863763"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10097609863763\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""19070830713\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/134750/14/34605/186476/65e81990F8d9b3816/acc053adda2fb5b9.jpg"",""sku_id"":""10097609863763"",""fuzzy_comment_num"":""49"",""jdcs_white_label"":""0"",""shop_id"":""14408603"",""good_rate"":""12"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""三好学生优选文具店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""28.69"",""sku_fuzzy_comment_num"":""34"",""sku_price"":""28.69"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""5.0\"",\""tob_price\"":28.690},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""19070830713"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDA5NzYwOTg2Mzc2My5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXA1rdSrruQu3w--a-ooeUITsIqb8QZvQn7CANrsbarIq-nPY4_-cRlJowcH5O4nRzIqYK53JwwQLykiZiyr0IY_V60sT7f_P74tUaIJxajmnKQB0u-sqHYO9-X7EgTj6Jh0TsJTi8ElvW6PB4HvdlK4lfVP1L7U38Cx0LSrwJAG1_nplWgobLxd1Z3wfI55MVCsRi-7EKo-stDmv80ixdPAPwBK0Oflt5Lv0pz_v7cNutjQih3qS5EOW6lmHavD7sMWY62S7-PesAvN9bdYctVxHmAgXqYzUWBm0UkzYVuIpgNbgmbhtzEmDgXSSaqiKuwDTKd1Alw6xSgjtKON6hkxKw2PZcHdiyM_gHNkzpwieDfUSsCzYMpWQzxs9WDGZUF-SHYLTRAQDgW_abXrXEThKPgaIzib_vAH_9DwZTkMzfjdElJOsquA5UFbJ79Vr5p5GkzMNwx0GYnvq-zIfFpk3FEGOV8133qjIxZrBp7Ta0RVoBpUACF6hDVa2Six5S1NW6d7EEz8PVSdYdeesvLoOdCmMd6sPFRB3JwmgXs-AnsrNvIQD7qZo6d9JtTuZ0u045lozIwFsNmfHlWY9RoRhw-MEtabBdaomgOrtp51nFHUgjGnRoo6JipnUSlkQARROCWTexxl_237uhcVNqj7tXptZzsewrQ_VQhO8EMa1nxoWUu03RW8dYwWC0FN14vOwlcwrCABvi9WupgIe6bF5ijO344B0u4LdNtjtaCc5g7i9K8nkfmeyKDNKdXDeZVn4tPA_YsDNj3QsKWC8GTPVw0JJj416RbQxtqr1cc1Z4ErGMJqJ6I1u9cp_SkscZwKy3qJbzlh9JvBMhg0tHQTsQguIVsBf-yq7wh7pTzqj0nRT1DpezWAFpmtK55kOWOl0Tb-03Iiz_rJFy0cySFQn-iDqkfFfjA44CVScPwRneyuskwzJlZNZZInbKv9frIpGjek2APFuixQMnqYYhUm10PjjwyTdDZE0_eU5lycJm5KNdKy1OinTx_u1YP_WYiQBn6SLXpWha2UH8Yz4VqosNrDPFTmrzEijUYpHmK8sFsyZwxaHj7xj9D-hvW-S4&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""10支组合款套装9"",""period_comment_sale"":[{""num"":""74"",""type"":""3""},{""num"":""3"",""type"":""4""},{""num"":""12"",""type"":""8""},{""num"":""100+"",""type"":""6""},{""num"":""100+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""BANHE坂禾中性笔速干<font class=\""skcolor_ljg\"">笔芯</font>
学生考试黑色水笔套装0.5mm签字笔刷题笔办公用黑笔专用大容量顺滑刷题笔 10支组合款套装9"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXT_bnVuCQpHfTtw2koRIafrS7UkKlKl-MwA-u3rxFlGKuCef9EPfAPuu3K_lwAYbe_XsLV2XIuRqJC1zKOUIR-cCDE8eiVoCWYgSLl4VJuiPJ27QHy-iOC3hBozrods6vCvBZMJbcCobc9Es6Mn3KOgZgntJQMHxMBba_5d0lyxZKpGbV_NelyrYbaWwqtfpn8i5MT5J5rIr01tz9FeCi5g9ep9UqX9r0gykKejF2kHoAvXFwiTirpKr3Kw8y1EY3o3B_ofi8iUGuaf_7w3Tyahb3D8ikOJlmQTwOKL9qtVnvxHJD7pAXCfB7JANIZnWCtqRuCD-kn1xDce8uQe4BQJKSt9Z8lM6v5IJuSlue0BmBJ1tNQnsvClP_JihNUjcjB0nZ20f-WUtz0dIeutswEbWWaxDvhrIeFKOtMvnC49J7khHCQnpIniL2mx_6kY3sPSDhUW724SfI0Cz1kE3XkWPBHVL5jHbLkOfwFKhh4MimwMb1ObhXQiZuagl8JIUQ7AbT3Bxrv3MIcchgNpqRPDtleNx8FdWSnM8BFHSfGgEh1VDiwUVBrMmtxNdsVQlIHeVL0DngO1toMPyn4gkpj3Q8BvTme_HYT8qAELjWZ4vzahAX6st0tChgJf93r8TrhxqzfdjbzzG6iIKe7bEKg-kYxAC98UvGyo8gHIUVeDmzp5FrVJBsUFE4yEixFJm1zPRGnzM87uDUORoZ4C5ueJ4eOtXIYWkefmOeHJ_OiUpESMDuQ5V_J2PNHW-NUxzJAQS0TFX5qhAcaSjWuKgqOwnE0FV5KeKYyeuGDlv8zhYEmjiJqrogaUvlDxJnV_0dFFwscBF3mlskOfjPMNkytXD-1BZDwc64mBTlujwuKCEwihULD41L7I4GEi66Fa0xX9xNnTIW0yM52clv9Vg6qXMTZrGyEoRZDZ5XKqLjRtBCEfiVqiDQekf2fI0KoQQq_PILhulzY6bvkaUF9s309GRlcZUv6T8CCxLTL__5cF3GQj-lv2aOkgLRU3l5J35024kQSt2lUsGIHeKlMb0JiiTVq6BT8j5XZAa3yashcBzG4KYI7-LQQtdvf-LeoB62kYXUrlHlisGQMEBsXbZdOqgoAUbeJS0fnrK1Dg7pYVfXG1Ck9t-DPrIFKhyx-oFOl7Q2BoOpQxPvCjW0rXTKH4p0bPl9pVGMOnjH4fyG-jJ2LFr_dmdNCXltKaUeJsQM&v=404"",""vender_id"":""16036081"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10098889337927.html"",""click_url"":"""",""spu_id"":""10098889337919"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""134217728\"",\""campaign_type\"":\""61\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10098889337927\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""34652307986\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/150832/30/40556/68321/65fbe53dFecff2b19/a7eaf47f11d39e7c.jpg"",""sku_id"":""10098889337927"",""fuzzy_comment_num"":""100+"",""jdcs_white_label"":""0"",""shop_id"":""14740494"",""good_rate"":""43"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""坂禾官方旗舰店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""25.8"",""sku_fuzzy_comment_num"":""5"",""sku_price"":""25.8"",""ads_info"":""{\""business_type\"":\""134217728\"",\""campaign_type\"":\""61\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":25.80},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""34652307986"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDA5ODg4OTMzNzkyNy5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXT_bnVuCQpHfTtw2koRIafrS7UkKlKl-MwA-u3rxFlGKuCef9EPfAPuu3K_lwAYbe_XsLV2XIuRqJC1zKOUIR-cCDE8eiVoCWYgSLl4VJuiPJ27QHy-iOC3hBozrods6vCvBZMJbcCobc9Es6Mn3KOgZgntJQMHxMBba_5d0lyxZKpGbV_NelyrYbaWwqtfpnr2M3dvoqSMy1nH5lGYEjDj0MvebvP6Jag6jYqwvEHvTOEhmLZDwRMr9Of6w4vU8lf9cwXPLR6v-RSZiee_dmD5-6vtLs67wafAQi0bOpYfLkF-NeJGsEFXOjSfBfuB33HoWfvmuOBA730gP6aURhguHqhlTWGxWrpwRzCMqxheiWl_zI65PnNrj9_CqesXA00oGarKZC8kB60a1uRLHjYLDw-x_PzPCDJctVXE6pxeiktVz4KThY1mvfuUkrHeNIwKPGyLFdD8SYPjHxK6DcLKUNMbjyZQabaCQjIoxr5rUfgp4-Q9ElcfhwVkvlZTvYS0Y1mtv5Q46kH6bkSQHg9LE40khEWO2giuuiarRc6KgaCAsIKe60SnCJsbrn5PMUQd6b9ofdxdfEZajI51JhSKmU3dr4H8FxJyRrdOslzi2JeUb8MvF6ns1fqOUeO-aOCEHZHROt2EAxxOHBUi1ZuEKSlDO0HDrIOevZkj7-FWy1RQ0iSYrKYbXNQ2be3QRLW5TRzPTA74R5yhVRbw6v_lhyuGZUt9A3R8asm0hiU3OApiGPooG-QT1GNTzSvFRHu0Z0X_ksOkzqJq3WC_zvPUxrtE4YtjlSQ092_aBok1f8Lzn1o30i83JeX5e72z0pCejJkh8FmagwkNhMFrlgeqndeKpW0k_-_AwkjUZCRpdarhJKhhY0WqKOHpLidq9ZW2XGkhotkGNEdZF-5-pX81HWziLIksNgWrtmBAyemNmUuV-ocDI3mhbEJ5-fboljFUba55bzyQsuxJgdJQC7NTwk0_p8Qydk9y29hAeIapURz0hHeH0o9D07zfB8YAqxcGUBWKGdl0kWaBvHKnJfKVeQC-mBgediYWbfUOqP0Q95LIY2hRrNDeG4yS8nwxlMYPY7jEsnOt_TQbkuioB2ADjzg-aMqKa1E-keBsN36UbdjvoTHWzCrWAF-xOKuA-bv1EUFXdNgg51wTg_KDdjpGaV8Vq__Oaj_KsGbVGsjqg&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""【拔帽 全针管】20支黑色"",""period_comment_sale"":[{""num"":""5000+"",""type"":""3""},{""num"":""2000+"",""type"":""4""},{""num"":""100+"",""type"":""8""},{""num"":""500+"",""type"":""6""},{""num"":""1万+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""得力连中三元中性<font class=\""skcolor_ljg\"">笔芯</font>
0.5mm碳素<font class=\""skcolor_ljg\"">笔芯</font>
快干油墨水<font class=\""skcolor_ljg\"">笔芯</font>
签字<font class=\""skcolor_ljg\"">笔芯</font>
学生考试用<font class=\""skcolor_ljg\"">笔芯</font>
刷题水性<font class=\""skcolor_ljg\"">笔芯</font>
【拔帽 全针管】20支黑色"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWsqS4bZtcu1yMTlFkbC-_rauQVSsFwM3zmJI0rfLtD8j0-pftdfA1FKXVgUeY8aD7yLxkB--zTweBjMeFOT7vt_rLnPVeAwp7TpvlDmhyqXCh1WDZ68EUmFN-EEbHwNZHm_bNFv00GcHSGUsVWuEhgZVGh7DKA12mXeSywNWVI6QcakOlRApQVRNPwMtuphOwuivQBeRkHUD_N0xlndSMnuE8i7Sm1BDgC6UHlIPybp-loKZS7xNu5QT4oZdhVxAytN16MbVn4hlw1DwiK8TNWehFgBFjs6-lMJJ3q34zRViDtdmyX4ZYY1RStdMF2XnHF42cywtXyA89i7PkjzpcVQLAkApjLic-IvFaXB1swdSpWC58anu4y8LLE_lQio_OrpmMdqeqgasGKfdBCDOFLNfkUVmL9AmneJmrgOQkfoQm8ekKdArROAzIlErlLmrTS-z6CrdIEQ0LauNQkzV1Pq4kmCE7Rx9bIKJ-NixKGEd5k_V_QZT-tNu4WLSJvz_D4uPBS3KgAq-auJ52oz24XCdHxccBU_hCq_By1BRHqVYr0mj-Je7CBOa9TMhmR7RxY0TpgBtk3fTinSZ0PA_CdVtlQqkqJEvrzvaeaqXsY4AIh8-Yt04IHJgPfXCwjkpa7XdkBlILFMd3ZnNQJCEfawilC4MBrxJaFMAIJaE3hGPtz7XfuTe5T29YqDrQtcHCeCeZ7tDn022SCcfmbhnqiaE1LnRgaAE5ENQw9_8smuyI7txccl4zg1hht4OgSElgXqG9TD29AwPGh12pFf9mB138OoIl2UE9uI56eWx-sZ9G-5ZjuOLTOeTg_Rmmj6-q5kCyc2Mav4cHT-vXekEUCy0p7Xq7l7UYx-qYMMQfv2krCFfNqUfnh6YC1Uz2eS6egIENSYqNyPlRqon29MBUNnqfIPykFtNdWEstJl_nud9wDruFegZpQZEcQtekCoUre6XpI7PL1Hq-qt3gJePthQSsrgqKePLgXcO_Jk5vtSrYImH6BJ7kupqmlID7u3xKWPxG0lcSTu0Pvqe5MxALIUYAdhwMkstAtquxmMxJUQ7F_k3qsKxtKJI1mhpvTgIHghuol3W6kLlA4uDXQhiNT&v=404"",""vender_id"":""643046"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10030615812356.html"",""click_url"":"""",""spu_id"":""10030615812356"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10030615812356\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""5154467059\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37713"",""image_url"":""jfs/t1/187824/36/36105/127401/64dc3113F715b7a3e/7995a3baf805a872.jpg"",""sku_id"":""10030615812356"",""fuzzy_comment_num"":""1万+"",""jdcs_white_label"":""0"",""shop_id"":""638588"",""good_rate"":""5"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得力齐达利专卖店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""10.9"",""sku_fuzzy_comment_num"":""2000+"",""sku_price"":""10.9"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":10.90},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""5154467059"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDAzMDYxNTgxMjM1Ni5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWsqS4bZtcu1yMTlFkbC-_rauQVSsFwM3zmJI0rfLtD8j0-pftdfA1FKXVgUeY8aD7yLxkB--zTweBjMeFOT7vt_rLnPVeAwp7TpvlDmhyqXCh1WDZ68EUmFN-EEbHwNZHm_bNFv00GcHSGUsVWuEhgZVGh7DKA12mXeSywNWVI6QcakOlRApQVRNPwMtuphOwuivQBeRkHUD_N0xlndSMnKZ3RMyVMvZEZnpGFfhHjCFbV8UQw0zSlGJkaKSmkcygXCjjxqpdVNnXhPq5_9rOXcgNRNivUW0jO1ObLmSmJ5c1dO58UroHayGVReMKYPa89BsKH3R33T6L_eTaCQ_bZzreO94eEbnCfn7-VU0SJOUG23Iw7AD46mQPHrNnHL38bfwtFOh4NbzP1-owoSqQ1ySNBG56kJdtGO79tYvVksdaB8RRdIMIhCUqiRhEf-KUjOtbrAUneym0BGBhvyZFNuIMpyJQU77T-f8oWZhZYdmVLLytxzsSfs1bY0u7xV4FQuqSOcr2nhaWL0GssX_OgsKYrJLcOun1nlkUMptEQRgmv9G_r3JInUWKfNzxdXC_ibWC6CM6fKm8Pn2OAxBVTQrSTfbAGcAMybmFxGYIpvOEJxUezeuMBEL5Ax-KBDoVNpOtdJaKzvbzcx-p4Pe1cb_76x52u7z1g93K6KBS8C6oU7DsdaDXodFL_Ta5FzDijKp8-1-C5UMvb3QjKTKlv4wPWC_NijZ-9u8uXjh0sjLoFjgsxrAMLUSrqP84SKeqklQo3-WTuUMe8uTa9qNU4c_15JQRtsrV4vxKGyCykHQsWkanKObBGK08vjUYjlpElVHwIKBrr6-6omsml5dDxp-EV_yDYp1c5RoSOKwMtzSV6oB5Q1SPAFAgZoYbsUno18JO_QAj4RxC9A-IBoiK4eqXDo2vJo7tDgZtbaJfx2yB1PvZg4sah9ZfiZ2vv9E1Ua_hyuhJ7XFpREEDIE0WIWf1z2C_iRK3FD2EFkwK1Dij-CrLI6PS9qUWuaaAuURCJ1yZ8mCjk_y_e-jiPvVp5I57FhhL7PFKH_u_N_btmyBD9IQdC3L7qpd8z-pBcN48iEElcmEASQ6tAVsG4gCKp&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""12支黑笔"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""6"",""type"":""3""},{""num"":""6"",""type"":""4""},{""num"":""60"",""type"":""8""},{""num"":""60"",""type"":""6""},{""num"":""37"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""钻石笔巨能写笔中性笔圆珠笔签字笔学生用水笔黑色<font class=\""skcolor_ljg\"">笔芯</font>
专用考试碳素笔学生黑笔<font class=\""skcolor_ljg\"">笔芯</font>
水性笔细笔头 12支黑笔 0.38mm"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXJnh4VdnAh_aU-tB0SkziV-v_D7dllqFdvYVL_s8RXFsKVX9nf-Xl2FktxANyjiOJRTw1tZGv7LW7_ZGy2XK9b_iauPzbyqpJwTROlZnJMrisgJuO52dT_6o3snRJ8QEJ25l_vUXY7hmQp_r-5sLu5fk5nlnUgPmNGK1kZGxAW1f8U1Xf4A3fLWFSd-UXy-RLVd2IdAz-hLmPR8KSPivxpPY7uLHOSKckLmRy9TDc8f3R7ocl6LyByCaIUvRr8TiQ3gN_QTOZc9DB1d53uq0m7662Gt3rhjHbpW6Yi6J7AXfWk6Q6F3dXKCSzkCtkWLCjb-0yHQl3zXqbYs3SssPN95hZ-Rt09LqjDkd3qGSGvU4V3IuGjg2yEa4uhwzeMc3YdavHiLXj9qwn297IpINbRp0FzeLo1ibklqP7GiBqxFS2316o0ztd2c3UKScfP3kap--9PT82dfnor_5OwYiLBJNTf3lMA3xAA3YCAJfRIZT9PzXoSzalTnKawgvT6QKV_Fki8ANBGAsSgikzcsgzw-vf8eFNPoatcTzZU3Nvr93xaMPviZeNjUIRUhvglRiihjroPmhZidK5xezzoJ3Osl3HGlPcrb0wL_2ZyDb-Fvvcw6J6gCombdnK8j4VrQZPwzfyHa7B2zCERK0dwOcYe_-fMNZggVXW7lBHyOdYRdQQTqGMwmQKp3U49Kp_iYil4LAw8XqOp2Dyul0wVaM8fV3uQH41Lv1Am2kkjxLs4V0RleR0sID3wQLV-8dRC5vyWrfmTGc8LSLuLfNt5Dasdw14fiGpWM-wFKSNKcIwMyMdpBw5zjKQ4TjZsWhZDWqpczzkANeaPIk0KjEAJYg_qg9aQFLjOG2RoCEsWKjaGKxYhhfFL0uP2nH5cS9fUpy3eBWfD_M3uBVL7LZWMdhHlHNqPvBzC1e26uy6JdfA8M6iky8ktuxnik7au6N3BPP8L3H7z0ADF1CXklV8CyK3opa1UYuGmzJ9ez3NhQxiQQ6ZAr3RxTMdMvN5hlbIrXJQaaPA0zRqhU_Nd40PzlYTiOh9fNe9DkbZYcVDduX1G-VBhE7RqNhuTjftF-6cCyHs&v=404"",""vender_id"":""17479170"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10109182744069.html"",""click_url"":"""",""spu_id"":""10109182744069"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10109182744069\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""28920358844\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37702"",""image_url"":""jfs/t1/96323/9/43178/100571/65d0b356F74669553/2431333b2ef5d5f9.jpg"",""sku_id"":""10109182744069"",""fuzzy_comment_num"":""37"",""jdcs_white_label"":""0"",""shop_id"":""15996760"",""good_rate"":""11"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""凡囿办公用品专营店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""11.9"",""sku_fuzzy_comment_num"":""15"",""sku_price"":""11.9"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":11.90},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""28920358844"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDEwOTE4Mjc0NDA2OS5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXJnh4VdnAh_aU-tB0SkziV-v_D7dllqFdvYVL_s8RXFsKVX9nf-Xl2FktxANyjiOJRTw1tZGv7LW7_ZGy2XK9b_iauPzbyqpJwTROlZnJMrisgJuO52dT_6o3snRJ8QEJ25l_vUXY7hmQp_r-5sLu5fk5nlnUgPmNGK1kZGxAW1W2QuAQbuEabd3oTWUywWbZRPTE_BdRNloxngS6Ri3s3f3IxGe0ALCIe_PHlBeX_UbXcIIiDXa_kKUzX9DA3W-KHrHQs5Ie85Tk3UuN8nDhqBdg7Mw8fvm7cgVZSbvDUYp9wgnHi6ZWqIQfMXr6HtcQc2J3i64P21ZN190-mXmh7LYLKi_aYRiNqz4R25yvuSPYcuqjvOYUm7EtOzvs41dCwLG_QskjLppbc4rl8WBgubii0o1McVOAnPr4cjEYuudSAXrMYl0yvFamipgrMWEtcXk409vuyuKBtVCYNyw_muZ-thvrfXpEWO-9czoyOAa9lO81k10t5BjpluEQYb7x2_aii4KWk_pGh2tPwBO_3NFzt7AGn5cvTlqTgTs2E7Cv1G31dS1DYVq6wM2GLGZ_b3prjSKkte7r0KvdtgvFNCXubRdIx_R7wamKs1ZQD2YvlT-CWRuB35qw1LOiiW8tivYQZL2mcwMh6YEILsjAgQE9HmuK7BoOC8G6_uKB_97H1gwt6c-OQmpRtTTD9EEWTPSV89c4WqGBqx5hX3JP3n01sV4MjM7ee3dYL2BHK__GQ6NiQAJgONwwl4CRfncvbSLXsz47Y6263-OMY-W7NjtEPuUQkp6mrNWSzkJls6sW5FKo48dkr8eBqXzMPi-gRq3RJQAAYr5hicYGrcRn9s9uIwGf5DovymxqKzbpxidu_Sjj5bmWGds9SIXBYIPyaYqeAzveft76_fCYlUYNnyHVc8Xq3JU8EIOiRQcL4uK4VA0UyDavk4VLHZm5facjH0bwizPN2fCQYsfUM0hz5T9GK5SCD6uBAHP5Fxcy6u_aCnAuxJhtR1iDNEdN_ODbnAtVA_8Kl477ULH6T99tCfTeXTEi0gKI5rDO0KSpolbds5v3lnjoW4FBUfR8mYcY&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""12支黑笔"",""period_comment_sale"":[{""num"":""5"",""type"":""3""},{""num"":""3"",""type"":""4""},{""num"":""3"",""type"":""8""},{""num"":""5"",""type"":""6""},{""num"":""5"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""钻石笔巨能写笔中性笔圆珠笔签字笔学生用水笔黑色<font class=\""skcolor_ljg\"">笔芯</font>
专用考试碳 12支黑笔 0.38mm"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWknmTv1pkgsvh1lj7zaCSstlbns1He0xDCkjon-DfrJXXKkfIy7knNGkb7Ql_nlqAmvjF0VHbIsDF_BrjkBS81TQQAKiCaLoTlzKeDKBs_E0T0os1r7ejor1SmN9EbKIOygE3Z_P-Y0KLsFKT2PFjKf0piWa04xH7uIWMHu0WVZkocNOclypO1BC80AVYT4-PRcgDzRu1E0tUKpzjUinIWniCohw67GpeHbRBEYR2YT1hq2KJOHH_Ctz5tTsBxfKlc3WLtn4FF4aDSvZayh24bZiCyEsWpetkj93AoM4Lhilhnn5pbDQ3wuPDMQoGYAdkhnnXcYoig4GJ6z-A5MIp1OWlMb513EYPApegE6TSz2UeFwCywJX7IbEsZbPF9Vm2eQNwWngleBoBh6wGEB4-YZghUtDmeOw6YXNyehnglW7-szIeeZOhfyFX0U6N-XtbIf-Jyccw5JeK1ctM8Si-vMYRpY1EI7MhiJoqYmIlTiKQrjx24Tl_-ev02ci8vk3UyrweT0epA35CnrEqhGkqPG7CmCDtZJf85PBigGOUMt4VzBjhO02ApFHu6mgrXS63sOVEjocSWAa4o2H4QEHChuEHWD5-qNs7VXAgtTCL4nV4vtRTzM8At2yvpLIqqigbDTCxE122OnXgSYZEzLx4H2L7Um6cffwSWqB5U9SwhfQnWuR_YpiAh1sHcDaorHSyCgDKHKxnUo8rC8kRNCpw7SJqw0qGrAkrb37aReb_RwQ2Jl09y2wgmdvLm4XNRx4acLQJbnBtLXZ75QXn0kzxUlzQT4XJBVeRB1nnuHWiZ_MJE6nRYWdT5o2_HsZkAzBU_Y8YPMnolg_5S5cRIVck8BIraHbKvmjAztfzOuJC544RpfrQC3qFVKCKSpM5vDhrOPpdLnmNbaIV6TDNM_CPlvJe5NN3PuUsFOhkvan8FIRtdGFhEQL2uhBEQJ5Lf21EFnegRoOBpDNJZF1ISb6gy-VQ_qgJSxQFOWsMhL9jMSxgI0SN1ZArFr7CcdPgmPDjQfuXWh8383RlXVYAseMiBvmvAhDchnVTRVxyAoiPRsll1-jVN28WzRQgktDuh-6aotdDchY8GjMPxsXpqeEn6&v=404"",""vender_id"":""15120689"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10106611371633.html"",""click_url"":"""",""spu_id"":""10106611371633"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10106611371633\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""29090069937\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37702"",""image_url"":""jfs/t1/242617/25/10528/100996/666c254dFa3fefae5/38abf148548b7bde.jpg"",""sku_id"":""10106611371633"",""fuzzy_comment_num"":""5"",""jdcs_white_label"":""0"",""shop_id"":""13823077"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""栗素敏办公文具专营店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""11.3"",""sku_fuzzy_comment_num"":""4"",""sku_price"":""11.3"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":11.30},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""29090069937"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDEwNjYxMTM3MTYzMy5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWknmTv1pkgsvh1lj7zaCSstlbns1He0xDCkjon-DfrJXXKkfIy7knNGkb7Ql_nlqAmvjF0VHbIsDF_BrjkBS81TQQAKiCaLoTlzKeDKBs_E0T0os1r7ejor1SmN9EbKIOygE3Z_P-Y0KLsFKT2PFjKf0piWa04xH7uIWMHu0WVZkocNOclypO1BC80AVYT4-PakpqYruIzYbW1W44D0kaJTM579vbkbxv6bqhmnbROI0NTn9CkB3y_iDznxNMLsezfXD3iimo3mpdcrvrs7YP-AFAFDzeFx-dwW-GQUbIlqBGAKcy88o3cuVMCkOX0976Baus82waJPqksYIjxWnqd6BpUDKWoZa08mMdGESB1dD2zmc1wjDDPimdCz35PthJKyRb6L-U0SzAp17GiW2nSsgnfJQI2VCg4EvDesLGymy6P__du42HS8ipaHNrOyj30E1zhuMnlVsXr02n6NOQmJ-WGEsIc7Hep_oAWvxuwgU0NTKgI1ZxJJrHkk_y5d-TT2iqSwe6j0QIeDbAMloRcac9XkhTXSZN965jCXigwHZ01MNyuTje_g-ieLxai418IwRclXyY015NIeshdyFy8NNE_6hocxd1lSyua-dNUVxcyCpxa-uJH1_xhnLnnYCXkPTrCosfMBdQmi0bnCBaGk54_sICsh4xlDHFPLuElKXkxWlZNpNIUXoPSvVIREUvesDbYaS3F3PgzGRZNax1kO_h7RBhwHc9mlAHNcJXizx-GQCMcx6p9R0Qo2dMx9uSr3Hv9kduE7RE6Dtuq9mmrC8wvBlJc59WIoJ4amYGkdSOMDXB4s4svGajRhXLeThUI4suNVQeD92vcUdwITm65X6Rt9jKR7QvWiamYlbT4srx0fBb0Ur99w-S0LsK9E6KGECCCxM3-tnyFxGEGsyiJdeMolNydr4DLC_MSHhIjXG9ue5gpLI3DglnViK1EHyu-W7D4JRRZ4oUEnydrhRkCF0y9Dx3o-DSfIHOyZAFob93BKJPM-uEpJaFW3MeHsRkuSm7Cwd7bQIr-ZViP9--IQP8SgKhPnkiiUzx-3HbBn3tsKL3V47TIVCTD1TVW72I&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""黑 0.25mm 1笔3芯"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""0"",""type"":""3""},{""num"":""0"",""type"":""4""},{""num"":""7"",""type"":""8""},{""num"":""7"",""type"":""6""},{""num"":""6"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""0.25mm笔金万年极细中性<font class=\""skcolor_ljg\"">笔芯</font>
黑笔细头红笔财务笔会计记账专用笔超细签字水笔0.4针管笔0.28细0 黑 0.25mm 1笔3芯 其他/other x 其他/other"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUV2Ez6VHm2xQg5v-NW2SDn4FSDoNGK1QBWJw0u9AJ6gyUR21StepQ6f-3MhU8NFO99Eb5fESKN9faJIjBJ_ZyWW4EkuNitpuFi72h3NDVfRqu4Roh_jpdFhSnLq1vCLx7TZI2z4TTarn0MGS_BIf7jZRafWzhM2xDE0nLgIQleVbrFDBeuGV0cUkrk1CpIB9X6xZqA9soMHTX8ax0F03elt2ff_-p6hA44OSyehZeZuSshW_TwytKpRdwbuTt2uXOnoF9VmIItbvHCccpyLXulixInGAdJn2lGph4JqTrK9wG0NSvrRuH7y_epoCLQz2MZv_e6ZYuvUehPOz2qFv6Azml_wZiPfLhuQJb94imQkQ9Cu0ipxkvXUtUO_TRgg0xGgVDFdq_sD5BSJLYBLlseMwDxA86gBK6mlQr9VrxCwV12WCKCuLd8ZBBrcts6au3YuzG8dBo3DRUMmRVAow8UoQA2tCLKe5e8KufdFjIxjOftnS-2W67s3XPX0oYz4hTw0qHnNyf-wEr95m3o6oRKKVxvwWtAXjDMgJTs47V999hkjxuVrZO4lLDyeH-qQRZSpCRiA_1LulVy_4fB3DvXWlyhTz3ErZTAfA5oqcNiR6x2sjL7UN9B7KgUPBlFNs1QYmxToQVVeueXDNYE5FtDuz8FPgFuMg-vyfCddGBdzqnHbbXSKu5PIOjyJ6vRG5jKwAWfn6PETtYO7BcmiPIa9UUz1WiTfKmnW4XTztXF5qpnsvyXXSJ6B6mQ7FGgLpGj-_Npw7oZroZP-7juqehd7MdkcraPCtqc9MwC65W43H8PrC-o0cUVKwEABRZvgVnSiQ822VGjXNKNw3-PYpJEb9UQ6hnTkwbaGGulHxW-YbY6l9wfe2_wPF3WtbibgyNea1b6TO2hm73IrKe94iD4L7CSG4fvnvzh35FehKGLOPMIowgwziZhyn_k9weuxGt2X_VhwAfyhWsLbePYnFig4BdYKB7RZQzJLQ33oxooAM_xd3y5KRhI7dDR_-FLH-KGxBQwiCk2yLuM_LxbHMGQaqkLK7geFuWmhcOcjH1YGMCufQ-BrKmqjg2WCiWc43AhgK8PDhtEyP3MxW0IwzBCUpPKlC-UwuPVQIdDyni8DPAlXJAdO_GyrKmb8Sbz28wJW0MM8YemRU2OBsDipKtf2&v=404"",""vender_id"":""17978641"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10112269081696.html"",""click_url"":"""",""spu_id"":""10112269081686"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10112269081696\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""8440343593391095069\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/240981/5/13898/41515/66b5e5d5Fe917f6aa/feaed48ce94cc487.jpg"",""sku_id"":""10112269081696"",""fuzzy_comment_num"":""6"",""jdcs_white_label"":""0"",""shop_id"":""16309279"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得文晨文具店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""13.5"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""13.5"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""\"",\""tob_price\"":11.50},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""8440343593391095069"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMTEyMjY5MDgxNjk2Lmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUV2Ez6VHm2xQg5v-NW2SDn4FSDoNGK1QBWJw0u9AJ6gyUR21StepQ6f-3MhU8NFO99Eb5fESKN9faJIjBJ_ZyWW4EkuNitpuFi72h3NDVfRqu4Roh_jpdFhSnLq1vCLx7TZI2z4TTarn0MGS_BIf7jZRafWzhM2xDE0nLgIQleVbrFDBeuGV0cUkrk1CpIB9X6AhMtEHh6JKwJOKJBDBlX7t5WqGESHy-T11Mi4Ae-q0KJiymvo6RUa6cifnEBJliwM5YTfN-LpW_quvJ64V9Ot7oKMGy0l7E6Q2yIWG7ItBd4AMzdF2_XRCBTWDuq8YABHD5IqMOM16hy0bvMGtnYhDmnYNmafqUwsjdc3K2VEhAT4nwKfADYOHv5YvvYMeeN8XMMPCA3sco5t_StSHSmKdoqpPvrlCf3gOPgIocadVlZkVeymYRCfzJ5-D2zKGYH7J1osxcm9nlgDVWbXyiOHuIg_zSP-NZK9j2-FZ6QnOumoJ8JZ596mbvPePIofZ3D4_bCyj44XeR65_ocAsz5QEjbk4s8ojFjNdshGqdi9hQOt0dT5kM3pFVOQOZ3P8gRImweH3-z-cZfuD8rCon6jvTmSxH5Wd1vjoPfSYaiw1Kr3hwAe86dT0MIS4qtRBmhji2OKFOLh7dT2PP8mO511zfGiNo3dnOsyvSPQgSHiNoE2-Nio7sggehmMUO4DiqsuHscjrSdkICGUCKBYYyakpWH-xdwEJQnlZCAJ6qg6Xl_iw7SfjfWoCaUfrKOKuav_UQM1zl_Ad1wfmdMAt3iQ4lCRypZDf9BfMk8dQ9G2KXIotiIUXZ_uW16fdN2hRqn4zslApNmMuQsm_N2pNTmaUE8E25xhK8dn2yBmoA9LmHNsYZQMQLlOhER1oHj8kuWOqLLDeid3CS6r4mK22z4Dd1fM0zTzc0nb4Mll7ICktlzaf9k40hlM0pTr95BSIH5p_bkfoIVmHk0VPq8Pg8EPkkpVrS7TnQeeA0I6Pm-j7e0mVctf-jXBsWQRj7H5NIV-5RjfxP_lKw9DQXz_HiTsrtfg1gXw9O0Z5GIZ57Tx944PzhkjVm5Kg5VkO9ToAeEuiN7qfuUW8XWxu08Ci4YoB8KjIXq6B3lDY_uoCu9qnlYGVTYgstjN-6OvKxH2J6OjAM4iAM5zWiwb4wo3zaLY&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""0.5包尖1个"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""1"",""type"":""3""},{""num"":""0"",""type"":""4""},{""num"":""8"",""type"":""8""},{""num"":""10"",""type"":""6""},{""num"":""8"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""永生（eosin）永生0.38 钢笔尖0.5铱金笔尖通用大明尖直尖0.8包尖美工钢笔弯尖 0.5包尖1个 其它 官方标配 包尖"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVQ-QRCrsBZyFxclz9Vab05_WpwG6zs-v9L_1dqdA9xRAJArzjG09khU3gwV9Bc_z0X621KIiPJCw8CGQayjZ2uqULTf7OooLAH-WW_4khHYjMhFtwW0PbovlLf98am2yv644W6E84ouOCODYNUE7hRvM5dUr_trFbgl69DL-I70o6c3Q_dqxSF1tMgTFRl05nMafmMaWgvOUzvdocR0Gk0D4ISBae8L9C4_V_d6Hz3YcSZSMI64Jp248359a4iAq1OKO0RZuxPTNWzqAaEumLUrZ6WBioGEbcx1b4dgRnGkmT_UJWSuHyMnUyq06kD8c5mOHEG4lJ3b2Sr0EkZ3jn12ZtH9XJEgKogRvr_IXu_tR9fEBLZFX9TZF2xUhSCvHRRLq6P6Mit3YpZo2skkmO96SacfhzlixVwc7f1-GGRpPA8PYl10SCn3-Y668QZNXRfpXSIl80LJlCGM6fhI4mu2CoAa1_uSBN8J2xk1UoPNoDa9c5FUnzeQ3QJF58Ln6c84yKsvVZFBnANFn66IrWpwpHxkW7zg6x1XBXo-gpzeS1Uxel9l1b_9JuQn19XB6J_cSnOlPyDrRl6wxH3oSERZl5DybjoVJMgPCxjG_2CuBZ_34fEzEED5a8dkBzgMSVIJHpJTCocOTpCv4ERROzJjLQBB9YmEn40yDtqwO71NSSkNunV8AdlTh9SNTaoJ-8yO4nrmaQb-PYBeHi7uKVUm9YaSp15roz1XNhk37ObiStVfSMlF4Au5UbPnQmaUw_6OMz74ICpn9lM0xUBGhUoobHKMSv4COVhr2mcnfXkhklGtepf3XR512R6L23bqbc2OmxOj7GoL27jtsHi5jt13wUN96nYTsIRsClZb1tUvivDAqbI7-2Aoa-FN6smOdASCh3dkzBO4Z6PiGON9dxJOD9yZVwZzGj7kBQ1vRuheLaXnPhy9b3Niz5-q-0lGuhYQmP5sTHVhVigTcYbJfzQOy_NrYkgoTj4ZzjkWDdcJNMblKRufy_hqTa8AxKB4miqlfRPevMws2IhMX88t41ipipzAJE1t79hw0oXW6CbL-OGJmqo0PRqL6Oxc78ZwL4iZo0gsgMePw_6axm7LaMU&v=404"",""vender_id"":""13951685"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10099329881200.html"",""click_url"":"""",""spu_id"":""10099329881200"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10099329881200\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""21620555707\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37713"",""image_url"":""jfs/t1/239667/34/6463/44925/66023d4eFcb5acfea/370c5928df7d9a87.jpg"",""sku_id"":""10099329881200"",""fuzzy_comment_num"":""8"",""jdcs_white_label"":""0"",""shop_id"":""13010580"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""心悦文具店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""6.46"",""sku_fuzzy_comment_num"":""2"",""sku_price"":""6.46"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""4.0\"",\""tob_price\"":6.460},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""21620555707"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDA5OTMyOTg4MTIwMC5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVQ-QRCrsBZyFxclz9Vab05_WpwG6zs-v9L_1dqdA9xRAJArzjG09khU3gwV9Bc_z0X621KIiPJCw8CGQayjZ2uqULTf7OooLAH-WW_4khHYjMhFtwW0PbovlLf98am2yv644W6E84ouOCODYNUE7hRvM5dUr_trFbgl69DL-I70o6c3Q_dqxSF1tMgTFRl05k9nvghzpdJRD9iniAO25GwMt6EbJmv6ndWX32asegakCkxH5HjNBJULko6m8wIBfKS25hdALD2o0gygrfcEJPMI_s5WFKvYPtEYjsepxsL-xvFHsn5l_XViE2sh2hqTdPwBlAihd9h-f326PxwTseeWiJKj5qFNSIDsaDr_bTxqjdxDPmZn24RmvXJP82NOI-OgqDGhA_mWWiA2GAS4D-EaZSsNiRLzFwHKyYIJCVvLAozv-tpDYd-uug4noM0hI4dm5hiYJ0MOwBGh4X73EzOkvhi04Cob052nOrPgX36i1L-v8zoyBXj0dqSlF5u5We1VmWYtfiCqQTUSiUYmTzmIS8g6JjLj2HZfsiFx1DGXX8DmNSopJRmeNdUai8XuLjy4ziasQhfpEMP-T9n4oMjrSncWfOrLtqgp_qKR1D3aghqB5O5vKXx0T_QD3F5NXFGIWww5FM-wurpnGIQgdBG1HZKWDrqazP-y8RE6QROmwtsCNjKVk4GEBO2-JCxgo3MZ-rhMczaXQhJDeSnNsHFlXU3JpXqx4bnEeMbzoFvbFXT0GPyyAZfJyJM1xpfnEIh0Lg-lHvW24-5xybYh5uKFNK4szK2kX21SGPTMxZWSMSpre--QL9ulVNU-DWUznf-8QEMOfoIilwZzPHGesTfefYdAjgGZ98-O1cyataGLBiP8Gg964XXD9CFy6M7N04mmZW5xT9v5jcDEj5U3W5YPAHQkdnOm7p3I32mmSlR_m4wbBS9CS2AJ63C_H3fyJBx2jvAa6ScWob-NmCSRD5IwgaOYUO-_tuVsyDEbOBWpCERG3Oac9wWBkBvo9fUe2J6pZxzDOX543r0gRR1FGGlQTEownEUATbUvAluqZNtkC4S59SkpfKfTY0zq27Luojas8LF0D3vXa6uOPcAirgm&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""6支装【红色】"",""period_comment_sale"":[{""num"":""1"",""type"":""3""},{""num"":""1"",""type"":""4""},{""num"":""4"",""type"":""8""},{""num"":""4"",""type"":""6""},{""num"":""6"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""贝发直液式速干走珠笔红笔<font class=\""skcolor_ljg\"">笔芯</font>
黑色黑笔签字笔巨能写老师学生专用碳素蓝笔刷题顺滑圆珠笔初中生全针管中性笔 6支装【红色】 0.5mm x 其他/other"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXVGl1NTr1DSqZ5jHby5-r_s6BhvieD1feR6a7iSadSpfCNWugek0vYHBV8W7wvHcePeXrvUs7fnKDKZaGX2GwwRmV2uzAUxPCSa2Yzqk4V4jR7ee-fU7d-g8MCnGNXFk7AHZJNwZQbWqkIKeapJHdRO7KaNJIfz0fCuVRefRKKY_OU2JZ6DOpH5PxK07sD7lXjKAILlY-C34Kel0lRe48Own3MYsx1gCA7yHPFM_Q1SB-79ZYFabEPgk9daimHWuveooCKT5wyMqa5eGkGkeS7z1_RDds7fM88U8iYZvNff0h1qRp2RXSVqoclqEXeosmr-_EOmTPCiTiR662OvLQUW0_VjXGdaJurMuA06HcqY_fWWjpeA8ob74AiJzBAWxfUTjAsvSKgAQZ7PWtqefc_421b0l6AwTrDE3Psw_nPOq7VMY7tvICZv_YOUXcBNcwvdvqLwuEzJq0hJqC4d78m1w6H6QXwRiy-fqgn26j7khiRrJDchkspzo4jpOin0y8AGldSIj6DSVBld3Q3Lo2TXZYkLMxbd4g6WclPtCumL4Mo37PnoEDHMT8hUavyVHSAAxv566KezQvE2TREiYl0sHpISKEZyphep_xK9Q0rPNnJaGCeMWRsx3Ja56_M4UvJTta2RwRrCdKsCGQMSkLnPtdWQVPIRhmUwNZzN_E1UdD1z9enR3GByxhjvyKVVp8rDm1pRSiUgslVnPbbZiJ67RDM-UxDJI2D1dae2bs1aCYguqdKPBsODyBSUe_KXrofg2dOJdIwgp7Ac1dRVyLpM5HxLMQx3_uIUU5f86qwZxHqcuJeMrmVzA3WSakvYz_Y8skuXG-yeOAvEE5AsG-jsQIt6CpXRXxTx88IVrQufD6l87TlW1oL8EsLyRVIFiw6sI89OE-pXnZkEeFNR3LYtof2FgT0g8dEqf7fvBQ71AwAQ519nLzuIxYWwXGwMGkjT5j1frspJjX_4x9PAwuZTGVKy84XAzpRJP_s1lEfcKIFcGt2SJxJX6a3U7cQbK92dEEHTSoGjei_KFQz5SFz4i-zWdPLQGXUH8QNBvFa5stfrGo69qHqMJd4Ib17kk6ZCFY7tmUxa1BvuiZ1SGzKZnl3Y8EHVCJT2BB58HvnARTCMcPICYdCvS3-NB3aMTu0tPXpBevgn1C8OP2POGf6&v=404"",""vender_id"":""17978641"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10112268296062.html"",""click_url"":"""",""spu_id"":""10112268296059"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10112268296062\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""9102148071504186087\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/161073/3/46173/115025/66b5e46fFf2b088a2/505f646a866a2353.jpg"",""sku_id"":""10112268296062"",""fuzzy_comment_num"":""6"",""jdcs_white_label"":""0"",""shop_id"":""16309279"",""good_rate"":""17"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得文晨文具店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""18.06"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""18.06"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""\"",\""tob_price\"":16.060},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""9102148071504186087"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMTEyMjY4Mjk2MDYyLmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXVGl1NTr1DSqZ5jHby5-r_s6BhvieD1feR6a7iSadSpfCNWugek0vYHBV8W7wvHcePeXrvUs7fnKDKZaGX2GwwRmV2uzAUxPCSa2Yzqk4V4jR7ee-fU7d-g8MCnGNXFk7AHZJNwZQbWqkIKeapJHdRO7KaNJIfz0fCuVRefRKKY_OU2JZ6DOpH5PxK07sD7lVgDcCW8MFnsoznL3LMaPIbzfeAu7mGOK10HDB1CVHlCp_QGRXk8uZRp7hSCsdJjRY2K9KJTmeGdVgz481lziQC-YhdWeawUvTa92de0v1JLSIgsg8yujVMO0E1uZZ3c4tvvBfnmyvthwFWxAJcvVZqIIOc-sHEqrcKTj6m_ib_WYhHlTd_uJRvi8rgKlWdvK-FQ4q1WbMfmEiFCRQiOSybj5xsjqIWptvi3vpXCbkd5Thp6aEtUk6R7jfhKXtpK12iCixkWuLvmn73owQ7jjYMbwm1JFLka7jpaRKphrPLTdUqe-rodLLdkQKmuYYtx8dNQ1_iZ3g_UAKN2tV0za-i9yKppjRCvYtF0t5Q4lC80fn2vMdw-4BJhflqlavgYEK25qQAm-oXePENKp3QQWydJ3Nkij9UG44ffmFMx8OZdFLFGHXZl0czAyjib1cM0RRHtWGooapcl0vHqVVHoxwhnOYdCOVPzeCSB2hoxY1MxdXZUlTyH7hpZngl8CqjfUXAlNWZ7IxK0pg_DYlwGNNnImaZVuynd84WW918r02d1duxa-KriKX07jeWFwi2fupq3SwkpzP4-TaQQixrFitqbtocO-9GuDbz_KYWSmN8156UHyjUs1vcyCV4rMyds6EX21rH7uFUa-BzmfhE_DjozOXsL1xho6O2XlP68bxaPgpeBB8-DE2bIVvEgKCgHNkrusnADi9LWseywrFUzQJZ7UHAj4MK8hxqjEl8U47c4j60llPQtWrfWAttir742XocfQ2wK5KauH51DVVTf1qXJEHl8u9fgIV8SxIcseIUdhj4alEUy8T08F2fxmrNnRgyGECAWzSGch3K37ED1NiqQMJu2Xrd7WcxkkkZbRsTS2H3CsXzXYlEcHkFa5OBthHH0aMD2HCjPvWEofzOBUoYmSDGOArY7ttK1djeqfQWdZ3fMf1mjgzlUTe_Hj0LpCKcZm42el3ZeuAQ6_BVM6dQ&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""黑色12支送便利贴"",""period_comment_sale"":[{""num"":""0"",""type"":""3""},{""num"":""0"",""type"":""4""},{""num"":""1"",""type"":""8""},{""num"":""1"",""type"":""6""},{""num"":""2"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""速干0.5mm中性笔学生用笔直液式走珠笔碳素笔水性笔直液笔签字笔 黑色12支送便利贴"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVQiJrjMm36r3KNm4WylvM6M646tfvkXXBLyHk9ZI2nIJJxJdHqrX0AfuweDtBE7KDwnw1mqWrPQdMubnYCxKpI8qlGU-66d7f17QlPUrRY4CgAKNqRP-1jl47q39XY8Ch3QoolSDA6XIRaY7efizKAc5nVl3vVJeYGDT4qnb2YZy3E4VWDjBneZSeRkCUJc-Ja-diMBVmD0wx-tEsjAwXnMMMJfj-3KWOJ6gtdSX4RG13wXjajok_OQHMSvWoqhphcWojoC-6HaXZuXgkUgOboICImMDVsnu_TZU39D_HfZILA6bM2B0ZUlb8lrZoXEUKNMffIq82ZcjKRJ5jjGUfAjyPLnGRjAeU7LbsrIJYzetlLeFydp-fEJK7YWAPqBp4z1yW5S4ua8stYPUw5hvHe-rFzyLwbhS5YMxqIYDy0myo7E3c31krPTBnh7EjzKZfIVO-znK0bLgyX97Xks6d3n4PS_fPqs5xR-SKP7fEmHdJVvlMmVi0xl3SsicWpGwmq70fMec7BiQmsdbZ2ju-EU3oOI8mjVcuUVhA9uSWlLU9RnTXkMBSShHxBagObhRX14c5XLO0qLLsrrkZMeGpCARpvBOtb4FUxSq9s0ikNfRwx9zXaZ2jIVLmWl2tbSwHksQG4OcU-qhpYpkbY5BS827S_LHu2ObYrx4p0aiH5MT3OtXXXjSw3FhNPXgteDcRHhcX0cE38MUW9gTDwT4RGPndILqyaTFmbsTuQiKDpGcaGaF67DFQtAQb1NaCSbL8u6JJYgcYqnfhpg9SD7SeW7UXtC5mMpLZNUEqrt3iBbPbyyQuNfzDD5WA78jRCSJfE9JmxWTdflCYwtquHCNLtaSrTgEsasYZ2sOhLqI2kLzWXHmad4OfQN7G0WchudDlT50tsrGmD6A78kszs6xcoKRFnOZv0u6d4EH7OKV53DAsuwO-ubzqLRZckkZaXbxWIMM5xJfCVBv4aHIGM41WVvixTuCtm4uxMgJcj9PSTTIaTWBI5fBZTmymh8mOj-nsQoQOmoU3PYA8anrnuLWL9DAnveYNPIZaL32t8WChlBQFrw6gPr3leRaQEy79F_j_QhgvK-S2UtevUmZ6u3Tps&v=404"",""vender_id"":""17856416"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10109723167257.html"",""click_url"":"""",""spu_id"":""10109723167257"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10109723167257\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""33293607194\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/28830/1/22712/119665/66b4f478Fbc2cfa86/63ca74f21cf63772.jpg"",""sku_id"":""10109723167257"",""fuzzy_comment_num"":""2"",""jdcs_white_label"":""0"",""shop_id"":""16231527"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""韵培学生文具旗舰店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""12"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""12"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""\"",\""tob_price\"":11.0},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""33293607194"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDEwOTcyMzE2NzI1Ny5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVQiJrjMm36r3KNm4WylvM6M646tfvkXXBLyHk9ZI2nIJJxJdHqrX0AfuweDtBE7KDwnw1mqWrPQdMubnYCxKpI8qlGU-66d7f17QlPUrRY4CgAKNqRP-1jl47q39XY8Ch3QoolSDA6XIRaY7efizKAc5nVl3vVJeYGDT4qnb2YZy3E4VWDjBneZSeRkCUJc-KDUG_bPGxnhCC5Z5JY0Qjfb-efgg-JEmst7IA86MgOe8VZrPQm8i3bFZhRCJ7yj_XK8lMP7EEfqRarChC_N3f9nATRONAc5icsF6Sc-rz-f0spzT-1OeVUxWaMuCz2G_1WEYvhpeOwN6w6P9LQcVNhXa9zHS5BmTzNf86a8RD_PiFv3Q3t1PrYO6DaZ-JtbbNZhlve2MK_hAfs3JFuWjZaHBsXWs2x867H3lEtiTnZNP5gQD80gMpQSxL9H4qig7kmSC4xU2Q11HTsPzQKg8YF-YF3Z4zk-JtdnGR_g7oMQ_xK1Kz-HK2jut69dQHvyPDClRn_qTVYKGPfYU-lm6iGxIuQhE8HYTwPbrf-qW4zRuJwO9mWj0RMqv7VlPmMlWIhJto3xm6uqkDPSCQURdN3C80KHynjRDU7q-Cv4ZLd7J_XNNczU3LYJNJrG1_pFziWmslrxV14AP0qeChHgX8d5E7QaUETmXrIDb9xxO4qBteQyAkMd46TUPNFDKtYpqNGoD45ujWu2AhsS2rTElFe7c3jvPSyshC7rytK2RpbgysrT5-YMjZYC9A0egcAW3lGG857Pzwn9pZyntOsANnje39gvQ-MOlsjqJcGjoJImQsYLAKUKX5_skrIMlkLYUbrMZvNw_V0ivL2e2JI77exOnVFyUsveXePnL5FOfnIF1HHxNpRfBDk6JkodtkbpyK5uO3g9XlENGY9D4KmR19q0wK_qy5IxiEBccVD_CPh60_aBoQkDgkktTqxtPpYTP-sot_JxNDi-6cG0B9VAWzHKc90DtFPvTYOMft1y-3RKyCgeJOMFTvThwDmdDZ7KIBiFEVNluIW-AO0dWQK6VrxYLYwuAkftnEkEM8pgLwsYAT6zO-ok8h1-gQ20fZpC7g&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""【子弹头】按动0.5mm蓝色 20支"",""period_comment_sale"":[{""num"":""5000+"",""type"":""3""},{""num"":""2000+"",""type"":""4""},{""num"":""500+"",""type"":""8""},{""num"":""2000+"",""type"":""6""},{""num"":""2万+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""得力<font class=\""skcolor_ljg\"">笔芯</font>
按动<font class=\""skcolor_ljg\"">笔芯</font>
中性<font class=\""skcolor_ljg\"">笔芯</font>
按动签字<font class=\""skcolor_ljg\"">笔芯</font>
按动中性笔替芯 按压圆珠水<font class=\""skcolor_ljg\"">笔芯</font>
按动水性<font class=\""skcolor_ljg\"">笔芯</font>
【子弹头】按动0.5mm蓝色 20支"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXikyMJqKWPnAxgCsDqKgvCl7qimda-wkKRTv5D5smDF9erRw5lHOZm7cDBwtNIvF8w4CnV9bTcHLyS5Xm3m4RH34X1bRwJRmfs_DvqlU2In28enwwtavwVbs_MqEiAT6OOeuT9cO6nMZzhx0PfL8Nzswdohy9cX9yWO4pTPtsRakF6fgEw0yiAl7x0Us5OX4QFtCctqkswxxFp0fKPBeMkb_2CJp84lo784nSKFZ609ECQkRsWLfpsWMFid2crhtqE4j9rejmFyd7geB1XfhpDjoDQQ7ZRUvTnkXS0KDkb3_QeER1IvRcAwErI6Q_dWqRzrBeQW9hUHuilx7weoVWzTQFMy9QW0kcnR68m0yEazuqvWXMKYsCImYmqpsCEw77dg68qoydbkQ0qky2f11K45-TQyPxGHi_GOB2AWHsX0bKzPfs0-7SPEW6hnRjKPrADA9yIUW8YaoeFCCgXryHg3H9hq3HUUlpP1zf2BoSeeZfm2tKryVBAG9z79w0fl0Q46x4-Ez_i1W6zJVoZfgsSQ2gN3_xqQ8mIria4qDvfQCrAHBnO7i5xajmLEcZy2v8RMN5G_LrBYsh0JbBJkDYJ9J9rFFdAXudkQFaA6P-ZyE8Li9s3fjWJDxFJPw3LpG5q28d-0pv96yM8Jq_ajgZUwXnyBvBhiZ96KOXQVdhp7Va7ebiXUOnnw3tuGVtLWQPnieiupx7NtV0uy3V_kQ0RbBtiWFJpiYmA4OzpVeyXa9KkfhjtAqjTZ8p6n4v1SsD0oc1V-tR9CBGBMl8Sj8sxjwy2h93ixDUrJjFQIBZk1499oUmp9zu2eQZPqSnEOT7osRdlgvf3qBhPLZI8JFfZS8mopynWFD65XwuoDVLiR2GLSMBgO8OHKDucePJIY91SvHP-8gpXDLmo2aFBsgddHqIHq_fJ2lCFDNVVI4gJEkhlKLIt6ZWqjmuHGez5q9usbdIoISqDI_3Ayvu7VjQ9KLlRqTpwJOlb7tkLqU0IW0OOGZfa1aHtZ7Tth_yxPN2Qy5_blqHYgkat6etXZCm51BQd8OCP3f-j8CX7KvrHYPC_iLpis1kYBE1xSotJ8QJcYEXhTVUA7ZTn9RyKaTZI&v=404"",""vender_id"":""643046"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/50299082650.html"",""click_url"":"""",""spu_id"":""15351851616"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""50299082650\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""5154475137\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37713"",""image_url"":""jfs/t1/226035/7/2840/49875/6552e88cFf34745a2/f8e4c952e4448f7c.jpg"",""sku_id"":""50299082650"",""fuzzy_comment_num"":""2万+"",""jdcs_white_label"":""0"",""shop_id"":""638588"",""good_rate"":""9"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得力齐达利专卖店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""13.58"",""sku_fuzzy_comment_num"":""1000+"",""sku_price"":""13.58"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":13.580},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""5154475137"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS81MDI5OTA4MjY1MC5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUXikyMJqKWPnAxgCsDqKgvCl7qimda-wkKRTv5D5smDF9erRw5lHOZm7cDBwtNIvF8w4CnV9bTcHLyS5Xm3m4RH34X1bRwJRmfs_DvqlU2In28enwwtavwVbs_MqEiAT6OOeuT9cO6nMZzhx0PfL8Nzswdohy9cX9yWO4pTPtsRakF6fgEw0yiAl7x0Us5OX4QFtCctqkswxxFp0fKPBeMkyNmUt9DIiQ-lQGHzCjvZHYWAlPuTmxWffeaI_mzKCWywzcr1_MzS8e5T3mHqSK6S62nWgEqSygtdc5r7Voelu1qMl9V14JpCquEYzCQUcGALJwL3f9OjEE7tTNbl2pt7l2Npj8QRK13G-_D4z6Blx_XeF1nL6mFVV-ySZZJtAOyio_34rV_CYgJ_MzIR4RbmrwyRCyOQmFnivFyBFl4it4kwUOUWFQozXJ3kzFlLI4kiPZWvWlZ6WAbIXsUHgVyK-X0qZKG6n2ftGFgBZl5MSMmyBjet6RtYalFqaIcWJNuiQ2eJk5IdXz39JUYDeAuisvz043qsnJJnYOxoEDKLjpkpAzO43nrjp67bJNA_7Kl6lhmQO3ZmZXif4OsjFnEzRARC2_ZPqStnfHpM1XRSzGt28KR2Hw-0iMrjmo_VbRMYR7XJid085C5osJxYHLHiTcSYbiGeDhj9ZaunnKxd_rd57k348ccrljp9GNDYYn77FpYrxepjNYVFFAshKk97x4H9qzN4sq9_Huc9buYY2txT6_6ZLRZmGt_1JjxASG_cDSfS78xxrV6VJ_1xXzyKn_TPFg0ekj6WP_YDTJXl8p-HnK3NPRm7SYj3eVT0BK97C_k4NCkKkHlCdxQ9D2RIIVN3MwkPRi3IGkrGNLWMCTiIew6UzzXEH0u9vVshTfgSwH-iQHIO1H3qL-5W1LfEgvstVs5s6dWTaUxwBwReGvtHvVuowLQW5XPz9p2oNhmB1LHUxfZI7Y1Std7khuUXSHZTniM3BhHvo1aPn3KRn7O1G9aIdV_CmwC_Fi4myNpdQ32gVXP1rYxmYI22K9HGbczCcCD_odTZbrVHhcZYLpxG9eDSoaOi49VvKsELLrU&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""蓝色（13磁环，3笔芯，12珠，2电容头）"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""23"",""type"":""3""},{""num"":""16"",""type"":""4""},{""num"":""100+"",""type"":""8""},{""num"":""200+"",""type"":""6""},{""num"":""200+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""Aseblarm磁力笔学生减压磁悬浮多功能磁性玩具磁吸笔解压磁铁笔网红笔同款 蓝色（13磁环，3<font class=\""skcolor_ljg\"">笔芯</font>
，12珠，2电容头）"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVR0nI2DQ62ioHCAVfDG9Gud3IFaIfE8LrYrGP2NHpeB4WM3FKhGGV2uG1_-_w13rA-FF9FuBNQVXQkggaZ30pzUvqMhV2zu2WBurQy0jJP01J3Rvi9yyZ3ufTeoP6GGgvV7qnT1gzveEwZNpTUSaYvgyZ8MkD7bLZts1JuKs2RBOOTT8gQLE7VregtiT3dVT8hwWGv37NumzgN_UTCh8lK_qrMN0tEloDxD-vaMgmSzAElKMu3S0LOev-j6fUXVWbmdKaBOOPgd7UNzOpr4iHMJdA2L9hC6YuIs0oftf2OZLxe9HipgKF5lyi-54OKLSpWFgMofRSD9VHjbWgQj-sWBK05gKGW5aqJ-IbdWom4gHcQHaBin9C-34ce8EgDgBwzShFxynfWcKhmZdXa69zrP6p-XihWEJjyjIbBFsN9Vfjhue1y-Lo6Lc9PDsCBaNKcKJKqINnLnY_BubqL_BF9J02wJgzjZA14MYTOuhcTxKL3Xa1q1R63Q4h_rYjiEb8Nf89oyzgBPt4XLGkPHY71Q7CDn0Zrh5EVRLuXTSpU9ASSelCU1eHxldn5pI--Q5faHVI5taF6BO33EKDIQUEj5apWYnn90gJ7HNWo27MTeTPgXv7qglU62ZSmBC3XtCMhW4jArtnW0qeNSlyHWPynkdZGnWkT3b-A7_Ps3FSpvHFa-oZkrs21iJbesY5xqr6DplreCJjvjUTqtOhP61Go5FglWrEBBEZDi7RTIJLSEfvPBub0Il-8Fq67b9F2gtllzF-bG9c9Sc-8GRP36KXa9vi5PAuIkyeFKQ8stg-ASvX65GQOeBLcatcpVH10zS3qxbz47v9pHh291BcceG0mLCmGB32Q_OaosyKTXh3PczUG3mqbRq_9grj_FQhVenngGqP8wR_i7GEvEb0DVpEOsWCX8mxgJAch7bHK8y4myOaytsvDdTjlR141uzni9tTBUz1hAxmk6MTNi9I0KdCDGOMVDxBt8JbsFZVcAEDhvxrvEpcELxEeF22Wh1RkoJsfYCZ7j4lMAXoH-LYuDnhI-hgH9zZmyv7bVU5SYVBArVmG-uzzBWn6_AA5Uq_BPhrsr5BgtuFTptfRyFjtRzmwacHBuaY75ORzmZv_r787sM-TLXv_q5EkOXQL1eugQwDrV8orBxqiIkbd3XIs5jL3&v=404"",""vender_id"":""11753316"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10100702453831.html"",""click_url"":"""",""spu_id"":""10100702453825"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10100702453831\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""8804964617611085206\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/217390/30/39417/213116/6614f5b1F5f974dc8/10dd3599622c2965.jpg"",""sku_id"":""10100702453831"",""fuzzy_comment_num"":""200+"",""jdcs_white_label"":""0"",""shop_id"":""11483015"",""good_rate"":""7"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""锦熠颢玩具专营店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""28.8"",""sku_fuzzy_comment_num"":""74"",""sku_price"":""28.8"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":28.80},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""8804964617611085206"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMTAwNzAyNDUzODMxLmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVR0nI2DQ62ioHCAVfDG9Gud3IFaIfE8LrYrGP2NHpeB4WM3FKhGGV2uG1_-_w13rA-FF9FuBNQVXQkggaZ30pzUvqMhV2zu2WBurQy0jJP01J3Rvi9yyZ3ufTeoP6GGgvV7qnT1gzveEwZNpTUSaYvgyZ8MkD7bLZts1JuKs2RBOOTT8gQLE7VregtiT3dVT8hwWGv37NumzgN_UTCh8lK_oTtLosPdAbKMsfjnuGtUVHy67uKaOkU5UKp-NmEfuOebV-yscghAuPWEAimrE6ADd38upS2W2X79dhZHMBK5HY95Od6U3efH4ZlhyIuN24-5zpZlyVv5fjetszkvGLrjC5SyuVytGB-AsX_DHeSfaU7HSOGXbrSN9CWR_saSGZrCyquNG9zyK9gFOb-ZdWAmUK0owXfwJfbNEk0su97_cOTSV6qXcggD2vrqBvMggRzBdIrN4BFIywW0VwhkpvLRxW1tzmNjFhdn85ayHrbCU6rMHloyFJ0jNUim7Tzq91vH3bl29oenblwo9Wf6e72eIIAVyoXPhBHRcs_8nsqMeQq-S-zQr8IpMus_SJm8mg_KM3JjmCnCmHD8OIrGluHKNQDUuA_Ce7LyZ29K4D50QQr-B6DEBDEaVpEU-gnm9e7Q8LZm3GUOalqOwylfc6srH0CPMHpgEdJDOA1RcnbeqtfotQrWDnFmmEIUwz8vIMmUzQA-nX9EWbSKl4iaVlBUCGWiSE9X7_Ih-4YI2xnVJGjZNv-XPsi-1oMzSn1cEBlHMiUhhA7HOuuxFwORxJZIlGS0LsgcORlf0H9JdY5n_tcK6rnDPDWP5tZyW6bgzM5_wmsxA-6sayPMDSWeKFElKypNQ5AkdBX4SG2EJ3-qVRK_NCZIc6wWUa7dFhdXid3Kqo_HbNu_rs5pRW3nGtFkQq2UASoqBk1E3RJyhMO1IcQG6Mx5mkgnqEq2JHdM4b2vpIWBQhjUP4BJeH7D_FRf_pvs7x3ShJoFBvU6S9BrMaseqapq0h34nYpxp0Abc0EfD1khgM9ln0keJQQuvhD__uPtywWTpJHhX4Gx_vTdvu8JM9CxhYmYtgJatikepJGSfHHBwFe1TrAuhGmLCJkZZvU16Qcxa5-WXdIly0-UYFeLTpvxFarlD4nZgGGM0tNn0fiR8b7jIbGaOZZemgQ&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""【0.35 拔帽全针管】 20支"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""2000+"",""type"":""3""},{""num"":""500+"",""type"":""4""},{""num"":""200+"",""type"":""8""},{""num"":""1000+"",""type"":""6""},{""num"":""5000+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""得力（deli） <font class=\""skcolor_ljg\"">笔芯</font>
黑色 签字<font class=\""skcolor_ljg\"">笔芯</font>
中性<font class=\""skcolor_ljg\"">笔芯</font>
碳素水<font class=\""skcolor_ljg\"">笔芯</font>
水性<font class=\""skcolor_ljg\"">笔芯</font>
学生笔替芯 文具学习用品 【0.35 拔帽全针管】 20支"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVD3cPHfT4XlEJyU5SaIDdavLs3y9Q7P72-sO01iG4vlh0d-CJh0yf-HD_4MA8RBk-RZNS2ELhGMYbcAZpj24B3WZwux_lONHQBx_BAJuBDlkIm7QMg8nQvo_iNdevmNbVxaDe7vajNNoZRvRo90gqSunAV8tJ6QQT83MFs9YlIdVR-XpgYIVWYeAXooiHYq7NFXVLNPpmNaICVgVoL6Wex9kbkUWslPSiJj-CXRY8K-DLy9-n27q9uE7RXjhOm-26hMx9zJiWhpVI5_kJwlcX7LxB2vKJH9ci0xpc0Ad2BB4wwBm_urLL0AIc_vzIBwnj11YPd_V9_UNFshA4-_trT8jcY4HA3w_iAd-NuwtYBkkwgfhKbcG7Xls_uh1OGdm-Y_V-Su1XjkB9SS_d1mgrLXEbMRNt4DTkwFzim-N4Rjds5_lIeJx1YJDVzgbqHD7TsfWKFk180AzcwQFjGmYQucCK1jbEVUn2Yy2oYfcW8oIoKSmtFxO5k17bziaeRODTEY37tNbSQpvxLSDGP-IeFU-o3FdTjcg9UkPDjewm_VxaL5JsKFCrNA6md0w2c5tpHkPc57KaRkqPSPbV6T5fz2hdt2CUwjI9aA6QGVjyxOomivtsq-gAua9tAFO-b_CKOxksIq6f3N7EZNz0w55MOtNLTIGBz_wOni3d74Fp-A2C1iLYFzKKGIB5Ow4ae3Fe4FwHUVtGQoVa7Xm2cx7ZbqU2ug-badH9nai5KdgiwZh5bRerRX6u4FfKd4IazUxbRVlH731EIIhIC57kXVxmBe8Crgb1PpLtEJQvk3LVWkrUibiU9tG0YexXKdhpQynAI1xK24wKIAJQdBi79_jANgG0_OltHtzJZxbQ9afJH-ofH9oQs7nskhtICTv73LyDzxnBTbXHp1gFLCAi3C9ATCTT0Q-zL4bnPVz8Y6C-8cAlj1k4OUswUZ18bHkPzoxZpKNgzEY3dF7avdGot41rHmwl5cbuV6jagQGAZYSa7iSamu80kQRQ6Vf5nkSHpBUEkDiFKASVHqya_4nKbB9jzI1FyeMU9N5jz6ARgRoDiL1JEuyNsIbgYWBWpus8XH6ol1aLt2JXDKvPPXOJiTQ6Y&v=404"",""vender_id"":""643046"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/71000826317.html"",""click_url"":"""",""spu_id"":""71000826317"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""71000826317\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""5154467786\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37713"",""image_url"":""jfs/t1/122084/32/5672/202906/5ef5b686Ed0eda252/28c8e594f743b786.jpg"",""sku_id"":""71000826317"",""fuzzy_comment_num"":""5000+"",""jdcs_white_label"":""0"",""shop_id"":""638588"",""good_rate"":""9"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""得力齐达利专卖店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""9.9"",""sku_fuzzy_comment_num"":""500+"",""sku_price"":""9.9"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":9.90},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""5154467786"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS83MTAwMDgyNjMxNy5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVD3cPHfT4XlEJyU5SaIDdavLs3y9Q7P72-sO01iG4vlh0d-CJh0yf-HD_4MA8RBk-RZNS2ELhGMYbcAZpj24B3WZwux_lONHQBx_BAJuBDlkIm7QMg8nQvo_iNdevmNbVxaDe7vajNNoZRvRo90gqSunAV8tJ6QQT83MFs9YlIdVR-XpgYIVWYeAXooiHYq7NFXVLNPpmNaICVgVoL6WexF7AO2CRaeV7MXD2_lAtr3LCNxGA8ugbSrq4i6eQ07fOgjoHtD9Lh0EV1f84Vi14MPvJbv40i7__aiAGTVFSBL8vfjUvqMJZtDGYR9wYaQt11f0xGA_t9OyfEu0qx_bJtfddz7Rid9_Y3Y8Uw-ciwNqDaMJVKpFXgtUZeCqjtv-6kHSOBFfz-wSDwSYVecaEcX2mAOadOp4lckgCxsGk_naCZQakLn7eiXZ37Vlbf1WKrr4J7J4i_YHrLrKvaVbOyo_X40cjFI1lE1cy-tKXetxtK-6qDGvbZ6QhiIM0-0Of4bF-EtdGtYl98TGMMK2ZrrtkesiSmFGy6mbhHnM4jymHMdGANM15IsCd_dA8riGdxnUr01JBjCMKU5mtAt0HbLO8Pw9iymw_THTjRtj5t1TshzmUS8RGmuCUn6zote5E6kUWAiFJ7_mgNw23lK0ikUsqLl74cGf3lJI4E-BI9mhZ8Dbkc17NY_0gVW6PE47Dc8PKgOtdgszKATBEbPVZ6E41dN0ByBX0wOIhwigIIUi3bdbZ4UNhq4QPLM5ae-zElaFYSXTMxvOdrngbkEte6NgchuuzWlQcQl7EKnce2L9aUH6k_rufO_rj5Q-VcSYM8zAgbpDssLkbWssrpMmbRimk4zHF4KgoEiMx79bQj6-iFVDOdSm5g7RD0HrPaK0YRC-2V9FVTi3J77Ne6O1CXE-gGN-ZZ8NGno6KGAwE-BmCVmejk8IzwmGRzg0L9_bDUmOL-XDy2KE-M3GPwI_PnseyDHEjb-DTVUFVhcF1kxoDDitITd8RGOC-JTKVx6rPJZoyJ5Hd-x1-EEpurY1kfp-wZHZVAS_p5wVlT7-1fWHX3IR0lujAKPsFNtMB-kFA&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""10支【红色】大容量中性笔"",""period_comment_sale"":[{""num"":""0"",""type"":""3""},{""num"":""0"",""type"":""4""},{""num"":""0"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""200支ins日系巨能写中性笔办公文具用品批发大容量碳素黑笔0.5黑色<font class=\""skcolor_ljg\"">笔芯</font>
学生用考试写字笔水笔老师签 10支【红色】大容量中性笔 0.5mm x 其他/other"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWvBYcHyuKs5lWgc5UOQHy_dOXF1iDznhhRNGY_sq5hzE3o6pfMx-MnoIO8sCEny825zbz_Lb0RmwJiiSNmSj_mcC50rZGZP1dK5rixJanmy6inaPxZFuAhXqqQBBDXrVqxKeWxaxMku-gkzrskuhd2KYkfUZu3hPMKaev2EZsDXyHCXdv0toVdPKaPd6Jta9lFIEl_2KwAWQeu2tOJzCNtO7wP5d8OoHY45WBxAlVmJm1IVxVMUtImqpAIxW2TJYaOQrafoNDRyYXP038gBHUTGLCxkI8WoPahW4tkQ96YBkwGYjGV9MhIPmTL_bXTe04-NPzsdfdTorGCDe0Qb5Q9uSg1npLnuqp7iMUqxTjTokoFwseLmdhof2XNlMnxA4Evd9zjlaXOffLt4AhO9cRGkkf5kmfcINhCsjptmzt24K3QIfL8EYxzWmJANeH-nWEkXkzUqwYLxdKJsynCAyQcAtdenoJFk-nG2Zx1oJqMs8tAnFD4LHtOc0bPVfPPeTAzNAAdGGB8JqYMT2nyjH8OJ0iR_np2PMojKL_9b7JdF8OFyzPikzbkkuHedeesdDslrM5CvSDvKeojix8Hfe4RxA29Hg58oBGFq2WVf6Bx6O1elTAolzjeaTXoy_1SB1dYJPndaP688pK6vRqtdF6AW_g1qDtteMHj8t47Pr10BsI0ZfmxPOL81u3lrwWohVEyx91KdeWGvhRjHkGrxshVigisb2uUc9YiXUli84880wSeHclPDKYp-hdvGweqlAOh4bsur-SCGxkA6gWWE1JgVir4nmUgO2UXiyJnJ4Axcu842plHSqy0a1WTLHPAwOWfy3vbdVkjBk-dyZqvkaGMn8jCrpW2J03hSYdYhQ5Rcv1UduUMZk-G5MBloj4R2AH_VL8qfW63Ww36Mi3TW1EkONCs-brXY1IbSoAL0fpdQunwv08mvj0tJJAXXhYrdqUMrx8WaGoChZ7Q3c8DmmQpBbSlcwWGjet7w6pVJMFKhY2VeH05S-z-ZsB-IVYRYJFwstQJ_38rKZRiGKpsWUDcijaAIpegL1B4ZTzF04ihnvC9g1DcCcELwSRhFuK9E04WT5yOak3CpNP8k21Y8mqO&v=404"",""vender_id"":""18303391"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10118847307705.html"",""click_url"":"""",""spu_id"":""10118847307696"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10118847307705\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""34568118963\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/97474/31/40211/80355/66fa6e32Fb41c17e4/a8387adb5d5b9734.jpg"",""sku_id"":""10118847307705"",""fuzzy_comment_num"":""0"",""jdcs_white_label"":""0"",""shop_id"":""16532249"",""good_rate"":"""",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""启信学习用品专营店"",""good_shop"":""0""},""promo_type"":""0"",""pc_price"":""22.1"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""22.1"",""ads_info"":""{\""business_type\"":\""2\"",\""campaign_type\"":\""2\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""\"",\""tob_price\"":-0.010},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""34568118963"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDExODg0NzMwNzcwNS5odG1s&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWvBYcHyuKs5lWgc5UOQHy_dOXF1iDznhhRNGY_sq5hzE3o6pfMx-MnoIO8sCEny825zbz_Lb0RmwJiiSNmSj_mcC50rZGZP1dK5rixJanmy6inaPxZFuAhXqqQBBDXrVqxKeWxaxMku-gkzrskuhd2KYkfUZu3hPMKaev2EZsDXyHCXdv0toVdPKaPd6Jta9mp_wR2n0r6JokZeQRD84x8EH_cyWPNNkw4ilAAH0C3U2RNNCliuCXxSA8uxHDCD9bv1wJE4ZXLsmJPfR1GViUT9hmLrlwiCLe9Zbxw5f-F2jX_B-F3euc4WFswC8eJgO9BQaOeMh7D7AvBKvIG0kzKfetxKREu96hk9NkNbfEv9huRjpplGZaccr7KXZNEZ8p0_1Bii3Co9sDcd-H6tBaPVKwUWWwmaZXBc9p8NfUVX_NR9wR7A3qaOePXvBIB-N7ngeLSZzgz8shVTtDOWsbqhSf6CMkD53xf-Iyhf2RVE5RPI73_IBsP0jYoG7g1PhJdQcNRL4puKrcES-OSe-k1yqlynzbjv_VZdZTF7h9tYN3fcG1AZoMCI_5zr1814u8ffiE2_COkSz-QxKrJ4QuO0Mcq3sGEvh3St-G2uxdo3oPloay6dbmfbwq-aE0oFuaWO1d3w58I_apzYp3zoo1ArsNOCiqwI0nNI02CphWSuUZ3e_KJe-iX9_f2ryotrJpW70Ex_LM0r9mJJJnle-vCsrg8_qCKM4ybiCs5WiNw5olQlKMUcjTJARbCvTM3PovEn-_Bb41pSRf2Xke2jGieS9UesDwZrmROWtrYlqW7nga9y6uAa5mXUroOolrgqL1Nq2tD8xQKTDedVQHFMI5ew7TM8hC5MjlaP4tQnIP0V15nI99HAvMCh9VwgUMWwF117TpwXc3e_k3L2BBEirWJbRTeY08EeJ4CBMGbSUQ5dHUvR-LJVU1Oy2APwn9_5fPyf4kIvc0dCqZx5xfemrhv0zEgwZzQPhNIKyRksUFP20PYzVvQSzPKZZq2ljjhBCKrfU0_r04t_txc9Q6t2C-JTCKW3zWQ2HM32hcR4WLj-VAApx5LL5_2latHIlGmFVa0gefPTi5R-rottlrcIOpM&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""银色（13磁环，3笔芯，12珠，2电容头）"",""is_sensitive_book"":0,""period_comment_sale"":[{""num"":""23"",""type"":""3""},{""num"":""16"",""type"":""4""},{""num"":""100+"",""type"":""8""},{""num"":""200+"",""type"":""6""},{""num"":""200+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""Aseblarm磁力笔学生减压磁悬浮多功能磁性玩具磁吸笔解压磁铁笔网红笔同款 银色（13磁环，3<font class=\""skcolor_ljg\"">笔芯</font>
，12珠，2电容头）"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVekKx4ZmKiY2tiyuaYMBfCgh-HG7ykLEHUyL5j13hiHfnlNVoZs0fbbmmjWd9r9JOO6kD2wEJTdM32OSitscMLiHwW2LfbL-DgJ16Ep8gJEiS8lwYyQRQQ4-o7RHP0kR476Sor1CU0Ph8EMXAaqrfB5K2z2QEw4KKJN9WBLerbn8k0YJ4q52zMTwLeEBtpCxCctyMvP0nYAipRii7a1uhBMVFvP8K7L523XoBWnCBLcTMx8eCzffu86CEddETE_X-ZX3uIDJPFKOp2DdADiOMU6X8ysqIVmLwa71SS-c9K4tMwc4rhjQXy5MJgdrfnSPv0ZJYnaWRZFRjZ2723X4glddx8sF78DR2-vl5tCALFEMKxjQ7fIf9LGiwlmNCY6nmuNDM8ZBdl7I_cMgjX0QMnzH9V_nGrjI9GbkkgxmEWmifuaMnfCV4EEUfSVu6VLrtJ7uSiPfqxq-w9N_O9cQrsDvzmN6n882avm1vaJifAR5JDDwA_PfUwlaIv4-pvLGb3gOzFYtPmUdDEfDoZmvW5i1hdmlJn37AKJS2AZZmWmuGOdH7qvDmkpCPGjQZDZ9r4VwH4o8hHUkWIxqZ0lFBFvq2O9Y9FnDLCwva5N-mUh1ykAZ17Ht9CAAIVQK3IWndLQr2Q0_rG8lPPlAiSDmw6hoNRWh5uG8ovbRmWLnfLIwuGI_ouwwYUxAGPrpNMFcGwXla4m5qmWCMohgQaHtpQYOpeOJJhY__VhVhlFl2nURzU84X8l3nCpPSUQw2Yp5l6nmL1cmQidBRMYV2FE5eCX1Bq0GYYLUNePY5zbMWn2w73psZVfCFwJZuPD-dBY8phmMXeMB6IQAlFs3APR3ikPLSqbD9LjwzJ2QKTL_Bytl1doR3969heekIyQeen0VX1bLiq55zmLYQydp_eVN6k57dsIk3vghnXX07nfbW14lgyj_rlh9gutNP462CGHwm_Ba4ksVXMFoahH_qkr6SpJJ2TJueutnrm7Sm1mB1wrfm4ogwcBUWKLZBkngnDkVLyqC3xosneem12giORo0ChJkWO5fPJPf34_qLff31wbyIsWedbgtkhGgEslThM_W3_ETInhQzxfIA093D20kmGk-Pg64Vw8kkHx8jkY8hAalpS-6AQlnfIiveyLsnGmV0iC91yNS44V1R1GfgrkxmQ&v=404"",""vender_id"":""11753316"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10100702453825.html"",""click_url"":"""",""spu_id"":""10100702453825"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10100702453825\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""8889785592785144680\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/239407/23/5818/134693/6614f5bbF73533588/3f95e1157baec135.jpg"",""sku_id"":""10100702453825"",""fuzzy_comment_num"":""200+"",""jdcs_white_label"":""0"",""shop_id"":""11483015"",""good_rate"":""7"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""锦熠颢玩具专营店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""26.8"",""sku_fuzzy_comment_num"":""35"",""sku_price"":""26.8"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""5.0\"",\""tob_price\"":26.80},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""8889785592785144680"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMTAwNzAyNDUzODI1Lmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUVekKx4ZmKiY2tiyuaYMBfCgh-HG7ykLEHUyL5j13hiHfnlNVoZs0fbbmmjWd9r9JOO6kD2wEJTdM32OSitscMLiHwW2LfbL-DgJ16Ep8gJEiS8lwYyQRQQ4-o7RHP0kR476Sor1CU0Ph8EMXAaqrfB5K2z2QEw4KKJN9WBLerbn8k0YJ4q52zMTwLeEBtpCxCctyMvP0nYAipRii7a1uhBw-zT1eKQBK06Dl_dRLrJGHBtxEiO8SsGgEoXQdvKkA8gXsuAM1pT02_bKc9gcPkpQbrxU4KrOnl9qDbSRAN5FUfl7QbaorplgacukiYW97OidvsBOCZBZLVUe4yS-_iqnNSILR57_SyHwi4T_IBiVdf91SK0BJ9Uy2VaDI-xjUsU4pMExzHBxY86oebG0YMMsmKLtrXf2Qv4PJd9AI0N6KV3sLsqfGClt9CSBDGwuahrmtf0S4nIhc8VXRW8vFOExb_4Xa_lY5VbQz9DzYgR1P2QRCeIzOpFD32rZ4tC4SOSB9lNYk_zzT_xcm0W4jxsq4WWHjZBf-zNiA76DLtm2sQzbJO7uKyW0YfumHmHP1YTG03itdZ6hjQeTpMrQn1fcS472AbAm4coIMFw3lewBrR3tiUhplq5jN6c31l2dfpjnij7HWmRtnEp7_bDcVipGNei50EPHb22DsrPasoBOa_m66MDk4JOxxe6IOsY5_KuXa1Y26mmt1RFJYHqjgTM6AZU3i5vMlfsRXSGJ2IA24TXrOMWP4Xvc-lWINir07iB3Nc90Qj1mDDPz1rtCUbxZ3WZJJ4NNZNO34WbBqrEt5ULI2TPws8WbivmgGKrcfXA89gehBLzN1Iee7s0Z6ropY29XAZWJK-nK02mSGK0LsEiQazpTiA-xK94CzhHBqNmdP8hyI8LQ4nmBlM85kSWYt3GOq7j8sF5cSwpN6wF0OnWBpshp2LLAePvC5SoIud4un7Xbwbja5RssVUxvjsVfwKufLDJvyEzWBmObOowBDBFyy_jkl1E1FytziMYdNdpj1HDmjBwD29sf175Y5cxRPqyGTjc8Jn-ilnye24lxf-vXzeVsiXXu-22JIlxAR6X7hiFWOFaqsX-1Wi8ITvTalSoUka8AlSbUhE2_KYCxmbCt5RLDqupELMqzCwTGuXVY0ZHz6wrvfYrcfgNwoMC&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""},{""comment_num"":""0"",""ad_type"":""3"",""color"":""蓝色【黑色笔芯】"",""period_comment_sale"":[{""num"":""5"",""type"":""3""},{""num"":""3"",""type"":""4""},{""num"":""5"",""type"":""8""},{""num"":""7"",""type"":""6""},{""num"":""500+"",""type"":""0""}],""self_run"":0,""flow_order"":""3"",""ad_title"":""汉琼雅乐 签字笔走珠笔子弹头型加粗中性笔学生用签字笔经典办公水笔书法英文速写专用 蓝色【黑色<font class=\""skcolor_ljg\"">笔芯</font>
】"",""ad_spread_type"":""1"",""exposal_url"":""https://im-x.jd.com/dsp/np?log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWgMqhRAAK4RUDv3IrJRaeZ5NBThRNYIMrWCDbZMCPYSSdCbOvupbskWJzuAU-mHdoi5vTsbPNUvuwBHHtKUPlZ1MFMpYi2Aznbzq8Mmdf0cuY8aUcj95rgMnvgqi5FmpPkkrlD1blW8puGZyISj0hQrmR8PuCWiDf6LSsVSqd-t5syvI5zq4EPZOwAkFK24-7cSCEUTQ6a9uWE5KaW_MuUTcQ4Ya5ZuwOnwiu9e6KUCKq8RYPoJbZ4FekwKxcOwzib83U8jUbV8tOWJDwOEjHJu3593JE5iP6BEe5TvzRkv1TGivbxeJNtNeyk_tBesdXstCRSTXNnwiToq2nPNthwPb1fg_h3qO-rKy6myXxHINe0RsVQ64HKs2AYGTeBc3nyp-6XqknWyvLDHQGdWs1Fce8UePRDuxhc0nwQZzpRKNaFIS_FZbqh5liOjmPPKbZJkzWzMtNKcNsQrbTgcVRYQWkMJLpyWy5hL4eCh00T-u_aNBkmWPNuZ3v1EVNU_tcYnqCocDnF-qYJcJFTNJW9y2kaYfODp0S42OfG78oC_aFiOpmOQHw-6_KHZbLk2xe36JVe4Co_H9kacTtLoMPov-g2DF_TtMshRKhrb-2NZCykFzyBCprve8JovSS0stYjmYrretsoQT4MQZ_czS49DWnXSo_4DVq8JipHFjQI-bxbzoAOu0ejirkflWZ-Z9wW461gs05hbTwRmYsm647FT4ULw-a7oNKPSyoROtUEGuzAtj7upDxTuDcymguMeqQWunsQ_HfE0R-UzSjAwSHqBb2jUc10YklCxX0OVUjoohmzIB4u_34usUp2ANg--pVPu3tHe-S5cN9FWACwcl-0zoyRO8FDbj_2SZfCQKd0XuqJAfTPcvmgc-MTvPzloKQLBNW6mC9Kk3s9RIW_Sby2o5Eh92cUKZjAp42rpKhRUJvry0nx-CIngKcZj3uun8V7qxALGHeuIkZYG9zMrjFrG6a-9gKBuJaoWHba-FhfmDLPurrfVg2cuwlwkg4nzJuViGJeLEmUheHGHgzNCWoSmZqn3d-8qmZgdDYhJBklq85G6r5qlVA44sheqAR3NEgBXjmWRb3kbo7wsIVbcJLqnkyv8Jnc1RECIqVj9oUXRGySSCTYYgjtNPZ6zrkgB0nj5HvqQSlvIUTu0CDmy1I1&v=404"",""vender_id"":""683399"",""sku_tag_info"":{""control"":{""hide_add_cart"":""0"",""purchase_button"":""0""},""basic"":{""ad_result_type"":""1"",""sku_shop_vender_type"":""-1"",""producttag"":""0"",""pickstar"":""0"",""image_floating_tier"":""1"",""sku_mark"":""0"",""browse_info_num"":"""",""image_info"":null}},""worldwide"":""1"",""promo_desc"":"""",""link_url"":""https://item.jd.com/10058542174029.html"",""click_url"":"""",""spu_id"":""10058542174028"",""long_image_url"":"""",""extension_id"":""{\""ad\"":\""291\"",\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ch\"":\""2\"",\""organic_atrribution_type\"":\""0\"",\""sku\"":\""10058542174029\"",\""ts\"":\""1728142766\"",\""uniqid\"":\""{\\\""material_id\\\"":\\\""8945140580413467386\\\"",\\\""pos_id\\\"":\\\""291\\\"",\\\""sid\\\"":\\\""352c3dea-ecb4-43ee-bb3e-bee9779be637\\\""}\""}"",""shop_tag"":""2"",""click_url_redirected"":""0"",""sku_cid3"":""37711"",""image_url"":""jfs/t1/73229/6/21332/15967/62fb46f1E25d9588a/a71d4010b061f10c.jpg"",""sku_id"":""10058542174029"",""fuzzy_comment_num"":""500+"",""jdcs_white_label"":""0"",""shop_id"":""679028"",""good_rate"":""23"",""abt"":""0"",""presell"":""0"",""ad_mark_style_bitmap"":""0"",""shop_link"":{""shop_name"":""聚一礼品专营店"",""good_shop"":""0""},""promo_type"":""1"",""pc_price"":""15.9"",""sku_fuzzy_comment_num"":""0"",""sku_price"":""15.9"",""ads_info"":""{\""business_type\"":\""524288\"",\""campaign_type\"":\""3\"",\""ee_info\"":{\""ee_flag\"":\""false\"",\""ee_source\"":\""\""},\""flow_order\"":\""3\"",\""low_price_info\"":{\""price_band\"":0,\""price_level\"":\""3.0\"",\""tob_price\"":15.90},\""organic_atrribution_type\"":\""0\""}\n"",""material_id"":""8945140580413467386"",""client_click_url"":""https://ccc-x.jd.com/dsp/nc?ext=aHR0cDovL2l0ZW0uamQuY29tLzEwMDU4NTQyMTc0MDI5Lmh0bWw&log=jMzX3Je1JHLr3e6wA45J_rrITJPRtjTtXgo-kYTSfUWgMqhRAAK4RUDv3IrJRaeZ5NBThRNYIMrWCDbZMCPYSSdCbOvupbskWJzuAU-mHdoi5vTsbPNUvuwBHHtKUPlZ1MFMpYi2Aznbzq8Mmdf0cuY8aUcj95rgMnvgqi5FmpPkkrlD1blW8puGZyISj0hQrmR8PuCWiDf6LSsVSqd-t5syvI5zq4EPZOwAkFK24-4rJGhV-kTY21NUN3qRO5m2gHUOQ5tZSH-C3a56Ia-mIJKRybO4MAGBX_r2LfbqihiEQXflSa2_y1eG08-rBz1x2RvbEX04_nPuJeydUI5iegwfDpaibu4v_bWGIKzKbGq8Is5FVrZJH0Fp5iZmeBEeu9HxA5pvhaMVlfvidRoqVb_skb_zDaBTokEBNwFldukkbciv95YgF8ZRlbWBtLlyyR4xRn9D4ftlam4MauSL1z887UTxE2NCKvXTHrbKNEoXg6Ar31sT02oBy1poUTrbTk6pwryVg59bVoCtbl9HfjhH5MUCSCerruJMIxABIAWQ8vSbcMP7D1GfK5ktWfusJBKtn5U8TzXHXcKS3Ky2zvhX6l6KGvZm0gO3gKcmWZkkTyYtvsIuS7weA0jiNgJMMlQtVierxQ5oYorkWXBa5xlQ33GyGKuInd77ls0LxUy3uy6op096Qn8ravi2Fn0Msuhsgk2miUBepxlhvyQFroMv8ftdtw-Iukf8KYnqmgX2bKHoEG4niPzL8zEVw3Jxy19geTviJMxOH_NL8q7UJaedq8EBGeGuMqeTXi2eRFo2T-UBqicUlxgASemhe5i2jciiMBxiIWn3D4-Y7ntcqtg0bRn81K-7JzDOXksIaYehdZeGWIGtUWiNZsPgNUDzrVg_VzeLw0ML0nl_ZcO2iid9nrSasshxV90LHMwQIUZ3rUbEhAz8KQmV4NjEt9mBsK4ZeOn6kL3gZ-D7pcqBTIn81tsdVFJpnN_3Kix82S1IJkKTy3Q0_E7DcKieOevrENkJ1mBJffDb4K2iJUnyE53lx5UEZl82q5Lcrt3rWyK1Ncu3Mva6kUU63OeSH6-8l14s0kuezUWeuHfnuaAxslR-OQa0MxvMgBqCIUPOzsj0BBqK7Mky8euhWWzYRnZGe8Eld3Dk7KeZ2vBR1AS591mRVbMWPFQTa1gZTDk7QdSkpw1GKQRVk7yWypFdzDwZ&v=404&clicktype=1&&clicktype =1"",""promo_title"":""""}],""ads_req_info"":""{\""palantir_expids\"":\""S|MIXTAG_SR,S_A_FL_U56470,S_R_FL_U56470,S_A_PROXY_U35636,S_R_P_U35636,S_A_CS_R,S_A_MS_R,S_A_BL_LC,S_A_RS_L49211,S_A_cc_R,S_A_SL_L45608,S_A_FSU5_R,S_A_ThdL_R,S_A_IM_R,S_A_UL_R,S_A_FSU31005_R,S_A_SWA_L51735,S_A_AN_R,S_H_FL_R,S_R_BL_R,S_R_UL_R,S_R_SWA_R,S_U_FL_R,S_S_FL_R,S_G_RL_R,S_C_FL_R,S_C_ER_L55597,S^SAK8_NN_Stest_R,S^SAK8_NN_DGSC_L54719,S^Z^R^A^SAK7_NN_LDNMC_L56072,frontprocedure_42798_test2,S^A^SAK7^SMIX_NN_SMIX-1105_L48533,S^Z^R^SAK7_NN_APF_R,S^Z^R^SAK7_NN_SAD_R,S^Z^R^SAK7_NN_JSPU114_R,S^Z^R^SAK7_NN_LDMC_R,Searchlist_4213_test1,S^Z^R^SAK7_NN_JSPU-12_R,onebox_3775_test_ql,S^Z^R^SAK7_NN_JOB-486_L31560,S^I^Z^A_NN_SYHD_R,S^I^Z^A_NN_FU_R,S^I^Z^A_NN_FU-16536_R,S^I^Z^A_NN_FUGQ_R,S^I^Z^A_NN_FU18505_LC,S^I^Z^A_NN_APPLIVE_R,S^I^Z^A_NN_AppHome34933_R,S^I^Z^A_NN_app34933_R,S^I^Z^A_NN_IFCL_R,S^I^Z^A_NN_XRYHXSD_R,S^I^Z^A_NN_DCLC_R,S^I^Z^A_NN_DBTLQY_R,S^I^Z^A_NN_chaopin202407_R,S^I^Z^A_NN_202407chaopin_R,S^I^Z^A_NN_dhttts_R,APPHomeNew_42918_base,S^I^Z^A_NN_SYTLYS2-1022_L42084,APPHomeNew_48496_base,S^I^Z^A_NN_SYSSKYS-1530_L51192,AppHome_31632_base,S^I^Z^A_NN_SYTLCQ-1021_L41999,S^I^Z^A_NN_APPFLOOR-524_R,AppHome_35270_E,S^I^Z^A_NN_appusertest-845_L35416,AppHome_43142_base,S^I^Z^A_NN_ICONBI-1068_L42766,PcABTest_16290_pre1,S^I^Z^A_NN_FSU1277-239_L26137,cpabtest_44896_pre2,S^I^Z^A_NN_chaop-1122_R,frontprocedure_39636_test1,S^I^Z^A_NN_IFL-934_L38687,S^A^SAK7_NN_MLA_L38379,S^A^SAK7_NN_USWA_R,S^A^SAK7_NN_BIshopinfluence_R,S^A^SAK7_NN_SDAL_R,S^A^SAK7_NN_FIS_R,S^A^SAK7_NN_BYBT_R,S^A^SAK7_NN_LBF_R,S^A^SAK7_NN_iga_R,PcABTest_13634_pre1,S^A^SAK7_NN_FIL-219_L26001,PcABTest_17992_base,S^A^SAK7_NN_FIL2-211_L25894,PcABTest_17994_base,S^A^SAK7_NN_FIS2-203_L25876,PcABTest_17995_base,S^A^SAK7_NN_FIS3-206_L25882,Searchlist_54865_base2,S^A^SAK7_NN_SAdEffect-1769_L54092,Searchlist_56246_base,S^A^SAK7_NN_ChannelExp-1853_R,Searchlist_6624_test2,S^A^SAK7_NN_SST-885_L36414,frontprocedure_33646_pre2,S^A^SAK7_NN_pricefilter2-830_R,S^A^SAK7_NN_PF3-835_L35278,frontprocedure_34753_test,S^A^SAK7_NN_NWSS-784_L34719,frontprocedure_35209_test,S^A^SAK7_NN_pricefilter1-832_L35214,frontprocedure_39636_test1,S^A^SAK7_NN_ifts-953_L38968,frontprocedure_42798_test2,S^A^SAK7_NN_MX-1073_R,o2osearch_37213_test2,S^A^SAK7_NN_LHT-926_L37634,S^A_NN_ShopTag_R,S^A_NN_FSUFreePost_R,S^A_NN_jiagoutanchuang_R,S^A_NN_jjk5_R,S^A_NN_aggsales_R,S^A_NN_ShopNoEntrance_R,S^A_NN_jjk14_R,S^A_NN_jjk18_R,S^A_NN_jjk19_R,S^A_NN_FSU1_R,S^A_NN_FSU4_R,S^A_NN_FSU10_R,S^A_NN_FSUAppleCpd_R,S^A_NN_PcABTest17853_R,S^A_NN_BiSuper_R,S^A_NN_FSU15_R,S^A_NN_FSU14_R,S^A_NN_FSU13_R,S^A_NN_FSU12_R,S^A_NN_FSUACTIVITY_R,S^A_NN_FSU126_R,S^A_NN_PCA1213_R,S^A_NN_PCA1216_R,S^A_NN_AppCard_R,S^A_NN_FSU16_R,S^A_NN_FSU17_R,S^A_NN_FSU18_R,S^A_NN_FSU28337_R,S^A_NN_FSU23911_R,S^A_NN_FSU22522_R,S^A_NN_OldCard_R,S^A_NN_FSU33206_R,S^A_NN_FSU20_R,S^A_NN_FreePost_R,S^A_NN_jijianmoshi_R,S^A_NN_FSU64_LC,S^A_NN_longimage_R,S^A_NN_jijianmoshinew_R,S^A_NN_jiegouhua_R,S^A_NN_duanping_R,S^A_NN_browsepv_R,S^A_NN_FSUNearlyChannel_R,S^A_NN_biaoqianjianhua_R,S^A_NN_yushoutansuo_R,S^A_NN_dianpubiaoqianzhanshi_R,S^A_NN_jjk2_R,S^A_NN_jjk6_R,S^A_NN_jjk9_R,S^A_NN_zerosales_R,S^A_NN_O2O8866_R,S^A_NN_jjk11_R,S^A_NN_PostclickPicSearch_R,S^A_NN_popHotSale_R,S^A_NN_jjk13_R,S^A_NN_shy1_R,S^A_NN_searchtemplate_R,S^A_NN_jjk12_R,S^A_NN_SalePrice_R,S^A_NN_pricetagHighlight_R,S^A_NN_jjk16_R,S^A_NN_AttrHighlight_R,S^A_NN_SwaApplet_R,S^A_NN_OutletsTabTest_R,PZG_44501_Pre1,S^A_NN_photosearch21336-1296_L48245,PZG_45018_Pre1,S^A_NN_photosearch-1291_L48220,PcABTest_13634_pre1,S^A_NN_FSU6-62_L22869,PcABTest_16683_pre2,S^A_NN_FSUshopgrade-160_R,PcABTest_25879_base1,S^A_NN_AppSkuTag-568_L31715,S^A_NN_FSU25879-597_L31879,PcABTest_29416_pre1,S^A_NN_ChooseGuide-749_L33716,PcABTest_30308_pre1,S^A_NN_FSU31005-526_L31124,PcABTest_30519_test1,S^A_NN_FSU30519-567_L31704,PcABTest_42880_test1,S^A_NN_icon2live-1253_R,S^A_NN_icon2liveastest-1257_L46703,PcABTest_7268_pre1,S^A_NN_FSU9-109_L23307,Searchlist_12851_base,S^A_NN_FSU7-94_R,Searchlist_16239_base3,S^A_NN_FSU11-145_L24546,Searchlist_4213_test1,S^A_NN_FSU2-15_R,S^A_NN_FSU22-963_L39412,Searchlist_44491_test,S^A_NN_pinzhuanxiagua-1163_L44558,Searchlist_44928_test1,S^A_NN_remove-1126_L44233,Searchlist_45468_test3,S^A_NN_competitor-1355_L48764,Searchlist_46057_test,S^A_NN_FSUTopShopMultiShop-1277_L47947,Searchlist_50841_base1,S^A_NN_jjk10-1829_L55096,Searchlist_53415_base,S^A_NN_PostPriceDiscount-1818_L55042,Searchlist_53983_base1,S^A_NN_jjk17-1929_L56529,Searchlist_55222_Test2,S^A_NN_NewTabTest-1946_R,Searchlist_57383_base,S^A_NN_NewTabHeadTemplate-1950_R,Searchlist_57384_base,S^A_NN_NewTabHeadAnimation-1952_R,Searchlist_6624_test2,S^A_NN_FSU3-884_L36404,frontprocedure_30955_test,S^A_NN_SkuTitle-549_L31412,frontprocedure_31248_base2,S^A_NN_ShopTab-688_L32820,frontprocedure_31553_test,S^A_NN_FSU31553-610_L31949,frontprocedure_33206_testwhole,S^A_NN_accsales-1716_L53571,frontprocedure_33213_base2,S^A_NN_FSU19-698_L32960,frontprocedure_33221_pre1,S^A_NN_AddrSelect-677_L32792,frontprocedure_33639_NewmiddleHave1,S^A_NN_bangdan-1069_L42793,frontprocedure_33654_hengshu,S^A_NN_WholeCard-717_L33348,S^A_NN_flow-1584_L51774,frontprocedure_33728_testcardnew,S^A_NN_jjk1-1390_L49298,frontprocedure_34486_test1,S^A_NN_BAppShop-747_R,frontprocedure_34790_test5,S^A_NN_o2osk-1687_L53426,frontprocedure_35044_pre3,S^A_NN_jjk3-1443_L49934,frontprocedure_35046_base,S^A_NN_FSU35046-729_L33530,frontprocedure_35539_pre1,S^A_NN_FSU35539-809_L34833,frontprocedure_36008_test,S^A_NN_versionBsearchA-824_L35045,frontprocedure_36551_test,S^A_NN_pingpujiaonang-1367_L48827,frontprocedure_37507_test,S^A_NN_BISuperShop-883_L36401,frontprocedure_38129_base1,S^A_NN_fenweipingpu-1340_L48667,frontprocedure_39636_test1,S^A_NN_FSU21-937_L38677,frontprocedure_40457_TEST4,S^A_NN_SearchNoResult-1087_L43048,frontprocedure_41710_base1,S^A_NN_FSU23-994_L40010,frontprocedure_44597_base2,S^A_NN_bujuyouhua-1337_L48544,frontprocedure_50071_base2,S^A_NN_jjk7-1481_L50560,frontprocedure_50644_base2,S^A_NN_jjk8-1500_L50875,frontprocedure_50959_base,S^A_NN_jjk4-1451_L50114,frontprocedure_51773_T1,S^A_NN_O2Oyhq-1599_L52243,frontprocedure_52293_T1,S^A_NN_o2opk-1762_R,frontprocedure_53242_pre1,S^A_NN_jjk15-1907_R,o2osearch_52259_base,S^A_NN_O2O10140-1694_L53447,o2osearch_5573_T1,S^A_NN_FSU8-108_L23292,onebox_3775_test_ql,S^A_NN_FSU-487_R,GA|G*S_A_SL_L24967,G*S_A_FL_L29842,G*S_A_SL_L30402,G*S_A_ThdL_L30625,G*S_A_FL_L34894,G*S_A_FL_L32571,G*S_A_FL_L39344,G*S_A_FL_L42097,G*S_A_FL_L46401,G*S_R_FL_L46859,G*S_A_FL_L53007,G*S_A_FL_L55534,G*S_A_FL_L56037,G*S_A_AN_L55309,G*S_A_SWA_L51620;F|MIXTAG_FR,F_BA_FL_L16336|\"",\""pos_id\"":291}\n"",""yushouList"":{},""priceList"":[{""p"":""9.90"",""op"":""9.90"",""mp"":""9.90"",""id"":""J_71000826317""},{""p"":""12.00"",""op"":""12.00"",""mp"":""0.00"",""id"":""J_10109723167257""},{""p"":""11.30"",""op"":""11.30"",""mp"":""47.00"",""id"":""J_10106611371633""},{""p"":""28.80"",""op"":""28.80"",""mp"":""99.00"",""id"":""J_10100702453831""},{""p"":""13.58"",""op"":""13.58"",""mp"":""13.58"",""id"":""J_50299082650""},{""p"":""22.10"",""op"":""22.10"",""mp"":""133.70"",""id"":""J_10118847307705""},{""p"":""25.80"",""op"":""25.80"",""mp"":""49.80"",""id"":""J_10098889337927""},{""p"":""8.00"",""op"":""8.00"",""mp"":""8.00"",""id"":""J_10043913504894""},{""p"":""11.90"",""op"":""11.90"",""mp"":""0.00"",""id"":""J_10109182744069""},{""p"":""10.90"",""op"":""10.90"",""mp"":""10.90"",""id"":""J_10030615812356""},{""p"":""18.06"",""op"":""18.06"",""mp"":""98.70"",""id"":""J_10112268296062""},{""p"":""15.90"",""op"":""15.90"",""mp"":""15.90"",""id"":""J_10058542174029""},{""p"":""13.50"",""op"":""13.50"",""mp"":""46.50"",""id"":""J_10112269081696""},{""p"":""55.00"",""op"":""55.00"",""mp"":""0.00"",""id"":""J_10108036549129""},{""p"":""21.00"",""op"":""21.00"",""mp"":""21.00"",""id"":""J_10043913504905""},{""p"":""28.69"",""op"":""33.00"",""mp"":""0.00"",""id"":""J_10097609863763""},{""p"":""26.80"",""op"":""26.80"",""mp"":""99.00"",""id"":""J_10100702453825""},{""p"":""14.20"",""op"":""14.20"",""mp"":""14.20"",""id"":""J_71000826322""},{""p"":""6.46"",""op"":""6.59"",""mp"":""0.00"",""id"":""J_10099329881200""}]}
"";
//fury serialize

Fury fury = Fury.builder().withLanguage(Language.JAVA)
                    .requireClassRegistration(false)
                    .build();
 byte[] bytes = fury.serialize(data);
// fury serialize size 184434B

//JDK serialize
ByteArrayOutputStream outputStream = new ByteArrayOutputStream(1024);
ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
objectOutputStream.writeObject(data);
objectOutputStream.flush();
// JDK serialize 94517

环境：JDK17
`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Owlj3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Owmau,fury,2395104942,1868,NA,shaoxiao,11438257,,,NA,2024-10-05T16:11:47Z,2024-10-05T16:11:47Z,问题还是大字符串问题造成的，如上述字符串数据，jdk17版本序列化fury就比jdk序列化大很多,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Owmau/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1868,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzSPG,fury,2395808710,1868,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T03:15:08Z,2024-10-07T03:15:08Z,"The string you provided contains Chinese character, Fury use utf16 encoding instead of utf8 encoding, which cause a bigger payload. We do have plans for utf8 encoding, but we want to provide a faster utf-8 encoding implementation than JDK, so we have not  included UTF8 encoding currently. 

Utf8 decoding has been supported for back compatibility in https://github.com/apache/fury/pull/806

See https://github.com/apache/fury/issues/1754 for more detailed about encoding. There are big spaces for performance improvement using techniques like SIMD","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6OzSPG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1872,https://api.github.com/repos/apache/fury/issues/1872,fury,2569575916,1872,Fury-parent 0.8.0 artifact was not uploaded to Maven central,juliojgd,28807086,Julio Gómez Díaz,,CLOSED,2024-10-07T07:21:08Z,2024-10-07T20:52:35Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.8.0

### Component(s)

Java

### Minimal reproduce step

Search at Maven Central: https://central.sonatype.com/artifact/org.apache.fury/fury-parent 

you will find 0.8.0 for fury-core but you won't find 0.8.0 fury-parent.

### What did you expect to see?

0.8.0 for fury-parent present in Maven central

### What did you see instead?

fury-parent 0.8.0 is not present, the latest one is 0.7.1

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1872/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O4hfQ,fury,2397181904,1872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T15:01:31Z,2024-10-07T15:01:31Z,"Thanks for reporting this, we will try to release this as soon as possible","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O4hfQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O5Qcz,fury,2397374259,1872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T16:22:27Z,2024-10-07T16:22:27Z,"Hi @juliojgd  does https://repository.apache.org/content/repositories/orgapachefury-1050/ work for you? If it works, I can publish it to maven central now","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O5Qcz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O6A3q,fury,2397572586,1872,NA,juliojgd,28807086,Julio Gómez Díaz,,NA,2024-10-07T18:08:45Z,2024-10-07T18:08:45Z,Looks good,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O6A3q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1872,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O7KOM,fury,2397873036,1872,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-07T20:52:35Z,2024-10-07T20:52:35Z,fury-parent pom released now,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6O7KOM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/1878,fury,2576224008,1878,ClassLoader issues reading proxy with ThreadPoolFury,theigl,661800,Thomas Heigl,thomas@umschalt.com,CLOSED,2024-10-09T15:11:09Z,2024-10-27T16:48:01Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.8.0

### Component(s)

Java

### Minimal reproduce step

It is quite difficult to simulate this behavior:

```java
import org.apache.fury.Fury;
import org.apache.fury.ThreadSafeFury;
import org.apache.fury.config.Language;
import org.junit.jupiter.api.Test;

import java.io.Serializable;
import java.lang.reflect.*;
import java.util.concurrent.CountDownLatch;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ProxySerializerTest {
	
	static class MyClassLoader extends ClassLoader {
		//dummy implementation
	}
	
	@Test
	void readProxy() throws InterruptedException, ClassNotFoundException {
		final MyClassLoader myClassLoader = new MyClassLoader();
		final Class<?> bf = Class.forName(getClass().getPackageName() + "".TestClass$TestInterface"", true, myClassLoader);
		final Class<?>[] interfaces = new Class<?>[] {bf, Serializable.class};
		final Object type = Proxy.newProxyInstance(myClassLoader, interfaces, (proxy, method, args) -> null);
		
		final ThreadSafeFury fury = Fury.builder()
				.withClassLoader(myClassLoader)
				.withLanguage(Language.JAVA)
				.requireClassRegistration(false)
				.buildThreadSafeFuryPool(0, 10);

		final CountDownLatch latch = new CountDownLatch(1);
		new Thread(() -> {
			final byte[] s = fury.serialize(type);
			assertEquals(fury.deserialize(s), type);
			latch.countDown();
		}).start();
		latch.await();
	}
}
```

In the same package, put the following class:

```java
public class TestClass {

	interface TestInterface {

	}
}
```

### What did you expect to see?

I can read proxies for private interfaces loaded during application startup.

### What did you see instead?

The following exception is thrown in a Spring Boot app when reading a proxy created by Spring's `SerializableTypeWrapper`:

```java
Caused by: java.lang.IllegalArgumentException: non-public interface is not defined by the given loader
	at java.base/java.lang.reflect.Proxy$ProxyBuilder.proxyClassContext(Proxy.java:812)
	at java.base/java.lang.reflect.Proxy$ProxyBuilder.<init>(Proxy.java:638)
	at java.base/java.lang.reflect.Proxy.lambda$getProxyConstructor$1(Proxy.java:440)
	at java.base/jdk.internal.loader.AbstractClassLoaderValue$Memoizer.get(AbstractClassLoaderValue.java:329)
	at java.base/jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(AbstractClassLoaderValue.java:205)
	at java.base/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:438)
	at java.base/java.lang.reflect.Proxy.newProxyInstance(Proxy.java:1034)
	at org.apache.fury.serializer.JdkProxySerializer.read(JdkProxySerializer.java:83)
	at org.apache.fury.Fury.readDataInternal(Fury.java:958)
	at org.apache.fury.Fury.readRef(Fury.java:873)
	at org.apache.fury.serializer.ObjectSerializer.readOtherFieldValue(ObjectSerializer.java:368)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:312)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:246)
	at org.apache.fury.serializer.ReplaceResolveSerializer.readObject(ReplaceResolveSerializer.java:316)
	at org.apache.fury.serializer.ReplaceResolveSerializer.read(ReplaceResolveSerializer.java:305)
	at org.apache.wicket.spring.SpringBeanLocatorFuryRefCodec_0.readFields1$(SpringBeanLocatorFuryRefCodec_0.java:159)
	at org.apache.wicket.spring.SpringBeanLocatorFuryRefCodec_0.read(SpringBeanLocatorFuryRefCodec_0.java:192)
```

The class was loaded by Spring during application startup using the `AppClassLoader`. `ThreadPoolFury` always uses the current thread context which is `TomcatEmbeddedClassLoader` in my case. It is not possible to force `ThreadPoolFury` to use the class loader provided to Fury.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1878/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PPQH1,fury,2403140085,1878,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-09T18:57:39Z,2024-10-09T18:57:39Z,Could you try to invoke ThreadSafeFury#setClassLoader? It should work,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PPQH1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PP_j2,fury,2403334390,1878,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-10-09T20:05:39Z,2024-10-09T20:05:39Z,"I will try this in my application tomorrow! It does not work in my test, but I just realized that my test is flawed.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PP_j2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PTr9R,fury,2404302673,1878,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-10-10T07:36:32Z,2024-10-10T07:36:32Z,"Unfortunately, it does not work. Here is a simplified test-case that demonstrates the issue:

```java
import org.apache.fury.Fury;
import org.apache.fury.ThreadSafeFury;
import org.apache.fury.config.Language;
import org.junit.jupiter.api.Test;

import java.util.concurrent.CountDownLatch;

import static org.junit.jupiter.api.Assertions.assertInstanceOf;

class ClassLoaderTest {

	static class MyClassLoader extends ClassLoader {}

	@Test
	void shouldUseProvidedClassLoader() throws InterruptedException {
		final MyClassLoader myClassLoader = new MyClassLoader();
		final ThreadSafeFury fury = Fury.builder()
				.withClassLoader(myClassLoader)
				.withLanguage(Language.JAVA)
				.requireClassRegistration(false)
				.buildThreadSafeFuryPool(1, 1);
		fury.setClassLoader(myClassLoader);

		final CountDownLatch latch = new CountDownLatch(1);
		new Thread(() -> {
			final ClassLoader t = fury.getClassLoader();
			assertInstanceOf(MyClassLoader.class, t);
			latch.countDown();
		}).start();
		latch.await();
	}
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PTr9R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pkt5B,fury,2408767041,1878,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-13T00:45:28Z,2024-10-13T00:45:28Z,"It's not how this API be used, you should invoke `fury.setClassLoader(myClassLoader);` just before you invoke `Fury#deserialize`. This set classloader is cached as a thread local variable, thus is only visible on your setting thread","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pkt5B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PlHD9,fury,2408870141,1878,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-10-13T07:54:36Z,2024-10-13T07:54:36Z,"Ah OK! Thanks for clarifying this.

Is there a reason the API has to be so complicated for `ThreadPoolFury`? I understand that it has to be this way if I want to customize the class loader on a per-call or per-thread basis. But in my case I just want to use a ""hard-coded"" class  loader for each and every thread. Could it not use the class loader passed to `.withClassLoader(xyz)` by default?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PlHD9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po-Xw,fury,2409883120,1878,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-14T03:40:41Z,2024-10-14T03:40:41Z,"You can do that by:

```java
new ThreadPoolFury(classloader -> Fury.builder()
				.withClassLoader(myClassLoader)
				.withLanguage(Language.JAVA)
				.requireClassRegistration(false))
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po-Xw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po-nB,fury,2409884097,1878,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-14T03:42:01Z,2024-10-14T03:42:01Z,"But this is indeed a bug, we need to use classloader set in FuryBuilder for ThreadSafeFury too. Would you like to submit a PR?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po-nB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PrCAK,fury,2410422282,1878,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-10-14T08:27:23Z,2024-10-14T08:27:23Z,"I'm on holiday for the next 7-10 days. If the issue is still open when I come back, I can take a look!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PrCAK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1878,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RcOU9,fury,2440095037,1878,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-10-27T16:48:01Z,2024-10-27T16:48:01Z,"Fantastic, thanks a lot @Aliothmoon and @chaokunyang!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RcOU9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1879,https://api.github.com/repos/apache/fury/issues/1879,fury,2578393583,1879,IllegalAccessError thrown from JIT serializer with async compilation,theigl,661800,Thomas Heigl,thomas@umschalt.com,CLOSED,2024-10-10T10:35:28Z,2024-10-13T03:18:47Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.8.0

### Component(s)

Java

### Minimal reproduce step

I'm trying to serialize the static inner class `DelegatedPage` from [SessionQotaManagingDataStore](https://github.com/wicketstuff/core/blob/master/datastores-parent/datastore-common/src/main/java/org/wicketstuff/datastores/common/SessionQuotaManagingDataStore.java) that is used in Apache Wicket.

Fury can serialize the class just fine but as soon as async code generation kicks in, an `IllegalAccessError` is thrown.

The following test demonstrates the problem. It does not fail, but it logs the error to the console. If `withAsyncCompilation` is set to `false`, the error goes away.

```java
package com.synexit.base.web.util.serializer.repro;

import org.apache.fury.Fury;
import org.apache.fury.ThreadSafeFury;
import org.apache.fury.config.Language;
import org.junit.jupiter.api.Test;

import java.io.Serializable;
import java.util.concurrent.ConcurrentLinkedQueue;

import static org.junit.jupiter.api.Assertions.assertNotNull;

class JitTest {

	@Test
	void shouldSerializeWithAsyncCompilation() throws InterruptedException {
		final ThreadSafeFury fury = Fury.builder()
				.withLanguage(Language.JAVA)
				.requireClassRegistration(false)
				.withRefTracking(true)
				.withAsyncCompilation(true)
				.buildThreadSafeFuryPool(1, 1);

		final Store store = new Store();
		store.addPage(new Store.SerializedPage(1));

		final Object v = store.getData();
		for (int i = 0; i < 1000; i++) {
			final byte[] d = fury.serialize(v);
			final Object deserialized = fury.deserialize(d);
			assertNotNull(deserialized);
		}
		Thread.sleep(1000);
		for (int i = 0; i < 1000; i++) {
			final byte[] d = fury.serialize(v);
			final Object deserialized = fury.deserialize(d);
			assertNotNull(deserialized);
		}
	}

	public static class Store {
	
		public static final class SerializedPage {
	
			private final int pageId;
			public SerializedPage(int pageId) {
				this.pageId = pageId;
			}
	
			public int getPageId() {
				return pageId;
			}
		}
		
		private final CountLimitedData data;
	
		public Store() {
			this.data = new CountLimitedData(1);
		}
		
		public void addPage(SerializedPage page) {
			this.data.addPage(page);
		}
	
		public Object getData() {
			return data;
		}
	
		abstract static class SessionData implements Serializable {
			final ConcurrentLinkedQueue<DelegatedPage> pages = new ConcurrentLinkedQueue();
	
			SessionData() {
			}
	
			synchronized void addPage(SerializedPage page) {
				this.pages.add(new DelegatedPage(page.getPageId(), 0));
			}
		}
	
		static class DelegatedPage implements Serializable {
			public final int pageId;
			public final long pageSize;
	
			public DelegatedPage(int pageId, long pageSize) {
				this.pageId = pageId;
				this.pageSize = pageSize;
			}
		}
	
		static class CountLimitedData extends SessionData {
			private final int maxPages;
	
			public CountLimitedData(int maxPages) {
				this.maxPages = maxPages;
			}
		}
	}
}
```

### What did you expect to see?

Classes that can be serialized with code generation should be serializable with async code generation as well.

### What did you see instead?

```
java.lang.IllegalAccessError: failed to access class org.wicketstuff.datastores.common.SessionQuotaManagingDataStore$DelegatedPage from class org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0 (org.wicketstuff.datastores.common.SessionQuotaManagingDataStore$DelegatedPage is in unnamed module of loader 'app'; org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0 is in unnamed module of loader org.apache.fury.util.ClassLoaderUtils$ByteArrayClassLoader @31123c7a)
	at org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0.<init>(SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0.java:59)
	at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:129)
	at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104)
	at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:941)
	at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:938)
	at org.apache.fury.builder.JITContext.lambda$registerSerializerJITCallback$0(JITContext.java:94)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Exception in thread ""fury-jit-compiler-2"" java.lang.IllegalAccessError: failed to access class org.wicketstuff.datastores.common.SessionQuotaManagingDataStore$DelegatedPage from class org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0 (org.wicketstuff.datastores.common.SessionQuotaManagingDataStore$DelegatedPage is in unnamed module of loader 'app'; org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0 is in unnamed module of loader org.apache.fury.util.ClassLoaderUtils$ByteArrayClassLoader @31123c7a)
	at org.wicketstuff.datastores.common.SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0.<init>(SessionQuotaManagingDataStore_SizeLimitedDataFuryRefCodec_0.java:59)
	at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:129)
	at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104)
	at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:941)
	at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:938)
	at org.apache.fury.builder.JITContext.lambda$registerSerializerJITCallback$0(JITContext.java:94)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1879/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1879,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PktsC,fury,2408766210,1879,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-13T00:41:30Z,2024-10-13T00:41:30Z,"Hi @theigl , thanks for reporting this bug. This is not easy to capture since it doesn't affect the execution but only performance. I fixed it in https://github.com/apache/fury/pull/1883","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PktsC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/1880,fury,2580959913,1880,[Question] Cannot add field in `CompatibleMode.SCHEMA_CONSISTENT` mode in deserialization operation ? Or is it a bug ?,liqipeng,6264774,,,CLOSED,2024-10-11T09:55:59Z,2024-10-14T06:30:35Z,"### Question

Language: Java

Version: 0.8.0

Step1: Serialize object **without** ```private Integer age;```
```
public class Demo1 {
    @Data
    public static class Class1 {
        private String name;
        // private Integer age;
    }
    public static void main(String[] args) throws IOException {
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .withRefTracking(true)
                .requireClassRegistration(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .build();
        File file = new File(""test.dat"");
        
        Class1 obj1 = new Class1();
        obj1.setName(""Tom"");
        byte[] data1 = fury.serialize(obj1);
        FileUtils.writeByteArrayToFile(file, data1);
    }
}
```
Step2: Derialize object **with** ```private Integer age;```
```
public class Demo1 {
    @Data
    public static class Class1 {
        private String name;
        private Integer age;
    }
    public static void main(String[] args) throws IOException {
        Fury fury = Fury.builder()
                .withLanguage(Language.JAVA)
                .withRefTracking(true)
                .requireClassRegistration(false)
                .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
                .build();
        File file = new File(""test.dat"");
        
        byte[] data2 = FileUtils.readFileToByteArray(file);
        Class1 obj2 = (Class1) fury.deserialize(data2);
        Objects.equals(""Tom"", obj2.name);
    }
}
```
Throw exception:
```
Exception in thread ""main"" org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [Demo1.Class1(name=null, age=6)]
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserialize(Fury.java:796)
	at org.apache.fury.Fury.deserialize(Fury.java:714)
	at com.example.Demo1.main(Demo1.java:33)
Caused by: java.lang.IllegalArgumentException: 2
	at org.apache.fury.util.Preconditions.checkArgument(Preconditions.java:52)
	at org.apache.fury.serializer.StringSerializer.readUtf8(StringSerializer.java:252)
	at org.apache.fury.serializer.StringSerializer.readCompressedCharsString(StringSerializer.java:247)
	at com.example.Demo1_Class1FuryRefCodec_0.read(Demo1_Class1FuryRefCodec_0.java:69)
	at org.apache.fury.Fury.readDataInternal(Fury.java:958)
	at org.apache.fury.Fury.readRef(Fury.java:860)
	at org.apache.fury.Fury.deserialize(Fury.java:792)
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1880/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pjls6,fury,2408471354,1880,NA,liqipeng,6264774,,,NA,2024-10-12T09:16:56Z,2024-10-12T09:16:56Z,"Currently, SCHEMA_CONSISTENT and COMPATIBLE modes are completely incompatible. I think that COMPATIBLE mode keep compatible with SCHEMA_CONSISTENT mode maybe necessary, so that SCHEMA_CONSISTENT mode can be easily switched to SCHEMA_CONSISTENT mode when the need for SCHEMA changes occurs.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pjls6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pjnh6,fury,2408478842,1880,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-12T09:43:00Z,2024-10-12T09:43:00Z,"We don't have plan to make SCHEMA_CONSISTENT and COMPATIBLE modes compatible with each other. If your scheme may change, you need to use COMPATIBLE from the start","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pjnh6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PlrTh,fury,2409018593,1880,NA,liqipeng,6264774,,,NA,2024-10-13T15:19:01Z,2024-10-13T15:19:01Z,"> Currently, SCHEMA_CONSISTENT and COMPATIBLE modes are completely incompatible. I think that COMPATIBLE mode keep compatible with SCHEMA_CONSISTENT mode maybe necessary, so that SCHEMA_CONSISTENT mode can be easily switched to SCHEMA_CONSISTENT mode when the need for SCHEMA changes occurs.

@chaokunyang 不好意思，可能蹩脚英文没说清楚，我想表达的是可以考虑一种单向的兼容，仅支持从SCHEMA_CONSISTENT迁移至COMPATIBLE即可。因为可能schema设计者一开始考虑不够充分使用了SCHEMA_CONSISTENT，后来有需求增加字段，他可以将模式切换为兼容模式来实现需求。

对fury底层原理暂不了解，先猜测假设一下，如果实现这种单向模式的兼容，不需要对fury底层做变更，更多是api层面的兼容，当选择COMPATIBLE模式执行反序列化时先探测一下二进制数据的模式（假定有相应的标识字段），如果实际数据是来自SCHEMA_CONSISTENT则正常按SCHEMA_CONSISTENT反序列化即可。

这样的兼容是可以提高fury的易用性的。目前默认为SCHEMA_CONSISTENT，如果初级使用者没深入理解这两种模式的差异是很容易做出错误决策的，当前两种模式完全不支持迁移会导致切换模式成本很高。","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PlrTh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pl2G4,fury,2409062840,1880,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-13T17:39:12Z,2024-10-13T17:39:12Z,"We can't do that. Schema compatible mode need to write class meta for deserialization, scheme consistent mode doesn't write that meta","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pl2G4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PouvV,fury,2409819093,1880,NA,liqipeng,6264774,,,NA,2024-10-14T02:34:33Z,2024-10-14T02:34:33Z,"@chaokunyang 目前是否有工具api可以探测序列化数据是哪种模式(SCHEMA_CONSISTENT或者COMPATIBLE)呢？
（类似于探测JDK 序列化的工具```JavaSerializer.serializedByJDK(byte[] data)```）","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PouvV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po6Gh,fury,2409865633,1880,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-14T03:17:14Z,2024-10-14T03:17:14Z,"We don't provide such tools, you can write such a header before write FURY serialized data","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Po6Gh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1880,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pp_C2,fury,2410148022,1880,NA,liqipeng,6264774,,,NA,2024-10-14T06:30:34Z,2024-10-14T06:30:34Z,"> We don't provide such tools, you can write such a header before write FURY serialized data

Got it. Thank you for your reply.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Pp_C2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1884,https://api.github.com/repos/apache/fury/issues/1884,fury,2583630663,1884,"[Java] In an environment where the ThreadContextClassLoader is not an AppClassLoader, deserialization during asynchronous execution in ForkJoinPool#commonPool may result in a ClassNotFoundException error.",Aliothmoon,107878625,Aliothmoon,,CLOSED,2024-10-13T04:19:04Z,2024-10-26T07:14:50Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury  0.8.0
JDK openjdk version ""17.0.4""

### Component(s)

Java

### Minimal reproduce step

```java
package com.alioth.bootstrap;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Loading classes from external locations
 * similar to the behavior of Spring Boot's LaunchedURLClassLoader
 *
 */
public class ExternalClassLoader extends ClassLoader {

    /**
     * Classes to be loaded externally
     */
    public static final String[] externalClass = {
            ""com.alioth.bootstrap.ExternalClassBootStrap"",
            ""com.alioth.bootstrap.ExternalClass""
    };

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        for (String clz : externalClass) {
            if (clz.equals(name)) {
                Class<?> c = findLoadedClass(name);
                if (c == null) {
                    try {
                        int index = name.lastIndexOf('.');
                        String pos = name.substring(index + 1) + "".class"";
                        // prefix System.getProperty(""user.dir"")
                        Path path = Paths.get(pos);
                        byte[] bytes = Files.readAllBytes(path);
                        return defineClass(name, bytes, 0, bytes.length);
                    } catch (Exception ignore) {
                    }
                }
            }

        }
        return super.findClass(name);
    }
}

```
```java
/**
 * Classes used for Fury testing
 * Should not appear in the default ClassPath.
 */
public class ExternalClass {
    private int a;
    private String b;

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public String getB() {
        return b;
    }

    public void setB(String b) {
        this.b = b;
    }
}


```

```java
package com.alioth.bootstrap;

import org.apache.fury.Fury;
import org.apache.fury.ThreadLocalFury;
import org.apache.fury.config.Language;

import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;


/**
 * The class used to launch tests  
 * Should not appear in the default ClassPath.
 */
public class ExternalClassBootStrap {

    public static final ClassLoader loader = ExternalClassBootStrap.class.getClassLoader();

    public static final ThreadLocalFury FURY = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withClassLoader(loader)
            .buildThreadLocalFury();


    static byte[] bytes;

    static {
        ExternalClass obj = new ExternalClass();
        obj.setA(1);
        obj.setB(""2"");
        bytes = FURY.serialize(obj);
    }

    public static void main(String[] args) throws Exception {

        // The withClassLoader method of FuryBuilder only affects the Fury instance in the current thread, and does not affect Fury instances in other threads.
        // Other Fury instances will, by default, use the ThreadContextClassLoader.
        System.out.println(Thread.currentThread() + "" Classloader "" + loader);
        Object o1 = FURY.deserialize(bytes);


        ForkJoinTask<?> task = ForkJoinPool.commonPool().submit(() -> {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            System.out.println(Thread.currentThread() + "" ClassLoader "" + cl);
            // ClassNotFoundException occurred because the ThreadContextClassLoader was used instead of the specified loader.
            Object o2 = FURY.deserialize(bytes);
        });

        // Wait for a moment to prevent the ForkJoinPool tasks from being executed by the main thread instead of asynchronously.
        Thread.sleep(500);

        task.get();
    }
}

```


```java
package com.alioth.bootstrap;

import org.junit.jupiter.api.Test;

import java.lang.reflect.Method;
import java.util.concurrent.ForkJoinPool;

public class FuryTest {


    @Test
    public void testFuryForkJoinPoolAndClassLoader() throws Exception {

        
        ClassLoader loader = new ExternalClassLoader();
        Thread.currentThread().setContextClassLoader(loader);

        String bootstrap = ""com.alioth.bootstrap.ExternalClassBootStrap"";
        Class<?> clz = Class.forName(bootstrap, true, loader);

        Method main = clz.getMethod(""main"", String[].class);
        main.invoke(null, new Object[]{new String[]{}});
    }

}
```

### What did you expect to see?

Complete the deserialization process correctly.


### What did you see instead?

An incorrect class loader was selected, making it unable to retrieve the metadata correctly


The stack trace is as follows:

```java
Thread[main,5,main] Classloader com.alioth.bootstrap.ExternalClassLoader@69b2283a
Thread[ForkJoinPool.commonPool-worker-1,5,main] ClassLoader jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b
2024-10-13 12:02:38 INFO  Fury:160 [ForkJoinPool.commonPool-worker-1] - Created new fury org.apache.fury.Fury@40f1c094

java.util.concurrent.ExecutionException: java.lang.IllegalStateException: java.lang.IllegalStateException: Class com.alioth.bootstrap.ExternalClass not found from classloaders [jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b, jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b]

	at java.base/java.util.concurrent.ForkJoinTask.reportExecutionException(ForkJoinTask.java:605)
	at java.base/java.util.concurrent.ForkJoinTask.get(ForkJoinTask.java:981)
	at com.alioth.bootstrap.ExternalClassBootStrap.main(ExternalClassBootStrap.java:45)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.alioth.bootstrap.FuryTest.testMultiThreadClassLoader(FuryTest.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: java.lang.IllegalStateException: java.lang.IllegalStateException: Class com.alioth.bootstrap.ExternalClass not found from classloaders [jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b, jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b]
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at java.base/java.util.concurrent.ForkJoinTask.getThrowableException(ForkJoinTask.java:562)
	at java.base/java.util.concurrent.ForkJoinTask.reportExecutionException(ForkJoinTask.java:604)
	... 76 more
Caused by: java.lang.IllegalStateException: Class com.alioth.bootstrap.ExternalClass not found from classloaders [jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b, jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b]
	at org.apache.fury.resolver.ClassResolver.loadClass(ClassResolver.java:1849)
	at org.apache.fury.resolver.ClassResolver.loadClass(ClassResolver.java:1828)
	at org.apache.fury.resolver.ClassResolver.populateBytesToClassInfo(ClassResolver.java:1765)
	at org.apache.fury.resolver.ClassResolver.loadBytesToClassInfo(ClassResolver.java:1750)
	at org.apache.fury.resolver.ClassResolver.readClassInfoFromBytes(ClassResolver.java:1737)
	at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1659)
	at org.apache.fury.Fury.readRef(Fury.java:860)
	at org.apache.fury.Fury.deserialize(Fury.java:792)
	at org.apache.fury.Fury.deserialize(Fury.java:714)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:127)
	at com.alioth.bootstrap.ExternalClassBootStrap.lambda$main$0(ExternalClassBootStrap.java:40)
	at java.base/java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1375)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: java.lang.ClassNotFoundException: com.alioth.bootstrap.ExternalClass
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:467)
	at org.apache.fury.resolver.ClassResolver.loadClass(ClassResolver.java:1838)
	... 16 more
```

### Anything Else?

1. The ForkJoinWorkerThread in ForkJoinPool#commonPool sets the ThreadContextClassLoader in LTS JDK 11 JDK17 JDK21 ，however, this issue does not occur in JDK 8., which can cause the aforementioned issues for some common APIs, such as CompletableFuture when no specific thread pool is provided.
```java
    ForkJoinWorkerThread(ThreadGroup group, ForkJoinPool pool,
                         boolean useSystemClassLoader, boolean isInnocuous) {
        super(group, null, pool.nextWorkerThreadName(), 0L);
         ...  // Omitting certain content.
        if (useSystemClassLoader) // true
            super.setContextClassLoader(ClassLoader.getSystemClassLoader()); // AppClassLoader
    }
```
2.Why does the FuryBuilder#withClassLoader method's ClassLoader only apply to the Fury instance in the current thread, and not to all Fury instances under the ThreadSafeFury? Is this due to considerations related to GC?


### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1884/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1884,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PsdA2,fury,2410795062,1884,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-14T10:38:01Z,2024-10-14T10:38:01Z,"It's a bug, ThreadSafeFury should use classloader in FuryBuilder as the default classloader. #1878 also has similar issue.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6PsdA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/1887,fury,2591479916,1887,[Question] Could use Python bindings instead of Cython,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,OPEN,2024-10-16T10:51:51Z,2024-12-20T15:38:30Z,"From the code, the Buffer in Cython is just a wrapper around the Buffer in cpp. It might be beneficial to use Python bindings directly, as this could reduce performance overhead and the cost of code maintenance.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1887/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QCoUS,fury,2416608530,1887,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-16T11:59:28Z,2024-10-16T11:59:28Z,"You mean implement Buffer using python only instead of CBuffer? We implement some varint encoding in Cpp Buffer. I'm not sure using python will make it faster, maybe need some benchmarks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QCoUS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QCvtY,fury,2416638808,1887,NA,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,NA,2024-10-16T12:10:36Z,2024-10-16T12:10:36Z,"My suggestion is to use [pybind11](https://github.com/pybind/pybind11) or directly write a [C-API](https://docs.python.org/3/c-api/index.html) to call the cpp `fury::Buffer`. The current Cython-generated C++ code still calls the `fury::Buffer`, which I think is unnecessary.

```cpp
static CYTHON_INLINE int64_t __pyx_f_6pyfury_5_util_6Buffer_get_int64(struct __pyx_obj_6pyfury_5_util_Buffer *__pyx_v_self, uint32_t __pyx_v_offset, CYTHON_UNUSED int __pyx_skip_dispatch) {
  ...

  /* ""pyfury/_util.pyx"":140
 *     cpdef inline int64_t get_int64(self, uint32_t offset):
 *         self.check_bound(offset, <int32_t>8)
 *         return self.c_buffer.get().GetInt64(offset)             # <<<<<<<<<<<<<<
 * 
 *     cpdef inline float get_float(self, uint32_t offset):
 */
  __pyx_r = __pyx_v_self->c_buffer.get()->GetInt64(__pyx_v_offset);  // This is an indirect call, which is not really necessary.
  goto __pyx_L0;

  /* function exit code */
  ...
}
```
If you agree, I will try to provide a simple demo to verify the performance and code maintenance benefits.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QCvtY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QDDus,fury,2416720812,1887,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-16T12:36:12Z,2024-10-16T12:36:12Z,"That would be great, if we get a big performance gain, we can compromise some code maintenance costs","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QDDus/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q8eLB,fury,2431771329,1887,NA,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,NA,2024-10-23T11:15:53Z,2024-10-23T11:15:53Z,"Hi, I conducted comparative experiments, trying out [pybind11](https://github.com/pybind/pybind11), [nanobind](https://github.com/wjakob/nanobind), and directly writing C-API code.

- pybind11 had the worst performance, which aligns with my understanding. It doesn't perform any specific optimizations for different scenarios and has relatively complex type conversion operations. However, its maintenance code is the simplest. For code that only requires API binding, it can be written as follows:
```c++
PYBIND11_MODULE(_pyutil, util_mod) {
  py::class_<fury::Buffer>(util_mod, ""Buffer"")
      .def(py::init<>())
      .def(""own_data"", &fury::Buffer::own_data)
      .def(""reserve"", &fury::Buffer::Reserve)
      .def(""put_bool"", [](fury::Buffer &self, uint32_t offset,
                          bool v) { self.UnsafePutByte(offset, v); })
      .def(""put_int8"", [](fury::Buffer &self, uint32_t offset,
                          int8_t v) { self.UnsafePutByte(offset, v); })
      .def(""get_bool"", &fury::Buffer::GetBool)
      .def(""get_int8"", &fury::Buffer::GetInt8)
      ...
      .def_static(""allocate"", [](uint32_t size) { return fury::AllocateBuffer(size); });
}
```

- Nanobind's performance is slightly better than Cython's, and its binding method is not much different from pybind11. However, it only supports Python 3.8+.

- Directly writing C-API code can perform better than Cython if optimized for different versions (especially >= 3.11). However, is detrimental to the goal of maintaining code more easily. For example:
  - Cython generates redundant checks when creating `get_bool`, and due to the unreasonable setting of `ml_flag` (it should choose `METH_O` instead of `METH_FASTCALL | METH_KEYWORDS`), parameter parsing also introduces additional overhead.
```c++
static PyObject *
cbuffer_get_bool(CBufferObject *self, PyObject *offset)
{
    long off_val = PyLong_AsLong(offset);
    assert(off_val <= UINT32_MAX);
    return self->buffer->GetBool(off_val) ? Py_NewRef(Py_True) : Py_NewRef(Py_False);
}

static PyMethodDef cbuffer_methods[] = {
    {""get_bool"", (PyCFunction)cbuffer_get_bool, METH_O, nullptr},
    ...
    {NULL, NULL}           /* sentinel */
};
```

Additionally, after analyzing the Cython code, I found that some performance optimizations can be achieved by directly calling certain C-API functions in the .pyx file. The principle behind this is to use some higher-level knowledge to avoid Cython generating certain guard code. I will attempt to submit these optimizations as a PR in the future.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q8eLB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q_Qfx,fury,2432501745,1887,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-23T14:53:16Z,2024-10-23T14:53:16Z,"Thanks for sharing so insightful experiments. I used to think pybind is fast since it avoid generating code like cython. It turns out it's the slowest, this superised me a little. Cython seems provide some annotations to help generate c++ code, are you going to employ such kind of optimization?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q_Qfx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UNTiS,fury,2486515858,1887,NA,Superskyyy,26076517,Superskyyy,yihaochen@apache.org,NA,2024-11-19T19:02:59Z,2024-11-19T19:02:59Z,"I suggest using Nanobind, nanobind is the next generation of pybind11 from the same guy that invented it. It is suggested officially to use nanobind over Pybind11. Python 3.8+ is not a problem since anything below is already subset by CPython.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UNTiS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WYM8j,fury,2522926883,1887,NA,PragmaTwice,20042607,Twice,,NA,2024-12-06T11:16:01Z,2024-12-06T11:16:01Z,"Yeah from my side generally cython is hard to debug and maintain, also lacks good IDE/LSP support.

Many libraries with python interfaces, like tensorflow, pytorch, xla and so on, use cpython api (or in a wrapper like pybind11/nanobind) instead of cython.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WYM8j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wub23,fury,2528755127,1887,NA,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,NA,2024-12-09T17:00:27Z,2024-12-09T17:00:27Z,"I have gained new insights into this issue:

I found that pybind is not always suitable for pyfury. In other projects where pybind is used, it is often employed as a wrapper layer to provide interfaces and data transfer, with the core content being unrelated to the Python Object structure.

However, for pyfury, it is inherently closely related to the Python Object structure. More precise parsing of the Python Object structure means more opportunities for optimization to reduce overhead.

For example, consider the python dict type. In the cpython dict structure, a linear memory stores indices and key-value pairs. By accessing this structure, we can achieve efficient traversal of the dict, similar to arrays and lists. However, accessing this memory is internal in CPython, and the access method varies across different versions.

```
       +----------------------------------------------------
       |  dk_indices | PyDictKeyEntry | PyDictKeyEntry | ...
       +----------------------------------------------------
      ^                    
       |
dict->ma_keys->dk_indices
```

Therefore, we need a general Python object access code and high-performance access code tailored to specific types and versions.

* For general Python objects, Cython is more suitable than pybind. For example, in the current list or set serialization protocol code, if we use pybind, we need to manually call the C-API and handle error processing, reference counting, and version differences, which may be more difficult to maintain than using Cython.

* For high-performance specialized objects, there is no difference between using Cython or pybind, as it essentially involves manually parsing PyObject.

Therefore, my idea is that we need to use Cython more lightly, using Cython to write general serialization protocols, and transferring the specialized parts to C++.

```
// cpp
void _write_pydict_to_buffer(PyDictObject *dict, Buffer buffer) {
#if PYTHON_VERSION
   PyDictKeyEntry *entries = dict->ma_keys->dk_indices[...]
#elif PYTHON_VERSION
    PyDict_NEXT(...)
#endif
}

# cython
class SetSerializer:
    ...

class ListSerializer:
    ...

class MapSerializer:
    cpdef inline write(self, Buffer buffer, o):
        _write_pydict_to_buffer(<PyDictObject *>o, buffer->c_ptr())
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wub23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wy_n4,fury,2529950200,1887,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-10T01:04:11Z,2024-12-10T01:04:11Z,"I'm rewriting pyfury recently into our new xlang protocol in https://github.com/apache/fury/pull/1690. One of the biggest obstacle is that cython doesn't support `switch case` syntax, which is important for performance optimization. We've used swisstable for fast Type dispatch, switch can be used for fast serialization of common types without the cost of virtual method  invocation.

I'm not sure whether we can invoke cython code in C++ in an inline way.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wy_n4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6W7Vks,fury,2532137260,1887,NA,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,NA,2024-12-10T15:56:58Z,2024-12-10T15:56:58Z,"> I'm rewriting pyfury recently into our new xlang protocol in #1690. One of the biggest obstacle is that cython doesn't support `switch case` syntax, which is important for performance optimization. We've used swisstable for fast Type dispatch, switch can be used for fast serialization of common types without the cost of virtual method invocation.
> 
> I'm not sure whether we can invoke cython code in C++ in an inline way.

The C++ functions generated by Cython store a function pointer in its simulated virtual table. Although it cannot be called in an inline way, the overhead of virtual method invocation can be reduced by optimizing access to this table.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6W7Vks/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xa6N7,fury,2540413819,1887,NA,PragmaTwice,20042607,Twice,,NA,2024-12-13T02:44:04Z,2024-12-13T02:44:04Z,"Hmmm from my understanding Cython is a transpiler from python (extended) to C (with CPython API calls?). So it should be relatively easy to migrate from Cython to C/C++ code mixed with CPython API (for performance-critical sections) and nanobind (for maintanance).

BTW if we still want to keep some Cython code, maybe we can try the pure python syntax of cython. Refer to https://cython.readthedocs.io/en/latest/src/tutorial/pure.html#pep484-type-annotations.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xa6N7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1887,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YbF8b,fury,2557239067,1887,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-20T15:38:29Z,2024-12-20T15:38:29Z,"I strongly suggest to use  nanobind, it was very difficult to debug cython compiled code. And when I want to use some code in C++, I must refine the pxd header, which is not convenient. Other considerations is that it lacks complete c++ template support  and don't have switch clause support. 

It would be much easier if we are using nanobind to implement pyfury serialization in #1690  
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YbF8b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1893,https://api.github.com/repos/apache/fury/issues/1893,fury,2601119702,1893,[Question] Problem with Fury Serialization/Deserialization for Nested Classes,Moouna,24785172,,,CLOSED,2024-10-21T02:29:52Z,2024-10-22T12:10:48Z,"### Question

### Problem with Fury Serialization/Deserialization for Nested Classes

I’m using **Fury** for serializing and deserializing two different classes (`Source` and `Target`) that have similar structures but different inner classes (`SourceInner` and `TargetInner`). Serialization works when handling a list (`innerList`), but it fails when serializing a single field (`inner`), throwing a `ClassCastException`.

### Classes:
```java
@Data
public class Source {
    private SourceInner inner;
    private List<SourceInner> innerList;
}

public class SourceInner {
}

@Data
public class Target {
    private TargetInner inner;
    private List<TargetInner> innerList;
}

public class TargetInner {
}
```

### Test Case 1: Success

Serialization and deserialization works fine when using the `innerList` field (a list of `SourceInner`):
```java
@Test
public void testFurySuccess() {
    Source source = new Source();
    source.setInnerList(new ArrayList<>());
    source.getInnerList().add(new SourceInner());

    Fury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withClassVersionCheck(false)
            .withCodegen(true)
            .withJdkClassSerializableCheck(false)
            .build();

    byte[] bytes = fury.serializeJavaObject(source);
    Target target = fury.deserializeJavaObject(bytes, Target.class);
    System.out.println(target);  // Success
}
```

### Test Case 2: Failure

However, when trying to serialize the `inner` field (a single instance of `SourceInner`), it fails with a `ClassCastException`:
```java
@Test
public void testFuryFailed() {
    Source source = new Source();
    source.setInner(new SourceInner());

    Fury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withClassVersionCheck(false)
            .withCodegen(true)
            .withJdkClassSerializableCheck(false)
            .build();

    byte[] bytes = fury.serializeJavaObject(source);
    Target target = fury.deserializeJavaObject(bytes, Target.class);  // Fails
    System.out.println(target);
}
```

### Error:
```
java.lang.ClassCastException: SourceInner cannot be cast to TargetInner
    at org.apache.fury.format.dto.TargetFuryCodec_0.read(TargetFuryCodec_0.java:242)
    at org.apache.fury.Fury.readDataInternal(Fury.java:958)
    at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1117)
    ...
```

### Question:
How can I make Fury correctly deserialize `SourceInner` to `TargetInner` without a `ClassCastException`? Is there a way to map `SourceInner` to `TargetInner` automatically, or do I need to implement custom logic?

Thanks in advance for any suggestions!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1893/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1893,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QkfUM,fury,2425484556,1893,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-21T03:24:37Z,2024-10-21T03:24:37Z,"You can create two Fury instance, one for serializaiton, another for deserializaiton, and register those classes to same class id. If the class has different schema, you also need to set CompatileMode to Compatible","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QkfUM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1893,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Qlgwb,fury,2425752603,1893,NA,Moouna,24785172,,,NA,2024-10-21T06:52:04Z,2024-10-21T06:52:04Z,"It works.

```java
Source source = new Source();
source.setInner(new SourceInner());

Fury furySerialize = Fury.builder()
        .withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .withClassVersionCheck(false)
        .withCodegen(true)
        .withCompatibleMode(CompatibleMode.COMPATIBLE)
        .withJdkClassSerializableCheck(false)
        .build();

Fury furyDeserialize = Fury.builder()
        .withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .withClassVersionCheck(false)
        .withCodegen(true)
        .withCompatibleMode(CompatibleMode.COMPATIBLE)
        .withJdkClassSerializableCheck(false)
        .build();

Short id = 3547;
Short innerId = 3548;
furySerialize.register(Source.class, id);
furySerialize.register(SourceInner.class, innerId);
furyDeserialize.register(Target.class, id);
furyDeserialize.register(TargetInner.class, innerId);
byte[] bytes = furySerialize.serializeJavaObject(source);
Target target = furyDeserialize.deserializeJavaObject(bytes, Target.class);
System.out.println(target);
```
Do you have a more effective solution?I mean, when there are too many classes, registering them one by one is not very friendly for the project.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Qlgwb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1893,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QxRZc,fury,2428835420,1893,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-22T09:58:03Z,2024-10-22T09:58:03Z,Sadly I don't have a better solution for such cases. Maybe you can write a loop to do such things,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6QxRZc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1894,https://api.github.com/repos/apache/fury/issues/1894,fury,2603469963,1894,Scala Optimizations don't support ThreadSafeFury,davidnadeau,228949,,,CLOSED,2024-10-21T19:27:28Z,2024-10-23T02:56:33Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.8.0

### Component(s)

Other

### Minimal reproduce step

```scala
  lazy val fury: ThreadSafeFury = Fury
    .builder()
    .withLanguage(Language.JAVA)
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(false)
    .buildThreadSafeFuryPool(Runtime.getRuntime.availableProcessors() * 2, Runtime.getRuntime.availableProcessors() * 2)


   ScalaSerializers.registerSerializers(fury)
// Type mismatch
```
![Screenshot 2024-10-21 at 3 26 23 PM](https://github.com/user-attachments/assets/41b43e79-f310-4c3c-87c9-60908a8f20a3)


### What did you expect to see?

Support for ThreadSafeFury.

### What did you see instead?

Compile error.

### Anything Else?

related? https://github.com/apache/fury/issues/1186

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1894/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1894,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q4eM7,fury,2430722875,1894,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-23T02:55:36Z,2024-10-23T02:55:36Z,"Hi @davidnadeau , I fixed this in #1895 . Currently you can work around it by :
```scala
  lazy val fury: ThreadSafeFury = new ThreadLocalFury(classloader => {
    val furyInstance = Fury
      .builder()
      .withLanguage(Language.JAVA)
      .withScalaOptimizationEnabled(true)
      .requireClassRegistration(false)
      .withClassLoader(classloader)
      .withRefTracking(false)
      .buildThreadSafeFuryPool(Runtime.getRuntime.availableProcessors() * 2, Runtime.getRuntime.availableProcessors() * 2)
     ScalaSerializers.registerSerializers(furyInstance)
     furyInstance
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q4eM7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1896,https://api.github.com/repos/apache/fury/issues/1896,fury,2604401510,1896,[Kotlin] add code lint CI for kotlin,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-10-22T06:28:53Z,2024-10-26T14:27:22Z,"### Feature Request

add code lint CI for kotlin","{""url"": ""https://api.github.com/repos/apache/fury/issues/1896/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1897,https://api.github.com/repos/apache/fury/issues/1897,fury,2604672537,1897,Feature Request Template doesn't work,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-10-22T08:25:25Z,2024-10-22T08:39:06Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

Other

### Minimal reproduce step

![image](https://github.com/user-attachments/assets/62b57024-5231-46a4-982e-9092175149d8)


### What did you expect to see?

![image](https://github.com/user-attachments/assets/2c3c3ee4-b487-4ddb-b0c5-41c24314bb76)


### What did you see instead?

We had a feature request template:
![image](https://github.com/user-attachments/assets/04781967-d910-4d40-81cf-395342c51a71)

But it didn't show on `new issues` anymore 

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1897/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1900,https://api.github.com/repos/apache/fury/issues/1900,fury,2607945109,1900,[Question] How do I serialize primitive types? ,dan-ryan,775672,Daniel Ryan,,CLOSED,2024-10-23T09:41:24Z,2024-10-28T09:52:24Z,"### Question

I couldn't see this in the documentation, and maybe this library isn't suited for what I want, but I thought I'd ask just in case.
I'm building an MMO and serializing mostly small chunks of data, but lots of it. Benchmarking my code shows serialization is using a chunk of CPU, so I wanted to see if Fury could improve my performance. 

This is a small example of a byte[] that I'm sending to the client through WebSockets:

```
        try (var byteArrayOutputStream = new ByteArrayOutputStream(1024);
             var dataOutputStream = new DataOutputStream(byteArrayOutputStream)) {
            dataOutputStream.writeByte(SerialisationMethod.Client.PlayerCharacter.ordinal()); // Method type (enum) as a byte
            dataOutputStream.writeUTF(getId()); //GUID string
            return byteArrayOutputStream.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
```

Can someone give me an example of the best way to write this in Fury?
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1900/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1900,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q7yhi,fury,2431592546,1900,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-23T10:03:27Z,2024-10-23T10:03:27Z,"You can just serialize by `fury.serialize(new Object[] {your objects})`. Or you can create a `org.apache.fury.io.MemoryBufferObjectOutput` for that:

```java
MemoryBufferObjectOutput out = new MemoryBufferObjectOutput(fury, buffer);
out.writeByte(SerialisationMethod.Client.PlayerCharacter.ordinal());
out.writeUTF(getId()); //GUID string
byte[] bytes = buffer.getBytes(0, buffer.writerIndex());
buffer.writerIndex(0);
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Q7yhi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1902,https://api.github.com/repos/apache/fury/issues/1902,fury,2610291676,1902,[Question] <title> Compatibility,92daxia,49838034,水滴,guojianxia126@126.com,CLOSED,2024-10-24T03:15:52Z,2024-10-24T17:02:18Z,"### Question

<img width=""850"" alt=""image"" src=""https://github.com/user-attachments/assets/c934d4c2-9a9c-43eb-9e2b-fff7535f1f30"">
Does this mean that deserialization after property changes in a SomeClass class is incompatible? Or is it incompatible after upgrading Fury?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1902/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1902,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RL5rx,fury,2435816177,1902,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-24T17:02:12Z,2024-10-24T17:02:12Z,"As the document said, Fury supports schema evolution, you can add/remove property in a SomeClass class. But when you upgrade Fury jar from one version to another version, it may be imcompatible","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RL5rx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1903,https://api.github.com/repos/apache/fury/issues/1903,fury,2610297580,1903,[Question] When to release version 1.0.0,92daxia,49838034,水滴,guojianxia126@126.com,OPEN,2024-10-24T03:22:13Z,2024-10-24T17:03:55Z,"### Question

When will version 1.0.0 be released","{""url"": ""https://api.github.com/repos/apache/fury/issues/1903/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1903,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RL_Bn,fury,2435838055,1903,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-24T17:03:53Z,2024-10-24T17:03:53Z,"We are continuousy improving Fury, and don't have plans from release 1.0.0 currently. We may release 1.0.0 when xlang implementation are stable","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RL_Bn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1908,https://api.github.com/repos/apache/fury/issues/1908,fury,2613390439,1908,[Question] Java Class Registration,92daxia,49838034,水滴,guojianxia126@126.com,CLOSED,2024-10-25T08:03:07Z,2024-10-26T07:14:22Z,"### Question

If not registered, is it compatible to deserialize class attributes after adding or deleting them.
v1
SomeClass {
    int a;
    String b;
    long c;
}

v2(deserialize)
SomeClass {
    String b;
    long c;
    int d;
}","{""url"": ""https://api.github.com/repos/apache/fury/issues/1908/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1908,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RVRvb,fury,2438274011,1908,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-25T16:31:53Z,2024-10-25T16:31:53Z,"Yes, you can do that. Type compatibility is not related class registration. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6RVRvb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1915,https://api.github.com/repos/apache/fury/issues/1915,fury,2617425502,1915,Cannot install with pip.,zgxkbtl,13033165,,,OPEN,2024-10-28T06:16:47Z,2024-10-28T16:29:13Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Python3.12 
MacOS 13.3.1 
Apple M2

### Component(s)

Python

### Minimal reproduce step

pip install pyfury -vvv


### What did you expect to see?

Install Successfully

### What did you see instead?

```
pip install pyfury -vvv
Using pip 24.3.1 from /Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip (python 3.12)
Non-user install because user site-packages disabled
Created temporary directory: /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-build-tracker-m2wcft65
Initialized build tracking at /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-build-tracker-m2wcft65
Created build tracker: /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-build-tracker-m2wcft65
Entered build tracker: /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-build-tracker-m2wcft65
Created temporary directory: /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-install-i4riymym
Created temporary directory: /private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-ephem-wheel-cache-qtub9_wb
1 location(s) to search for versions of pyfury:
* https://pypi.org/simple/pyfury/
Fetching project page and analyzing links: https://pypi.org/simple/pyfury/
Getting page https://pypi.org/simple/pyfury/
Found index url https://pypi.org/simple/
Looking up ""https://pypi.org/simple/pyfury/"" in the cache
Request header has ""max_age"" as 0, cache bypassed
Starting new HTTPS connection (1): pypi.org:443
https://pypi.org:443 ""GET /simple/pyfury/ HTTP/1.1"" 304 0
Fetched page https://pypi.org/simple/pyfury/ as application/vnd.pypi.simple.v1+json
  Skipping link: none of the wheel's tags (cp36-cp36m-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/79/f6/ff5816371e6f6f09316aff68c7927337f9230fe762e5b9246df4eeeca99b/pyfury-0.0.1.dev0-cp36-cp36m-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/3d/bd/89af0620c66815ac4d58ed11ee4f337e3966f79eb4c9817b05fe4defaacf/pyfury-0.1.0a5-cp36-cp36m-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/73/35/1978d4d048f15731e018d77c9d2dfa68ab682e3b14a9f1f3c28b4b913277/pyfury-0.1.0a5-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/88/af/c1ac944bf33853e2ed1b90f638cfcf72d6a47dc45e5fc0abb76960317d0f/pyfury-0.1.0a5-cp37-cp37m-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/2c/48/ab834de584e1ea9bf97a3f99f0f24adaa4905ca6af0e60c779bb68e9be8d/pyfury-0.1.0a5-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ca/27/fa4047b089ccdc8b7f1001fb23232cf86648e28657c8d89861126edaee65/pyfury-0.1.0a5-cp38-cp38-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/4f/fe/302bef2e614a7533a14ae1deba9ee0a1e21f11d580b22e05d5f0a372e145/pyfury-0.1.0a5-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/b3/ed/c0290db7e7bed99f41c17e3b8f908fde1b91e4b2aa053b65091847f6b4a8/pyfury-0.1.0a5-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/89/ac/6122471aa7160b1c106b645ac9872cf929641cd3f61f1af78d139be892d2/pyfury-0.1.0a5-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/c0/04/69368c412c9acdf26315c14c53eebc261ac143130926ed95d6555a46c4ab/pyfury-0.1.1a1-cp310-cp310-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/16/1c/864d1dab4c9fd4d31a1b9334bb2f77ded47bfe733416f0c0658d65f2658f/pyfury-0.1.1a1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-macosx_10_13_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ff/db/132415be155964242512d703403336716a6a1137cbb8563b22a644b55b38/pyfury-0.1.1a1-cp36-cp36m-macosx_10_13_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/98/5a/834ccb0f701613edf38ce2e4fe5d084311ef55ba04eff673c500d1d9800d/pyfury-0.1.1a1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/81/cc/1f678cfb7e76b7e8974357a408e49e00f1708383cbbd5999ba06c8a8f75a/pyfury-0.1.1a1-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/df/5d/e0818377008a3d4f139b5ef00b3bff4e77320d574da50b869dcf01dd0add/pyfury-0.1.1a1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/14/5c/5f45255eeb516b9d4a90a6739589d8016f195ba05e1357b3f1584b28ae30/pyfury-0.1.1a1-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/39/b9/79acf41139c9d52885f68d4e9c1b988e3035d99d91884f28ac4aa7ee60fe/pyfury-0.1.1a1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/b3/39/e9a6dcd12f5ce2ea693700191e190f48ae07674b10750b754fe4384455ce/pyfury-0.1.1a1-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ff/25/fe9be3b8945934c10b0601ca42f191ddd44f490f710a828ca75a6f493767/pyfury-0.1.1a1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/45/be/d8ef57c51282328b1aae08179d770834a5e9def2e5ecee04d39e843eba8b/pyfury-0.1.1a2-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/28/cb/9298e37bb58825caa1b786b7bde650b76791acd31d8a2a4311c64e4a19a7/pyfury-0.1.1a2-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/05/95/17b1ff3da4fc240f20558e9633661bbc9223c3a5ba383f37408db8e8cc90/pyfury-0.1.1a2-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/76/cf/62f2fcec6c72f3a4c3b291bc20063bcc961b84b1b7bc135abafdbb923784/pyfury-0.1.1a2-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/cb/0f/3be928245b9a6efa05a8a9d8a6523a4ad4325508ca9ac52e223ef86a55c1/pyfury-0.1.1a2-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/f1/2a/ed119dee732abed752da4bfdc081b2c9e302cbea7a6d1e337706187f0d08/pyfury-0.1.1a3-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/60/92/d4c129ccea27d656eadf1f71a2b5ced40621a4a1776e5e3a14f4fec14a7d/pyfury-0.1.1a3-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/bd/82/bc1e8f827d9fd09aab18be01c2f8624ef9fa09989891eac883a3b9f2cccd/pyfury-0.1.1a3-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/39/ab/cbd71915099952779cf684224a299f0935c66e4e3934748e43b0844e659a/pyfury-0.1.1a3-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/b2/72/def8732a0f86df875e33b7f08cae904f33dc956d61d5ff61673aed938ba2/pyfury-0.1.1a3-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/c2/53/8690a68b7dd0f290b6163990d6d0be2a6c3a7079df2f34c819dede25aa13/pyfury-0.1.2a1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/65/06/40ed0263f67a160aca92a0c0ac86a77d64274846c356ad6398226ecbba39/pyfury-0.1.2a1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/bd/b0/4de9e8f88bb2fbb00d32eb132b0632589cf56afcb01b1efd3030e8d971c0/pyfury-0.1.2a1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/05/fd/d9ca6caab072067d93ba71d9cf5e0efa2dd8219f7c1d4ab5ca0818a5acef/pyfury-0.1.2a1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/1e/84/e14997a61ede3c0d18bb69c81f04f9aaf4029440e38e9cff82d71ccae737/pyfury-0.1.2a1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/96/65/d20ec6c8921f30a92b18c075265498f8521c8b4f14001767848ba12a1ea4/pyfury-0.2.0a1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/8f/06/c36015d54042ce8c0f18ca4820210fa7a768dc265dda5ab7134e7cfeb91a/pyfury-0.2.0a1-cp36-cp36m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/f5/a1/04f324fa45babb0cf77916de74e1f62830be176c6082a481e7266097e5ec/pyfury-0.2.0a1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/3c/8c/fb222e6cd9062b53c9265884e21b87c0365be1f2dd33296ac3c367c9e634/pyfury-0.2.0a1-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/07/50/cfc92acd118a7ed9ec41b3d3722839025fdbfbc74f0c220f2255ac50e9de/pyfury-0.2.0a1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/39/08/39b8784749fcddf0c4fdde2460a86c70be5ac530546ef2f7086bf48617ef/pyfury-0.2.0a1-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/b8/de/60b0648dad0c51a3515f40a227622ed11b8e26dda9d695bd1260b1aa019a/pyfury-0.2.0a1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/15/f2/7264a18e866b14f25bf90715f085aed9ed294ae6cbd6b45a619e5020f8a9/pyfury-0.2.0a1-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/16/c7/0ad55415157c07c231cc19bc89a32a1403ac12cfaa4e059dbda590c4d281/pyfury-0.2.0a1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/37/29/a61517e1bf0795a9f311c4b293619d021b65994a4b2ab1b0b9708e13efbf/pyfury-0.2.0-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/3d/ea/d8d1617c0285806975aa7fcd1dfa24665ea89379f3b97b80881b062f777b/pyfury-0.2.0-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/22/25/b5bf646a5da36490ac601622f96685106b78eb076ffb1afcff4eb653b6b6/pyfury-0.2.0-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/54/bb/c24aa7b5644539101e3d1ac7157413af5c72e66eaf99da84d434fb4ad187/pyfury-0.2.0-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/81/4a/ed65bc730d13f23e7c0c00c9630433f1c07dfd98cd0a0d2c7ed4d1ff553b/pyfury-0.2.0-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/cb/c3/fc9f5b837df7ef2fd63913b7ffac339e82522d2aa4a521548351badb19fc/pyfury-0.2.1a1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ce/59/cd7ded0a93d1ad6b0dced82feaba8bec755434c1e6faf53160fe1bb908ef/pyfury-0.2.1a1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/8e/4d/466b5fdefb175ebea9bccc4e3bfbd589dcea7bcb11d587f869852169b0ee/pyfury-0.2.1a1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/7c/dd/e67e3b6fb1ed8d52bffe76f88bf3dae912a6d24556f2f4b7b9986fbdbf10/pyfury-0.2.1a1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ef/04/31ec7cf71c097302a4aaf835df3e213de6bd4acd60af7c0a5878b4beb81d/pyfury-0.2.1a1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/41/a0/f537f0ae134629eceff16fcc03012e3013b97ece169f4efee57ba6d2a76a/pyfury-0.2.1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/c9/94/c507013fc50801b4ca49a800058cb904042a939ffcfebf42930876c349dc/pyfury-0.2.1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/55/3e/53a38e467cb70b559ac97dc8306c0fa802a0d75b0320417498f1cc85989e/pyfury-0.2.1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/0f/53/20ffa1d8cd8616983fa96996c2ae501a01d0d4471e1ea826419579adb5f4/pyfury-0.2.1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/2e/58/00822ddf57af43c5b3976dd4711a192f6aa91e3d109b006093c23b356de9/pyfury-0.2.1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/0f/23/caf6dfd3b2b88c49cec5cde127f996b26ad9dd347d9cced1ceb6ac0ae1a3/pyfury-0.3.0a1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/1d/1f/43b02025439f958c10a0cbb84a0f927de5d33b5d852c71f2242d9d5a5195/pyfury-0.3.0a1-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/a9/f9/a99eb1fae6aaadfd039d00a93c9288865df565433117960b74125356b0af/pyfury-0.3.0a1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/26/c4/1242d8dc3733491e6afcb6821dd12c791d5d3db216502385f03b71d1599c/pyfury-0.3.0a1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/71/99/d51942065549e0f3d89588e995c349b2c0cf56fa7b6717d4fb9c651ff27f/pyfury-0.3.0a1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/a8/80/940d6620b60fa88b0a9f4aaf6d09f940edea7250e80b6ee28fc7ad6bd4dd/pyfury-0.3.0a2-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/7c/af/ad5083d2aac1403235098e01ba1761b96f8ade84bde7cec255aeba0e4e85/pyfury-0.3.0a2-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/0b/70/f03a201d5a78380c6eddeb2bd5971793e9cb2fd10b97732e20b1d9e0d3ba/pyfury-0.3.0a2-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/61/26/802e1fbd896e9cbf43434e4889281d1a0dfc76b2436e70e5255b7c5d3a55/pyfury-0.3.0a2-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ce/6a/e0c9c817ecb5ef177b64ed7abd5bd7020b5b8f0f2a9659dc1574bab976cc/pyfury-0.3.0a2-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ac/b9/67bc1e688f6cdaea2feb0ebf94d243a5a2dbe6d642fc1e283d6382efd764/pyfury-0.3.0a3-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/cc/21/d399fe48b06d9982d21ccfcb9f10188e90601bd713fdfe1583c206caa54e/pyfury-0.3.0a3-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/e8/dc/da26c1bf9ebcabcbbf866bb59ada0bf56fd5638f9fd50487c05ba773c7cf/pyfury-0.3.0a3-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/3f/34/a35d7fb7567dcea77f51d25c5859933db9608ffa7fcc92f2226b2e93349e/pyfury-0.3.0a3-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/db/6c/09cf8058722bab149e00fda9b4ae160e68344aa841f203c943fb266386e5/pyfury-0.3.0a3-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/aa/4e/1e0d4312f5208c8211429c2ab8b652daf538a7d14fa024c4af04064c8c62/pyfury-0.3.0-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/5e/c6/8912444190caf04a269c355ab45d551b15e5c37974c6201691ed20e1b877/pyfury-0.3.0-cp36-cp36m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp36-cp36m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/fd/68/c825357c345e5554258a8028af648f38f4f88b41f51476667096a764211b/pyfury-0.3.0-cp36-cp36m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/86/98/d801062f6b43b260ab5719d456b7d5127d457b9bcbb4c71d78f37c3d5e9c/pyfury-0.3.0-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ec/2c/c763bb78445ad2dd8d93542ab5e1fcecb2047815cb5a135ca8a9dca6e633/pyfury-0.3.0-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ed/b0/32d8b600f517325ae9564ca1996ed9e6131f0cb02c596998341f0df08377/pyfury-0.3.0-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/37/35/e4cba051d04b2342669d2e0b5d82a5d61e4f5030028ed37a5a7f222ef3e6/pyfury-0.3.0-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/d5/9c/80412e1eb58f6919b3b6dd626bb49dce0cb89927e7e78ba3dde80da8c435/pyfury-0.3.0-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/46/d4/7a484ae9db67406e942b11604e3da813a415d3e15d722faf9aaa45b64bd2/pyfury-0.3.0-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/44/37/a8fdd43a3810496ec80fd7b624ef1a330c568f6607b38cb109fe40a77d72/pyfury-0.3.1-cp310-cp310-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/b9/42/7ae27ff29c40b7f5677bf42ca5d7632ff3dd4443b5236c681af48b69dfdc/pyfury-0.3.1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/8c/2d/ebbbd478ad8224b6b638bc0458a550834e78035f972e9ad62f31da7fccb3/pyfury-0.3.1-cp311-cp311-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/f3/0b/9a44f5956723a18a57e41f8648bf8bb9cdad695f4927c7ff8ec8309450a6/pyfury-0.3.1-cp311-cp311-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/cb/17/c90cb426226814295659cc3e15773cb2711be00c8666dcd7d8c2a8db0a03/pyfury-0.3.1-cp312-cp312-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/d6/e2/3d8fd3fa230f2828c5043fdc00acb4b47bb597e8becd5833dc6ae7b346f4/pyfury-0.3.1-cp312-cp312-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/de/a4/7d64402c56ed9c679c68c6e7d8f14018c7572a4279b5968c838a62a2cb86/pyfury-0.3.1-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/2f/bb/e04b8c80bd7eb272ae9acb9f2675003c6c83b9cbe02dfa4853db34b25faa/pyfury-0.3.1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/e0/f8/269a90d541756f3bb722b3f1842b9797d45e0a60ad420e9f1d0250fb5847/pyfury-0.3.1-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/58/a1/04e6b70f1b99d84ecb9862945af5132aca78fb049472f7a101ca3dfabc3c/pyfury-0.3.1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/85/c1/e826c5733091d55a0e3b7f2616dcf80afbbf3b142a4c4aa0966f5c610824/pyfury-0.3.1-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/19/a0/f0f74fd8519997c9953bcf75f6faabfe34a019ae0c5cd17453c7b36bd4ec/pyfury-0.3.1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/58/fe/4facef2b888d05e7bc5fc2b1bfb4b241e3d55f519ef6f23919cfa052902a/pyfury-0.4.0-cp310-cp310-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/ae/ca/c4954e7d3c8a53f5760ca7adb2524dde2cb4ff61aa4d604d2aedfd440162/pyfury-0.4.0-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/8f/48/e6c91e4e72cf713a879781cbc2ef8f8c6fe58d649e2b764da0df6052295b/pyfury-0.4.0-cp311-cp311-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/9c/77/83eaa6ae8bdd436aa5ef6ad575db5466276b3c7bfb59a7b07e5dc3734bf4/pyfury-0.4.0-cp311-cp311-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/79/4d/9060707bf87e9ebf0b3373ea834792a492c06cb7d2306a2a7b5331e69d63/pyfury-0.4.0-cp312-cp312-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/26/45/e477444977a1e2d793923f461851cb72c73ddbaadae9962ba9301fd2bfc8/pyfury-0.4.0-cp312-cp312-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/82/b9/3b6c804d54c89e2166b082f5b527c8fee3e3ff328b95da9f7e95f36444ff/pyfury-0.4.0-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/e1/71/c36a44785e5b015618199a89f87da66665b0800119e549cfcd673fc6407d/pyfury-0.4.0-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/eb/34/a733f35213035114a1517122f22ad024471abd5ff7b8b85378e07eb70333/pyfury-0.4.0-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/35/02/2e024583bebe97bdf60ee6dee577bef2807a50355c373c640ae88a90364b/pyfury-0.4.0-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/75/3e/c473a5250a6166b218d19d588d2f7d6fd1d04e1a0fa1fc2eaabf175575a1/pyfury-0.4.0-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/53/b5/d5d2ccfa29728f645ba23828d36198747bc26f45e7edd7b6250b1d6e1e72/pyfury-0.4.0-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/00/8c/5bd90651aba3e8d858c59b1a438e2c933958904696a04d12ce94a3276ea8/pyfury-0.4.1-cp310-cp310-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp310-cp310-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/1c/64/759d6cbabe3dea9d30034ce3519b18794535320a7fa4646d032ee2a7d35b/pyfury-0.4.1-cp310-cp310-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/c6/91/374a9dcd83b2ca3b4e1da2399ef321218bfc1b15b77da379a682d0ee10d5/pyfury-0.4.1-cp311-cp311-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp311-cp311-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/24/97/69ee3cb055477e9e08ed162c13cc9362a0c8b6a0a311d70b274c16566641/pyfury-0.4.1-cp311-cp311-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/61/0b/71055c932023b04349171fc4aead9f547e47ed2192ecb690e8390409dae4/pyfury-0.4.1-cp312-cp312-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp312-cp312-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/7d/fa/b7abbdcdf5c494baca476235ed2bf8363db1d70da120aed2538356c4a0e9/pyfury-0.4.1-cp312-cp312-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/65/77/19eec0177a72928ea0495b76714d111795fb4ee1e29f969f7ba56d5cbb5b/pyfury-0.4.1-cp37-cp37m-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp37-cp37m-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/74/b6/7581104cd0e36b2b07e82c2681f8d27bf97af64a8603ebcc51ecedf22cf8/pyfury-0.4.1-cp37-cp37m-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/7a/24/e6d5188d1b1692cd1cff9bf786f7b63353e5dcb6f7690e78bb362327aed4/pyfury-0.4.1-cp38-cp38-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp38-cp38-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/13/17/28a4b56ba4f2f5937ee7be3561a03f9bac470c830075057dfa8a71d6a562/pyfury-0.4.1-cp38-cp38-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-macosx_12_0_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/84/e6/69a31e652a3ba0c66b094281996287e4beb484dc6bd1886cf894688d953a/pyfury-0.4.1-cp39-cp39-macosx_12_0_x86_64.whl (from https://pypi.org/simple/pyfury/)
  Skipping link: none of the wheel's tags (cp39-cp39-manylinux1_x86_64) are compatible (run pip debug --verbose to show compatible tags): https://files.pythonhosted.org/packages/94/fe/156a50427c814bdc041b098b011ade55d4bd5c76b74a41aad0ffa8127852/pyfury-0.4.1-cp39-cp39-manylinux1_x86_64.whl (from https://pypi.org/simple/pyfury/)
Skipping link: not a file: https://pypi.org/simple/pyfury/
Given no hashes to check 0 links for project 'pyfury': discarding no candidates
ERROR: Could not find a version that satisfies the requirement pyfury (from versions: none)
Remote version of pip: 24.2
Local version of pip:  24.3.1
Was pip installed by pip? True
ERROR: No matching distribution found for pyfury
Exception information:
Traceback (most recent call last):
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py"", line 397, in resolve
    self._add_to_criteria(self.state.criteria, r, parent=None)
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py"", line 174, in _add_to_criteria
    raise RequirementsConflicted(criterion)
pip._vendor.resolvelib.resolvers.RequirementsConflicted: Requirements conflict: SpecifierRequirement('pyfury')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/resolver.py"", line 95, in resolve
    result = self._result = resolver.resolve(
                            ^^^^^^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py"", line 546, in resolve
    state = resolution.resolve(requirements, max_rounds=max_rounds)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py"", line 399, in resolve
    raise ResolutionImpossible(e.criterion.information)
pip._vendor.resolvelib.resolvers.ResolutionImpossible: [RequirementInformation(requirement=SpecifierRequirement('pyfury'), parent=None)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/cli/base_command.py"", line 105, in _run_wrapper
    status = _inner_run()
             ^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/cli/base_command.py"", line 96, in _inner_run
    return self.run(options, args)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/cli/req_command.py"", line 67, in wrapper
    return func(self, options, args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/commands/install.py"", line 379, in run
    requirement_set = resolver.resolve(
                      ^^^^^^^^^^^^^^^^^
  File ""/Users/hy/IdeaProjects/fc3-oc-python310-official/venv/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/resolver.py"", line 104, in resolve
    raise error from e
pip._internal.exceptions.DistributionNotFound: No matching distribution found for pyfury
Removed build tracker: '/private/var/folders/8c/s9mgxd751zz9qhzyrk4sg43m0000gp/T/pip-build-tracker-m2wcft65'
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1915/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1915,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Rjv-K,fury,2442067850,1915,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-28T16:29:11Z,2024-10-28T16:29:11Z,"We have not release wheel for mac silcon yet, it may still take a few weeks for pyfury release","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Rjv-K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/1919,fury,2625739383,1919,Are there any plans to support serialization of pyflink's Java and python inter-process communication?,kaori-seasons,20021404,windWheel,yuluoxinsheng@gmail.com,OPEN,2024-10-31T01:36:36Z,2024-11-04T08:46:58Z,"### Feature Request


We expect to improve the performance of pyflink through fury serialization

In the python benchmark test, the time-consuming benchmark of each serialization is as follows:

![avg_serde_time_1m_objects](https://github.com/user-attachments/assets/eb429117-b34f-4219-8d11-3a59a354ad6b)

This is the code location where the performance is relatively high when we use pyflink, which is mainly consumed in pickle encoding and decoding.

![error1](https://github.com/user-attachments/assets/02c04dae-6756-4ff9-8b37-ef72e0e28bbd)
![error2](https://github.com/user-attachments/assets/189539fc-91c7-432b-8415-dbf605365e66)


At present, our company's stock of historical data is 13 million, and each message is between 60kb and 75kb. After discussions with the pyflink community, it is recommended to use pemja for cross-language calls without using beam.

In this way, python's native pickle serialization is very slow

测试方法：
- 以天（一个点位每秒一条数据，一天共86400条）为单位，进行不同的数据量测试
- 分别测试 3 个算子、5 个算子和 10 个算子情况下的性能
   - 对比都带有 output_type 和不都带 output_type 参数的性能

![test1](https://github.com/user-attachments/assets/df47cf67-9cab-443e-a57e-946207ad7791)

   - 每个算子参数带有 output_type 参数的测试代码：
![test2](https://github.com/user-attachments/assets/a5f67517-a49e-40f3-8cab-f8fd162317d1)


   - 每个算子都不带 output_type 参数的测试代码：
   
![error3](https://github.com/user-attachments/assets/2b8ea56c-74cc-4d81-9a49-3a483a576757)

其中 output_type 定义了传输数据每个字段类型，定义方式如下图：
![test3](https://github.com/user-attachments/assets/de3bbdec-5ca0-4245-ab80-487ce98fc5c2)

a) 测试三个算子
时长 | 带有 output_type 耗时（秒） | 没有 output_type耗时（秒） | 提升效率
-- | -- | -- | --
1 天 | 9.456 | 9.973 | 5.18%
3 天 | 14.532 | 18.187 | 20.10%
5 天 | 28.911 | 38.786 | 25.46%
7 天 | 34.397 | 51.691 | 33.46%


b) 测试5个算子

时长 | 带有 output_type 耗时（秒） | 没有 output_type耗时（秒） | 提升效率
-- | -- | -- | --
1 天 | 9.971 | 10.401 | 4.13%
3 天 | 20.308 | 25.744 | 21.12%
5 天 | 30.166 | 40.305 | 25.16%
7 天 | 40.340 | 54.405 | 25.85%


c) 测试10个算子

时长 | 带有 output_type 耗时（秒） | 没有 output_type耗时（秒） | 提升效率
-- | -- | -- | --
1 天 | 11.468 | 12.130 | 5.45%
3 天 | 23.697 | 31.121 | 23.85%
5 天 | 38.015 | 49.508 | 23.21%
7 天 | 48.859 | 65.140 | 24.99%


Judging from the test results, explicitly specifying the output_type parameter in PyFlink DataStream can significantly improve serialization performance, especially when the amount of data is large and there are many operators, the improvement effect is more obvious. Using output_type can reduce the overhead of serialization and deserialization, reduce the calculation of type inference, and thus improve performance. 


But now, obviously we hope that fury can improve this situation. Does @chaokunyang  have any good suggestions?

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1919/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R-Eg8,fury,2448967740,1919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-31T04:00:08Z,2024-10-31T04:00:08Z,"Fury has two formats for your scenarios:
- Xlang object graph format: This format will be faster if you have some shared values and it's the only solution if you have circular values.
- Binary Row Format: This is a zero-copy format, you can read your fields without parsing other fields.

If your message body size  is 60kb, do you need to read all those fields? If not, I will suggest to use the binary row format","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6R-Eg8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SBOpo,fury,2449795688,1919,NA,kaori-seasons,20021404,windWheel,yuluoxinsheng@gmail.com,NA,2024-10-31T13:03:56Z,2024-10-31T13:03:56Z,"> Fury 针对您的场景有两种格式：
> 
> * Xlang 对象图格式：如果您有一些共享值，则这种格式会更快，如果您有循环值，这是唯一的解决方案。
> * 二进制行格​​式：这是一种零拷贝格式，您可以读取您的字段而无需解析其他字段。
> 
> 如果你的消息正文大小为 60kb，你是否需要读取所有这些字段？如果不需要，我建议使用二进制行格​​式

All fields need to be read","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SBOpo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SDUOT,fury,2450342803,1919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-10-31T16:43:08Z,2024-10-31T16:43:08Z,"In such cases, Xlang object graph format will be faster.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SDUOT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SPyVs,fury,2453611884,1919,NA,kaori-seasons,20021404,windWheel,yuluoxinsheng@gmail.com,NA,2024-11-03T23:07:49Z,2024-11-03T23:07:49Z,"@chaokunyang At present, due to work, I may have to start doing this from next month. Since I am not familiar with xlang object graph, there may be some obstacles in implementing fury's xlang object graph in pyflink. Would you mind taking the time to give me Any help on fury performance and type mapping?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SPyVs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1919,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SRt6i,fury,2454118050,1919,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-04T08:46:56Z,2024-11-04T08:46:56Z,"yeah, I'd love to help, feel free to reach me out  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SRt6i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1924,https://api.github.com/repos/apache/fury/issues/1924,fury,2631692057,1924,[Kotlin] Support Kotlin For GraalVM Native Image,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-04T02:40:25Z,2024-11-04T02:40:25Z,"### Feature Request

Fury supports GraalVM Native Image build, which can compile java code to native binary directly. 

Since fury kotlin has been supported recently in #683 , it's time to support compile fury kotlin to native code directly.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

- Make some kotlin classes and serializers classes initialized at graalvm build time by adding those classes in fury-kotline native-image.properties.
- Add graalvm tests

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1924/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1928,https://api.github.com/repos/apache/fury/issues/1928,fury,2634890916,1928,"deserialize failed：After the class with the upstream system itself is serialized, the downstream system can not deserialize without the class object",shuyufang,9866579,,,OPEN,2024-11-05T09:22:49Z,2024-11-05T10:30:56Z,"### Question

public class FurySerializer implements Serializer {

    /**
     * fury配置
     */
    private static final ThreadSafeFury fury = new FuryBuilder().withLanguage(Language.JAVA)
        .withRefTracking(true)
        .requireClassRegistration(false)
        .withDeserializeNonexistentClass(true)
        .withMetaShare(true)
        .withAsyncCompilation(true)
        .withCompatibleMode(CompatibleMode.COMPATIBLE)
        .withScopedMetaShare(true)
        .withCodegen(true).buildThreadSafeFury();

    @Override
    public byte[] serialize(Object obj, Integer feature) throws SerializerException {
        try {
            return fury.serializeJavaObject(obj);
        } catch (Exception e) {
            logger.error(""[FurySerializer.serialize] exception "" + e.getMessage(), e);
            throw new SerializerException(e.toString(), e);
        }
    }

    @Override
    public <T> T deserialize(byte[] bytes, Class<T> cls) throws SerializerException {
        try {
            return fury.deserializeJavaObject(bytes, cls);
        } catch (Exception e) {
            logger.error(""[FurySerializer.deserialize] exception "" + e.getMessage(), e);
            throw new SerializerException(e.toString(), e);
        }
    }


public class FurySerializerTest {

    private FurySerializer furySerializer = new FurySerializer();
    
    @Test
    public void test() {
        try {
            byte[] byteBuf = new byte[9000];
            // 20241029201856_0B5DEB3A16AD446626A7948A497B9008_84110 Y
            // 20240904171221_212BA390147466B59B7D1320A7820000_84110 F
            String file = ""/home/admin/upload/20241029201856_0B5DEB3A16AD446626A7948A497B9008_84110"";
            InputStream input = Files.newInputStream(new File(file).toPath());
            int read = IOUtils.read(input, byteBuf);
            System.out.println(read);
            furySerializer.deserialize(byteBuf, AsynMessageRequest.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(true);
    }
}

![image](https://github.com/user-attachments/assets/6b2c1ae3-c3f5-4886-8430-664c1bc9aa3b)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1928/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1928,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SbaHx,fury,2456658417,1928,NA,shuyufang,9866579,,,NA,2024-11-05T09:26:13Z,2024-11-05T09:26:13Z,"<dependency>
  <groupId>org.apache.fury</groupId>
  <artifactId>fury-core</artifactId>
  <version>0.8.0</version>
</dependency>","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SbaHx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1928,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Sb95u,fury,2456804974,1928,NA,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,NA,2024-11-05T10:30:55Z,2024-11-05T10:30:55Z,"You can try `serialize` and `deserialize` method。For non-existent classes, the corresponding information will be saved in `NonexistentClass.NonexistentMetaShared`
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Sb95u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1929,https://api.github.com/repos/apache/fury/issues/1929,fury,2638607327,1929,[GO] old data unable to unmarshal by new struct,yfcck,43957,Root,,CLOSED,2024-11-06T16:26:04Z,2024-11-06T23:19:06Z,"### Search before asking

- [ ] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury: v0.8.0
go: 1.23.1


```
import (
    ""example/fury""
    ""fmt""
)

// 原始版本的 Person
type PersonV1 struct {
    Name    string
    Age     int
    Hobbies []string
}

// 新版本的 Person，添加了新字段
type PersonV2 struct {
    Name      string
    Age       int
    Hobbies   []string
    Email     string // 新增字段
    Address   string // 新增字段
    IsMarried bool   // 新增字段
}

func main() {

    fu := fury.NewFury(true)
    fu.RegisterTagType(""example.PersonV1"", PersonV1{})
    fu.RegisterTagType(""example.PersonV2"", PersonV2{})

    // 创建并序列化V1数据
    personV1 := PersonV1{
        Name:    ""张三"",
        Age:     25,
        Hobbies: []string{""读书"", ""运动""},
    }

    var err error
    var bytesV1,bytesV2 []byte

    bytesV1, err = fu.Marshal(personV1)
    if err != nil {
        panic(err)
    }

    var personV2 PersonV2
    if err = fu.Unmarshal(bytesV1, &personV2); err != nil {
        panic(err)
    }
    fmt.Println(""\n===测试向前兼容性（旧数据读取到新结构）==="",personV2)

    personV2.Email=""test@gmail.com""
    personV2.Address=""ABC""
    personV2.IsMarried= true

    bytesV2, err = fu.Marshal(personV2)
    if err != nil {
        panic(err)
    }

    if err = fu.Unmarshal(bytesV2,&personV1);err!=nil {
        panic(err)                                                                 // <----------------------------------------- got error
    }

    fmt.Println(""\n===测试向后兼容性（新数据读取到旧结构）==="",personV1)
}
```


===测试向前兼容性（旧数据读取到新结构）=== {张三 25 [读书 运动]   false}
panic: reflect: Field index out of range

goroutine 1 [running]:
reflect.Value.Field({0x113180?, 0xc00001a3f0?, 0xc00006bb90?}, 0x1488d?)
        C:/go/src/reflect/value.go:1273 +0x92
example/fury.(*structSerializer).Read(0xc000080100, 0xc0000840f0, 0xc000084230, {0x30?, 0x0?}, {0x113180?, 0xc00001a3f0?, 0xc000085f80?})
        D:/example/fury/struct.go:97 +0x2a9
example/fury.(*Fury).readData(0xc0000840f0, 0xc000084230, {0x113180?, 0xc00001a3f0?, 0xe2eff?}, {0x0, 0x0})
        D:/example/fury/fury.go:464 +0x379
example/fury.(*Fury).readReferencableBySerializer(0xc0000840f0, 0xc000084230, {0x113180?, 0xc00001a3f0?, 0x50?}, {0x0, 0x0})
        D:/example/fury/fury.go:385 +0xd9
example/fury.(*Fury).ReadReferencable(...)
        D:/example/fury/fury.go:376
example/fury.(*Fury).Deserialize(0xc0000840f0, 0xc000084230, {0xff040?, 0xc00001a3f0?}, {0x0?, 0xffd80?, 0x0?})
        D:/example/fury/fury.go:369 +0x32d
example/fury.(*Fury).Unmarshal(...)
        D:/example/fury/fury.go:318
main.main()
        D:/example/main.go:61 +0x3fe
exit status 2

### Component(s)

Go

### Minimal reproduce step

No response

### What did you expect to see?

No response

### What did you see instead?

No response

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1929/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1929,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SpJN1,fury,2460259189,1929,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-06T16:35:55Z,2024-11-06T16:35:55Z,"Hi @yfcck , thank for reporting this issue. This is a known issue. We have not implement type compatibility protocol in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#schema-evolution for golang. Currently only fury java and JavaScript support type compatibility","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SpJN1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1929,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Sr7OG,fury,2460988294,1929,NA,yfcck,43957,Root,,NA,2024-11-06T23:18:06Z,2024-11-06T23:18:06Z,"> Hi @yfcck , thank for reporting this issue. This is a known issue. We have not implement type compatibility protocol in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec#schema-evolution for golang. Currently only fury java and JavaScript support type compatibility

ok,ths!","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Sr7OG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1930,https://api.github.com/repos/apache/fury/issues/1930,fury,2640036235,1930,[Question] <title> Change the property type from int to long,shaozhen2012,13158527,Sen,304954038@qq.com,OPEN,2024-11-07T06:42:20Z,2024-11-07T14:15:54Z,"### Question

If the value of the attribute does not exceed, how to make the attribute type compatible. For example, change an attribute from int to long","{""url"": ""https://api.github.com/repos/apache/fury/issues/1930/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1930,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SxHRF,fury,2462348357,1930,NA,amabilee,133987451,mab,,NA,2024-11-07T14:15:52Z,2024-11-07T14:15:52Z,"Hey there!

To ensure type compatibility when changing an attribute type (e.g., from int to long), you can leverage Fury's type compatibility protocol. Fury supports forward and backward compatibility for object serialization, which means you can add or delete fields independently on the serialization and deserialization sides.

Here is more information: [#1610](https://github.com/apache/fury/issues/1670), [Documentation](https://fury.apache.org/docs/introduction/) and [#197](https://github.com/apache/fury/issues/197) 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6SxHRF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1931,https://api.github.com/repos/apache/fury/issues/1931,fury,2640811143,1931,【Java】support deserialize object when none local class can deserializeNonexistentClassNotWriteFullClassInfo feature,shuyufang,9866579,,,OPEN,2024-11-07T11:56:47Z,2024-11-07T11:56:47Z,"### Feature Request

we want fury support deserialize object when none local class can deserializeNonexistentClassNotWriteFullClassInfo feature

### Is your feature request related to a problem? Please describe

we want fury support deserialize object when none local class can deserializeNonexistentClassNotWriteFullClassInfo feature

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1931/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1934,https://api.github.com/repos/apache/fury/issues/1934,fury,2641581192,1934,[Python] Optimize collection serialization protocol by homogenization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-07T16:42:42Z,2024-12-11T07:46:18Z,"### Feature Request

The new collection serialization protocol in https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#list can be 2x faster than current one in pyfury.   #923 has proved it. we should implement this protocol

![image](https://github.com/user-attachments/assets/8ca279b6-4ea1-427a-b6cb-be42ced40eb0)






### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#lis

### Describe alternatives you've considered

_No response_

### Additional context

https://github.com/apache/fury/pull/923","{""url"": ""https://api.github.com/repos/apache/fury/issues/1934/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1935,https://api.github.com/repos/apache/fury/issues/1935,fury,2641603503,1935,[Python][Protocol] Chunk by chunk predictive map serialization protocol ,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-11-07T16:45:55Z,2025-02-06T07:14:36Z,"### Feature Request

 Chunk by chunk predictive map serialization protocol  can be 2x faster than current one in pyfury. we should implement this new protocol.

See #925 for more details




### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#map has a formulized spec:

> All Map serializers must extend `AbstractMapSerializer`.

Format:

```
| length(unsigned varint) | key value chunk data | ... | key value chunk data |
```

#### map key-value chunk data

Map iteration is too expensive, Fury won't compute the header like for list since it introduce
[considerable overhead](https://github.com/apache/fury/issues/925).
Users can use `MapFieldInfo` annotation to provide the header in advance. Otherwise Fury will use first key-value pair
to predict header optimistically, and update the chunk header if the prediction failed at some pair.

Fury will serialize the map chunk by chunk, every chunk has 255 pairs at most.

```
|    1 byte      |     1 byte     | variable bytes  |
+----------------+----------------+-----------------+
| chunk size: N  |    KV header   |   N*2 objects   |
```

KV header:

- If track key ref, use the first bit `0b1` of the header to flag it.
- If the key has null, use the second bit `0b10` of the header to flag it. If ref tracking is enabled for this
  key type, this flag is invalid.
- If the key types of map are different, use the 3rd bit `0b100` of the header to flag it.
- If the actual key type of the map is not the declared key type, use the 4rd bit `0b1000` of the header to flag it.
- If track value ref, use the 5th bit `0b10000` of the header to flag it.
- If the value has null, use the 6th bit `0b100000` of the header to flag it. If ref tracking is enabled for this
  value type, this flag is invalid.
- If the value types of the map are different, use the 7rd bit `0b1000000` header to flag it.
- If the value type of map is not the declared value type, use the 8rd bit `0b10000000` of the header to flag it.

If streaming write is enabled, which means Fury can't update written `chunk size`. In such cases, map key-value data
format will be:

```
|    1 byte      | variable bytes  |
+----------------+-----------------+
|    KV header   |   N*2 objects   |
```

`KV header` will be a header marked by `MapFieldInfo` in java. For languages such as golang, this can be computed in
advance for non-interface types most times. The implementation can generate different deserialization code based read
header, and look up the generated code from a linear map/list.

#### Why serialize chunk by chunk?

When fury will use first key-value pair to predict header optimistically, it can't know how many pairs have same
meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at
least `X` bytes to take up a place for later to update the number which has same elements, `X` is the num_bytes for
encoding varint encoding of map size.

And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust,
which object are not reference by default.

Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share
meta.

The implementation can accumulate read count with map size to decide whether to read more chunks.

### Describe alternatives you've considered

_No response_

### Additional context

#925","{""url"": ""https://api.github.com/repos/apache/fury/issues/1935/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1935,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VjIpC,fury,2509015618,1935,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-30T15:56:43Z,2024-11-30T15:56:43Z,"- https://github.com/apache/fury/pull/1549 is javascript implementation
- https://github.com/apache/fury/pull/1722 is a java implementation

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VjIpC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1936,https://api.github.com/repos/apache/fury/issues/1936,fury,2641610414,1936,[Go] chunk based map predictive protocol,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-07T16:47:21Z,2024-11-07T16:47:21Z,"### Feature Request

Implement chunk based map predictive protocol, which is 2x faster than current one.

> All Map serializers must extend `AbstractMapSerializer`.

Format:

```
| length(unsigned varint) | key value chunk data | ... | key value chunk data |
```

#### map key-value chunk data

Map iteration is too expensive, Fury won't compute the header like for list since it introduce
[considerable overhead](https://github.com/apache/fury/issues/925).
Users can use `MapFieldInfo` annotation to provide the header in advance. Otherwise Fury will use first key-value pair
to predict header optimistically, and update the chunk header if the prediction failed at some pair.

Fury will serialize the map chunk by chunk, every chunk has 255 pairs at most.

```
|    1 byte      |     1 byte     | variable bytes  |
+----------------+----------------+-----------------+
| chunk size: N  |    KV header   |   N*2 objects   |
```

KV header:

- If track key ref, use the first bit `0b1` of the header to flag it.
- If the key has null, use the second bit `0b10` of the header to flag it. If ref tracking is enabled for this
  key type, this flag is invalid.
- If the key types of map are different, use the 3rd bit `0b100` of the header to flag it.
- If the actual key type of the map is not the declared key type, use the 4rd bit `0b1000` of the header to flag it.
- If track value ref, use the 5th bit `0b10000` of the header to flag it.
- If the value has null, use the 6th bit `0b100000` of the header to flag it. If ref tracking is enabled for this
  value type, this flag is invalid.
- If the value types of the map are different, use the 7rd bit `0b1000000` header to flag it.
- If the value type of map is not the declared value type, use the 8rd bit `0b10000000` of the header to flag it.

If streaming write is enabled, which means Fury can't update written `chunk size`. In such cases, map key-value data
format will be:

```
|    1 byte      | variable bytes  |
+----------------+-----------------+
|    KV header   |   N*2 objects   |
```

`KV header` will be a header marked by `MapFieldInfo` in java. For languages such as golang, this can be computed in
advance for non-interface types most times. The implementation can generate different deserialization code based read
header, and look up the generated code from a linear map/list.

#### Why serialize chunk by chunk?

When fury will use first key-value pair to predict header optimistically, it can't know how many pairs have same
meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at
least `X` bytes to take up a place for later to update the number which has same elements, `X` is the num_bytes for
encoding varint encoding of map size.

And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust,
which object are not reference by default.

Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share
meta.

The implementation can accumulate read count with map size to decide whether to read more chunks.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

#925","{""url"": ""https://api.github.com/repos/apache/fury/issues/1936/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1937,https://api.github.com/repos/apache/fury/issues/1937,fury,2641614167,1937,[Go] Optimize collection serialization protocol by homogenization #923,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-07T16:48:15Z,2024-11-07T16:48:15Z,"### Feature Request

Optimize collection serialization protocol by homogenization. https://fury.apache.org/docs/specification/fury_xlang_serialization_spec/#list is a formulized spec:

> All Map serializers must extend `AbstractMapSerializer`.

Format:

```
| length(unsigned varint) | key value chunk data | ... | key value chunk data |
```

#### map key-value chunk data

Map iteration is too expensive, Fury won't compute the header like for list since it introduce
[considerable overhead](https://github.com/apache/fury/issues/925).
Users can use `MapFieldInfo` annotation to provide the header in advance. Otherwise Fury will use first key-value pair
to predict header optimistically, and update the chunk header if the prediction failed at some pair.

Fury will serialize the map chunk by chunk, every chunk has 255 pairs at most.

```
|    1 byte      |     1 byte     | variable bytes  |
+----------------+----------------+-----------------+
| chunk size: N  |    KV header   |   N*2 objects   |
```

KV header:

- If track key ref, use the first bit `0b1` of the header to flag it.
- If the key has null, use the second bit `0b10` of the header to flag it. If ref tracking is enabled for this
  key type, this flag is invalid.
- If the key types of map are different, use the 3rd bit `0b100` of the header to flag it.
- If the actual key type of the map is not the declared key type, use the 4rd bit `0b1000` of the header to flag it.
- If track value ref, use the 5th bit `0b10000` of the header to flag it.
- If the value has null, use the 6th bit `0b100000` of the header to flag it. If ref tracking is enabled for this
  value type, this flag is invalid.
- If the value types of the map are different, use the 7rd bit `0b1000000` header to flag it.
- If the value type of map is not the declared value type, use the 8rd bit `0b10000000` of the header to flag it.

If streaming write is enabled, which means Fury can't update written `chunk size`. In such cases, map key-value data
format will be:

```
|    1 byte      | variable bytes  |
+----------------+-----------------+
|    KV header   |   N*2 objects   |
```

`KV header` will be a header marked by `MapFieldInfo` in java. For languages such as golang, this can be computed in
advance for non-interface types most times. The implementation can generate different deserialization code based read
header, and look up the generated code from a linear map/list.

#### Why serialize chunk by chunk?

When fury will use first key-value pair to predict header optimistically, it can't know how many pairs have same
meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at
least `X` bytes to take up a place for later to update the number which has same elements, `X` is the num_bytes for
encoding varint encoding of map size.

And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust,
which object are not reference by default.

Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share
meta.

The implementation can accumulate read count with map size to decide whether to read more chunks.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

 #923","{""url"": ""https://api.github.com/repos/apache/fury/issues/1937/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1938,https://api.github.com/repos/apache/fury/issues/1938,fury,2643061429,1938,[Python] Schema evolution support for type backward/forward compatibility,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-08T06:53:11Z,2024-11-08T06:53:37Z,"### Feature Request

If schema evolution mode is enabled globally when creating fury, and enabled for current type, type meta will be written
using one of the following mode. Which mode to use is configured when creating fury.

- Normal mode(meta share not enabled):
  - If type meta hasn't been written before, add `type def`
      to `captured_type_defs`: `captured_type_defs[type def] = map size`.
  - Get index of the meta in `captured_type_defs`, write that index as `| unsigned varint: index |`.
  - After finished the serialization of the object graph, fury will start to write `captured_type_defs`:
    - Firstly, set current to `meta start offset` of fury header
    - Then write `captured_type_defs` one by one:

      ```python
      buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs))
      for type_meta in writting_type_defs:
          if not type_meta.is_stub():
              type_meta.write_type_def(buffer)
      writing_type_defs = copy(schema_consistent_type_def_stubs)
      ```

- Meta share mode: the writing steps are same as the normal mode, but `captured_type_defs` will be shared across
  multiple serializations of different objects. For example, suppose we have a batch to serialize:

    ```python
    captured_type_defs = {}
    stream = ...
    # add `Type1` to `captured_type_defs` and write `Type1`
    fury.serialize(stream, [Type1()])
    # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before.
    fury.serialize(stream, [Type1(), Type2()])
    # `Type1` and `Type2` are written before, no need to write meta.
    fury.serialize(stream, [Type1(), Type2()])
    ```

- Streaming mode(streaming mode doesn't support meta share):
  - If type meta hasn't been written before, the data will be written as:

      ```
      | unsigned varint: 0b11111111 | type def |
      ```

  - If type meta has been written before, the data will be written as:

      ```
      | unsigned varint: written index << 1 |
      ```

      `written index` is the id in `captured_type_defs`.
  - With this mode, `meta start offset` can be omitted.

> The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start
> offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure
> deserialization failure in meta share mode doesn't lost shared meta.

#### Type Def

Here we mainly describe the meta layout for schema evolution mode:

```
|      8 bytes meta header      |   variable bytes   |  variable bytes   | variable bytes |
+-------------------------------+--------------------+-------------------+----------------+
| 7 bytes hash + 1 bytes header |  current type meta |  parent type meta |      ...       |
```

Type meta are encoded from parent type to leaf type, only type with serializable fields will be encoded.

##### Meta header

Meta header is a 64 bits number value encoded in little endian order.

- Lowest 4 digits `0b0000~0b1110` are used to record num classes. `0b1111` is preserved to indicate that Fury need to
  read more bytes for length using Fury unsigned int encoding. If current type doesn't has parent type, or parent
  type doesn't have fields to serialize, or we're in a context which serialize fields of current type
  only, num classes will be 1.
- The 5th bit is used to indicate whether this type needs schema evolution.
- Other 56 bits are used to store the unique hash of `flags + all layers type meta`.

##### Single layer type meta

```
| unsigned varint | var uint |  field info: variable bytes   | variable bytes  | ... |
+-----------------+----------+-------------------------------+-----------------+-----+
|   num_fields    | type id  | header + type id + field name | next field info | ... |
```

- num fields: encode `num fields` as unsigned varint.
  - If the current type is schema consistent, then num_fields will be `0` to flag it.
  - If the current type isn't schema consistent, then num_fields will be the number of compatible fields. For example,
      users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema
      consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization,
      Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent
      fields, then use fields info in meta for deserializing compatible fields.
- type id: the registered id for the current type, which will be written as an unsigned varint.
- field info:
  - header(8
      bits): `3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag`.
      Users can use annotation to provide those info.
    - 2 bits field name encoding:
      - encoding: `UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_ID`
      - If tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be `11`.
    - size of field name:
      - The `3 bits size: 0~7`  will be used to indicate length `1~7`, the value `7` indicates to read more bytes,
              the encoding will encode `size - 7` as a varint next.
      - If encoding is `TAG_ID`, then num_bytes of field name will be used to store tag id.
    - ref tracking: when set to 1, ref tracking will be enabled for this field.
    - nullability: when set to 1, this field can be null.
    - polymorphism: when set to 1, the actual type of field will be the declared field type even the type if
          not `final`.
  - field name: If tag id is set, tag id will be used instead. Otherwise meta string encoding `[length]` and data will
      be written instead.
  - type id:
    - For registered type-consistent classes, it will be the registered type id.
    - Otherwise it will be encoded as `OBJECT_ID` if it isn't `final` and `FINAL_OBJECT_ID` if it's `final`. The
          meta for such types is written separately instead of inlining here is to reduce meta space cost if object of
          this type is serialized in current object graph multiple times, and the field value may be null too.

Field order are left as implementation details, which is not exposed to specification, the deserialization need to
resort fields based on Fury field comparator. In this way, fury can compute statistics for field names or types and
using a more compact encoding.

##### Other layers type meta

Same encoding algorithm as the previous layer.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

#1556 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/1938/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1939,https://api.github.com/repos/apache/fury/issues/1939,fury,2644234875,1939,[Go] Schema evolution support for type backward/forward compatibility,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-08T14:37:09Z,2024-11-08T14:37:09Z,"### Feature Request

If schema evolution mode is enabled globally when creating fury, and enabled for current type, type meta will be written
using one of the following mode. Which mode to use is configured when creating fury.

- Normal mode(meta share not enabled):
  - If type meta hasn't been written before, add `type def`
      to `captured_type_defs`: `captured_type_defs[type def] = map size`.
  - Get index of the meta in `captured_type_defs`, write that index as `| unsigned varint: index |`.
  - After finished the serialization of the object graph, fury will start to write `captured_type_defs`:
    - Firstly, set current to `meta start offset` of fury header
    - Then write `captured_type_defs` one by one:

      ```python
      buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs))
      for type_meta in writting_type_defs:
          if not type_meta.is_stub():
              type_meta.write_type_def(buffer)
      writing_type_defs = copy(schema_consistent_type_def_stubs)
      ```

- Meta share mode: the writing steps are same as the normal mode, but `captured_type_defs` will be shared across
  multiple serializations of different objects. For example, suppose we have a batch to serialize:

    ```python
    captured_type_defs = {}
    stream = ...
    # add `Type1` to `captured_type_defs` and write `Type1`
    fury.serialize(stream, [Type1()])
    # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before.
    fury.serialize(stream, [Type1(), Type2()])
    # `Type1` and `Type2` are written before, no need to write meta.
    fury.serialize(stream, [Type1(), Type2()])
    ```

- Streaming mode(streaming mode doesn't support meta share):
  - If type meta hasn't been written before, the data will be written as:

      ```
      | unsigned varint: 0b11111111 | type def |
      ```

  - If type meta has been written before, the data will be written as:

      ```
      | unsigned varint: written index << 1 |
      ```

      `written index` is the id in `captured_type_defs`.
  - With this mode, `meta start offset` can be omitted.

> The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start
> offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure
> deserialization failure in meta share mode doesn't lost shared meta.

#### Type Def

Here we mainly describe the meta layout for schema evolution mode:

```
|      8 bytes meta header      |   variable bytes   |  variable bytes   | variable bytes |
+-------------------------------+--------------------+-------------------+----------------+
| 7 bytes hash + 1 bytes header |  current type meta |  parent type meta |      ...       |
```

Type meta are encoded from parent type to leaf type, only type with serializable fields will be encoded.

##### Meta header

Meta header is a 64 bits number value encoded in little endian order.

- Lowest 4 digits `0b0000~0b1110` are used to record num classes. `0b1111` is preserved to indicate that Fury need to
  read more bytes for length using Fury unsigned int encoding. If current type doesn't has parent type, or parent
  type doesn't have fields to serialize, or we're in a context which serialize fields of current type
  only, num classes will be 1.
- The 5th bit is used to indicate whether this type needs schema evolution.
- Other 56 bits are used to store the unique hash of `flags + all layers type meta`.

##### Single layer type meta

```
| unsigned varint | var uint |  field info: variable bytes   | variable bytes  | ... |
+-----------------+----------+-------------------------------+-----------------+-----+
|   num_fields    | type id  | header + type id + field name | next field info | ... |
```

- num fields: encode `num fields` as unsigned varint.
  - If the current type is schema consistent, then num_fields will be `0` to flag it.
  - If the current type isn't schema consistent, then num_fields will be the number of compatible fields. For example,
      users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema
      consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization,
      Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent
      fields, then use fields info in meta for deserializing compatible fields.
- type id: the registered id for the current type, which will be written as an unsigned varint.
- field info:
  - header(8
      bits): `3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag`.
      Users can use annotation to provide those info.
    - 2 bits field name encoding:
      - encoding: `UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_ID`
      - If tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be `11`.
    - size of field name:
      - The `3 bits size: 0~7`  will be used to indicate length `1~7`, the value `7` indicates to read more bytes,
              the encoding will encode `size - 7` as a varint next.
      - If encoding is `TAG_ID`, then num_bytes of field name will be used to store tag id.
    - ref tracking: when set to 1, ref tracking will be enabled for this field.
    - nullability: when set to 1, this field can be null.
    - polymorphism: when set to 1, the actual type of field will be the declared field type even the type if
          not `final`.
  - field name: If tag id is set, tag id will be used instead. Otherwise meta string encoding `[length]` and data will
      be written instead.
  - type id:
    - For registered type-consistent classes, it will be the registered type id.
    - Otherwise it will be encoded as `OBJECT_ID` if it isn't `final` and `FINAL_OBJECT_ID` if it's `final`. The
          meta for such types is written separately instead of inlining here is to reduce meta space cost if object of
          this type is serialized in current object graph multiple times, and the field value may be null too.

Field order are left as implementation details, which is not exposed to specification, the deserialization need to
resort fields based on Fury field comparator. In this way, fury can compute statistics for field names or types and
using a more compact encoding.

##### Other layers type meta

Same encoding algorithm as the previous layer.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

#Meta Enc","{""url"": ""https://api.github.com/repos/apache/fury/issues/1939/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1941,https://api.github.com/repos/apache/fury/issues/1941,fury,2648015681,1941,`radial_scale` parameter of `actor.odf_slicer` has some issues ,zp1008611,59312863,,,CLOSED,2024-11-11T03:25:33Z,2024-11-11T11:24:00Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

dipy                1.9.0
fury                0.11.0

### Component(s)

Python

### Minimal reproduce step

```python
import numpy as np 
from dipy.sims.voxel import multi_tensor, multi_tensor_odf 
from dipy.data import get_sphere 
from dipy.core.sphere import disperse_charges, Sphere, HemiSphere 
from dipy.core.gradients import gradient_table 
from fury import window, actor 
from IPython.core.display import Image 
from PIL import Image as PILImage 

import os

# %%
# helper functions for visualization 
WINDOW_SIZE = (400,400)
SAVEIM_FOLDER = ""images""
if not os.path.exists(SAVEIM_FOLDER): 
    os.mkdir(SAVEIM_FOLDER)
def screenshot_animated_sf(sf, sphere, rot=True, norm=True, scale=True, title='Modeling', theta_step=30):

    """"""
        Render a spherical function to file. Returns path to image.
    """"""
    scene = window.Scene() 
    scene.background(window.colors.white)
    sf_actor = actor.odf_slicer(sf[None, None, None,:], 
        sphere=sphere, colormap='jet', 
        norm=norm, radial_scale=scale)
    if rot: 
        scene.add(sf_actor)
        sf_actor.Rotatex(90)
    n_frames = 360//theta_step 
    images=[] 
    for i in np.arange(n_frames): 
        sf_actor.Rotatex(theta_step)
        scene.reset_clipping_range() 
        images.append(PILImage.fromarray(window.snapshot(scene, size=WINDOW_SIZE)))

    frame_duration = 15000 // theta_step
    filename = os.path.join(SAVEIM_FOLDER, '{0}.gif'.format(title))
    images[0].save(filename, save_all=True, append_images=images[1:], duration=frame_duration, optimize=False, loop=0)
    scene.clear()
    return filename

def screenshot_gradients(sph_gtab, title='Modeling'):
    scene = window.Scene()
    scene.background(window.colors.white)
    scene.add(actor.point(sph_gtab.vertices, window.colors.green, point_radius=0.05))
    outfile = os.path.join(SAVEIM_FOLDER, '{0}.png'.format(title))
    window.snapshot(scene, size=WINDOW_SIZE, fname=outfile)
    scene.clear()
    return outfile

# %% [markdown]
# ### Part 1 - Apparent diffusion coefficient and spherical harmonics Generating a gradient table

# %%
n_pts = 64
bvalue = 1000
theta = np.pi * np.random.rand(n_pts)
phi = 2 * np.pi * np.random.rand(n_pts)
hsph_initial = HemiSphere(theta=theta, phi=phi)
hsph_updated, potential = disperse_charges(hsph_initial, 5000)

vertices = hsph_updated.vertices
values = np.ones(vertices.shape[0])
bvecs = np.vstack((vertices))
bvals = np.hstack((bvalue * values)) 
#add some b=0 bvals/bvecs
bvecs = np.insert(bvecs, (0, bvecs.shape[0]), np.array([0, 0, 0]), axis=0)
bvals = np.insert(bvals, (0, bvals.shape[0]), 0)

gtab = gradient_table(bvals, bvecs)
sph_gtab = Sphere(xyz=np.vstack((vertices, -vertices)))
print('bvecs:\n', bvecs)
print('bvals:\n', bvals)

# %%
image = screenshot_gradients(sph_gtab, title='Example directions')
Image(filename=image)

# %% [markdown]
# #### Playing with different single and multi-tensor signal generation
# 

# %%
S0 = 100
SNR = 100
N = 2 # change this value to try other number of fibers
if N == 1:
    mevals = np.array([[0.0015, 0.0004, 0.0004]])
    angles = [(0, 0)]
    fractions = [100]
elif N == 2:
    separation_angle = 90 # play with this parameter to change the angle between fibers
    mevals = np.array([[0.0015, 0.0004, 0.0004],
                        [0.0015, 0.0004, 0.0004]])
    angles = [(0, 0), (separation_angle, 0)]
    fractions = [50, 50]
elif N == 3:
    mevals = np.array([[0.0015, 0.0004, 0.0004],
                        [0.0004, 0.0015, 0.0004], 
                        [0.0004, 0.0004, 0.0015]])
    angles = [(0, 0), (90, 0), (0, 90)]
    fractions = [33, 33, 34]
else:
    raise ValueError('Invalid number of fibers.')
signal, sticks = multi_tensor(gtab, mevals, S0 = S0, angles = angles,
                               fractions = fractions, snr = SNR)
print(signal)

# %%
# we generate an antipodally symmetric spherical function from our signal
signal_sph = np.zeros(vertices.shape[0]*2)
signal_sph[0:vertices.shape[0]] = signal[1:-1]
signal_sph[vertices.shape[0]:] = signal[1:-1]

actor.odf_slicer(signal_sph[None, None, None,:], sphere=sph_gtab, colormap='jet', norm=False, radial_scale=False,)
```
### What did you expect to see?

In the attached code, the last line uses actor.odf_slicer. When radial_scale set to False, it does not result in an error.

### What did you see instead?

In the attached code, the last line uses actor.odf_slicer. When radial_scale is set to True, it doesn't raise an error, but when set to False, it does result in an error.
### error png
![image](https://github.com/user-attachments/assets/e114d131-1786-4d6d-9e29-83d7546d1417)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1941/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1941,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDoZU,fury,2467202644,1941,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-11T04:21:05Z,2024-11-11T04:21:05Z,Seems you reported to the wrong repo. Apache Fury is a serialization library,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDoZU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1941,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDq5q,fury,2467212906,1941,NA,zp1008611,59312863,,,NA,2024-11-11T04:33:02Z,2024-11-11T04:33:02Z,"I previously reported an issue in the dipy repository,but they said it's a problem with the fury module, as dipy's visualization embeds the fury module.

---Original---
From: ""Shawn ***@***.***&gt;
Date: Mon, Nov 11, 2024 12:21 PM
To: ***@***.***&gt;;
Cc: ***@***.******@***.***&gt;;
Subject: Re: [apache/fury] `radial_scale` parameter of `actor.odf_slicer` hassome issues  (Issue #1941)




 
Seems you reported to the wrong repo. Apache Fury is a serialization library
 
—
Reply to this email directly, view it on GitHub, or unsubscribe.
You are receiving this because you authored the thread.Message ID: ***@***.***&gt;","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDq5q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1941,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDrGE,fury,2467213700,1941,NA,zp1008611,59312863,,,NA,2024-11-11T04:34:02Z,2024-11-11T04:34:02Z,"My apologies, I realized I've approached the wrong repository.



---Original---
From: ""Shawn ***@***.***&gt;
Date: Mon, Nov 11, 2024 12:21 PM
To: ***@***.***&gt;;
Cc: ***@***.******@***.***&gt;;
Subject: Re: [apache/fury] `radial_scale` parameter of `actor.odf_slicer` hassome issues  (Issue #1941)




 
Seems you reported to the wrong repo. Apache Fury is a serialization library
 
—
Reply to this email directly, view it on GitHub, or unsubscribe.
You are receiving this because you authored the thread.Message ID: ***@***.***&gt;","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TDrGE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1941,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TGbgH,fury,2467936263,1941,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-11T11:24:00Z,2024-11-11T11:24:00Z,"It's OK, so I'll close this issue now","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6TGbgH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1943,https://api.github.com/repos/apache/fury/issues/1943,fury,2655676234,1943,[Java] ReplaceResolveSerializer circular references copy bug,zhaommmmomo,72839999,zhaommmmomo,zmm@zhaommmmomo.cn,OPEN,2024-11-13T14:22:02Z,2024-11-13T14:22:03Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury 0.10.0-SNAPSHOT
https://github.com/apache/fury/pull/1925

### Component(s)

Java

### Minimal reproduce step

```java
@Test
  public void test() {
    Fury fury = Fury.builder().withRefCopy(true).withLanguage(Language.JAVA).build();
    fury.registerSerializer(Tmp.class, ReplaceResolveSerializer.class);
    Tmp a = new Tmp();
    Tmp b = new Tmp();
    a.name = ""a"";
    a.ref = b;
    b.name = ""b"";
    b.ref = a;
    Tmp copy = fury.copy(a);
    assertNotSame(copy, a);
  }

  public static class Tmp implements Serializable {
    public Object ref;
    public String name;

    private Object writeReplace() {
      return ref;
    }

    private Object readResolve() {
      return ref;
    }
  }
```

### What did you expect to see?

The copied object should not have the same address as the original object.

### What did you see instead?

The copied object has the same address as the original object.
![image](https://github.com/user-attachments/assets/89a3b0ac-2431-4b44-8c91-1ed05acc03a3)

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1943/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/1945,fury,2671377409,1945,"[Question] For the Java PB object generated by Protobuf, the serialization and deserialization using Fury are slower than using Protobuf.",a1342772,30279992,research,,CLOSED,2024-11-19T09:05:48Z,2024-11-22T12:28:05Z,"```
GrpcService.ModelInferRequest` resp = GrpcService.ModelInferRequest
                    .newBuilder()
                    .addAllInputs(inputs)
                    .build();

             byte[] data = fury.serializeJavaObject(resp);
             fury.deserializeJavaObject(data, GrpcService.ModelInferRequest.class);

             byte[] data = resp.toByteArray();
             GrpcService.ModelInferRequest.parseFrom(data); 
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1945/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UH7zM,fury,2485107916,1945,NA,a1342772,30279992,research,,NA,2024-11-19T09:08:53Z,2024-11-19T09:08:53Z,@chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UH7zM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UMNAO,fury,2486226958,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-19T16:44:20Z,2024-11-19T16:44:20Z,"@a1342772 Java PB object generated by Protobuf is an internal object representation in Protobuf, it hold many internal state for protobuf usage only. You should not serialize such objects using other seiralization framework. You could define your data using POJO and pass such obejcts to Fury instead.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UMNAO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UMUFJ,fury,2486255945,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-19T16:57:02Z,2024-11-19T16:57:02Z,"@a1342772 If you do want serialize such Protobuf generated objects using Fury, you could do following optimization:
* Implement  serializers by extends `org.fury.serializer.Serializer` for `com.google.protobuf.Internal$IntList/DoubleList/FloatList/LongList/BooleanList/ShortList`
* Implement serializer for `com.google.protobuf.UnknownFieldSet`
* Register all those serializers to Fury.

At last,  Protobuf generated objects cached many fields data such as `booleanArrayMemoizedSerializedSize/longArrayMemoizedSerializedSize/memoizedHashCode/memoizedIsInitialized/memoizedSize/bitField0_/`, they are all redundant and only meaningful to Protobuf. You shoud find a way to skip serialization of those fields. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UMUFJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UPqSK,fury,2487133322,1945,NA,a1342772,30279992,research,,NA,2024-11-20T01:36:36Z,2024-11-20T01:36:36Z,"1.The Java POJO is too large, and directly serializing it with Fury takes a long time. Therefore, it's necessary to convert it into a Protobuf (pb) object before serialization. Do you have any solutions to this problem?
2.Do you have examples of Java serializing Protobuf objects? @chaokunyang chao","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UPqSK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UPy_c,fury,2487168988,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T02:05:47Z,2024-11-20T02:05:47Z,@a1342772 could you share the full proto definition here for the data you want to serialize? We can't do anything with the code you post in this issue,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UPy_c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UP0Og,fury,2487174048,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T02:09:48Z,2024-11-20T02:09:48Z,"> 1.The Java POJO is too large, and directly serializing it with Fury takes a long time. Therefore, it's necessary to convert it into a Protobuf (pb) object before serialization. Do you have any solutions to this problem? 2.Do you have examples of Java serializing Protobuf objects? @chaokunyang chao

I don't think serializing the pojo with Fury directly will take a longer time. There are already  many companies switches from pb to fury and they all get several times speedup. If you could a fully reproducible code, and share jmh benchmark results, we could take a look at it. Otherwise, i don't think we can do anything.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UP0Og/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UP_R3,fury,2487219319,1945,NA,a1342772,30279992,research,,NA,2024-11-20T02:36:48Z,2024-11-20T02:36:48Z,"The application scenario is search and recommendation, where proto objects need to be constructed for model inference，The proto file is as follows:
[grpc_service.proto.txt](https://github.com/user-attachments/files/17823908/grpc_service.proto.txt)

The test code is as follows:

`static` Fury furyTest;

    static {
        furyTest = Fury.builder()
                .withLanguage(Language.JAVA)
                .requireClassRegistration(false)
                .withCodegen(false)
                .withRefTracking(false)
                .withAsyncCompilation(true)
                .build();
    }

    public static void main(String[] args) {
        Map<String, ArrayList<FeaOutputV3>> itemsFeatDataV3 = new HashMap<>();
        int numFeatures = 320;
        int numColumns = 20;

        // 模拟特征数据
        for (int i = 0; i < numFeatures; i++) {
            String featureName = ""feature_"" + i;
            ArrayList<FeaOutputV3> featureDataList = new ArrayList<>();

            for (int j = 0; j < numColumns; j++) {
                IntList featureValues = new IntArrayList();
                for (int k = 0; k < numColumns; k++) {
                    featureValues.add(i * numColumns + k);
                }
                FeaOutputV3 feaOutputV3 = new FeaOutputV3();
                feaOutputV3.setFixSizeList(featureValues);
                featureDataList.add(feaOutputV3);
            }

            itemsFeatDataV3.put(featureName, featureDataList);
        }

        // 构建输入张量
        GrpcService.ModelInferRequest.InferInputTensor.Builder tensorBuilder =
                GrpcService.ModelInferRequest.InferInputTensor.newBuilder();
        GrpcService.InferTensorContents.Builder tensorContentBuilder =
                GrpcService.InferTensorContents.newBuilder();

        List<GrpcService.ModelInferRequest.InferInputTensor> inputs = new ArrayList<>();
        itemsFeatDataV3.forEach((name, featList) -> {
            int l1 = featList.size();
            if (CollectionUtils.isNotEmpty(featList.get(0).getFixSizeList())) {
                int l2 = featList.get(0).getFixSizeList().size();
                IntList features = new IntArrayList(l1 * l2);

                featList.forEach(feaOutput -> features.addAll(feaOutput.getFixSizeList()));
                inputs.add(featureBuildWithFast(tensorBuilder, tensorContentBuilder, features, name, l1, l2));
            }
        });

        // 测试序列化性能
        for (int count = 0; count < 50; count++) {
            long startSerialization = System.nanoTime();
            GrpcService.ModelInferRequest resp = GrpcService.ModelInferRequest
                    .newBuilder()
                    .addAllInputs(inputs)
                    .build();

            byte[] data = furyTest.serializeJavaObject(resp);
            furyTest.deserializeJavaObject(data, GrpcService.ModelInferRequest.class);

            //protobuf
            //byte[] data = resp.toByteArray();
            //GrpcService.ModelInferRequest.parseFrom(data);
            long endSerialization = System.nanoTime();
            long serializationTimeMs = (endSerialization - startSerialization) / 1_000_000;

            System.out.println(""Serialization time (milliseconds): "" + serializationTimeMs + "" size: "" + data.length);
        }
    }



    public static GrpcService.ModelInferRequest.InferInputTensor featureBuildWithFast(
            GrpcService.ModelInferRequest.InferInputTensor.Builder tensorBuilder1,
            GrpcService.InferTensorContents.Builder tensorContentBuilder2,
            IntList features, String featureName, int l1, int l2) {

        GrpcService.ModelInferRequest.InferInputTensor.Builder tensorBuilder =
                GrpcService.ModelInferRequest.InferInputTensor.newBuilder();
        GrpcService.InferTensorContents.Builder tensorContentBuilder =
                GrpcService.InferTensorContents.newBuilder();
        if (features == null) {
            features = new IntArrayList();
        }
        tensorContentBuilder.addAllIntContents(features);
        GrpcService.ModelInferRequest.InferInputTensor input = tensorBuilder.setName(featureName)
                .setDatatype(""INT32"")
                .addShape(l1)
                .addShape(l2)
                .setContents(tensorContentBuilder)
                .buildPartial();
        return input;
    }`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UP_R3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQA84,fury,2487226168,1945,NA,a1342772,30279992,research,,NA,2024-11-20T02:43:06Z,2024-11-20T02:43:06Z,"@chaokunyang The bytes obtained by directly serializing a Java object ""itemsFeatDataV3""  with Fury are several times larger than those obtained by serializing the object after constructing the Protobuf object.






","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQA84/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQD0L,fury,2487237899,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T02:54:36Z,2024-11-20T02:54:36Z,"You disabled FURY JIT, the serialization will be slow:
```java
furyTest = Fury.builder()
            .withLanguage(Language.JAVA)
            .requireClassRegistration(false)
            .withCodegen(false)
            .withRefTracking(false)
            .withAsyncCompilation(true)
            .build();
```

please create fury like this:
```java
fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .withRefTracking(false)
            .build();
```

And register all the types, please don't disable class registration:
```java
fury.register(GrpcService.ModelInferRequest.InferInputTensor.class);
fury.register(GrpcService.ModelInferRequest.class);
fury.register(GrpcService.InferTensorContents.class);
```

And please warm serialization several times before benchmark. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQD0L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQLX6,fury,2487268858,1945,NA,a1342772,30279992,research,,NA,2024-11-20T03:24:51Z,2024-11-20T03:24:51Z,"@chaokunyang 
![企业微信截图_018b542e-f54a-4381-884b-b752b1b221d1](https://github.com/user-attachments/assets/fa7d694c-28fb-43e0-a224-61779d4ae056)
The protected object cannot be registered.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQLX6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQNyT,fury,2487278739,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T03:34:03Z,2024-11-20T03:34:03Z,"@a1342772 You could pass a qualified string instead like `fury.register(""com.google.protobuf.GeneratedMessageLite.SerializedForm"")`
instead. Please take a look at the Java API in fury class.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQNyT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQcgj,fury,2487339043,1945,NA,a1342772,30279992,research,,NA,2024-11-20T03:52:25Z,2024-11-20T03:52:25Z,"![企业微信截图_aeb7288a-c8d8-4d8d-baf5-c688ef301437](https://github.com/user-attachments/assets/bbc9a6ae-1c37-4f7f-aa82-52c6c6feaa7d)
Version 0.9.0 does not provide the corresponding API.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQcgj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQkds,fury,2487371628,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T04:13:40Z,2024-11-20T04:13:40Z,Use fury.getClassResolver().register() instead. I forgot to add it to BaseFury interface,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQkds/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQko5,fury,2487372345,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T04:14:09Z,2024-11-20T04:14:09Z,You can also invoke Class.forname() instead,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UQko5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URbuZ,fury,2487597977,1945,NA,a1342772,30279992,research,,NA,2024-11-20T06:22:58Z,2024-11-20T06:22:58Z,"After a 200-time warmup with the following configuration:
![企业微信截图_6931dea3-8736-494f-9579-a0634800b81b](https://github.com/user-attachments/assets/f8af154f-19c8-4f0d-9a91-b610b0907cdf)

Direct serialization and deserialization of proto objects take **20ms** using Protobuf, while Fury takes **23ms**. Fury cannot be applied directly to proto objects. Is there a way to bridge this gap?  
![企业微信截图_6169b184-63e8-48de-8652-63deb26ba1d8](https://github.com/user-attachments/assets/b825aa27-a85e-4571-85bd-02e1d937fe93)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URbuZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URfCD,fury,2487611523,1945,NA,a1342772,30279992,research,,NA,2024-11-20T06:31:31Z,2024-11-20T06:31:31Z,@chaokunyang Are there any solutions for serializing and deserializing proto objects using Fury?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URfCD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URgMA,fury,2487616256,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T06:34:07Z,2024-11-20T06:34:07Z,@a1342772 Could you give me a unit test which I can run directly locally? ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6URgMA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6USfVM,fury,2487874892,1945,NA,a1342772,30279992,research,,NA,2024-11-20T08:28:24Z,2024-11-20T08:28:24Z,"@chaokunyang Of course, I can. I have built a very simple Java project. Directly run the main method in the MAIN class, which provides two serialization methods: Fury and Protobuf.
[fury.zip](https://github.com/user-attachments/files/17827368/fury.zip)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6USfVM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUeFy,fury,2488394098,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T11:57:09Z,2024-11-20T11:57:09Z,"![image](https://github.com/user-attachments/assets/af70730e-7e1d-4e58-a7e2-166461f99769)

Protobuf generated classes implements JDK writeReplace method, so Fury invoke that method for compatibility.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUeFy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUkri,fury,2488421090,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T12:10:51Z,2024-11-20T12:10:51Z,"Protobuf generated classes can only be serialized by Protobuf, you need to use PB for serialization. Otherwise you should pass your POJO objects.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUkri/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUliz,fury,2488424627,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T12:12:45Z,2024-11-20T12:12:45Z,"The PB generated objects even have weakmap and circular ref:
![image](https://github.com/user-attachments/assets/80cb721d-6dad-40ec-a149-38c5559fa09c)

Such fields are used by protobuf only, It's not possible to serialize it by other frameworks.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUliz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUl5q,fury,2488426090,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T12:13:33Z,2024-11-20T12:13:33Z,"Here is the code to work around ReplaceResolve:
```java
        furyTest = Fury.builder()
                .withLanguage(Language.JAVA).requireClassRegistration(false)
                .withRefTracking(true)
                .build();
        furyTest.getClassResolver().setSerializerFactory((f, c) -> {
            if (Message.class.isAssignableFrom(c)) {
                return Serializers.newSerializer(f, c, f.getClassResolver().getObjectSerializerClass(c, x -> {}));
            }
            return null;
        });
```

with this code, you can get the above error.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUl5q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUruQ,fury,2488449936,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-20T12:24:15Z,2024-11-20T12:24:15Z,"It's possible to extend Fury to serialize pb generated in a special way to get the speed up you want, but that will take time and lots of efforts. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UUruQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UZWAi,fury,2489671714,1945,NA,a1342772,30279992,research,,NA,2024-11-20T22:33:47Z,2024-11-20T22:33:47Z,"@chaokunyang The pojo object is much larger than the pb object. If the pojo is not converted to the pb object and is serialized directly, the serialized size will be very large.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UZWAi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UZWYG,fury,2489673222,1945,NA,a1342772,30279992,research,,NA,2024-11-20T22:34:57Z,2024-11-20T22:34:57Z,Do you have any suggestions for this issue?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UZWYG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1945,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uod1d,fury,2493635933,1945,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-22T12:22:35Z,2024-11-22T12:22:35Z,"> @chaokunyang The pojo object is much larger than the pb object. If the pojo is not converted to the pb object and is serialized directly, the serialized size will be very large.

Maybe we could look into why the serialized size of POJO is larger. Perhaps we can make it smaller, which might be the right direction.

Your case are very similiar with inference in search and recommendation systems. Fury has been appied into many such scenarios and they all get 30ms letency reduction.

Some suggestions here:
- Make Fury support serialize protobuf generated objects: lots of work but feasible technically, and can make migrating from protobuf more easier. It's a huge work, we don't have time for this currently. If you want this, you may need to change fury code by yourself for that. But I'm happy to help you review your PR.
- Find out why the pojo in your system has much bigger serialized size, we never see such issues. It's mostly not related to fury. Maybe you defined some JDK serialization method which forward serialization to JDK/Json. To find out what happened, you need to show your code and object data, maybe debuging into your code. You could prepare a mocked project which can run locally, or booking a google meeting to share more details directly. I'm happy to help.

We're wokring on python serialization optimization, your cases are very interesting, do you need to pass such objects from java to python? If so, maybe fury can help you speed up your python inference service too. 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uod1d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1947,https://api.github.com/repos/apache/fury/issues/1947,fury,2676415558,1947,"Flink types serialization codegen error: no such constructor: org.apache.flink.table.data.binary.BinaryStringDataFuryCodec_0.<init>(Fury,Class)void/invokeSpecial",chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-11-20T16:16:40Z,2024-11-21T11:25:06Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

Java

### Minimal reproduce step

None

### What did you expect to see?

java.lang.Error: java.lang.IllegalAccessException: no such constructor: org.apache.flink.table.data.binary.BinaryStringDataFuryCodec_0.<init>(Fury,Class)void/invokeSpecial


### What did you see instead?

```java
java.lang.Error: java.lang.IllegalAccessException: no such constructor: org.apache.flink.table.data.binary.BinaryStringDataFuryCodec_0.<init>(Fury,Class)void/invokeSpecial
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1155) ~[?:1.8.0_372]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_372]
at java.lang.Thread.run(Thread.java:879) [?:1.8.0_372]
Caused by: java.lang.IllegalAccessException: no such constructor: org.apache.flink.table.data.binary.BinaryStringDataFuryCodec_0.<init>(Fury,Class)void/invokeSpecial
at java.lang.invoke.MemberName.makeAccessException(MemberName.java:867) ~[?:1.8.0_372]
at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1003) ~[?:1.8.0_372]
at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1386) ~[?:1.8.0_372]
at java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:924) ~[?:1.8.0_372]
at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:127) ~[flash-serializer-v1.jar:?]
at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104) ~[flash-serializer-v1.jar:?]
at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:941) ~[flash-serializer-v1.jar:?]
at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:938) ~[flash-serializer-v1.jar:?]
at org.apache.fury.builder.JITContext.lambda$registerSerializerJITCallback$0(JITContext.java:94) ~[flash-serializer-v1.jar:?]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_372]
... 2 more
Caused by: java.lang.LinkageError: bad method type alias: (Fury,Class)void not visible from class org.apache.flink.table.data.binary.BinaryStringDataFuryCodec_0
at java.lang.invoke.MemberName.checkForTypeAlias(MemberName.java:793) ~[?:1.8.0_372]
at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:976) ~[?:1.8.0_372]
at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1000) ~[?:1.8.0_372]
at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1386) ~[?:1.8.0_372]
at java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:924) ~[?:1.8.0_372]
at org.apache.fury.serializer.Serializers.createSerializer(Serializers.java:127) ~[flash-serializer-v1.jar:?]
at org.apache.fury.serializer.Serializers.newSerializer(Serializers.java:104) ~[flash-serializer-v1.jar:?]
at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:941) ~[flash-serializer-v1.jar:?]
at org.apache.fury.resolver.ClassResolver$1.onSuccess(ClassResolver.java:938) ~[flash-se rializer-v1.jar:?]
at org.apache.fury.builder.JITContext.lambda$registerSerializerJITCallback$0(JITContext.java:94) ~[flash-serializer-v1.jar:?]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_372]
... 2 more
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1947/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1950,https://api.github.com/repos/apache/fury/issues/1950,fury,2676760489,1950,[Java] Configurable buffer size limit,theigl,661800,Thomas Heigl,thomas@umschalt.com,CLOSED,2024-11-20T18:20:40Z,2024-12-05T09:34:03Z,"### Question

Since https://github.com/apache/fury/commit/01f1b66383a127a801f22ebe7fac5ca54d675878  Fury's internal `MemoryBuffer` is reset to 128k after every use.

The change makes sense because it reclaims memory that could otherwise sit unused, *but* it will cause massive allocations if most of the object graphs you serialize are >= 128k. In this case, a new buffer is allocated for every serialization.

In my application, most object graphs are 64k-512k leading to very frequent reallocation of the built-in buffer.

Currently, my only option is to manage a pool of `MemoryBuffers` myself and pass them to Fury instead of relying on the built-in buffer, but this makes using Fury *significantly more complex*.

Would it make sense to make the buffer size limit configurable? In my case, a 1MB limit would be ideal.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1950/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1950,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbKzb,fury,2490150107,1950,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T06:04:17Z,2024-11-21T06:04:17Z,"Make sense, would you like to submit a PR to add a new field at `FuryBuilder/Config` and use that value for Buffer reset？","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbKzb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1950,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WLjZu,fury,2519610990,1950,NA,theigl,661800,Thomas Heigl,thomas@umschalt.com,NA,2024-12-05T08:30:51Z,2024-12-05T08:30:51Z,"@chaokunyang: I pushed a PR for this, but I'm not sure if it is the right approach. Do you have any feedback?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WLjZu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1951,https://api.github.com/repos/apache/fury/issues/1951,fury,2678001161,1951,[Question] is content type defined and standardized? ,JackyAnn,3381801,JackyAnn,,CLOSED,2024-11-21T04:47:17Z,2024-11-21T11:28:15Z,"### Question

Is the content type defined and standardized?
I didn't find any information in the documentation.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1951/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1951,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbMru,fury,2490157806,1951,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T06:10:54Z,2024-11-21T06:10:54Z,@JackyAnn could you share more details? I don't understand what you mean `content type`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbMru/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1951,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbcPc,fury,2490221532,1951,NA,JackyAnn,3381801,JackyAnn,,NA,2024-11-21T07:00:37Z,2024-11-21T07:00:37Z,"http content type
For example, the content type for json is application/json.
The content type for protobuf is application/x-protobuf.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UbcPc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1951,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ud5Oj,fury,2490864547,1951,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T11:28:00Z,2024-11-21T11:28:00Z,"This is not related to Fury. It's parsed by a http server. Depending on your http framework used, you may need to post this issue to their community such as spring/akka/grpc.

For example, quarkus supports application/fury in https://github.com/quarkiverse/quarkus-fury/pull/31","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Ud5Oj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1952,https://api.github.com/repos/apache/fury/issues/1952,fury,2679207562,1952,"[Question] <title>How much faster is Fury compared to Protobuf, and does the measurement include the time taken for Protobuf construction?",a1342772,30279992,research,,OPEN,2024-11-21T11:52:15Z,2024-11-22T11:57:02Z,"### Question

How much faster is Fury compared to Protobuf, and does the measurement include the time taken for Protobuf construction?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1952/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1952,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UeQns,fury,2490960364,1952,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T12:06:25Z,2024-11-21T12:06:25Z,"4~10X faster, depending on data.  Protobuf construction is included since most users will use POJO as the data container.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UeQns/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/1953,fury,2679363969,1953,"[Question] <title>What does java.lang.RuntimeException: Deserialize failed, type of read objects are: [...",cquezel,7750318,,,OPEN,2024-11-21T12:58:06Z,2024-11-22T13:59:06Z,"### Question

what does :

```
java.lang.RuntimeException: Deserialize failed, type of read objects are: [ ... class java.lang.String, null]
```

mean? How do I diagnose this situation?
The ... in the error message is a list of class names. In this case, there are ~7500 classes many of which are repeated. The last class name in the message is null.

Could this be a stackoverflow? When I do this with java serialisation, I increase the stack to 33MB which is the value I used in this test.

The code I use is:

```
	private static Fury fury;
	
	private static Fury getFury() {
		if (fury == null) {
			fury = Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).withRefTracking(true).build();
		}
		return fury; 
	}

	private static <T> T writeFury(FileInputStream fis, Class<T> klass) {
		return getFury().deserializeJavaObject(new FuryInputStream(fis), klass);
	}

	private static void readFury(FileOutputStream fos, Object objet) {
	    getFury().serializeJavaObject(fos, objet);
	}

```

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1953/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgSCe,fury,2491490462,1953,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T15:09:40Z,2024-11-21T15:09:40Z,"You should use ThreadSafeFury as a static variable. If it still fails, we need the reproducible code to find out what happend.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgSCe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgTXK,fury,2491495882,1953,NA,cquezel,7750318,,,NA,2024-11-21T15:11:34Z,2024-11-21T15:11:34Z,The code in single threaded. Would this make a difference?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgTXK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgoNw,fury,2491581296,1953,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-21T15:43:11Z,2024-11-21T15:43:11Z,"Nope, please provide the reproducible code","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UgoNw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoSWq,fury,2493588906,1953,NA,cquezel,7750318,,,NA,2024-11-22T11:56:55Z,2024-11-22T11:56:55Z,I think I have identified the problem. Will try to build a small test case next week. It seams related to the order of readObject calls. I think this is similar to https://github.com/apache/fury/issues/1455,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoSWq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoVjn,fury,2493602023,1953,NA,cquezel,7750318,,,NA,2024-11-22T12:04:07Z,2024-11-22T12:04:07Z,"BTW, Although deserialization did not work, Fury serialization took 21 seconds while Java took 3 minutes (12% 21/180)","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoVjn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uoi25,fury,2493656505,1953,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-22T12:32:58Z,2024-11-22T12:32:58Z,"> BTW, Although deserialization did not work, Fury serialization took 21 seconds while Java took 3 minutes (12% 21/180)

Do you have any logs for this. I guess it's caused by Fury JIT. The fury JIT takes time, for the first serialization of every type, it will be slower, but later it will be much faster. And fury also supports async compilation, you could enable it by `FuryBuilder#withAsyncCompilation(true)`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uoi25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoxQu,fury,2493715502,1953,NA,cquezel,7750318,,,NA,2024-11-22T13:02:03Z,2024-11-22T13:02:03Z,I see no problems with Fury being 8.5 times faster than JDK serialisation. Were you expecting better performance?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoxQu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uo_k3,fury,2493774135,1953,NA,cquezel,7750318,,,NA,2024-11-22T13:30:03Z,2024-11-22T13:30:03Z,adding withAsyncCompilation(true) did not change performances.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Uo_k3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1953,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UpN1Y,fury,2493832536,1953,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-22T13:59:05Z,2024-11-22T13:59:05Z,"Please provide reproduction code, it depends on your objects. Some types may define their serialization method, and it may be not as fast as fury, which may slow the whole serialization. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UpN1Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1954,https://api.github.com/repos/apache/fury/issues/1954,fury,2682427960,1954,[Question] <title>How does Fury perform in terms of speed and size when serializing and deserializing Java arrays?,a1342772,30279992,research,,OPEN,2024-11-22T08:46:22Z,2024-11-22T11:51:10Z,"### Question

How does Fury perform in terms of speed and size when serializing and deserializing Java arrays?","{""url"": ""https://api.github.com/repos/apache/fury/issues/1954/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1954,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoKnZ,fury,2493557209,1954,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-22T11:40:04Z,2024-11-22T11:40:04Z,"Performance:
- For primitive array, it's as fast as a memory copy.
- For object array, depending on the data, the cost are basically `(array_len * cost(element)) * 10%` for most cases.

Size: 
-  For primitive array, it's `array_len * size(element)`
- For object array, fury are smaller than JDK serialization. Depending on the element type, the size reduction can be different.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoKnZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1954,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoLJ1,fury,2493559413,1954,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-22T11:41:14Z,2024-11-22T11:41:14Z,"@a1342772 You could test it by yourself. It the test result is unexpected, please share your test code and result here, then we can dive into it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UoLJ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1955,https://api.github.com/repos/apache/fury/issues/1955,fury,2685654397,1955,Deserialization creates duplicate instances,michael-schnell,1856319,Michael Schnell,,CLOSED,2024-11-23T08:39:29Z,2024-11-23T11:12:32Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury: 0.9.0 / OS: Windows 11 / JDK 21


### Component(s)

Java

### Minimal reproduce step

Deserialization of two range maps in a container create two different instances of the same object. This leads to increased memory consumption. It is expected that two references to the same object instance will be recreated in the same way they were before serialization (single instance not two).

Attached is a simple Maven project that shows the deserialization problem.

[apache-fury-bug.zip](https://github.com/user-attachments/files/17879048/apache-fury-bug.zip)


### What did you expect to see?

ORIGINAL:
map1: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [2061774051]]
map2: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [2061774051]]

COPY:
map1: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [1990385139]]
map2: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [1990385139]] **// Expected same instance!**

### What did you see instead?

ORIGINAL:
map1: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [2061774051]]
map2: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [2061774051]]

COPY:
map1: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [1990385139]]
map2: [2024-01-01..2024-12-31]=[c0ee7b8d-eab0-4b7e-aeee-6ef2b9d2db8b [1380924218]] **// DIFFERENT INSTANCE!**

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1955/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1955,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvNUw,fury,2495403312,1955,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-23T08:46:03Z,2024-11-23T08:46:03Z,You should create Fury with reference tracking enabled by `FuryBuilder#withRefTracking`,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvNUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1955,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvUEP,fury,2495430927,1955,NA,michael-schnell,1856319,Michael Schnell,,NA,2024-11-23T10:27:50Z,2024-11-23T10:27:50Z,OK. Seems somewhat unexpected that this is not the default.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvUEP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1955,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvW_s,fury,2495442924,1955,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-23T11:12:31Z,2024-11-23T11:12:31Z,"Protobuf/JSON/Flatbuffers doesn't support reference, so Fury disabled it by default","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6UvW_s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1956,https://api.github.com/repos/apache/fury/issues/1956,fury,2686007897,1956,[Java] Type annotation hints for serialization,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-23T13:24:43Z,2024-11-23T13:24:43Z,"### Feature Request

We could provide some extra type information to mmake fury serialization faster.

The annotation can be like following:

```java
@TypeInfo(fieldsNullable = false, trackingRef = false, polymorphic = false)
class Foo {
  @FieldInfo(trackingRef = false)
  int[] intArray;
  @FieldInfo(polymorphic = true)
  Object object;
  @FieldInfo(tagId = 1, nullable = true)
  List<Object> objectList;
}
```

Or

```java
@Type(fieldsNullable = false, trackingRef = false, polymorphic = false)
class Foo {
  @Field(trackingRef = false)
  int[] intArray;
  @Field(polymorphic = true)
  Object object;
  @Field(tagId = 1, nullable = true)
  List<Object> objectList;
}


```

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1956/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1957,https://api.github.com/repos/apache/fury/issues/1957,fury,2687744187,1957,"Remove most pyfury pure python serializers, use pure cython only",chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-24T13:25:54Z,2024-11-24T13:26:24Z,"### Feature Request

Remove pyfury python implementation, use pure cython only

### Is your feature request related to a problem? Please describe

Currently pufury has two implementation for object graph serialization:
- pure python: 
  - `python/pyfury/_serializer.py`
  - `python/pyfury/_fury.py`
- cython based:
  - `python/pyfury/_serialization.pyx`

Pure python version is easy for debugging, especially for debugging complex object graph serialization, since cython code is not easy to debug.

But the code for both are very similar, thus incurred a big maintain overhead.



### Describe the solution you'd like

Remove most pure python serializer, only reserve serializer dispatch framework, and keep it as the most simple way, the performance is not a requirement 

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1957/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/1958,fury,2692996098,1958,"[Question] <title>When I serialize this object, enough space is allocated, but it still throws a java.lang.OutOfMemoryError: Java heap space",a1342772,30279992,research,,OPEN,2024-11-26T03:52:17Z,2024-11-26T16:40:46Z,"
```
public class FlatStorage implements Serializable {
   
    private MemoryBuffer buf; 
    private Map<String, int[]> featureMetadata; 
    public FlatStorage(int bufferSize) {
        this.buf = MemoryUtils.buffer(bufferSize);
        this.featureMetadata = new HashMap<>();
    }

    public void addFeature(String name, int type, int offset, int[] shape) {
        featureMetadata.put(name, new int[]{type, offset, shape[0], shape[1]});
    }

    public MemoryBuffer getBuf() {
        return buf;
    }

    public Map<String, int[]> getFeatureMetadata() {
        return featureMetadata;
    }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1958/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_raV,fury,2499720853,1958,NA,a1342772,30279992,research,,NA,2024-11-26T05:51:39Z,2024-11-26T05:51:39Z,@chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_raV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_7Tl,fury,2499785957,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T06:41:01Z,2024-11-26T06:41:01Z,"@a1342772 Could you provide a unit test, the code you provided is just a data class.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_7Tl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_7-w,fury,2499788720,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T06:43:09Z,2024-11-26T06:43:09Z,"BTW, `MemoryBuffer` is used by fury internally, it's just a wrapper for `DirectBuffer/ByteBuffer/byte[]`, why do you need to serialize fury `MemoryBuffer` ? 

If you do need to serialize `MemoryBuffer`, we need to add a new `Serializer` for it too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_7-w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_-gN,fury,2499799053,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T06:50:32Z,2024-11-26T06:50:32Z,"Another thing is that how do we serializer `MemoryBuffer`? `MemoryBuffer` has a `readerIndex`, do we write data between `readerIndex - size` or serialize the whole buffer?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6U_-gN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAKfa,fury,2499848154,1958,NA,a1342772,30279992,research,,NA,2024-11-26T07:18:54Z,2024-11-26T07:18:54Z,"@chaokunyang Oh, I see. How does Fury perform with arrays? I want to replace MemoryBuffer with arrays.
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAKfa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VARuD,fury,2499877763,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T07:35:16Z,2024-11-26T07:35:16Z,What do you mean `Fury perform with arrays`? ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VARuD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VATWJ,fury,2499884425,1958,NA,a1342772,30279992,research,,NA,2024-11-26T07:39:32Z,2024-11-26T07:39:32Z,yes @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VATWJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAYI3,fury,2499904055,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T07:51:43Z,2024-11-26T07:51:43Z,"@a1342772 I don't quite understand what you mean, could you provide more details what do you mean `Fury perform with arrays`?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAYI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAZSS,fury,2499908754,1958,NA,a1342772,30279992,research,,NA,2024-11-26T07:54:43Z,2024-11-26T07:54:43Z,"Compared to Protobuf, the speed of serialization and deserialization as well as the compression ratio.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VAZSS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1958,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VF820,fury,2501365172,1958,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-11-26T16:40:44Z,2024-11-26T16:40:44Z,"@a1342772 Fury supports zero-copy serialization of primitive array, there is no cost for serializing such objects, and of course no compression, the serialized size of array will be `n_elements * size_of(element_type)`.

You could use zero-copy serialization by https://fury.apache.org/docs/guide/java_object_graph_guide#zero-copy-serialization:
```java
import org.apache.fury.*;
import org.apache.fury.config.*;
import org.apache.fury.serializer.BufferObject;
import org.apache.fury.memory.MemoryBuffer;

import java.util.*;
import java.util.stream.Collectors;

public class ZeroCopyExample {
  // Note that fury instance should be reused instead of creation every time.
  static Fury fury = Fury.builder()
    .withLanguage(Language.JAVA)
    .build();

  // mvn exec:java -Dexec.mainClass=""io.ray.fury.examples.ZeroCopyExample""
  public static void main(String[] args) {
    List<Object> list = Arrays.asList(""str"", new byte[1000], new int[100], new double[100]);
    Collection<BufferObject> bufferObjects = new ArrayList<>();
    byte[] bytes = fury.serialize(list, e -> !bufferObjects.add(e));
    bufferObjects.
      .forEach(buf -> buf.writeTo(...)).collect(Collectors.toList());

    System.out.println(fury.deserialize(bytes, buffers));
  }
}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6VF820/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1959,https://api.github.com/repos/apache/fury/issues/1959,fury,2696754535,1959,"When using `buildThreadSafeFuryPool(10, 60)` for init ThreadSafePool, the following exception occurs:",Moouna,24785172,,,OPEN,2024-11-27T02:37:55Z,2024-12-09T16:51:55Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.9.0

### Component(s)

Java

### Minimal reproduce step


This issue does not occur when using `buildThreadSafeFury()`.

---

## Code to Reproduce

```java
@Data
public static class Outer {
    private String code;
    private List<Inner> innerList;
}

@Data
public static class Inner {
    private String name;
}

@Test
public void threadSafeTest() {
    MetaContext context = new MetaContext();

    ThreadSafeFury fury = Fury.builder()
            .withLanguage(Language.JAVA)
            .withMetaShare(true)
            .withRefCopy(false)
            .withCodegen(true)
            .withCompatibleMode(CompatibleMode.COMPATIBLE)
            .withScopedMetaShare(false)
            .withJdkClassSerializableCheck(false)
            .requireClassRegistration(true)
            // Uncommenting the following line causes the issue
            //.buildThreadSafeFuryPool(10,60);
            .buildThreadSafeFury();

    fury.register(Outer.class);
    fury.register(Inner.class);

    Outer bean = new Outer();
    bean.setCode(""test"");
    bean.setInnerList(new ArrayList<>());

    for (int i = 0; i < 10000; i++) {
        byte[] bytes = fury.execute(f -> {
            f.getSerializationContext().setMetaContext(context);
            return f.serialize(bean);
        });
        Outer des = (Outer) fury.execute(f -> {
            f.getSerializationContext().setMetaContext(context);
            return f.deserialize(bytes);
        });
        Assertions.assertEquals(bean, des);
    }
}
```

### What did you expect to see?

test success

### What did you see instead?

```text 
java.lang.AssertionError:  Meta context must be set before serialization, please set meta context by SerializationContext.setMetaContext

	at org.apache.fury.resolver.ClassResolver.readClassInfoWithMetaShare(ClassResolver.java:1385)
	at org.apache.fury.resolver.ClassResolver.readClassInfo(ClassResolver.java:1693)
	at com.zhaopin.entinfo.router.test.MetaContextTest_OuterFuryCodecMetaShared0_0.readFields$(MetaContextTest_OuterFuryCodecMetaShared0_0.java:64)
	at com.zhaopin.entinfo.router.test.MetaContextTest_OuterFuryCodecMetaShared0_0.read(MetaContextTest_OuterFuryCodecMetaShared0_0.java:118)
	at org.apache.fury.Fury.readDataInternal(Fury.java:959)
	at org.apache.fury.Fury.readRef(Fury.java:861)
	at org.apache.fury.Fury.deserialize(Fury.java:793)
	at org.apache.fury.Fury.deserialize(Fury.java:714)
        at test.MetaContextTest.lambda$threadSafeTest$2(MetaContextTest.java:78)
	at org.apache.fury.pool.ThreadPoolFury.execute(ThreadPoolFury.java:82)
	at com.zhaopin.entinfo.router.test.MetaContextTest.threadSafeTest(MetaContextTest.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:532)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:171)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:114)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:59)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:108)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1959/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1959,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WuNSC,fury,2528695426,1959,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-09T16:51:55Z,2024-12-09T16:51:55Z,"Hi @Moouna ,`MetaContext` is not allowed to be used across multiple threads, you may need to maintain a separate `MetaContext` pool to manage your state. I suggest use Fury  and `MetaContext` directly, you make every Fury use its own `MetaContext` ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WuNSC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1961,https://api.github.com/repos/apache/fury/issues/1961,fury,2706766561,1961,Fury Rust compile error,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-11-30T06:30:55Z,2024-11-30T06:31:21Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

Rust

### Minimal reproduce step

`cargo test`

### What did you expect to see?

compile success

### What did you see instead?
```rust
error: elided lifetime has a name
  --> fury-core/src/row/writer.rs:38:10
   |
33 | impl<'a> FieldWriterHelper<'a> {
   |      -- lifetime `'a` declared here
...
38 |     ) -> FieldWriterHelper {
   |          ^^^^^^^^^^^^^^^^^ this elided lifetime gets resolved as `'a`
   |
   = note: `-D elided-named-lifetimes` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(elided_named_lifetimes)]`

error: the following explicit lifetimes could be elided: 'a
  --> fury-core/src/row/row.rs:77:6
   |
77 | impl<'a> Row<'a> for bool {
   |      ^^      ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::needless_lifetimes)]`
help: elide the lifetimes
   |
77 - impl<'a> Row<'a> for bool {
77 + impl Row<'_> for bool {
   |

error: the following explicit lifetimes could be elided: 'a
  --> fury-core/src/row/row.rs:89:6
   |
89 | impl<'a> Row<'a> for NaiveDate {
   |      ^^      ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
   |
89 - impl<'a> Row<'a> for NaiveDate {
89 + impl Row<'_> for NaiveDate {
   |

error: the following explicit lifetimes could be elided: 'a
   --> fury-core/src/row/row.rs:107:6
    |
107 | impl<'a> Row<'a> for NaiveDateTime {
    |      ^^      ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
    |
107 - impl<'a> Row<'a> for NaiveDateTime {
107 + impl Row<'_> for NaiveDateTime {
    |

error: the following explicit lifetimes could be elided: 'a
  --> fury-core/src/row/writer.rs:70:6
   |
70 | impl<'a> StructWriter<'a> {
   |      ^^               ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
   |
70 - impl<'a> StructWriter<'a> {
70 + impl StructWriter<'_> {
   |

error: the following explicit lifetimes could be elided: 'a
   --> fury-core/src/row/writer.rs:108:6
    |
108 | impl<'a> ArrayWriter<'a> {
    |      ^^              ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
    |
108 - impl<'a> ArrayWriter<'a> {
108 + impl ArrayWriter<'_> {
    |

error: the following explicit lifetimes could be elided: 'a
   --> fury-core/src/row/writer.rs:151:6
    |
151 | impl<'a> MapWriter<'a> {
    |      ^^            ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
    |
151 - impl<'a> MapWriter<'a> {
151 + impl MapWriter<'_> {
    |
```

![image](https://github.com/user-attachments/assets/ec0359f8-fe76-4606-9e1e-a409180b7c64)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1961/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1964,https://api.github.com/repos/apache/fury/issues/1964,fury,2712411538,1964,[C++] To support the utf8 utf16 and using simd to accelerate the optimization,pandalee99,46820719,PAN,,CLOSED,2024-12-02T15:45:49Z,2025-01-01T13:56:19Z,"### Feature Request

Earlier, I implemented utf16 to utf8 and used simd to speed up the process.

``` c++
std::string utf16ToUtf8(const std::u16string &utf16, bool is_little_endian)
```


Now, you also need to implement utf8 to utf16.
Because now in java, using utf8, 16, latin1 is becoming very common, now we need to implement it in py as well.
But for speed reasons, we might consider using a direct call to a c++ module.

For simd acceleration, it is necessary to adapt to x86 architecture, arm and risc-v.
The solution is that you can use the avx2 instruction set under x86 and so on...

### Is your feature request related to a problem? Please describe

Module lack utf8 utf16.

### Describe the solution you'd like

Implement utf8 to utf16, and use simd acceleration.

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1964/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1964,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YoNp9,fury,2560678525,1964,NA,pandalee99,46820719,PAN,,NA,2024-12-24T05:35:33Z,2024-12-24T05:35:33Z,This requirement will be completed this week,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YoNp9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1965,https://api.github.com/repos/apache/fury/issues/1965,fury,2714598382,1965,[Question] How to register a custom serializer with ThreadSafeFury?,michael-schnell,1856319,Michael Schnell,,CLOSED,2024-12-03T10:23:03Z,2024-12-04T03:46:52Z,"### Question

The doc shows how to register a custom serializer: 
https://fury.apache.org/docs/guide/java_object_graph_guide/#implement-a-customized-serializer

```java
Fury fury = getFury();
fury.registerSerializer(Foo.class,new FooSerializer(fury));
```
Unfortunately this approach does not work with a ""ThreadSafeFury"" instance as all serializer classes expect a ""Fury"" and not a thread safe instance.

```java
ThreadSafeFury threadSafeFury = getThreadSafeFury();
fury.registerSerializer(Foo.class,new FooSerializer(threadSafeFury)); // Fails as not a ""Fury"" sub class
```

How do I register a custom serializer with a ""ThreadSafeFury"" instance?

","{""url"": ""https://api.github.com/repos/apache/fury/issues/1965/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1965,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V39_z,fury,2514477043,1965,NA,michael-schnell,1856319,Michael Schnell,,NA,2024-12-03T12:50:18Z,2024-12-03T12:50:18Z,"I guess it's like this?
```java
Function<ClassLoader, Fury> furyFactory = cl -> {
    final Fury fury = fury();
    fury.registerSerializer(Foo.class, new FooSerializer(fury));
    return fury;
};
ThreadLocalFury fury = new ThreadLocalFury(furyFactory);
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V39_z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1965,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V6FE6,fury,2515030330,1965,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-03T16:27:56Z,2024-12-03T16:27:56Z,"Yes, you are right. Or you can register serializer by `org.apache.fury.BaseFury#registerSerializer(java.lang.Class<?>, java.util.function.Function<org.apache.fury.Fury,org.apache.fury.serializer.Serializer<?>>)`","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V6FE6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1966,https://api.github.com/repos/apache/fury/issues/1966,fury,2716515817,1966,[Kotlin] Kotlin default value support in CompatibleMode,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-12-04T04:14:26Z,2024-12-04T05:24:17Z,"### Feature Request

Kotlin support default value for fields, when deserializing, fury should assign default value to field if serialization didn' have that field and not write value.

For example, this is the class when serialization
```kotlin
data class Foo(val s: String)

val foo = Foo(""abc"")
```

And this is the class when deserialization.
```kotlin
data class Foo(val int: Int = 10, val s: String)
```
If we deserialize the data from `data class Foo(val s: String)`, we will get `Foo(int=0, s=abc)`, but we should return `Foo(int=10, s=abc)`


### Is your feature request related to a problem? Please describe

Serialization：
```kotlin
data class Foo(val s: String )

fun main(args: Array<String>) {
    val fury = Fury.builder().requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).build()
    Files.write(Paths.get(""data""), fury.serialize(Foo(s = ""abc"")))
}
```

Deserialization:
```kotlin
data class Foo(val int: Int = 10, val s: String )

fun main(args: Array<String>) {
    val fury = Fury.builder().requireClassRegistration(false).withCompatibleMode(CompatibleMode.COMPATIBLE).build()
    println(fury.deserialize(Files.readAllBytes(Paths.get(""data""))))
   // Foo(int=0, s=abc)
}
```

### Describe the solution you'd like
Here is disassembled java code:
```java
public final class Foo {
    private final int int;
    @NotNull
    private final String s;

    public Foo(int n, @NotNull String s) {
        Intrinsics.checkNotNullParameter((Object)s, (String)""s"");
        this.int = n;
        this.s = s;
    }

    public /* synthetic */ Foo(int n, String string, int n2, DefaultConstructorMarker defaultConstructorMarker) {
        if ((n2 & 1) != 0) {
            n = 10;
        }
        this(n, string);
    }

    public final int getInt() {
        return this.int;
    }

    @NotNull
    public final String getS() {
        return this.s;
    }

    public final int component1() {
        return this.int;
    }

    @NotNull
    public final String component2() {
        return this.s;
    }

    @NotNull
    public final Foo copy(int n, @NotNull String s) {
        Intrinsics.checkNotNullParameter((Object)s, (String)""s"");
        return new Foo(n, s);
    }

    public static /* synthetic */ Foo copy$default(Foo foo, int n, String string, int n2, Object object) {
        if ((n2 & 1) != 0) {
            n = foo.int;
        }
        if ((n2 & 2) != 0) {
            string = foo.s;
        }
        return foo.copy(n, string);
    }

    @NotNull
    public String toString() {
        return ""Foo(int="" + this.int + "", s="" + this.s + ')';
    }

    public int hashCode() {
        int result = Integer.hashCode(this.int);
        result = result * 31 + this.s.hashCode();
        return result;
    }

    public boolean equals(@Nullable Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Foo)) {
            return false;
        }
        Foo foo = (Foo)other;
        if (this.int != foo.int) {
            return false;
        }
        return Intrinsics.areEqual((Object)this.s, (Object)foo.s);
    }
}

```

Kotlin generated a constructor for default value:
```java
    public /* synthetic */ Foo(int n, String string, int n2, DefaultConstructorMarker defaultConstructorMarker) {
        if ((n2 & 1) != 0) {
            n = 10;
        }
        this(n, string);
    }
```
But it didn't provide this default value as a field, so we can't extract this value using reflection.

We could create a `Foo` object and check fields values:
- If primitive fields value doesn't equal to java primitive value, then it's a default value
- If object fields value doesn't equal to `null`, then  it's a default value

And when deserializiing, use the computed default value to set such fields.

For codegen, wen need to extend `MetaSharedCodecBuilder`. When codegen disabled, `MetaSharedSerializer` needs to be extended

### Describe alternatives you've considered

_No response_

### Additional context

https://github.com/apache/fury/issues/1683","{""url"": ""https://api.github.com/repos/apache/fury/issues/1966/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1966,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V-niW,fury,2516220054,1966,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-04T05:20:51Z,2024-12-04T05:20:51Z,"Hi @wywen, are you interested in this issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6V-niW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1967,https://api.github.com/repos/apache/fury/issues/1967,fury,2717030387,1967,[Python] support latin1/utf16 encoding for python string,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-12-04T09:04:19Z,2025-01-07T16:32:12Z,"### Feature Request


Fury java serialize string with three encodings:
- latin1: used when all chars are latin1. This will be just a memory copy in jdk11+
- utf16: used when 50%+ chars are not ascii chars
- utf8: used when 50%+ chars are ascii chars

Fury java also use superword and bitmask for 8 bytes ascii check/writing at once, which will make encoding faster.

Here is the fury benchmark result with jdk/kryo/flink string serializer:
<img width=""422"" alt=""image"" src=""https://github.com/user-attachments/assets/118cd000-0fed-4880-88d9-fc9f728888ae"">


For pyfury, we should do similar things, and since pyfury can invoke c++ with low cost, we could implement string encodings using SIMD in c++ and let pyfury wrap that by cython.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

#1732
#1754 
#1890
#1964
","{""url"": ""https://api.github.com/repos/apache/fury/issues/1967/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1967,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WALzE,fury,2516630724,1967,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-04T09:08:26Z,2024-12-04T09:08:26Z,"Hi @penguin-wwy , are you interested in this issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WALzE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1967,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WA8r8,fury,2516830972,1967,NA,penguin-wwy,15888598,penguin_wwy,940375606@qq.com,NA,2024-12-04T10:13:42Z,2024-12-04T10:13:42Z,"> Hi @penguin-wwy , are you interested in this issue?

Okay, I will implement it.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WA8r8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1971,https://api.github.com/repos/apache/fury/issues/1971,fury,2725996212,1971,[Question] Constructing a BinaryRow from serialized bytes,MC-2016,18423056,,,OPEN,2024-12-09T05:04:47Z,2024-12-09T15:42:43Z,"### Question

I was looking for a way to re-create a `BinaryRow` object from a previously serialized bytes, but couldn't find it. The [row format guide](https://fury.apache.org/docs/guide/row_format_guide/) has an example of converting an object into a `BinaryRow`, which is not quite what I need.

What I am looking for is the following workflow:

* Serialize my object into a byte array
* Store the byte array... somewhere
* Retrieve the byte array later on
* Construct a `BinaryRow` from the byte array
* Access parts of the original objects via the `BinaryRow` as shown in the guide without necessarily reconstructing the entire object

Any chance someone can tell me how to do that? An update to the guide would be awesome, too.","{""url"": ""https://api.github.com/repos/apache/fury/issues/1971/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1971,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WtOPE,fury,2528437188,1971,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-09T15:42:42Z,2024-12-09T15:42:42Z,"Hi @MC-2016 , to construct a BinaryRow, you can take following code as an example:
```java
byte[] serializedBytes = xxx;
Schema schema = xxx;
BinaryRow newRow = new BinaryRow(schema);
MemoryBuffer buffer = MemoryBuffer.fromByteArray(serializedBytes);
newRow.pointTo(buffer, 0, buffer.size());
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WtOPE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/1972,fury,2726817385,1972,[Java] Class with missing field failed to deserialize on new version,orisgarno,42269241,,,CLOSED,2024-12-09T11:50:30Z,2025-01-07T15:38:31Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

java v0.9.0

### Component(s)

Java

### Minimal reproduce step

```
BaseFury s = FuryFury.builder()
.withLanguage(Language.JAVA)
.withRefTracking(true)
.withIntCompressed(true)
.withLongCompressed(true)
.withStringCompressed(true)
.withCompatibleMode(CompatibleMode.COMPATIBLE)
.requireClassRegistration(false)
.withAsyncCompilation(true)
.serializeEnumByName(true)
.buildThreadSafeFury()
```

```
public class PrivateFliedClassNumberOne {
  private boolean privateBoolean = true;
  private int privateInt = 10;
  private String privateString = ""notNull"";
  private Map<String, String> privateMap = Map.of(""a"", ""b"");
  private List<String> privateList = List.of(""l"");
  private PrivateFieldSubClass privateFieldSubClass = new PrivateFieldSubClass();
}
```
```
public class PrivateFliedClassNumberTwoWithMissingField {

  private Map<String, String> privateMap = Map.of(""a"", ""b"");
  private int privateInt = 10;
  private PrivateFieldSubClass privateFieldSubClass = new PrivateFieldSubClass();
  private List<String> privateList = List.of(""l"");
  private boolean privateBoolean = true;
}
```

code to repro
```
    PrivateFliedClassNumberOne privateField = new PrivateFliedClassNumberOne();
    byte[] serialized = s.serializeJavaObject(privateField);


    PrivateFliedClassNumberTwoWithMissingField privateField2 = s.deserializeJavaObject(
        serialized, 
        PrivateFliedClassNumberTwoWithMissingField.class
    );
```

### What did you expect to see?

Should be able to deserialize successfully

### What did you see instead?

exception
```
Deserialize failed, read objects are: [PrivateFliedClassNumberTwoWithMissingField{privateMap={a=b}, privateInt=10, privateFieldSubClass=true, privateList=[l], privateBoolean=true}]

	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1124)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1101)
	at org.apache.fury.ThreadLocalFury.deserializeJavaObject(ThreadLocalFury.java:202)
	at serde.SerdeTestBase.testBasicPrivateField_diffClassScrambledField(SerdeTestBase.java:89)
	at serde.SerdeTestBase.runAll(SerdeTestBase.java:35)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:65)
	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 111 out of bounds for length 6
	at org.apache.fury.collection.ObjectArray.set(ObjectArray.java:58)
	at org.apache.fury.resolver.MapRefResolver.setReadObject(MapRefResolver.java:209)
	at org.apache.fury.Fury.readRef(Fury.java:875)
	at org.apache.fury.serializer.ObjectSerializer.readContainerFieldValue(ObjectSerializer.java:385)
	at org.apache.fury.serializer.ObjectSerializer.readAndSetFields(ObjectSerializer.java:318)
	at org.apache.fury.serializer.ObjectSerializer.read(ObjectSerializer.java:246)
	at org.apache.fury.Fury.readDataInternal(Fury.java:959)
	at org.apache.fury.Fury.deserializeJavaObject(Fury.java:1118)
	... 30 more

```

### Anything Else?

this is the first time i encounter this issue. 
i was using fury v0.5.1 and doesnt have this kind of problem. i am also tried to repro this on 0.5.1, but its not happening on that version.

### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1972/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wqwuh,fury,2527792033,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-09T12:28:13Z,2024-12-09T12:28:13Z,"Hi @orisgarno , thanks for reporting this bug.

Could you use `serialize/deserialize` API instead. `serializeJavaObject deserializeJavaObject` will skip write class meta, so the dserialization side don't know how to handle schema inconsistency.

We should write class meta in `serializeJavaObject deserializeJavaObject` if `CompatibleMode` is used. Would you like to submit a PR?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wqwuh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wqxgo,fury,2527795240,1972,NA,orisgarno,42269241,,,NA,2024-12-09T12:29:47Z,2024-12-09T12:29:47Z,"Thank you to take a look at this issue @chaokunyang.
sure, will check what can i do.

Wondering though, does it mean that the class meta is already implemented on v0.5.1, but removed on v0.9.0?
Since I had no issue when using v0.5.1.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wqxgo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WtZi9,fury,2528483517,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-09T15:54:57Z,2024-12-09T15:54:57Z,"0.5.1 didn't enable meta share mode, so it go to another schema compatible protocol, which write type meta in a KV format. This format is not efficient, and has been replaced by scoped meta share mode in later versions. But we forget to write shared type meta for root class for `serializeJavaObject` API","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6WtZi9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wz2ib,fury,2530175131,1972,NA,orisgarno,42269241,,,NA,2024-12-10T03:28:37Z,2024-12-10T03:28:37Z,"after further read, seems serializeJavaObject API already write class def. which meta are you refering to? maybe if you can help to share some context or pointer it will be much help 
- https://github.com/apache/fury/blob/b43d521fa0eb29cc97fc60f4d7bfa4171c993c6a/java/fury-core/src/main/java/org/apache/fury/Fury.java#L1072
- https://github.com/apache/fury/blob/b43d521fa0eb29cc97fc60f4d7bfa4171c993c6a/java/fury-core/src/main/java/org/apache/fury/Fury.java#L1078

thank you","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wz2ib/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZBTf8,fury,2567256060,1972,NA,orisgarno,42269241,,,NA,2025-01-02T03:33:17Z,2025-01-02T03:33:17Z,"Hi @chaokunyang.
I've tried several approaches but am currently stuck.
I would greatly appreciate any pointers or suggestions you might have.
Thanks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZBTf8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZCpSz,fury,2567607475,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-02T11:08:46Z,2025-01-02T11:08:46Z,Hi @orisgarno which fury version  are you using when you try those approaches?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZCpSz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZC0QK,fury,2567652362,1972,NA,orisgarno,42269241,,,NA,2025-01-02T11:46:13Z,2025-01-02T11:46:13Z,"@chaokunyang the working one was v0.5.1, the failing one is v0.9.0.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZC0QK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIG61,fury,2569039541,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T10:53:25Z,2025-01-03T10:53:25Z,"> after further read, seems serializeJavaObject API already write class def. which meta are you refering to? maybe if you can help to share some context or pointer it will be much help
> 
> * https://github.com/apache/fury/blob/b43d521fa0eb29cc97fc60f4d7bfa4171c993c6a/java/fury-core/src/main/java/org/apache/fury/Fury.java#L1072
> * https://github.com/apache/fury/blob/b43d521fa0eb29cc97fc60f4d7bfa4171c993c6a/java/fury-core/src/main/java/org/apache/fury/Fury.java#L1078
> 
> thank you

It didn't write class def, the correct code should looks like following:
```java
  public void serializeJavaObject(MemoryBuffer buffer, Object obj) {
    try {
      jitContext.lock();
      if (depth != 0) {
        throwDepthSerializationException();
      }
      if (config.isMetaShareEnabled()) {
        int startOffset = buffer.writerIndex();
        buffer.writeInt32(-1); // preserve 4-byte for meta start offsets.
        if (!refResolver.writeRefOrNull(buffer, obj)) {
          ClassInfo classInfo = classResolver.getOrUpdateClassInfo(obj.getClass());
          classResolver.writeClass(buffer, classInfo);
          writeData(buffer, classInfo, obj);
```
```java
  public <T> T deserializeJavaObject(MemoryBuffer buffer, Class<T> cls) {
    try {
      jitContext.lock();
      if (depth != 0) {
        throwDepthDeserializationException();
      }
      if (shareMeta) {
        readClassDefs(buffer);
      }
      T obj;
      int nextReadRefId = refResolver.tryPreserveRefId(buffer);
      if (nextReadRefId >= NOT_NULL_VALUE_FLAG) {
        ClassInfo classInfo;
        if (shareMeta) {
          classInfo = classResolver.readClassInfo(buffer);
        } else {
          classInfo = classResolver.getClassInfo(cls);
        }
        obj = (T) readDataInternal(buffer, classInfo);
        return obj;
      } else {
        return null;
      }
```

And when deserializing, you must register class by id to setup class mapping:
```java
  static BaseFury s = Fury.builder()
    .withRefTracking(true)
    .withCompatibleMode(CompatibleMode.COMPATIBLE)
    .requireClassRegistration(false)
    .serializeEnumByName(true)
    .buildThreadSafeFury();
  static BaseFury s1 = Fury.builder()
    .withRefTracking(true)
    .withCompatibleMode(CompatibleMode.COMPATIBLE)
    .requireClassRegistration(false)
    .serializeEnumByName(true)
    .buildThreadSafeFury();

  public static class PrivateFliedClassNumberOne {
    private boolean privateBoolean = true;
    private int privateInt = 10;
    private String privateString = ""notNull"";
    private Map<String, String> privateMap = ofHashMap(""a"", ""b"");
    private List<String> privateList = ofArrayList(""l"");
    private PrivateFieldSubClass privateFieldSubClass = new PrivateFieldSubClass();
  }

  public static class PrivateFliedClassNumberTwoWithMissingField {

    private Map<String, String> privateMap = ofHashMap(""a"", ""b"");
    private int privateInt = 10;
    private PrivateFieldSubClass privateFieldSubClass = new PrivateFieldSubClass();
    private List<String> privateList = ofArrayList(""l"");
    private boolean privateBoolean = true;
  }

  private static class PrivateFieldSubClass{}

  @Test
  public void test() {
    PrivateFliedClassNumberOne privateField = new PrivateFliedClassNumberOne();
    s.register(PrivateFliedClassNumberOne.class);
    byte[] serialized = s.serializeJavaObject(privateField);

    s1.register(PrivateFliedClassNumberTwoWithMissingField.class);
    PrivateFliedClassNumberTwoWithMissingField privateField2 = s1.deserializeJavaObject(
      serialized,
      PrivateFliedClassNumberTwoWithMissingField.class
    );
  }
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIG61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIH5f,fury,2569043551,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T10:56:44Z,2025-01-03T10:56:44Z,"If you want to avoid class registeration, this will need more work, you need to extend `org.apache.fury.meta.ClassDef` and replace the original class with new passed class for all fields and the class. Then you need to extend `ClassResolver` with a new `readClassInfoWithMetaShare` method with passed deserialized type","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIH5f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIVb_,fury,2569099007,1972,NA,orisgarno,42269241,,,NA,2025-01-03T11:44:39Z,2025-01-03T11:44:39Z,"Thanks for the code and the example @chaokunyang .
After adding some extensive unit test(still on my local), it works. will make a pr for the changes and also the documentation.
Wondering though, do we need to register only the top most parent class?

not so sure for the solution to avoid class registration. seems quite some works. if it doesn't affect the performance, will try to take a look.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIVb_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1972,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIcFt,fury,2569126253,1972,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T12:07:45Z,2025-01-03T12:07:45Z,"Looking forward to your PR.

For registration, if nested field classes are not registered, fury will skip those fields when there is a inconsistency. Currently fury will skip all incompatible fields if theiir declared types are not compatible. There is a PR #1870 which is working on this","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIcFt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1975,https://api.github.com/repos/apache/fury/issues/1975,fury,2727659559,1975,[Java] object deep copy into different type,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2024-12-09T16:38:56Z,2024-12-09T16:39:23Z,"### Feature Request

We've supported object deep copy of object from one instance to another instance, but we still don't support deep copy object from one type into another type.

### Is your feature request related to a problem? Please describe

deep copy object from one type into another type:

```java
class Struct1 {
  int f1;
  String f2;

  public Struct1(int f1, String f2) {
    this.f1 = f1;
    this.f2 = f2;
  }
}

class Struct2 {
  int f1;
  String f2;
  double f3;
}

Struct1 s1 = xxx;
Struct2 struct2 = copyTo(s1, Struct2.class)
```

### Describe the solution you'd like

Extend the current object deep copy mechanism

### Describe alternatives you've considered

Mock by:
```java
public class StructMappingExample {
  static class Struct1 {
    int f1;
    String f2;

    public Struct1(int f1, String f2) {
      this.f1 = f1;
      this.f2 = f2;
    }
  }

  static class Struct2 {
    int f1;
    String f2;
    double f3;
  }

  static ThreadSafeFury fury1 = Fury.builder()
    .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();
  static ThreadSafeFury fury2 = Fury.builder()
    .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFury();

  static {
    fury1.register(Struct1.class);
    fury2.register(Struct2.class);
  }

  public static void main(String[] args) {
    Struct1 struct1 = new Struct1(10, ""abc"");
    Struct2 struct2 = (Struct2) fury2.deserialize(fury1.serialize(struct1));
    Assert.assertEquals(struct2.f1, struct1.f1);
    Assert.assertEquals(struct2.f2, struct1.f2);
    struct1 = (Struct1) fury1.deserialize(fury2.serialize(struct2));
    Assert.assertEquals(struct1.f1, struct2.f1);
    Assert.assertEquals(struct1.f2, struct2.f2);
  }
}
```

This will work, but not that efficient cause it will write/read buffer.

### Additional context

https://github.com/apache/fury/discussions/1973
https://github.com/apache/fury/pull/1974","{""url"": ""https://api.github.com/repos/apache/fury/issues/1975/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1975,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wt_6w,fury,2528640688,1975,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-09T16:39:21Z,2024-12-09T16:39:21Z,"Hi @zhaommmmomo , would you like to take over this issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Wt_6w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1976,https://api.github.com/repos/apache/fury/issues/1976,fury,2729004618,1976,Integer values inside arrays are not compressed,MC-2016,18423056,,,OPEN,2024-12-10T04:55:29Z,2025-02-06T12:45:32Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

fury 0.9.0
Temurin 21.0.5 (x64)
Windows 11 


### Component(s)

Java

### Minimal reproduce step

```java
import org.apache.fury.*;
import org.apache.fury.config.*;

public class FuryRepro
{
	public static class RecordA
	{
		private int			int32 = 1;
	}

	public static class RecordB
	{
		private int			int32 = Integer.MAX_VALUE;
	}

	public static class RecordC
	{
		private int[]		intArray = { 1 };
	}

	public static class RecordD
	{
		private int[]		intArray = { Integer.MAX_VALUE };
	}

	public static void main(String[] args)
	{
		Fury fury = Fury.builder()
			.withLanguage(Language.JAVA)
			.withIntCompressed(true)
			.withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
			.requireClassRegistration(true)
			.build();
		fury.register(RecordA.class);
		fury.register(RecordB.class);
		fury.register(RecordC.class);
		fury.register(RecordD.class);

		System.out.printf(""A: %d%n"", fury.serialize(new RecordA()).length);
		System.out.printf(""B: %d%n"", fury.serialize(new RecordB()).length);
		System.out.printf(""C: %d%n"", fury.serialize(new RecordC()).length);
		System.out.printf(""D: %d%n"", fury.serialize(new RecordD()).length);
	}
}
```

### What did you expect to see?

The values inside `int[]` arrays compressed, just like the values of `int` fields.

### What did you see instead?

A: 5
B: 9
C: 10
D: 10

The values of `int` fields are compressed as expected, but the values inside `int[]` arrays are _not_.

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1976/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1976,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dVxnN,fury,2639731149,1976,NA,dennishendriksen,2477186,Dennis Hendriksen,d.hendriksen@umcg.nl,NA,2025-02-06T12:45:31Z,2025-02-06T12:45:31Z,"same issue for long:

```java
import org.apache.fury.*;
import org.apache.fury.config.*;

public class FuryReproLong {
  public static class RecordA {
    private long long64 = 1L;
  }

  public static class RecordB {
    private long long64 = Long.MAX_VALUE;
  }

  public static class RecordC {
    private long[] longArray = {1L};
  }

  public static class RecordD {
    private long[] longArray = {Long.MAX_VALUE};
  }

  public static void main(String[] args) {
    Fury fury =
        Fury.builder()
            .withLanguage(Language.JAVA)
            .withLongCompressed(true)
            .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)
            .requireClassRegistration(true)
            .build();
    fury.register(RecordA.class);
    fury.register(RecordB.class);
    fury.register(RecordC.class);
    fury.register(RecordD.class);

    System.out.printf(""A: %d%n"", fury.serialize(new RecordA()).length);
    System.out.printf(""B: %d%n"", fury.serialize(new RecordB()).length);
    System.out.printf(""C: %d%n"", fury.serialize(new RecordC()).length);
    System.out.printf(""D: %d%n"", fury.serialize(new RecordD()).length);
  }
}
```
results in:
```
A: 8
B: 13
C: 14 // would have expected this value to be lower
D: 14
```

I've poked around the code base to see if I can fix it myself, but this is higher magic :)
Fixing this issue would be a major storage saver for my use case","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dVxnN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1977,https://api.github.com/repos/apache/fury/issues/1977,fury,2733076120,1977,Javascript packages not published to npm?,ggecy,924873,Gabriel Gecy,,OPEN,2024-12-11T14:06:47Z,2025-01-20T02:16:48Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury 0.9.0, MacOS 15.1.1, NodeJS 21.6.1

### Component(s)

JavaScript

### Minimal reproduce step

Check the latest version of https://www.npmjs.com/package/@furyjs/fury and https://www.npmjs.com/package/@furyjs/hps


### What did you expect to see?

Version 0.9.0 as in released versions [fury](https://github.com/apache/fury/blob/v0.9.0/javascript/packages/fury/package.json) and [hps](https://github.com/apache/fury/blob/v0.9.0/javascript/packages/hps/package.json)

### What did you see instead?

@furyjs/fury at version 0.0.18 and  @furyjs/hps at version 0.0.6

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1977/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1977,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xw6at,fury,2546181805,1977,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-16T17:09:11Z,2024-12-16T17:09:11Z,"Hi @ggecy , we are refactoring fury xlang serialization protocol, furyjs will not be published to npm until we finished the reafctor. If everything goes right,  I think we can make a release in next month and publish it to npm","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xw6at/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1977,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bCvKN,fury,2601185933,1977,NA,naah69,25682169,Naah,nayan3480232@163.com,NA,2025-01-20T02:16:47Z,2025-01-20T02:16:47Z,@chaokunyang Will you complete it before spring Festival？,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bCvKN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1978,https://api.github.com/repos/apache/fury/issues/1978,fury,2736432792,1978,bazel build failure: error loading package under directory '': error loading package 'cpp/fury',chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-12-12T16:57:19Z,2024-12-12T18:21:55Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

C++

### Minimal reproduce step

bazel build //:cp_fury_so

### What did you expect to see?

build success

### What did you see instead?

```
ERROR: error loading package under directory '': error loading package 'cpp/fury': Unable to find package for @@[unknown repo 'rules_cc' requested from @@]//cc:defs.bzl: The repository '@@[unknown repo 'rules_cc' requested from @@]' could not be resolved: No repository visible as '@rules_cc' from main repository. Was the repository introduced in WORKSPACE? The WORKSPACE file is disabled by default in Bazel 8 (late 2024) and will be removed in Bazel 9 (late 2025), please migrate to Bzlmod. See https://bazel.build/external/migration.
2024-12-10 12:00:25,331 - ERROR - 
Traceback (most recent call last):
  File ""/home/runner/work/fury/fury/./ci/run_ci.py"", line 1[87](https://github.com/apache/fury/actions/runs/12247195666/job/34189138940#step:4:88), in <module>
    _parse_args()
  File ""/home/runner/work/fury/fury/./ci/run_ci.py"", line 183, in _parse_args
    args.func(**arg_dict)
  File ""/home/runner/work/fury/fury/./ci/run_ci.py"", line 84, in _run_cpp
    query_result = _exec_cmd(""bazel query //..."")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/work/fury/fury/./ci/run_ci.py"", line 43, in _exec_cmd
    result = subprocess.check_output(cmd, shell=True, universal_newlines=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py"", line 466, in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/subprocess.py"", line 571, in run
    raise CalledProcessError(retcode, process.args,
subprocess.CalledProcessError: Command 'bazel query //...' returned non-zero exit status 7.
Error: Process completed with exit code 1.
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1978/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1978,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XXcfF,fury,2539505605,1978,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-12T16:57:41Z,2024-12-12T16:57:41Z,"https://github.com/apache/fury/actions/runs/12247195666/job/34189138940
![image](https://github.com/user-attachments/assets/eb750806-1da6-4b5e-bc3a-20ab16f982a1)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XXcfF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/1980,fury,2742717848,1980,Instruct fury to discard classInfo in the serialised data during deserialisation,Nikhil-n17,56041789,,,OPEN,2024-12-16T15:36:14Z,2025-01-03T11:06:14Z,"### Feature Request

Scenario is specific to fury data migration. 

We have serialised data in the db which is serialised without registering few classes, now we want to register the classes. This means, in the process we can encounter below two new scenarios :

- Data serialised by fury instance with class registration --> deserialised by fury instance without class registration -- **THIS DOES NOT WORK**

- Data serialised by fury instance without class registration --> deserialised by fury instance with class registration

Just wondering, is there a way to instruct Fury to disregard the classInfo in the serialised data during the deserialisation process?

### Is your feature request related to a problem? Please describe

As the serialised data contains classInfo, during serialisation fury seems to be expecting the class with same package structure or corresponding classes in registered with same classId to be deserialised. Making it difficult to refactor the data object in the migration.

### Describe the solution you'd like

Feature or flag that instructs the fury deserialiser instance not to consider the classInfo in the serialised data. Or any other solutions to get rid of class registration would be very helpful.

### Describe alternatives you've considered

_No response_

### Additional context

Code snippet to reproduce the issue locally.

```
import io.fury.Fury;
import io.fury.ThreadLocalFury;
import io.fury.ThreadSafeFury;
import io.fury.config.CompatibleMode;
import io.fury.config.Language;

public class FuryProblem {

    public static void main(String... args) {
        Wrapper wrapper = new Wrapper();
        ComposedObject composedObject = new ComposedObject();
        composedObject.setEnabled(true);
        wrapper.setComposedObject(composedObject);
        byte[] srcBytes = furyWithRegistration.serializeJavaObject(wrapper);
        Wrapper resultWrapper = furyWithoutRegistration.deserializeJavaObject(srcBytes, Wrapper.class);
        assert composedObject.getEnabled() == resultWrapper.getComposedObject().getEnabled();
    }

    public static ThreadSafeFury furyWithRegistration =
            new ThreadLocalFury(
                    classLoader -> {
                        Fury f =
                                Fury.builder()
                                        .withLanguage(Language.JAVA)
                                        .withClassLoader(classLoader)
                                        .registerGuavaTypes(false)
                                        .withCompatibleMode(CompatibleMode.COMPATIBLE)
                                        .requireClassRegistration(false)
                                        .build();

                        f.register(Wrapper.class);
                        f.register(ComposedObject.class);
                        return f;
                    });

    public static ThreadSafeFury furyWithoutRegistration =
            new ThreadLocalFury(
                    classLoader -> Fury.builder()
                            .withLanguage(Language.JAVA)
                            .withClassLoader(classLoader)
                            .registerGuavaTypes(false)
                            .withCompatibleMode(CompatibleMode.COMPATIBLE)
                            .requireClassRegistration(false)
                            .build());

    static class Wrapper {
        ComposedObject composedObject;

        public ComposedObject getComposedObject() {
            return composedObject;
        }

        public void setComposedObject(ComposedObject composedObject) {
            this.composedObject = composedObject;
        }
    }
    static class ComposedObject {
        Boolean enabled;

        public void setEnabled(Boolean enabled) {
            this.enabled = enabled;
        }

        public Boolean getEnabled() {
            return enabled;
        }
    }

}
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/1980/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxBR-,fury,2546209918,1980,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-16T17:22:19Z,2024-12-16T17:22:19Z,"Hi @Nikhil-n17 , why do you want to register some classes? Is that for security consideration? Or you want to skip write classname for smaller serialized data?

It's hard to ignore class id in the serialized data. You must use registration all the time, or just don't use it. The registered classes must have same order and same class id.

One of the solution I think of is that you use multiple Fury instance with different configuration. And you write a different magic number for every Fury instance. And use the coresponding Fury for deserialization.

Here is an example:

```java
Fury fury1 = Fury.builder().withName(""fury1"").build();
MemoryBuffer buffer = xxx;
buffer.write_int32(magicNumber1);
fury1.serialize(buffer, new SomeObject());

Fury fury2 = Fury.builder().withName(""fury2"").build();
MemoryBuffer buffer2 = xxx;
buffer2.write_int32(magicNumber1);
fury2.serialize(buffer2, new SomeObject());

int magicNumber = buffer.read_int32();
if (magicNumber == magicNumber1) {
  fury1.deserialize(buffer)
} else if (magicNumber == magicNumber2) {
  fury2.deserialize(buffer)
}

```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxBR-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6X2-vI,fury,2547772360,1980,NA,Nikhil-n17,56041789,,,NA,2024-12-17T08:18:55Z,2024-12-17T08:18:55Z,"Previously in the legacy app, we had single fury instance to serialise and deserialise. For now, database only contains the data serialised by this instance. With the existing app being migrated to new system ( System B ) in which we have DTO refactoring ( renaming and reusing the possible DTOs) and new fury instance would be created. We are facing issue while deserialising the data in the db (written by legacyApp) in new System and vice versa.

Example 
System A  - Legacy app - Database already contains data written by this app. 

```
public class DTOStructSystemB {
    String stringField;
    int intField;
    CustomDTOR1 customDTOR1;
    CustomDTOR2 customDTOR2;
}

public class CustomDTOR1 {
    String name;
    String age;
}

public class CustomDTOR2 {
    String name;
    String age;
} 

/* Both CustomDTOR2 and CustomDTOR1 were registered in fury instance */
```

System B - NEW System 
-  won't be using the DTOs or fury instance from old app.

```
public class DTOStructSystemB {
    String stringField;
    int intField;
    CustomDTOinNewSystem customDTOinNewSystem;
    CustomDTOinNewSystem customDTOinNewSystem;
}

public class CustomDTOinNewSystem {
    String name;
    String age;
}
``` 

We are looking for a way to create fury instance in System B in such that, both class are correctly deserialised to `CustomDTOinNewSystem`, we are forced to have another DTO of same structure in new system just to be able to deserialise the data written from legacy app.  
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6X2-vI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZCEAC,fury,2567454722,1980,NA,Nikhil-n17,56041789,,,NA,2025-01-02T09:02:30Z,2025-01-02T09:02:30Z,Could you please help if we have way out for this problem?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZCEAC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIKLr,fury,2569052907,1980,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T11:04:21Z,2025-01-03T11:04:21Z,"@Nikhil-n17 You need to create two Fury with different configuration and registrations for old and new application. Here are the steps:

## step1

Upgrade your legacy application to parse a special header which indicate it's the data from newer fury. And if the header matches, you use another Fury instance which has same registered classes as the newew application.

## step2

Upgrade your new application, when you serialize data with new fury, you write a special header first, so that the legacy application can use that header to determine whether dispath the data to old or new Fury.

","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIKLr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1980,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIKvR,fury,2569055185,1980,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-03T11:06:13Z,2025-01-03T11:06:13Z,"> Hi @Nikhil-n17 , why do you want to register some classes? Is that for security consideration? Or you want to skip write classname for smaller serialized data?
> 
> It's hard to ignore class id in the serialized data. You must use registration all the time, or just don't use it. The registered classes must have same order and same class id.
> 
> One of the solution I think of is that you use multiple Fury instance with different configuration. And you write a different magic number for every Fury instance. And use the coresponding Fury for deserialization.
> 
> Here is an example:
> 
> ```java
> Fury fury1 = Fury.builder().withName(""fury1"").build();
> MemoryBuffer buffer = xxx;
> buffer.write_int32(magicNumber1);
> fury1.serialize(buffer, new SomeObject());
> 
> Fury fury2 = Fury.builder().withName(""fury2"").build();
> MemoryBuffer buffer2 = xxx;
> buffer2.write_int32(magicNumber1);
> fury2.serialize(buffer2, new SomeObject());
> 
> int magicNumber = buffer.read_int32();
> if (magicNumber == magicNumber1) {
>   fury1.deserialize(buffer)
> } else if (magicNumber == magicNumber2) {
>   fury2.deserialize(buffer)
> }
> ```

I think this already can resolve your issue, is there anything that I miss?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZIKvR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1982,https://api.github.com/repos/apache/fury/issues/1982,fury,2742941004,1982,[Python] drop python 3.7 support,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-12-16T17:10:20Z,2024-12-16T17:30:10Z,"### Feature Request

Most pytho library has dropped py3.7 support such as pyarrow, pytorch. It's time for pyfury to drop py3.7 support for bettern code maintainance

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1982/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1982,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xw7FQ,fury,2546184528,1982,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-16T17:10:30Z,2024-12-16T17:10:30Z,"cc @penguin-wwy 
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Xw7FQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1983,https://api.github.com/repos/apache/fury/issues/1983,fury,2742989657,1983,[Python] support special char1/2 in MetaString Encoding,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2024-12-16T17:33:32Z,2024-12-23T02:29:47Z,"### Feature Request

In java MetaStringEncoder, we can pass special char1/2 like`new MetaStringEncoder('$', '_')`, then the encoding and decoding will encode such chars specially:
```java
  private int charToValueLowerUpperDigitSpecial(char c) {
    if (c >= 'a' && c <= 'z') {
      return c - 'a';
    } else if (c >= 'A' && c <= 'Z') {
      return 26 + (c - 'A');
    } else if (c >= '0' && c <= '9') {
      return 52 + (c - '0');
    } else if (c == specialChar1) {
      return 62;
    } else if (c == specialChar2) {
      return 63;
    } else {
      throw new IllegalArgumentException(
          ""Unsupported character for LOWER_UPPER_DIGIT_SPECIAL encoding: "" + c);
    }
  }
```

Currently those chars are hard coded in python:
```python
        elif bits_per_char == 6:
            if ""a"" <= c <= ""z"":
                return ord(c) - ord(""a"")
            elif ""A"" <= c <= ""Z"":
                return 26 + (ord(c) - ord(""A""))
            elif ""0"" <= c <= ""9"":
                return 52 + (ord(c) - ord(""0""))
            elif c == ""."":
                return 62
            elif c == ""_"":
                return 63
            else:
                raise ValueError(
                    f""Unsupported character for LOWER_UPPER_DIGIT_SPECIAL encoding: {c}""
                )
```

We should support pass those chars  in python

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1983/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1983,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxI-C,fury,2546241410,1983,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-16T17:35:00Z,2024-12-16T17:35:00Z,cc @pandalee99 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxI-C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1983,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxP_Q,fury,2546270160,1983,NA,pandalee99,46820719,PAN,,NA,2024-12-16T17:49:09Z,2024-12-16T17:49:09Z,"sure,pretty good.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6XxP_Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1983,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6X2Sax,fury,2547590833,1983,NA,pandalee99,46820719,PAN,,NA,2024-12-17T06:15:48Z,2024-12-17T06:15:48Z,I estimate that this demand will be completed between the 21st and 22nd.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6X2Sax/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1984,https://api.github.com/repos/apache/fury/issues/1984,fury,2749367675,1984, java.lang.IndexOutOfBoundsException when use withStringCompressed(true),wzhongke,9172139,wangzhongke,993287653@qq.com,OPEN,2024-12-19T06:16:23Z,2024-12-19T08:39:47Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.9.0

### Component(s)

Java

### Minimal reproduce step

```java
public class Main {
    private static final ThreadSafeFury FURY = Fury.builder().withLanguage(Language.JAVA)
        .requireClassRegistration(false)
        .withNumberCompressed(true)
        .withStringCompressed(true)
        .withRefTracking(true)
        .withMetaCompressor(new DeflaterMetaCompressor())
        .buildThreadLocalFury();

    @Data
    public static class Simple {
        private String str;

        public Simple(String str) {
            this.str = str;
        }
    }

    public static void main(String[] args) {
        byte[] serialize = FURY.serialize(new Simple(""STG@ON DEMAND Solutions@GeoComputing Switch/ Hub@Digi Edgeport/216 – 16 port Serial Hub""));
        FURY.deserialize(serialize);
    }
}
```

### What did you expect to see?

No error

### What did you see instead?

Exception in thread ""main"" org.apache.fury.exception.DeserializationException: Deserialize failed, read objects are: [Main.Simple(str=null)]
	at org.apache.fury.util.ExceptionUtils.handleReadFailed(ExceptionUtils.java:63)
	at org.apache.fury.Fury.deserialize(Fury.java:797)
	at org.apache.fury.Fury.deserialize(Fury.java:714)
	at org.apache.fury.ThreadLocalFury.deserialize(ThreadLocalFury.java:137)
	at com.lenovo.awakens.Main.main(Main.java:33)
Caused by: java.lang.IndexOutOfBoundsException: readerIndex(30) + length(81) exceeds size(123): org.apache.fury.memory.MemoryBuffer$BoundChecker@2584b82d
	at org.apache.fury.memory.MemoryBuffer$BoundChecker.fillBuffer(MemoryBuffer.java:186)
	at org.apache.fury.memory.MemoryBuffer.checkReadableBytes(MemoryBuffer.java:2412)
	at org.apache.fury.serializer.StringSerializer.readBytesUnCompressedUTF16(StringSerializer.java:434)
	at org.apache.fury.serializer.StringSerializer.readBytesString(StringSerializer.java:206)
	at com.lenovo.awakens.Main_SimpleFuryRefCodec_0.read(Main_SimpleFuryRefCodec_0.java:56)
	at org.apache.fury.Fury.readDataInternal(Fury.java:959)
	at org.apache.fury.Fury.readRef(Fury.java:861)
	at org.apache.fury.Fury.deserialize(Fury.java:793)
	... 3 more

### Anything Else?

I think it might be a problem here, but I am not sure about it
![image](https://github.com/user-attachments/assets/2640a6e5-feca-407f-84c6-2ddcdcd5397d)


### Are you willing to submit a PR?

- [X] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/1984/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1984,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YK7H4,fury,2553000440,1984,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-19T07:53:08Z,2024-12-19T07:53:08Z,"@HuangXingBo Could you take a look at this issue? Seems we should check `compressString` before returning `new Invoke(strSerializer, ""readBytesString"", STRING_TYPE, buffer)`, and we also need an ut which test a POJO with String field serialization with codegen enabled","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YK7H4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1984,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YK72w,fury,2553003440,1984,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-19T07:55:15Z,2024-12-19T07:55:15Z,"Hi @wzhongke , could you disable string compression? This will keep behaviour consistent with fury 0.8.0. The serialization will still work. Of course the serialized data will be larger.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YK72w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1984,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YLCM-,fury,2553029438,1984,NA,wzhongke,9172139,wangzhongke,993287653@qq.com,NA,2024-12-19T08:11:06Z,2024-12-19T08:11:06Z,"> Hi @wzhongke , could you disable string compression? This will keep behaviour consistent with fury 0.8.0. The serialization will still work. Of course the serialized data will be larger.

OK, thanks","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YLCM-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1984,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YLP2m,fury,2553085350,1984,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2024-12-19T08:39:45Z,2024-12-19T08:39:45Z,@wzhongke Would you like to create a PR to fix this? We can make a release in next two weeks,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6YLP2m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1986,https://api.github.com/repos/apache/fury/issues/1986,fury,2752804826,1986,fury.register error java.lang.NoSuchMethodException: no such constructor: java.util.concurrent.ConcurrentSkipListSet.<init>,lmm1990,4828501,,,OPEN,2024-12-20T14:02:36Z,2025-01-02T01:06:12Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

Fury：0.9.0
os：windows10
graalvm：21.0.4

### Component(s)

Java

### Minimal reproduce step

[demo.zip](https://github.com/user-attachments/files/18211554/demo.zip)


see demo.zip

### What did you expect to see?

no error

### What did you see instead?

java.lang.UnsupportedOperationException: java.lang.NoSuchMethodException: no such constructor: java.util.concurrent.ConcurrentSkipListSet.<init>(Comparator)void/newInvokeSpecial
        at org.apache.fury.serializer.collection.CollectionSerializers$SortedSetSerializer.<init>(CollectionSerializers.java:209)
        at org.apache.fury.serializer.collection.CollectionSerializers$ConcurrentSkipListSetSerializer.<init>(CollectionSerializers.java:446)
        at org.apache.fury.serializer.collection.CollectionSerializers.registerDefaultSerializers(CollectionSerializers.java:836)
        at org.apache.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:326)
        at org.apache.fury.resolver.ClassResolver.initialize(ClassResolver.java:313)
        at org.apache.fury.Fury.<init>(Fury.java:150)
        at org.apache.fury.config.FuryBuilder.newFury(FuryBuilder.java:419)
        at org.apache.fury.config.FuryBuilder.build(FuryBuilder.java:434)
        at com.example.demo.FuryUtils.lambda$static$0(FuryUtils.java:21)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:138)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:95)
        at org.apache.fury.ThreadLocalFury.lambda$new$2(ThreadLocalFury.java:67)
        at java.base@21.0.4/java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:357)
        at java.base@21.0.4/java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:225)
        at java.base@21.0.4/java.lang.ThreadLocal.get(ThreadLocal.java:194)
        at java.base@21.0.4/java.lang.ThreadLocal.get(ThreadLocal.java:172)
        at org.apache.fury.ThreadLocalFury.<init>(ThreadLocalFury.java:75)
        at com.example.demo.FuryUtils.<clinit>(FuryUtils.java:18)
        at com.example.demo.DemoApplication.main(DemoApplication.java:10)
        at java.base@21.0.4/java.lang.invoke.LambdaForm$DMH/sa346b79c.invokeStaticInit(LambdaForm$DMH)
Caused by: java.lang.NoSuchMethodException: no such constructor: java.util.concurrent.ConcurrentSkipListSet.<init>(Comparator)void/newInvokeSpecial
        at java.base@21.0.4/java.lang.invoke.MemberName.makeAccessException(MemberName.java:913)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:994)
        at java.base@21.0.4/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3750)
        at java.base@21.0.4/java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:2837)
        at org.apache.fury.reflect.ReflectionUtils.lambda$getCtrHandle$1(ReflectionUtils.java:147)
        at java.base@21.0.4/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
        at org.apache.fury.reflect.ReflectionUtils.getCtrHandle(ReflectionUtils.java:143)
        at org.apache.fury.serializer.collection.CollectionSerializers$SortedSetSerializer.<init>(CollectionSerializers.java:207)
        ... 19 more
Caused by: java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentSkipListSet.<init>(java.util.Comparator)
        at org.graalvm.nativeimage.builder/com.oracle.svm.core.methodhandles.Util_java_lang_invoke_MethodHandleNatives.resolve(Target_java_lang_invoke_MethodHandleNatives.java:335)
        at java.base@21.0.4/java.lang.invoke.MethodHandleNatives.resolve(MethodHandleNatives.java:213)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:962)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:991)
        ... 25 more
2024-12-20 01:47:53 ERROR  FuryBuilder:422 [main] - Fury creation failed with classloader jdk.internal.loader.ClassLoaders$AppClassLoader@48140564
Exception in thread ""main"" java.lang.ExceptionInInitializerError
        at com.example.demo.DemoApplication.main(DemoApplication.java:10)
        at java.base@21.0.4/java.lang.invoke.LambdaForm$DMH/sa346b79c.invokeStaticInit(LambdaForm$DMH)
Caused by: java.lang.UnsupportedOperationException: java.lang.NoSuchMethodException: no such constructor: java.util.concurrent.ConcurrentSkipListSet.<init>(Comparator)void/newInvokeSpecial
        at org.apache.fury.serializer.collection.CollectionSerializers$SortedSetSerializer.<init>(CollectionSerializers.java:209)
        at org.apache.fury.serializer.collection.CollectionSerializers$ConcurrentSkipListSetSerializer.<init>(CollectionSerializers.java:446)
        at org.apache.fury.serializer.collection.CollectionSerializers.registerDefaultSerializers(CollectionSerializers.java:836)
        at org.apache.fury.resolver.ClassResolver.addDefaultSerializers(ClassResolver.java:326)
        at org.apache.fury.resolver.ClassResolver.initialize(ClassResolver.java:313)
        at org.apache.fury.Fury.<init>(Fury.java:150)
        at org.apache.fury.config.FuryBuilder.newFury(FuryBuilder.java:419)
        at org.apache.fury.config.FuryBuilder.build(FuryBuilder.java:434)
        at com.example.demo.FuryUtils.lambda$static$0(FuryUtils.java:21)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:138)
        at org.apache.fury.util.LoaderBinding.setClassLoader(LoaderBinding.java:95)
        at org.apache.fury.ThreadLocalFury.lambda$new$2(ThreadLocalFury.java:67)
        at java.base@21.0.4/java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:357)
        at java.base@21.0.4/java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:225)
        at java.base@21.0.4/java.lang.ThreadLocal.get(ThreadLocal.java:194)
        at java.base@21.0.4/java.lang.ThreadLocal.get(ThreadLocal.java:172)
        at org.apache.fury.ThreadLocalFury.<init>(ThreadLocalFury.java:75)
        at com.example.demo.FuryUtils.<clinit>(FuryUtils.java:18)
        ... 2 more
Caused by: java.lang.NoSuchMethodException: no such constructor: java.util.concurrent.ConcurrentSkipListSet.<init>(Comparator)void/newInvokeSpecial
        at java.base@21.0.4/java.lang.invoke.MemberName.makeAccessException(MemberName.java:913)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:994)
        at java.base@21.0.4/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3750)
        at java.base@21.0.4/java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:2837)
        at org.apache.fury.reflect.ReflectionUtils.lambda$getCtrHandle$1(ReflectionUtils.java:147)
        at java.base@21.0.4/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
        at org.apache.fury.reflect.ReflectionUtils.getCtrHandle(ReflectionUtils.java:143)
        at org.apache.fury.serializer.collection.CollectionSerializers$SortedSetSerializer.<init>(CollectionSerializers.java:207)
        ... 19 more
Caused by: java.lang.NoSuchMethodError: java.util.concurrent.ConcurrentSkipListSet.<init>(java.util.Comparator)
        at org.graalvm.nativeimage.builder/com.oracle.svm.core.methodhandles.Util_java_lang_invoke_MethodHandleNatives.resolve(Target_java_lang_invoke_MethodHandleNatives.java:335)
        at java.base@21.0.4/java.lang.invoke.MethodHandleNatives.resolve(MethodHandleNatives.java:213)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:962)
        at java.base@21.0.4/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:991)
        ... 25 more

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] #1988","{""url"": ""https://api.github.com/repos/apache/fury/issues/1986/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1986,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y7KtZ,fury,2565647193,1986,NA,Aliothmoon,107878625,Aliothmoon,,NA,2024-12-30T15:49:06Z,2024-12-30T15:49:06Z,Is it running in AOT mode?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y7KtZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1986,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y7RHv,fury,2565673455,1986,NA,Aliothmoon,107878625,Aliothmoon,,NA,2024-12-30T16:13:58Z,2024-12-30T16:13:58Z,"You may need to review this document if you are running in AOT mode. [graalvm_guide](https://fury.apache.org/zh-CN/docs/guide/graalvm_guide#graalvm-native-image-%E4%BB%8B%E7%BB%8D)
so you must create Fury as an static field of a class, and register all classes at the enclosing class initialize time.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Y7RHv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1986,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZBHsD,fury,2567207683,1986,NA,lmm1990,4828501,,,NA,2025-01-02T01:06:11Z,2025-01-02T01:06:11Z,"Okay, I'll give it a try","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZBHsD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1988,https://api.github.com/repos/apache/fury/issues/1988,fury,2757210669,1988,I'm willing to submit a PR!,pandalee99,46820719,PAN,,CLOSED,2024-12-24T05:36:26Z,2024-12-24T05:38:47Z,,"{""url"": ""https://api.github.com/repos/apache/fury/issues/1988/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1992,https://api.github.com/repos/apache/fury/issues/1992,fury,2767485686,1992,[Python] Rewrite cython serialization into pybind,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2025-01-03T12:19:38Z,2025-01-03T12:20:10Z,"### Feature Request

Based on the discussion in #1887 ,  and the #1690 is finished, it's time to rewrite cython in pyfury into nanobind.

pyfury has two formats:
- Object graph serialization
- Row format

Row format has some interaction with pyarrow cython API, so we will skip rewriting cython for row fomat. The rewriting will be done only for Object graph serialization

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

#1887","{""url"": ""https://api.github.com/repos/apache/fury/issues/1992/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1993,https://api.github.com/repos/apache/fury/issues/1993,fury,2767528889,1993,[Python] Optimize performance of pyfury,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2025-01-03T12:52:16Z,2025-01-04T13:51:12Z,"### Feature Request


pyfury is 3x faster than pickle serialization and 2x faster than pickle deserialization, here is the benchmark code:
```python
@dataclass
class ComplexObject1:
    f1: Any = None
    f2: str = None
    f3: List[str] = None
    f4: Dict[pyfury.Int8Type, pyfury.Int32Type] = None
    f5: pyfury.Int8Type = None
    f6: pyfury.Int16Type = None
    f7: pyfury.Int32Type = None
    f8: pyfury.Int64Type = None
    f9: pyfury.Float32Type = None
    f10: pyfury.Float64Type = None
    f12: List[pyfury.Int16Type] = None


@dataclass
class ComplexObject2:
    f1: Any
    f2: Dict[pyfury.Int8Type, pyfury.Int32Type]


fury = pyfury.Fury(language=pyfury.Language.PYTHON)
fury.register_type(ComplexObject1)
fury.register_type(ComplexObject2)
o = COMPLEX_OBJECT
start = time.time()
binary = fury.serialize(o)
for i in range(50000000):
    # binary = fury.serialize(o)
    fury.deserialize(binary)
print(time.time() - start)
start = time.time()
binary = pickle.dumps(o)
for i in range(500000):
    # binary = pickle.dumps(o)
    pickle.loads(binary)
print(time.time() - start)
```

But the performance is not fast enough still, with the flame graph, we can see there are still performance improvement space:

![out](https://github.com/user-attachments/assets/0662fdfd-9d45-4986-af39-b06e4108ddc9)


### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/1993/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1993,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZM--z,fury,2570317747,1993,NA,pandalee99,46820719,PAN,,NA,2025-01-04T06:39:20Z,2025-01-04T06:39:20Z,"It's more of a long-term need, and here I have some questions. 1. Whether it can improve efficiency by destroying readability (for example, reducing or reusing some variables); 2, whether the function implementation needs to use cpp as much as possible;","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZM--z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1993,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZQxXo,fury,2571310568,1993,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-04T13:51:10Z,2025-01-04T13:51:10Z,"Depending on the performance gains we can get, it's ok to compromise some code readability. And if cpp is faster, we should use it","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZQxXo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1994,https://api.github.com/repos/apache/fury/issues/1994,fury,2768390879,1994,[Question] the serialization performance:fury slower than kryo,jiangmin168168,5190265,,,CLOSED,2025-01-04T03:14:22Z,2025-01-04T13:42:48Z,"### Question

fury version :0.9.0
kryo version:4.0.0

test code:https://github.com/jiangmin168168/jim-serialization-test","{""url"": ""https://api.github.com/repos/apache/fury/issues/1994/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1994,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZL7u0,fury,2570042292,1994,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-04T04:16:03Z,2025-01-04T04:16:03Z,"Could you share your test code? You just shared your struct code only, it doesn't contain test data, and we don't know how you create fury/kryo, nor how you use them for serialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZL7u0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1994,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZO6J6,fury,2570822266,1994,NA,jiangmin168168,5190265,,,NA,2025-01-04T08:52:31Z,2025-01-04T08:52:31Z,"> Could you share your test code? You just shared your struct code only, it doesn't contain test data, and we don't know how you create fury/kryo, nor how you use them for serialization

you can clone the code from there
https://github.com/jiangmin168168/jim-serialization-test","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZO6J6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1994,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZQw0p,fury,2571308329,1994,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-04T13:41:10Z,2025-01-04T13:41:10Z,"For benchmark work, you shoud warm it first. Fury will generate code, and for the performance of serialization will be a little slower since jit compilation didn't finish.

 If you use jmh to test, you will find out fury is 4x faster than kryo:
```java
package jim.serialization.core;


import jim.serialization.core.codec.FurySerializeUtil;
import jim.serialization.core.codec.NeoRedisValueCodecHelper;
import jim.serialization.core.enums.RedisCodecType;
import jim.serialization.core.model.NeoSerializerModel;
import org.openjdk.jmh.Main;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.CompilerControl;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.infra.Blackhole;

import java.io.IOException;

import static jim.serialization.core.RunTest.createModel;

@BenchmarkMode(Mode.Throughput)
@CompilerControl(value = CompilerControl.Mode.INLINE)
public class Benchmark {
  static NeoSerializerModel serializerModel;
  static {
    serializerModel = createModel();
    FurySerializeUtil.registerClass(NeoSerializerModel.class);
  }

  @org.openjdk.jmh.annotations.Benchmark
  public Object benchmarkKryo(Blackhole blackhole) {
    byte[] tmpBytes = NeoRedisValueCodecHelper.encodeToBytes(serializerModel, RedisCodecType.KRYO);
    return NeoRedisValueCodecHelper.decodeFromBytes(tmpBytes, RedisCodecType.KRYO, NeoSerializerModel.class);
  }

  @org.openjdk.jmh.annotations.Benchmark
  public Object benchmarkFury(Blackhole blackhole) {
    byte[] tmpBytes = NeoRedisValueCodecHelper.encodeToBytes(serializerModel, RedisCodecType.FURY);
    return NeoRedisValueCodecHelper.decodeFromBytes(tmpBytes, RedisCodecType.FURY, NeoSerializerModel.class);
  }

  public static void main(String[] args) throws IOException {
    if (args.length == 0) {
      String commandLine =
        "" -f 1 -wi 5 -i 10 -t 1 -w 2s -r 2s -rf csv "";
      System.out.println(commandLine);
      args = commandLine.split("" "");
    }
    Main.main(args);
  }
}

```

```java
Benchmark                 Mode  Cnt       Score       Error  Units
Benchmark.benchmarkFury  thrpt   10  249240.339 ± 47699.519  ops/s
Benchmark.benchmarkKryo  thrpt   10   70397.901 ±  9909.524  ops/s
```
![image](https://github.com/user-attachments/assets/ebec7c1d-56db-45eb-8152-45dd33cccd12)
","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ZQw0p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/1998,https://api.github.com/repos/apache/fury/issues/1998,fury,2774621612,1998,[Java] Deserializing one pojo into another type,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2025-01-08T08:15:12Z,2025-01-18T11:45:40Z,"### Feature Request

Continuing the discussion in https://github.com/apache/fury/issues/1972#issuecomment-2569043551, we need to support deserializing one pojo into another type without the need to register class

### Is your feature request related to a problem? Please describe

#1972

### Describe the solution you'd like

## Step1 Extend ClassDef to replace type
```
  /**
   * Return a new {@link ClassDef} by replacing {@code definedClass} of all fields and current {@link ClassSpec} in hierarchy 
   * from {@code cls} into {@code targetCls}.
   */
  public ClassDef replace(Class<?> cls, Class<?> targetCls) {

  }
```

## Step2 

- Extend ClassResolver with a new readClassInfoWithMetaShare method with passed deserialized type
- The `readClassInfoWithMetaShare` should return the original `ClassDef` first, then invoke `ClassDef#replace` to return a new ClassDef
- Use that new ClassDef to create a new Deserializer to deserialize the data into passed deserialized type


### Describe alternatives you've considered

_No response_

### Additional context

#1996","{""url"": ""https://api.github.com/repos/apache/fury/issues/1998/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Zmpfc,fury,2577045468,1998,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-08T08:26:29Z,2025-01-08T08:26:29Z,cc @orisgarno ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6Zmpfc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6afFna,fury,2591840730,1998,NA,orisgarno,42269241,,,NA,2025-01-15T07:38:39Z,2025-01-15T07:38:39Z,will start this in few days,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6afFna/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a88kN,fury,2599667981,1998,NA,orisgarno,42269241,,,NA,2025-01-18T10:50:37Z,2025-01-18T10:50:37Z,"@chaokunyang im currenty working on it.
but do you have any idea why we need the original class(cls) ```public ClassDef replace(Class<?> cls, Class<?> targetCls)```?
we can get from the classid from metashare? or do i miss something here?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a88kN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/1998,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a9AT3,fury,2599683319,1998,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-18T11:45:07Z,2025-01-18T11:45:07Z,"We don't need the original class, we could add a method like `replaceRootClassTo(Class <?> cls)`  ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a9AT3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2000,https://api.github.com/repos/apache/fury/issues/2000,fury,2775400979,2000,[Nodejs] npm install failed on CI,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,CLOSED,2025-01-08T13:28:56Z,2025-01-09T11:49:56Z,"### Search before asking

- [X] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

main

### Component(s)

JavaScript

### Minimal reproduce step

https://github.com/apache/fury/actions/runs/12671304833/job/35312782636?pr=1999

### What did you expect to see?

no error

### What did you see instead?

![image](https://github.com/user-attachments/assets/c1d9a84c-7698-4b4f-b653-35ae46a6bc3c)


### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2000/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2005,https://api.github.com/repos/apache/fury/issues/2005,fury,2783515131,2005,"[Java] deserialize object,error 'A cannot be cast to class B' occurred",yyjyc,49831401,,,OPEN,2025-01-13T10:02:51Z,2025-01-14T14:39:57Z,"### Question

I use fury in my projects, in one of the projects i serialize the object of ProductPO.class where fury is created like ""furySerializer"" in following code, in the other project i deseralize the byte[] using fury like “furyDeSerializer1” in following code.
however，when i deseralize the byte[]，an error occurred and made me confused：
```
java.lang.ClassCastException: class ...RateDetailPO cannot be cast to class ...ProductPO (...RateDetailPO and ...ProductPO are in unnamed module of loader 'app')
	at ...FuryTestV2.test1(FuryTestV2.java:73)
	at ...main(FuryTestV2.java:63)
```
my code is like:

```
public class FuryTestV2{
    private static ThreadSafeFury furySerializer = null;
    private static ThreadSafeFury furyDeSerializer1 = null;
    private static ThreadSafeFury furyDeSerializer2 = null;
    static {
        furySerializer = new ThreadLocalFury(classLoader -> {
            Fury f = Fury.builder().withCompatibleMode(CompatibleMode.COMPATIBLE).withLanguage(Language.JAVA).withClassLoader(classLoader)
                    .withDeserializeNonexistentClass(true).build();
            f.register(ProductPO.class);
            return f;
        });

        furyDeSerializer1 = new ThreadLocalFury(classLoader -> {
            Fury f = Fury.builder().withCompatibleMode(CompatibleMode.COMPATIBLE).withLanguage(Language.JAVA).withClassLoader(classLoader)
                    .withDeserializeNonexistentClass(true).build();
            f.register(RateDetailPO.class);
            f.register(PersonRulePO.class);
            f.register(DailyInfoPO.class);
            f.register(DailyInfoList.class);
            f.register(GregorianCalendar.class);
            f.register(com.ctrip.hotel.productsearchfilter.ProductPO.class);
            return f;
        });

        furyDeSerializer2 = new ThreadLocalFury(classLoader -> {
            Fury f = Fury.builder().withCompatibleMode(CompatibleMode.COMPATIBLE).withLanguage(Language.JAVA).withClassLoader(classLoader)
                    .withDeserializeNonexistentClass(true).build();
            f.register(com.ctrip.hotel.productsearchfilter.ProductPO.class);
            f.register(RateDetailPO.class);
            f.register(PersonRulePO.class);
            f.register(DailyInfoPO.class);
            f.register(DailyInfoList.class);
            f.register(GregorianCalendar.class);
            return f;
        });
    }

    public static void main(String[] args) {
        // 构建序列化的对象
        ProductPO productPO = createProductPO();
        // 序列化
        System.out.println(""test1:"" + test1(productPO)); // false
        System.out.println(""test2:"" + test2(productPO)); // true

    }

    private static boolean test1(ProductPO productPO) {
        try {
            // 序列化
            byte[] serialize = furySerializer.serialize(productPO);
            // 反序列化
            com.ctrip.hotel.productsearchfilter.ProductPO result = (com.ctrip.hotel.productsearchfilter.ProductPO) furyDeSerializer1.deserialize(serialize);
            System.out.println(SSJsonSerializerUtils.serialize(result));
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
    private static boolean test2(ProductPO productPO) {
        try {
            // 序列化
            byte[] serialize = furySerializer.serialize(productPO);
            // 反序列化
            com.ctrip.hotel.productsearchfilter.ProductPO result = (com.ctrip.hotel.productsearchfilter.ProductPO) furyDeSerializer2.deserialize(serialize);
            System.out.println(SSJsonSerializerUtils.serialize(result));
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static ProductPO createProductPO() {
        ProductPO productPO = new ProductPO();
        productPO.setProductId(1112324L);
        productPO.setHotelId(1234);
        productPO.setMasterHotelId(1235);
        productPO.setBasicRoomId(54435);
        productPO.setMasterBasicRoomId(6234);
        productPO.setRateCodeId(564332);
        productPO.setVendorId(6564);
        productPO.setRoomClass(6563423525L);
        productPO.setPerson(5);
        productPO.setResourceType(3);
        productPO.setPromoteRoomType(true);
        return productPO;
    }

}
```
","{""url"": ""https://api.github.com/repos/apache/fury/issues/2005/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2005,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aT8Tt,fury,2588919021,2005,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-14T04:25:28Z,2025-01-14T04:25:28Z,"Hi @yyjyc , you need to make class registration consistent between serialization and deserialization, otherwise you will get class clast exception. With inconsistent class registration order, one class on serialization will be mapped to another class in deserialization","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aT8Tt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2005,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aUTI2,fury,2589012534,2005,NA,yyjyc,49831401,,,NA,2025-01-14T05:06:04Z,2025-01-14T05:06:04Z,"@chaokunyang Thank you for your reply. I register **ProductPO.class** when serialization,  register RateDetailPO.class、PersonRulePO.class、DailyInfoPO.class、DailyInfoList.class、GregorianCalendar.class、**com.ctrip.hotel.productsearchfilter.ProductPO.class** when deserialization.

**ProductPO.class** is the same as **com.ctrip.hotel.productsearchfilter.ProductPO.class** except for the package name. 

I serialize a ProductPO object but get a RateDetailPO object, then cause the exception like 'class ...RateDetailPO cannot be cast to class ...ProductPO'. 

so，i have two questions:
1.package name must keep same between serialization and deserialization？
2.why i got a RateDetailPO object by deserialization ? I thought i would get a **ProductPO** object, even though ClassCastException may still occur like 'class **ProductPO** cannot be cast to class **com.ctrip.hotel.productsearchfilter.ProductPO**'","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aUTI2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2005,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aYdW8,fury,2590102972,2005,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-14T14:39:56Z,2025-01-14T14:39:56Z,Seems it's same issue as https://github.com/apache/fury/issues/1972,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6aYdW8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2006,https://api.github.com/repos/apache/fury/issues/2006,fury,2786126155,2006,[Question] Is there any guide to how to use Fury on Flink?,JiangHeng12138,33312949,Jiangh,,CLOSED,2025-01-14T03:21:24Z,2025-01-30T06:26:55Z,"### Question

Is there any guide to how to use Fury on Flink?","{""url"": ""https://api.github.com/repos/apache/fury/issues/2006/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2006,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bJHKG,fury,2602857094,2006,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-20T16:35:49Z,2025-01-20T16:35:49Z,"This will needs to change flink source code, we don't have such guide currently.

Or you can add a map operator which serialize data into binary using fury before sending data to downstream and adding a map operator at downstream to deserialize binary into object using fury","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bJHKG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2006,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cYUe2,fury,2623621046,2006,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-30T06:26:55Z,2025-01-30T06:26:55Z,Let's discuss it in #2015 ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cYUe2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2009,https://api.github.com/repos/apache/fury/issues/2009,fury,2794732023,2009,How to upgrade system after updated entity classes ,AprilWind123,90014036,,,OPEN,2025-01-17T07:01:56Z,2025-02-07T07:19:09Z,"### Search before asking

- [x] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

对象缓存到 redis 了，然后我新增了一个字段，就没办法反序列化了

### Component(s)

Java

### Minimal reproduce step

如果系统修改了实体类，更新系统的时候，就需要统一删除缓存

### What did you expect to see?

确实是个大问题，代表着只能停机更新系统，然后清除缓存

### What did you see instead?

如果是大项目的话，显然不能这样做

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2009/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2009,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a3Yxf,fury,2598210655,2009,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-17T11:59:38Z,2025-01-17T11:59:38Z,"Please refer [this](https://fury.apache.org/docs/guide/java_object_graph_guide#furybuilder--options) document to set compatible mode.

Fury compatible Mode supports deserialize classes with inconsistent schema. i.e. you can update entity class like adding/deleting fields, and fury can still succeed in deserializing data .","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6a3Yxf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2009,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6de4Mm,fury,2642117414,2009,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-07T07:19:08Z,2025-02-07T07:19:08Z,"FYI, We have s separate section https://fury.apache.org/docs/guide/java_object_graph_guide#handling-class-schema-evolution-in-serialization for class schema changes @AprilWind123 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6de4Mm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2011,https://api.github.com/repos/apache/fury/issues/2011,fury,2797459579,2011,本地compile发现Lombok不起作用,LouisLou2,113110433,Leo,,CLOSED,2025-01-19T06:30:36Z,2025-01-20T09:35:42Z,"### Search before asking

- [x] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

依据[development](https://fury.apache.org/docs/guide/development)进行本地构建,
从错误报告推测是lombok没有起作用
环境：
OpenJDK23
Ubuntu24.04.1
Maven 3.8.7
IntelliJ IDEA 2024.3.2 (Ultimate Edition)

### Component(s)

Java

### Minimal reproduce step

just `mvn clean compile -DskipTests`

### What did you expect to see?

success

### What did you see instead?

出现错误：
```
(base) leo@leo-dev:~/IdeaProjects/fury/java$ mvn clean compile -DskipTests
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for org.apache.fury:fury-testsuite:jar:0.10.0-SNAPSHOT
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.fury:fury-core:jar -> version ${project.version} vs 0.10.0-SNAPSHOT @ line 114, column 19
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Fury Project Parent POM                                            [pom]
[INFO] fury-test-core                                                     [jar]
[INFO] fury-core                                                          [jar]
[INFO] fury-format                                                        [jar]
[INFO] fury-testsuite                                                     [jar]
[INFO] 
[INFO] --------------------< org.apache.fury:fury-parent >---------------------
[INFO] Building Fury Project Parent POM 0.10.0-SNAPSHOT                   [1/5]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:3.2.0:clean (default-clean) @ fury-parent ---
[INFO] Deleting /home/leo/IdeaProjects/fury/java/target
[INFO] 
[INFO] --- maven-enforcer-plugin:3.1.0:enforce (enforce-maven-version) @ fury-parent ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.1.0:enforce (enforce-java-version) @ fury-parent ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.7.0:process (process-resource-bundles) @ fury-parent ---
[INFO] Preparing remote bundle org.apache:apache-jar-resource-bundle:1.4
[INFO] Copying 3 resources from 1 bundle.
[INFO] 
[INFO] -------------------< org.apache.fury:fury-test-core >-------------------
[INFO] Building fury-test-core 0.10.0-SNAPSHOT                            [2/5]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:3.2.0:clean (default-clean) @ fury-test-core ---
[INFO] Deleting /home/leo/IdeaProjects/fury/java/fury-test-core/target
[INFO] 
[INFO] --- maven-enforcer-plugin:3.1.0:enforce (enforce-maven-version) @ fury-test-core ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.1.0:enforce (enforce-java-version) @ fury-test-core ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.7.0:process (process-resource-bundles) @ fury-test-core ---
[INFO] Preparing remote bundle org.apache:apache-jar-resource-bundle:1.4
[INFO] Copying 3 resources from 1 bundle.
[INFO] 
[INFO] --- maven-resources-plugin:3.3.0:resources (default-resources) @ fury-test-core ---
[INFO] Copying 1 resource
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ fury-test-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 11 source files to /home/leo/IdeaProjects/fury/java/fury-test-core/target/classes
[INFO] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/Struct.java: /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/Struct.java使用或覆盖了已过时的 API。
[INFO] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/Struct.java: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
[INFO] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/CollectionFields.java: /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/CollectionFields.java使用了未经检查或不安全的操作。
[INFO] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/CollectionFields.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[62,12] 无法将类 org.apache.fury.test.bean.AccessBeans.PriClass中的构造器 PrivateClass应用到给定类型;
  需要: 没有参数
  找到:    int,int,int
  原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[66,12] 无法将类 org.apache.fury.test.bean.AccessBeans.FinivateClass中的构造器 FinalPrivateClass应用到给定类型;
  需要: 没有参数
  找到:    int,int,int
  原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[70,12] 无法将类 org.apache.fury.test.bean.AccessBeans.DefLevelClass中的构造器 DefaultLevelClass应用到给定类型;
  需要: 没有参数
  找到:    int,int,int
  原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[74,12] 无法将类 org.apache.fury.test.bean.AccessBeans.Publass中的构造器 PublicClass应用到给定类型;
  需要: 没有参数
  找到:    int,int,int,org.apache.fury.test.bean.AccessBeans.DefaultLevelClass,org.apache.fury.test.bean.AccessBeans.PrivateClass,org.apache.fury.test.bean.AccessBeans.FinPrivateClass
  原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[59,10] 找不到符号
  符号:   方法 setF1(short)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[60,10] 找不到符号
  符号:   方法 setF2(int)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[61,10] 找不到符号
  符号:   方法 setF3(long)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[62,10] 找不到符号
  符号:   方法 setF4(float)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[63,10] 找不到符号
  符号:   方法 setF5(double)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[65,10] 找不到符号
  符号:   方法 setF12(boolean)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[66,10] 找不到符号
  符号:   方法 setBeanB(org.apache.fury.test.bean.BeanB)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[68,10] 找不到符号
  符号:   方法 setF16(java.math.BigDecimal)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[69,10] 找不到符号
  符号:   方法 setF17(java.lang.String)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[70,10] 找不到符号
  符号:   方法 setLongStringField(java.lang.String)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[83,14] 找不到符号
  符号:   方法 setDoubleList(java.util.List<java.lang.Double>)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[94,14] 找不到符号
  符号:   方法 setDouble2DList(java.util.List<java.util.List<java.lang.Double>>)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[101,14] 找不到符号
  符号:   方法 setIntArray(int[])
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[111,14] 找不到符号
  符号:   方法 setInt2DArray(int[][])
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[118,14] 找不到符号
  符号:   方法 setBeanBList(java.util.List<org.apache.fury.test.bean.BeanB>)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[125,14] 找不到符号
  符号:   方法 setStringBeanBMap(java.util.Map<java.lang.String,org.apache.fury.test.bean.BeanB>)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[132,14] 找不到符号
  符号:   方法 setBeanBIterable(java.util.List<org.apache.fury.test.bean.BeanB>)
  位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[42,10] 找不到符号
  符号:   方法 setF1(short)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[43,10] 找不到符号
  符号:   方法 setF2(int)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[44,10] 找不到符号
  符号:   方法 setF3(long)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[45,10] 找不到符号
  符号:   方法 setF4(float)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[46,10] 找不到符号
  符号:   方法 setF5(double)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[54,14] 找不到符号
  符号:   方法 setIntArr(int[])
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[61,14] 找不到符号
  符号:   方法 setIntList(java.util.List<java.lang.Integer>)
  位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[INFO] 28 errors 
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Fury Project Parent POM 0.10.0-SNAPSHOT:
[INFO] 
[INFO] Fury Project Parent POM ............................ SUCCESS [  0.423 s]
[INFO] fury-test-core ..................................... FAILURE [  0.731 s]
[INFO] fury-core .......................................... SKIPPED
[INFO] fury-format ........................................ SKIPPED
[INFO] fury-testsuite ..................................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.242 s
[INFO] Finished at: 2025-01-19T14:21:19+08:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project fury-test-core: Compilation failure: Compilation failure: 
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[62,12] 无法将类 org.apache.fury.test.bean.AccessBeans.PriClass中的构造器 PrivateClass应用到给定类型;
[ERROR]   需要: 没有参数
[ERROR]   找到:    int,int,int
[ERROR]   原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[66,12] 无法将类 org.apache.fury.test.bean.AccessBeans.FinivateClass中的构造器 FinalPrivateClass应用到给定类型;
[ERROR]   需要: 没有参数
[ERROR]   找到:    int,int,int
[ERROR]   原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[70,12] 无法将类 org.apache.fury.test.bean.AccessBeans.DefLevelClass中的构造器 DefaultLevelClass应用到给定类型;
[ERROR]   需要: 没有参数
[ERROR]   找到:    int,int,int
[ERROR]   原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/AccessBeans.java:[74,12] 无法将类 org.apache.fury.test.bean.AccessBeans.Publass中的构造器 PublicClass应用到给定类型;
[ERROR]   需要: 没有参数
[ERROR]   找到:    int,int,int,org.apache.fury.test.bean.AccessBeans.DefaultLevelClass,org.apache.fury.test.bean.AccessBeans.PrivateClass,org.apache.fury.test.bean.AccessBns.FinalPrivateClass
[ERROR]   原因: 实际参数列表和形式参数列表长度不同
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[59,10] 找不到符号
[ERROR]   符号:   方法 setF1(short)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[60,10] 找不到符号
[ERROR]   符号:   方法 setF2(int)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[61,10] 找不到符号
[ERROR]   符号:   方法 setF3(long)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[62,10] 找不到符号
[ERROR]   符号:   方法 setF4(float)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[63,10] 找不到符号
[ERROR]   符号:   方法 setF5(double)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[65,10] 找不到符号
[ERROR]   符号:   方法 setF12(boolean)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[66,10] 找不到符号
[ERROR]   符号:   方法 setBeanB(org.apache.fury.test.bean.BeanB)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[68,10] 找不到符号
[ERROR]   符号:   方法 setF16(java.math.BigDecimal)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[69,10] 找不到符号
[ERROR]   符号:   方法 setF17(java.lang.String)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[70,10] 找不到符号
[ERROR]   符号:   方法 setLongStringField(java.lang.String)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[83,14] 找不到符号
[ERROR]   符号:   方法 setDoubleList(java.util.List<java.lang.Double>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[94,14] 找不到符号
[ERROR]   符号:   方法 setDouble2DList(java.util.List<java.util.List<java.lang.Double>>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[101,14] 找不到符号
[ERROR]   符号:   方法 setIntArray(int[])
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[111,14] 找不到符号
[ERROR]   符号:   方法 setInt2DArray(int[][])
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[118,14] 找不到符号
[ERROR]   符号:   方法 setBeanBList(java.util.List<org.apache.fury.test.bean.BeanB>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[125,14] 找不到符号
[ERROR]   符号:   方法 setStringBeanBMap(java.util.Map<java.lang.String,org.apache.fury.test.bean.BeanB>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanA.java:[132,14] 找不到符号
[ERROR]   符号:   方法 setBeanBIterable(java.util.List<org.apache.fury.test.bean.BeanB>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanA的变量 beanA
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[42,10] 找不到符号
[ERROR]   符号:   方法 setF1(short)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[43,10] 找不到符号
[ERROR]   符号:   方法 setF2(int)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[44,10] 找不到符号
[ERROR]   符号:   方法 setF3(long)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[45,10] 找不到符号
[ERROR]   符号:   方法 setF4(float)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[46,10] 找不到符号
[ERROR]   符号:   方法 setF5(double)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[54,14] 找不到符号
[ERROR]   符号:   方法 setIntArr(int[])
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] /home/leo/IdeaProjects/fury/java/fury-test-core/src/main/java/org/apache/fury/test/bean/BeanB.java:[61,14] 找不到符号
[ERROR]   符号:   方法 setIntList(java.util.List<java.lang.Integer>)
[ERROR]   位置: 类型为org.apache.fury.test.bean.BeanB的变量 beanB
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <args> -rf :fury-test-core
```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2011/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2011,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bA_RU,fury,2600727636,2011,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-19T06:38:29Z,2025-01-19T06:38:29Z,"Hi @LouisLou2 , do you enable annotation processing on intellj idea?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bA_RU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2011,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFade,fury,2601887582,2011,NA,LouisLou2,113110433,Leo,,NA,2025-01-20T09:35:17Z,2025-01-20T09:35:17Z,"> Hi [@LouisLou2](https://github.com/LouisLou2) , do you enable annotation processing on intellj idea?
Actually I did, with Lombok plugin installed.

And, After I click ""File->Invalidate All Caches"" and restart IDEA the lombok problem disappeared, I believe it must be all about intellj idea. ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFade/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/2013,fury,2797706831,2013,[C++] Use SIMD to retrofit and optimize furycpp,pandalee99,46820719,PAN,,OPEN,2025-01-19T16:18:45Z,2025-01-23T16:19:20Z,"### Feature Request

Maybe we can try some portable SIMD libraries, like
https://github.com/xtensor-stack/xsimd
https://github.com/google/highway
.. instead of handwritten intrinsic calls.

because `xsimd` is also often used on `apache arrow` to improve data processing, and it works very well.



### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/2013/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bBwZe,fury,2600928862,2013,NA,pandalee99,46820719,PAN,,NA,2025-01-19T16:18:59Z,2025-01-19T16:18:59Z,"Then, we can continue to use Project [simdutf](https://github.com/simdutf/simdutf) to improve the original logic.
relate #2002 #1732 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bBwZe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFMqE,fury,2601831044,2013,NA,pandalee99,46820719,PAN,,NA,2025-01-20T09:10:45Z,2025-01-20T09:10:45Z,"<img width=""396"" alt=""Image"" src=""https://github.com/user-attachments/assets/c52acd36-e0ff-4c08-afe2-8507c1e21768"" />

About [simdutf](https://github.com/simdutf/simdutf) then, I used `Single-header version` and did a simple test

``` c++
std::string utf16ToUtf8WithSIMDUTF(const std::u16string &utf16) {
  // Get the length of the input UTF-16LE string
  size_t utf16_length = utf16.length();
  // Calculate the number of bytes required to convert UTF-16LE to UTF-8
  size_t utf8_length = simdutf::utf8_length_from_utf16le(reinterpret_cast<const char16_t *>(utf16.data()), utf16_length);
  // Create a string to store the UTF-8 result, initialized to the specified length
  std::string utf8_result(utf8_length, '\0');
  // Call convert_utf16le_to_utf8 to perform the conversion
  size_t written_bytes = simdutf::convert_utf16le_to_utf8(reinterpret_cast<const char16_t *>(utf16.data()), utf16_length, utf8_result.data());
  // Resize the string to match the actual number of written bytes
  utf8_result.resize(written_bytes);
  return utf8_result;
}
```

The operation efficiency is not as efficient","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFMqE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFNdE,fury,2601834308,2013,NA,pandalee99,46820719,PAN,,NA,2025-01-20T09:12:09Z,2025-01-20T09:12:09Z,cc @chaokunyang ,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFNdE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFYaq,fury,2601879210,2013,NA,PragmaTwice,20042607,Twice,,NA,2025-01-20T09:31:43Z,2025-01-20T09:31:43Z,Could you attach a benchmark? e.g. in https://quick-bench.com/.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFYaq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFqYl,fury,2601952805,2013,NA,pandalee99,46820719,PAN,,NA,2025-01-20T10:01:24Z,2025-01-20T10:01:24Z,"> Could you attach a benchmark? e.g. in https://quick-bench.com/.

sure, i will implement it later.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bFqYl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2013,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6blcfZ,fury,2610284505,2013,NA,pandalee99,46820719,PAN,,NA,2025-01-23T16:19:18Z,2025-01-23T16:19:18Z,"I tried to carry out a series of rigorous tests, and finally came to this result.

<img width=""447"" alt=""Image"" src=""https://github.com/user-attachments/assets/aab9f851-7691-4cb0-b374-da8792e1f0a2"" />

'BM_SIMD_UTF', also known as simdutf, does seem to perform better. I also feel a little sorry for the lack of rigor in the previous test.

Thank you very much for yours guidance. @PragmaTwice @chaokunyang 
 I will implement the benchmark module in furycpp to facilitate the later functional testing.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6blcfZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2014,https://api.github.com/repos/apache/fury/issues/2014,fury,2798731514,2014,Are furygo and furyJava not compatible?,LouisLou2,113110433,Leo,,OPEN,2025-01-20T09:40:50Z,2025-01-20T15:29:58Z,"### Search before asking

- [x] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

I'm using XLANG mode on both ends, but go still doesn't deserialize java serialized objects correctly!


### Component(s)

Go

### Minimal reproduce step

here is my trail. and please Let me know if I'm making some kind of cheap mistake.

## My First Trial

**java**
```java
public class Main {
  public static void main(String[] args) {
    Fury fury = Fury.builder()
      .withLanguage(Language.XLANG)
      .withRefTracking(true)
      .build();

    Map<String, Double> map = new HashMap<>();
    map.put(""key"", 1.0);
    map.put(""key2"", 2.0);
    byte [] bytes = fury.serialize(map);

    // save to file
    try (FileOutputStream fos = new FileOutputStream(""sample_map.fury"")) {
      fos.write(bytes);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
```

**go**
```go
func deserialize() {
	bytes, err := os.ReadFile(""./res/sample_map.fury"")
	if err != nil {
		fmt.Println(""Error reading file:"", err)
		return
	}
	fury := fury2.NewFury(true)
	var newValue interface{}
	if err := fury.Unmarshal(bytes, &newValue); err != nil {
		panic(err)
	}
	fmt.Println(newValue)
}
```

The result is that bytes can be successfully deserialized in java but gives a strange error in go.

**go console**
```
GOROOT=/usr/lib/go-1.22 #gosetup
GOPATH=/home/leo/go #gosetup
/usr/lib/go-1.22/bin/go build -o /home/leo/.cache/JetBrains/GoLand2024.3/tmp/GoLand/___go_build_github_com_apache_fury_go_fury_main github.com/apache/fury/go/fury/main #gosetup
/home/leo/.cache/JetBrains/GoLand2024.3/tmp/GoLand/___go_build_github_com_apache_fury_go_fury_main #gosetup
panic: type of id 50 not supported, supported types: map[1:bool 2:uint8 3:int8 5:int16 7:int32 9:int64 11:float32 12:float64 13:string 14:[]uint8 16:fury.Date 18:time.Time 25:[]interface {} 30:map[interface {}]interface {} 257:fury.GenericSet 258:[]bool 259:[]int16 260:[]int32 261:[]int64 262:[]float32 263:[]float64 264:[]string]

goroutine 1 [running]:
main.deserialize()
	/home/leo/projects/furygo/main/main.go:54 +0x185
main.main()
	/home/leo/projects/furygo/main/main.go:37 +0xf

Process finished with the exit code 2
```

## Second Trial

Next I went to discover the difference in the logic of the deserialization code between the two.

And then realized that in the go code there is one more part than in the java

**go**
```go
buf.ReadInt32() // nativeObjectsStartOffset
nativeObjectsSize := buf.ReadInt32()
if f.peerLanguage == GO {
	if nativeObjectsSize > 0 {
		return fmt.Errorf(""native serialization for golang is not supported currently"")
	}
}
return f.ReadReferencable(buf, reflect.ValueOf(v).Elem())
```

**java**
```java
obj = xreadRef(buffer);
```

I tried commenting out the code that reads an additional 4+4=8 bytes and then re-running the go code, however, a new error occurs

```bash
GOROOT=/usr/lib/go-1.22 #gosetup
GOPATH=/home/leo/go #gosetup
/usr/lib/go-1.22/bin/go build -o /home/leo/.cache/JetBrains/GoLand2024.3/tmp/GoLand/___go_build_github_com_apache_fury_go_fury_main github.com/apache/fury/go/fury/main #gosetup
/home/leo/.cache/JetBrains/GoLand2024.3/tmp/GoLand/___go_build_github_com_apache_fury_go_fury_main #gosetup
panic: type of id 29 not supported, supported types: map[1:bool 2:uint8 3:int8 5:int16 7:int32 9:int64 11:float32 12:float64 13:string 14:[]uint8 16:fury.Date 18:time.Time 25:[]interface {} 30:map[interface {}]interface {} 257:fury.GenericSet 258:[]bool 259:[]int16 260:[]int32 261:[]int64 262:[]float32 263:[]float64 264:[]string]

goroutine 1 [running]:
main.deserialize()
	/home/leo/projects/furygo/main/main.go:54 +0x185
main.main()
	/home/leo/projects/furygo/main/main.go:37 +0xf

Process finished with the exit code 2
```

I can roughly see that it's a type mismatch error, and then I went and compared the type id declared in furygo's `type.go` with the definition in the guide([xlang_type_mapping](https://fury.apache.org/docs/guide/xlang_type_mapping)), and there seems to be some discrepancies, and I'm a little confused about these conflicts, or am I using it incorrectly?

### What did you expect to see?

furygo deserialized object successfully

### What did you see instead?

unsupported type error

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2014/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2014,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bIj03,fury,2602712375,2014,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-20T15:29:57Z,2025-01-20T15:29:57Z,"Hi @LouisLou2 , which fury java version are you using? We are refactoring the xlang serialization spec. The first part of Fury java has been finished in #1690 , but the golang implementation has not be finished. Is this related to your issue?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bIj03/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2015,https://api.github.com/repos/apache/fury/issues/2015,fury,2798876816,2015,[Java]Best practice with Apache/Spark,jayhan94,194190421,Jay Han,feynmanhan94@gmail.com,OPEN,2025-01-20T10:36:59Z,2025-02-02T09:15:14Z,"### Feature Request

Is there any best practice with apache/spark? Will the community implement such a module?

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/2015/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2015,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cYUSM,fury,2623620236,2015,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-30T06:26:15Z,2025-01-30T06:26:15Z,"Hi @jayhan94 , we don't have such documents currently. A better fury integration with spark/flink would need to change the source code of serialization module in spark/flink, which is beyond the scope of this project. Maybe in future we can submit several proposal to spark/flink communities.

Currently, if you want to use fury in spark/flink, you can update your driver program to add several chained(narrow dependency in spark) serialization/deserialization operators. 

Here is a simple spark rdd example:
```scala
val lines = sc.textFile(""data.txt"")
val structSet = lines.map(s => Json.parse(s, Struct.class))
kvset = structSet.map(s => (s.key, fury.serialize(s)))
kvset.groupByKey().map(t => (t._1, fury.deserialize(t._2.first))).collect.foreach(println)
```

Flink program will be similiar:
```java
DataStream<Struct> dataStream = xxxstream.map(s -> Json.parse(s, Struct.class));
DataStream<byte[]> byteStream = dataStream.map(s -> json.serialize(s));
byteStream.rebalance().map(bytes -> (Struct)fury.deserialize(bytes));
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cYUSM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2015,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ctxFM,fury,2629243212,2015,NA,jayhan94,194190421,Jay Han,feynmanhan94@gmail.com,NA,2025-02-02T04:57:02Z,2025-02-02T04:57:02Z,@chaokunyang Thanks for your reply. I don't learn about the serializer of rdd. I meant to implement spark.serializer based on fury which may be helpful to the shuffle process just like KryoSerializer.,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6ctxFM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2019,https://api.github.com/repos/apache/fury/issues/2019,fury,2802773971,2019,[Java][Format] Should Encoder work with ByteBuffer (via MemoryBuffer)?,stevenschlansker,129097,Steven Schlansker,,CLOSED,2025-01-21T20:44:07Z,2025-01-25T16:52:23Z,"### Feature Request

We are evaluating integrating Fury row format with a Kafka application. The Kafka deserializer provides a signature
```
T Deserializer.deserialize(String topic, Headers headers, ByteBuffer data)
```
In order to use this with either
```
T Encoder.decode(byte[])
T RowEncoder.fromRow(BinaryRow row)
```
some slightly awkward adaptation is necessary.

In the first case, the adaptation is simple and automatic by a default method, but costs copying your buffer into a `byte[]` unnecessarily.
In the second case, I was able to adapt using the implementation as an example, but it feels like it would be good for the framework to provide this out of the box:

```
    public kafka.Deserializer<Rec> deserializer() {
        final var schema = rowEncoder.schema();
        final var schemaHash = DataTypes.computeSchemaHash(schema);
        return new kafka.Deserializer<Rec>() {
            @Override
            public Rec deserialize(final String topic, final byte[] data) {
                // This case is easy
                return rowEncoder.decode(data);
            }

            @Override
            public Rec deserialize(final String topic, final Headers headers, final ByteBuffer data) {
                // This case... not so much
                final MemoryBuffer buffer = MemoryUtils.wrap(data);
                final long peerSchemaHash = buffer.readInt64();
                if (peerSchemaHash != schemaHash) {
                    throw new ClassNotCompatibleException(
                            String.format(
                                    ""Schema is not consistent, encoder schema is %s. ""
                                            + ""self/peer schema hash are %s/%s. ""
                                            + ""Please check writer schema."",
                                            schema, schemaHash, peerSchemaHash));
                }
                final BinaryRow row = new BinaryRow(schema);
                row.pointTo(buffer, buffer.readerIndex(), buffer.size());
                return rowEncoder.fromRow(row);
            }
        };
    }
```

### Is your feature request related to a problem? Please describe

For decode, a seemingly unnecessary byte[] copy could be avoided
For fromRow, some repeated low level code could be hidden inside the Fury framework

### Describe the solution you'd like

Add new methods:
```
Encoder.decode(MemoryBuffer buf)
RowEncoder.fromRow(MemoryBuffer buf)
```

It could be interesting to examine whether 
```
Encoder.encodeTo(T obj, MemoryBuffer buf)
```
is beneficial to add to avoid intermediate `byte[]` there too.

### Describe alternatives you've considered

_No response_

### Additional context

Thank you for your consideration! We hope to adopt Fury into our application if the prototyping works out.","{""url"": ""https://api.github.com/repos/apache/fury/issues/2019/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2019,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bzcq9,fury,2613955261,2019,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-25T12:46:32Z,2025-01-25T12:46:32Z,"Hi @stevenschlansker , thanks for bring up this issue. It's a good suggestion, I implemented in #2024","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bzcq9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/2021,fury,2808105757,2021,java.lang.ClassCastException: class scala.collection.immutable.HashMap cannot be cast to class scala.collection.Factory,davidnadeau,228949,,,CLOSED,2025-01-23T22:52:46Z,2025-02-05T20:42:02Z,"### Search before asking

- [x] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

0.9.0

### Component(s)

Other, Java

### Minimal reproduce step

I am trying to deserialize into the scala type: Map[String, String].

### What did you expect to see?

No error

### What did you see instead?

```
Failed to deserialize key:
* binary data *
due to exception: java.lang.ClassCastException: class scala.collection.immutable.HashMap cannot be cast to class scala.collection.Factory (scala.collection.immutable.HashMap and scala.collection.Factory are in unnamed module of loader 'app')""
```

### Anything Else?

This issue did not appear to be present in java jdk 17, but only when we upgraded to jdk 21. There are no errors with jdk 21 and fury 0.7.0.

In 0.9.0 i've started using the new Scala serializers 
```scala
import org.apache.fury.serializer.scala.ScalaSerializers
ScalaSerializers.registerSerializers(fury)
```

I think there is an issue with the scala serializers.

### Are you willing to submit a PR?

- [ ] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2021/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bqsnt,fury,2611661293,2021,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-24T05:54:11Z,2025-01-24T05:54:11Z,@davidnadeau  could you provide reproduction code?,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bqsnt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bvIxz,fury,2612825203,2021,NA,davidnadeau,228949,,,NA,2025-01-24T15:39:49Z,2025-01-24T15:39:49Z,"Hi @chaokunyang my fury config looks like:

```scala
  val fury = Fury
    .builder()
    .withScalaOptimizationEnabled(true)
    .requireClassRegistration(false)
    .withRefTracking(false)
    .buildThreadSafeFuryPool(Runtime.getRuntime.availableProcessors() * 2, Runtime.getRuntime.availableProcessors() * 2)

  ScalaSerializers.registerSerializers(fury)
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bvIxz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bvO_D,fury,2612850627,2021,NA,davidnadeau,228949,,,NA,2025-01-24T15:52:07Z,2025-01-24T15:52:07Z,"I am working to provide more details. I want to test 3 scenarios:
1. jdk 21 fury 0.9.0 fury_core dep
2. jdk 21 fury 0.9.0 fury_scala dep (no scala serializers)
3. jdk 21 fury 0.9.0 fury_scala dep + scala serializers

I will report back my findings. And try to provide a more detailed reproduction code, however I have a suspicion that it may be a thread race condition. Alongside the failures to deserialize I also saw other errors.

```
java.lang.ArrayIndexOutOfBoundsException
```
and
```
ERROR  ThreadPoolFury:84 [finagle/netty4-1-49] - null
java.lang.NullPointerException
```


 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bvO_D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bytyI,fury,2613763208,2021,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-01-25T03:52:10Z,2025-01-25T03:52:10Z,"Hi @davidnadeau , I tested HashMap with jdk 21, it still works:

```scala
val v = scala.collection.immutable.HashMap(""k1"" -> ""v1"", ""k2"" -> ""v2"")
fury.deserialize(fury.serialize(v)) shouldEqual v
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6bytyI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2021,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dPGGr,fury,2637980075,2021,NA,davidnadeau,228949,,,NA,2025-02-05T20:42:01Z,2025-02-05T20:42:01Z,"Thanks for checking @chaokunyang , I have not been able to reproduce this issue in my test environment. I'll close the ticket for now, and re-open it with more details if I find something interesting.","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dPGGr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2022,https://api.github.com/repos/apache/fury/issues/2022,fury,2809784675,2022,[C++] FuryCpp needs to add the benchmark module,pandalee99,46820719,PAN,,CLOSED,2025-01-24T15:56:59Z,2025-01-27T10:53:42Z,"### Feature Request

The lack of a benchmark module in FuryCpp leads to inaccurate performance testing.


This feature needs to be added to make the project more complete.

### Is your feature request related to a problem? Please describe

relate #2013 

### Describe the solution you'd like

I tried to do some things, such as extracting `benchmark.cc`, but it could have been further isolated.

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/2022/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2026,https://api.github.com/repos/apache/fury/issues/2026,fury,2811539470,2026,[Java] fast serialization path for String KV map,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,OPEN,2025-01-26T12:44:00Z,2025-02-08T01:01:15Z,"### Feature Request

`Map<String, String>` is very common in java, we can provide a fast serialization path for it to provide faster performance.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

Add a `StringMapSerialization` util class in `org.apache.fury.serializer.collection` package:
```java
class StringMapSerialization {
  /**
   * Write string chunk until there isn't any entry left.
   */
  public static void writeStringChunks(
    MemoryBuffer buffer,
    Entry<String, String> entry,
    Iterator<Entry<String, String>> iterator) {

  }
  /**
   * Write string chunk until there isn't any entry left or chunk size reached max value..
   */
  public static Entry<String, String> writeStringChunk(
    MemoryBuffer buffer,
    Entry<String, String> entry,
    Iterator<Entry<String, String>> iterator) {

  }

  /**
   * Write string chunk until next entry is not string type.
   */
  public static Entry writeChunk(
    MemoryBuffer buffer,
    Entry<String, String> entry,
    Iterator<Entry> iterator) {

  }

  /**
   * Read all string kv chunks and put it into map until all chunks are read.
   */
  public static void readChunks(
    MemoryBuffer buffer, Map<String, String> map, long size, int chunkHeader) {

  }

  public static int readChunk(
    MemoryBuffer buffer, Map<String, String> map, long size, int chunkHeader) {

  }
}

```


Add fast path in `AbstractMapSerializer` to forward implementation into `StringMapSerialization`

### Describe alternatives you've considered

_No response_

### Additional context

#2025 ","{""url"": ""https://api.github.com/repos/apache/fury/issues/2026/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2026,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dnkWS,fury,2644395410,2026,NA,jayhan94,194190421,Jay Han,feynmanhan94@gmail.com,NA,2025-02-08T01:01:14Z,2025-02-08T01:01:14Z,"Hi @chaokunyang , I'm interested in this issue and would like to try it. However, I'm unable to determine the key difference between the path of the `StringMapSerialization` and `AbstractMapSerializer`.  If we could declare the key type and value type, will it be as fast as `StringMapSerialization`?","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dnkWS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2031,https://api.github.com/repos/apache/fury/issues/2031,fury,2814559094,2031,[Java] Build a provider contains several fury config as a basic dataProvider for unit test and create a basic unit test use this dataProvider,Hen1ng,72974271,hn,,CLOSED,2025-01-28T03:49:39Z,2025-01-29T04:51:32Z,"### Feature Request

Create a comprehensive testcase that includes various branching conditions for map testing, covering all types of maps, and consolidate them using the same provider. This way, when testing, you only need to modify the configuration of one provider to run tests on all types of maps.

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/2031/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/2035,fury,2825824173,2035,[Python] pyfury0.9.0 installed from the source folder does not work properly,LouisLou2,113110433,Leo,,OPEN,2025-02-02T14:13:45Z,2025-02-03T11:31:29Z,"### Search before asking

- [x] I had searched in the [issues](https://github.com/apache/fury/issues) and found no similar issues.


### Version

OS:	`Ubuntu 24.04.1 LTS`

gcc
```bash
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Thread model: posix
gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04) 
```

Anaconda Env: 
name: `pyfury_env2`
version: `Python 3.9.21`
pip list:
```bash
(pyfury_env2) leo@leo-dev:~$ pip list
Package         Version     Editable project location
--------------- ----------- ------------------------------------
Bottleneck      1.4.2
cloudpickle     3.1.1
Cython          3.0.11
exceptiongroup  1.2.2
iniconfig       2.0.0
mkl_fft         1.3.11
mkl_random      1.2.8
mkl-service     2.4.0
mmh3            5.1.0
numexpr         2.10.1
numpy           1.26.4
packaging       24.2
pandas          2.2.3
pip             25.0
pluggy          1.5.0
pyarrow         14.0.0
pyfury          0.9.0       /home/leo/projects/fury-0.9.0/python
pytest          8.3.4
python-dateutil 2.9.0.post0
pytz            2024.1
setuptools      75.8.0
six             1.16.0
tomli           2.2.1
tzdata          2023.3
wheel           0.45.1

```
structure of `/home/leo/projects/fury-0.9.0/python`

```bash
(pyfury_env2) leo@leo-dev:~$ tree /home/leo/projects/fury-0.9.0/python
/home/leo/projects/fury-0.9.0/python
├── pyfury
│   ├── buffer.py
│   ├── codegen.py
│   ├── error.py
│   ├── format
│   │   ├── encoder.pxi
│   │   ├── encoder.py
│   │   ├── _format.pyx
│   │   ├── _format.so
│   │   ├── infer.py
│   │   ├── __init__.py
│   │   ├── row.pxi
│   │   ├── serializer.py
│   │   ├── tests
│   │   │   ├── __init__.py
│   │   │   ├── test_encoder.py
│   │   │   ├── test_infer.py
│   │   │   └── test_vectorized.py
│   │   └── vectorized.pxi
│   ├── _fury.py
│   ├── includes
│   │   ├── __init__.pxd
│   │   ├── libabsl.pxd
│   │   ├── libformat.pxd
│   │   └── libutil.pxd
│   ├── __init__.pxd
│   ├── __init__.py
│   ├── lib
│   │   ├── collection.py
│   │   ├── __init__.pxd
│   │   ├── __init__.py
│   │   ├── mmh3
│   │   │   ├── __init__.pxd
│   │   │   ├── __init__.py
│   │   │   ├── mmh3.pxd
│   │   │   ├── mmh3.pyx
│   │   │   ├── mmh3.so
│   │   │   └── __pycache__
│   │   │       ├── __init__.cpython-311.pyc
│   │   │       ├── __init__.cpython-38.pyc
│   │   │       └── __init__.cpython-39.pyc
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-311.pyc
│   │   │   ├── __init__.cpython-38.pyc
│   │   │   └── __init__.cpython-39.pyc
│   │   └── tests
│   │       ├── __init__.py
│   │       ├── test_collection.py
│   │       └── test_mmh3.py
│   ├── meta
│   │   ├── __init__.py
│   │   └── metastring.py
│   ├── __pycache__
│   │   ├── __init__.cpython-311.pyc
│   │   ├── __init__.cpython-38.pyc
│   │   └── __init__.cpython-39.pyc
│   ├── resolver.py
│   ├── _serialization.pyx
│   ├── _serialization.so
│   ├── _serializer.py
│   ├── serializer.py
│   ├── _struct.py
│   ├── tests
│   │   ├── benchmark.py
│   │   ├── core.py
│   │   ├── __init__.py
│   │   ├── profiling.py
│   │   ├── record.py
│   │   ├── test_buffer.py
│   │   ├── test_codegen.py
│   │   ├── test_cross_language.py
│   │   ├── test_metastring.py
│   │   ├── test_serializer.py
│   │   ├── test_struct.py
│   │   └── test_type.py
│   ├── type.py
│   ├── _util.pxd
│   ├── util.py
│   ├── _util.pyx
│   └── _util.so
├── pyfury.egg-info
│   ├── dependency_links.txt
│   ├── not-zip-safe
│   ├── PKG-INFO
│   ├── requires.txt
│   ├── SOURCES.txt
│   └── top_level.txt
├── README.md
└── setup.py

14 directories, 76 files

```



### Component(s)

Python

### Minimal reproduce step

```bash
cd /path/to/pyfury/python
pip install pyarrow==14.0.0 Cython wheel numpy==1.26.4 pytest
pip install -v -e .
```
No errors were encountered in the above steps

Trying to run the testing section gives a compilation error
`pytest -v -s .`

### What did you expect to see?

I expect to see test cases that should execute correctly, or at least need to be runnable

### What did you see instead?

```bash
(pyfury_env2) leo@leo-dev:~/projects/fury-0.9.0/python$ pytest -v -s .
=========================================================================== test session starts ===========================================================================
platform linux -- Python 3.9.21, pytest-8.3.4, pluggy-1.5.0 -- /home/leo/Toolset/lang/anaconda/envs/pyfury_env2/bin/python
cachedir: .pytest_cache
rootdir: /home/leo/projects/fury-0.9.0/python
collected 0 items / 12 errors                                                                                                                                             

================================================================================= ERRORS ==================================================================================
__________________________________________________________ ERROR collecting pyfury/format/tests/test_encoder.py ___________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/format/tests/test_encoder.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
___________________________________________________________ ERROR collecting pyfury/format/tests/test_infer.py ____________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/format/tests/test_infer.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
_________________________________________________________ ERROR collecting pyfury/format/tests/test_vectorized.py _________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/format/tests/test_vectorized.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
__________________________________________________________ ERROR collecting pyfury/lib/tests/test_collection.py ___________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/lib/tests/test_collection.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
_____________________________________________________________ ERROR collecting pyfury/lib/tests/test_mmh3.py ______________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/lib/tests/test_mmh3.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
______________________________________________________________ ERROR collecting pyfury/tests/test_buffer.py _______________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_buffer.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
______________________________________________________________ ERROR collecting pyfury/tests/test_codegen.py ______________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_codegen.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
__________________________________________________________ ERROR collecting pyfury/tests/test_cross_language.py ___________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_cross_language.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
____________________________________________________________ ERROR collecting pyfury/tests/test_metastring.py _____________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_metastring.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
____________________________________________________________ ERROR collecting pyfury/tests/test_serializer.py _____________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_serializer.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
______________________________________________________________ ERROR collecting pyfury/tests/test_struct.py _______________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_struct.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
_______________________________________________________________ ERROR collecting pyfury/tests/test_type.py ________________________________________________________________
ImportError while importing test module '/home/leo/projects/fury-0.9.0/python/pyfury/tests/test_type.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../../../Toolset/lang/anaconda/envs/pyfury_env2/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
pyfury/__init__.py:18: in <module>
    from pyfury import lib  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/__init__.py:18: in <module>
    from pyfury.lib import mmh3  # noqa: F401 # pylint: disable=unused-import
pyfury/lib/mmh3/__init__.py:18: in <module>
    from .mmh3 import *  # noqa: F401,F403 # pylint: disable=unused-import
E   ImportError: /home/leo/projects/fury-0.9.0/python/pyfury/lib/mmh3/mmh3.so: undefined symbol: PyGC_Disable
========================================================================= short test summary info =========================================================================
ERROR pyfury/format/tests/test_encoder.py
ERROR pyfury/format/tests/test_infer.py
ERROR pyfury/format/tests/test_vectorized.py
ERROR pyfury/lib/tests/test_collection.py
ERROR pyfury/lib/tests/test_mmh3.py
ERROR pyfury/tests/test_buffer.py
ERROR pyfury/tests/test_codegen.py
ERROR pyfury/tests/test_cross_language.py
ERROR pyfury/tests/test_metastring.py
ERROR pyfury/tests/test_serializer.py
ERROR pyfury/tests/test_struct.py
ERROR pyfury/tests/test_type.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 12 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
=========================================================================== 12 errors in 0.08s ============================================================================
(pyfury_env2) leo@leo-dev:~/projects/fury-0.9.0/python$ 

```

### Anything Else?

_No response_

### Are you willing to submit a PR?

- [x] I'm willing to submit a PR!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2035/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cuexO,fury,2629430350,2035,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-02T14:59:23Z,2025-02-02T14:59:23Z,"Hi @LouisLou2, are you using different Python for building and running putest? Could you check whether your pytest is installed in another pyenv？","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cuexO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cufyf,fury,2629434527,2035,NA,LouisLou2,113110433,Leo,,NA,2025-02-02T15:10:18Z,2025-02-02T15:10:18Z,"> Hi [@LouisLou2](https://github.com/LouisLou2), are you using different Python for building and running putest? Could you check whether your pytest is installed in another pyenv？

Yes, I'm sure I'm using the pyfury_env2 environment for this build. It is also true that testing is done in this environment.

```bash
(pyfury_env2) leo@leo-dev:~/projects/fury-0.9.0/python$ which pytest
/home/leo/Toolset/lang/anaconda/envs/pyfury_env2/bin/pytest
(pyfury_env2) leo@leo-dev:~/projects/fury-0.9.0/python$ which python
/home/leo/Toolset/lang/anaconda/envs/pyfury_env2/bin/python
(pyfury_env2) leo@leo-dev:~/projects/fury-0.9.0/python$ pytest -v -s .
============================= test session starts ==============================
platform linux -- Python 3.9.21, pytest-8.3.4, pluggy-1.5.0 -- /home/leo/Toolset/lang/anaconda/envs/pyfury_env2/bin/python
cachedir: .pytest_cache
rootdir: /home/leo/projects/fury-0.9.0/python
collected 0 items / 12 errors                                                  

==================================== ERRORS ====================================
_____________ ERROR collecting pyfury/format/tests/test_encoder.py _____________
...
```","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cufyf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cuiSq,fury,2629444778,2035,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-02T15:39:07Z,2025-02-02T15:39:07Z,"Looks strange, this error message we're encountering, undefined symbol: PyGC_Disable, typically indicates a compatibility issue between a Python extension module nd the version of Python being used. Most of times this can happen if the module was compiled against a different Python version than the one we are running","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6cuiSq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6czEMz,fury,2630632243,2035,NA,LouisLou2,113110433,Leo,,NA,2025-02-03T11:06:09Z,2025-02-03T11:06:09Z,"> Looks strange, this error message we're encountering, undefined symbol: PyGC_Disable, typically indicates a compatibility issue between a Python extension module nd the version of Python being used. Most of times this can happen if the module was compiled against a different Python version than the one we are running

Would you guys consider releasing pyfury 0.9.0 to the pip repository, I noticed that the latest version in the repository is 0.4.1","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6czEMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2035,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6czRxg,fury,2630687840,2035,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-03T11:31:28Z,2025-02-03T11:31:28Z,@LouisLou2  We plan to release pyfury in two weeks,"{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6czRxg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2039,https://api.github.com/repos/apache/fury/issues/2039,fury,2834700261,2039,[Question] next release of apache fury?,orisgarno,42269241,,,OPEN,2025-02-06T06:51:57Z,2025-02-06T07:19:48Z,"### Question

Hi, I appreciate the work being done on Apache Fury. I was wondering if there’s an estimated timeline for the next release? Thanks!","{""url"": ""https://api.github.com/repos/apache/fury/issues/2039/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/fury/issues/2039,https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dTEPn,fury,2639021031,2039,NA,chaokunyang,12445254,Shawn Yang,shawn.ck.yang@gmail.com,NA,2025-02-06T07:19:47Z,2025-02-06T07:19:47Z,"Hi @orisgarno , we plan to start the release process for apache fury 0.10.0 tomorrow","{""url"": ""https://api.github.com/repos/apache/fury/issues/comments/IC_kwDOJcVKYc6dTEPn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/fury/issues/2051,https://api.github.com/repos/apache/fury/issues/2051,fury,2839971206,2051,[Kotlin] Add Kotlin Multiplatform (KMP) Support,IO-01,61928951,IO01,i@io01.xyz,OPEN,2025-02-08T13:15:08Z,2025-02-08T13:15:08Z,"### Feature Request

From the current [Kotlin README](https://github.com/apache/fury/blob/main/kotlin/README.md), Fury's Kotlin integration is described as ""This provides additional Fury support for Kotlin Serialization on **JVM**"".

With the increasing adoption of KMP (Kotlin Multiplatform) in cross-platform solutions—especially for shared Android/iOS codebases—it would be valuable for Fury to support KMP serialization. This could position Fury as a high-performance alternative to JSON and Protocol Buffers in cross-platform scenarios.

To minimize implementation effort, one possible approach is to leverage Kotlin’s expect/actual mechanism for shared logic while reusing Fury’s C++ native components (via Kotlin/Native interoperability) for iOS targets. 

### Is your feature request related to a problem? Please describe

_No response_

### Describe the solution you'd like

_No response_

### Describe alternatives you've considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/apache/fury/issues/2051/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
