type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/2,https://api.github.com/repos/eclipse-ee4j/yasson/issues/2,yasson,195195383,2,Boolean values are serialized as string,simdevmon,16277781,Simon,,CLOSED,2016-12-13T08:57:25Z,2018-02-23T19:38:47Z,"I tried Yasson `1.0-SNAPSHOT` as described here: http://json-b.net/getting-started.html

Lets say I have a simple class like this:
```
public class MyObject
{
    private String message;
    private boolean flat;

    public MyObject(String message, boolean flat)
    {
        this.message = message;
        this.flat = flat;
    }

    // GETTERS and SETTERS
}
```

Now I want to serialize it to Json using Yasson:

```
System.out.println(
	JsonbBuilder.create().toJson(new MyObject(""Hello"", true))
);
```

The output is like this:
`{""flat"":""true"",""message"":""Hello""}`

I would rather expect this (boolean value should have no quotation marks, since it is not a string). 
`{""flat"":true,""message"":""Hello""}`
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/2,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Njk1MzAzMQ==,yasson,266953031,2,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2016-12-14T06:21:30Z,2016-12-14T06:21:30Z,"Thanks Simon, that was reported and fixed already, I am not sure why changes are lost. I will take a look.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Njk1MzAzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/2,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA1MzQyNQ==,yasson,268053425,2,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-19T19:21:46Z,2016-12-19T19:21:46Z,Merged to master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA1MzQyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,yasson,195785635,3,Number format error while converting empty string json to Integer,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2016-12-15T11:47:05Z,2017-08-30T18:48:04Z,"From json to Object throws number format error if numeric field value is supplied in empty quotes.

for example in the front end
JSON.stringify(products) converts the json to empty quoted string

in the server side , this code throws numberformat error
jsonb.fromJson(""{""id"":"""",""productName"":""test""}"", Product.class);

 java.lang.NumberFormatException: For input string: """"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:592)
	at java.lang.Integer.parseInt(Integer.java:615)
	at org.eclipse.persistence.json.bind.internal.serializer.IntegerTypeDeserializer.lambda$deserialize$58(IntegerTypeDeserializer.java:34)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.eclipse.persistence.json.bind.internal.serializer.IntegerTypeDeserializer.deserialize(IntegerTypeDeserializer.java:34)
	at org.eclipse.persistence.json.bind.internal.serializer.IntegerTypeDeserializer.deserialize(IntegerTypeDeserializer.java:25)
	at org.eclipse.persistence.json.bind.internal.serializer.AbstractValueTypeDeserializer.deserialize(AbstractValueTypeDeserializer.java:61)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:142)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:74)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:55)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.CollectionDeserializer.deserializeNext(CollectionDeserializer.java:118)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:74)
	at org.eclipse.persistence.json.bind.internal.unmarshaller.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:55)
	at org.eclipse.persistence.json.bind.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.persistence.json.bind.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NzMwOTE1OA==,yasson,267309158,3,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-15T11:47:54Z,2016-12-15T11:47:54Z,"This issue was submitted to JSON-B specification issue tracker, but more related to Yasson, so I am reposting it here.

According to the spec, number values in json document represented without quotes. If quotes are there it's a string value. This is why you have a binding exception. 
I see a problem here in the exception type. I suppose that JsonbException has to be thrown here, not NumberFormatException.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NzMwOTE1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NzQ1OTQwMg==,yasson,267459402,3,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2016-12-15T22:11:33Z,2016-12-15T22:11:33Z,"@m0mus I've found the root cause of the issue. I started with the IntegerTypeDeserializer (the same issue exits for Double, Float, etc). I just want to know which message should we use for this scenario? is it ok to reuse the MessageKeys.DESERIALIZE_VALUE_ERROR key that is ""**Error deserialize JSON value into type: {}**"" or you prefer to define a new key for this scenario. I tested it with Integer.class as a parameter and the final output is something like this:
**Error deserialize JSON value into type: java.lang.Integer**

In the context that this exception happens, we have access to the JsonBindingModel instance from which we can get the property name. So it would be more helpful for developers to know exactly what property goes wrong. Maybe we can provide a more detailed message like this:

""Error deserializing JSON value of property '{}' into type {}"" (e.g. Error deserializing JSON value of property 'age' into type java.lang.Integer)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NzQ1OTQwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA1MzYxMg==,yasson,268053612,3,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-19T19:22:35Z,2016-12-19T19:22:35Z,I think it's OK to reuse MessageKeys.DESERIALIZE_VALUE_ERROR message.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA1MzYxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA5NTE2Nw==,yasson,268095167,3,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2016-12-19T22:19:04Z,2016-12-19T22:19:04Z,"OK. I'm trying to develop some unit tests for this scenario. We need to have some Java Beans to test basic serialization/deserialization scenarios. There is a class named GenericTestClass that seems to be a shortcut to prevent creating such Java Beans. But I think it would not be possible to test all scenarios using this technique due to type erasure process at compile time (specifically for deserializtion process). Also some issues happens only when a property is primitive/boxed type.
Do you think it would be OK to have such Java Beans (e.g. in org.eclipse.yasson.defaultmapping.basic.model package) like the one we already have for testing boolean (BooleanModel)? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODA5NTE2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODE3NzA2OQ==,yasson,268177069,3,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2016-12-20T07:46:41Z,2016-12-20T07:46:41Z,"""model"" subpackage for various tests is used to create bean test classes for tests. If you need other bean classes for tests feel free to create those, or modify existing. Type erasure is why there is optional ""Type"" argument in fromJson/toJson methods. If you use it, runtime is aware of what type is TypeVariable inside GenericTestClass.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODE3NzA2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODI0MjU0OA==,yasson,268242548,3,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2016-12-20T13:27:25Z,2016-12-20T13:27:25Z,You're right @bravehorsie :wink: It works in my scenario too. I just updated unmarshaller classes for all numeric types and added a test for each one,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODI0MjU0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/3,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODY4NzIzNg==,yasson,268687236,3,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-22T00:38:05Z,2016-12-22T00:38:05Z,Fixed and pushed to master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODY4NzIzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,yasson,197615976,6,Null OptionalInt deseralized as null,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,CLOSED,2016-12-26T19:57:48Z,2018-02-23T19:38:47Z,"Null values for optional properties (e.g. Optional, OptionalInt, OptionalLong, OptionalDouble) as mentioned on chapter 3.14.1, should be deserialized as corresponding ""empty"" value (e.g. OptionalInt.empty(), etc.) but they're getting deserialized as Null values.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTI0MTY5NQ==,yasson,269241695,6,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-26T21:04:17Z,2016-12-26T21:04:17Z,Original issue on Yasson forum: https://www.eclipse.org/forums/index.php/t/1083307/,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTI0MTY5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NDExOA==,yasson,269554118,6,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-28T22:51:16Z,2016-12-28T22:51:16Z,"@moghaddam, if you don't mind, I assigned it to you. :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NDExOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NDM2Mg==,yasson,269554362,6,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2016-12-28T22:53:39Z,2016-12-28T22:53:39Z,"I was just checking this issue and I found a solution which solves the problem when the property is an  Optional type. But I just noticed that it doesn't work when it's a generic type. I actually tried to add a new property to PropertyModel class (named optional of boolean type) and then on the PropertyModel constructor, added following initialization:

        this.optional = (propertyType == Optional.class || propertyType == OptionalInt.class ||
                         propertyType == OptionalLong.class || propertyType == OptionalDouble.class);

The problem is, when the property is of generic type, the value of ""propertyType"" is something like ""T"" so it doesn't work. I'm looking to find a proper way to access runtime type data there. Do you have any idea? ;)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NDM2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NTE1OQ==,yasson,269555159,6,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2016-12-28T23:00:47Z,2016-12-28T23:00:47Z,"@bravehorsie is owning this code. Roman, can you help here?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTU1NTE1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDkzMTczMA==,yasson,270931730,6,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-01-06T15:46:15Z,2017-01-06T15:46:15Z,"Resolving TypeVariables happens during de/serialization runtime, they cannot be resolved when PropertyModel is created. 

Consider:
`class Wrapper<T> {
  public T t;
}`
now you can't say what type T is, because:

`Jsonb runtime = JsonBuilder.create();`

`Wrapper<String> result = jsonb.fromJson(stringValJson, new Wrapper<String>(){}.getGenericSuperClass());` //<- PropertyModel for Wrapper<T> is initialized here

`Wrapper<Integer> result = jsonb.fromJson(integerValJson, new Wrapper<Integer>(){}.getGenericSuperClass());` //<- and reused here","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDkzMTczMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/6,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzMyNDQ3NA==,yasson,283324474,6,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-03-01T12:12:36Z,2017-03-01T12:12:36Z,"Fixed impl, added tests for null deserialization into:
optionals in generic typevars, arrays and collections of optionals.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzMyNDQ3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/7,https://api.github.com/repos/eclipse-ee4j/yasson/issues/7,yasson,199050752,7,SEVERE: Generating incomplete JSON error on binding a non public inner class,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,CLOSED,2017-01-05T20:26:02Z,2017-08-30T18:47:34Z,"SEVERE: Generating incomplete JSON happens when trying to serialize an instance of a class that is defined as non public inner class. Original issue on Yasson forum is [https://www.eclipse.org/forums/index.php/t/1083501/](https://www.eclipse.org/forums/index.php/t/1083501/).

I think non public nested classes are not supposed to be supported. So it should not be a bug, but it would be better to have a more readable error.

Here is the stack trace:

```java
SEVERE: Generating incomplete JSON

javax.json.bind.JsonbException: Error getting value on: Person{name=John, weddingDate=Optional[Tue Jul 05 00:00:00 CEST 2016]}
	at org.eclipse.yasson.model.ReflectionPropagation$GetValueCommand.getValue(ReflectionPropagation.java:34)
	at org.eclipse.yasson.model.ReflectionPropagation.getValue(ReflectionPropagation.java:98)
	at org.eclipse.yasson.model.PropertyModel.getValue(PropertyModel.java:177)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:66)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:49)
	at org.eclipse.yasson.internal.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:52)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:104)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:73)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:111)
	at org.eclipse.yasson.defaultmapping.specific.OptionalDateTest.testJohn(OptionalDateTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.model.ReflectionPropagation can not access a member of class org.eclipse.yasson.defaultmapping.specific.OptionalDateTest$Person with modifiers ""public""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Method.invoke(Method.java:491)
	at org.eclipse.yasson.model.ReflectionPropagation.lambda$acceptMethod$0(ReflectionPropagation.java:66)
	at org.eclipse.yasson.model.ReflectionPropagation$GetValueCommand.getValue(ReflectionPropagation.java:32)
	... 38 more
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/7,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MTMyMTk2Nw==,yasson,271321967,7,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-01-09T15:56:10Z,2017-01-09T15:56:10Z,According to the spec [3.7.1] only public and protected nested classes are supported. The exception could be more descriptive though.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MTMyMTk2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,yasson,206791154,9,Fix JsonbTransient on getters and setters,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2017-02-10T13:04:09Z,2017-08-30T18:47:14Z,"If @JsonbTransient is placed on getter implementation must not serialize this property.
If @JsonbTransient is placed on setter implementation must not deserialize this property.
If @JsonbTransient is placed on field implementation must not serialize and deserialize this property.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NjU5Nw==,yasson,282846597,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-02-27T20:42:11Z,2017-02-27T20:42:11Z,@moghaddam For some reason I cannot assign you to this issue. Let's use this comment as an assignment confirmation. :),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NjU5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDEzOQ==,yasson,283940139,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-03T12:21:52Z,2017-03-03T12:21:52Z,@moghaddam Is there any progress with it? I can reassign it if you are busy with other things.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDEzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MTAzNQ==,yasson,283941035,9,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-03T12:27:18Z,2017-03-03T12:27:18Z,I noticed that it depends on fixing both #10  and #11. I'm going to fix this after finishing #10 (Date formatter issue),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MTAzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDE5NTIyNw==,yasson,284195227,9,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-05T00:24:35Z,2017-03-05T00:24:35Z,"As mentioned in chapter 4.1.1. of the specification:

> JsonbTransient annotation is mutually exclusive with all other JSON Binding defined
> annotations. If this condition is not met, JSON Binding implementation MUST throw
> JsonbException. 

Such a restriction is already implemented in the RI. Now that I'm going to change it, should I apply this restriction on each scope? I mean if JsonbTransient is defined on getter method, should I prevent defining other annotation on the `getter` or it should be prevented to be defined for either `getter`, `setter` or `property` altogether (as it is in current implementation)?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDE5NTIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDM3MDMwNg==,yasson,284370306,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-06T11:22:24Z,2017-03-06T11:22:24Z,"This check has to be done on target where JsonbTransient annotation is present. It means that if you have it on a getter, no other Jsonb annotation are allowed on this getter. The same is for property and setter. I suppose it's the first option you suggested.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDM3MDMwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MTU4NA==,yasson,286091584,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-13T12:19:13Z,2017-03-13T12:19:13Z,@moghaddam What's the ETA for this fix?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MTU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MjM3OA==,yasson,286092378,9,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-13T12:23:24Z,2017-03-13T12:23:24Z,"I fixed this but I noticed a regression issue that I'll try to fix tonight.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MjM3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MjY0NA==,yasson,286092644,9,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-03-13T12:24:54Z,2017-03-13T12:24:54Z,"> This check has to be done on target where JsonbTransient annotation is present.
@m0mus That means if we have @JsonbTransient on property and @JsonbProperty on getter we are overriding @JsonbTransient with other annotation if exception is not thrown?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5MjY0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5ODgzMg==,yasson,286098832,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-13T12:54:36Z,2017-03-13T12:54:36Z,"@moghaddam @bravehorsie In this case JsonbTransient annotation on property is mutually exclusive with annotations on getters and setters, but not vice versa.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjA5ODgzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjExMDI0Ng==,yasson,286110246,9,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-13T13:43:46Z,2017-03-13T13:43:46Z,"@m0mus I got it. 

Just to make sure there is no misunderstanding, here is what to expect from the implementation:

* If a property is annotated with @JsonbTransient
  * then none of other annotations could be defined for either the property or its getter and setter

* if a getter is annotation with @JsonbTransient
  * then none of other annotations could be defined for the getter, but it would be allowed for setter and property

* if a setter is annotation with @JsonbTransient
  * then none of other annotations could be defined for the setter, but it would be allowed for getter and property

I'll refactor my implementation tonight (as in my current implementation it's more restricted than this) and after fixing the regression issue I'll push it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjExMDI0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjExMTI4Ng==,yasson,286111286,9,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-03-13T13:47:38Z,2017-03-13T13:47:38Z,"Last two statements appear inconsistent to me. I would throw exception in all these cases, because for example:

- if a getter is annotated with @JsonbTransient
    then all annotations on ""property"" would be kind of overriden with @JsonbTransient

I would throw exception in all three cases.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjExMTI4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjEyMDcwNg==,yasson,286120706,9,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-13T14:19:44Z,2017-03-13T14:19:44Z,"The JsonbTransient annotation on getter could be considered overridden **only** in serialization process. For deserialization they could still be used.

However @bravehorsie I think based on what is currently stated on spec, it's more likely that we should just throw exception in all these scenarios. In other cases, IMO it would make sense to make it more clear on spec too.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjEyMDcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjE2MTQzNA==,yasson,286161434,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-13T16:27:15Z,2017-03-13T16:27:15Z,"@moghaddam I agree with your last comment. IMO, it suppose to work like you described. I update the spec to clarify this behaviour.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjE2MTQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/9,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMyOTQ2OA==,yasson,287329468,9,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-17T11:19:57Z,2017-03-17T11:19:57Z,Pull request is merged. Thanks @moghaddam !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMyOTQ2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,yasson,206791583,10,Fix JsonbDateFormat on getters/setters,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2017-02-10T13:06:29Z,2017-08-30T18:46:49Z,"If @JsonbDateFormat is placed on getter implementation must use this format on serialization.
If @JsonbDateFormat is placed on setter implementation must use this format on deserialization.
If @JsonbDateFormat is placed on field implementation must use this format on serialization and deserialization.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NjUzMg==,yasson,282846532,10,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-02-27T20:41:55Z,2017-02-27T20:41:55Z,@moghaddam For some reason I cannot assign you to this issue. Let's use this comment as an assignment confirmation. :),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NjUzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDA5Ng==,yasson,283940096,10,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-03T12:21:33Z,2017-03-03T12:21:33Z,@moghaddam Is there any progress with it? I can reassign it if you are busy with other things.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDA5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDg3NQ==,yasson,283940875,10,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-03-03T12:26:25Z,2017-03-03T12:26:25Z,Yes I've started this and I'm going to finish it this weekend ;),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzk0MDg3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDM3OTYzMQ==,yasson,284379631,10,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-06T12:10:15Z,2017-03-06T12:10:15Z,"Tests on Hudson are failing. I suppose that it's because of different time zone. Please fix:

Failed tests:   testCustomDateFormatSerialization(org.eclipse.yasson.customization.JsonbDateFormatterTest): expected:<...ormattedDateField"":""[11:11:10 ^^ 03-03-2017"",""getterAndFieldFormattedDateField"":""11:11:10 <> 03-03-2017"",""getterAndSetterAndFieldFormattedDateField"":""11:11:10 <> 03-03-2017"",""getterAndSetterFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""getterFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""plainDateField"":""2017-03-03T11:11:10"",""setterAndFieldFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""setterFormattedDateField"":""2017-03-03T11]:11:10""}> but was:<...ormattedDateField"":""[05:11:10 ^^ 03-03-2017"",""getterAndFieldFormattedDateField"":""05:11:10 <> 03-03-2017"",""getterAndSetterAndFieldFormattedDateField"":""05:11:10 <> 03-03-2017"",""getterAndSetterFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""getterFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""plainDateField"":""2017-03-03T05:11:10"",""setterAndFieldFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""setterFormattedDateField"":""2017-03-03T05]:11:10""}>
  testCustomDateFormatDeserializationWithClassLevelDateFormatterDefined(org.eclipse.yasson.customization.JsonbDateFormatterTest): expected:<Fri Mar 03 05:11:10 EST 2017> but was:<Fri Mar 03 11:11:10 EST 2017>
  testCustomDateFormatSerializationWithClassLevelDateFormatterDefined(org.eclipse.yasson.customization.JsonbDateFormatterTest): expected:<...ormattedDateField"":""[11:11:10 ^^ 03-03-2017"",""getterAndFieldFormattedDateField"":""11:11:10 <> 03-03-2017"",""getterAndSetterAndFieldFormattedDateField"":""11:11:10 <> 03-03-2017"",""getterAndSetterFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""getterFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""plainDateField"":""11:11:10 ^ 03-03-2017"",""setterAndFieldFormattedDateField"":""11:11:10 ^^ 03-03-2017"",""setterFormattedDateField"":""11]:11:10 ^ 03-03-2017""...> but was:<...ormattedDateField"":""[05:11:10 ^^ 03-03-2017"",""getterAndFieldFormattedDateField"":""05:11:10 <> 03-03-2017"",""getterAndSetterAndFieldFormattedDateField"":""05:11:10 <> 03-03-2017"",""getterAndSetterFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""getterFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""plainDateField"":""05:11:10 ^ 03-03-2017"",""setterAndFieldFormattedDateField"":""05:11:10 ^^ 03-03-2017"",""setterFormattedDateField"":""05]:11:10 ^ 03-03-2017""...>
  testCustomDateFormatDeserialization(org.eclipse.yasson.customization.JsonbDateFormatterTest): expected:<Fri Mar 03 05:11:10 EST 2017> but was:<Fri Mar 03 11:11:10 EST 2017>","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDM3OTYzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/10,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDY5MDU2NA==,yasson,284690564,10,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-03-07T11:02:11Z,2017-03-07T11:02:11Z,Hudson is OK now. Thanks for fixing it @moghaddam !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDY5MDU2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/11,https://api.github.com/repos/eclipse-ee4j/yasson/issues/11,yasson,206791691,11,Fix JsonbNumberFormat on getters/setters,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2017-02-10T13:07:02Z,2017-08-30T18:46:36Z,"If @JsonbNumberFormat is placed on getter implementation must use this format on serialization.
If @JsonbNumberFormat is placed on setter implementation must use this format on deserialization.
If @JsonbNumberFormat is placed on field implementation must use this format on serialization and deserialization.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/11,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NTQ5MA==,yasson,282845490,11,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-02-27T20:37:59Z,2017-02-27T20:37:59Z,Fixed by #13 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mjg0NTQ5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/12,https://api.github.com/repos/eclipse-ee4j/yasson/issues/12,yasson,207046562,12,Typo: JsonObjectSerialzier.java,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,CLOSED,2017-02-12T12:16:07Z,2017-08-30T18:46:17Z,Minor spelling error,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/12/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/12,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MDYyMTI1NA==,yasson,280621254,12,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-02-17T11:03:15Z,2017-02-17T11:03:15Z,Thanks for reporting! It's fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MDYyMTI1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/14,https://api.github.com/repos/eclipse-ee4j/yasson/issues/14,yasson,210540886,14,Publish Yasson to Maven Central,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,CLOSED,2017-02-27T16:48:24Z,2017-08-30T18:45:47Z,,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/14,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ3MDQwNA==,yasson,311470404,14,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-06-27T20:08:24Z,2017-06-27T20:08:24Z,Fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ3MDQwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/22,https://api.github.com/repos/eclipse-ee4j/yasson/issues/22,yasson,225885512,22,PropertyNamingStrategy annotation,Ravisankar-Challa,11788842,,,CLOSED,2017-05-03T05:09:09Z,2017-08-30T18:45:30Z,"Is there any annotation available to define property naming strategy per class level.

Similar to the one in jackson.
@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/22,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODgzMzUyNA==,yasson,298833524,22,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-05-03T06:38:23Z,2017-05-03T06:38:23Z,"As per JSON-B spec, the naming strategy could only be defined by setting a JsonConfig and would be applied globally.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODgzMzUyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/23,https://api.github.com/repos/eclipse-ee4j/yasson/issues/23,yasson,227683505,23,@JsonbPropertyOrder is not applied on renamed fields ,Ravisankar-Challa,11788842,,,CLOSED,2017-05-10T13:40:08Z,2017-08-30T18:45:06Z,"As per the spec JsonbPropertyOrder should be applied on renamed fields.

Section 4.2 last line: _The order is applied to already renamed properties as stated in 4.1._

https://java.net/projects/jsonb-spec/lists/users/archive/2017-05/message/4

@JsonbPropertyOrder(value = {""person_gender"",""person_name"", ""person_age""})
public class Person {
    private String personName;
    private int personAge;
    private String personGender;

    public String getPersonName() {
        return personName;
    }
    public void setPersonName(String name) {
        this.personName = name;
    }
    public int getPersonAge() {
        return personAge;
    }
    public void setPersonAge(int age) {
        this.personAge = age;
    }
    public String getPersonGender() {
        return personGender;
    }
    public void setPersonGender(String personGender) {
        this.personGender = personGender;
    }
}

JsonbConfig config = new JsonbConfig().withPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE_WITH_UNDERSCORES);
        Jsonb jsonb = JsonbBuilder.create(config);
        Person p = new Person();
        p.setPersonAge(12);
        p.setPersonName(""David"");
        p.setPersonGender(""Male"");
        System.out.println(jsonb.toJson(p));

@JsonbPropertyOrder(value = {""person_gender"",""person_name"", ""person_age""})
   Yasson: {} - *empty json object*","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/23,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDUxMTMyMw==,yasson,300511323,23,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-05-10T15:04:08Z,2017-05-10T15:04:08Z,"I am not sure about this. If runtime is created several times with different naming strategies, it than would not work without changing names in annotation and recompiling. Same applies if property is renamed with @JsonbProperty. I would expect @JsonbPropertyOrder to always accept ""bean names"" and than order them as renamed by @JsonbProperty annotation or @PropertyNamingStrategy. @m0mus  please comment on that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDUxMTMyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/23,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTAzNzYzNA==,yasson,301037634,23,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-05-12T10:05:11Z,2017-05-12T10:05:11Z,"I did some closer look on this. Yasson currently does it wrong and some clarification in the spec is needed for this use case.
 
I came out with the following rules:
 
1.  Properties names specified in @JsonbPropertyOrder annotation must be the original names of properties as it’s specified in Java class. In the sample provided below its ""personGender"",""personName"", ""personAge"".
2.  Properties NOT specified in @JsonbPropertyOrder annotation are serialized AFTER properties specified there.
3.  If property specified in @JsonbPropertyOrder annotation doesn’t exist it’s ignored and no exception is thrown.

It's already added to the spec.

Considering that, the use case

`
@JsonbPropertyOrder(value = {""person_gender"",""person_name"", ""person_age""})
`

must return all Person class properties, but the order is **undefined**
 
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTAzNzYzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/23,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTAzODI3NQ==,yasson,301038275,23,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-05-12T10:08:24Z,2017-05-12T10:08:24Z,Fixed according to comments in latest snapshot.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTAzODI3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/24,https://api.github.com/repos/eclipse-ee4j/yasson/issues/24,yasson,230091916,24,Certificate Error,webfolderio,23472649,,,CLOSED,2017-05-19T21:15:48Z,2017-06-27T20:08:35Z,"https://json-b.net gives certificate error.

https://www.ssllabs.com/ssltest/analyze.html?d=json-b.net

>Certificate name mismatch 
>Click here to ignore the mismatch and proceed with the tests","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/24,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMjgyOTY2Mw==,yasson,302829663,24,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-05-19T23:02:44Z,2017-05-19T23:02:44Z,"Try [http://json-b.net](http://json-b.net)
No certificate, no error.

Another option is a direct link to GitHub page, in this case SSL will work fine:
[https://javaee.github.io/jsonb-spec](https://javaee.github.io/jsonb-spec)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMjgyOTY2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,yasson,234444749,26,ES6 Compatible Parsing & Serialization,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,OPEN,2017-06-08T08:10:30Z,2018-04-28T15:54:49Z,"ES6 (EcmaScript version 6) and forward specifies very specific rules for serialization including ""predictive property"" order.   This may appear strange but for a _human_ creating the properties A, B, C and getting them serialized as A, C, B is slightly awkward, although completely compatible with JSON. 

In addition, ES6 also specifies strict rules for serializing numbers which are quite different from what native Java does.

Anyway, a huge advantage with ES6 parsing and serialization is that it makes it possible creating very elegant ""crypto safe"" objects as described here: https://cyberphone.github.io/doc/security/jsonsignatures.html

This is currently supported by an open source library of mine (https://github.com/cyberphone/openkeystore#openkeystore) but it would be even cooler if ES6 compatible parsing and serialization would be a part of JSON-B or at least of your reference implementation.  This should be coordinated with your JavaScript engine since the very same scheme must be running there already.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzA1NjQzMw==,yasson,307056433,26,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-06-08T09:53:37Z,2017-06-08T09:53:37Z,@cyberphone Thanks for your comment. The feature set for Yasson 1.0 is already closed. We will get back to this when we plan next version features. I am also suggesting to add a feature request to JSON-B here: https://github.com/javaee/jsonb-spec,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzA1NjQzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTA5OTg5NA==,yasson,331099894,26,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-21T09:14:42Z,2017-09-21T09:14:42Z,"Hi @cyberphone ,
Property order and number serialization format are forced by spec.
3.13 Attribute order
3.3.2 java.lang.Byte, Short, Integer, Long, Float, Double
So we can't do anything about that in RI until specification is changed. 
I have looked at ECMA-262 (EcmaScript 2015) specification, but can't find anything related to serialization into json document. Can you please point me? 

> In addition, ES6 also specifies strict rules for serializing numbers which are quite different from what native Java does.

You are referring to serialization of JavaScript/EcmaScript numbers here?

> This should be coordinated with your JavaScript engine since the very same scheme must be running there already.

We are not using any javascript engine for serialization deserialization all is done with [jsonp](https://github.com/javaee/jsonp)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTA5OTg5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTM1NjkxMQ==,yasson,331356911,26,NA,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,NA,2017-09-22T05:54:02Z,2017-09-22T05:54:02Z,"Hi @bravehorsie 

> Property order and number serialization format are forced by spec.
3.13 Attribute order
3.3.2 java.lang.Byte, Short, Integer, Long, Float, Double
So we can't do anything about that in RI until specification is changed.

I see.  I tried to find the spec but didn't succeed :-(

ES6 reference: http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf
- Number serialization: 7.1.12.1
- Defined property order: 9.1.12

The above is currently supported by Chrome, Safari, Firefox, V8, and Node.js making it close to a de-facto standard.

A Java utility method that performs ES6 compatible number serialization would be usable both in JSONP and in the Java JavaScript engine.  I believe the latter already have one, it just doesn't do it like described in ES6.  Java 7 did it correctly though but then you switched engine.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTM1NjkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzU1NjA3Mw==,yasson,333556073,26,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-10-02T14:44:26Z,2017-10-02T14:44:26Z,"> Number serialization: 7.1.12.1
Defined property order: 9.1.12

Thank you

> I see. I tried to find the spec but didn't succeed :-(

You can download jsonb spec here:
http://download.oracle.com/otndocs/jcp/json_b-1-final-eval-spec/index.html","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzU1NjA3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzYxMTg2NA==,yasson,333611864,26,NA,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,NA,2017-10-02T17:51:54Z,2017-10-02T17:51:54Z,"Thanx!
The specs surely are different.

I'm not a expert on annotations but it would be cool if you could through such enable ES6 compatibility if changing the specification is not an option.

However, respecting the original property order is IMHO always useful since you for documentation/debugging purposes typically prefer
```javascript
{
  ""name"": ""john doe"",
  ""address"": ""2000 Sunset avenue"",
  ""zip"": 90000,
  ""state"": CA
}
```
before

```javascript
{
  ""address"": ""2000 Sunset avenue"",
  ""name"": ""john doe"",
  ""state"": CA,
  ""zip"": 90000
}
```

I have managed doing that in Python and .NET through options.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzYxMTg2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/26,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTE4NTk5OQ==,yasson,385185999,26,NA,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,NA,2018-04-28T15:54:49Z,2018-04-28T15:54:49Z,"This work has now transitioned into an IETF activity:
https://tools.ietf.org/id/draft-erdtman-jose-cleartext-jws-00.html","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTE4NTk5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/27,https://api.github.com/repos/eclipse-ee4j/yasson/issues/27,yasson,234797115,27,Custom JsonbAdapter is callled twice for the 1st element,AdamLindenthal,5345451,Adam Lindenthal,,CLOSED,2017-06-09T11:19:11Z,2018-02-23T19:38:48Z,"My use case is ""inspired"" by the original yasson `PolymorphismAdapter`. I try to serialize an object, that contains list of `Animal` subtypes. The first item of the list is being wrapped twice by the adapter.

Serialized structure (simplified):
```java
public class Animal {
    public Animal() {
        this.name = ""NoName animal"";
    }
    public String name;
}
 
public class Dog extends Animal {
    public String dogProperty;
}

public class Cat extends Animal {
    public String catProperty;
}

public class Animals {
    public List<Animal> listOfAnimals = new ArrayList<>();
}
```

Custom adapter & TypeWrapper:
```java
public class LocalPolymorphicAdapter<T> implements JsonbAdapter<T, LocalTypeWrapper<T>> {

    private final String[] allowedClasses;

    public LocalPolymorphicAdapter(final Class... allowedClasses) {
        this.allowedClasses = Stream.of(allowedClasses).map(Class::getName).toArray(value -> new String[allowedClasses.length]);
    }

    public String[] getAllowedClasses() {
        return allowedClasses;
    }

    @Override
    public LocalTypeWrapper adaptToJson(T obj) throws Exception {
        LocalTypeWrapper wrapper = new LocalTypeWrapper();
        wrapper.setClassName(obj.getClass().getName());
        wrapper.setInstance(obj);
        return wrapper;
    }

    @Override
    public T adaptFromJson(LocalTypeWrapper<T> obj) throws Exception {
        return obj.getInstance();
    }
}

public class LocalTypeWrapper<T> {
    private String className;
    private T instance;

    public String getClassName() {...}
    public void setClassName(String className) {...}
    public T getInstance() {...}
    public void setInstance(T instance) {...}
}

```

Actual result:
```
{
    ""listOfAnimals"":[
        {
            ""className"":""com.test.jsonb.polymorph.Dog"",
            ""instance"":{
                ""className"":""com.test.jsonb.polymorph.Dog"",
                ""instance"":{
                    ""name"":""NoName animal"",
                    ""dogProperty"":""Hunting""
                }
            }
        },
        {
            ""className"":""com.test.jsonb.polymorph.Cat"",
            ""instance"":{
                ""name"":""NoName animal"",
                ""catProperty"":""Sleeping""
            }
        }
  ]
}
```

Expected result:
```
{
    ""listOfAnimals"":[
        {
            ""className"":""com.test.jsonb.polymorph.Dog"",
            ""instance"":{
                    ""name"":""NoName animal"",
                    ""dogProperty"":""Hunting""
            }
        },
        {
            ""className"":""com.test.jsonb.polymorph.Cat"",
            ""instance"":{
                ""name"":""NoName animal"",
                ""catProperty"":""Sleeping""
            }
        }
  ]
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/27,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzgzMTkxNw==,yasson,307831917,27,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-06-12T15:51:26Z,2017-06-12T15:51:26Z,"Fixed issue with StackOverflowError. Slightly modified code from your example is included in PolymorphicAdapterTest.java
Please note however that during deserialization into Animal (which is property of LocalTypeWrapper), properties missing in Animal class are ignored. This can be implemented correctly with javax.json.bind.serializer.JsonbDeserializer.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzgzMTkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/28,https://api.github.com/repos/eclipse-ee4j/yasson/issues/28,yasson,238670974,28,POM from example still using 1.0-SNAPSHOT,ullenboom,5071169,Christian Ullenboom,,CLOSED,2017-06-26T21:11:38Z,2018-02-23T19:38:48Z,This should change to 1.0,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/28,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ3MTEzMA==,yasson,311471130,28,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-06-27T20:11:15Z,2017-06-27T20:11:15Z,Are you talking about samples on json-b.net web site?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ3MTEzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/28,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ4MjMwMg==,yasson,311482302,28,NA,ullenboom,5071169,Christian Ullenboom,,NA,2017-06-27T20:53:48Z,2017-06-27T20:53:48Z,yes,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ4MjMwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/28,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjIwMA==,yasson,314152200,28,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-07-10T16:02:13Z,2017-07-10T16:02:13Z,Fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjIwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/29,https://api.github.com/repos/eclipse-ee4j/yasson/issues/29,yasson,238671320,29,yasson-snapshots not necessary anymore for release 1.0,ullenboom,5071169,Christian Ullenboom,,CLOSED,2017-06-26T21:13:02Z,2018-02-23T19:38:48Z,"From the POM in the example this can be removed:

```
<!-- Needed for Yasson -->
    <repository>
        <id>yasson-snapshots</id>
        <name>Yasson Snapshots repository</name>
        <url>https://repo.eclipse.org/content/repositories/yasson-snapshots</url>
    </repository>
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/29,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjE0NQ==,yasson,314152145,29,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-07-10T16:02:00Z,2017-07-10T16:02:00Z,Fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjE0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/30,https://api.github.com/repos/eclipse-ee4j/yasson/issues/30,yasson,238671888,30,Dog example can't deserialize/parse given JSON string,ullenboom,5071169,Christian Ullenboom,,CLOSED,2017-06-26T21:15:23Z,2018-02-23T19:38:48Z,"The line

`dog = jsonb.fromJson(""{name:\""Falco\"",age:4,bitable:false}"", Dog.class);`

is giving an exception. However

`dog = jsonb.fromJson( ""{\""age\"":4,\""bitable\"":false,\""name\"":\""Falco\""}"", Dog.class );`

works.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/30,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjAzOQ==,yasson,314152039,30,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-07-10T16:01:38Z,2017-07-10T16:01:38Z,Thanks for pointing on it. Fixed 'Getting Started' page should be available on json-b.net now.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjAzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/31,https://api.github.com/repos/eclipse-ee4j/yasson/issues/31,yasson,238673451,31,"new ArrayList<Dog>(){}.getClass()); not working in example, is giving exception",ullenboom,5071169,Christian Ullenboom,,CLOSED,2017-06-26T21:21:45Z,2017-07-10T16:03:04Z,"Here is my example:

```
package com.tutego.insel.json;

import java.util.ArrayList;
import java.util.List;
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;

public class Dog {
  public String name;
  public int age;
  public boolean bitable;

  public static void main( String[] args ) {
    // Create a dog instance
    Dog falco = new Dog();
    falco.name = ""Falco"";
    falco.age = 4;
    falco.bitable = false;

    Dog cassidy = new Dog();

    List<Dog> dogs = new ArrayList<>();
    dogs.add( falco );
    dogs.add( cassidy );

    // Create Jsonb and serialize
    Jsonb jsonb = JsonbBuilder.create();
    String result = jsonb.toJson( dogs );
    System.out.println( result );

    // Deserialize back
    dogs = jsonb.fromJson( result, new ArrayList<Dog>() { }.getClass() );

  }
}

```
This will give:

```
[{""age"":4,""bitable"":false,""name"":""Falco""},{""age"":0,""bitable"":false}]
Exception in thread ""main"" javax.json.bind.JsonbException: Can't create instance
	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:191)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:186)
	at org.eclipse.yasson.internal.serializer.CollectionDeserializer.createInstance(CollectionDeserializer.java:71)
	at org.eclipse.yasson.internal.serializer.CollectionDeserializer.<init>(CollectionDeserializer.java:53)
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.build(DeserializerBuilder.java:126)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
	at com.tutego.insel.json.Dog.main(Dog.java:32)
Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.internal.ReflectionUtils can not access a member of class com.tutego.insel.json.Dog$1 with modifiers """"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:189)
	... 10 more

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/31,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjQ2NQ==,yasson,314152465,31,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-07-10T16:03:04Z,2017-07-10T16:03:04Z,"There is an error in the sample code. It must be getClass().getGenericSuperclass();
I fixed it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1MjQ2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/32,https://api.github.com/repos/eclipse-ee4j/yasson/issues/32,yasson,238677535,32,Can't marshal an innocent java.awt.Point,ullenboom,5071169,Christian Ullenboom,,CLOSED,2017-06-26T21:38:59Z,2017-08-30T18:49:42Z,"    Jsonb jsonb = JsonbBuilder.create();
    String jsonString = jsonb.toJson( new Point( 12, 3 ) );

is producing a stack overflow:

```
Jun 26, 2017 11:37:53 PM org.eclipse.yasson.internal.Marshaller marshall
SCHWERWIEGEND: Generating incomplete JSON
Exception in thread ""main"" java.lang.StackOverflowError
	at java.util.concurrent.ConcurrentHashMap$BaseIterator.<init>(ConcurrentHashMap.java:3389)
	at java.util.concurrent.ConcurrentHashMap$ValueIterator.<init>(ConcurrentHashMap.java:3430)
	at java.util.concurrent.ConcurrentHashMap$ValuesView.iterator(ConcurrentHashMap.java:4683)
	at org.eclipse.yasson.internal.ComponentMatcher.searchComponentBinding(ComponentMatcher.java:179)
	at org.eclipse.yasson.internal.ComponentMatcher.getSerializerBinding(ComponentMatcher.java:135)
	at org.eclipse.yasson.internal.serializer.SerializerBuilder.build(SerializerBuilder.java:72)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/32,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1ODQwMg==,yasson,314158402,32,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-07-10T16:23:17Z,2017-07-10T16:23:17Z,"java.awt.Point class is not as innocent as may look like. It is not a Java Bean because it has public fields (x, y) and getter and setter for these fields, but returning different type (double vs int). It also has getLocation method which looks like a getter but returns a new Point instance. All of these making problems using it with JSON-B API. It's not a Yasson bug. We added converters and serializers/deserializers to handle similar use cases. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDE1ODQwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/32,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4NDMwNg==,yasson,326084306,32,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-08-30T18:49:33Z,2017-08-30T18:49:33Z,I'll close because it looks like the discussion is over.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4NDMwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,yasson,247216048,33,module-info lacks dependencies,marschall,471021,Philippe Marschall,,CLOSED,2017-08-01T22:04:57Z,2018-02-23T19:38:48Z,"The [module-info](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/module-info.java#L14) lists only two dependencies:

* `java.json`
* `java.json.bind`

This is incomplete, several dependencies are missing including the following
* `java.desktop` used for `java.beans.Introspector` by [ClassParser](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/org/eclipse/yasson/internal/ClassParser.java#L18)
* `java.logging` used for `java.util.logging.Logger` by [ReflectionUtils](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/org/eclipse/yasson/internal/ReflectionUtils.java) and others
* `java.naming` used for `javax.naming.InitialContext` and `javax.naming.NamingException` by [JsonbComponentInstanceCreatorFactory](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/org/eclipse/yasson/internal/components/JsonbComponentInstanceCreatorFactory.java)
* CDI used for various classes by [BeanManagerInstanceCreator](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/org/eclipse/yasson/internal/components/BeanManagerInstanceCreator.java) and [JsonbComponentInstanceCreatorFactory](https://github.com/eclipse/yasson/blob/4b2e6d8c8b4f53d8144fdb188e72f67181d6d780/src/main/java/org/eclipse/yasson/internal/components/JsonbComponentInstanceCreatorFactory.java)

If you're unsure about your dependencies I would recommend using the excellent [jdeps](https://docs.oracle.com/javase/9/tools/jdeps.htm#JSWOR-GUID-A543FEBE-908A-49BF-996C-39499367ADB4) which does a great job of finding your dependencies.

Ideally an automated build can verify the correctness your module declaration.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY1ODExMQ==,yasson,319658111,33,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-08-02T12:31:30Z,2017-08-02T12:31:30Z,"Thank you @marschall 

I just added most of them except from CDI which unfortunately is not modularized yet.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY1ODExMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2MDI1NQ==,yasson,319660255,33,NA,marschall,471021,Philippe Marschall,,NA,2017-08-02T12:41:19Z,2017-08-02T12:41:19Z,"`java.logging` is still missing.

`java.desktop` is only used for `Introspector.decapitalize` likely a compliant reimplementation could be written and the dependency to `java.desktop` removed? Shall I open a separate issue for this?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2MDI1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2MzU3NA==,yasson,319663574,33,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-08-02T12:55:33Z,2017-08-02T12:55:33Z,"You're right. I misinterpreted the `jdeps` output. `java.logging` is now added. Also regarding the `java.desktop`, I think it would be better to let it be there. It's highly probable that we would need other APIs provided by that module in order to process Java beans.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2MzU3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NDA0MQ==,yasson,319664041,33,NA,marschall,471021,Philippe Marschall,,NA,2017-08-02T12:57:32Z,2017-08-02T12:57:32Z,"Very well. Should I close this issue, do you want to close it or leave it open?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NDA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/33,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NDMxNg==,yasson,319664316,33,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-08-02T12:58:40Z,2017-08-02T12:58:40Z,I'll close it. Thanks for the contribution.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NDMxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,yasson,249051176,34,NullPointerException when @JsonbTransient is applied on property without setter,ggam,2109040,Guillermo González de Agüero,,CLOSED,2017-08-09T14:32:06Z,2019-01-29T12:34:30Z,"I'm using Yasson 1.0.

Having the following mapping:
```
public class Foo implements Serializable {

    @JsonbTransient
    private String bar;

    public String getBar() {
        return bar;
    }
}
```

`AnnotationIntrospector` searches for a `@JsonbTransient` on a `setBar(String)` method and since it can't find it, it marks the property as ""writeable"":

```
if (transientInfo.contains(AnnotationTarget.PROPERTY)) {
    // ...

    if(!transientInfo.contains(AnnotationTarget.SETTER)){
        builder.setWriteTransient(true);
    }
}
```

But later on `introspectCustomization` it tries to do some checks on that setter method that does not exist:
```
if (builder.isWriteTransient()) {
    // ...
    introspector.checkTransientIncompatible(property.getSetterElement());
}
```

Resulting in the following stacktrace:
```
Caused by: java.lang.NullPointerException
	at org.eclipse.yasson.internal.AnnotationIntrospector.checkTransientIncompatible(AnnotationIntrospector.java:534)
	at org.eclipse.yasson.internal.model.PropertyModel.introspectCustomization(PropertyModel.java:159)
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:87)
	at org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.lambda$orderProperties$0(PropertyOrdering.java:79)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1620)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.orderProperties(PropertyOrdering.java:80)
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:60)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:100)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:57)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:79)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.writeTo(BaseJsonbJaxrsProvider.java:57)
	at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.writeTo$$super(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.weld.interceptor.proxy.TerminalAroundInvokeInvocationContext.proceedInternal(TerminalAroundInvokeInvocationContext.java:49)
	at org.jboss.weld.interceptor.proxy.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:77)
	at org.jboss.weld.probe.InvocationMonitor$InterceptorAction.proceed(InvocationMonitor.java:198)
	at org.jboss.weld.probe.InvocationMonitor$InterceptorAction.proceed(InvocationMonitor.java:194)
	at org.jboss.weld.probe.InvocationMonitor$Action.perform(InvocationMonitor.java:173)
	at org.jboss.weld.probe.InvocationMonitor.monitor(InvocationMonitor.java:139)
	at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.weld.interceptor.reader.SimpleInterceptorInvocation$SimpleMethodInvocation.invoke(SimpleInterceptorInvocation.java:73)
	at org.jboss.weld.interceptor.proxy.InterceptorMethodHandler.executeAroundInvoke(InterceptorMethodHandler.java:84)
	at org.jboss.weld.interceptor.proxy.InterceptorMethodHandler.executeInterception(InterceptorMethodHandler.java:72)
	at org.jboss.weld.interceptor.proxy.InterceptorMethodHandler.invoke(InterceptorMethodHandler.java:56)
	at org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler.invoke(CombinedInterceptorAndDecoratorStackMethodHandler.java:79)
	at org.jboss.weld.bean.proxy.CombinedInterceptorAndDecoratorStackMethodHandler.invoke(CombinedInterceptorAndDecoratorStackMethodHandler.java:68)
	at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.writeTo(Unknown Source)
	at org.jboss.resteasy.core.interception.AbstractWriterInterceptorContext.writeTo(AbstractWriterInterceptorContext.java:131)
	at org.jboss.resteasy.core.interception.ServerWriterInterceptorContext.writeTo(ServerWriterInterceptorContext.java:60)
	at org.jboss.resteasy.core.interception.AbstractWriterInterceptorContext.proceed(AbstractWriterInterceptorContext.java:120)
	at org.jboss.resteasy.security.doseta.DigitalSigningInterceptor.aroundWriteTo(DigitalSigningInterceptor.java:145)
	at org.jboss.resteasy.core.interception.AbstractWriterInterceptorContext.proceed(AbstractWriterInterceptorContext.java:124)
	at org.jboss.resteasy.plugins.interceptors.encoding.GZIPEncodingInterceptor.aroundWriteTo(GZIPEncodingInterceptor.java:100)
	at org.jboss.resteasy.core.interception.AbstractWriterInterceptorContext.proceed(AbstractWriterInterceptorContext.java:124)
	at org.jboss.resteasy.core.ServerResponseWriter.writeNomapResponse(ServerResponseWriter.java:98)
	at org.jboss.resteasy.core.SynchronousDispatcher.writeResponse(SynchronousDispatcher.java:473)
	... 62 more
```

Workaround for now is just annotate the getter.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTk3OTU4Ng==,yasson,325979586,34,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-08-30T12:48:38Z,2017-08-30T12:48:38Z,"I confirm that this issue exists. Roman, please take a look.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTk3OTU4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4MjAwNw==,yasson,326082007,34,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-08-30T18:41:14Z,2017-08-30T18:41:14Z,Fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4MjAwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4MjQ5OQ==,yasson,326082499,34,NA,ggam,2109040,Guillermo González de Agüero,,NA,2017-08-30T18:43:03Z,2017-08-30T18:43:03Z,"Thanks Dmitry!

El mié., 30 de agosto de 2017 20:41, Dmitry Kornilov <
notifications@github.com> escribió:

> Fixed.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/yasson/issues/34#issuecomment-326082007>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ACAucCpjFbZcWurXQEsVPjxT2rnP7C5Pks5sdazKgaJpZM4OyKsE>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA4MjQ5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQ2OTk4Mw==,yasson,334469983,34,NA,priyal85,15955561,,,NA,2017-10-05T13:47:38Z,2017-10-05T13:47:38Z,"Hi Dmitry,
I'm too facing the same issue when using Jersey which internally uses yasson for JSON bindings. In which version the fix is available. I'm still getting the issue in  1.0 which is released on June 2017.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQ2OTk4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDc0MjU5Nw==,yasson,334742597,34,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-10-06T12:37:12Z,2017-10-06T12:37:12Z,"Hi,

This issue is fixed and will be shipped in the next Yasson release (1.0.1). We are working on this release now and it will be available to public next week.

Thanks,
Dmitry

> On 5 Oct 2017, at 15:47, priyal85 <notifications@github.com> wrote:
> 
> Hi Dmitry,
> I'm too facing the same issue when using Jersey which internally uses yasson for JSON bindings. In which version the fix is available. I'm still getting the issue in 1.0 which is released on June 2017.
> 
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub <https://github.com/eclipse/yasson/issues/34#issuecomment-334469983>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AI6RHWJSa4yPAu5uL9B_04UL-lu-VloGks5spN38gaJpZM4OyKsE>.
> 

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDc0MjU5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzQ0OTA2MQ==,yasson,397449061,34,NA,bshannon,166819,Bill Shannon,,NA,2018-06-14T21:48:52Z,2018-06-14T21:48:52Z,"This bug was not completely fixed.  Here's a simple test case that still fails:

```
import javax.json.bind.annotation.JsonbTransient;
import javax.json.bind.*;

public class Test {

    //@JsonbTransient
    //private String    binString;

    @JsonbTransient
    public String getBinString() {
        return """";
    }

    public static void main(String argv[]) throws Exception {
        Jsonb jsonb = JsonbBuilder.create();
        Test t = new Test();
        String result = jsonb.toJson(t);
        System.out.println(result);
    }
}
```
If you uncomment the field declaration, it works.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzQ0OTA2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjg2NTAxMw==,yasson,436865013,34,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-08T03:54:32Z,2018-11-08T03:54:32Z,"hi @bshannon, I tested your code example on 1.0.2 and the the latest code level and it works as expected (empty result).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjg2NTAxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/34,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzUwOTU2NQ==,yasson,437509565,34,NA,bshannon,166819,Bill Shannon,,NA,2018-11-09T22:05:35Z,2018-11-09T22:05:35Z,"Ok, good.  Maybe someone should create a unit test and then close this bug?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzUwOTU2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/38,https://api.github.com/repos/eclipse-ee4j/yasson/issues/38,yasson,253124057,38,NullPointerException on REST request,jShiwaniGupta,16020088,Shiwani Gupta,jshiwanigupta@gmail.com,CLOSED,2017-08-26T21:30:28Z,2017-09-25T10:51:45Z,"Hi there,

I am getting NullPointerException on REST request through arquillian test.

Exception stacktrace : 
```[2017-08-27T02:54:22.730+0530] [WARNING] [javax.enterprise.web] [tid: _ThreadID=37 _ThreadName=http-thread-pool::http-listener-1(1)] [timeMillis: 1503782662730] [levelValue: 900] [[
  StandardWrapperValve[javax.ws.rs.core.Application]: Servlet.service() for servlet javax.ws.rs.core.Application threw exception
java.lang.NullPointerException
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.isJsonValueEvent(DeserializerBuilder.java:155)
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.build(DeserializerBuilder.java:110)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:85)
	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:99)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1091)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)
	at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:97)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:80)
	at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:74)
	at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:92)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:133)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1606)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:338)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.glassfish.tyrus.servlet.TyrusServletFilter.doFilter(TyrusServletFilter.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:250)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:256)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:654)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:593)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:155)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:371)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:238)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:480)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:180)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:242)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:539)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573)
	at java.lang.Thread.run(Thread.java:748)
```

Thanks for help :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/38,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTk4MDIyMQ==,yasson,325980221,38,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-08-30T12:51:16Z,2017-08-30T12:51:16Z,It's difficult to do anything without a code which reproduces the issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTk4MDIyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/38,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTk2MzAwMg==,yasson,329963002,38,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-09-16T11:31:55Z,2017-09-16T11:31:55Z,@jShiwaniGupta please attach a code with reproducible test otherwise I'll close this issue as not reproducible.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTk2MzAwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/38,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTg0NTg1Mg==,yasson,331845852,38,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-09-25T10:51:45Z,2017-09-25T10:51:45Z,We cannot reproduce it without a test scenario. Closing it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTg0NTg1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/39,https://api.github.com/repos/eclipse-ee4j/yasson/issues/39,yasson,253990486,39,Nillable customizations ignore default rules for processing classes,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2017-08-30T13:00:08Z,2017-08-30T18:11:27Z,"If JsonbNillable annotation is present on a class or jsonb engine is created with withNullValues(true) setting, private and static fields are present in the target JSON document with 'null' values regardless of the actual value they have. According to the spec, private and static fields must be ignored.

Sample:

```
@JsonbNillable
public class Person {
    private String name;
    private String profession;
    private String testField = ""privateField"";
    public static String staticField = ""staticField"";

    public Person() {
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProfession() {
        return profession;
    }

    public void setProfession(String profession) {
        this.profession = profession;
    }
}
```

Result of serialization:

```
{
    ""name"": ""Jason"",
    ""profession"": ""Argonauts Leader"",
    ""privateField"": null,
    ""staticField"": null
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/39,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA3Mzg5Mg==,yasson,326073892,39,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-08-30T18:11:27Z,2017-08-30T18:11:27Z,Fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjA3Mzg5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,yasson,255094360,40,Stackoverflow Error,jShiwaniGupta,16020088,Shiwani Gupta,jshiwanigupta@gmail.com,CLOSED,2017-09-04T17:37:36Z,2018-06-29T06:53:01Z,"Hi,

I am getting stackoverflow error in following scenario : 
Data saved using JPA(Eclipselink) and after the server restart, if data is fetched then greeting the stackoverflow error.

Stacktrace : 
```
2017-09-04T17:30:08.996971377Z java.lang.StackOverflowError
2017-09-04T17:30:08.996984815Z 	at sun.util.locale.StringTokenIterator.nextDelimiter(StringTokenIterator.java:109)
2017-09-04T17:30:08.997050159Z 	at sun.util.locale.StringTokenIterator.setStart(StringTokenIterator.java:96)
2017-09-04T17:30:08.997066663Z 	at sun.util.locale.StringTokenIterator.<init>(StringTokenIterator.java:50)
2017-09-04T17:30:08.997096277Z 	at sun.util.locale.LanguageTag.parse(LanguageTag.java:196)
2017-09-04T17:30:08.997107668Z 	at java.util.Locale.forLanguageTag(Locale.java:1568)
2017-09-04T17:30:08.997138290Z 	at org.eclipse.yasson.internal.JsonbConfigProperties.getLocale(JsonbConfigProperties.java:216)
2017-09-04T17:30:08.997150572Z 	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.toJson(AbstractDateTimeSerializer.java:77)
2017-09-04T17:30:08.997179518Z 	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.serialize(AbstractDateTimeSerializer.java:54)
2017-09-04T17:30:08.997190777Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.997220518Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:85)
2017-09-04T17:30:08.997231723Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
2017-09-04T17:30:08.997274067Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999246301Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999365846Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
2017-09-04T17:30:08.999382542Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
2017-09-04T17:30:08.999414631Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999429115Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999466913Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
2017-09-04T17:30:08.999478147Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
2017-09-04T17:30:08.999503797Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999514227Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999539978Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
2017-09-04T17:30:08.999550492Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
2017-09-04T17:30:08.999576241Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999586752Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999616181Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
2017-09-04T17:30:08.999626936Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
2017-09-04T17:30:08.999652493Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999662844Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999880012Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
2017-09-04T17:30:08.999906093Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
2017-09-04T17:30:08.999940652Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:08.999951916Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:08.999996590Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
2017-09-04T17:30:09.000010793Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
2017-09-04T17:30:09.000044388Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:09.000055802Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:09.000082359Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
2017-09-04T17:30:09.000092894Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
2017-09-04T17:30:09.000118355Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:09.000128790Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:09.000154230Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
2017-09-04T17:30:09.000164565Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
2017-09-04T17:30:09.000192021Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:09.000203033Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:09.000231254Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
2017-09-04T17:30:09.000242988Z 	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
2017-09-04T17:30:09.000270208Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
2017-09-04T17:30:09.000281476Z 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
2017-09-04T17:30:09.000309369Z 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzEzMDM4OA==,yasson,327130388,40,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-05T10:00:59Z,2017-09-05T10:00:59Z,"Hi @jShiwaniGupta 

Do you have bidirectional reference in you pojos? We don't check for bidirectional references in any way.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzEzMDM4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODk1MDUwNg==,yasson,328950506,40,NA,jShiwaniGupta,16020088,Shiwani Gupta,jshiwanigupta@gmail.com,NA,2017-09-12T19:04:46Z,2017-09-12T19:04:46Z,"Not sure atm, as I was just playing last week with sample project, after the restart of docker container, got stackoverflow error.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODk1MDUwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTM5NjIyNQ==,yasson,329396225,40,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-14T07:21:11Z,2017-09-14T07:21:11Z,"I am closing this for now, if you encounter this problem again please attach some reproducible snippet.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTM5NjIyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTIwODgxNQ==,yasson,401208815,40,NA,JTMMartins,27979204,Jose Martins,,NA,2018-06-29T00:05:42Z,2018-06-29T00:05:42Z,"I have the exact same problem, with Hibernate. But indeed I'm using @ManyToMany mappings in the pojos. I presume I have to fetch the data from the persistentBags Hibernate returns, and create new objects with standard types.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTIwODgxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/40,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTI2NTA0MA==,yasson,401265040,40,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-06-29T06:53:01Z,2018-06-29T06:53:01Z,Yasson doesn't handle bidirectional references. If you have class `A` with `b` field and class `B` with `a` field with their instances referencing each other you will have StackOverflowError raised.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTI2NTA0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/41,https://api.github.com/repos/eclipse-ee4j/yasson/issues/41,yasson,255544715,41,@JsonbProperty doesn't work,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2017-09-06T09:50:24Z,2017-09-25T10:50:38Z,"Hello,

I found no way to make it work.

```
public class Publication {
    private String doi;
    public String getDOI() {
        return doi;
    }
    public void setDOI(String doi) {
        this.doi = doi;
    }
}
```
In private field it is ignored. If I put @JsonbProperty(""doi"") either on getter, setter or both I get:

```
javax.json.bind.JsonbException: Property DOI clashes with property doi by read or write name in class es.elixir.bsc.biotoolz.model.Publication.
	at org.eclipse.yasson.internal.ClassParser.checkPropertyNameClash(ClassParser.java:155)
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:62)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1688)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:100)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:57)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at es.elixir.bsc.biotoolz.model.ModelTest.testJSOB(ModelTest.java:61)
	...
```
I use yasson 1.0 from maven repository.
Thank you.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/41,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQzNzU2OQ==,yasson,327437569,41,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-06T10:03:42Z,2017-09-06T10:03:42Z,"Thanks @redmitry , will take a look,
As a workaround you can rename access methods to getDoi() setDoi().","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQzNzU2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/41,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQzODY1Nw==,yasson,327438657,41,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2017-09-06T10:08:24Z,2017-09-06T10:08:24Z,"Yeah. 
It looks like clashes with default property naming strategy.

It works using PropertyNamingStrategy.UPPER_CAMEL_CASE
Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQzODY1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/42,https://api.github.com/repos/eclipse-ee4j/yasson/issues/42,yasson,256708140,42,Serializing a map doesn't use serializers,dAti-zz,6764745,DaTi,,CLOSED,2017-09-11T13:46:02Z,2018-02-23T19:38:48Z,"When I have a map with a Date object it isn't serialized according to serializers and configuration eg 

```
        Ghost ghost = new Ghost();
        ghost.setDateTime(LocalDateTime.now());

        Map<String, Object> properties = new HashMap<>();
        ghost.setProperties(properties);
        properties.put(""testtest"", LocalDateTime.now());

        JsonbConfig config = new JsonbConfig()
                .withDateFormat(""yyyy"", Locale.ENGLISH);

        Jsonb jsonb = JsonbBuilder.create(config);

        String json = jsonb.toJson(ghost);

        System.out.println(json);
        Pattern pattern = Pattern.compile(""\\d+:\\d+:\\d+"");
        Matcher hoursMatcher = pattern.matcher(json);
        Assert.assertFalse(""Should not contain hours"", hoursMatcher.find());
```

Returns this json:

`{""dateTime"":""2017"",""properties"":{""testtest"":""2017-09-11T15:44:34.979""}}
`

The first date is okay but the second one is not using the configured format (""yyyy"").

You can find a working example here: 

https://github.com/dAti/yassonkaput/tree/master/src/test/java","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/42,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTQzMTQ4Nw==,yasson,331431487,42,NA,ymajoros,2889296,Yannick Majoros,yannick@valuya.be,NA,2017-09-22T12:20:01Z,2017-09-22T12:20:01Z,Any idea when this will be released?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTQzMTQ4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/43,https://api.github.com/repos/eclipse-ee4j/yasson/issues/43,yasson,256984824,43,Date format customisation is ignored if custom instantiation is used,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2017-09-12T09:54:39Z,2018-02-23T19:38:48Z,"Use case:

```java
import java.time.LocalDate;
import java.util.Locale;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.annotation.JsonbCreator;
import javax.json.bind.annotation.JsonbDateFormat;
import javax.json.bind.annotation.JsonbProperty;

public class CustomDateFormatSample {
    public static final String JSON_DATE = ""{\""localDate\"":\""05-09-2017\""}"";

    public static final class DateProperty {
        @JsonbDateFormat(value = ""dd-MM-yyyy"", locale = ""nl-NL"")
        public LocalDate localDate = LocalDate.now();

        @Override
        public String toString() {
            return String.format(""DateProperty[%s]"", localDate);
        }
    }

    public static final class DateConstructor {
        @JsonbDateFormat(value = ""dd-MM-yyyy"", locale = ""nl-NL"")
        public LocalDate localDate;

        @JsonbCreator
        public DateConstructor(@JsonbProperty(""localDate"") LocalDate localDate) {
            this.localDate = localDate;
        }

        /*- This has the same error as the constructor without @JsonbDateFormat
        @JsonbCreator
        public DateConstructor(@JsonbProperty(""localDate"") @JsonbDateFormat(value = ""dd-MM-yyyy"", locale = ""nl-NL"") LocalDate localDate) {
            this.localDate = localDate;
        }
        */

        @Override
        public String toString() {
            return String.format(""DateConstructor[%s]"", localDate);
        }
    }

    public static final class DateFactory {
        public LocalDate localDate;

        private DateFactory(LocalDate localDate) {
            this.localDate = localDate;
        }

        @JsonbCreator
        public static DateFactory withLocalDate(@JsonbProperty(""localDate"") LocalDate localDate) {
            return new DateFactory(localDate);
        }

        @Override
        public String toString() {
            return String.format(""DateFactory[%s]"", localDate);
        }
    }

    public static void main(String[] args) {

        try {
            System.out.println(""Handle class with plain date field with custom format"");
            System.out.println();
            handleClassWithPlainDateField();
            System.out.println();
        } catch (Exception e) {
            System.out.println();
            System.out.println(""Exception handling class with plain date field with custom format:"");
            e.printStackTrace();
            System.out.println();
        }

        try {
            System.out.println(
                    ""Handle class with plain date field with custom format set through JsonbCreator constructor"");
            System.out.println();
            handleClassWithPlainDateFieldSetThroughJsonbCreatorConstructor();
            System.out.println();
        } catch (Exception e) {
            System.out.println();
            System.out.println(
                    ""Exception handling class with plain date field with custom format set through JsonbCreator constructor:"");
            e.printStackTrace();
            System.out.println();
        }

        try {
            System.out.println(
                    ""Handle class with plain date field with custom format set through JsonbCreator factory method"");
            System.out.println();
            handleClassWithPlainDateFieldSetThroughJsonbCreatorFactoryMethod();
            System.out.println();
        } catch (Exception e) {
            System.out.println();
            System.out.println(
                    ""Exception handling class with plain date field with custom format set through JsonbCreator factory method:"");
            e.printStackTrace();
            System.out.println();
        }
    }

    private static void handleClassWithPlainDateField() {
        Jsonb jsonb = JsonbBuilder.create();

        DateProperty dateProperty = new DateProperty();
        System.out.println(jsonb.toJson(dateProperty));
        DateProperty datePropertyFromJson = jsonb.fromJson(JSON_DATE, DateProperty.class);
        System.out.println(datePropertyFromJson);
        System.out.println();
    }

    private static void handleClassWithPlainDateFieldSetThroughJsonbCreatorConstructor() {
        Jsonb jsonb = JsonbBuilder.create();

        DateConstructor dateConstructor = new DateConstructor(LocalDate.now());
        System.out.println(jsonb.toJson(dateConstructor));
        /*
         * Exception on the next line. The AbstractDateTimeDeserializer does not use a
         * custom date formatter, and tries to parse JSON_DATE with
         * LocalDateTypeDeserializer.parseDefault as ISO_LOCAL_DATE.
         */
        DateConstructor dateConstructorFromJson = jsonb.fromJson(JSON_DATE, DateConstructor.class);
        System.out.println(dateConstructorFromJson);
        System.out.println();
    }

    private static void handleClassWithPlainDateFieldSetThroughJsonbCreatorFactoryMethod() {
        /*
         * With the custom date format through an annotation on the field fails like in
         * the previous examples. Check here with the custom date format set through the
         * JsonbConfig.
         */
        JsonbConfig config = new JsonbConfig().withDateFormat(""dd-MM-yyyy"", new Locale(""nl"", ""NL""));
        Jsonb jsonb = JsonbBuilder.create(config);

        DateFactory dateFactory = DateFactory.withLocalDate(LocalDate.now());
        System.out.println(jsonb.toJson(dateFactory));
        /*
         * Exception on the next line. The AbstractDateTimeDeserializer does not use a
         * custom date formatter, and tries to parse JSON_DATE with
         * LocalDateTypeDeserializer.parseDefault as ISO_LOCAL_DATE.
         */
        DateFactory dateFactoryFromJson = jsonb.fromJson(JSON_DATE, DateFactory.class);
        System.out.println(dateFactoryFromJson);
        System.out.println();
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/43,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTUwMDYxOA==,yasson,329500618,43,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-14T14:30:58Z,2017-09-14T14:30:58Z,"Fixing introspecting creator parameters in attached pull request, I am not sure though we should also merge customization from property field / getter / setter.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTUwMDYxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/44,https://api.github.com/repos/eclipse-ee4j/yasson/issues/44,yasson,257150723,44,java.time.ZonedDateTime parsing error,jGauravGupta,15934072,Gaurav Gupta,gaurav.gupta.jc@gmail.com,CLOSED,2017-09-12T19:13:26Z,2017-09-14T05:47:06Z,"Getting `DateTimeParseException` exception for `ZoneDateTime`  '2017-09-06T18:30:00.000Z' during deserialization process.

```
java.time.format.DateTimeParseException: Text '2017-09-06T18:30:00.000Z' could not be parsed, unparsed text found at index 10
	at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1952)
	at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1851)
	at java.time.LocalDate.parse(LocalDate.java:400)
	at org.eclipse.yasson.internal.serializer.LocalDateTypeDeserializer.parseDefault(LocalDateTypeDeserializer.java:46)
	at org.eclipse.yasson.internal.serializer.LocalDateTypeDeserializer.parseDefault(LocalDateTypeDeserializer.java:28)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeDeserializer.deserialize(AbstractDateTimeDeserializer.java:62)
	at org.eclipse.yasson.internal.serializer.AbstractValueTypeDeserializer.deserialize(AbstractValueTypeDeserializer.java:64)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:163)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:84)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
	at org.eclipse.yasson.internal.serializer.CollectionDeserializer.deserializeNext(CollectionDeserializer.java:112)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:84)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:163)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:84)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:85)
	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:99)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1091)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)
	at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:97)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:80)
	at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:74)
	at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:92)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:133)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/47,https://api.github.com/repos/eclipse-ee4j/yasson/issues/47,yasson,258233404,47,Serialising enum uses toString() method not name() as specified in section 3.9 of specification,readlearncode,20543632,ReadLearnCode,,CLOSED,2017-09-16T14:04:20Z,2018-02-23T19:38:49Z,"**Given the enum:**

```
public enum Binding {
    HARD_BACK {
        public String toString() {
            return ""Hard Back"";
        }
    }, SOFT_BACK {
        public String toString() {
            return ""Soft Back"";
        }
    }
}
```

**JSON is:**

```
{
  ""binding"": ""Hard Back""
}
```

The binding value is the value returned by the overridden `toString()` method rather than the `name()` method. This is in contrast to my reading of the specification, which says:

> 3.9 Enum
> Serialization of an Enum instance to a JSON String value MUST follow the conversion process defined in javadoc specification for their name().
> Deserialization of a JSON value into an enum instance MUST be done by calling the enum’s valueOf(String) method.

The name method returns the identifier rather than the `toString()` value.

**Dependecies:**
org.eclipse/yasson: 1.0
javax.json.bind-api: 1.0
org.glassfish/javax.json: 1.1
javax.json/javax.json-api: 1.1

CODE: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/main/java/com/readlearncode/devWorks/overview/EnumExample.java
TEST: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/test/java/com/readlearncode/devWorks/overview/EnumExampleTest.java","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/48,https://api.github.com/repos/eclipse-ee4j/yasson/issues/48,yasson,258233432,48,Serializing 'naked' enum throws exception java.lang.IllegalAccessException,readlearncode,20543632,ReadLearnCode,,CLOSED,2017-09-16T14:04:44Z,2018-02-23T19:38:49Z,"Serialising an enum throws the following edited exception:

```
javax.json.bind.JsonbException: Error getting value on: 
sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl@1f57539
...
Caused by: java.lang.IllegalAccessException: 
Class org.eclipse.yasson.internal.model.GetFromGetter can not access a member of class 
sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl 
with modifiers ""public final""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Method.invoke(Method.java:491)
	at org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:28)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
```

**The enum:**
```
public enum Binding {
    HARD_BACK {
        public String toString() {
            return ""Hard Back"";
        }
    }, SOFT_BACK {
        public String toString() {
            return ""Soft Back"";
        }
    }
}
```

The serialisation code: `JsonbBuilder.create().toJson(Binding.HARD_BACK);`

**Dependecies:**
org.eclipse/yasson: 1.0
javax.json.bind-api:  1.0
org.glassfish/javax.json: 1.1
javax.json/javax.json-api: 1.1

CODE: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/main/java/com/readlearncode/devWorks/overview/EnumExample.java
TEST: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/test/java/com/readlearncode/devWorks/overview/EnumExampleTest.java

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/48/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/49,https://api.github.com/repos/eclipse-ee4j/yasson/issues/49,yasson,258233466,49,Deserialisation of nested class fails with compliant: No default constructor found,readlearncode,20543632,ReadLearnCode,,CLOSED,2017-09-16T14:05:15Z,2019-01-29T12:16:07Z,"Attempting to deserialize nested class with constructor defined throws **JsonbException: No default constructor found**. 

**Given Json String:**
` {""name"":""Inner Class""}`

and 

**Class structure:**
```
public class OuterClass {
    public OuterClass() {}
    public String name = ""OuterClass"";
    public class InnerClass {
        public InnerClass() {}
        public String name = ""Inner Class"";
    }
}
```

My reading of the specification section 3.7.2 (Nested Classes) and 3.7.1 (Scope and Field access strategy) is that the above deserialization scenario should work.

Note that adding default constructors does not fix it.

POM: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/pom.xml
CODE: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/main/java/com/readlearncode/devWorks/overview/NestedClassExample.java
TEST: https://github.com/readlearncode/Java-EE-8-Sampler/blob/master/json-b-1-0/src/test/java/com/readlearncode/devWorks/overview/NestedClassExampleTest.java



","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/49/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/49,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDE4MzIzMg==,yasson,330183232,49,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-09-18T10:38:36Z,2017-09-18T10:38:36Z,"In section 3.7 it is defined:

> Any instance passed to a deserialization operation must have a public or protected no-argument
> constructor. Implementations SHOULD throw an error if this condition is not met.

(Throwing an error because of missing no-arg constructor is what happens now using yasson 1.0)

By nature of non-static nested classes, those cannot have default no-arg constructor, because of outer class instance passed inside. 

@m0mus what is your objection on that? Does quoted 3.7 statement apply for non-static nested classes? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDE4MzIzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/49,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTM4ODQzMg==,yasson,359388432,49,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-01-22T10:51:20Z,2018-01-22T10:51:20Z,"@readlearncode Thanks for pointing on this. This is a spec issue. Non-static inner classes support should be removed completely or for deserialization only. I created an issue in JSON-B spec issues tracker here:
https://github.com/javaee/jsonb-spec/issues/68

Closing this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTM4ODQzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/54,https://api.github.com/repos/eclipse-ee4j/yasson/issues/54,yasson,261408854,54,List<> property setter is not called if not annotated.,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2017-09-28T18:02:40Z,2017-12-28T10:47:22Z,"Hello,

I have both getter / setter for the List.

```
private List<Publication> publications;
@JsonbProperty(""publication"")
public List<Publication> getPublications() {
    return publications;
}
@JsonbProperty(""publication"")
public void setPublications(List<Publication> publications) {
}
```
When where is no annotation for the setter, it is not called on the deserialization.

Is this normal?

Kind regards,

P.S. in JAXB to deserialize it is enough to have only getter which returns an empty collection.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/54,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjkzOTI0MQ==,yasson,332939241,54,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2017-09-28T19:26:46Z,2017-09-28T19:26:46Z,"Hi

You can place `@JsonbProperty` on top of field, getter or setter separately. So if you don't place it on top of the setter, it would not be called on deserialization. If you need it on both serialization and deserialization, it would be better to put it once on top of the property itself.

Regards
Ehsan","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjkzOTI0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/54,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjk1NTM0Nw==,yasson,332955347,54,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2017-09-28T20:31:59Z,2017-09-28T20:31:59Z,"I think putting it on the top of private property would have no effect.
On the other hand with the example the problem is (as I understand) that whithout @JsonbProperty on the setter it expects ""publication**s**"". This is the difference between JAXB / Jackson.

Tank you very much for the clarification.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjk1NTM0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/56,https://api.github.com/repos/eclipse-ee4j/yasson/issues/56,yasson,265589134,56,Deserialization not working for classes with a protected no-arg constructor,dirkweil,1897191,Dirk Weil,,CLOSED,2017-10-15T17:36:28Z,2017-10-16T22:03:03Z,"
[Dog.txt](https://github.com/eclipse/yasson/files/1385635/Dog.txt)
In my reading section 3.7 of the spec allows a class with (just an) protected no-arg constructor to be deserialized with JSON-B. Yasson complains abount this:

Exception in thread ""main"" javax.json.bind.JsonbException: Can't create instance
	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:191)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:186)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.getInstance(ObjectDeserializer.java:92)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:62)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
	at de.gedoplan.json.Dog.main(Dog.java:43)
Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.internal.ReflectionUtils can not access a member of class de.gedoplan.json.Dog with modifiers ""protected""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:189)
	... 9 more

A simple test class is attached (as .txt, because I couldn't attach a .java file ...)



","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/56,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzA1Njg4NA==,yasson,337056884,56,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-10-16T22:02:24Z,2017-10-16T22:02:24Z,"This issue has been fixed in Yasson 1.0.1 be this pull request: https://github.com/eclipse/yasson/pull/37. 
This version is not released yet. Please try a snapshot version.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzA1Njg4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/57,https://api.github.com/repos/eclipse-ee4j/yasson/issues/57,yasson,265830434,57,Unexpected behaviour from @JsonbTypeAdapter when marking a field,readlearncode,20543632,ReadLearnCode,,CLOSED,2017-10-16T16:21:22Z,2018-02-23T19:38:49Z,"Changing the order of the fields in a Java Bean changes the behaviour of `JsonbAdapter`.

Given the `JsonbAdapter` :
```
public class FirstNameAdapter implements JsonbAdapter<String, JsonValue> {
    @Override
    public JsonValue adaptToJson(String firstName) {
        return Json.createValue(firstName.subSequence(0,1).toString());
    }
    @Override
    public String adaptFromJson(JsonValue json) {
        return json.toString();
    }
}
```
And the Java Bean:

```
public class Author {
    @JsonbTypeAdapter(FirstNameAdapter.class)
    private String firstName;
    private String lastName;
    // plumbing code omitted
}
```
The `adaptToJson()` method is called twice, once for the `firstName` field and again for the `lastName` field. Change the order of the fields as follows:

```
public class Author {
    private String lastName;   
    @JsonbTypeAdapter(FirstNameAdapter.class)
    private String firstName;
    // plumbing code omitted
}
```
and only the `firstName` field is passed to the `adaptToJson()` method.

Code is here: https://github.com/readlearncode/Java-EE-8-Sampler/tree/master/json-b-1-0/src/main/java/com/readlearncode/devWorks/part2/adaptors

Unit tests here: https://github.com/readlearncode/Java-EE-8-Sampler/tree/master/json-b-1-0/src/test/java/com/readlearncode/devWorks/part2/adapter
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/58,https://api.github.com/repos/eclipse-ee4j/yasson/issues/58,yasson,265832244,58,Inconsistency between spec and Yasson,readlearncode,20543632,ReadLearnCode,,CLOSED,2017-10-16T16:26:57Z,2019-01-29T12:16:07Z,"The relates to the implementation of custom Serializers and Deserializers

In the spec (4.7.2 Serializers/Deserializers) the annotations for setting the custom Serializers and Deserializers are specified as `@JsonbSerializer` and `@JsonbDeserializer` however in Yasson they are implemented as `@JsonbTypeSerializer` and `@JsonbTypeDeserializer`.

This would become an issue when swapping out one implementation of JSON-B out for another.


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/58,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA2OTExOQ==,yasson,368069119,58,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-23T16:56:14Z,2018-02-23T16:56:14Z,"You are right. Spec document has to be updated. @JsonbTypeSerializer and @JsonbTypeDeserializer annotations are actually defined in JSON-B API, so it's not an inconsistency between Yasson and the spec, but inconsistency within a spec.
I created https://github.com/javaee/jsonb-spec/issues/70 in JSON-B spec issues tracker. 
Closing this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA2OTExOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,yasson,266537611,59,Can Yasson support something like the @JsonIgnoreProperties of Jackson?,hei1233212000,738148,Harry Chan,,OPEN,2017-10-18T15:30:15Z,2021-08-26T02:23:31Z,"I encountered an issue in Groovy - https://github.com/hei1233212000/yasson-groovy-not-working
where Yasson is trying to invoke some getter which has method arguments needed. e.g: MetaClass.getAttribute(Class sender, Object receiver, String messageName, boolean useSuper)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTQ0MjkzMg==,yasson,349442932,59,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-12-05T21:12:33Z,2017-12-05T21:12:33Z,"I don't see problems doing it. @bravehorsie, any concerns?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTQ0MjkzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTU5OTg0NQ==,yasson,349599845,59,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-12-06T10:34:43Z,2017-12-06T10:34:43Z,"We do have [@JsonbTransient](https://static.javadoc.io/javax.json.bind/javax.json.bind-api/1.0/javax/json/bind/annotation/JsonbTransient.html) to supply similar functionality.

There are no problems adding it, but the annotation itself should be added to jsonb spec project.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTU5OTg0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYwMjM5OA==,yasson,349602398,59,NA,hei1233212000,738148,Harry Chan,,NA,2017-12-06T10:45:25Z,2017-12-06T10:45:25Z,"Hi @bravehorsie, I see a little bit different between the [@JsonIgnoreProperties](https://fasterxml.github.io/jackson-annotations/javadoc/2.6/com/fasterxml/jackson/annotation/JsonIgnoreProperties.html) and the [@JsonbTransient](https://static.javadoc.io/javax.json.bind/javax.json.bind-api/1.0/javax/json/bind/annotation/JsonbTransient.html)

You can NOT mark the field or property as transient by [@JsonbTransient](https://static.javadoc.io/javax.json.bind/javax.json.bind-api/1.0/javax/json/bind/annotation/JsonbTransient.html) when you could not modify the source code. (e.g: I extend the Class from from other projects or using the POGO, my example)

And I think it would be great to put it in the JSON-B spec but I hope Yasson could support it earlier than the spec is confirmed to be modified.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYwMjM5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYxMDcyNw==,yasson,349610727,59,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-12-06T11:22:59Z,2017-12-06T11:22:59Z,"@hei1233212000 sure, I didn't mean they are identical. 

If you can't modify the code, how would you apply @JsonbIgnoreProperties? It's meant to be used class level right?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYxMDcyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYxMTEyMg==,yasson,349611122,59,NA,hei1233212000,738148,Harry Chan,,NA,2017-12-06T11:24:47Z,2017-12-06T11:24:47Z,"@bravehorsie yes, use the @jsonbignoreproperties in class level","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTYxMTEyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkwOTg5Nw==,yasson,438909897,59,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T04:04:55Z,2018-11-15T04:04:55Z,"I know I'm super late to this issue, but @hei1233212000 I believe the immediate issue you were facing was resolved a while back by PR #66. 

----

Aside from the specific scenario, I agree that a general annotation may be useful at the class level.

For example if we have:
```java
// Don't have access to this source
public class ThirdPartyClass {
  public String junk1;
  public String junk2;
  public String important;
}
```

We could use a class level annotation as discussed above to blacklist certain properties, such as:
```java
@JsonbIgnoreProperties({""junk1"", ""junk2""})
public class MyClass extends ThirdPartyClass {}
```

However, I think it would be more useful to white-list properties rather than black-list them, for example:
```java
@JsonbProperties({""important""})
public class MyClass extends ThirdPartyClass {}
```

@bravehorsie any thoughts on either of the above approaches?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkwOTg5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTU4ODI5Mw==,yasson,439588293,59,NA,hei1233212000,738148,Harry Chan,,NA,2018-11-17T04:53:56Z,2018-11-17T04:53:56Z,"Thank you @aguibert !

Besides, I think white list and black list would be useful in different scenarios. For an example, the class has many fields but you only want to ignore one or two fields. :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTU4ODI5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2OTU5NA==,yasson,446569594,59,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2018-12-12T12:23:57Z,2018-12-12T12:23:57Z,"TBH, this sounds pretty much like a mix-in from Jackson:
https://github.com/FasterXML/jackson-docs/wiki/JacksonMixInAnnotations

The advantage of jackson: Mix-Ins can also be applied to final classes (which would not work in your case).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2OTU5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/59,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42ANg1,yasson,906025013,59,NA,fatihpense,918653,Fatih Pense,,NA,2021-08-26T02:23:31Z,2021-08-26T02:23:31Z,"For a quick solution:
```java
    @JsonbTransient
    public groovy.lang.MetaClass metaClass;
```
I think the current proper way is to create a custom serializer. `@JsonbIgnoreProperties` in the spec can be much nicer.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42ANg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/60,https://api.github.com/repos/eclipse-ee4j/yasson/issues/60,yasson,268404272,60,Fields marked as JSON properties by PropertyVisibilityStrategy are not (de)serialized,dirkweil,1897191,Dirk Weil,,CLOSED,2017-10-25T13:47:06Z,2019-01-29T12:16:07Z,"Yasson ignores private fields without public setters for desrialization even if fields are marked as JSON properties by means of a PropertyVisibilityStrategy:

Assuming the classes

@JsonbVisibility(JsonAccessType.AllFieldsVisibilityStrategy.class)
public class Country {

  private String name;

  public String getName() {
    return this.name;
  }
// ...
}

public interface JsonAccessType {
  public static class AllFieldsVisibilityStrategy implements PropertyVisibilityStrategy {
    @Override
    public boolean isVisible(Field field) {
      return true;
    }

    @Override
    public boolean isVisible(Method method) {
      return false;
    }
  }
// ...
}

the field Country.name will be ignored for deserialization although it ist marked as JSON property in AllFieldsVisibilityStrategy.

This applies to Yasson at least up to 1.0.1-SNAPSHOT.

A test case is here: https://github.com/GEDOPLAN/issues-jsonb-deserialize-visibilitystrategy. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/60,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTg4NDIyNQ==,yasson,365884225,60,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-02-15T10:22:01Z,2018-02-15T10:22:01Z,"Hi,
I was able to reproduce this issue at version you have mentioned. I have also verified that this is no longer an issue when I ran your test against the master.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTg4NDIyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/61,https://api.github.com/repos/eclipse-ee4j/yasson/issues/61,yasson,268824992,61,Can not serialize generic collection wrapped in generic class,stjepano,1032263,Stjepan Obranković,,CLOSED,2017-10-26T16:20:25Z,2020-12-23T21:57:21Z,"When trying to serialize a generic collection in generic class like this:

```
public class CollectionWrapper<T> {

    private Collection<T> data;

    // default constructor, data constructors, getters, setters ...
}

// ...

Jsonb jsonb = JsonbBuilder.create();
CollectionWrapper<String> collectionWrapper = new CollectionWrapper<>(Collections.emptyList());
// or following ...
// CollectionWrapper<String> collectionWrapper = new CollectionWrapper<>(new ArrayList<>());
// CollectionWrapper<String> collectionWrapper = new CollectionWrapper<>(Arrays.asList(""itemA"", ""itemB""));
String json = jsonb.toJson(collectionWrapper);
````

throws an exception:

```
Oct 26, 2017 5:13:54 PM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Generating incomplete JSON

java.lang.IllegalStateException: Generic bound not found for type T declared in class com.stjepano.bugs.yasson.CollectionWrapper.

	at org.eclipse.yasson.internal.ReflectionUtils.resolveTypeArguments(ReflectionUtils.java:166)
	at org.eclipse.yasson.internal.ReflectionUtils.resolveType(ReflectionUtils.java:109)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:88)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at com.stjepano.bugs.yasson.JsonbTest.shouldBeAbleToSerializeGenericCollectionWrapperWithSomeItems(JsonbTest.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	...
```

Was expecting to get `{data:[]}`

It works if I provide runtimeType like this:

```
String json = jsonb.toJson(collectionWrapper, new CollectionWrapper<String>() {}.getClass().getGenericSuperclass());
```

but still this seems as a bug

Java:
```
java version ""1.8.0_92""
Java(TM) SE Runtime Environment (build 1.8.0_92-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)
```

Dependencies:

```
    // https://mvnrepository.com/artifact/org.eclipse/yasson
    compile group: 'org.eclipse', name: 'yasson', version: '1.0'
    // https://mvnrepository.com/artifact/org.glassfish/javax.json
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1'
```

Test case:

https://github.com/stjepano/yasson-generic-collection-wrapper-bug","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/61,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDQ4ODYzMw==,yasson,750488633,61,NA,NeerajSachdeva,19988825,,,NA,2020-12-23T21:56:57Z,2020-12-23T21:56:57Z,"Thanks a lot for you suggestion, it helped me get rid of this log which our devops team was complaining a lot  LOL
[12/16/20 11:18:57:960 EST] 00000134 org.eclipse.yasson.internal.ReflectionUtils W Generic bound not found for type K declared in class com.MyBlahBlahClass
[12/16/20 11:18:57:960 EST] 00000134 org.eclipse.yasson.internal.ReflectionUtils W Generic bound not found for type T declared in class com.MyBlahBlahClass

I'm gonna try if I can implement a serializer on top of this and use reflection and make this dynamic. Will share my code If I'm able to do that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDQ4ODYzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/62,https://api.github.com/repos/eclipse-ee4j/yasson/issues/62,yasson,268956517,62,Consider renaming messages.properties,codyebberson,749094,Cody Ebberson,cody@ebberson.com,CLOSED,2017-10-27T00:56:21Z,2019-01-29T12:16:07Z,"Yasson's resource strings for error messages are stored in ""yasson/src/main/resources/messages.properties"".

Unfortunately, this is a very common file name.  If a developer creates a ""fat jar"" (for example, with the Maven Shade Plugin), then the ""messages.properties"" file can be overwritten.  If that happens, users are confronted with a rather confusing situation.

```
Caused by: java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key beanManagerNotFoundNoProvider
	at java.util.ResourceBundle.getObject(ResourceBundle.java:450)
	at java.util.ResourceBundle.getString(ResourceBundle.java:407)
	at org.eclipse.yasson.internal.properties.Messages.getMessage(Messages.java:59)
	at org.eclipse.yasson.internal.properties.Messages.getMessage(Messages.java:46)
	at org.eclipse.yasson.internal.components.JsonbComponentInstanceCreatorFactory.getComponentInstanceCreator(JsonbComponentInstanceCreatorFactory.java:50)
	... 17 more
```

There are potential workarounds for the developer, such as configuring the Shade plugin with ```AppendingTransformer```, but those are cumbersome, and frankly unnecessary hassle.

I recommend renaming the file to something unique (i.e., ""yasson.messages.properties"") or moving into a unique subdirectory.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/62/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/63,https://api.github.com/repos/eclipse-ee4j/yasson/issues/63,yasson,268963478,63,"Ignore ""get""/""is"" methods that have arguments",codyebberson,749094,Cody Ebberson,cody@ebberson.com,CLOSED,2017-10-27T01:47:56Z,2019-01-29T12:16:07Z,"Example:

```java
public static class Widget {

    public String getFoo() {
        return ""foo"";
    }

    public String getBar(final int baz) {
        return ""bar"" + baz;
    }
}

@Test
public void testGetWithArgs() {
    assertEquals(""{\""foo\"":\""foo\""}"", JsonbBuilder.create().toJson(new Widget()));
}
```

Actual:
```
java.lang.IllegalArgumentException: wrong number of arguments
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:29)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:72)
	at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:253)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:78)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:119)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/63,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTQ0MjQ2NA==,yasson,349442464,63,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2017-12-05T21:10:38Z,2017-12-05T21:10:38Z,Pull request was merged. Closing the issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTQ0MjQ2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,yasson,277940995,67,JsonArray of type with custom deserializer not properly deserialized.,etay2000,25994877,,,CLOSED,2017-11-29T23:08:19Z,2019-01-29T12:16:07Z,"```
public enum FooEnum {
        FOO,
        BAR,
        BAZ;
    }

// Custom Deserializer registered on JsonbConfig
public class FooEnumDeserializer implements JsonbDeserializer<FooEnum> {

    @Override
    public FooEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext, Type type) {
        String name = jsonParser.getString().toUpperCase();
        return FooEnum.valueOf(name);
    }

}

Type type = new HashSet<FooEnum>() {}.getClass().getGenericSuperclass();
JsonArray arr = Json.createArrayBuilder()
                .add(""foo"")
                .add(""bar"")
                .add(""baz"")
                .build();

Set<FooEnum> values = getJsonb().fromJson(arr.toString(), type);
// values only contains first item from the JsonArray [ 'foo' ]

```

Only the first item in the array is deserialized, so the resulting collection always only contains one item.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDkxMzAxOQ==,yasson,364913019,67,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-02-12T12:47:51Z,2018-02-12T12:47:51Z,I was not able to reproduce this issue against master branch. Could you please tell me which version do you use it against?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDkxMzAxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk1NDg4OA==,yasson,364954888,67,NA,etay2000,25994877,,,NA,2018-02-12T15:22:27Z,2018-02-12T15:22:27Z,"I just double checked and I can reproduce it on 1.0.1. I still only get 1 value in the resulting set. 
The last line in my example should actually be: 
`// values only contains first item from the JsonArray [ 'FOO' ]`
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk1NDg4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk5Nzk0Ng==,yasson,364997946,67,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-12T17:28:30Z,2018-02-12T17:28:30Z,"There is a chance that this issue is fixed in master but not fixed in 1.0.1. 
@Verdent, can you please check it. 
If so, close the issue as fixed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk5Nzk0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/67,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTg4NDYxNQ==,yasson,365884615,67,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-02-15T10:23:35Z,2018-02-15T10:23:35Z,I have verified that this is issue at 1.0.1 but no longer at 1.0.2. I would say it is ok to close this issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTg4NDYxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,yasson,278513052,68,Date marshal / unmarshal fails,jhanders34,30079386,Jared Anderson,jhanders@us.ibm.com,CLOSED,2017-12-01T16:03:45Z,2019-01-29T12:16:07Z,"The JSON-B spec states:

3.5.1 java.util.Date, Calendar, GregorianCalendar
The serialization format of java.util.Date, Calendar, GregorianCalendar instances with no time
information is ISO_DATE.

If time information is present, the format is ISO_DATE_TIME.

Implementations MUST support deserialization of both ISO_DATE and ISO_DATE_TIME into
java.util.Date, Calendar and GregorianCalendar instances.

----

Presently yasson fails when trying unmarshal an ISO_DATE string.  Here is the exception that is seen when it tries to unmarshal 28-03-1955:

javax.json.bind.JsonbException: Error parsing date from value: 28-03-1955
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeDeserializer.deserialize(AbstractDateTimeDeserializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractValueTypeDeserializer.deserialize(AbstractValueTypeDeserializer.java:64)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:163)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:84)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:79)

------

Additionally yasson is having an issue with marshaling as well.  java.sql.Date does not have a time component.  As such the spec states it should use ISO_DATE format instead of ISO_DATE_TIME format when marshaling.  Here is the exception that is seen:

java.lang.UnsupportedOperationException
	at java.sql.Date.toInstant(Date.java:315)
	at org.eclipse.yasson.internal.serializer.DateTypeSerializer.formatDefault(DateTypeSerializer.java:49)
	at org.eclipse.yasson.internal.serializer.DateTypeSerializer.formatDefault(DateTypeSerializer.java:29)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.toJson(AbstractDateTimeSerializer.java:77)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.serialize(AbstractDateTimeSerializer.java:54)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:85)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:133)

The reason this exception happens is that yasson appears to be assuming that it is a java.util.Date and toInstant() will work.  Unfortunately toInstant() is not supported on java.sql.Date.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODUzNjMxNQ==,yasson,348536315,68,NA,jhanders34,30079386,Jared Anderson,jhanders@us.ibm.com,NA,2017-12-01T16:12:57Z,2017-12-01T16:12:57Z,"I have not tried it, but I assume java.time.LocalDate will also have this same issue since it does not include a time component.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODUzNjMxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTQxNzMzNQ==,yasson,351417335,68,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-12-13T15:04:22Z,2017-12-13T15:04:22Z,@jhanders34 can you please provide an example? What type are you deserializing ISO_DATE into? ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTQxNzMzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDE0NzE0NQ==,yasson,354147145,68,NA,jcoronel94,15075730,Jonathan Coronel,,NA,2017-12-27T17:29:02Z,2017-12-27T17:29:02Z,"@jhanders34 @bravehorsie Experiencing the 2nd issue as well.  I have an entity as follows (truncated for brevity). The Date here is java.util.Date. 

```
@Entity 
@Table(name = ""TBLACCOUNT"")
public class Account implements Serializable{

	private static final long serialVersionUID = -8039686696076337053L;

	@Id
	@GeneratedValue(generator = ""account_sequence"", strategy=GenerationType.SEQUENCE)
	@SequenceGenerator(name=""account_sequence"", sequenceName=""TBLACCOUNT_SEQ"", allocationSize=1)	
	@Column(name = ""ACCOUNT_ID"")
	private Long accountId; 

	@Temporal(TemporalType.DATE)
	@Column(name = ""SUBMISSION_DATE"")
	private Date submissionDate;
```

When requesting this entity as JSON I get the same exact stacktrace mentioned in the second half of the original post. Because the date cannot be serialized correctly the mashaller prints out SEVERE: Generating incomplete JSON","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDE0NzE0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQ1NzI3Nw==,yasson,358457277,68,NA,jhanders34,30079386,Jared Anderson,jhanders@us.ibm.com,NA,2018-01-17T21:43:56Z,2018-01-17T21:43:56Z,"@bravehorsie 

Here is a test that shows the problem.  Only the last test works.
```
import java.io.Serializable;
import java.time.LocalDate;

import javax.json.bind.Jsonb;

import org.eclipse.yasson.internal.JsonBindingBuilder;
import org.junit.Test;

import junit.framework.Assert;

public class YassonDateNoTimeTest {

    public static class LocalDateObj implements Serializable {
        public LocalDate date = LocalDate.now();
    }

    public static class SqlDateObj implements Serializable {
        public java.util.Date date = new java.sql.Date(System.currentTimeMillis());
    }

    @Test
    public void testMarshallSqlDate() {
        JsonBindingBuilder builder = new JsonBindingBuilder();
        Jsonb json = builder.build();
        String jsonString = json.toJson(new SqlDateObj());
        if (jsonString.contains(""T"")) {
            Assert.fail(""JSON contains time for a non Date that doesn't include time"");
        }
    }

    @Test
    public void testUnmarshallSqlDate() {
        JsonBindingBuilder builder = new JsonBindingBuilder();
        Jsonb json = builder.build();
        json.fromJson(""{\""date\"":\""1955-03-28\""}"", SqlDateObj.class);
    }

    @Test
    public void testMarshallLocalDate() {
        JsonBindingBuilder builder = new JsonBindingBuilder();
        Jsonb json = builder.build();
        String jsonString = json.toJson(new SqlDateObj());
        if (jsonString.contains(""T"")) {
            Assert.fail(""JSON contains time for a non Date that doesn't include time"");
        }
    }

    @Test
    public void testUnmarshallLocalDate() {
        JsonBindingBuilder builder = new JsonBindingBuilder();
        Jsonb json = builder.build();
        json.fromJson(""{\""date\"":\""1955-03-28\""}"", LocalDateObj.class);
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQ1NzI3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQ1OTI2Nw==,yasson,358459267,68,NA,jhanders34,30079386,Jared Anderson,jhanders@us.ibm.com,NA,2018-01-17T21:50:19Z,2018-01-17T21:50:19Z,@bravehorsie based off of the test I provided above it appears that the sqlDate unmarshall scenario needs to do something similar to unmarshalling of a LocalDate object.  java.util.Date / java.sql.Date do make things a little complicated.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQ1OTI2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzE0NTQwMA==,yasson,363145400,68,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-05T16:49:49Z,2018-02-05T16:49:49Z,"Thank you! @jhanders34 
I went through the tests and LocalDate is working fine, there is just a mistype in testMarshallLocalDate() where you are passing a SqlDateObj for marshalling.

java.sql.Date did really need an update, we hadn't support for that at all. If you now have a property of a type java.sql.Date everything will work out of the box. 
If you have a property of type java.util.Date with java.sql.Date inside, marshalling will work, however if you want java.sql.Date to be unmarshalled inside, you have to declare `@JsonbTypeDeserializer(SqlDateTypeDeserializer.class)` on the property. See test class changes in pull request.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzE0NTQwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzE1NTYyOQ==,yasson,363155629,68,NA,jhanders34,30079386,Jared Anderson,jhanders@us.ibm.com,NA,2018-02-05T17:22:14Z,2018-02-05T17:22:14Z,"Thanks @bravehorsie.  Will give your changes a try hopefully this week.  

    @Temporal(TemporalType.DATE)
    private java.util.Date date;

If the attribute is of type java.util.Date, but there is a ```@Temporal``` annotation defined as type DATE as above, can the logic be updated to handle that?  That way it doesn't need to be declared as a java.sql.Date.  

This is how it is configured for @jcoronel94's scenario in a previous comment as well.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzE1NTYyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/68,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDA5MzYzNQ==,yasson,364093635,68,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-08T12:12:14Z,2018-02-08T12:12:14Z,"Yasson should not know anything about JPA, neither have dependency to its API. Jsonb API is what is supposed to be used when working with Yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDA5MzYzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/69,https://api.github.com/repos/eclipse-ee4j/yasson/issues/69,yasson,280316849,69,Failure to find parametrized type by 2 levels on implementation,grimly,1050527,Michel TURPIN,michel.turpin1@gmail.com,CLOSED,2017-12-07T23:30:45Z,2019-01-29T12:16:07Z,"Consider the following code : https://gist.github.com/grimly/3127a54f1269e7b188fe39d5195f559f

I was expecting the ability to use a single interface to extend all those attribute converters out there (AttributeConverter from JPA, JsonbAdapter from JsonB) but then I ran into the following error :

```
javax.json.bind.JsonbException: Type: interface javax.json.bind.adapter.JsonbAdapter is not a parametrized type.
	at org.eclipse.yasson.internal.ReflectionUtils.findParameterizedType(ReflectionUtils.java:226)
	at org.eclipse.yasson.internal.ComponentMatcher.introspectAdapterBinding(ComponentMatcher.java:231)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBindingFromAnnotation(AnnotationIntrospector.java:208)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBinding(AnnotationIntrospector.java:203)
	at org.eclipse.yasson.internal.model.PropertyModel.getUserAdapterBinding(PropertyModel.java:120)
	at org.eclipse.yasson.internal.model.PropertyModel.introspectCustomization(PropertyModel.java:174)
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:87)
...
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/69/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/69,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDEzOTc1Ng==,yasson,350139756,69,NA,grimly,1050527,Michel TURPIN,michel.turpin1@gmail.com,NA,2017-12-08T00:50:13Z,2017-12-08T00:50:13Z,You may use [my branch](https://github.com/grimly/yasson/tree/adapter-with-intermediate-interface) which has a test case reproducing this behavior.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDEzOTc1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/71,https://api.github.com/repos/eclipse-ee4j/yasson/issues/71,yasson,280469921,71,Java 9 module-info.java missing cdi.api,tnn,161150,Troels Nørgaard,,CLOSED,2017-12-08T12:10:54Z,2019-01-29T12:16:07Z,"The [module-info.java](https://github.com/eclipse/yasson/blob/master/src/main/java/module-info.java) targeted for Java 9 is missing a `requires` clause for the `cdi.api` Java EE jmod, which when used with fx `jersey-media-json-binding` will cause an exception like:
```
Caused by: java.lang.IllegalAccessError: class org.eclipse.yasson.internal.components.JsonbComponentInstanceCreatorFactory (in module org.eclipse.yasson) cannot access class javax.enterprise.inject.spi.CDI (in module cdi.api) because module org.eclipse.yasson does not read module cdi.api
	at org.eclipse.yasson.internal.components.JsonbComponentInstanceCreatorFactory.getComponentInstanceCreator(JsonbComponentInstanceCreatorFactory.java:48) ~[yasson-1.0.1.jar:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:564) ~[?:?]
	at org.eclipse.yasson.internal.components.InstanceCreatorFactoryHelper.lambda$getComponentInstanceCreator$0(InstanceCreatorFactoryHelper.java:33) ~[yasson-1.0.1.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:?]
	at org.eclipse.yasson.internal.components.InstanceCreatorFactoryHelper.getComponentInstanceCreator(InstanceCreatorFactoryHelper.java:28) ~[yasson-1.0.1.jar:?]
	at org.eclipse.yasson.internal.JsonbContext.<init>(JsonbContext.java:70) ~[yasson-1.0.1.jar:?]
	at org.eclipse.yasson.internal.JsonBinding.<init>(JsonBinding.java:41) ~[yasson-1.0.1.jar:?]
	at org.eclipse.yasson.internal.JsonBindingBuilder.build(JsonBindingBuilder.java:63) ~[yasson-1.0.1.jar:?]
	at javax.json.bind.JsonbBuilder.create(JsonbBuilder.java:108) ~[javax.json.bind-api-1.0.jar:?]
```
Rendering the library unusable (it can not recover from the access permission), unless you do explicitly opens up whenever you run your application","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/71,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDk3NTc0OA==,yasson,350975748,71,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2017-12-12T08:09:39Z,2017-12-12T08:09:39Z,"Thanks @tnn it should probably be ""requires static cdi.api"", since dependency is optional at runtime. Another consideration is that cdi-api:2.0 does not declare any module, I assume you got automatic one by putting it on module path. In that case we can't assume everyone will do the same. It is better to leave that undeclared, to give users ability to use it either from module path or classpath.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDk3NTc0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,yasson,280472196,72,Java 9 Messages.java uses non-accessible ResourceBundle.Control,tnn,161150,Troels Nørgaard,,CLOSED,2017-12-08T12:20:45Z,2019-01-29T12:34:30Z,"From [ResourceBundle.java](https://docs.oracle.com/javase/9/docs/api/java/util/ResourceBundle.html):

## Resource Bundles in Named Modules

When resource bundles are deployed in named modules, the following module-specific requirements and restrictions are applied.
 - Code in a named module that calls getBundle(String, Locale) will locate resource bundles in the caller's module (caller module).
 - If resource bundles are deployed in named modules separate from the caller module, those resource bundles need to be loaded from service providers of ResourceBundleProvider. The caller module must declare ""uses"" and the service interface name is the concatenation of the package name of the base name, string "".spi."", the simple class name of the base name, and the string ""Provider"". The bundle provider modules containing resource bundles must declare ""provides"" with the service interface name and its implementation class name. For example, if the base name is ""com.example.app.MyResources"", the caller module must declare ""uses com.example.app.spi.MyResourcesProvider;"" and a module containing resource bundles must declare ""provides com.example.app.spi.MyResourcesProvider with com.example.app.internal.MyResourcesProviderImpl;"" where com.example.app.internal.MyResourcesProviderImpl is an implementation class of com.example.app.spi.MyResourcesProvider.
 - If you want to use non-standard formats in named modules, such as XML, ResourceBundleProvider needs to be used.
 - The getBundle method with a ClassLoader may not be able to find resource bundles using the given ClassLoader in named modules. The getBundle method with a Module can be used, instead.
- ResourceBundle.Control is *not supported* in named modules. If the getBundle method with a ResourceBundle.Control is called in a named module, the method will throw an UnsupportedOperationException. Any service providers of ResourceBundleControlProvider are ignored in named modules.

## Problem
When running as a Named Module on Java 9, this will throw:
```
Caused by: java.lang.UnsupportedOperationException: ResourceBundle.Control not supported in named modules
	at java.util.ResourceBundle.checkNamedModule(ResourceBundle.java:1537) ~[?:?]
	at java.util.ResourceBundle.getBundle(ResourceBundle.java:1055) ~[?:?]
	at org.eclipse.yasson.internal.properties.Messages.getMessage(Messages.java:58) ~[yasson-1.0.2-SNAPSHOT.jar:?]
```
Causing the initialisation of the library to be unusable.

## Proposed Solution
The [Messages.java](https://github.com/eclipse/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/properties/Messages.java#L63) appear to be using the UTF-8 for ensuring the underlying Properties file is read as `UTF-8` (versus the pre-Java 9 default of `iso-8859-1`). In Java 9 this is fixed in [JEP 226](http://openjdk.java.net/jeps/226). So my proposal is to make a [Multi-Release Jar](openjdk.java.net/jeps/238) for Java 9+ where `UTF8Control` is simply removed.

All tests pass when Messages use the regular (non-Control) API:
```
    public static String getMessage(MessageKeys key, Locale locale, Object... objects) {
        ResourceBundle messages = ResourceBundle.getBundle(MESSAGE_BUNDLE, locale);
        MessageFormat formatter = new MessageFormat(messages.getString(key.key));
        return formatter.format(objects);
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTAwMDk3MQ==,yasson,365000971,72,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-12T17:38:52Z,2018-02-12T17:38:52Z,Thanks for detailed explanation. It makes sense to me. On the other hand we would like to avoid using multi-release jars. We will think what we can do. @bravehorsie any ideas?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTAwMDk3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTA2MDkxNw==,yasson,365060917,72,NA,tnn,161150,Troels Nørgaard,,NA,2018-02-12T21:03:03Z,2018-02-12T21:03:03Z,"@m0mus thanks for the response and the work on trying to standardizing json annotations. 
However, given the response on a few other PRs/issues and the lack on response on this, we had to find another solution. We have removed javax.json.bind from our code base, it was simply faster to switch it out with jackson than trying to fix. Given our current problems with jaxb-(api|runtime) - it's not possible to run in a acceptable state with 2.3.0 and run a 2.3.1-SNAPSHOT; we'll work on ripping it out where possible.
We don't want to hold back upgrading Java to ~1 year after GA on every release, because of libraries.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTA2MDkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzA4ODYzOQ==,yasson,447088639,72,NA,bstansberry,299242, Brian Stansberry,brian.stansberry@redhat.com,NA,2018-12-13T19:22:23Z,2018-12-13T19:22:23Z,"Is UTF8Control necessary? Is people somehow bringing a localized variant of yasson-messages.properties something that yasson wants to support? Otherwise AFAICT the only content of the file that needs UTF-8 are the czechDiacritics and russianDiacritics properties, which are only used by org.eclipse.yasson.customization.EncodingTest . And that seems to just be using that properties file as a way to get some data to use as input to a test.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzA4ODYzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/72,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzI4ODEzNA==,yasson,447288134,72,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-14T10:46:53Z,2018-12-14T10:46:53Z,"Should be doable without use of multi-release jar, since properties in named modules should be read as UTF-8 by default. I will take a look on that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzI4ODEzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/73,https://api.github.com/repos/eclipse-ee4j/yasson/issues/73,yasson,280474086,73,Java 9 NumberFormatTest fails,tnn,161150,Troels Nørgaard,,CLOSED,2017-12-08T12:28:24Z,2019-01-29T12:16:07Z,"When running on Java 9 [1], there is a number of test failures due to what appear to be Locale problems. The full test suite passes on same machine with Java 8u144.

```
Failed tests: 
  NumberFormatTest.testDeserializer:62 expected:<0.1> but was:<0.0>
  NumberFormatTest.testSerialize:51 expected:<...""127"",""aDouble"":""000[.10000000"",""aFloat"":""000.34999999"",""aLong"":""9223372036854775807"",""aShort"":""00001"",""bigDecimal"":""00000010.000000"",""bigInteger"":""00000001"",""doubleGetterFormatted"":""000.10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":""0.5"",""integer"":""2147483647.]0""}> but was:<...""127"",""aDouble"":""000[,10000000"",""aFloat"":""000,34999999"",""aLong"":""9223372036854775807"",""aShort"":""00001"",""bigDecimal"":""00000010,000000"",""bigInteger"":""00000001"",""doubleGetterFormatted"":""000,10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":""0,5"",""integer"":""2147483647,]0""}>
  NumberFormatTest.testSerializeWithoutClassLevelFormatter:81 expected:<...etterFormatted"":""000[.]10000000"",""doubleSet...> but was:<...etterFormatted"":""000[,]10000000"",""doubleSet...>
```

## Details
### org.eclipse.yasson.customization.NumberFormatTest#testDeserializer
```
Expected :0.1
Actual   :0.0
```
### org.eclipse.yasson.customization.NumberFormatTest#testSerialize
```
Expected :{""aByte"":""127"",""aDouble"":""000.10000000"",""aFloat"":""000.34999999"",""aLong"":""9223372036854775807"",""aShort"":""00001"",""bigDecimal"":""00000010.000000"",""bigInteger"":""00000001"",""doubleGetterFormatted"":""000.10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":""0.5"",""integer"":""2147483647.0""}
Actual   :{""aByte"":""127"",""aDouble"":""000,10000000"",""aFloat"":""000,34999999"",""aLong"":""9223372036854775807"",""aShort"":""00001"",""bigDecimal"":""00000010,000000"",""bigInteger"":""00000001"",""doubleGetterFormatted"":""000,10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":""0,5"",""integer"":""2147483647,0""}
```
### org.eclipse.yasson.customization.NumberFormatTest#testSerializeWithoutClassLevelFormatter
```
Expected :{""doubleGetterFormatted"":""000.10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":0.5}
Actual   :{""doubleGetterFormatted"":""000,10000000"",""doubleSetterAndPropertyFormatter"":""000.600"",""doubleSetterFormatted"":0.5}
```
This can be fixed by changing NumberFormatPojoWithoutClassLevelFormatter with:
```
    @JsonbNumberFormat(value = ""000.00000000"", locale = ""en-us"")
    public Double getDoubleGetterFormatted() {
        return doubleGetterFormatted;
    }
```

[1] 
```
$ uname -a
Darwin c02sv1d3h03q-c 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64
$ java -version
java version ""9.0.1""
Java(TM) SE Runtime Environment (build 9.0.1+11)
Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/73/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/73,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDI1ODM1Nw==,yasson,350258357,73,NA,grimly,1050527,Michel TURPIN,michel.turpin1@gmail.com,NA,2017-12-08T13:04:58Z,2017-12-08T13:04:58Z,"This is not a java version issue but purely a locale issue. I encountered the same since I'm french. 

I submitted the PR #70 in order to fix it. I can't make the requested changes at my work place but this can be fixed by this weekend. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDI1ODM1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,yasson,282598175,75,How to Integrate with JPA,,,,,OPEN,2017-12-16T04:08:47Z,2018-12-12T12:20:03Z,"I've experience with JSON-B and Yasson on my Java EE 7 project and I'm tried to put the Jsonb annotations alongside with JPA annotations, for example something like this

```
@Entity
@Table(""student"")
@NamedQuery(name = Student.FIND_ALL, query = ""select s from Student s"")
public class Student {
    public static final String FIND_ALL = ""Student.findAll"";

    @JsonbTransient
    private Long id;

    @JsonbProperty(""student-name"")
    private String name;
}
```

When I tried to request into my endpoint I'm encounter two problem:

1. It seems the JPA properties was also serialized by Jsonb, I got my response like below.

```
{
  ""serialVersionUID"": null,
  ""_persistence_shouldRefreshFetchGroup"": null,
  ""_persistence_session"": null,
  ""_persistence_relationshipInfo"": null,
  ""_persistence_primaryKey"": null,
  ""_persistence_listener"": null,
  ""_persistence_links"": null,
  ""_persistence_href"": null,
  ""_persistence_fetchGroup"": null,
  ""_persistence_cacheKey"": null,
  ""name"": ""Sukma"",
  ""FIND_ALL"": null
}
```

**How could I remove the JPA properties from my response?**

2. From response above I also found that my static variable `FIND_ALL` was serialized by Jsonb, I'm tried to hide it using `@JsonbTransient` but I received `Java.lang.NullPointerException`.

**Do I need to pay attention towards variable with keywords `static` or `final` when using Jsonb annotations, like on my `FIND_ALL` variable?**
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDc5MzgzMg==,yasson,354793832,75,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-01-02T15:38:13Z,2018-01-02T15:38:13Z,"1. There is similar [issue](https://github.com/eclipse/yasson/issues/59) considering `@JsonbIgnoreProperties` to be added. It may worth to consider adding `@JsonbIncludeProperties`.

2. You should have no issues annotating static final field with @JsonbTransient. I did so in test and did not receive any exception.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDc5MzgzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzkzMDY5MA==,yasson,357930690,75,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-01-16T11:21:23Z,2018-01-16T11:21:23Z,static field should not be serialized. Are you using the latest version of Yasson? I remember fixing static fields bug.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzkzMDY5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1Nzk2MjgyMg==,yasson,357962822,75,NA,,,,,NA,2018-01-16T13:39:26Z,2018-01-16T13:39:26Z,"Yes, I think have something like `@JsonbIncludeProperties` would be awesome, at least it's help to exclude another information such like the JPA like what I've encounter.

I'm using Yasson version `1.0` I thought it was the latest version, but may I know what is the latest version of Yasson that available right now?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1Nzk2MjgyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTM4NDQxMg==,yasson,359384412,75,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-01-22T10:34:14Z,2018-01-22T10:34:14Z,"1.0.1
https://github.com/eclipse/yasson/releases","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTM4NDQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODAzMzk5Mw==,yasson,368033993,75,NA,maxencelaurent,6583528,,,NA,2018-02-23T15:04:26Z,2018-02-23T15:04:26Z,"I got quite the same issue (with the latest version of Yasson).
It's even worse as NullPointerException is thrown while yasson tries to serialize EclipseLink related classes.

For instance, starting from an Entity, Marshaller go through a lot of EclipseLink stuff (UnitOfWorkValueHolder and so on), eventually crashing (NPE) in org.eclipse.persistence.queries.DatabaseQuery#getDefaultRedirector().


```
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:28)
    at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
    at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:72)
    at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:255)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:82)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)                 <- JPAQuery#getDefaultRedirector()
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializeItem(AbstractContainerSerializer.java:134)
    at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:52)
    at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:31)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:104)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)                  <- public UnitOfWork#getJPAQueries()
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:104)                  <- protected getUnitOfWork()
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)                  <- instance of UnitOfWorkQueryValueHolder
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:104)                  <- protected WeavedAttributeValueHolderInterface _persistence_basedOn_vh
    at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)                  <- ** My Entity **
    at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
    at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:119)
    at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:75)
    at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
    [...]
    at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
    at org.eclipse.persistence.queries.DatabaseQuery.getDefaultRedirector(DatabaseQuery.java:1271)
    ... 211 more
```


The really strange thing is all the _persistence_* fields generated by EclipseLink seems to be transient, private, or protected.

As I understand the spec (3.7.1 Scope and Field access strategy), such fields must been ignored.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODAzMzk5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODAzNzc4Mw==,yasson,368037783,75,NA,maxencelaurent,6583528,,,NA,2018-02-23T15:18:02Z,2018-02-23T15:18:02Z,Removing all those fields at parsing time solves the problem but such a change ( aa8b788fba142ae6591bccff9ab2c310820723fb) has an impact on how private field of inner classes are serialised  (see testAnnotatedPojo and testFieldVisibilityStrategy in  JsonbPropertyVisibilityStrategyTest),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODAzNzc4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NjUzNjA4Mw==,yasson,376536083,75,NA,djrushon,14076085,,,NA,2018-03-27T14:01:07Z,2018-03-27T14:01:07Z,I am using Jersey 2.26 which includes yasson 1.0.  EclipseLink is not agree with collections.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NjUzNjA4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDE1ODM3Ng==,yasson,380158376,75,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-10T16:11:02Z,2018-04-10T16:11:02Z,"I just discussed this issue with @lukasj who is the main EclipseLink committer. Based on the information [here](https://github.com/eclipse-ee4j/eclipselink/blob/master/jpa/org.eclipse.persistence.jpa/src/org/eclipse/persistence/internal/jpa/weaving/ClassWeaver.java), all entities with weaved properties are also weaved with PersistenceWeaver marker interface. It can be used as a detection mechanism to separate weaved classes. 
We also should have some mechanism which switches on and off detection and ignoring weaved properties. It can be done by implementing a type level annotation, something like @JsonbIgnoreWeavedProperties or JsonbConfig method with similar name or both.
This functionality has to be switched off by default.
@bravehorsie, @swhp any more ideas?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDE1ODM3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDI1NjgxNA==,yasson,380256814,75,NA,,,,,NA,2018-04-10T21:42:40Z,2018-04-10T21:42:40Z,Hi @m0mus thank you for the information and I'm agree with having properties to ignore weaved properties from JPA as the default. I believe the weaved information should not and is not necessary to expose it on REST endpoint.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDI1NjgxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/75,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2ODYwMA==,yasson,446568600,75,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2018-12-12T12:20:02Z,2018-12-12T12:20:02Z,"> static field should not be serialized. Are you using the latest version of Yasson? I remember fixing static fields bug.

While this is true, you can always use your own implementation of field visibility. Just add this annotation to your class: `@JsonVisibility(MyStaticVisibilityStrategy.class)`.

Then, implement `MyStaticVisibilityStrategy extends PropertyVisibilityStrategy`.
It has only two methods:
```java
    boolean isVisible(Field field);
    boolean isVisible(Method method);
```

Maybe this helps with JPA. But this is not a thing that yasson should provide. That would go into an extension project.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2ODYwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,yasson,282642886,76,JSON-B adapters + JAX-RS 2.1 + hot-deploying = not working,,,,,OPEN,2017-12-16T18:55:23Z,2019-02-01T06:41:54Z,"## Short version

### Cannot use hot-deploy with adapters

When using `JsonbTypeAdapter`, hot deploying makes the adapters unusable. Configuration is:

 - Payara 5.0.0.Alpha3 Full
 - Java EE 8: same behaviour whether using `javaee-web-api` (standalone war module) or `javaee-api` (ear application made of 1 x Ejb + N x web)
    - aiming for JAX-RS 2.1
    - using JSON-P 1.1 and JSON-B 1.0
 - Yasson dependency is not explicitly used, it seems that the implementation of Payara takes precedence
 - JPA not used
 - `JsonbTypeAdapter` have injected `@EJB`
 - Netbeans 8.2

When loading the fake database, a `@Singleton`, I successfully test if the `JsonbTypeAdapter` are working
 
### Workaround
 
 > Simply reboot the application server. There is no need to manually re-deploy first, the last hot-deploy will be taken into account.
 
---
 
## Context:

I'm comparing `JSON-B 1.0` vs `JSON-P 1.1`. I faked entities so that JPA is not involved yet. Full source code is [here](https://github.com/Xsylum/java-ee/tree/master/jax-rs).

<sub>There is no testing page. REST testing is done with [Google's Postman](https://www.getpostman.com/)</sub>

My simple entities look like:

**Company** ([full code link](https://github.com/Xsylum/java-ee/blob/master/jax-rs/src/main/java/com/playground/jax/rs/organisation/Company.java))
```java
@JsonbPropertyOrder(PropertyOrderStrategy.ANY)
public class Company{
    private Long id;
    private String name;
    
    @JsonbTypeAdapter(DepartmentListAdapter.class)
    private List<Department> departments;   // fake a @OneToMany relationship
    //...
}
```

**Department** ([full code link](https://github.com/Xsylum/java-ee/blob/master/jax-rs/src/main/java/com/playground/jax/rs/organisation/Department.java))
```java
@JsonbPropertyOrder(PropertyOrderStrategy.ANY)
public class Department{
    private Long id;
    private String name;
    
    @JsonbTypeAdapter(CompanyAdapter.class)
    private Company company;                // fake a @ManyToOne relationship
    // ...
}
```

## JSON-B & Adapter

To avoid circular serialization (Company -> Department -> Company) I have the following adapters:

 1. [`DepartmentListAdapter implements JsonbAdapter<List<Department>, JsonArray>`](https://github.com/Xsylum/java-ee/blob/master/jax-rs/src/main/java/com/playground/jax/rs/organisation/DepartmentListAdapter.java)
 2. [`CompanyAdapter implements JsonbAdapter<Company, Long>`](https://github.com/Xsylum/java-ee/blob/master/jax-rs/src/main/java/com/playground/jax/rs/organisation/CompanyAdapter.java)

Adapter works fine with a basic:

```java
Jsonb jsonB = JsonbBuilder.create();
jsonB.toJson(departmentsList);
```

## Errors

As said earlier, in both situation, a server reboot fixes the issue.

### Without using EJB

If I comment out the `@EJB` injection (`adaptFromJson(...)` always return `null`), a `ClassCastException` is triggered after the first hot-deploy:

 - when requesting companies list:
    > `java.lang.ClassCastException: com.playground.jax.rs.organisation.Department cannot be cast to com.playground.jax.rs.organisation.Department`
    
 - similarly, when requesting departments list:
    > `java.lang.ClassCastException: com.playground.jax.rs.organisation.Company cannot be cast to com.playground.jax.rs.organisation.Company`
    
Stacktrace is:

```
at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:103)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:85)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:79)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.writeTo(JsonBindingProvider.java:118)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:266)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:251)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:109)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:85)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1135)
```

### With EJB

Similarly, if I leave the `@EJB` injection, the error becomes

```
java.lang.IllegalArgumentException: Can not set com.playground.jax.rs.dummydata.FakeDatabase field com.playground.jax.rs.organisation.CompanyAdapter.db to com.playground.jax.rs.organisation.CompanyAdapter
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:75)
	at java.lang.reflect.Field.set(Field.java:764)
	at com.sun.enterprise.container.common.impl.util.InjectionManagerImpl._inject(InjectionManagerImpl.java:688)
	at com.sun.enterprise.container.common.impl.util.InjectionManagerImpl.inject(InjectionManagerImpl.java:507)
	at com.sun.enterprise.container.common.impl.util.InjectionManagerImpl.injectInstance(InjectionManagerImpl.java:170)
	at org.glassfish.weld.services.InjectionServicesImpl.aroundInject(InjectionServicesImpl.java:166)
	at org.jboss.weld.injection.InjectionContextImpl.run(InjectionContextImpl.java:46)
	at org.jboss.weld.injection.producer.ResourceInjector.inject(ResourceInjector.java:71)
	at org.jboss.weld.injection.producer.BasicInjectionTarget.inject(BasicInjectionTarget.java:117)
	at org.eclipse.yasson.internal.components.BeanManagerInstanceCreator.lambda$getOrCreateComponent$0(BeanManagerInstanceCreator.java:63)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.eclipse.yasson.internal.components.BeanManagerInstanceCreator.getOrCreateComponent(BeanManagerInstanceCreator.java:58)
	at org.eclipse.yasson.internal.ComponentMatcher.introspectAdapterBinding(ComponentMatcher.java:239)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBindingFromAnnotation(AnnotationIntrospector.java:208)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBinding(AnnotationIntrospector.java:203)
	at org.eclipse.yasson.internal.model.PropertyModel.getUserAdapterBinding(PropertyModel.java:120)
	at org.eclipse.yasson.internal.model.PropertyModel.introspectCustomization(PropertyModel.java:174)
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:87)
	at org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.orderProperties(PropertyOrdering.java:70)
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:60)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:100)
	at org.eclipse.yasson.internal.serializer.AbstractSerializerBuilder.getClassModel(AbstractSerializerBuilder.java:100)
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.build(DeserializerBuilder.java:145)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:85)
	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:99)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1091)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)
	at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:97)
	at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:80)
	at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:74)
	at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:92)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:133)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
```

---

<sub>I tried to do some debug with basic `System.out.println` in a cloned `org.eclipse.yasson` but Netbeans does not like Java SE 9 so it didn't give me relevant hints</sub>","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/76/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDk2ODE5MQ==,yasson,400968191,76,NA,dominikmathmann,16148654,Dominik Mathmann,,NA,2018-06-28T09:12:18Z,2018-06-28T09:12:18Z,"Maybe i am totally wrong because I use a different setup and run in a different exception message, but the behaviour in general is the same. I just add my comment here because it seems that nobody have any ideas:

I recognize that I have no problems when i use jsonb directly in my resource classes: 
```
   @GET
    public Response get1() {
        List<Talk> allTalks = this.talkRepository.findAll();
        return Response.ok(JsonbBuilder.create().toJson(allTalks)).build();
    }
```

instead of: 
```
   @GET
    public List<Talk> get2() {
       return this.talkRepository.findAll();
    }

```

(this produces an exception, sometimes, especially after redeployment) 

I try to do some debugging and found some potential initialization of jsonb with fix adapters, so I implement a jaxrs provider to produce a ""clean"" jsonb instance: 

```
 @Provider
@Produces(MediaType.APPLICATION_JSON)
public class JsonProvider implements ContextResolver<Jsonb> {

    @Override
    public Jsonb getContext(Class<?> type) {
        return JsonbBuilder.create();
    }

}
```


on the first view it will work without any problems for me. 

As already mentioned, I have a complete other setup but your problem was the only one i found which leads in the same direction, so maybe it will help. Whould be nice to get some information back if it worked.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDk2ODE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTQyNDcxNQ==,yasson,435424715,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-02T15:50:14Z,2018-11-02T15:50:14Z,"@Xsylum @dominikmathmann 
I know this is a bit outdated reply, but what classes are you redeploying?

Initialized Jsonb instance holds instances of adapters inside, and thus holds references to your adapter classes and in turn to adapted pojos. If you use hot redeploy you may end up in a situation when those referenced classes are discarded and replaced / hot redeployed by your application classloader and so causes initialized jsonb instances to use outdated references.

to visualize:
after a proper deploy YourApplicationClassLoader in Payara or whatever server references:

- `com.playground.jax.rs.organisation.Company.class#A`
- `com.playground.jax.rs.organisation.CompanyAdapter.class#A`

Than a Jsonb runtime instance is created with an instance of CompanyAdapter object inside transitively referencing both above classes.

You hit redeploy, and cause `com.playground.jax.rs.organisation.Company.class` to be reloaded by your YourAppClassLoader which now has two new classes:
- `com.playground.jax.rs.organisation.Company.class#B`
- `com.playground.jax.rs.organisation.CompanyAdapter.class#B`

But since initialized jsonb instance has cached object of an `com.playground.jax.rs.organisation.CompanyAdapter.class#A` it hits 

java.lang.ClassCastException: com.playground.jax.rs.organisation.Company cannot be cast to com.playground.jax.rs.organisation.Company

which basically means that `#A` version object returned by your adapter cannot be cast to `#B` version class during setting the property anymore.

If so it would also make sense why @dominikmathmann creating a new Jsonb runtime instance in every request does help for redeploying. (Don't do this in production, because you will be parsing classes with reflection on every request.)


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTQyNDcxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzMyMTY3NQ==,yasson,437321675,76,NA,,,,,NA,2018-11-09T10:44:01Z,2018-11-09T10:44:01Z,"@bravehorsie I actually redeployed `Company` class. I unfortunately moved the project out of my Github so I cannot check it but I am pretty sure about that. Your explanation actually convinced me. As it is a matter of cached object in application server, may I know for my information if the issue lies in Payara caching or Yasson caching?

Moreover, I think that I also encountered the behaviour @dominikmathmann mentioned. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzMyMTY3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODI1MTM0OA==,yasson,438251348,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-13T12:37:54Z,2018-11-13T12:37:54Z,Its Yasson caching. [See here](https://github.com/eclipse-ee4j/yasson/blob/0fe80a67b33d4422f4c58a22ae539e199139f0a3/src/main/java/org/eclipse/yasson/internal/ComponentMatcher.java#L53).,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODI1MTM0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTkxMTczNQ==,yasson,445911735,76,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-10T18:01:48Z,2018-12-10T18:01:48Z,"@bravehorsie since this issue only really exists in app server environments (where apps can be restarted while server-side components such as JAX-RS runtime can stay up and hold a reference), it seems like the responsibility of the app server to clear the JSON-B cache when a hot-update occurs.

Perhaps we could provide some sort of SPI hook that app servers could call in order to invalidate all caches? Something along the lines of:
```java
public class JsonBindingProvider extends JsonbProvider {

  private Set<Jsonb> jsonbInstances = // weak set storing all created 'Jsonb' instances

  public void clear() {
    // invoke 'Jsonb.close()' on each item in 'jsonbInstances'
  }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTkxMTczNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIwOTk2OQ==,yasson,446209969,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-11T13:54:21Z,2018-12-11T13:54:21Z,"We may clear the cache, but what about other user application classes that have chached jsonb instance? Should they get an invalidated exception in that case?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIwOTk2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIxMDQxOA==,yasson,446210418,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-11T13:55:42Z,2018-12-11T13:55:42Z,Also the redeploy itself may not be related to classes used by jsonb instance.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIxMDQxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIzOTk5Mg==,yasson,446239992,76,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-11T15:20:14Z,2018-12-11T15:20:14Z,"When an application server performs a hot-update of an application class, it will have to discard and re-create the application classloader, so we shouldn't have to worry about caches JSON-B instances in the application space here. 

> Also the redeploy itself may not be related to classes used by jsonb instance.

True, but ""better safe than sorry"" here.  If we clear the cache when it is not needed, the extra processing time will not be noticeable to the developer (<100ms impact probably).  On the contrary, if we don't clear the cache, the developer could spend minutes/hours debugging what went wrong and once they find out it was a hot-deploy issue they will probably stop using hot-deploys all-together and just re-start everything on every code change as a precaution. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIzOTk5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjI0NzI4Mw==,yasson,446247283,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-11T15:39:28Z,2018-12-11T15:39:28Z,"> When an application server performs a hot-update of an application class, it will have to discard and re-create the application classloader, so we shouldn't have to worry about caches JSON-B instances in the application space here.

I am a bit confused here. Are we talking about hot swap or hot redeploy? If it is the latter than is it correct that whole application state is dropped upon redeploy? If so, all jsonb instances with cached components for that application should also be dropped..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjI0NzI4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA1MjM0Ng==,yasson,454052346,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-14T15:48:11Z,2019-01-14T15:48:11Z,"@aguibert If we are talking about hot swap I don't know a way to drop the cache, if it is hot redeploy it should drop automatically by dropping all jsonb instances in the redeployed application.

Unfortunately @Xsylum user has been deleted and we have no other input to confirm.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA1MjM0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA1NTYyMg==,yasson,454055622,76,NA,Al-un,40738601,Al-un,,NA,2019-01-14T15:56:44Z,2019-01-14T15:56:44Z,"@bravehorsie My bad, this is my new account (I merged @Xsylum user with this one). I did not know that it also deleted my comments.

I am not sure what you meant by _hot swap_ as I only know the term in infrastructure context. In my situation, it was a _hot deploy_:

1. Change something in a class
2. Application with the updated class is deployed on the application server upon saving

As for the application state between two hot deploys, my understanding is that it depends on the application server configuration. Under GlassFish-like servers, we used [`keep-state`](https://docs.oracle.com/cd/E18930_01/html/821-2417/gkhtr.html) to maintain sessions stuff across hot deploy. It prevented us to redo manual actions such as ""adding an item to the cart"".","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA1NTYyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA3MjczNw==,yasson,454072737,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-14T16:41:29Z,2019-01-14T16:41:29Z,"@Al-un by [_hot swap_](https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/enhancements1.4.html#hotswap) I mean a JVM class updating in debug mode, but that should not cause a ClassCastException.

Can you track where jsonb instance is referenced in your application and if that component is kept upon redeploy? Do you have direct reference to jsonb in any of your classes, or is it used in your third party dependency such is JAX-RS?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA3MjczNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTQ3MTU2NA==,yasson,459471564,76,NA,Al-un,40738601,Al-un,,NA,2019-01-31T19:21:09Z,2019-01-31T19:21:09Z,"Unfortunately, as I stopped Java for a while, I do not maintain this code anymore. For what it's worth, you can find it here: https://github.com/Al-un/playground/tree/master/javaee/playground-ejb/src/main/java/com/playground/organisation. It's a bit messy though... 😭 

Moreover, I am not sure if I am able to answer your question: what do you mean by reference? Entities are indeed used by JAX-RS but it is via EJB: JPA EJB ""fetch"" entities (is it the reference you are talking about?) and then JAX-RS EJB requires entities from JPA EJB.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTQ3MTU2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/76,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTYyMzY5Mg==,yasson,459623692,76,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-01T06:41:54Z,2019-02-01T06:41:54Z,"""By reference"" I mean what holds a jsonb instance.
When you want to use jsonb you do some of ```Jsonb jsonb = JsonBuilder.create();```, than you  should store somewhere this instance to be accessed later. For example Jersey should hold jsonb instance for each deployed application, to reuse it for processing REST requests.

It may worth a try to inspect the lifecycle of jsonb instance in Jersey on application server.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTYyMzY5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/77,https://api.github.com/repos/eclipse-ee4j/yasson/issues/77,yasson,284108961,77,Deserializer not working in conjunction with @JsonbCreator,toellrich,5838959,,,CLOSED,2017-12-22T09:00:31Z,2019-01-29T12:16:07Z,"I'm in the process of evaluating whether Jackson can be replaced with Yasson. First of all, I have to say I was bit surprised that java.util.UUID is not supported out of the box. So I wrote a custom deserializer. That works fine when using objects that have a public constructor and getter/setter methods, but not when using objects that have a constructor annotated with `@JsonbCreator`. I'm using Yasson 1.0.1.

```java
public class YassonTest {

  private Jsonb jsonb;

  @Before
  public void setUp() {
    JsonbConfig config = new JsonbConfig()
        .withDeserializers(new UuidDeserializer());
    jsonb = JsonbBuilder.create(config);
  }

  @Test
  public void deserializeUuid() {
    UUID uuid = UUID.randomUUID();
    String json = String.format(""{\""id\"": \""%s\""}"", uuid);
    DomainObject domainObject = jsonb.fromJson(json, DomainObject.class); // This works
    assertEquals(uuid, domainObject.getId()); 
    DomainObject2 domainObject2 = jsonb.fromJson(json, DomainObject2.class); // This does not
    assertEquals(uuid, domainObject2.getId()); 
  }

  private static class UuidDeserializer implements JsonbDeserializer<UUID> {

    @Override
    public UUID deserialize(JsonParser parser, DeserializationContext context, Type type) {
      String uuid = parser.getString();
      return uuid != null && !uuid.isEmpty() ? UUID.fromString(uuid) : null;
    }
  }

  public static class DomainObject {

    private UUID id;

    public UUID getId() {
      return id;
    }

    public void setId(UUID id) {
      this.id = id;
    }
  }

  public static class DomainObject2 {

    private UUID id;

    @JsonbCreator
    public DomainObject2(@JsonbProperty(""id"") UUID id) {
      this.id = id;
    }

    public UUID getId() {
      return id;
    }
  }
}
``` 

[stacktrace.txt](https://github.com/eclipse/yasson/files/1581963/stacktrace.txt)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/77/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,yasson,289591475,81,Property doesn't deserialize ,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2018-01-18T11:13:43Z,2019-11-06T18:55:16Z,"Hello,

I have an issue with a property deserialization:
```
@JsonbProperty(""api"")
public String getAPIDocumentation() {
    return api;
}
```
Please take a look at the attached maven test project.

Dmitry","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODYxNjM3OQ==,yasson,358616379,81,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2018-01-18T11:14:55Z,2018-01-18T11:14:55Z,"[yasson.zip](https://github.com/eclipse/yasson/files/1642613/yasson.zip)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODYxNjM3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODY2NTk0Mw==,yasson,358665943,81,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2018-01-18T14:39:56Z,2018-01-18T14:39:56Z,"Hi @redmitry 

Seems it's due to a bug in deserialization that happens in an edge case like the one you provided. 

When we have a pair of getter/setter methods that are not named based on JavaBean convention (as in your case, your property is named 'api' but its getter/setter methods are not getApi and setApi) and then you explicitly define the `@JsonProperty` for getter/setter method providing the exact same name as the underlying field (e.g. `@JsonProperty(""api""`) in your case), then the deserialization process will fail.

It can succeed if configuring some naming strategies (e.g. `LOWER_CASE_WITH_UNDERSCORES` or  `UPPER_CASE_WITH_UNDERSCORES`) but not for some other strategies like (`CASE_INSENSITIVE` which is probably the default one).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODY2NTk0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTAwMTM1MQ==,yasson,365001351,81,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-12T17:40:10Z,2018-02-12T17:40:10Z,@moghaddam any progress here?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTAwMTM1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTEwMDIwNA==,yasson,365100204,81,NA,moghaddam,852321,Ehsan Zaery Moghaddam,zaerymoghaddam@gmail.com,NA,2018-02-12T23:35:09Z,2018-02-12T23:35:09Z,"Yes, I think I fixed it finally.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTEwMDIwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkyMzY3Nw==,yasson,438923677,81,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T05:36:04Z,2018-11-15T05:36:04Z,"For future reference, this was the class in question from inside the original zip:

```java
public class TheBean {
    
    private String api;
    
    @JsonbProperty(""api"")
    public String getAPIDocumentation() {
        return api;
    }
    
    @JsonbProperty(""api"")
    public void setAPIDocumentation(String api) {
        this.api = api;
    }
}
```

And here are the attached tests:
```java
    @Test // this one passes
    public void test1() {
        final Jsonb jsonb = JsonbBuilder.create(
                new JsonbConfig().withPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE));

        final TheBean bean1 = new TheBean();
        bean1.setAPIDocumentation(""REST"");

        final String json = jsonb.toJson(bean1);
        final TheBean bean2 = jsonb.fromJson(json, TheBean.class);
        Assert.assertEquals(""api properties not equeal"", bean1.getAPIDocumentation(), bean2.getAPIDocumentation());
    }
    
    @Test // this one fails because jsonb.toJson(bean1) returns empty json
    public void test2() {
        final Jsonb jsonb = JsonbBuilder.create();
        
        final TheBean bean1 = new TheBean();
        bean1.setAPIDocumentation(""REST"");

        final String json = jsonb.toJson(bean1);
        final TheBean bean2 = jsonb.fromJson(json, TheBean.class);
        Assert.assertEquals(""api properties not equeal"", bean1.getAPIDocumentation(), bean2.getAPIDocumentation());
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkyMzY3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM4MDQ4OQ==,yasson,550380489,81,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-11-06T16:09:43Z,2019-11-06T16:09:43Z,I think this got fixed too in #357 because the tests now pass (checked before & after the changes) @aguibert ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM4MDQ4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQyNjIxOQ==,yasson,550426219,81,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-06T17:53:54Z,2019-11-06T17:53:54Z,"thanks for checking @Degubi, would you like to add the test case in another PR and we can use that PR to close this issue?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQyNjIxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQzMTU4NQ==,yasson,550431585,81,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-11-06T18:06:02Z,2019-11-06T18:06:02Z,Sure @aguibert: #360,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQzMTU4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/81,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQ1MDY0NA==,yasson,550450644,81,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-06T18:54:59Z,2019-11-06T18:54:59Z,"Resolved by #357 and a specific test added in #360 by @Degubi.

Closing this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDQ1MDY0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,yasson,289965089,82,JsonbException while marshalling: Invalid count of arguments for setter,minfrin,1331788,,,CLOSED,2018-01-19T12:48:04Z,2019-01-29T12:16:08Z,"I have a large project that uses cxf-xjc-plugin to autogenerate JAXB bindings for a series of XSDs, and this is able to marshall XML without a problem.

We recently tried to use Jersey's JSON marshalling option, and this has been failing for us with the following exception below.

`
javax.json.bind.JsonbException: Invalid count of arguments for setter: public void javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int)
	org.eclipse.yasson.internal.model.Property.getPropertyType(Property.java:137)
	org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:85)
	org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.lambda$orderProperties$0(PropertyOrdering.java:79)
	java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1620)
	java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.orderProperties(PropertyOrdering.java:80)
	org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:60)
	org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
	org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
	java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:100)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:57)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
	org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	org.glassfish.jersey.jsonb.internal.JsonBindingProvider.writeTo(JsonBindingProvider.java:118)
	org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:266)
	org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:251)
	org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:109)
	org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:85)
	org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1135)
	org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:662)
	org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:395)
	org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:385)
	org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:280)
	org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
`

We are using the following JAXB related jars:

`
[INFO]    javax.activation:activation:jar:1.1:compile
[INFO]    javax.annotation:javax.annotation-api:jar:1.2:compile
[INFO]    javax.el:javax.el-api:jar:3.0.0:compile
[INFO]    javax.enterprise:cdi-api:jar:2.0:compile
[INFO]    javax.inject:javax.inject:jar:1:compile
[INFO]    javax.interceptor:javax.interceptor-api:jar:1.2:compile
[INFO]    javax.json:javax.json-api:jar:1.1:compile
[INFO]    javax.json.bind:javax.json.bind-api:jar:1.0:compile
[INFO]    javax.mail:mail:jar:1.4.7:compile
[INFO]    javax.servlet:javax.servlet-api:jar:4.0.0:provided
[INFO]    javax.servlet:servlet-api:jar:2.3:compile
[INFO]    javax.transaction:jta:jar:1.1:compile
[INFO]    javax.validation:validation-api:jar:1.1.0.Final:compile
[INFO]    javax.ws.rs:javax.ws.rs-api:jar:2.1:compile
[INFO]    javax.ws.rs:jsr311-api:jar:1.1.1:compile
[INFO]    javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO]    javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO]    org.eclipse:yasson:jar:1.0:compile
[INFO]    org.eclipse.persistence:org.eclipse.persistence.asm:jar:2.6.4:compile
[INFO]    org.eclipse.persistence:org.eclipse.persistence.core:jar:2.6.4:compile
[INFO]    org.eclipse.persistence:org.eclipse.persistence.moxy:jar:2.6.4:compile
[INFO]    org.glassfish:javax.json:jar:1.0.4:compile
[INFO]    org.glassfish.hk2:hk2-api:jar:2.5.0-b42:compile
[INFO]    org.glassfish.hk2:hk2-locator:jar:2.5.0-b42:compile
[INFO]    org.glassfish.hk2:hk2-utils:jar:2.5.0-b42:compile
[INFO]    org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile
[INFO]    org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b42:compile
[INFO]    org.glassfish.hk2.external:javax.inject:jar:2.5.0-b42:compile
[INFO]    org.glassfish.jersey.bundles:jaxrs-ri:jar:2.26:compile
[INFO]    org.glassfish.jersey.containers:jersey-container-servlet:jar:2.26:compile
[INFO]    org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.26:compile
[INFO]    org.glassfish.jersey.core:jersey-client:jar:2.26:compile
[INFO]    org.glassfish.jersey.core:jersey-common:jar:2.26:compile
[INFO]    org.glassfish.jersey.core:jersey-server:jar:2.26:compile
[INFO]    org.glassfish.jersey.ext:jersey-entity-filtering:jar:2.26:compile
[INFO]    org.glassfish.jersey.inject:jersey-hk2:jar:2.26:compile
[INFO]    org.glassfish.jersey.media:jersey-media-jaxb:jar:2.26:compile
[INFO]    org.glassfish.jersey.media:jersey-media-json-binding:jar:2.26:compile
[INFO]    org.glassfish.jersey.media:jersey-media-moxy:jar:2.26:compile
[INFO]    org.glassfish.jersey.media:jersey-media-sse:jar:2.26:compile
[INFO]    org.hamcrest:hamcrest-core:jar:1.3:test
[INFO]    org.javassist:javassist:jar:3.22.0-CR2:compile
[INFO]    xalan:xalan:jar:2.7.0:compile
[INFO]    xerces:xercesImpl:jar:2.6.2:compile
[INFO]    xml-apis:xml-apis:jar:1.0.b2:compile
`

The setter javax.xml.datatype.XMLGregorianCalendar.setTime(int,int,int) is a valid setter from the perspective of the docs for XMLGregorianCalendar, does this look familiar to anyone?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MzYxMjk1Ng==,yasson,393612956,82,NA,cwhite102,1414642,,,NA,2018-05-31T17:36:37Z,2018-05-31T17:36:37Z,"I've run into this same problem marshalling some model classes that work fine with Jaxb.
It feels like having any method that starts with 'set' is being interpreted as a property setter.  Even when the method (in our case) takes zero arguments and should likely be ignored (ie. not related to a marshallable property).

```
May 31, 2018 12:35:58 PM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Invalid count of arguments for setter: protected void xxxx.AbstractModelWithMutability.setImmutable_transition()

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MzYxMjk1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQwNTgxMw==,yasson,406405813,82,NA,cristhiank,1218220,Cristhian Lopez,calovi86@gmail.com,NA,2018-07-19T20:34:54Z,2018-07-19T20:34:54Z,"I just ran into this issue with my custom model classes. I have some REST representational classes with utility methods that starts with ""setXXXXXXX(parameter1, paramater2, .....).
And I am getting this exact message.
`15:26:32,588 SEVERE [org.eclipse.yasson.internal.Marshaller] (default task-2) Generating incomplete JSON
15:26:32,593 SEVERE [SYNEKUS] (default task-2) Unhandled error: RESTEASY008205: JSON Binding serialization error javax.json.bind.JsonbException: Invalid count of arguments for setter:`

IMHO I think Yasson should validate that the ""set"" methods have one and only one parameter before invoking them. It will be a hassle for people coming from Java EE7+Jackson (as I am).

Should I open a new issue for this ?

Regards! 
Cristhian.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQwNTgxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQxMjY2Mg==,yasson,406412662,82,NA,cristhiank,1218220,Cristhian Lopez,calovi86@gmail.com,NA,2018-07-19T21:00:05Z,2018-07-19T21:00:05Z,"I found that the number of arguments is being validated in https://github.com/eclipse-ee4j/yasson/blob/a1f5120d603f6d8093ca3efd1d24d2eef63f1dc5/src/main/java/org/eclipse/yasson/internal/model/Property.java#L150

It wouldn't be better to log a warning maybe ? It is blocking if I have a method starting with ""set"" and receiving multiple parameters. Another better option would be exclude this properties from being parsed at all maybe in https://github.com/eclipse-ee4j/yasson/blob/b1a82887dc3bc5225a8f54e0537067736cbbdb53/src/main/java/org/eclipse/yasson/internal/ClassParser.java#L55","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQxMjY2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQxNDM3Mw==,yasson,406414373,82,NA,cristhiank,1218220,Cristhian Lopez,calovi86@gmail.com,NA,2018-07-19T21:06:17Z,2018-07-19T21:06:17Z,"Sorry, please omit the previous comments, I just found out that it is fixed in master https://github.com/eclipse-ee4j/yasson/commit/eaebfcbbc929394d534848b664e2a66118713492#diff-0b679cdd432a9709d06c281d3ac6656b","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjQxNDM3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/82,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNzc1ODU1OA==,yasson,407758558,82,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-07-25T13:43:14Z,2018-07-25T13:43:14Z,"Hi @cristhiank , 
I have created new issue which is mainly focused on problem with ""set"" methods and multiple parameters. 
This issue can be found here #152","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNzc1ODU1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,yasson,290287183,83,"Unable to obtain Instant from TemporalAccessor: {},ISO,UTC resolved to 2018-01-19 of type java.time.format.Parsed",afrunt,5786736,Andrii Frunt,,CLOSED,2018-01-21T16:52:27Z,2019-01-29T12:16:08Z,"Error parsing java.util.Date with custom format. As shown in official guide

<img width=""1036"" alt=""screen shot 2018-01-21 at 6 49 45 pm"" src=""https://user-images.githubusercontent.com/5786736/35196547-2ece6a56-fedc-11e7-9328-ede1e3e1a788.png"">


Steps to reproduce
1. clone maven project from here https://github.com/afrunt/junk/tree/master/yasson-bug
2. run mvn clean package and review the output

Environment
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T10:58:13+03:00)
Maven home: /Users/andrii.frunt/.sdkman/candidates/maven/current
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /Users/andrii.frunt/.sdkman/candidates/java/8u151-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.13.2"", arch: ""x86_64"", family: ""mac""
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI1NDg1Ng==,yasson,362254856,83,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-01T12:43:23Z,2018-02-01T12:43:23Z,"This happens because Yasson is using java.time.format.DateTimeFormatter for handling java.util.Date and java.util.Calendar, which is declared by spec. (See javadoc of `@JsonbDateFormat` and spec document section 3.5).

Java 8 time API declares in  design notes:
The API has been designed to reject null early and to be clear about this behavior.

It is unlucky we have such an example in the official guide.

I have added an option (in Yasson, not the API), for defaulting hours, minutes and seconds to zero when parsing trimmed time json strings into date objects, which will make the above example work as if it is parsed with java.util.SimpleDateFormat. 

`.withConfig(new JsonbConfig().setProperty(JsonbConfigProperties.ZERO_TIME_DEFAULTING, true))`

In this case objects requiring timezone may either: define timezone in the format pattern, or if not defined than UTC timezone is used.

Please see my pull request.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI1NDg1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI2MTIxNA==,yasson,362261214,83,NA,afrunt,5786736,Andrii Frunt,,NA,2018-02-01T13:11:12Z,2018-02-01T13:11:12Z,"Thanks! @bravehorsie 
Looks tricky, but it is better, than nothing","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI2MTIxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI2ODgzMg==,yasson,362268832,83,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-01T13:41:18Z,2018-02-01T13:41:18Z,I am open to any suggestion to make it better.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI2ODgzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3MzYyNg==,yasson,362273626,83,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-01T13:59:19Z,2018-02-01T13:59:19Z,"Please note you can still use HH:mm:ss in patterns when ZERO_TIME_DEFAULTING is on, it just defaults to zero when these are not present.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3MzYyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM5NDAzOQ==,yasson,362394039,83,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-01T20:36:58Z,2018-02-01T20:36:58Z,"I don't like the suggested property name. Suggesting to rename it to DATE_TIME_DEFAULTS or ZERO_TIME_AUTOFILLING or ZERO_TIME_DEFAULTS but not DEFAULTING, it looks strange for me.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM5NDAzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/83,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUzNzg4MQ==,yasson,362537881,83,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-02T09:47:33Z,2018-02-02T09:47:33Z,"DEFAULTING suffix is aligned to method name in  java.time.format.DateTimeFormatterBuilder, which is used in order to avoid rejecting null values by the java.time API. (See https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatterBuilder.html#parseDefaulting-java.time.temporal.TemporalField-long- )

Maybe it can be ZERO_TIME_PARSE_DEFAULTING than.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUzNzg4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,yasson,296095232,88,java.util.Date throws an exception,AliBassam,3617761,Ali Bassam,contact@alibassam.com,CLOSED,2018-02-10T11:54:07Z,2019-01-29T12:16:08Z,"I have a POJO with a java.util.Date field. When using Yasson with JAX-RS, the application throws the following exception, is it trying to serialize it as a java.sql.Date?

  StandardWrapperValve[javaee.MyRestApp]: Servlet.service() for servlet javaee.MyRestApp threw exception
java.lang.UnsupportedOperationException
	at java.sql.Date.toInstant(Unknown Source)
	at org.eclipse.yasson.internal.serializer.DateTypeSerializer.formatDefault(DateTypeSerializer.java:49)
	at org.eclipse.yasson.internal.serializer.DateTypeSerializer.formatDefault(DateTypeSerializer.java:29)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.toJson(AbstractDateTimeSerializer.java:77)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeSerializer.serialize(AbstractDateTimeSerializer.java:54)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:85)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:79)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.writeTo(JsonBindingProvider.java:118)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:266)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:251)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:109)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:85)
	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1135)
	at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:662)
	at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:395)
	at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:385)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:280)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1622)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:258)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:654)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:593)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:159)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:371)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:238)
	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:483)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:180)
	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:206)
	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:180)
	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:242)
	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)
	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)
	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)
	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:539)
	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)
	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593)
	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573)
	at java.lang.Thread.run(Unknown Source)
]]
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/88/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk5OTQ4Mw==,yasson,364999483,88,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-12T17:33:45Z,2018-02-12T17:33:45Z,"> is it trying to serialize it as a java.sql.Date?

No, it doesn't. Please provide as with a test case which we can use to simulate this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDk5OTQ4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTA1NzAyOA==,yasson,365057028,88,NA,AliBassam,3617761,Ali Bassam,contact@alibassam.com,NA,2018-02-12T20:48:53Z,2018-02-12T20:48:53Z,"[javaee.zip](https://github.com/eclipse/yasson/files/1717691/javaee.zip)

This is a very small JAX-RS 2.1 app with embedded H2 database, just generate the war file and deploy. The import.sql file is generating a few records with a date. In case you hit /rest/student/all in the browser you can see the exception thrown.

Thanks.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTA1NzAyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5OTYyMA==,yasson,382399620,88,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-18T14:09:17Z,2018-04-18T14:09:17Z,@Verdent please check it,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5OTYyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/88,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDU4MDE1MQ==,yasson,384580151,88,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-04-26T09:45:58Z,2018-04-26T09:45:58Z,"I have verified that this is no longer an issue against the newest build from master branch.

Closing as not a bug.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDU4MDE1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/89,https://api.github.com/repos/eclipse-ee4j/yasson/issues/89,yasson,296323499,89,Pretty formatting,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-02-12T10:18:21Z,2019-01-29T12:16:08Z,"Currently, if pretty formatting is switched on, Yasson formatting source code this way.
```
{
  “name”: 
  “Harris”,
  “fluffy”: 
  true
}
```

it would be great if keys and values are placed on the same line like this:
```
{
  “name”:  “Harris”,
  “fluffy”:  true
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/89,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDg4NTYwOA==,yasson,364885608,89,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-12T10:40:45Z,2018-02-12T10:40:45Z,"Formatting (pretty print) is actually generated by JSONP and I would expect result to be as formatted in second example.

See - https://github.com/javaee/jsonp/blob/b7bec3e0f9468839857421bc0e84e9d9a8f298a3/api/src/main/java/javax/json/stream/JsonGenerator.java#L170","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NDg4NTYwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/89,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4ODc1MTkyNA==,yasson,388751924,89,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-14T09:19:24Z,2018-05-14T09:19:24Z,Fixed in jsonp. Closing.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4ODc1MTkyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/90,https://api.github.com/repos/eclipse-ee4j/yasson/issues/90,yasson,296324752,90,@JsonbPropertyOrder enchancement,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-02-12T10:22:44Z,2019-01-29T12:16:39Z,"If property order annotation with incomplete list present, properties not included in the annotation are not sorted using order specified in the JsonbConfig.withPropertyOrderStrategy(...).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/90/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/91,https://api.github.com/repos/eclipse-ee4j/yasson/issues/91,yasson,296334251,91,@JsonbTypeAdapter on type doesn't work,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-02-12T10:57:19Z,2019-01-29T12:16:39Z,"Placing @JsonbTypeAdapter annotation on type as it's shown below makes no effect.

```
@JsonbTypeAdapter(MyAdapter.class)
public class MyClass {
  ...
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/91/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/91,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5ODk3Nw==,yasson,382398977,91,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-18T14:07:30Z,2018-04-18T14:07:30Z,Fixed by https://github.com/eclipse-ee4j/yasson/pull/107,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5ODk3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/95,https://api.github.com/repos/eclipse-ee4j/yasson/issues/95,yasson,297132194,95,NPE in AnnotationIntrospector,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2018-02-14T15:15:15Z,2019-01-29T12:16:39Z,"I am attempting to convert the following class to a JSON object:

```java
public class GameBoard {

    @JsonbTransient
    public boolean[][] board = new boolean[BOARD_SIZE][BOARD_SIZE];

    public final Set<Obstacle> obstacles = new HashSet<>();
    public final Set<Player> players = new HashSet<>();

    ...
}
```

This fails with the following exception:
```

[2/14/18 9:09:55:698 CST] 0000001c org.eclipse.yasson.internal.Marshaller                       E Generating incomplete JSON
[2/14/18 9:09:55:699 CST] 0000001c SystemErr                                                    R java.lang.NullPointerException
[2/14/18 9:09:55:699 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.AnnotationIntrospector.checkTransientIncompatible(AnnotationIntrospector.java:534)
[2/14/18 9:09:55:724 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.model.PropertyModel.introspectCustomization(PropertyModel.java:155)
[2/14/18 9:09:55:725 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:87)
[2/14/18 9:09:55:725 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.lambda$orderProperties$0(PropertyOrdering.java:79)
[2/14/18 9:09:55:725 CST] 0000001c SystemErr                                                    R 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
[2/14/18 9:09:55:725 CST] 0000001c SystemErr                                                    R 	at java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1620)
[2/14/18 9:09:55:726 CST] 0000001c SystemErr                                                    R 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
[2/14/18 9:09:55:726 CST] 0000001c SystemErr                                                    R 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
[2/14/18 9:09:55:726 CST] 0000001c SystemErr                                                    R 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
[2/14/18 9:09:55:726 CST] 0000001c SystemErr                                                    R 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
[2/14/18 9:09:55:727 CST] 0000001c SystemErr                                                    R 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
[2/14/18 9:09:55:727 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.orderProperties(PropertyOrdering.java:80)
[2/14/18 9:09:55:727 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:60)
[2/14/18 9:09:55:727 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
[2/14/18 9:09:55:727 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
[2/14/18 9:09:55:728 CST] 0000001c SystemErr                                                    R 	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
[2/14/18 9:09:55:728 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:100)
[2/14/18 9:09:55:728 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:57)
[2/14/18 9:09:55:728 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
[2/14/18 9:09:55:728 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
[2/14/18 9:09:55:729 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
[2/14/18 9:09:55:729 CST] 0000001c SystemErr                                                    R 	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
[2/14/18 9:09:55:729 CST] 0000001c SystemErr                                                    R 	at org.libertybikes.game.core.GameRound.addSpectator(GameRound.java:113)
[2/14/18 9:09:55:729 CST] 0000001c SystemErr                                                    R 	at org.libertybikes.game.core.GameRound.handleMessage(GameRound.java:96)
[2/14/18 9:09:55:729 CST] 0000001c SystemErr                                                    R 	at org.libertybikes.game.round.service.GameRoundWebsocket.onMessage(GameRoundWebsocket.java:62)
[2/14/18 9:09:55:730 CST] 0000001c SystemErr                                                    R 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[2/14/18 9:09:55:730 CST] 0000001c SystemErr                                                    R 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[2/14/18 9:09:55:730 CST] 0000001c SystemErr                                                    R 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[2/14/18 9:09:55:730 CST] 0000001c SystemErr                                                    R 	at java.lang.reflect.Method.invoke(Method.java:498)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.LinkRead.callOnMessage(LinkRead.java:1127)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.LinkRead.processOnMessageTextAnnotation(LinkRead.java:981)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.LinkRead.processRead(LinkRead.java:306)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.WsocConnLink.processRead(WsocConnLink.java:990)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.WsocReadCallback.completeLogic(WsocReadCallback.java:61)
[2/14/18 9:09:55:731 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.wsoc.WsocReadCallback.complete(WsocReadCallback.java:47)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.tcpchannel.internal.WorkQueueManager.requestComplete(WorkQueueManager.java:501)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.tcpchannel.internal.WorkQueueManager.attemptIO(WorkQueueManager.java:571)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.tcpchannel.internal.WorkQueueManager.workerRun(WorkQueueManager.java:926)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at com.ibm.ws.tcpchannel.internal.WorkQueueManager$Worker.run(WorkQueueManager.java:1015)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
[2/14/18 9:09:55:732 CST] 0000001c SystemErr                                                    R 	at java.lang.Thread.run(Thread.java:745)
```

Still digging into what caused this so I can provide a more detailed explanation, but at the very least we should not be getting NPEs out of Yasson code with poor error messages like this.  Need to be more descriptive on what the user may have done wrong and how the issue can be fixed.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/95,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTY1NDk5OQ==,yasson,365654999,95,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-02-14T16:05:57Z,2018-02-14T16:05:57Z,"Looks like the culprit was the `board` attribute.

This issue was discovered on an OpenLiberty beta, which uses yasson 1.0.  It looks like this issue has been fixed in version 1.0.1, so I'm going to cancel this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NTY1NDk5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,yasson,297833371,96,SimpleTest fails when using a different JSON-P impl,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2018-02-16T16:00:42Z,2019-01-29T12:34:30Z,"Yasson should work with any spec compliant JSON-P 1.1 implementaiton.  If I try to use Yasson with Apache Johnzon, serializing a simple POJO with a String attribute fails with the following error:

```
javax.json.stream.JsonGenerationException: write(param) is only valid in arrays
	at org.apache.johnzon.core.JsonGeneratorImpl.checkArray(JsonGeneratorImpl.java:614)
	at org.apache.johnzon.core.JsonGeneratorImpl.write(JsonGeneratorImpl.java:378)
	at org.eclipse.yasson.internal.serializer.StringTypeSerializer.serialize(StringTypeSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.StringTypeSerializer.serialize(StringTypeSerializer.java:1)
	at org.eclipse.yasson.internal.serializer.AbstractValueTypeSerializer.serialize(AbstractValueTypeSerializer.java:51)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:94)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:119)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:75)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at org.eclipse.yasson.SimpleTest.testSimpleSerialize(SimpleTest.java:48)
        <rest of the stack is junit runner>
```

This used to work with Yasson 1.0, and seems to have regressed in Yasson 1.0.1.

This can be easily reproduced by changing the JSON-P dependency from `org.glassfish:javax.json` to `org.apache.johnzon:johnzon-core:1.1.5` and running org.eclipse.yasson.SimpleTest.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjI4NTY2NA==,yasson,366285664,96,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-02-16T16:30:25Z,2018-02-16T16:30:25Z,"It seems the regression was caused by this commit:
https://github.com/eclipse/yasson/commit/d07215438772598407ba9842514e0030b403faf4#diff-44d72b506105258cffab226412abc88b

Looks like if we have the class:
```java
public class Data {
  public String foo = ""bar"";
}
```
Then Yasson will write this by effectively doing:
`generator.writeStartObject​().write(""foo"").write(""bar).writeEndObject​()`

Johnzon seems to interpret the JSON-P spec as requiring:
`generator.writeStartObject​().write(""foo"", ""bar"").writeEndObject​()`
and asserts that the single-write operations such as `write(""foo"")` are only allowed in the context of JSON arrays.

So the question is: 
Should `write(""key"").write(""value"")` be allowed by the spec?  The javadoc states:
> JsonGenerator#write​(String value)
> Writes the specified value as a JSON string value within the current array, field or root context.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjI4NTY2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjI4OTUzOQ==,yasson,366289539,96,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-02-16T16:43:31Z,2018-02-16T16:43:31Z,"I've opened an issue on the JSON-P spec for clarificaiton.  Based on the outcome of that issue, this will either be a no-op (Johnzon would need to change) or this would be a valid bug and Yasson would need to change.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjI4OTUzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA3MDU0Ng==,yasson,368070546,96,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-23T17:00:48Z,2018-02-23T17:00:48Z,"I commented on JSON-P issue you created. The idea was to allow write(param) method to be used in JSON objects, but we forgot to change the spec. I'll contact Johnzon folks and try to convince them logging a warning in this case instead of throwing an exception.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA3MDU0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3OTM4OQ==,yasson,435379389,96,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-02T13:25:58Z,2018-11-02T13:25:58Z,@m0mus @aguibert Looks this can be closed?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3OTM4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/96,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTU5OTM0NA==,yasson,435599344,96,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-03T16:07:48Z,2018-11-03T16:07:48Z,"@bravehorsie yea this can be closed, since the required action is by the Johnzon code, not the Yasson code","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTU5OTM0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/97,https://api.github.com/repos/eclipse-ee4j/yasson/issues/97,yasson,298982340,97,java.lang.IllegalArgumentException: wrong number of arguments on getter,maxencelaurent,6583528,,,CLOSED,2018-02-21T14:04:35Z,2019-01-29T12:16:39Z,"Given a very simple class like

```
public class Dummy {
    private String name;

    public String getName(){
        return name;
    }

    public String getNameWithSuffix(String suffix){
        return this.getName() + suffix;
    }
}
```
java.lang.IllegalArgumentException is thrown during the serialisation because getNameWithSuffix(String) is seen has a getter and is invoked without any argument.
```
java.lang.IllegalArgumentException: wrong number of arguments
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:28)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:72)
```


I can easily update my code to fix this issue (rename the method or annotate it with @JsonbTransient), but such a method should not be seen as a getter at all. 

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/97,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzMzNzUyMA==,yasson,367337520,97,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-21T14:09:45Z,2018-02-21T14:09:45Z,"Thanks @maxencelaurent 
This is duplicate for #63 and is already fixed in master.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzMzNzUyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/98,https://api.github.com/repos/eclipse-ee4j/yasson/issues/98,yasson,299661209,98,"Can't create instance of a class: interface java.util.Collection, No default constructor found.",maxencelaurent,6583528,,,CLOSED,2018-02-23T10:13:42Z,2019-01-29T12:16:39Z,"Such a test fails:
```
public class DefaultCollectionInstanceTest {

    public static class Dummy {
        public Collection<String> c;
    }

    @Test
    public void testDummy() {
        JsonbBuilder.create().fromJson(""{\""c\"": []}"", Dummy.class);
    }
}
```

org.eclipse.yasson.internal.serializer.CollectionDeserializer#createInterfaceInstance can create instances for various interfaces which extends Collection but not for Collection itself. 

Shouldn't this method be able to create instances for collections ? 
```
      if (Collection.class == ifcType) {
                return (T) new ArrayList();
      }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/98,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk3Nzg4OQ==,yasson,367977889,98,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-02-23T10:57:53Z,2018-02-23T10:57:53Z,Looks to be correct. Thanks @maxencelaurent ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk3Nzg4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/98,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTI5MDI1Ng==,yasson,391290256,98,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-23T09:53:36Z,2018-05-23T09:53:36Z,Fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTI5MDI1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/99,https://api.github.com/repos/eclipse-ee4j/yasson/issues/99,yasson,299729540,99,Default methods from interface are ignored,maxencelaurent,6583528,,,CLOSED,2018-02-23T14:30:12Z,2019-01-29T12:16:39Z,"Property defined within interfaces with the help of default methods shouln't be ignored.

This test fails:
```
public class DefaultMethodTest {

    public static interface Defaulted {

        default public String getGetterA() {return ""valueA"";}
    }

    public static class PojoWithDefault implements Defaulted {
    }

    @Test
    public void testWithDefault() {
        PojoWithDefault pojo = new PojoWithDefault();
        String result = jsonb.toJson(pojo);
        System.out.println(""JSON: "" + result);
        Assert.assertEquals(""{\""getterA\"":\""valueA\""}"", result);
    }
}
```

ClassParser should handle such default methods.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/99,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA2MDk5Nw==,yasson,368060997,99,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-02-23T16:30:59Z,2018-02-23T16:30:59Z,It's a philosophical question should default method be treated as a getter or not. I guess that it should. Submit a PR. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODA2MDk5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/101,https://api.github.com/repos/eclipse-ee4j/yasson/issues/101,yasson,304430107,101,NullPointerException at DeserializerBuilder.isJsonValueEvent(DeserializerBuilder.java:174),wizzardo,5871626,Mikhail Bobrutskov,wizzardobox@gmail.com,CLOSED,2018-03-12T15:52:00Z,2019-01-29T12:16:39Z,"```
Exception in thread ""main"" java.lang.NullPointerException
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.isJsonValueEvent(DeserializerBuilder.java:174)
	at org.eclipse.yasson.internal.serializer.DeserializerBuilder.build(DeserializerBuilder.java:123)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
```

```
    public static class StringHolder {
        public String value;
    }

    public static void main(String[] args) throws IOException {
        Jsonb jsonb = JsonbBuilder.create();
        Object items = jsonb.fromJson(""{\""value\"":\""qwerty\""}"", StringHolder.class);
        String result = jsonb.toJson(items);
        System.out.println(result);
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/101,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjUyMzE4NA==,yasson,396523184,101,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-12T09:16:55Z,2018-06-12T09:16:55Z,I have tested it against the master and looks like it is fixed now. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjUyMzE4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,yasson,305892192,102,Yasson requires its own/internal JSON-P implementation to work ... ???,amoscatelli,16684470,,,OPEN,2018-03-16T11:22:38Z,2021-03-05T16:11:12Z,"I am implementing polymorphism mechanism with JSON-B, similar to Jackson one.
So I need to scan for a ""@type"" attribute and then deserialize again with the correct class.

```java
public class IdentifiableSerializer implements JsonbDeserializer<FindCriteriaDTO> {

    private final Reflections reflections;

    public IdentifiableSerializer(Reflections reflections) {
        this.reflections = reflections;
    }
    
    @Override
    public FindCriteriaDTO deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
        
        JsonObject preview = ctx.deserialize(JsonObject.class, parser);
        
        if (preview.keySet().contains(""@type"")){
            Optional<Class<? extends FindCriteriaDTO>> type = reflections.getSubTypesOf(FindCriteriaDTO.class).stream().filter(e -> StringUtils.equals(preview.getString(""@type""), e.getSimpleName())).findFirst();
            
            if (type.isPresent()){
                
                StringWriter stringWriter = new StringWriter();
                Json.createWriter(stringWriter).writeObject(preview);
                JsonParser newParser = Json.createParser(new StringReader(stringWriter.toString()));
                
                FindCriteriaDTO deserialize = ctx.deserialize(type.get(), newParser);
                
                return deserialize;
            }
            
        }
        
        return ctx.deserialize(FindCriteriaDTO.class, parser);
        
    }
```

If I create a new JsonParser calling the JSON-P method a different implementation is returned (and this should not be an issue! json-b and json-p are different specifications!). But then I see this exception :

org.glassfish.json.JsonParserImpl cannot be cast to org.eclipse.yasson.internal.JsonbParser

This casting is the reason (org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer:58) :

```java
@Override
    public final T deserialize(JsonParser parser, DeserializationContext context, Type rtType) {
        Unmarshaller ctx = (Unmarshaller) context;
        ctx.setCurrent(this);
        deserializeInternal((JsonbParser) parser, ctx);
        ctx.setCurrent(getWrapper());
        return getInstance((Unmarshaller) context);
    }
```

I don't think this is the proper behavior.
Am I wrong ?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQwMDI5Mg==,yasson,382400292,102,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-18T14:11:11Z,2018-04-18T14:11:11Z,@bravehorsie please help,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQwMDI5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQyNjY2NA==,yasson,382426664,102,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-04-18T15:25:43Z,2018-04-18T15:25:43Z,"You should not create it. It is passed in the deserialize method parameter. JsonbParser decorates to Jsonp, doing its business around it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQyNjY2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQyNzY3NQ==,yasson,382427675,102,NA,amoscatelli,16684470,,,NA,2018-04-18T15:28:30Z,2018-04-18T15:28:30Z,"I NEED to create it. And the spec says the deserializer context should accept a standard JsonParser, not a org.eclipse.yasson.internal.JsonbParser. This is what interfaces stand for.

This is clearly out of specification.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjQyNzY3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAwMDk1MQ==,yasson,383000951,102,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-04-20T07:01:46Z,2018-04-20T07:01:46Z,"Specification refers to jsonp api, not the RI. JsonParser is what you get in (de)serializer to drive it yourself. To deserialize java object from json you need to create Jsonb runtime instance, and call `jsonb.deserialize(json, FindCriteriaDTO.class)`. You have both in your deserializer implementation code.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAwMDk1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAzMDY2Ng==,yasson,383030666,102,NA,amoscatelli,16684470,,,NA,2018-04-20T08:51:29Z,2018-04-20T08:51:29Z,"Yea and you are not using the JSONP api, but your specific implementation.

JSONP API:
javax.json.stream.JsonParser
Provides forward, read-only access to JSON data in a streaming way.

JSONB API :
javax.json.bind.serializer.DeserializationContext<T>
Provides JSONB Mapper functionality on top of JSONP parser
<T> T deserialize(Class<T> clazz, javax.json.stream.JsonParser parser);

DeserializationContext deserialize method should work with ANY JsonParser jsonp implementation. Not only RI (org.glassfish.json.JsonParserImpl), not only others (org.eclipse.yasson.internal.JsonbParser). It should work independently of what implementation the API Json.createParser() could return.

Regarding the solution/workaround you proposed I do NOT have the reference the jsonb inside a JsonbDeserializer. I could inject it in some way, but I do not think that's the clean way.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAzMDY2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAzODIxOA==,yasson,383038218,102,NA,amoscatelli,16684470,,,NA,2018-04-20T09:19:31Z,2018-04-20T09:19:31Z,"Of course creating a NEW Jsonb Object inside the Deserializer should not be a solution also, since it would not be configurated like the original one.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzAzODIxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4NjM4OA==,yasson,435386388,102,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-02T13:51:10Z,2018-11-02T13:51:10Z,"> DeserializationContext deserialize method should work with ANY JsonParser jsonp implementation. Not only RI (org.glassfish.json.JsonParserImpl), not only others (org.eclipse.yasson.internal.JsonbParser). It should work independently of what implementation the API Json.createParser() could return.

So it does. You can provide any JSONP implementation to Yasson to work with it. What you do is you substitute running JSONP parser which has a cursor at some point of the document with new parser instance reading new document but you call current runtime on it, that is wrong. If you want to read a new document you should create new runtime with your parser instance.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4NjM4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/102,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MTQzMDc1OQ==,yasson,791430759,102,NA,alessandro-tucci-visiontech,50661302,Alessandro Tucci,,NA,2021-03-05T13:49:52Z,2021-03-05T13:49:52Z,"> So it does. You can provide any JSONP implementation to Yasson to work with it.

@bravehorsie I am not getting how a custom JSONP implementation can be actually provided to Yasson. From what I can see from here: https://github.com/eclipse-ee4j/yasson/blob/f8263f765368af3609e55da568f596a95483cbea/src/main/java/org/eclipse/yasson/internal/serializer/AbstractContainerDeserializer.java#L64
there is an explicit cast to **org.eclipse.yasson.internal.JsonbParser** of the provided JsonParser parameter. So, from what I see, I would say there is no way to avoid using a parser based on the Yasson-specific interface (JsonbParser), currently.
Am I wrong?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MTQzMDc1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/103,https://api.github.com/repos/eclipse-ee4j/yasson/issues/103,yasson,305950027,103,Can not serialize generic class ,amoscatelli,16684470,,,CLOSED,2018-03-16T14:31:22Z,2019-01-29T12:16:39Z,"Simple as the title states :

`
    @POST
    @Path(""/find"")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @Override
    public FindResultDTO<ProductDTO> find() {
        FindResultDTO<ProductDTO> findResultDTO = new FindResultDTO<>();
        findResultDTO.setCount(5L);
        findResultDTO.setResults(Arrays.asList(new ProductDTO()));
        return findResultDTO;
    }

public class FindResultDTO<D extends IdentifiableDTO> {
    
    private Long count;
    private Collection<D> results;

    public Long getCount() {
        return count;
    }

    public void setCount(Long count) {
        this.count = count;
    }

    public Collection<D> getResults() {
        return results;
    }

    public void setResults(Collection<D> results) {
        this.results = results;
    }
    
}

`

15:23:28,737 SEVERE [org.eclipse.yasson.internal.Marshaller] (default task-1) Generating incomplete JSON
Generic bound not found for type D declared in FindResultDTO.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/103,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MzczMzI1Mw==,yasson,373733253,103,NA,amoscatelli,16684470,,,NA,2018-03-16T14:38:39Z,2018-03-16T14:38:39Z,"If I remove generics from FindResultDTO , of course, it works","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MzczMzI1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/103,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDkyNzc4Ng==,yasson,374927786,103,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-03-21T12:59:03Z,2018-03-21T12:59:03Z,"Hi,
Could you please provide sample test which can reproduce this issue?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDkyNzc4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/103,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NTAzODg4MQ==,yasson,375038881,103,NA,amoscatelli,16684470,,,NA,2018-03-21T17:57:05Z,2018-03-21T17:57:05Z,"Sorry ... I can't reproduce this anymore ...

I updated to 1.0.2 SNAPSHOT a couple of days ago.

Thx.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NTAzODg4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/106,https://api.github.com/repos/eclipse-ee4j/yasson/issues/106,yasson,307611329,106,Avoid N different Deserializer/Serializer/Adapter for N different type,amoscatelli,16684470,,,CLOSED,2018-03-22T11:51:23Z,2019-01-29T12:34:30Z,"Is it possible to declare/use a single Deserializer/Serializer/Adapter for different types ?

Let me explain :

I have many DTOs (100+) and all of them extends a common root class (IdentifiableDTO.class).

I have a Deserializer that simply manages to accomplish polymorphism by preparsing a special attribute (""@type"" for completeness).

If such Deserializer implements JsonbDeserializer < IdentifiableDTO > it won't ever be called/used by JsonB for any child class, even if I annotated such class with JsonbTypeDeserializer.

So I ended up creating an Abstract generic Deserializer extended by 100+ child deserializer for each type of DTO.

I think that if I declare a JsonbTypeDeserializer on a type, or a parent type, such deserializer should be called anyway and a check on type should be made on the deserialized returned object, regarding the deserializer maybe I would only check if the type declared in the generics is assignable from the desired type.

This would be a real support for polymorphism.

What do you think ? I may help with coding if you agree with me.
I hope I explained myself.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/106,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDE2MjQwMA==,yasson,380162400,106,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-10T16:23:11Z,2018-04-10T16:23:11Z,Serializers and Deserializers registered on parent types are called when you are serializing/deserializing child classes. Look at the sample project here https://github.com/m0mus/JavaOne2016-JSONB-Demo. Maybe it needs to be updated to the latest Yasson version. For me it looks like you are doing something wrong. Please create a reproducer so we can take a look.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDE2MjQwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/106,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4MTUxMw==,yasson,435381513,106,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-02T13:33:39Z,2018-11-02T13:33:39Z,"Sovled by #164 
Serializers/Deserializers are now allowed on subtypes.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4MTUxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,yasson,311754989,109,@JsonbTypeSerializer at class level does not work,musulin,7537663,,,CLOSED,2018-04-05T20:20:07Z,2019-01-29T12:16:39Z,"I am trying to serialize a class using the @JsonbTypeSerializer annotation at the class level, like:

`@JsonbTypeSerializer(AnnotatedWithSerializerTypeSerializer.class)
   public class AnnotatedWithSerializerType {
     public String value;
 }`

the test code is the following:

`public static void main(String[] args) {
final Jsonb jsonb = JsonbBuilder.create();
AnnotatedWithSerializerType annotatedType = new AnnotatedWithSerializerType();
 annotatedType.value = ""def"";
 System.out.println(jsonb.toJson(annotatedType));
}`

the deserializer is not called, the output is just: {""value"":""def""}.
Not sure if this is a bug or the expected behaviour.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/109/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTI5MDg1Ng==,yasson,379290856,109,NA,bodote,8531026,,bodo.teichmann@brandad-systems.de,NA,2018-04-06T15:34:19Z,2018-04-06T15:34:19Z,"I would guess, its a bug, for a possible fix see https://github.com/eclipse-ee4j/yasson/pull/107 , I believe, that's related
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTI5MDg1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTI5ODUyOQ==,yasson,379298529,109,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-06T16:00:06Z,2018-04-06T16:00:06Z,Looks like a bug. @Verdent can you please confirm it? ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTI5ODUyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDQ2OTIyNw==,yasson,380469227,109,NA,whyvrafvr,19473981,_whyvrafvr,,NA,2018-04-11T14:19:47Z,2018-04-11T14:19:47Z,Hi folks. Is it possible to apply this annotation on a class?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDQ2OTIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDQ3MzgzOA==,yasson,380473838,109,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-04-11T14:32:12Z,2018-04-11T14:32:12Z,"@skonx Yes, it is possible. I believe it currently doesn't work only when annotated is root type passed for serialization / deserialization.

@Verdent has a fix under way.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDQ3MzgzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDc0OTEyNA==,yasson,380749124,109,NA,whyvrafvr,19473981,_whyvrafvr,,NA,2018-04-12T10:05:32Z,2018-04-12T10:05:32Z,"thx @bravehorsie. 
Could you please clarify?

For exemple, let's use @musulin's annotation. 
Do we have to use the `@JsonbTypeSerializer` annotation on top of `AnnotatedWithSerializerType` class or on top of a class having a field (or a method) using the `AnnotatedWithSerializerType`? 

Furthermore, correct me if I'm wrong but assuming we're talking about the first option, we will avoid to implement serializers/deserializers for the specific type (here `AnnotatedWithSerializerType`) **and** its collection usage. 
I mean we must also implement a serializer/deserializer for` List<AnnotatedWithSerializerType>` if the annotation is not yet working on top of a class... and I guess it's a harder stuff than expected.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDc0OTEyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/109,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5ODY1OA==,yasson,382398658,109,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-18T14:06:32Z,2018-04-18T14:06:32Z,Fixed by https://github.com/eclipse-ee4j/yasson/pull/107,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjM5ODY1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,yasson,312545074,110,Adapter not working for Map key,s00r,38214211,,,CLOSED,2018-04-09T14:06:09Z,2019-03-15T11:13:54Z,"I'm trying to use adapters to serialize a Map of two objects. Adapter is working fine for value but not working for the key.
Example : 
```
public class TestJsonB {

    public static void main(String[] args) {

        TestJsonB tB = new TestJsonB();
        TestAdapter test = tB.new TestAdapter();
        Map<Type, Status> mapTest = new HashMap<>();
        mapTest.put(Type.OIDVAL, Status.ACTIVE);
        test.setMap(mapTest);

        Jsonb jsonB = SerializationUtils.getJSONBuilder(false, tB.new TypeAdapter(), tB.new StatusAdapter());
        System.out.println(jsonB.toJson(test));

    }

    class TestAdapter {
        Map<Type, Status> map;

        /**
         * @return the map
         */
        public Map<Type, Status> getMap() {
            return map;
        }

        /**
         * @param map
         *            the map to set
         */
        public void setMap(Map<Type, Status> map) {
            this.map = map;
        }
    }

    enum Type {
        OIDVAL, MSISDN;
    }

    enum Status {
        ACTIVE, INACTIVE;
    }

    class TypeAdapter implements JsonbAdapter<Type, String> {

        @Override
        public String adaptToJson(Type obj) throws Exception {
            return obj.name().toLowerCase();
        }

        @Override
        public Type adaptFromJson(String obj) throws Exception {
            return Type.valueOf(obj);
        }

    }

    class StatusAdapter implements JsonbAdapter<Status, String> {

        @Override
        public String adaptToJson(Status obj) throws Exception {
            return obj.name().toLowerCase();
        }

        @Override
        public Status adaptFromJson(String obj) throws Exception {
            return Status.valueOf(obj);
        }

    }

}
```
Output is : 
```
{""map"":{""OIDVAL"":""active""}}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjU4MDI0Nw==,yasson,396580247,110,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-12T12:59:33Z,2018-06-12T12:59:33Z,"Hi @s00r , we are not supporting adapters used on Map key at the moment. Map key is now serialized by calling method toString so if you need different output, you need to create your own toString method implemetation.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjU4MDI0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1Mjk0OQ==,yasson,399952949,110,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-25T13:32:41Z,2018-06-25T13:32:41Z,Closing,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1Mjk0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzAzOTAzMQ==,yasson,473039031,110,NA,nickarls,371975,,,NA,2019-03-14T20:05:43Z,2019-03-14T20:05:43Z,I would like to +1 this for re-opening. It's a bit counter-intuitive  to use the toString since the object being serialized is probably a domain object that might have needs for a descriptive toString implementation. It's also a bit surprising if someone changes the toString implementation and something seemingly unrelated breaks.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzAzOTAzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzIzOTQyNw==,yasson,473239427,110,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-03-15T10:43:27Z,2019-03-15T10:43:27Z,What is the suggestion to avoid toString key calls?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzIzOTQyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0NTY0Nw==,yasson,473245647,110,NA,nickarls,371975,,,NA,2019-03-15T11:05:23Z,2019-03-15T11:05:23Z,"> What is the suggestion to avoid toString key calls?

Is this something specific for Map keys or is the behaviour the same for key values or e.g. stuff in collections? If type erasure would be a problem then nothing would work anywhere(?). If the type information is there, couldn't you just check with the proper context resolver if it can do the job?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0NTY0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/110,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0Nzg3MA==,yasson,473247870,110,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-03-15T11:13:53Z,2019-03-15T11:13:53Z,Lets continue the discussion in the referenced issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0Nzg3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/111,https://api.github.com/repos/eclipse-ee4j/yasson/issues/111,yasson,312605361,111,Properties order not applied on map keys,s00r,38214211,,,CLOSED,2018-04-09T16:46:35Z,2019-01-29T12:16:39Z,"Property order is not working globally on the json object. forexample it's not working on map keys 
```
public class Test {

    private static Jsonb jsonb;

    @BeforeAll
    public static void setUp() {
        JsonbConfig jbConf = new JsonbConfig().withPropertyOrderStrategy(PropertyOrderStrategy.LEXICOGRAPHICAL);
        jsonb = JsonbBuilder.newBuilder().withConfig(jbConf).build();
    }

    @Test
    public void propertyOrderTest() {

        Map<String, String> map = new HashMap<>();
        map.put(""Alex"", ""alex@gmail.com"");
        map.put(""Jonas"", ""enrico@gmail.com"");
        map.put(""Benjamin"", ""fitz@gmail.com"");
        map.put(""Julie"", ""Julie@gmail.com"");
        map.put(""Soudeh"", ""soudeh@gmail.com"");
        map.put(""Pierre"", ""pierre@gmail.com"");

        TestProperty prop = new TestProperty();
        prop.setMapMail(map);
        prop.setTime(OffsetDateTime.parse(""2014-06-20T00:00:00.000+02:00""));
        assertEquals(
                ""{\""mapMail\"":{\""Alex\"":\""alex@gmail.com\"",\""Benjamin\"":\""fitz@gmail.com\"",\""Jonas\"":\""enrico@gmail.com\"",\""Julie\"":\""Julie@gmail.com\"",\""Pierre\"":\""pierre@gmail.com\"",\""Soudeh\"":\""soudeh@gmail.com\""},\""time\"":\""2014-06-20T00:00+02:00\""}"",
                jsonb.toJson(prop));

    }
```
and the java Bean 
```
class TestProperty {
        Map<String, String> mapMail;
        OffsetDateTime time;
    }
```

not sure it's a bug.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/114,https://api.github.com/repos/eclipse-ee4j/yasson/issues/114,yasson,316146945,114,Generating incomplete JSON error while serializing optional map,javierestevez,17927469,Javier Estévez Sánchez,,CLOSED,2018-04-20T06:46:10Z,2019-01-29T12:34:30Z,"The following code
```
Map<String, OptionalInt> ints = new HashMap<>();
ints.put(""first"", OptionalInt.of(1));
ints.put(""second"", OptionalInt.empty());
final Jsonb jsonb = JsonbBuilder.create();
String result = jsonb.toJson(ints);
```
will result in a SEVERE: Generating incomplete JSON error. I would expect instead the following JSON to be produced:
```
{""first"":1,""second"":null}
```
I believe the cause of this issue lies on this else-if in OptionalIntTypeSerializer#serialize:
```
...
} else if (model.getCustomization().isNillable()) {
    generator.writeNull();
}
```
I tried removing the if condition and empty Optionals are then properly serialized (at least tests pass). See pull request #113.

The same issue likely occurs in other Optional serializers (I was able to reproduce the same issue with OptionalObjectSerializer).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/114,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Nzk5Njk0OA==,yasson,387996948,114,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-10T09:02:54Z,2018-05-10T09:02:54Z,"I have tried your sample against the master and it generates following output.
`{""first"":1,""second"":null}`

May I ask you which version of Yasson are you using?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Nzk5Njk0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/114,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4MTg2MQ==,yasson,435381861,114,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-02T13:34:54Z,2018-11-02T13:34:54Z,Closing due to inactivity.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM4MTg2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/115,https://api.github.com/repos/eclipse-ee4j/yasson/issues/115,yasson,316153270,115,Collections of values annotated with @JsonbTypeSerializer not properly serialized,javierestevez,17927469,Javier Estévez Sánchez,,CLOSED,2018-04-20T07:13:40Z,2019-01-29T12:16:39Z,"The following code (classes used below come from yasson tests):
```
AnnotatedWithSerializerType annotatedWithSerializerType = new AnnotatedWithSerializerType();
annotatedWithSerializerType.value = ""original value"";
Map<String, Object> map = new HashMap<>();
map.put(""key"", annotatedWithSerializerType);

final Jsonb jsonb = JsonbBuilder.create();
String mapJson = jsonb.toJson(map)
```
fails to produce the expected JSON below:
```
{""key"":{""valueField"":""replaced value""}}
```
And instead produces the JSON:
```
{""key"":{""value"":""original value""}}
```
ignoring the @JsonbTypeSerializer annotation on class AnnotatedWithSerializerType.

This seems to occur for collections using MapSerializer, CollectionSerializer and ObjectArraySerializer. I created tests for such cases in pull request #113.

I believe the issue comes from AbstractContainerSerializer#serializeItem which uses the model of the container instead of that of the item, loosing all customizations defined at that level. I tried to fix this on pull request #113 but I broke adapters on collections as a side effect 😉.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/115,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzE5Njc5Ng==,yasson,383196796,115,NA,musulin,7537663,,,NA,2018-04-20T19:22:27Z,2018-04-20T19:22:27Z,"Just another example of the same issue (I think):

```
public class SerializersTest {

	public static void main(String[] args) {
		
    	final Jsonb jsonb = JsonbBuilder.create();
    	
        AnnotatedWithSerializerType annotatedType = new AnnotatedWithSerializerType();
        annotatedType.value = ""def"";
        System.out.println(jsonb.toJson(annotatedType));
        //{""valueField"":""replaced value""} -->OK

        AnnotatedWithSerializerType at1 = new AnnotatedWithSerializerType();
        at1.value = ""def1"";
        AnnotatedWithSerializerType at2 = new AnnotatedWithSerializerType();
        at2.value = ""def2"";
        AnnotatedWithSerializerType at3 = new AnnotatedWithSerializerType();
        at3.value = ""def3"";

       Collection<AnnotatedWithSerializerType> annotatedTypes = new ArrayList<>();
       annotatedTypes.add(at1);
       annotatedTypes.add(at2);
       annotatedTypes.add(at3);
        
       System.out.println(jsonb.toJson(annotatedTypes));
       //[{""value"":""def1""},{""value"":""def2""},{""value"":""def3""}] --> Serializer is not called
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzE5Njc5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/115,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2OTQ1OQ==,yasson,392469459,115,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-28T09:12:51Z,2018-05-28T09:12:51Z,This issue is now fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2OTQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/116,https://api.github.com/repos/eclipse-ee4j/yasson/issues/116,yasson,317514713,116,I-JSON option doesn't work as expected,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,CLOSED,2018-04-25T07:47:06Z,2019-01-29T12:16:39Z,"The problem is probably due to a lack of a specification for the I-JSON option:
https://github.com/javaee/jsonb-spec/issues/80

```json
{""age"":4,""bitable"":false,""ijsonlong"":9223372036854775807,""name"":""Falco""}
```

Using I-JSON an integer type like `long` must not use JSON ""Number"" serialization.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/116,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDQwMjkxNw==,yasson,390402917,116,NA,cyberphone,8044211,Anders Rundgren,anders.rundgren.net@gmail.com,NA,2018-05-19T12:51:04Z,2018-05-19T12:51:04Z,have been dealt with elsewhere,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDQwMjkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/117,https://api.github.com/repos/eclipse-ee4j/yasson/issues/117,yasson,318471811,117,Serializing Map with multiple null values fails,etay2000,25994877,,,CLOSED,2018-04-27T16:25:50Z,2019-01-29T12:16:39Z,"Serializing a Map with multiple null values only serializes the first null value then bails early.

```
Map<String, Object> map = new HashMap<>();
map.put(""key1"", null);
map.put(""key2"", null);
map.put(""key3"", null);
Jsonb jsonb = JsonbBuilder.create();
String json = jsonb.toJson(map);
```
Produces
```
{""key1"": null}
```
Expected
```
{""key1"": null, ""key2"": null, ""key3"": null}
```
This seems to be caused by the method 'serializeInteral' in org.eclipse.yasson.internal.serializer.MapSerializer
```
@SuppressWarnings(""unchecked"")
    @Override
    protected void serializeInternal(T obj, JsonGenerator generator, SerializationContext ctx) {
        for (Map.Entry<?,?> entry : obj.entrySet()) {
            final String keysString = String.valueOf(entry.getKey());
            final Object value = entry.getValue();
            if (value == null) {
                generator.writeNull(keysString);
                return; // <---------- Incorrectly returns after first encountered null value
            }
            generator.writeKey(keysString);
            serializeItem(value, generator, ctx, containerModel);
        }
}
```
And could be fixed by changing to
```
@SuppressWarnings(""unchecked"")
    @Override
    protected void serializeInternal(T obj, JsonGenerator generator, SerializationContext ctx) {
        for (Map.Entry<?,?> entry : obj.entrySet()) {
            final String keysString = String.valueOf(entry.getKey());
            final Object value = entry.getValue();

            if (value == null) {
                generator.writeNull(keysString);
            } else {
                generator.writeKey(keysString);
                serializeItem(value, generator, ctx, containerModel);
            }

        }
    }
```
which produces
```
{""key1"": null, ""key2"": null, ""key3"": null}
```
However, it is unclear as to whether or not null Map values should respect the 'withNullValues' option of JsonConfig.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/117,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTEwNjUzMA==,yasson,385106530,117,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-04-27T22:08:22Z,2018-04-27T22:08:22Z,"It looks like a bug. I have to check with the spec, but I think that withNullValues doesn't affect map values.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTEwNjUzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/117,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk5MDgxNA==,yasson,386990814,117,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-07T08:06:31Z,2018-05-07T08:06:31Z,This issue has been fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk5MDgxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/118,https://api.github.com/repos/eclipse-ee4j/yasson/issues/118,yasson,319024608,118,Deserialization still not working with a protected no-arg constructor,skomisa1,30328432,,,CLOSED,2018-04-30T20:29:01Z,2019-01-29T12:16:39Z,"This is a reopening of closed issue [Deserialization not working for classes with a protected no-arg constructor #56](https://github.com/eclipse-ee4j/yasson/issues/56) which stated _""This issue has been fixed in Yasson 1.0.1""_ 

I am seeing exactly the same problem when using **yasson-1.1.0-20170828.110213-3.jar**.

A trivial Maven application [jsonbexample.zip](https://github.com/eclipse-ee4j/yasson/files/1962888/jsonbexample.zip) is attached to demonstrate the problem. It serializes and deserializes Widget objects using Yasson 1.1.0. When run it will:
- Instantiate a Widget object, serialize it to a String then deserialize it back to another Widget.
- Instantiate a String, deserialize it to a Widget object then serialize it back to another String.

The application runs fine, but if the **public** no args constructor for Widget is made **protected** a _JsonbException (""Can't create instance"")_ is thrown when calling **Jsonb.fromJson()** to deserialize a string to a Widget. From section 3.7 of JSR-367:

> Any instance passed to a deserialization operation must have a public **or protected** no-argument 
> constructor.
> 

The underlying exception is _IllegalAccessException: class org.eclipse.yasson.internal.ReflectionUtils cannot access a member of class com.jsonbdemos.Widget with modifiers ""protected""_

>  C:\Java\jdk904\bin\java.exe -javaagent:C:\Users\johndoe\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\181.4892.5\lib\idea_rt.jar=61761:C:\Users\johndoe\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\181.4892.5\bin -Dfile.encoding=UTF-8 -classpath D:\IdeaProjects\jsonbexample\target\classes;C:\Users\johndoe\.m2\repository\org\glassfish\javax.json\1.1.2\javax.json-1.1.2.jar;C:\Users\johndoe\.m2\repository\javax\json\javax.json-api\1.1.2\javax.json-api-1.1.2.jar;C:\Users\johndoe\.m2\repository\javax\json\bind\javax.json.bind-api\1.0\javax.json.bind-api-1.0.jar;C:\Users\johndoe\.m2\repository\org\eclipse\yasson\1.1.0-SNAPSHOT\yasson-1.1.0-20170828.110213-3.jar;C:\Users\johndoe\.m2\repository\javax\enterprise\cdi-api\2.0\cdi-api-2.0.jar;C:\Users\johndoe\.m2\repository\javax\el\javax.el-api\3.0.0\javax.el-api-3.0.0.jar;C:\Users\johndoe\.m2\repository\javax\interceptor\javax.interceptor-api\1.2\javax.interceptor-api-1.2.jar;C:\Users\johndoe\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar com.jsonbdemos.App
> 
> Exception in thread ""main"" javax.json.bind.JsonbException: Can't create instance
> 	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:191)
> 	at java.base/java.security.AccessController.doPrivileged(Native Method)
> 	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:186)
> 	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.getInstance(ObjectDeserializer.java:92)
> 	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:62)
> 	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
> 	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
> 	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
> 	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
> 	at com.jsonbdemos.App.objectToJsonString(App.java:33)
> 	at com.jsonbdemos.App.main(App.java:17)
> Caused by: java.lang.IllegalAccessException: class org.eclipse.yasson.internal.ReflectionUtils cannot access a member of class com.jsonbdemos.Widget with modifiers ""protected""
> 	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)
> 	at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:589)
> 	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:479)
> 	at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:189)
> 	... 10 more
> 
> Process finished with exit code 1
> 

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/118,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTU4NzkwOQ==,yasson,385587909,118,NA,skomisa1,30328432,,,NA,2018-05-01T02:58:35Z,2018-05-01T02:58:35Z,Updated to correct the zip file attachment named **jsonbexample.zip**,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTU4NzkwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/118,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzczNTEwNw==,yasson,387735107,118,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-09T13:17:35Z,2018-05-09T13:17:35Z,"I have verified that this is no longer an issue using 1.0.1. Do not use old snapshots from repo.eclipse.org and use latest release from maven central instead. Snapshots 1.1.0 are older then 1.0.1 release.

Closing.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzczNTEwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/121,https://api.github.com/repos/eclipse-ee4j/yasson/issues/121,yasson,320639606,121,module-info.java needs to declare dependency on java.sql,cayhorstmann,432187,,,CLOSED,2018-05-06T23:43:09Z,2019-01-29T12:16:39Z,"I put yasson.jar on the module path. When serializing, you use java.sql.Date somewhere. This is the exception I get:

`Exception in thread ""main"" java.lang.NoClassDefFoundError: java/sql/Date
	at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.DefaultSerializers.initSerializers(DefaultSerializers.java:77)
	at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.DefaultSerializers.<init>(DefaultSerializers.java:61)
	at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.DefaultSerializers.<clinit>(DefaultSerializers.java:54)
	at org.eclipse.yasson/org.eclipse.yasson.internal.model.PropertyModel.resolveCachedSerializer(PropertyModel.java:112)
	at org.eclipse.yasson/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:90)
	at org.eclipse.yasson/org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.lambda$orderProperties$0(PropertyOrdering.java:79)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1680)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.eclipse.yasson/org.eclipse.yasson.internal.model.customization.ordering.PropertyOrdering.orderProperties(PropertyOrdering.java:80)
	at org.eclipse.yasson/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:63)
	at org.eclipse.yasson/org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:56)
	at org.eclipse.yasson/org.eclipse.yasson.internal.MappingContext$ParseClassModelFunction.apply(MappingContext.java:37)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1719)
	at org.eclipse.yasson/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:103)
	at org.eclipse.yasson/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:75)
	at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at ch15.sec06/com.horstmann.places.Demo4.main(Demo4.java:28)
Caused by: java.lang.ClassNotFoundException: java.sql.Date
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:499)
	... 22 more`

Adding `requires java.sql;` to `module-info.java` makes it work.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/121,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk4OTk4NA==,yasson,386989984,121,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-07T08:02:30Z,2018-05-07T08:02:30Z,"Hi @cayhorstmann ,
Thank you for reporting this. I will fix this issue now.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk4OTk4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/121,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY1NzgyMg==,yasson,387657822,121,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-09T08:08:33Z,2018-05-09T08:08:33Z,I am closing this issue because of it is fixed now in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY1NzgyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,yasson,325167840,125,Runtime failure on JSON serialization of object with Optional getter.,dwaite,4517,David Waite,david@alkaline-solutions.com,CLOSED,2018-05-22T07:16:09Z,2019-01-29T12:16:39Z,"The following test program fails; when the nullable field is a non-null value. I believe this is due to the type being inferred from the field and not the (actually used) getter/setter.

```java ScratchPad.java
import java.net.MalformedURLException;
import java.util.Optional;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbConfig;
import javax.json.bind.config.BinaryDataStrategy;
import javax.json.bind.spi.JsonbProvider;

public class ScratchPad {

	public static class Foo {
		private String bar;
		public void setBar(String value) {
			bar = value;
		}
		public Optional<String> getBar() {
			return Optional.ofNullable(bar);
		}
	}
	public static void main(String[] args) throws MalformedURLException {
		
		JsonbConfig config = new JsonbConfig();
		config = config
			.withBinaryDataStrategy(BinaryDataStrategy.BASE_64_URL)
			.withFormatting(true)
			.withStrictIJSON(true);
		Jsonb jsonb = JsonbProvider.provider().create().withConfig(config).build();
		jsonb.toJson(new Foo());
		Foo foo = new Foo(); // Works: {}
		foo.setBar(""bar"");
		jsonb.toJson(foo); // Fails: 
		//		Exception in thread ""main"" java.lang.ClassCastException: java.util.Optional cannot be cast to java.lang.String
		//		at org.eclipse.yasson.internal.serializer.StringTypeSerializer.serialize(StringTypeSerializer.java:32)
		//		at org.eclipse.yasson.internal.serializer.AbstractValueTypeSerializer.serialize(AbstractValueTypeSerializer.java:51)
	}
}","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDg4NzU2Ng==,yasson,390887566,125,NA,dwaite,4517,David Waite,david@alkaline-solutions.com,NA,2018-05-22T07:16:25Z,2018-05-22T07:16:25Z,Tested against current 1.0.2-SNAPSHOT,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDg4NzU2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDg4ODEyMg==,yasson,390888122,125,NA,dwaite,4517,David Waite,david@alkaline-solutions.com,NA,2018-05-22T07:18:41Z,2018-05-22T07:18:41Z,"Adding a PropertyVisibilityStrategy that returns true for fields and false for methods lets the document serialize properly, which gives me a temporary workaround.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDg4ODEyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1MjExMg==,yasson,399952112,125,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-25T13:30:06Z,2018-06-25T13:30:06Z,Fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1MjExMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/125,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1Mzg1Nw==,yasson,399953857,125,NA,dwaite,4517,David Waite,david@alkaline-solutions.com,NA,2018-06-25T13:35:36Z,2018-06-25T13:35:36Z,Is there a 1.0.2 release planned soon which would have this fix?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1Mzg1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/126,https://api.github.com/repos/eclipse-ee4j/yasson/issues/126,yasson,325184771,126,Serialization of collection fails to pick up Adapters,dwaite,4517,David Waite,david@alkaline-solutions.com,CLOSED,2018-05-22T08:13:46Z,2019-01-29T12:16:39Z,"I have objects which sometimes fail to pick up the adapters I have configured. 

The behavior is a bit odd, and I haven't figured out how to debug the issue myself.  It seems as if the collection serializer cares about the parameterized type of the collection, which is a bit unusual IMHO - it would seem instead it should care about the runtime type of each member of the collection.

```java ScratchPad.java

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

import javax.json.Json;
import javax.json.JsonValue;
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbConfig;
import javax.json.bind.adapter.JsonbAdapter;
import javax.json.bind.spi.JsonbProvider;

public class ScratchPad {

	public static class Bar {
		public String unintended = ""should not display"";
	}
	
	public static class BarAdapter implements JsonbAdapter<Bar, JsonValue> {

		@Override
		public JsonValue adaptToJson(Bar obj) throws Exception {
			return Json.createValue(""appropriate"");
		}

		@Override
		public Bar adaptFromJson(JsonValue obj) throws Exception {
			throw new UnsupportedOperationException();
		}
	}
	public static void main(String[] args) throws MalformedURLException {
		JsonbConfig config = new JsonbConfig();
		config = config
			.withStrictIJSON(false)
			.withAdapters(new BarAdapter());
		Jsonb jsonb = JsonbProvider.provider().create().withConfig(config).build();
		
		System.out.println(jsonb.toJson(new Bar())); // writes ""appropriate""

		jsonb = JsonbProvider.provider().create().withConfig(config).build();
		List<Bar> bars = new ArrayList<Bar>();
		bars.add(new Bar());
		System.out.println(jsonb.toJson(bars)); // writes ""[{""unintended"":""should not display""}]
	}
}","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/126/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/126,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDkwMjU0Mg==,yasson,390902542,126,NA,dwaite,4517,David Waite,david@alkaline-solutions.com,NA,2018-05-22T08:13:56Z,2018-05-22T08:13:56Z,Tested against 1.0.2-SNAPSHOT,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDkwMjU0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/126,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTAwNTQwMQ==,yasson,391005401,126,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-22T14:12:15Z,2018-05-22T14:12:15Z,"Hi @dwaite , 
I am currently working on similar issue. It should be fixed soon.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTAwNTQwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/126,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2OTU0MA==,yasson,392469540,126,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-05-28T09:13:05Z,2018-05-28T09:13:05Z,This issue is now fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2OTU0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/128,https://api.github.com/repos/eclipse-ee4j/yasson/issues/128,yasson,326659797,128,withFormatting puts key/value pairs on separate lines,swpalmer,757620,Scott Palmer,swpalmer@gmail.com,CLOSED,2018-05-25T20:48:39Z,2019-01-29T12:16:40Z,"The current formatted output is difficult to read. Since formatting is all about making the JSON more human-readable, this should be improved.

I propose not adding a newline after the ':' so that key/value pairs are on the same line, unless the value will also need to be multi-line (i.e. is itself a multi-value entity). This will keep value data distinct from key names.

So this:
```
{
    ""x"": 
    ""y""
}
```

becomes:
```
{
    ""x"": ""y""
}
```

and this:
```
{
    ""subgroup"": 
    {
        ""a"": 
        ""1"",
        ""b"": 
        ""2"",
        ""d"": 
        {
            ""age"": 
            3,
            ""bitable"": 
            true,
            ""name"": 
            ""Rover""
        }
    },
    ""x"": 
    ""y""
}
```

becomes:
```
{
    ""subgroup"":
    {
        ""a"": ""1"",
        ""b"": ""2"",
        ""d"":
        {
            ""age"": 3,
            ""bitable"": true,
            ""name"": ""Rover""
        }
    },
    ""x"": ""y""
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/128,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ3NjMxMQ==,yasson,392476311,128,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-05-28T09:39:50Z,2018-05-28T09:39:50Z,"This is an issue in JSONP which is fixed (https://github.com/eclipse-ee4j/jsonp/pull/87). New version of JSONP containing this fix is not yet released.  It will be fixed in Yasson when that new version is adopted.
Duplicate of https://github.com/eclipse-ee4j/yasson/issues/89","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ3NjMxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/129,https://api.github.com/repos/eclipse-ee4j/yasson/issues/129,yasson,326771191,129,Custom Serializer does not get applied in recursive object hierarchy,cwhite102,1414642,,,CLOSED,2018-05-26T22:19:35Z,2019-01-29T12:16:40Z,"I would expect a custom serializer would still get called throughout a serialization process.  However, it only seems to get called once at the root.

Tested against snaphot 1.0.2-20180507.111607-20

Here is a sample to reproduce.   (The child's name is not serialized as the serializer isn't called again.)

```
import javax.json.Json;
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;

public class JsonbIssue {

	public static void main(String[] args) {
		MyObject parent = new MyObject();
		parent.name = ""foo"";
		parent.child = new MyObject();
		parent.child.name = ""bar"";
		
		JsonbConfig config = new JsonbConfig()
			.withSerializers( new MyObjectSerializer() )
			.withFormatting(true);
		Jsonb json = JsonbBuilder.create(config);
		System.err.println( json.toJson(parent) );
	}

	public static class MyObject {
		private MyObject child;
		private Object name;
	}
	
	public static class MyObjectSerializer implements JsonbSerializer<MyObject> {

		@Override
		public void serialize(MyObject obj, JsonGenerator generator, SerializationContext ctx) {
			generator.writeStartObject();
			if( obj.name != null )
				generator.write(""person_name"", obj.name.toString());
			if( obj.child != null )
				ctx.serialize(""child"", obj.child, generator);
			generator.writeEnd();
		}
	}
}

```

Output:

```

{
    ""person_name"": ""foo"",
    ""child"": 
    {
    }
}

```
Expected output:
```

{
    ""person_name"": ""foo"",
    ""child"": 
    {
        ""person_name"": ""bar""
    }
}

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/129,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1MTc3MQ==,yasson,399951771,129,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-25T13:29:03Z,2018-06-25T13:29:03Z,Fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk1MTc3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/131,https://api.github.com/repos/eclipse-ee4j/yasson/issues/131,yasson,327732545,131,Project URL with RT in POM seems outdated,keilw,70496,Werner Keil,,CLOSED,2018-05-30T13:32:05Z,2019-01-29T12:33:44Z,"The main POM file states ""https://projects.eclipse.org/projects/rt.yasson"" to be the project URL, but it should be under EE4J now also under Eclipse.org, so this is probably a dead link.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/131,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDI0NDc0Nw==,yasson,400244747,131,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-06-26T09:33:28Z,2018-06-26T09:33:28Z,"Yes, Werner. I'll fix it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDI0NDc0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/131,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg5MDc4NA==,yasson,438890784,131,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T02:14:37Z,2018-11-15T02:14:37Z,"fixed by PR #142, closing this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg5MDc4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,yasson,328987270,133,Feature proposal - API level polymorphic support,amoscatelli,16684470,,,CLOSED,2018-06-04T09:58:04Z,2022-03-28T13:44:28Z,"I think it is important to have real polymorphism support at API level.
What I DO mean is to have standardized approaches to serialize info about type and handle correct deserialization.
For example this will allow standardized ways to handle deserialization of Collection < Animal > and retrieving, for example, a specialized instance of an Horse, a Dog, a Shark (etc etc).

Yea I know there is an example about how to create a custom serializer/deserializer to handle this, but I think this kind of support should be considered as an already integrated feature declared in the spec.

Johnzon has its own implementation for this (you can find polymorphism extra library to handle this) but we need an API level feature if we really want to build portable application across different application servers.

Probably the spec should allow the user to declare the hierarchy in some way (by annotation on root or child classes or by procedural means) and should allow the user to declare a preferred strategy for type-information serialization (external property ? internal property ? key-value style (type-object)) ?

I wanted to started a discussion about this on json-b.net but I found out the GitHub is on read-only mode now. I think this could be considered for JSONB 1.1 version of the spec.

What do you think ?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjc1MjQ3NA==,yasson,406752474,133,NA,Tibor17,1045063,Tibor Digana,tibordigana@apache.org,NA,2018-07-20T23:44:17Z,2018-07-20T23:44:17Z,"+1
Implement similar `@SubTypes` annotation in Javax package like it is in Jackson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjc1MjQ3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg5MjAzMg==,yasson,438892032,133,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T02:20:50Z,2018-11-15T02:20:50Z,"hi @amoscatelli, this is an interesting idea and certainly something that can be discussed further.  

However, the proper place to do so would be on the [JSON-B spec repo](https://github.com/eclipse-ee4j/jsonb-api), since Yasson is just one implementation of JSON-B, and you are asking for this to be added at the spec level.  

Can you please close out this issue and re-open it on the jsonb-api repo?  Then we can discuss further on that issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg5MjAzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzI1MTQ1Ng==,yasson,507251456,133,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-01T12:51:35Z,2019-07-01T12:51:35Z,Added https://github.com/eclipse-ee4j/jsonb-api/issues/147,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzI1MTQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/133,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5AabvT,yasson,1080671187,133,NA,amoscatelli,16684470,,,NA,2022-03-28T13:44:28Z,2022-03-28T13:44:28Z,"I believe this is delivered in jsonb 3.0
Thank you all","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5AabvT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/135,https://api.github.com/repos/eclipse-ee4j/yasson/issues/135,yasson,330174980,135,Adapters fail serialization if they return null,dwaite,4517,David Waite,david@alkaline-solutions.com,CLOSED,2018-06-07T08:48:15Z,2019-01-29T12:33:45Z,"I created the following adapter for my type, both to convert a duration to milliseconds and to collapse a 'default' duration of 0 to null. This was a second attempt; the first attempt adapted to `Long`.

```java
	class DurationMillisecondsAdapter implements JsonbAdapter<Duration, JsonValue> {

		@Override
		public JsonValue adaptToJson(Duration obj) throws Exception {
			return Duration.ZERO.equals(obj) ? null : Json.createValue(obj.toMillis());
		}

		@Override
		public Duration adaptFromJson(JsonValue obj) throws Exception {
			return obj != null ? Duration.ofMillis(((JsonNumber)obj).longValue()) : Duration.ZERO;
		}
	}
```

This throws:
```
Jun 07, 2018 2:42:27 AM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Problem adapting object of type class java.time.Duration to interface javax.json.JsonValue in class class com.pingidentity.labs.webauthn.JsonUtils$DurationMillisecondsAdapter
Jun 07, 2018 2:42:27 AM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Generating incomplete JSON
Exception in thread ""main"" javax.json.bind.JsonbException: Problem adapting object of type class java.time.Duration to interface javax.json.JsonValue in class class DurationMillisecondsAdapter
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:93)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:94)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:121)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:77)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
Caused by: java.lang.NullPointerException
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.resolveSerializer(AdaptedObjectSerializer.java:101)
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:90)
	... 9 more
```

For now, I am working around this by building a custom serializer/deserializer for the outer type.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/135/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/135,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjI3MzUxNw==,yasson,396273517,135,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-06-11T14:57:09Z,2018-06-11T14:57:09Z,"Hi, could you please provide reproducer for this issue?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjI3MzUxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/135,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzA5MjU3OQ==,yasson,433092579,135,NA,scottkurz,4081634,Scott Kurz,skurz@us.ibm.com,NA,2018-10-25T15:18:19Z,2018-10-25T15:18:19Z,"Editing my comment, since after the answer to my question on [StackOverflow](https://stackoverflow.com/questions/52978096/json-b-hitting-npe-serializing-with-adapter-though-setting-withnullvaluestrue), it seems like I was misunderstanding and that my recreate doesn't really connect to the issue here.   ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzA5MjU3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/135,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4ODg3Mg==,yasson,438888872,135,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T02:04:07Z,2018-11-15T02:04:07Z,"this issue has been fixed by PR #171, closing this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4ODg3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,yasson,332339843,137,Release 1.0.2 with PrivateFieldStrategy,AdamBien,891845,Adam Bien,,CLOSED,2018-06-14T10:17:44Z,2019-01-29T12:33:45Z,"Current yasson implementation does not work with the PrivateFieldStrategy -> even a custom strategy breaks, because the existence of public methods makes private fields not visible.

The code already exists in your repository, but was created after this release. Please create a release 1.0.2 with FieldAccessStrategy and push it to maven central.

big thanks.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/137/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDI0NDE4Ng==,yasson,400244186,137,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-06-26T09:31:34Z,2018-06-26T09:31:34Z,We've passed the Eclipse release review and will release 1.0.2 after a new version of JSONP is released. JSONP release is currently blocked by some non-technical issues which (I hope) will be resolved soon.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDI0NDE4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTI4MDEzNA==,yasson,401280134,137,NA,AdamBien,891845,Adam Bien,,NA,2018-06-29T08:02:22Z,2018-06-29T08:02:22Z,"Big thanks! Meanwhile I'm building JSON-B by myself -- works great, but I need it shipped with Payara... :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTI4MDEzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNDQ3OTAxNg==,yasson,404479016,137,NA,Erik1,5529339,,,NA,2018-07-12T11:20:19Z,2018-07-12T11:20:19Z,"Would it be possible to release 1.0.2 so servers like Wildfly can include the updated version of Yasson? 

I think it would be great for JSONB adoption, because most examples published in magazines and on websites aren't working with Yasson 1.0.1 because they put the @JsonbProperty at a private field.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNDQ3OTAxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzk3MDI1Nw==,yasson,417970257,137,NA,Erik1,5529339,,,NA,2018-09-03T00:16:30Z,2018-09-03T00:16:30Z,Is there any update when 1.0.2 will be released?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzk3MDI1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTIzNjA3NA==,yasson,419236074,137,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-09-06T20:47:54Z,2018-09-06T20:47:54Z,We will release 1.0.2 next week.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTIzNjA3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ2NDc5MQ==,yasson,423464791,137,NA,DennisBayer,853698,Dennis Bayer,,NA,2018-09-21T08:59:22Z,2018-09-21T08:59:22Z,"Hi @m0mus,
any updates for the release date of 1.0.2?

Regards","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ2NDc5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTU0MTM5Nw==,yasson,425541397,137,NA,Erik1,5529339,,,NA,2018-09-28T19:27:01Z,2018-09-28T19:27:01Z,"> 
> 
> We will release 1.0.2 next week.

3 weeks ago you posted that it would be released next week. Is there any update on the release date?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTU0MTM5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTU0NjE3NA==,yasson,425546174,137,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-09-28T19:47:22Z,2018-09-28T19:47:22Z,"@Erik1 Sorry, there were other things to do. Some TCK tests are not passing. We are working on fixing it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTU0NjE3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/137,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNDU4NDM2Nw==,yasson,434584367,137,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-31T07:12:56Z,2018-10-31T07:12:56Z,1.0.2 is out.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNDU4NDM2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/138,https://api.github.com/repos/eclipse-ee4j/yasson/issues/138,yasson,333026810,138,NullPointerException during serialization,ThomasSousa96,8549602,Thomás Sousa Silva,thomas.sousa.96@gmail.com,CLOSED,2018-06-17T01:16:27Z,2019-01-29T12:16:40Z,"```
 java.lang.NullPointerException
 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:104)
 	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)
 	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
 	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:121)
 	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:77)
 	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
 	at org.glassfish.jersey.jsonb.internal.JsonBindingProvider.writeTo(JsonBindingProvider.java:118)
 	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:266)
 	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:251)
 	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
 	at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:109)
 	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
 	at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:85)
 	at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:163)
 	at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1137)
 	at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:662)
 	at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:395)
 	at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:385)
 	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:280)
 	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
 	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
 	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
 	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
 	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
 	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
 	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
 	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:704)
 	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
 	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
 	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1622)
 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:258)
 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)
 	at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:654)
 	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:593)
 	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)
 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:159)
 	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:371)
 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:238)
 	at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:516)
 	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:213)
 	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:182)
 	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:156)
 	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:218)
 	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:95)
 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:260)
 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:177)
 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:109)
 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:88)
 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:53)
 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:524)
 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:89)
 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:94)
 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:33)
 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:114)
 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:569)
 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:549)
 	at java.lang.Thread.run(Thread.java:748)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/138/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/138,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Nzg5NTg4Mw==,yasson,397895883,138,NA,ThomasSousa96,8549602,Thomás Sousa Silva,thomas.sousa.96@gmail.com,NA,2018-06-17T18:05:48Z,2018-06-17T18:05:48Z,"The problem occur when try serialize an direct instance of Object class.

```
Jsonb jsonb = JsonbBuilder.create();
String json = jsonb.toJson(new Object());
```

The problem root:
```
org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(Class<?>)
```

```
 public ClassModel getOrCreateClassModel(Class<?> clazz) {
       //clazz = java.lang.Object
        ClassModel classModel = classes.get(clazz);
        //classModel == null
        if (classModel != null) {
            return classModel;
        }
        final Stack<Class> newClassModels = new Stack<>();
        //Never will enter in the for statement
        for (Class classToParse = clazz; classToParse != Object.class; classToParse = classToParse.getSuperclass()) {
            newClassModels.push(classToParse);
        }

        ClassModel parentClassModel = null;
        //newClassModels will be empty 
        while (!newClassModels.empty()) {
            Class toParse = newClassModels.pop();
            parentClassModel = classes.computeIfAbsent(toParse, new ParseClassModelFunction(parentClassModel, classParser, jsonbContext));
        }
        //The cache map will return null 
        return classes.get(clazz);
    }
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Nzg5NTg4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,yasson,333761856,140,Serialization fails with 2 type parameters,flaviocosta-net,35621323,Flavio Costa,,CLOSED,2018-06-19T17:09:52Z,2020-12-23T22:02:22Z,"I see that #61 fixed an issue with generics, but that doesn't seem to be of help in a case a class has two type parameters.

I have a `Container<D, C>` interface which, when I try to serialize, produces the error `Generic bound not found for type C declared in my.package.Container<?, ?>`.

The type C is used in a method declaration of the interface:
`public List<C> getComponents();`

The current implementation seems to use `((ParameterizedType) getRuntimeType()).getActualTypeArguments()[0]`, which will obviously only take the first type argument in consideration.

This implementation could rather use `((Class<?>) superClassType.getRawType()).getTypeParameters()` to identify the names of each argument (in this case, D and C) and then use its position/index to determine which element returned by getActualTypeArguments() that should be used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ5MTI4MA==,yasson,398491280,140,NA,flaviocosta-net,35621323,Flavio Costa,,NA,2018-06-19T18:02:49Z,2018-06-19T18:02:49Z,"```
java.lang.IllegalStateException: Generic bound not found for type C declared in my.package.Container<?, ?>.
	at org.eclipse.yasson.internal.ReflectionUtils.resolveTypeArguments(ReflectionUtils.java:166)
	at org.eclipse.yasson.internal.ReflectionUtils.resolveType(ReflectionUtils.java:109)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:88)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:76)
	at org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:35)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:91)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ5MTI4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM4MzMyMw==,yasson,408383323,140,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-07-27T10:47:43Z,2018-07-27T10:47:43Z,"Hi @flaviocosta-net, could you please provide reproducer for this issue?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM4MzMyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0ODQ2MQ==,yasson,429348461,140,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T14:38:42Z,2018-10-12T14:38:42Z,"@flaviocosta-net 

> The current implementation seems to use ((ParameterizedType) getRuntimeType()).getActualTypeArguments()[0], which will obviously only take the first type argument in consideration.

It is not how it looks :) getActualTypeArguments()[0] in CollectionDeserializer is resolving generic type for the List which has always only one parameter type, hence the hardcoded `[0]`.

What you are probably missing is passing the runtime type to jsonb runtime. See methods `toJson(..)` which are picking `Type runtimeType` parameter, [for example this](https://github.com/eclipse-ee4j/jsonb-api/blob/851e55c5ca70a235560fc48aca057459e9edff15/api/src/main/java/javax/json/bind/Jsonb.java#L274).

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0ODQ2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAxMDcwOA==,yasson,435010708,140,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-01T11:20:31Z,2018-11-01T11:20:31Z,a PR attaches a test that demonstrates serialization of generic types without providing generic information.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAxMDcwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/140,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDQ4OTgzNQ==,yasson,750489835,140,NA,NeerajSachdeva,19988825,,,NA,2020-12-23T22:01:02Z,2020-12-23T22:01:02Z,"I'd my class structure like this MyBlahBlahClass<T, K> & was getting errors like below
[12/16/20 11:18:57:960 EST] 00000134 org.eclipse.yasson.internal.ReflectionUtils W Generic bound not found for type K declared in class com.MyBlahBlahClass
[12/16/20 11:18:57:960 EST] 00000134 org.eclipse.yasson.internal.ReflectionUtils W Generic bound not found for type T declared in class com.MyBlahBlahClass

I got rid of it like this

      String json =
          JsonbBuilder.create().toJson(myResponseObject, new ArrayList<MyBlahBlahClass<String, String>>() {}.getClass().getGenericSuperclass());
 return Response.ok(json).build();","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDQ4OTgzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/141,https://api.github.com/repos/eclipse-ee4j/yasson/issues/141,yasson,334189760,141,deserialization passing 'null' to constructor fails,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2018-06-20T18:00:11Z,2019-01-29T12:16:40Z,"Hello,

I got javax.json.bind.JsonbException: JsonbCreator parameter @type is missing in json document
when trying to deserialize json with @type property == null:
```
{
  ""@id"" = ""some"", ""@type"" = null
}
```

```
public class LD {
    @JsonbProperty(""@id"")
    public final URI id;
    @JsonbProperty(""@type"") //@JsonbProperty(nillable = true)
    public final String type;

    @JsonbCreator
    public LD(@JsonbProperty(""@id"") URI id, @JsonbProperty(""@type"") String type) {
        this.id = id;
        this.type = type;
    }
}
```
Note that I tried to define type property nillable. Doesn't help either.

-------------------------------------------------------------------
```
Exception in thread ""main"" javax.json.bind.JsonbException: JsonbCreator parameter @type is missing in json document.
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.createInstance(ObjectDeserializer.java:119)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.getInstance(ObjectDeserializer.java:92)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:63)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
	...
```
--------------------------------------------------------------------
In ObjectDeserializer line: 139:

`values.put(model.getPropertyName(), new ValueWrapper(model, convertNullToOptionalEmpty(model, result)));`

_probably_ should be:
`values.put(model.getReadName(), new ValueWrapper(model, convertNullToOptionalEmpty(model, result)));
`
as we deserialize.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/143,https://api.github.com/repos/eclipse-ee4j/yasson/issues/143,yasson,337211586,143,yasson-jar-file can not be analyzed with jdeps,JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,CLOSED,2018-06-30T12:32:06Z,2019-01-29T12:33:45Z,"I tried to check dependencies to JavaSE compact profiles for Yasson by running

`jdeps -P yasson-1.0.1.jar`

downloaded from MavenCentral at http://search.maven.org/#artifactdetails%7Corg.eclipse%7Cyasson%7C1.0.1%7Cjar
I am using JavaSE 8u144.

I got:

```
jdeps -P yasson-1.0.1.jar
Exception in thread ""main"" java.lang.InternalError: Missing message: warn.skipped.entry
	at com.sun.tools.jdeps.JdepsTask.getMessage(JdepsTask.java:709)
	at com.sun.tools.jdeps.JdepsTask.warning(JdepsTask.java:673)
	at com.sun.tools.jdeps.JdepsTask.findDependencies(JdepsTask.java:563)
	at com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:324)
	at com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:306)
	at com.sun.tools.jdeps.Main.main(Main.java:48)
```

This seems to be related to JDK bug https://bugs.openjdk.java.net/browse/JDK-8167014, which stated the JAR file as ""invalid"".

I re-run the same with jdeps from JavaSE 9 (build 9+181) I got this message:

```
jdeps -P yasson-1.0.1.jar
Exception in thread ""main"" java.lang.module.FindException: Module java.json.bind not found, required by org.eclipse.yasson
	at java.base/java.lang.module.Resolver.findFail(Resolver.java:889)
	at java.base/java.lang.module.Resolver.resolve(Resolver.java:191)
	at java.base/java.lang.module.Resolver.resolve(Resolver.java:140)
	at java.base/java.lang.module.Configuration.resolve(Configuration.java:357)
	at java.base/java.lang.module.Configuration.resolve(Configuration.java:187)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsConfiguration.<init>(JdepsConfiguration.java:121)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsConfiguration.<init>(JdepsConfiguration.java:69)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsConfiguration$Builder.build(JdepsConfiguration.java:596)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.buildConfig(JdepsTask.java:584)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:535)
	at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:511)
	at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49)
```
	
Same issue with previous versions from MavenCentral.

For JavaSE 8: If I unjar the file, modify a file (MANIFEST.MF) and jar under new filename, everything does work.
(BTW: It will be marked to need Full-JRE profile due to java.beans usage).

For JaveSE 9: I will get same error message for this re-built JAR file.

Can you check how you build the JAR file? I expect that jdeps should always work on a JAR file.
(BTW: I have more troubles processing yasson-jar-file in bnd, where I am not sure if this has the same root cause).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/143/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/143,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTU0MDIzMQ==,yasson,401540231,143,NA,JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,NA,2018-06-30T13:08:32Z,2018-06-30T13:08:32Z,"BTW: I ran into the same issue with the JAR file from Glassfish and JSON-P:
See JAR file from http://search.maven.org/#artifactdetails%7Corg.glassfish%7Cjavax.json%7C1.1.2%7Cbundle

Same errors on jdeps 8 and jdeps 9.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTU0MDIzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/143,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMzNTU4NA==,yasson,429335584,143,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T13:59:51Z,2018-10-12T13:59:51Z,"This is because of [JPMS module descriptor](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/module-info.java) inside yasson.
jdeps can't check all dependencies because it is missing dependency jars of yasson. This module descriptor references to jsonb-api and jsonp-api which are not part of Yasson's jar. If I download them both and add to module path:

`jdeps --module-path javax.json.bind-api-1.0.jar:javax.json-api-1.1.3.jar yasson-1.0.1.jar`

Dependencies of Yasson are properly printed to output.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMzNTU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/144,https://api.github.com/repos/eclipse-ee4j/yasson/issues/144,yasson,337214174,144,Yasson does not work on JavaSE 8 compact 2 profile,JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,CLOSED,2018-06-30T13:15:47Z,2019-01-29T12:33:45Z,"There is an ongoing discussion in Eclipse SmartHome to replace Gson via JSON-B and Yasson as its default implementation. For more details see https://github.com/eclipse/smarthome/issues/4741

Eclipse SmartHome is intended to run on small gateways. So the minimal requirements for JVM are JavaSE 8 compact 2 profile, due to small footprint.

I tried to check which compact profile does Yasson need (see also issue https://github.com/eclipse-ee4j/yasson/issues/143), using a rebuilt JAR file. See jdeps results at the end.

Fundamentally this means:
* Yasson needs Full JRE due to use of java.beans and Introspection
* Also the referred dependency to javax.el needs Full JRE due to use of java.beans
* Yasson needs compact3 due to use of javax.naming

It that intended? For use in embedded space Full JRE is a NOGO !
And dependencies to compact 3 should be done if possible as an optional one: at least work with compact 2, have more features when running on compact 3.

What is expected support for Yasson in embedded space?

Jdeps analysis results for completion (javax.json-1.1.2.jar excluded due to #143):

```
jdeps -P yasson-1.0.1.PATCH.jar cdi-api-2.0.jar javax.el-api-3.0.1-b06.jar javax.interceptor-api-1.2.2.jar javax.json.bind-api-1.0.jar org.apache.servicemix.bundles.javax-inject-1_3.jar
yasson-1.0.1.PATCH.jar -> cdi-api-2.0.jar
yasson-1.0.1.PATCH.jar -> javax.json.bind-api-1.0.jar
yasson-1.0.1.PATCH.jar -> not found
yasson-1.0.1.PATCH.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (Full JRE)
   org.eclipse.yasson (yasson-1.0.1.PATCH.jar)
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
      -> javax.json.bind.spi                                javax.json.bind-api-1.0.jar
      -> org.eclipse.yasson.internal                        yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal (yasson-1.0.1.PATCH.jar)
      -> java.beans                                         Full JRE
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.math                                          compact1
      -> java.nio.charset                                   compact1
      -> java.security                                      compact1
      -> java.time.format                                   compact1
      -> java.time.temporal                                 compact1
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
      -> java.util.function                                 compact1
      -> java.util.logging                                  compact1
      -> java.util.stream                                   compact1
      -> javax.json                                         not found
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
      -> javax.json.bind.adapter                            javax.json.bind-api-1.0.jar
      -> javax.json.bind.annotation                         javax.json.bind-api-1.0.jar
      -> javax.json.bind.config                             javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
      -> javax.json.spi                                     not found
      -> javax.json.stream                                  not found
      -> org.eclipse.yasson.internal.components             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model                  yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization    yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization.naming yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization.ordering yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.properties             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.serializer             yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal.components (yasson-1.0.1.PATCH.jar)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.security                                      compact1
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
      -> java.util.function                                 compact1
      -> java.util.logging                                  compact1
      -> javax.enterprise.context.spi                       cdi-api-2.0.jar
      -> javax.enterprise.inject.spi                        cdi-api-2.0.jar
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
      -> javax.json.bind.adapter                            javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
      -> javax.naming                                       compact3
      -> org.eclipse.yasson.internal                        yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.properties             yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal.model (yasson-1.0.1.PATCH.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.security                                      compact1
      -> java.util                                          compact1
      -> java.util.function                                 compact1
      -> java.util.stream                                   compact1
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
      -> javax.json.bind.config                             javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
      -> org.eclipse.yasson.internal                        yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.components             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization    yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization.naming yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.properties             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.serializer             yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal.model.customization (yasson-1.0.1.PATCH.jar)
      -> java.lang                                          compact1
      -> org.eclipse.yasson.internal.components             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model                  yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.serializer             yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal.model.customization.naming (yasson-1.0.1.PATCH.jar)
      -> java.lang                                          compact1
      -> java.nio                                           compact1
      -> java.util                                          compact1
      -> javax.json.bind.config                             javax.json.bind-api-1.0.jar
   org.eclipse.yasson.internal.model.customization.ordering (yasson-1.0.1.PATCH.jar)
      -> java.lang                                          compact1
      -> java.lang.invoke                                   compact1
      -> java.util                                          compact1
      -> java.util.function                                 compact1
      -> java.util.stream                                   compact1
      -> org.eclipse.yasson.internal                        yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model                  yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization    yasson-1.0.1.PATCH.jar
   org.eclipse.yasson.internal.properties (yasson-1.0.1.PATCH.jar)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.net                                           compact1
      -> java.text                                          compact1
      -> java.util                                          compact1
   org.eclipse.yasson.internal.serializer (yasson-1.0.1.PATCH.jar)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.math                                          compact1
      -> java.net                                           compact1
      -> java.text                                          compact1
      -> java.time                                          compact1
      -> java.time.format                                   compact1
      -> java.time.temporal                                 compact1
      -> java.time.zone                                     compact1
      -> java.util                                          compact1
      -> java.util.function                                 compact1
      -> java.util.logging                                  compact1
      -> javax.json                                         not found
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
      -> javax.json.bind.adapter                            javax.json.bind-api-1.0.jar
      -> javax.json.bind.annotation                         javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
      -> javax.json.spi                                     not found
      -> javax.json.stream                                  not found
      -> org.eclipse.yasson.internal                        yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.components             yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model                  yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.model.customization    yasson-1.0.1.PATCH.jar
      -> org.eclipse.yasson.internal.properties             yasson-1.0.1.PATCH.jar
cdi-api-2.0.jar -> javax.el-api-3.0.1-b06.jar
cdi-api-2.0.jar -> javax.interceptor-api-1.2.2.jar
cdi-api-2.0.jar -> org.apache.servicemix.bundles.javax-inject-1_3.jar
cdi-api-2.0.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (compact1)
   javax.decorator (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> javax.enterprise.inject                            cdi-api-2.0.jar
   javax.enterprise.context (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> javax.enterprise.util                              cdi-api-2.0.jar
      -> javax.inject                                       org.apache.servicemix.bundles.javax-inject-1_3.jar
   javax.enterprise.context.control (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> javax.enterprise.context                           cdi-api-2.0.jar
      -> javax.interceptor                                  javax.interceptor-api-1.2.2.jar
   javax.enterprise.context.spi (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
   javax.enterprise.event (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
      -> javax.enterprise.util                              cdi-api-2.0.jar
   javax.enterprise.inject (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.util                                          compact1
      -> java.util.stream                                   compact1
      -> javax.enterprise.context                           cdi-api-2.0.jar
      -> javax.enterprise.util                              cdi-api-2.0.jar
      -> javax.inject                                       org.apache.servicemix.bundles.javax-inject-1_3.jar
   javax.enterprise.inject.literal (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> javax.enterprise.util                              cdi-api-2.0.jar
      -> javax.inject                                       org.apache.servicemix.bundles.javax-inject-1_3.jar
   javax.enterprise.inject.se (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.util                                          compact1
      -> javax.enterprise.inject                            cdi-api-2.0.jar
      -> javax.enterprise.inject.spi                        cdi-api-2.0.jar
   javax.enterprise.inject.spi (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
      -> java.util.function                                 compact1
      -> java.util.stream                                   compact1
      -> javax.el                                           javax.el-api-3.0.1-b06.jar
      -> javax.enterprise.context.spi                       cdi-api-2.0.jar
      -> javax.enterprise.event                             cdi-api-2.0.jar
      -> javax.enterprise.inject                            cdi-api-2.0.jar
      -> javax.enterprise.inject.spi.configurator           cdi-api-2.0.jar
      -> javax.interceptor                                  javax.interceptor-api-1.2.2.jar
   javax.enterprise.inject.spi.configurator (cdi-api-2.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.invoke                                   compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
      -> java.util.function                                 compact1
      -> java.util.stream                                   compact1
      -> javax.enterprise.context.spi                       cdi-api-2.0.jar
      -> javax.enterprise.event                             cdi-api-2.0.jar
      -> javax.enterprise.inject                            cdi-api-2.0.jar
      -> javax.enterprise.inject.spi                        cdi-api-2.0.jar
      -> javax.enterprise.util                              cdi-api-2.0.jar
   javax.enterprise.util (cdi-api-2.0.jar)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
javax.el-api-3.0.1-b06.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (Full JRE)
   javax.el (javax.el-api-3.0.1-b06.jar)
      -> java.beans                                         Full JRE
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.ref                                      compact1
      -> java.lang.reflect                                  compact1
      -> java.text                                          compact1
      -> java.util                                          compact1
      -> java.util.concurrent                               compact1
javax.interceptor-api-1.2.2.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (compact1)
   javax.interceptor (javax.interceptor-api-1.2.2.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
javax.json.bind-api-1.0.jar -> not found
javax.json.bind-api-1.0.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (compact1)
   javax.json.bind (javax.json.bind-api-1.0.jar)
      -> java.io                                            compact1
      -> java.lang                                          compact1
      -> java.lang.reflect                                  compact1
      -> java.util                                          compact1
      -> javax.json.bind.adapter                            javax.json.bind-api-1.0.jar
      -> javax.json.bind.config                             javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
      -> javax.json.bind.spi                                javax.json.bind-api-1.0.jar
      -> javax.json.spi                                     not found
   javax.json.bind.adapter (javax.json.bind-api-1.0.jar)
      -> java.lang                                          compact1
   javax.json.bind.annotation (javax.json.bind-api-1.0.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
      -> javax.json.bind.adapter                            javax.json.bind-api-1.0.jar
      -> javax.json.bind.config                             javax.json.bind-api-1.0.jar
      -> javax.json.bind.serializer                         javax.json.bind-api-1.0.jar
   javax.json.bind.config (javax.json.bind-api-1.0.jar)
      -> java.lang                                          compact1
      -> java.lang.reflect                                  compact1
   javax.json.bind.serializer (javax.json.bind-api-1.0.jar)
      -> java.lang                                          compact1
      -> java.lang.reflect                                  compact1
      -> javax.json.stream                                  not found
   javax.json.bind.spi (javax.json.bind-api-1.0.jar)
      -> java.lang                                          compact1
      -> java.util                                          compact1
      -> javax.json.bind                                    javax.json.bind-api-1.0.jar
org.apache.servicemix.bundles.javax-inject-1_3.jar -> /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar (compact1)
   javax.inject (org.apache.servicemix.bundles.javax-inject-1_3.jar)
      -> java.lang                                          compact1
      -> java.lang.annotation                               compact1
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/144,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0MzIzOQ==,yasson,429343239,144,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T14:22:58Z,2018-10-12T14:22:58Z,javax.naming and compact3 is there only because Yasson tries to locate [CDI bean manager with JNDI](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/components/JsonbComponentInstanceCreatorFactory.java). It may either be done reflectively without strong dependency or excluded from Yasson completely.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0MzIzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/144,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjEzMTg1OA==,yasson,432131858,144,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-23T07:40:40Z,2018-10-23T07:40:40Z,"The PR fixes the issue with requirement of java.naming and java.beans to be present.
 javax.el which also uses java.beans is a transitive dependency of cdi-api-2.0.jar, which in turn is also optional dependency and is not required to be on classpath / modulepath. There are classes, which are using CDI API static imports, however those are not loaded if CDI API is not present and doesn't prevent Yasson from running in such case.

Required JavaSE profile is reduced to compact2 in the PR, and may be further reduced to compact1. Compact2 is required because of supporting `java.sql.Date` and `javax.xml.datatype.XMLGregorianCalendar`. (De)Serializers for those types may be separated into different module, which would be an optional dependency in addition to _yasson-core_.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjEzMTg1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/144,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjE0MDczNg==,yasson,432140736,144,NA,JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,NA,2018-10-23T08:06:46Z,2018-10-23T08:06:46Z,"@bravehorsie Wow, thanks for that change. That is exactly what I had in mind to get rid of these (not always) needed dependencies.
I had a rough look on the PR and it really looks good.
For the dependency to compact 2: for our use case it is not important, but maybe for other ones. They should raise their hands if really needed. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjE0MDczNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/145,https://api.github.com/repos/eclipse-ee4j/yasson/issues/145,yasson,337217806,145,"Make dependencies to javax.enterprise.*, javax.naming optional",JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,CLOSED,2018-06-30T14:14:20Z,2019-01-29T12:33:45Z,"There is an ongoing discussion in Eclipse SmartHome to replace Gson via JSON-B and Yasson as its default implementation. For more details see https://github.com/eclipse/smarthome/issues/4741

Eclipse SmartHome is intended to run on small gateways (JavaSE 8 compact 2 profile) where small footprint is important. Actually Gson needs about 235 kB. Using Yasson and JSON-P would require >620 kB overall as dependencies to CDI, javax.el and more are needed. That sounds little bit odd as these whole JSON-P and Microprofile specs should be lightweight and not linked to heavy standards.

Having a deeper look into that I assume some dependencies could be made optional. I made simple tests and saw that making packages javax.enterprise.* and javax.naming optional did work. So only JSON-P and JSON-B APIs and its implementations are sufficient. 

I changed Yasson that way:
```
Import-Package: 
  javax.enterprise.context.spi;resolution:=""optional"",
  javax.enterprise.inject.spi;resolution:=""optional"",
  ...
  javax.naming;resolution:=""optional""
```

Looking into code of Yasson it looks like these dependencies would only be needed if it will introspect components at runtime using CDI.

What do you think? Would it be feasible to consider these functions as optional?

This would overall reduce the footprint to about 460 kB:

```
Bundle				Version		Bytes
javax.json-api			1.1.2	 	 31140
org.glassfish.javax.json	1.1.2		101089	
javax.json.bind-api		1.0		 23665
yasson				1.0.1		296324
```

This issue is also dependent on #144: if it would not run on compact 2 profile, it would also not make sense to strip dependencies down.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/145,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0NTk5Nw==,yasson,429345997,145,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T14:31:19Z,2018-10-12T14:31:19Z,"Should be enough to make CDI API optional, together with solving #144.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM0NTk5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/145,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjEzMzg5MA==,yasson,432133890,145,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-23T07:47:02Z,2018-10-23T07:47:02Z,"Turns out that CDI API is already optional, dependency to java.beans is removed in the PR.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjEzMzg5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/145,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjE0MjAwMw==,yasson,432142003,145,NA,JochenHiller,165064,Jochen Hiller,jo.hiller@gmail.com,NA,2018-10-23T08:10:26Z,2018-10-23T08:10:26Z,"Looks good, thanks for your help","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMjE0MjAwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,yasson,343254536,149,Attribute java.util.Date without time in format throws exception related to Date-Time API,Tibor17,1045063,Tibor Digana,tibordigana@apache.org,CLOSED,2018-07-20T21:36:11Z,2019-01-29T12:33:45Z,"I have observed exception while serializing DTO with `java.util.Date` (yyyy-MM-dd):
`java.time.DateTimeException: Unable to obtain Instant from TemporalAccessor: {},ISO,UTC resolved to 2000-12-31 of type java.time.format.Parsed`
`Caused by: java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: InstantSeconds`

I am using `org.eclipse:yasson:1.0.1` and `org.glassfish:javax.json:1.1.2`.
I have this code:
```
person.birth = new SimpleDateFormat(""yyyy-MM-dd"").parse(""2001-01-01"");
Jsonb jsonb = JsonbBuilder.create();
String personJson = jsonb.toJson(person);
```
and the annotation bindings on `java.util.Date`:
```
@JsonbDateFormat(""yyyy-MM-dd"")
public Date birth;
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjczMzQyOQ==,yasson,406733429,149,NA,Tibor17,1045063,Tibor Digana,tibordigana@apache.org,NA,2018-07-20T21:37:54Z,2018-07-20T21:37:54Z,"java.time.DateTimeException: Unable to obtain Instant from TemporalAccessor: {},ISO,UTC resolved to 2000-12-31 of type java.time.format.Parsed
	at java.time.Instant.from(Instant.java:378)
	at org.eclipse.yasson.internal.serializer.DateTypeDeserializer.parseWithFormatter(DateTypeDeserializer.java:56)
	at org.eclipse.yasson.internal.serializer.DateTypeDeserializer.parseWithFormatter(DateTypeDeserializer.java:29)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeDeserializer.parseWithFormatterInternal(AbstractDateTimeDeserializer.java:122)
	at org.eclipse.yasson.internal.serializer.AbstractDateTimeDeserializer.deserialize(AbstractDateTimeDeserializer.java:56)
	at org.eclipse.yasson.internal.serializer.AbstractValueTypeDeserializer.deserialize(AbstractValueTypeDeserializer.java:64)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:165)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:85)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:61)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:57)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:50)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
	at PolymorphismTest.shouldMatchChicken(PolymorphismTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: InstantSeconds
	at java.time.format.Parsed.getLong(Parsed.java:203)
	at java.time.Instant.from(Instant.java:373)
	... 40 more

In class `java.time.format.Parsed`:
```
    @Override
    public long getLong(TemporalField field) {
        Objects.requireNonNull(field, ""field"");
        Long value = fieldValues.get(field);
        if (value != null) {
            return value;
        }
        if (date != null && date.isSupported(field)) {
            return date.getLong(field);
        }
        if (time != null && time.isSupported(field)) {
            return time.getLong(field);
        }
        if (field instanceof ChronoField) {
            throw new UnsupportedTemporalTypeException(""Unsupported field: "" + field);
        }
        return field.getFrom(this);
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjczMzQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjczMzcyMg==,yasson,406733722,149,NA,Tibor17,1045063,Tibor Digana,tibordigana@apache.org,NA,2018-07-20T21:39:31Z,2018-07-20T21:39:31Z,"Why the `java.util.Date` is processed by Java Date Time API.
Do you have unit tests with dates asserting expected values?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjczMzcyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM1NzI1Ng==,yasson,408357256,149,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-07-27T08:57:21Z,2018-07-27T08:57:21Z,"Hi @Tibor17,
I have tested this issue you are reporting and could not reproduce this exception against the master. This issue should not occur in the future release. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM1NzI1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxMTAxNQ==,yasson,429311015,149,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T12:37:27Z,2018-10-12T12:37:27Z,"@Tibor17 even java.util.Date is an time instant which by definition needs a time zone and time part to be parsed. In order to create instant from ""2001-01-01"" string you need to say what time zone you like to parse it into. When you parse this with `java.util.SimpleDateFormat` you will get an instant in a default timezone on the host where you are running. If we do the same in Yasson than for example the same REST request would be parsed differently depending on the host settings. Throwing exception by default in this case may seem user unfriendly but is preventing from shooting yourself into leg accidentally and is the same what java 8 Date/Time API does.

To your question _why `java.util.Date` is parsed by Java Date Time API._
This is required by jsonb specification. See [@JsonbDateFormat javadoc](https://github.com/eclipse-ee4j/jsonb-api/blob/851e55c5ca70a235560fc48aca057459e9edff15/api/src/main/java/javax/json/bind/annotation/JsonbDateFormat.java#L27).


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxMTAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/149,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxMTIyNw==,yasson,429311227,149,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T12:38:17Z,2018-10-12T12:38:17Z,Duplicates https://github.com/eclipse-ee4j/yasson/issues/162,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxMTIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,yasson,343387720,150,Error serializing JPA entity with uninitialized properties (Hibernate),ggam,2109040,Guillermo González de Agüero,,CLOSED,2018-07-22T08:21:47Z,2019-01-14T15:32:09Z,"Hibernate throws a `LazyInitializationException` when an uninitialized property is accessed outside an open session. Yasson doesn't handle the situation of such uninitialized properties and propagates the error:

```
org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: eu.ggam.contabilidad.core.entity.MovimientoLectura.etiquetas, could not initialize proxy - no Session
	at org.hibernate@5.3.1.Final//org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:589)
	at org.hibernate@5.3.1.Final//org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:208)
	at org.hibernate@5.3.1.Final//org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:568)
	at org.hibernate@5.3.1.Final//org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:139)
	at org.hibernate@5.3.1.Final//org.hibernate.collection.internal.PersistentSet.iterator(PersistentSet.java:163)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:48)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:30)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:63)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:119)
	at org.eclipse.yasson//org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:75)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
```

EclipseLink works correctly. I understand Hibernate specifics are out of control for Yasson, but I wonder if it could check `Persistence.getPersistenceUtil.isLoaded(entity, field)` before trying to serialize fields.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjg1MTc4NA==,yasson,406851784,150,NA,ggam,2109040,Guillermo González de Agüero,,NA,2018-07-22T09:07:32Z,2018-07-22T09:07:32Z,"As a workaround, I've created the following entity listener that sets `null` on uninitialized properties:
```
public class UninitializedProxiesListener {

    @PersistenceContext
    private EntityManager em;

    @PostLoad
    public void clearUninitialized(Object entity) throws IllegalArgumentException, IllegalAccessException {
        PersistenceUtil persistenceUtil = Persistence.getPersistenceUtil();
        EntityType<? extends Object> entityType = em.getMetamodel().entity(entity.getClass());

        for (Attribute<? extends Object, ?> attribute : entityType.getAttributes()) {
            String name = attribute.getName();
            if (!persistenceUtil.isLoaded(entity, name)) {
                Member javaMember = attribute.getJavaMember();
                if (javaMember instanceof Field) {
                    Field field = (Field) javaMember;
                    field.setAccessible(true);
                    field.set(entity, null);
                }
            }
        }
    }
}
```

Hibernate will detect the changes and will perform an `UPDATE` statement. In order to avoid that, you have to set the `org.hibernate.readOnly` query hint to `true`. For example:
```
@NamedQuery(
    name = ""...."",
    query = ""...."",
    hints = @QueryHint(name = ""org.hibernate.readOnly"", value = ""true"")
)
@EntityListeners(UninitializedProxiesListener.class)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjg1MTc4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwNjM5MA==,yasson,429306390,150,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T12:18:24Z,2018-10-12T12:18:24Z,Yasson does not have a dependency to JPA API to work with it. What should be done here is wrapping any exception thrown from runtime with JsonbException.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwNjM5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxNDIxMA==,yasson,429314210,150,NA,ggam,2109040,Guillermo González de Agüero,,NA,2018-10-12T12:49:44Z,2018-10-12T12:49:44Z,"The problem is that the exception doesn't really mean a problem there. By default, Hibernate throws a LazyInstantiationException when you try to get a property that hasn't been loaded, and it can't load it. That is Hibernate specific behavior and Yasson has nothing to do with it.

The problem is, Yasson tries to read all the properties and, as expected, treats an exception like an error. But in this particular case, that exception just means that there's no value to return to you. In other words, fpr Yasson, that LazyInstantiationException is like a null.

Now, obviously Yasson doesn't care about such vendor specific behavior and can't treat some exceptions in an specific manner. But calling Persistence.getPersistenceUtil.isLoaded(entity, field) as I proposed effectively prevents that exception.

Neither JSON-B nor Yasson have a JPA dependency and that should stay that way. But this is easy to solve with a bit of reflection, verifying whether a JPA provider is present. A ""requires static"" clause would need to be added for it to work on the module path.

But thinking about this a bit more, I'm seeing that it's not so simple. The property might have a default value or the user might have set it, but the JPA check would still return false.

Since WildfFly uses Hibernate and Yasson, I'll verify there if this problem exists and open an issue on their tracker. I will also have a look at how JAX-B RI handles these cases.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMxNDIxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0NDUwNw==,yasson,433344507,150,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-26T09:19:47Z,2018-10-26T09:19:47Z,"> The problem is, Yasson tries to read all the properties and, as expected, treats an exception like an error. But in this particular case, that exception just means that there's no value to return to you. In other words, fpr Yasson, that LazyInstantiationException is like a null.

Yasson doesn't try to read anything by itself, the user does. In case of accessing detached JPA objects  the problem is obviously elsewhere and Yasson doesn't and should not have any clue about it. This is similar to access a network resource in a property getter, if something doesn't work Yasson should propagate the exception and not treat it as null.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0NDUwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0NTg2Ng==,yasson,433345866,150,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-26T09:24:18Z,2018-10-26T09:24:18Z,"Do you really get the `org.hibernate.LazyInitializationException` ? If I run code on master throwing an exception from POJO getter I get it wrapped with JsonbException and InvocationTargetException:
```
javax.json.bind.JsonbException: Error getting value on...
   Caused by: java.lang.reflect.InvocationTargetException
      ...
   Caused by: java.lang.RuntimeException: ...
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0NTg2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/150,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA0NjI3Mw==,yasson,454046273,150,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-14T15:32:09Z,2019-01-14T15:32:09Z,Closing this for its inactivity.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDA0NjI3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/152,https://api.github.com/repos/eclipse-ee4j/yasson/issues/152,yasson,344428785,152,Method starting with set throws exception,Verdent,4483705,David Král,david.k.kral@oracle.com,CLOSED,2018-07-25T12:47:15Z,2019-01-29T12:16:40Z,"When I have method with the name setXXXX and it has more than 1 parameter, an exception is thrown.

This limits method naming in using set keyword unless it has exactly one parameter. The method should not be considered as a setter when it has more than one parameter and also exception should not be thrown.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/152,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM0NjUzNA==,yasson,408346534,152,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2018-07-27T08:14:01Z,2018-07-27T08:14:01Z,This problem is fixed in master.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODM0NjUzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/153,https://api.github.com/repos/eclipse-ee4j/yasson/issues/153,yasson,345797921,153,Case insensitive read name always used regardless of PropertyNamingStrategy,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2018-07-30T15:04:30Z,2019-01-29T12:16:40Z,"The default ProeprtyNamingStrategy is `IDENTITY` which means no translation should be performed on the property names.

However, in `ClassModel.equalsReadName()`, a case-insensitive match is done on the read name:
```java
    /**
     * Check if name is equal according to property strategy. In case of {@link CaseInsensitiveStrategy} ignore case.
     * User can provide own strategy implementation, cast to custom interface is not an option.
     *
     * @return True if names are equal.
     */
    private boolean equalsReadName(String jsonName, PropertyModel propertyModel) {
        final String propertyReadName = propertyModel.getReadName();
        if (propertyNamingStrategy instanceof CaseInsensitiveStrategy) {
            return jsonName.equalsIgnoreCase(propertyReadName);
        }
        return jsonName.equalsIgnoreCase(propertyReadName);
    }
```

To properly adhere to IDENTITY naming strategy, we should be performing a case-sensitive equality comparison. 

For example, if we have the following data:

```
data1 = { ""SKUData"" : ""string1"" }
data2 = { ""skudata"" : ""string2"" }
```

Only `data1` should successfully bind to the `SKUArray.SKUData` field:
```java
public class SkuArray {
    public String SKUData = """";
}
```
however, currently `data2` also binds into the `SKUArray.SKUData` field, which should only happen if CASE_INSENSITIVE naming strategy is specified.

Originally reported by @nadiramra in https://github.com/OpenLiberty/open-liberty/issues/4371","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/153,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA5MTEwMw==,yasson,410091103,153,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-08-02T22:45:41Z,2018-08-02T22:45:41Z,"Hi @Verdent, I see you've assigned this issue to yourself but I've already proposed a fix in PR #154.  Could you please review that PR when you get some time?  ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA5MTEwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/153,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDkyODIxNQ==,yasson,410928215,153,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-08-07T04:17:42Z,2018-08-07T04:17:42Z,@bravehorsie or @m0mus could you please have a look at this issue and see if the fix I proposed in PR #154 is sufficient?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDkyODIxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/155,https://api.github.com/repos/eclipse-ee4j/yasson/issues/155,yasson,348392764,155,Release pipeline,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-08-07T16:17:52Z,2019-01-29T12:16:40Z,"We need to create a release CI/CD pipeline for this project. 

Use these documents as a reference:

- [How to release the first Eclipse version of projects](https://github.com/eclipse-ee4j/ee4j/wiki/How-to-release-the-first-Eclipse-version-of-projects)
- [JSONP release job](https://github.com/eclipse-ee4j/jsonp/wiki/JSONP-release-job)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/155/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/155,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTIzMjc2MA==,yasson,419232760,155,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-09-06T20:36:40Z,2018-09-06T20:36:40Z,"Jenkins job is created:
https://ci.eclipse.org/yasson/job/yasson-master-release/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTIzMjc2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,yasson,355671808,156,property deserialization fails,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2018-08-30T16:55:49Z,2019-01-29T12:33:45Z,"Hello,

I got null deserializing a property. Here is a test:
```
public class DocumentationTest {
    private final static String JSON = ""{\""general\"": \""test\""}"";
    @Test
    public void test() {
        try (Jsonb jsonb = JsonbBuilder.create(
                new JsonbConfig().withPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE))) {
            
            final Documentation doc = jsonb.fromJson(JSON, Documentation.class);
            
            Assert.assertEquals(""test"", doc.getGeneralDocumentation());
        } catch (Exception ex) {
            Assert.fail(ex.getMessage());
        }
    }
    public static class Documentation {
        private String general;

        @JsonbProperty(""general"")
        public String getGeneralDocumentation() {
            return general;
        }

        @JsonbProperty(""general"")
        public void setGeneralDocumentation(String general) {
            this.general = general;
        }
    }
}
```
Changing getter/setter to getGeneral() / setGeneral() fixes it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzYyNTIwOA==,yasson,417625208,156,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2018-08-31T10:38:28Z,2018-08-31T10:38:28Z,"After some investigation, I found:
**private String general;** 
field creates a property with name == ""general"" and read/write with jsonName == ""General"" (UPPER_CAMEL_CASE).

```
ClassModel.class
private boolean equalsReadName(String jsonName, PropertyModel propertyModel) {
    final String propertyReadName = propertyModel.getReadName();
    if (propertyNamingStrategy instanceof CaseInsensitiveStrategy) {
        return jsonName.equalsIgnoreCase(propertyReadName);
    }
    return jsonName.equalsIgnoreCase(propertyReadName);
}
```
Note that it **ALWAYS** compares with **equalsIgnoreCase()**!

The last return must use **equals()** instead.

Cheers,

D.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzYyNTIwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzY1MDAwNg==,yasson,417650006,156,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-08-31T12:34:06Z,2018-08-31T12:34:06Z,Thanks for reporting! What version of Yasson you are using? I remember we fixed some equalsIgnoreCase() related bugs.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzY1MDAwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzY1MTkxMw==,yasson,417651913,156,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2018-08-31T12:42:43Z,2018-08-31T12:42:43Z,"1.0.2-SNAPSHOT (master branch)
https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/model/ClassModel.java","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzY1MTkxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODA3NzE1MA==,yasson,418077150,156,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2018-09-03T10:47:06Z,2018-09-03T10:47:06Z,"This is a consequence of #153 and should be fixed by
https://github.com/eclipse-ee4j/yasson/pull/154","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODA3NzE1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/156,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0MTc5OA==,yasson,433341798,156,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-26T09:10:04Z,2018-10-26T09:10:04Z,"Closing this, as referenced PR is merged and the issue closed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM0MTc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/157,https://api.github.com/repos/eclipse-ee4j/yasson/issues/157,yasson,358380536,157,AdaptedObjectSerializer and UserSerializerSerializer are not thread safe,javierpedrido,23361078,,,CLOSED,2018-09-09T13:56:52Z,2019-01-29T12:33:45Z,"Hi,

The calls to jsonbContext.addProcessedObject(obj) and jsonbContext.removeProcessedObject(obj); must be sinchronized since jsonbContext is a shared object. A HashSet is being used to back the collection of processed objects (it does not support concurrent add/remove ops), you should Collections.synchronizedSet that set or use another implementation.

Regards,
Javier","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/157/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/157,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwMjkzMQ==,yasson,429302931,157,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T12:03:43Z,2018-10-12T12:03:43Z,"Thanks @javierpedrido this is a good catch, however synchronization on `(add/remove)ProcessedObject` won't be enough, since different runtime threads will have different contents of this collection and should not interfere with each other.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwMjkzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/157,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwNTEyNA==,yasson,429305124,157,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T12:12:59Z,2018-10-12T12:12:59Z,"Currently processed objects should be stored inside Marshaller/Unmarshaller instances, which are created per runtime invocation. This will fix the issue and make synchronization redundant.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTMwNTEyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/159,https://api.github.com/repos/eclipse-ee4j/yasson/issues/159,yasson,362604186,159,@JsonbPropertyOrder implementation is according to specs but is not intuitive and too limited,steappe,19967748,steappe,,CLOSED,2018-09-21T12:59:22Z,2019-01-29T12:33:45Z,"Let's have a POJO annotated with JSONB:

```
@JsonbPropertyOrder(
    {
        ""from"",
        ""count""
    }
)
public class Range {

    @JsonbProperty(""from"")
    public final int fromIndex;

    @JsonbProperty(""count"")
    public final int numberOfItems;

    @JsonbCreator
    public Range(
        @JsonbProperty(""from"") int fromIndex,
        @JsonbProperty(""count"") int numberOfItems
    ) {
        this.fromIndex = fromIndex;
        this. numberOfItems = numberOfItems;
    }
}
```
It is serialized as:
```
{
  ""count"": count,
  ""from"": from
}
```
This is correct, because according to the specifications:

> Names must correspond to original names defined in Java class before any customization applied.

But in a first place I would have expected the following serialization:
```
{
  ""from"": from,
  ""count"": count
}
```

If I change the property order annotation to:
```
@JsonbPropertyOrder(
    {
        ""fromIndex"",
        ""numberOfItems""
    }
)
```

It is correctly serialized as:
```
{
  ""from"": from,
  ""count"": count
}
```

This behavior is not intuitive and makes it impossible to define constant properties that can be used both in `@JsonbProperty` and `@JsonbPropertyOrder`, as follows:
```
@JsonbPropertyOrder(
    {
        Range.PROP_FROM,
        Range.PROP_COUNT
    }
)
public class Range {

    static public final String PROP_FROM = ""from"";
    static public final String PROP_COUNT = ""count"";

    @JsonbProperty(PROP_FROM)
    public final int fromIndex;

    @JsonbProperty(PROP_COUNT)
    public final int numberOfItems;

    @JsonbCreator
    public Range(
        @JsonbProperty(PROP_FROM) int fromIndex,
        @JsonbProperty(PROP_COUNT) int numberOfItems
    ) {
        this.fromIndex = fromIndex;
        this. numberOfItems = numberOfItems;
    }
}
```
The code above will just not define the property order I would expect.
I can't see any workaround.

Edit:
According to the JSON binding specifications:

> 4.2 Customizing Property Order
> To customize the order of serialized properties, JSON Binding provides javax.json.bind.config.PropertyOrderStrategy class.
> Class javax.json.bind.config.PropertyOrderStrategy provides the most common property order strategies.
>  LEXICOGRAPHICAL  ANY
>  REVERSE
> The detailed description of property order strategies can be found in javadoc. The way to set custom property order strategy is to use
> javax.json.bind.JsonbConfig::withPropertyOrderStrategy method.
> To customize the order of serialized properties only for one specific type, JSON Binding provides javax.json.bind.annotation.JsonbPropertyOrder annotation. Order specified by JsonbPropertyOrder annotation overrides order specified by PropertyOrderStrategy.
> **The order is applied to already renamed properties as stated in 4.1.**

And, according to the Java DOC:

> The value parameter of the `@JsonbPropertyOrder`
> Order in which properties are serialized. Names must correspond to original names defined in Java class before any customization applied.

In short, the property order strategy is applied after the customization, and the value specified by the property order annotation is applied before the customization. On the one hand this is not consistent; on the other hand, we can't use constant properties for both `@JsonbProperty` and `@JsonbPropertyOrder`. IMHO, something needs to be added in the JSON binding specs to fix this.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/159/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,yasson,369337851,162,JsonbDateFormat deserialization fails,diegosilval,34313321,Diego Silva,,OPEN,2018-10-11T22:59:33Z,2024-04-19T07:22:35Z,"Check test:

`public class ParseDateTest {

    public ParseDateTest() {
    }

    @Test
    public void testDate() {
        String json = ""{\""date\"":\""2018-03-05\""}"";
        Jsonb jsonb = JsonbBuilder.create();

        Form form = jsonb.fromJson(json, Form.class);

        System.out.println(""date:"" + form.getDate());

    }

    public static class Form {

        @JsonbDateFormat(value = ""yyyy-MM-dd"")
        private Date date;

        public Date getDate() {
            return date;
        }

        public void setDate(Date date) {
            this.date = date;
        }

    }
}`

Throws excepction:

`java.time.DateTimeException: Unable to obtain Instant from TemporalAccessor: {},ISO,UTC resolved to 2018-03-05 of type java.time.format.Parsed`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTI2MjI5OA==,yasson,429262298,162,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-12T09:20:52Z,2018-10-12T09:20:52Z,"Yasson leverages java 8 Date/Time API for parsing dates. 
`java.util.Date` is a time instant, while 2018-03-05 is not, since it is missing either the time zone or UTC offset and time of the day.

What version are you using? When I run your example against master I get:

`javax.json.bind.JsonbException: Error parsing class java.util.Date from value: 2018-03-05. Check your @JsonbDateFormat has all time units for class java.util.Date type, or consider using org.eclipse.yasson.YassonProperties#ZERO_TIME_PARSE_DEFAULTING.`

Which wraps the `java.time.DateTimeException` is meant to be self explanatory.

@Verdent when we will get a new version of Yassson in cetral?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTI2MjI5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM1MjU1Nw==,yasson,429352557,162,NA,diegosilval,34313321,Diego Silva,,NA,2018-10-12T14:51:01Z,2018-10-12T14:51:01Z,"Ok, con LocalDate works

public class ParseDateTest {

    @Test
    public void testDate() {
        String json = ""{\""date\"":\""2018-03-05\""}"";
        Jsonb jsonb = JsonbBuilder.create();

        Form form = jsonb.fromJson(json, Form.class);

        System.out.println(""date:"" + form.getDate());

    }

    public static class Form {

        @JsonbDateFormat(value = ""yyyy-MM-dd"")
        private LocalDate date;

        public LocalDate getDate() {
            return date;
        }

        public void setDate(LocalDate date) {
            this.date = date;
        }

    }
}","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQyOTM1MjU1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MjU2NjMzMQ==,yasson,482566331,162,NA,pdudits,1588543,Patrik Duditš,github@dudits.net,NA,2019-04-12T13:03:39Z,2019-04-12T13:03:39Z,"While I accept the argument on `java.util.Date` being a timestamp format, the JSON-B section 3.5.1 specification says:

> Implementations MUST support deserialization of both ISO_DATE and ISO_DATE_TIME into java.util.Date, Calendar and GregorianCalendar instances.

Therefore there should be no exception when deserializing `""2018-03-05""` into `java.util.Date` at least when no date format annotation is present. But this appears not to be the case.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MjU2NjMzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDg1MzI3Ng==,yasson,490853276,162,NA,notarmara,12168345,,,NA,2019-05-09T10:45:00Z,2019-05-09T10:45:00Z,Are there any news about this issue? I have the same problem reported by @pdudits ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDg1MzI3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDk3MTI1Nw==,yasson,490971257,162,NA,diegosilval,34313321,Diego Silva,,NA,2019-05-09T16:19:18Z,2019-05-09T16:19:18Z,"I use LocalDate class  instead. I no longer have problems, and it works
very well

El jue., 9 may. 2019 a las 5:45, notarmara (<notifications@github.com>)
escribió:

> Are there any news about this issue? I have the same problem reported by
> @pdudits <https://github.com/pdudits>
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse-ee4j/yasson/issues/162#issuecomment-490853276>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AIFZI2KZ7OZ62M65U37DD6TPUP6C3ANCNFSM4F3CBVDA>
> .
>


-- 
*Ing. Diego E. Silva Límaco*
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDk3MTI1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTIwNDc0OA==,yasson,491204748,162,NA,notarmara,12168345,,,NA,2019-05-10T08:25:10Z,2019-05-10T08:25:10Z,"yes but in this way it's needed to change code implementation. I develop a framework and I wouldn't that developers who use it must change all their java.util.Date into LocaleDate. I can perform a workaround of course, such as custom deserializer/serializer, but I agree with @pdudits when he says that it should be no exception when deserializing ""2018-03-05"" into java.util.Date, at least when no date format annotation is present.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTIwNDc0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTMyNTEwNw==,yasson,511325107,162,NA,manish2aug,17476238,Manish kumar,manish2aug@gmail.com,NA,2019-07-15T09:02:31Z,2019-07-15T09:02:31Z,The issue still persists with 1.0.4 but works fine with LocalDate,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTMyNTEwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNDUyMzM2Mw==,yasson,604523363,162,NA,agbaroni,1510959,Alessio G. Baroni,,NA,2020-03-26T16:15:08Z,2020-03-26T16:15:08Z,"> While I accept the argument on `java.util.Date` being a timestamp format, the JSON-B section 3.5.1 specification says:
> 
> > Implementations MUST support deserialization of both ISO_DATE and ISO_DATE_TIME into java.util.Date, Calendar and GregorianCalendar instances.
> 
> Therefore there should be no exception when deserializing `""2018-03-05""` into `java.util.Date` at least when no date format annotation is present. But this appears not to be the case.

Your requirement is correct but it's related to default mapping. The JsonbDateFormat makes the context non default. May be there is an ambiguity in the Java EE 8 specifications?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNDUyMzM2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44W8MZ,yasson,945537817,162,NA,chriseteka,42969611,Christopher Eteka,chriseteka@gmail.com,NA,2021-10-18T08:41:22Z,2021-10-18T08:41:22Z,"I have the same issue when with zoned date-time, any updates on this yet?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44W8MZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/162,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs57I4Nr,yasson,2065924971,162,NA,black-pwq,105478488,black-pwq,,NA,2024-04-19T07:22:34Z,2024-04-19T07:22:34Z,"A same error in glassfish (7.0.12) leads me to here. As https://github.com/eclipse-ee4j/yasson/issues/162#issuecomment-482566331 stated, the date format without time still not working in glassfish. And I believe the same happens in [yasson](https://github.com/eclipse-ee4j/yasson) since both are eclipse products...","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs57I4Nr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,yasson,371071149,163,CDI API should be in provided scope in pom.xml dependencies,tomas-langer,13766491,Tomas Langer,tomas.langer@gmail.com,CLOSED,2018-10-17T13:20:27Z,2019-01-29T12:33:45Z,"CDI libraries are provided by the implementation of CDI engine and as such may be different artifacts than the ones references from yasson.
This causes problems esp. with java module system (jigsaw), as the library is loaded both from the library referenced from yasson and from a CDI implementation libraries.

Now I must explicitly exclude this as follows:
```xml
<dependency>
        <groupId>org.eclipse</groupId>
        <artifactId>yasson</artifactId>
        <version>1.0.2</version>
        <exclusions>
            <exclusion>
                <groupId>javax.enterprise</groupId>
                <artifactId>cdi-api</artifactId>
            </exclusion>
        </exclusions>
</dependency>
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/163/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTYyNDg0Ng==,yasson,435624846,163,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-03T22:10:13Z,2018-11-03T22:10:13Z,"Yasson cannot change its dependency on CDI API from compile to provided because doing so would break existing projects that depend on Yasson and do not explicitly pull in CDI API or have it provided via a container (e.g. JavaSE environment). 

Note that making this change in this repo would appear to be OK, because the we pull in the `weld-se` dependency which contains javax.enterprise packages, thus masking the issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTYyNDg0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4ODQyNw==,yasson,438888427,163,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T02:01:50Z,2018-11-15T02:01:50Z,"closing this issue since there has been no activity for a while.  If @tomas-langer, follows up and disagrees with my earlier assessment we can re-open and discuss further.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4ODQyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQyNjMzMg==,yasson,439426332,163,NA,tomas-langer,13766491,Tomas Langer,tomas.langer@gmail.com,NA,2018-11-16T15:21:01Z,2018-11-16T15:21:01Z,"Dependency on CDI API only makes sense when CDI is actually used - most of CDI classes are annotations and SPI.
So unless a CDI class is actually a parameter or return type within the API, this dependency is not needed in a runtime without a CDI.

To go back to your point:
 - in SE world, if somebody depends solely on Yasson, there should be no problem, as CDI is not used
 - in SE world, if someobdy depends on Yasson and on a CDI implementation, all classes are provided by the CDI implementation
 - in EE world, CDI is always on classpath

As far as I could see in the spec, CDI is only used for injection via CDI - and as the extension is never activate when CDI is not on classpath, there should be no issue.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQyNjMzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/163,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTY1NDQzMQ==,yasson,439654431,163,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-17T23:10:43Z,2018-11-17T23:10:43Z,"I agree with your 2nd and 3rd scenarios, but the scenario I was originally and still am concerned about is the first one:

> in SE world, if somebody depends solely on Yasson, there should be no problem, as CDI is not used

If someone wasn't using CDI but just happened to trigger a code path inside Yasson where one of the classes that imports CDI API got loaded, they would hit a NCDFE, even if they weren't intending to use CDI.

---

Looking at the Yasson code, this is the only code path where imports of CDI API could be loaded is here:
```java
    public static JsonbComponentInstanceCreator getComponentInstanceCreator() {
        Object beanManager = getCdiBeanManager();
        if (beanManager == null) {
            beanManager = getJndiBeanManager();
        }
        if (beanManager == null) {
            log.finest(Messages.getMessage(MessageKeys.BEAN_MANAGER_NOT_FOUND_USING_DEFAULT));
            return new DefaultConstructorCreator();
        }
        return new BeanManagerInstanceCreator(beanManager);
    }
```

Both the `getCdiBeanManager()` and `getJndiBeanManager()` methods are tolerant to CNFE, and will only succeed if both CDI API and impl are present, so there should not be any impact to existing users that have CDI API but no impl on their classpath.

I'll go ahead and open a PR to change this dependency.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTY1NDQzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,yasson,372563099,164,Adapter check too strict?,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,CLOSED,2018-10-22T15:13:22Z,2019-01-29T12:33:45Z,"Hi everyone,

I am trying to serialize a annotation-generated implementation of my interface. For generation, I am using [immutables](http://immutables.github.io/).

For the annotation, I added: 
`@Value.Style(passAnnotations = {JsonbTypeAdapter.class, JsonbTypeSerializer.class})`
to the `package-info.java`.

Now, when I try to serialize my Objects into JSON, I get this exception:
`javax.json.bind.JsonbException: Adapter of runtime type interface my.api.Label does not match property type class my.api.ImmutableLabel`

Why should this not be possible? An ImmutableLabel implements a Label. Therefore I see no reason for the typeAdapter to fail.

Using Yasson 1.0.2. Btw: You cannot use Yasson 1.0 or 1.0.1, because it will fail to detect the annotation on the interface.
BUT: if you use Yasson 1.0 and add the type adapter manually (using the config), then it will serialize the ImmutableLabel class happily. So it DOES work, the test is just too strict.

`at org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBindingFromAnnotation(AnnotationIntrospector.java:230)`
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/164/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzMzOTA0MQ==,yasson,433339041,164,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-10-26T09:00:17Z,2018-10-26T09:00:17Z,"The PR will allow `JsonbAdapters` and `JsonbSerializers` to be used for subtypes. The issue with this approach however is that supertypes may have multiple subtypes. So (in the worst case) you can declare a Serializable adapter / serializer which will be executed for all types implementing it. Same with `java.util.Collection`, `java.lang.Number`, etc.. If for example you have an adapter bound to Number type and have both Double and Integer in your pojos you will probably get ClassCastException at some point.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzMzOTA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM3NDM2Mg==,yasson,433374362,164,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2018-10-26T11:15:18Z,2018-10-26T11:15:18Z,"@bravehorsie  thank you.
How was the behaviour in yasson-1.0 and yasson-1.0.1? I was able to use the JsonbAdapter using the JsonbConfig. It happily converted my implementation class to JSON. So is it a regression or is it not? I'm not too sure anymore.

I can understand why the Adapter might raise a class cast exception. In Jackson we need to define an implementation for Deserialization and hope that the interface is being used everywhere. So perhaps I should have used `@JsonbTypeSerializer` and  `@JsonbTypeDeserializer` instead.

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM3NDM2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3NDg0NQ==,yasson,435374845,164,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-02T13:10:19Z,2018-11-02T13:10:19Z,It looks like this issue was a regression between 1.0.1 and 1.0.2.  @bravehorsie @m0mus can we cut a 1.0.3 release that includes the fix (#166)?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3NDg0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2Njk3NA==,yasson,446566974,164,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2018-12-12T12:13:29Z,2018-12-12T12:13:29Z,"Hello @aguibert , any news about a new release? :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjU2Njk3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/164,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjY5MDQ2Mw==,yasson,446690463,164,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-12T18:21:42Z,2018-12-12T18:21:42Z,"@bravehorsie @m0mus looks like someone created a 1.0.3 release 20 days ago:
https://github.com/eclipse-ee4j/yasson/releases/tag/1.0.3-RELEASE

However, the artifact never made its way to maven central:
https://mvnrepository.com/artifact/org.eclipse/yasson

Also, the version in pom.xml should be updated to `1.0.4-SNAPSHOT` if we really did cut a `1.0.3` release.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjY5MDQ2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/170,https://api.github.com/repos/eclipse-ee4j/yasson/issues/170,yasson,376358690,170,Release to OSSRH staging repository,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-11-01T11:42:30Z,2019-01-29T12:33:45Z,"- [x] Uptake new Eclipse versions of dependencies. Use [GlassFish 5.1 Release Tracker](https://wiki.eclipse.org/Eclipse_GlassFish_5.1_Components_Release_Tracker) wiki to find components versions to use.

- [x] Release to OSSRH staging repository

- [x] Update [GlassFish 5.1 Release Tracker](https://wiki.eclipse.org/Eclipse_GlassFish_5.1_Components_Release_Tracker) with released version number. 

[How to release first versions of EE4J components](https://wiki.eclipse.org/How_to_release_first_versions_of_EE4J_components)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/170,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTAyNzA5Mg==,yasson,441027092,170,NA,senivam,24524084,Maxim Nesen,,NA,2018-11-22T13:13:27Z,2018-11-22T13:13:27Z,done: https://oss.sonatype.org/content/groups/staging/org/eclipse/yasson/1.0.3/,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTAyNzA5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,yasson,377080163,172,Bug: Deserializing java.util.Date with timezone not correct,KriechelD,3795587,Dennis Kriechel,dennis@kriechel.de,CLOSED,2018-11-03T18:20:31Z,2019-02-18T10:58:57Z,"Hello,

I've set up a simple example, thats show a problem when reading a json with a date in the format ""yyyy-MM-dd'T'HH:mm:ssXXX"" into an java.util.Date. The timezone is producing an incorrect result:

**Example.java:**
```
import javax.json.bind.JsonbBuilder;

public class Example {
	
	private final static String JSON_STRING = ""{\""date\"":\""2018-11-02T00:00:00+01:00\""}"";
	
	public static void main(String[] args) {
		System.out.println(JsonbBuilder.create().fromJson(JSON_STRING, DemoDto.class).getDate());
	}
}
```

**DemoDto.java:**
```
import java.util.Date;

public class DemoDto {
	private Date date;
	public Date getDate() { return date; }
	public void setDate(Date date) { this.date = date; }
}
```

**pom.xml:**
```
<project xmlns=""http://maven.apache.org/POM/4.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.kriechel</groupId>
	<artifactId>JsonTest2</artifactId>
	<version>1.0.0</version>
	<packaging>war</packaging>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>	
		<dependency>
			<groupId>javax.json.bind</groupId>
			<artifactId>javax.json.bind-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse</groupId>
			<artifactId>yasson</artifactId>
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.json</artifactId>
			<version>1.1.3</version>
		</dependency>	
	</dependencies>
</project>
```

Executing the ""main"" will result in the following output:
> Fri Nov 02 01:00:00 CET 2018

As you can see, the input ""{""date"":""2018-11-02T00:00:00+01:00""}"" is dated to midnight at Timezone CET (+01:00 = CET). But the result after it was parsed by yasson is one hour later, but still in CET. So this is not correct, correct would be ""Fri Nov 02 00:00:00 CET 2018"".

The problem is java.util.Date. If I switch from java.util.Date to java.time.ZonedDateTime it just works fine:

**DemoDto.java**
```
import java.time.ZonedDateTime;

public class DemoDto {
	private ZonedDateTime date;
	public ZonedDateTime getDate() { return date; }
	public void setDate(ZonedDateTime date) { this.date = date; }
}
```

Output:
> 2018-11-02T00:00+01:00

So there must be some difference in the parsing between those two data types. 

I've discovered this problem, when trying to upgrade vom Java EE 7 to Java EE 8 and it seems to me that in the current state java.util.Date is not usable for all situations any more with yasson.

Any help is appreciated, this is my first issue here for yasson, so if I've missed out any information please let me know :)

Best Regards,
Dennis

## Environment ##

- **Eclipse Version**: 2018-09
- **JDK Version**: 8u192
- **org.eclipse.yasson** 1.0 / 1.0.1 / 1.0.2
- **Operating System**: Windows 10
- **Locale**: de_DE","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/172/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTY2MDYzMA==,yasson,435660630,172,NA,KriechelD,3795587,Dennis Kriechel,dennis@kriechel.de,NA,2018-11-04T11:10:57Z,2018-11-04T11:10:57Z,"I've took a quick look into the source code of yasson and I think I've discovered the reason. It's in the [DateTypeDeserializer.java](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/serializer/DateTypeDeserializer.java#L31) class.

In Line 31:
```
private static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME.withZone(UTC);
```
And this is used in Line 50:
```
final TemporalAccessor parsed = DEFAULT_DATE_TIME_FORMATTER.withLocale(locale).parse(jsonValue);
```

Here you assume that the source TimeZone in the jsonValue will always be in UTC. But the timezone can be different. If you remove "".withZone(UTC)"" my code works just fine and the Junit-Tests org.eclipse.yasson.defaultmapping.dates.DatesTest is still passing.

This is also the reason why it is working with ZonedDateTime. Here you have the following code:
```
return ZonedDateTime.parse(jsonValue, DateTimeFormatter.ISO_ZONED_DATE_TIME.withLocale(locale));
```

As you can see, the "".withZone(UTC)"" is not present, and thats why my code is working with ZonedDateTime but not with Date at yasson 1.0.2

Can you reproduce my issue? Is it possible for your to correct the appropriate code?

Best Regards,
Dennis","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTY2MDYzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTY2NjE5MQ==,yasson,435666191,172,NA,KriechelD,3795587,Dennis Kriechel,dennis@kriechel.de,NA,2018-11-04T12:38:34Z,2018-11-04T12:38:34Z,"I've checked the history what changes have been made to the DateTypeDeserializer.java and switched back to the commit [d351dcc8c04a68e2d0c92334e045c96fefd17602](https://github.com/eclipse-ee4j/yasson/commit/d351dcc8c04a68e2d0c92334e045c96fefd17602).

If I run my code against this commit, it works perfectly well. 
So with the next commit [86d55909733011ed2d36e56492d8da3be5f0a4ac ](https://github.com/eclipse-ee4j/yasson/commit/86d55909733011ed2d36e56492d8da3be5f0a4ac) you've changed the handling of java.util.Date and this leads to the wrong behavior that breaks my code.

I hope this can help you to track down the problem.

Best Regads,
Dennis","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTY2NjE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTg1MTE3Mw==,yasson,435851173,172,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-05T12:03:51Z,2018-11-05T12:03:51Z,"Thanks Dennis,

`.withZone(UTC)` is meant only for parsing text where no time zone / offset is specified such as `2018-11-02T00:00:00`. In this case we use UTC, because otherwise system local zone is used. When there is an offset in parsed text, such is `2018-11-02T00:00:00+01:00` it is meant to be used instead of UTC time zone.

According to Javadoc of `#withZone(..)`:

> When parsing, there are two distinct cases to consider. If a zone has been parsed directly from the text, perhaps because DateTimeFormatterBuilder.appendZoneId() was used, then this override zone has no effect. If no zone has been parsed, then this override zone will be included in the result of the parse where it can be used to build instants and date-times.

I hope this means use value from `.withZone(UTC)` only if it not has been parsed.

I have tested your example and reproduced it on JDK 8. However starting from 9 it works as expected.
This is due to different implementation of java.time.format.Parsed#resolveInstant see [JDK changeset](http://hg.openjdk.java.net/jdk9/dev/jdk/diff/f371bdfb7875/src/java.base/share/classes/java/time/format/Parsed.java) which looks to be a bugfix.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTg1MTE3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTk2MzQ3MA==,yasson,435963470,172,NA,KriechelD,3795587,Dennis Kriechel,dennis@kriechel.de,NA,2018-11-05T17:33:59Z,2018-11-05T17:33:59Z,"Hello Roman,

thanks for the quick reply. You are right, according to the `.withZone(UTC)` JavaDoc (at least in my understanding) the UTC should only be used when no offset was found in the parsed input. Interesseting that there has been a change or bugfix for JDK 9 that did no make it into the JDK 8 Updates. 

Is there any chance that yasson will be able to work in both, JDK 8 and 9, although both have different behaviors? Maybe you could implement a switch based on the JDK-Version `System.getProperty(""java.version"")` and then run two different parsing methods, as it is often done in Android applications.

Best Regards,
Dennis","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTk2MzQ3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTk5MzkwOA==,yasson,435993908,172,NA,KriechelD,3795587,Dennis Kriechel,dennis@kriechel.de,NA,2018-11-05T19:00:20Z,2018-11-05T19:00:20Z,"Hi Roman,

I think I've found a possible fix that will make yasson work on both JDK 8 and 9. I've signed the ECA and created a Pull Request (https://github.com/eclipse-ee4j/yasson/pull/173). Feel free to change and use my code as you need, I hope it will help ;)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTk5MzkwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/172,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzQwNTIwMQ==,yasson,437405201,172,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-11-09T16:00:54Z,2018-11-09T16:00:54Z,"Thank you @KriechelD !

The relevant bug in JDK is https://bugs.openjdk.java.net/browse/JDK-8066982
According to description it should be backported to JDK8. 

More comments in PR.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzQwNTIwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/174,https://api.github.com/repos/eclipse-ee4j/yasson/issues/174,yasson,378706191,174,Start a Release Review,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-11-08T12:16:19Z,2019-01-29T12:33:45Z,"Passing **Release Review** is a required step before making a first public release. Deadline for passing the review is Nov 30th, 2018. Release review takes some time to complete, so it makes sense initiating it as soon as possible.

- [x] Start Release Review
- [x] Update [Release Review Tracker](https://wiki.eclipse.org/EE4J_Projects_Release_Review_Tracker)

Additional information:

- [How to submit a release review](https://wiki.eclipse.org/How_to_release_first_versions_of_EE4J_components)
- [Eclipse Handbook](https://wiki.eclipse.org/Development_Resources/HOWTO/Release_Reviews)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/174/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/174,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjk3NDk5NA==,yasson,436974994,174,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2018-11-08T12:16:42Z,2018-11-08T12:16:42Z,"Done:
https://projects.eclipse.org/projects/ee4j.yasson/reviews/1.1-release-review","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjk3NDk5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/175,https://api.github.com/repos/eclipse-ee4j/yasson/issues/175,yasson,379224437,175,Integrate to GlassFish,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2018-11-09T16:12:38Z,2019-01-29T12:33:46Z,"- [ ] Integrate to Eclipse GlassFish
- [ ] Pass all CTS/TCK tests

JSONB API is released as part of this integration.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/175/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,yasson,379306857,176,Feature: Ignore dashes in UUIDTypeDeserializer,smoyer64,328333,Steve Moyer,,CLOSED,2018-11-09T20:15:45Z,2019-01-29T12:33:46Z,"Currently the ``UUIDTypeDeserializer`` simply calls ``UUID.fromString()``.  In accordance with [Postel's Law](https://en.wikipedia.org/wiki/Robustness_principle), it would be great if the deserializer also accepted the common ""undashed notation"" (e.g. ``f2d2089dac404b498ec6eb90458acfc7``).  Unfortunately, you can't choose how to serialize a UUID without specifying a configuration somewhere.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/176/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzkwODMwNA==,yasson,437908304,176,NA,smoyer64,328333,Steve Moyer,,NA,2018-11-12T14:48:49Z,2018-11-12T14:48:49Z,"This actually brings up a bigger question ... would it be prudent for custom ``JsonbAdapter``, ``JsonbDeserializer`` and ``JsonbSerializer`` types to override the built-in equivalents if they're explicitly selected on via an annotation?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNzkwODMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODEzMzY1NQ==,yasson,438133655,176,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-13T04:41:06Z,2018-11-13T04:41:06Z,"hi @smoyer64, regarding the original post, I don't think that Yasson should do any special handling of UUIDs.  Reading the [UUID spec](https://tools.ietf.org/html/rfc4122#section-4.1), it looks like the dashes are actually required in a UUID:

```
     The formal definition of the UUID string representation is
      provided by the following ABNF [7]:

      UUID                   = time-low ""-"" time-mid ""-""
                               time-high-and-version ""-""
                               clock-seq-and-reserved
                               clock-seq-low ""-"" node
```

If I did misinterpret the spec for some reason, it would be better for the JDK itself to support a lack of dashes in `UUID.fromString()` if that is a valid format.

---

Regarding your larger question on JsonbAdapter, this should work.  We actually have a test that does this exact thing.  See `org.eclipse.yasson.adapters.AdaptersTest.testAdaptUUID()`. This test uses `org.eclipse.yasson.adapters.model.UUIDMapperClsBased` to do the adapting, which could be slightly altered as follows to fit your scenario:

```java
    @Override
    public UUID adaptFromJson(String obj) throws Exception {
    	return Optional.ofNullable(obj).map((o) -> {
    		// b329da910d9644b6b46656c2458b2877 -> b329da91-0d96-44b6-b466-56c2458b2877
    		String result = obj;
    		if(obj.length() == 32) {
    			result = obj.substring(0, 8) + '-' + 
    					obj.substring(8, 12) + '-' + 
    					obj.substring(12, 16) + '-' + 
    					obj.substring(16, 20) + '-' + 
    					obj.substring(20, 32);
    		}
    		return UUID.fromString(result);
    	}).orElse(null);
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODEzMzY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODQwNjE1NA==,yasson,438406154,176,NA,smoyer64,328333,Steve Moyer,,NA,2018-11-13T19:33:37Z,2018-11-13T19:33:37Z,"I've already written an the adapter ... it's basically what you've put above (but a lot more efficient).  The problem I'm having is that I'm trying to deserialize ``List<UUID>`` and the adapter doesn't seem to be applied to the deserialization.  Looking briefly at your test, it appears that the adapter you've created has the same behavior as the implicit serializer/deserialer - how do you know that it's actually being called by that test?

I'm not sure I'd say you misunderstood the specification but rather that the ABNF you referenced is the formal definition of the URN string representation.  And I'm not (yet at least) suggesting that you send UUIDs without the dashes.  I agree that it would be better if the JDK converted strings without dashes into valid UUIDs.  The specification most simply states a UUID is 16 octets - and that care must be taken to preserve the order when creating alternate representations.  The section on lexical equivalents also hints that the UUID should be considered as a group of numeric fields (as in the JDK).

In any case, I'd be happy if the adapter example you show above actually worked ... if I get a chance I'll test with a ``UUID`` field instead of a ``List<UUID>`` field and see if my adapter is used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODQwNjE1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4NjcwNA==,yasson,438886704,176,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T01:52:37Z,2018-11-15T01:52:37Z,">  how do you know that it's actually being called by that test?

I left this out in my previous post, but to confirm that the custom UUID adapter was indeed being called I modified the test to strip the dashes from the UUID and then call `fromJson(uuidStr)` on the result like this:
```java
        result = result.replace(""-"", """");        
        UUIDContainer uuidContainer = jsonb.fromJson(result, UUIDContainer.class);
```
If the custom adapter wasn't being applied, then it would go through the default UUID adapter and get the exception you pointed out in the original post.

----

> In any case, I'd be happy if the adapter example you show above actually worked ... if I get a chance I'll test with a UUID field instead of a List<UUID> field and see if my adapter is used.

How are you registering your custom UUID adapter?  The simplest way would be like this:
```java
public class UUIDContainer {
    @JsonbTypeAdapter(MyUUIDAdapter.class)
    private UUID uuid;
}
```

Or if you are using a List<UUID>, you would have to make an adapter that handles `List<UUID>`, while I think this would work, it seems clunky, so if you are working with collections of UUIDs it would be easier to simply register your UUID adapter on your `Jsonb` instance, for example:

```java
public class UUIDContainer {   
    private List<UUID> uuidList;
}

// -------

String uuidList = ""{\""uuidList\"":[\""a329da910d9644b6b46656c2458b2877\"","" + 
                                 ""\""b329da910d9644b6b46656c2458b2877\""]}"";

// This will not work, because it uses the default UUID adapter
JsonbBuilder.create().fromJson(uuidList);

// This will work, because we register our custom UUID adapter
Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withAdapters(new MyUUIDAdapter()));
jsonb.fromJson(uuidList);
```

Hope this helps!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4NjcwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQyNjA2OQ==,yasson,439426069,176,NA,smoyer64,328333,Steve Moyer,,NA,2018-11-16T15:20:16Z,2018-11-16T15:20:16Z,"@aguibert 

I seem to have certain patterns where my adapters, serializers and deserializers aren't called.  I've got to investigate these a bit more.

I'd love to add certain (general) adapters to my JsonbConfig but right now I'm using Resteasy and I haven't figured out how (or if) the ResteasyConfiguration can be used to alter the JsonbConfig it's using.  They have a couple of very general properties for nullability, etc.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQyNjA2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTY3NDU1NA==,yasson,445674554,176,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-10T04:28:23Z,2018-12-10T04:28:23Z,Going to close out this issue as the immediate questions have been answered and it looks like @smoyer64 is perhaps doing some follow-up investigation.  If there are more questions along this thread we can re-open,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTY3NDU1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTc5ODYzOQ==,yasson,445798639,176,NA,smoyer64,328333,Steve Moyer,,NA,2018-12-10T12:28:17Z,2018-12-10T12:28:17Z,I'm not sure we actually agree on whether the specification disallows this notation.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTc5ODYzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/176,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTg1MDkzMg==,yasson,445850932,176,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-10T15:15:16Z,2018-12-10T15:15:16Z,"[Section 3 of the UUID spec](https://tools.ietf.org/html/rfc4122#section-3) (quoted previously) pretty clearly states that the string representation of UUID has the 4 dashes in it.  Given that, and the fact that `java.util.UUID.fromString()` does not allow dashes either, I'm going to assume the dashes are required unless I see some sort of evidence indicating that the dashes are optional.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTg1MDkzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/177,https://api.github.com/repos/eclipse-ee4j/yasson/issues/177,yasson,380131609,177,MapDeserializer needs to support other data types for the Key,gcameo,450487,farouk.alhassan,,CLOSED,2018-11-13T09:27:30Z,2019-01-29T12:33:46Z,"At the moment, MapDeserializer throws an error if the key for the Map is not a String. Can we add a feature to allow the JSONConfig to have a custom deserializer for the Key, like in Jackson? Or Can we extend the Deserializer framework to allow registering custom Deserializers for a Map? At the moment, Deserializers can be registered for other datatypes through Adapters but not for a Map.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/177/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/177,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODI5NjA2MQ==,yasson,438296061,177,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-13T14:59:08Z,2018-11-13T14:59:08Z,"hi @gcameo, it's a good request for a future JSON-B spec version.  The JSON-B 1.0 spec only allows map keys for now.  Can you please instead open an issue on the JSON-B spec repo here? 
https://github.com/eclipse-ee4j/jsonb-api/issues","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODI5NjA2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/177,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODU5NjM5Mw==,yasson,438596393,177,NA,gcameo,450487,farouk.alhassan,,NA,2018-11-14T09:30:56Z,2018-11-14T09:30:56Z,Thanks will do,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODU5NjM5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,yasson,380591358,178,JsonObjectDeserializer getObject() cannot resolve method,scrmtrey91,24773401,,,CLOSED,2018-11-14T08:44:30Z,2019-01-29T12:33:46Z,"In class JsonObjectDeserializer it looks like it is missing method getObject() from JsonbParser class. (IntellIj IDEA)

`@Override
    protected void deserializeInternal(JsonbParser parser, Unmarshaller context) {
        this.jsonObject = parser.getObject();
    }`

[JsonObjectDeserializer.java](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/serializer/JsonObjectDeserializer.java)

And maybe this causing the issue with JAX-RS when it readEntity(JsonObject.class) from jax.ws.rs response. (i think it is unsupported operation or unknow operation)

Maybe if you could check this. It is the same in version 1.0 and version 1.0.2.







","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/178/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4NzY5OA==,yasson,438887698,178,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T01:57:55Z,2018-11-15T01:57:55Z,"hi @scrmtrey91, I'm not quite sure what the issue is you are trying to point out here.  Are you suggesting that the `JsonbParser.getObject()` method doesn't exist?  That is not the case, if so it would be causing a compile failure in the Yasson build.

Do you have a stack trace or something for the error you are referring to?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODg4NzY5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkzNDc4Ng==,yasson,438934786,178,NA,scrmtrey91,24773401,,,NA,2018-11-15T06:41:11Z,2018-11-15T06:41:11Z,"![jsonobjectdeserializeryassonmethod](https://user-images.githubusercontent.com/24773401/48534780-6a93fa80-e8a9-11e8-8afb-35e613d0ad4f.PNG)

Check the image and you will see. I don't know what would cause this ""issue"".

If i will have time, i could revert the code and show the error message or stacktrace. But for now check the image if you have any idea. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODkzNDc4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTA1Nzk0NA==,yasson,439057944,178,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-15T14:26:49Z,2018-11-15T14:26:49Z,"It looks like your local image may just be in an inconsistent state, and the IDE is showing a compile issue that does not actually exist.

As a sanity check, can you try running `mvn clean install`?  This should show that everything can compile successfully. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTA1Nzk0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTA3MTYwNg==,yasson,439071606,178,NA,scrmtrey91,24773401,,,NA,2018-11-15T15:06:05Z,2018-11-15T15:06:05Z,"It looks like it was problem with mixed JavaEE dependency. Somehow it was using 7.0 instead of 8.0.

With 7.0 removed and only using 8.0, method is resolved correctly.

I will take time and make WS and client with same code as before, to see if the exception (unsuported operation) will still be an issue. I think this was causing the issue. 

Thanks for your help for now. When i will try this , i will make a comment again to give an updated information.


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTA3MTYwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/178,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc2Njk1OA==,yasson,441766958,178,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-26T19:31:12Z,2018-11-26T19:31:12Z,Closing this issue at seems to just be a random IDE bug.  We can re-open if the problem persists ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc2Njk1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,yasson,383890721,186,Defaulting Json objects deserialization to TreeMap instead of HashMap,srius,17590313,Sébastien Rius,srius@free.fr,CLOSED,2018-11-23T17:11:27Z,2019-01-15T14:07:33Z,"Hi everyone,

I am currently using Yasson with pojos containing generic modelisation for some attributes in oder to keep flexibility in our model : SortedMap<String,Object>. We can then mix booleans, numbers strings, arrays and objects in attribute's sublevels.

When deserializing the explicite attribute level, no problem : TreeMap is used as the attribute is delared as SortedMap. But when Json objects are met when deserializing the ""value part"" of the root sorted map, HashMap (DeserializerBuilder.resolveRuntimeType():221) is used as value is declared as Java Object.
Then, lexicographical order set in Jsonb config has no effect when serializing the pojo.

Why HashMap is used by default ? Is it for performance considerations ? If it not acceptable to change default behavior to TreeMap would it be possible to make it configurable ?

Regards
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/186/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc3NDI3OQ==,yasson,441774279,186,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-26T19:50:34Z,2018-11-26T19:50:34Z,"HashMap has O(1) time complexity for get/put/remove/contains, whereas Treemap is O(log(n)), so HashMap is more efficient indeed.

If you want lexiographical ordering on ""value parts"", you could make your POJO datamodel be of type TreeMap instead of Map or HashMap.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc3NDI3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MjExMTczNQ==,yasson,442111735,186,NA,srius,17590313,Sébastien Rius,srius@free.fr,NA,2018-11-27T15:57:55Z,2018-11-27T15:57:55Z,"I guessed it was for performance considerations.
I don't want to explicitly define types in my data model as values can be objects (ie. maps) but also primitives or arrays.
Do we agree that if property order strategy is set in JsonbConfig, TreeMap is needed everywhere for this to work ? In order to keep performance when ordering is not needed, an alternative could be something like that in `DeserializerBuilder.java` :
```java
    private Type resolveRuntimeType() {
        Type result = ReflectionUtils.resolveType(wrapper, genericType != null ? genericType : runtimeType);
        // Try to infer best from JSON event.
        if (result == Object.class) {
            switch (jsonEvent) {
                case VALUE_FALSE:
                case VALUE_TRUE:
                    return Boolean.class;
                case VALUE_NUMBER:
                    return BigDecimal.class;
                case VALUE_STRING:
                    return String.class;
                case START_ARRAY:
                    return ArrayList.class;
                case START_OBJECT:
                    if (jsonbContext.getConfig().getProperty(JsonbConfig.PROPERTY_ORDER_STRATEGY).isPresent()) {
                        return TreeMap.class;
                    } else {
                        return HashMap.class;
                    }
                default:
                    throw new IllegalStateException(""Can't infer deserialization type type: "" + jsonEvent);

            }
        }
        return result;
    }
```
What do you think ?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MjExMTczNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MjUzMzMwNQ==,yasson,442533305,186,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-28T17:28:02Z,2018-11-28T17:28:02Z,"Yea I think this is a reasonable thing for Yasson to do.  Do want to propose this as a PR?  If you do, we should cache a boolean for whether or not to use TreeMap or Hashmap, since `resolveRuntimeType()` will get called a lot and the config can't be changed once we are in this code.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MjUzMzMwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/186,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Mjg3MjEwNQ==,yasson,442872105,186,NA,srius,17590313,Sébastien Rius,srius@free.fr,NA,2018-11-29T15:20:43Z,2018-11-29T15:20:43Z,PR has been submitted.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Mjg3MjEwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,yasson,384331236,187,Recursive reference in custom serializer,gjeraj,2414117,,,CLOSED,2018-11-26T13:29:33Z,2020-02-18T19:46:09Z,"I'm trying to implement a custom abstract class serializer which could serialize POJO in the following way: `{""com.test.TestClass"":{""a"":""1"",""b"":""2""}}`

For that I've written a custom serializer which is identical to the one listed in JSON-B example (http://json-b.net/docs/user-guide.html#serializers-deserializers):

```java
public class CustomSerializer implements JsonbSerializer<GenericClass> {
	@Override
	public void serialize(GenericClass instance, JsonGenerator generator, SerializationContext context) {
		generator.writeStartObject();

		if (instance != null)
			context.serialize(instance.getClass().getName(), instance, generator);
		else
			context.serialize(null, generator);

		generator.writeEnd();
	}
}
```

When i try to run it (`jsonb.toJson(instance, GenericClass.class);`) i get `javax.json.bind.JsonbException: Recursive reference has been found in class class com.test.TestClass.` 

Funny thing is that this used to work in yasson:1.0.1. The problem in 1.0.1 is when you call `.toJson` a second time on the same instance of `Jsonb` it would ignore custom serializer. Is there any way to get around this problem?

I've written a small test project to help: https://github.com/gjeraj/test-yasson

Thanks
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/187/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc4ODY1NQ==,yasson,441788655,187,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-11-26T20:36:05Z,2018-11-26T20:36:05Z,"@bravehorsie this seems to be an issue caused by XYZ

Also, @gjeraj has pointed out we have an invalid code example in the [JSON-B doc](http://json-b.net/docs/user-guide.html#serializers-deserializers):
```java
public class AnimalSerializer implements JsonbSerializer<Animal> {
    public void serialize(Animal animal, JsonGenerator jsonGenerator, SerializationContext serializationContext) {
        if (animal != null) {
            serializationContext.serialize(animal.getClass().getName(), animal, jsonGenerator);
        } else {
            serializationContext.serialize(null, jsonGenerator);
        }
    }
}
```

With the current code we get:
>  javax.json.stream.JsonGenerationException: Illegal method during JSON generation, not valid in current context IN_NONE

If we add a `generator.writeStartObject()` as shown in the OP, we get the following error:
```
javax.json.bind.JsonbException: Recursive reference has been found in class class atest.AGGMain$TestClass.
	at org.eclipse.yasson.internal.serializer.UserSerializerSerializer.serialize(UserSerializerSerializer.java:57)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.serialize(Marshaller.java:93)
	at atest.AGGMain$CustomSerializer.serialize(AGGMain.java:86)
	at atest.AGGMain$CustomSerializer.serialize(AGGMain.java:1)
	at org.eclipse.yasson.internal.serializer.UserSerializerSerializer.serialize(UserSerializerSerializer.java:55)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:74)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:106)
```

---

It seems this is expected behavior, introduced by @bravehorsie in this commit: https://github.com/eclipse-ee4j/yasson/commit/5e04a8d77cb18f7a8b59b263276b2023d245454f.  
Perhaps Roman can comment on if this should be allowed or not?  ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTc4ODY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzgzMDc3Mw==,yasson,447830773,187,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-17T12:35:58Z,2018-12-17T12:35:58Z,"@aguibert The commit you have referenced is old and has been overwritten by other commits. Yasson checks for StackOverflowError before it happens in cases such are bidirectional references.

@gjeraj In the test project you referenced there is a `CustomSerializer`, which inside its body calls context.serialize(..). Now if JsonbException with ""Recursive .. "" text will not be thown what will happen are recursive calls of your CustomSerializer. To Illustrate:

- Yasson runtime serializes root:
  - Found `CustomSerializer` for GenericClass type, calling it
    - `CustomSerializer` passes to Yasson runtime the `GenericClass` object in `context.serialize(..)`.
      - Yasson runtime found a `CustomSerializer` for `GenericClass` object, calling it
        - `CustomSerializer` will continue to pass the object to Yasson runtime causing `StackOverflowError`, if `JsonGenerationException` would not hit first, because you cant create Json object inside other Json object without a json field declared first.

The error is a bit confusing for anyone experimenting custom serializers. Any ideas to make it more selfdescribing?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzgzMDc3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Nzg1MDUxNg==,yasson,447850516,187,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-17T13:45:27Z,2018-12-17T13:45:27Z,Also related to #164 where custom serializers / adapters were made triggering also for subtypes of its declaration.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Nzg1MDUxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDQwMzUwMw==,yasson,454403503,187,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-15T14:06:41Z,2019-01-15T14:06:41Z,If there are no new objections I am about to close the issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDQwMzUwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzQ4MTA1OQ==,yasson,463481059,187,NA,rady66,17241575,Radoslav Ivanov,,NA,2019-02-14T04:06:15Z,2019-02-14T04:06:15Z,"I guess it is reproducible with marshaling toJson on 1.0.2 but not on 1.0.3 with this stack trace?:
```
Recursive reference has been found in class class java.util.Date.

<init>:62, JsonbException (javax.json.bind)
serialize:65, AdaptedObjectSerializer (org.eclipse.yasson.internal.serializer)
serializerCaptor:95, AbstractContainerSerializer (org.eclipse.yasson.internal.serializer)
marshallProperty:92, ObjectSerializer (org.eclipse.yasson.internal.serializer)
serializeInternal:61, ObjectSerializer (org.eclipse.yasson.internal.serializer)
serialize:63, AbstractContainerSerializer (org.eclipse.yasson.internal.serializer)
serializeRoot:118, Marshaller (org.eclipse.yasson.internal)
marshall:74, Marshaller (org.eclipse.yasson.internal)
toJson:98, JsonBinding (org.eclipse.yasson.internal)
```

The classes structure is like.
```
class A {
  @JsonbTypeAdapter(CustomDateAdapter.class)
  Date aDate;

  B b;
}

class B {
  @JsonbTypeAdapter(CustomDateAdapter.class)
  Date bDate;
}

```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzQ4MTA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTYzNjEwNg==,yasson,495636106,187,NA,ahofmeister,13524849,Alexander Hofmeister,,NA,2019-05-24T13:47:30Z,2019-05-24T13:47:30Z,"Is there any workaround?  

I am trying to hide my entity references behind IDs e.g.

```
public class A {
private B b; 
private C c;
}
```

should lead to something like this: 

```
{
""b"": ""5"",
""c"": ""2""
}
```

where as ""5"" and ""2"" are the referenced IDs 

I implemented something like the code above: 


```
public class MyAdapter implements JsonbSerializer<A> {

    @Override
    public void serialize(A obj, JsonGenerator generator, SerializationContext ctx) {
        generator.writeStartObject(""a"");
        generator.write(""b"", obj.getB().getId().toString());
        generator.write(""c"", obj.getC().getId().toString());
        ctx.serialize(obj, generator);
    }
}

```
I get 

> javax.json.stream.JsonGenerationException: Illegal method during JSON generation, not valid in current context IN_NONE
> at org.glassfish.json.JsonGeneratorImpl.writeStartObject(JsonGeneratorImpl.java:161)
> at [internal classes]

Am I missing something? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTYzNjEwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjE1NDg5Mg==,yasson,496154892,187,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-27T09:53:51Z,2019-05-27T09:53:51Z,"Are you serializing a root object? If sou you can't call `generator.writeStartObject(""a"");`, because object properties must be enclosed inside json object curly bracers.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjE1NDg5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5OTQzNDU5NA==,yasson,499434594,187,NA,ahofmeister,13524849,Alexander Hofmeister,,NA,2019-06-06T10:10:45Z,2019-06-06T10:10:45Z,"Even without `generator.writeStartObject(""a"");` I get the same error. :/ ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5OTQzNDU5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODY1Mzc0OQ==,yasson,508653749,187,NA,funcbro,47663513,,,NA,2019-07-05T07:02:18Z,2019-07-05T07:02:18Z,"The origin of the error seems to be the management of the objects in JsonbContext (v1.0.2) / ProcessingContext (v1.0.4)

**JsonbContext/ProcessingContext:**
```
    /**
     * Used to avoid StackOverflowError, when adapted / serialized object
     * contains contains instance of its type inside it or when object has recursive reference.
     */
    private Set<Object> currentlyProcessedObjects;
...
    public boolean addProcessedObject(Object object) {
        return this.currentlyProcessedObjects.add(object);
    }
```

Depending on the Hashcode of the processed objects this results in collisions, causing a recursive reference exception in AdaptedObjectSerializer:

```
    @Override
    @SuppressWarnings(""unchecked"")
    public void serialize(T obj, JsonGenerator generator, SerializationContext ctx) {
        JsonbContext jsonbContext = ((Marshaller) ctx).getJsonbContext();
        try {
            if (jsonbContext.addProcessedObject(obj)) {
                final JsonbAdapter<T, A> adapter = (JsonbAdapter<T, A>) adapterInfo.getAdapter();
                A adapted = adapter.adaptToJson(obj);
                final JsonbSerializer<A> serializer = resolveSerializer((Marshaller) ctx, adapted);
                serializer.serialize(adapted, generator, ctx);
            } else {
                throw new JsonbException(Messages.getMessage(MessageKeys.RECURSIVE_REFERENCE, obj.getClass()));
            }
        } catch (Exception e) {
            throw new JsonbException(Messages.getMessage(MessageKeys.ADAPTER_EXCEPTION, adapterInfo.getBindingType(), adapterInfo.getToType(), adapterInfo.getAdapter().getClass()), e);
        } finally {
            jsonbContext.removeProcessedObject(obj);
        }
    }

```

As a workaround you can try to adapt your hashcode generation for all of your entities.
A solution within Yasson should at least also distinguish the types.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODY1Mzc0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODk4MzYxMg==,yasson,508983612,187,NA,masini,2060870,Luca Masini,,NA,2019-07-07T09:06:10Z,2019-07-07T09:06:10Z,"I have the the same problem with a  JsonbSerializer<List<MyPojo>>, when the object is inside an ArrayList or a wrapper returned by the ORM these are detected as ""RECURSIVE_REFERENCE"".

Are polymorhpics collections planned in the Jsonb specs ?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODk4MzYxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/187,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4NzU5OTA5MA==,yasson,587599090,187,NA,johnrodey,1458056,,,NA,2020-02-18T18:12:16Z,2020-02-18T18:12:16Z,"I too have experienced this problem.  Previously (running 2.27) this code would print the root document, however oddly it would only work once if I reused the Jsonb object.  Recreating those objects each time is expensive so I updated to the latest (2.30) and now the same code results in this 'Recursive reference has been found' issue.  So is this supposed to work?  Or if there is another means to serialize the object with the root level can someone provide me a sample?

Below is some trimmed down sample code:

```
public class CustomSerializer implements JsonbSerializer<SAMPLE> {
	public CustomSerializer() {}
	@Override
	public void serialize(final SAMPLE p, final JsonGenerator g, final SerializationContext c) {
		g.writeStartObject();
		c.serialize(p.getClass().getSimpleName(), p, g);
		g.writeEnd();
	}
}
```

My object to be serialized:
```
@JsonbTypeSerializer(CustomSerializer.class)
public class SAMPLE {
	private String id;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
}
```

I'm looking to get the output:
```
{
    ""SAMPLE"": {
	""id"":1
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4NzU5OTA5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/188,https://api.github.com/repos/eclipse-ee4j/yasson/issues/188,yasson,384412218,188,"Unable to deserialize a ""naked"" boolean",schueffi,2255174,Stefan Schüffler,,CLOSED,2018-11-26T16:33:40Z,2019-01-09T09:55:02Z,"According to the json specification, a ""naked"" boolean is a valid json document ([see rfc7159, section 13, examples, especially the last one](https://tools.ietf.org/html/rfc7159#section-13)). i.e the input
`false`
is a valid json object (note, there is no object or array around the value, and no ""key"": value construct.
Attempts to deserialize this into a boolean java primitive fails with NoSuchElementException:
```java
final Jsonb jsonb = JsonbBuilder.create();
boolean b = jsonb.fromJson(""false"", boolean.class);
```
Deserializing the other ""naked"" value types works fine:
```java
jsonb.fromJson(""42"", Long.class);
jsonb.fromJson(""\""test\"""", String.class);
```
The difference might be in the `BooleanTypeDeserializer`, which always ""moves the parser to the next value"" in deserialize, 
```java
final JsonParser.Event event = ((JsonbParser) parser).moveToValue();
```
(in contrast to the `AbstractValueTypeDeserializer`, which in turn uses the last parsed event like so:
```java
final JsonParser.Event event = ((JsonbParser) parser).getCurrentLevel().getLastEvent();
```

Unfortunately, parser.moveToValue fails for ""naked"" primitive values, as in such cases the value already is parsed and on top of the event stack, ready to use. Moving forward to the nextValue fails...

All of this is a problem if some wants to e.g. consume some external REST api which returns a simple true or false ""boolean"" as (valid) json respone.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/188/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/188,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjYzNzYxMQ==,yasson,452637611,188,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-09T09:55:02Z,2019-01-09T09:55:02Z,Propagating an issue to JSONP to allow `JsonParser` next in case of a single naked value.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjYzNzYxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/192,https://api.github.com/repos/eclipse-ee4j/yasson/issues/192,yasson,389359857,192,Repo does not build on 'master' branch,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2018-12-10T15:42:27Z,2019-01-29T12:33:46Z,"I know recently @bravehorsie made some PRs to change over to JakartaEE dependencies, but it appears that these dependencies not publicly available yet.

> [ERROR] Failed to execute goal on project yasson: Could not resolve dependencies for project org.eclipse:yasson:jar:1.0.3-SNAPSHOT: The following artifacts could not be resolved: jakarta.json.bind:jakarta.json.bind-api:jar:1.0.1, jakarta.json:jakarta.json-api:jar:1.1.5, org.glassfish:jakarta.json:jar:module:1.1.5: Could not find artifact jakarta.json.bind:jakarta.json.bind-api:jar:1.0.1 in central (https://repo.maven.apache.org/maven2) -> [Help 1]

Should these changes be limited to the `EE4J_8` branch so that `master` remains usable?

Also, a general question for @m0mus and @bravehorsie... I have been making PRs against `master` branch for now, but should we be dual-delivering changes to both `master` and `EE4J_8`?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/192/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/192,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIxMTIzNQ==,yasson,446211235,192,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-11T13:58:08Z,2018-12-11T13:58:08Z,"You need to add ""-P staging"" to your command line in order to pull deps from https://oss.sonatype.org/content/repositories/staging/ which are not in central yet. Possibly this information can be added to project README file.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjIxMTIzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/192,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzQ2MDIwNA==,yasson,447460204,192,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-14T20:23:48Z,2018-12-14T20:23:48Z,"@bravehorsie I've created PR #198 for enabling the staging repository in the pom.xml by default, so that people don't need to be aware of the extra `-P staging` option.  We can remove the staging repo from the pom once JakartaEE dependencies are available on Central.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzQ2MDIwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/193,https://api.github.com/repos/eclipse-ee4j/yasson/issues/193,yasson,390142527,193,JSON-B and JSON-P API dependencies should have 'provided' scope,hwellmann,875768,Harald Wellmann,,CLOSED,2018-12-12T09:45:16Z,2019-01-29T12:33:46Z,"## Scenario

Working in a Java EE context with Maven, you normally have a provided scope dependency on javax:javaee-api.

To use any implementation specific API of Yasson (like YassonProperties), you need to add a compile scope or provided scope dependency on org.eclipse:yasson.

As a consequence, you get compile or provided scope transitive dependencies on javax.json:javax.json-api and javax.json.bind:javax.json.bind-api.

This causes
* duplicate packages on the compile time classpath
* duplicate type errors (at least in Eclipse with Java 11)
* inclusion of the JSON-P and JSON-B API JARs in your WAR when using Yasson with compile scope

## Goal

Yasson should use **provided** scope for the javax.json:javax.json-api and javax.json.bind:javax.json.bind-api dependencies.

## Workaround

Users of Yassons must add the following to their POM:

            <dependency>
                <groupId>org.eclipse</groupId>
                <artifactId>yasson</artifactId>
                <version>1.0.2</version>
                <exclusions>
                    <exclusion>
                        <groupId>javax.json</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.json.bind</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/193/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/193,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjY4MTUyOA==,yasson,446681528,193,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-12T17:55:27Z,2018-12-12T17:55:27Z,"Using a provided scope may be better for your use case, but remember that Yasson is also usable outside of a JavaEE context, and it should continue to be usable in this way.

The dominant use-cases are:
- JavaSE env: Pull in yasson as a dependency (drags in API automatically too, which is good)
- JavaEE env: Using just JSON-B spec, no vendor-specific APIs.  Here the app server provides API and and impl

I think using Yasson-specific APIs in a JavaEE env are not a majority case in the overall usage pattern, and since we cannot satisfy all use cases I still side with leaving the API dependencies how they are (compile scope).

Note that if you use Gradle instead of Maven, they have an easy mechanism where you can simply [turn off transitive dependenceis](https://docs.gradle.org/current/userguide/managing_transitive_dependencies.html#sub:disabling_resolution_transitive_dependencies).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NjY4MTUyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/193,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODUyMDA4Ng==,yasson,448520086,193,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-19T09:03:05Z,2018-12-19T09:03:05Z,"If you set yasson with provided scope, its dependencies in turn automatically become provided from the point of view of your project, according to the official [doc](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html). It seems to me that things are correctly set up in yasson’s own pom, thus. Maybe there’s a problem somewhere else with some tool not respecting provided scope semantics.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODUyMDA4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/193,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODY3NTU2Nw==,yasson,448675567,193,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-19T17:20:05Z,2018-12-19T17:20:05Z,"you're right @oliviercailloux, he did say ""compile scope or provided scope dependency on org.eclipse:yasson"" in the OP, but based on the code example I'm guessing he meant ""compile"" scope.

So the scenario he seems to care about is compile scope on Yasson, but provided scope on everything else.

In any case, in order to make this change the usage pattern of Yasson=compile everythingElse=provided would need to be a dominant use case (e.g. >80%) and clearly it's not, so I'm going to close out this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODY3NTU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/194,https://api.github.com/repos/eclipse-ee4j/yasson/issues/194,yasson,390388569,194,Error getting value when using lambda expressions,ahmadshahwan,9466737,Ahmad Shahwan,ahmad.shahwan@gmail.com,CLOSED,2018-12-12T20:07:09Z,2019-01-29T12:33:46Z,"When the serialized object is created using lambda expression, a `JsonbException` with a message of the sort ""Error getting value on: com.acme.Entry$$Lambda$40/0x00000008000f7040@45018215"" is thrown.

The following code:
```java
package com.acme;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;

public class Entry {

    public interface Cat {
        String getName();
    }
    
    public static void main(String args[]) {
        Jsonb jsonb = JsonbBuilder.create();
        Cat cat = () -> ""Catie"";
        jsonb.toJson(cat);
    }
}
```

Results in the following stack trace:
```
SEVERE: Generating incomplete JSON
Exception in thread ""main"" javax.json.bind.JsonbException: Error getting value on: com.acme.Entry$$Lambda$40/0x00000008000f7040@2928854b
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:36)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:72)
	at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:257)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:76)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:59)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:60)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at com.acme.Entry.main(Entry.java:15)
Caused by: java.lang.IllegalAccessException: class org.eclipse.yasson.internal.model.GetFromGetter cannot access a member of class com.acme.Entry$$Lambda$40/0x00000008000f7040 with modifiers ""public""
	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)
	at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)
	at java.base/java.lang.reflect.Method.invoke(Method.java:558)
	at org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:28)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	... 9 more
```

Replacing the lambda expression with an anonymous class solves the issue. However, both expressions are supposed to be equivalent, and many IDEs suggest the shortening of anonymous classes into lambdas systematically. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/194/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/194,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzQ2MzAyNg==,yasson,447463026,194,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-14T20:25:16Z,2018-12-14T20:25:16Z,"hi @ahmadshahwan, thanks for raising this bug and a proposed fix!  I've left a comment on your PR (just requesting to add some unit tests)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzQ2MzAyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/194,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzU0NTYyNg==,yasson,447545626,194,NA,ahmadshahwan,9466737,Ahmad Shahwan,ahmad.shahwan@gmail.com,NA,2018-12-15T07:35:21Z,2018-12-15T07:35:21Z,"Thanks Andrew, I'm on it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzU0NTYyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,yasson,391382999,199,getter not ignored when deserializing,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,CLOSED,2018-12-15T14:26:21Z,2019-01-29T12:33:46Z,"I am trying to deserialize JSON `{""data"": [""hah""]}` into:

	public class Wrapper {
		public Wrapper() {
		}
		public ImmutableSet<String> getData() {
			return null;
		}
	}

It seems to me this should work, as “data” should be ignored during deserialization (no corresponding public field or setter). But `data` is not ignored, instead, yasson tries to create an `ImmutableSet` and fails.

Here is the relevant part of the stack trace.

	javax.json.bind.JsonbException: Can't create instance
		at org.eclipse.yasson.internal.ReflectionUtils.lambda$createNoArgConstructorInstance$1(ReflectionUtils.java:210)
	Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.internal.ReflectionUtils can not access a member of class com.google.common.collect.ImmutableSet with modifiers """"

See this [project](https://github.com/oliviercailloux/2018-jsonb-serial) for a unit test.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/199/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYwMDA4MQ==,yasson,447600081,199,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-15T21:46:24Z,2018-12-15T21:46:24Z,"Hi @oliviercailloux, thanks for reporting this issue.  Looks like if we use a class that doesn't have a hidden ctor, the code ultimately behaves correctly.  In this case, Yasson tries to find the ctor for `ImmutableSet` (even though it would never be used) and blows up trying to do so.

I'll work on a fix, but in the meantime you should be able to work around the issue by putting `@JsonbIgnore` on the `getData()` method.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYwMDA4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYwOTMyNA==,yasson,447609324,199,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-16T00:55:29Z,2018-12-16T00:55:29Z,"Thanks for taking care of this. No, `@JsonbIgnore` does not work around the issue, I tried that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYwOTMyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Nzk5NTE3NA==,yasson,447995174,199,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-17T20:54:12Z,2018-12-17T20:54:12Z,"Any idea for a workaround? It’s needed while waiting for the fix to be integrated, and more importantly, because application servers around will still ship a version of yasson that doesn’t have the fix in the nearby future. It would be nice if I could trick yasson into thinking that it actually can instanciate [ImmutableSet](https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableSet.html).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0Nzk5NTE3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODA5NDEyMA==,yasson,448094120,199,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-18T04:40:07Z,2018-12-18T04:40:07Z,"Some workarounds for now:

1. Rename the `getData()` method do something that does not match the `getXXX()` property pattern, so `obtainData()` or something similar.
2. Change return type to `Set<String>` instead of `ImmutableSet<String>`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODA5NDEyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODA5NTU0OQ==,yasson,448095549,199,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-18T04:50:00Z,2018-12-18T04:50:00Z,"3. Register an adapter for ImmutableSet like so:

```java
public static class ImmutableSetAdapter implements JsonbAdapter<ImmutableSet<String>, Set<String>> {
    @Override
    public Set<String> adaptToJson(ImmutableSet<String> obj) throws Exception {
        return obj;
    }

    @Override
    public ImmutableSet<String> adaptFromJson(Set<String> obj) throws Exception {
        return ImmutableSet.copyOf(obj);
    }
}
```

Then register the adapter with your `Jsonb` instance:
```java
Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withAdapters(new ImmutableSetAdapter()));
Wrapper obj = jsonb.fromJson(""{\""data\"": [\""hah\""]}"", Wrapper.class);
```

Even though the adapter itself is trivial, it's doing 2 things:
1. On the serialization side (adaptToJson), its letting JSON-B know that an `ImmutableSet<String>` can simply be serialized in the same way a `Set<String>` can
2. On the deserialization side (adaptFromJson), it's letting JSON-B know how to construct an `ImmutableSet<String>`, given a type that JSON-B already knows how to deserialize (`Set<String>`)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODA5NTU0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/199,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODE0MjcwMA==,yasson,448142700,199,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-18T08:48:17Z,2018-12-18T08:48:17Z,"Workaround 3 is great, thanks.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODE0MjcwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,yasson,392072904,201,Heap pollution: Deserializing into @JsonbCreator with Set<Thing> creates a Set<HashMap> instead,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,CLOSED,2018-12-18T09:46:14Z,2019-11-20T21:33:49Z,"I am trying to deserialize `{""persons"": [{""name"": ""name1""}]}` into a class [`Persons`](https://github.com/oliviercailloux/2018-jsonb-serial/blob/master/src/main/java/io/github/oliviercailloux/y2018/jsonb_serial/Persons.java). The class declares a JsonbCreator as follows:

	@JsonbCreator
	public static Persons wrap(@JsonbProperty(""persons"") Set<Person> persons)

Jsonb knows how to create a [`Person`](https://github.com/oliviercailloux/2018-jsonb-serial/blob/master/src/main/java/io/github/oliviercailloux/y2018/jsonb_serial/Person.java) from the string `{""name"": ""name1""}` (I have checked with another [unit test](https://github.com/oliviercailloux/2018-jsonb-serial/blob/master/src/test/java/io/github/oliviercailloux/y2018/jsonb_serial/PersonsTest.java)).

What jsonb actually puts in the variable `persons`, [however](https://en.wikipedia.org/wiki/Heap_pollution), is a `Set<HashMap>`, as determined when trying to access the first person in `persons`, which throws an exception:

	javax.json.bind.JsonbException: Exception occurred during call to JSONB creator on class: class io.github.oliviercailloux.y2018.jsonb_serial.Persons.
	Caused by: java.lang.reflect.InvocationTargetException
	Caused by: java.lang.ClassCastException: java.util.HashMap cannot be cast to io.github.oliviercailloux.y2018.jsonb_serial.Person

The full code is [here](https://github.com/oliviercailloux/2018-jsonb-serial).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/201/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODE2MzYwMw==,yasson,448163603,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-18T09:58:24Z,2018-12-18T09:58:24Z,Note that removing `@JsonbCreator` and using a setter instead works.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODE2MzYwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODIwNTQ3Nw==,yasson,448205477,201,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-18T12:34:15Z,2018-12-18T12:34:15Z,Thanks for reporting @oliviercailloux !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODIwNTQ3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMxMjY5NQ==,yasson,448312695,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-18T18:00:19Z,2018-12-18T18:00:19Z,"Whow, efficient. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMxMjY5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NzQzNTI2NA==,yasson,457435264,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-01-25T02:41:21Z,2019-01-25T02:41:21Z,"The problem still occurs with yasson [1.0.3](https://search.maven.org/search?q=g:org.eclipse%20AND%20a:yasson&core=gav) (out 28th of Dec), is this expected? (The test code is still online, see original post.)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NzQzNTI2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDQ0NTMxMA==,yasson,470445310,201,NA,MytnikAA,4035995,Антон Мытник,MytnikAA@gmail.com,NA,2019-03-07T09:11:18Z,2019-03-07T09:11:18Z,Same problem but with ```List<Thing>```,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDQ0NTMxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODA2MTg0Ng==,yasson,498061846,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-06-02T20:15:43Z,2019-06-02T20:15:43Z,"> The problem still occurs with yasson [1.0.3](https://search.maven.org/search?q=g:org.eclipse%20AND%20a:yasson&core=gav) (out 28th of Dec), is this expected? (The test code is still online, see original post.)

Answering myself, I suppose it’s normal, as the release [notes](https://projects.eclipse.org/projects/ee4j.yasson/releases/1.0.3/bugs) do not list any issues solved.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODA2MTg0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODA4OTU0MQ==,yasson,498089541,201,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-03T02:06:44Z,2019-06-03T02:06:44Z,"The issue is listed in the Github release notes here: https://github.com/eclipse-ee4j/yasson/releases/tag/1.0.3-RELEASE

So the attempted fix was included in 1.0.3. We'll have to take another crack at fixing the problem.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODA4OTU0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODkxMDYyMQ==,yasson,508910621,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-07-06T09:14:34Z,2019-07-06T09:14:34Z,"Switching to [1.0.4](https://search.maven.org/search?q=g:org.eclipse%20AND%20a:yasson&core=gav) (out 7th of Jan) solves the problem.

Please consider fixing the release notes…","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODkxMDYyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTkwMjY4NQ==,yasson,511902685,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-07-16T17:04:55Z,2019-07-16T17:04:55Z,"Mh, the problem appears again (or a close variant of it) in another part of the code. Not sure it’s the exact same bug but the symptoms look very similar.

Please specify whether this bug fix has finally made it into 1.0.4 or not. Relatedly, whether I should just wait for a release or whether what I am observing now is a genuine new bug.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTkwMjY4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTkwNDU2MA==,yasson,511904560,201,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-07-16T17:10:14Z,2019-07-16T17:10:14Z,"Oops, sorry, I was using 1.0.3 by mistake.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTkwNDU2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/201,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MjU2NTY0Mw==,yasson,552565643,201,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-11-11T18:48:14Z,2019-11-11T18:48:14Z,Checked out this proplem with 1.0.5. It's working as intended. Also @oliviercailloux's comment says that he was using 1.0.3 by accident that didn't have the fix. I think this can be closed @aguibert,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MjU2NTY0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/203,https://api.github.com/repos/eclipse-ee4j/yasson/issues/203,yasson,392138844,203,Cache ResourceBundle upon creation.,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,OPEN,2018-12-18T12:40:38Z,2018-12-18T12:40:38Z,"Even if it is cached internally, Yasson could hold ResourceBundle instance inside its org.eclipse.yasson.internal.JsonbContext

Relates to #72 and #195","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,yasson,392506781,204,"Publish SNAPSHOTs, or document their locations",oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,CLOSED,2018-12-19T09:17:43Z,2019-06-01T18:52:26Z,"Are yasson SNAPSHOTs published to some Maven repository? I can’t find information about this.

The [parent pom](https://github.com/eclipse-ee4j/ee4j/blob/master/parent/pom.xml) references the Sonatype Nexus Staging [repository](https://oss.sonatype.org/content/repositories/snapshots/org/eclipse/), but I can’t find recent yasson artifacts there.

I also found (outdated?) information related to an eclipse specific [repository](https://repo.eclipse.org/content/repositories/), but nothing recent there either apparently.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/204/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODY5MzMwNw==,yasson,448693307,204,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-19T18:15:32Z,2018-12-19T18:15:32Z,"@bravehorsie @m0mus I'm having trouble finding this information too.

Looks like the Yasson CI/CD pipeline is here: https://ci.eclipse.org/yasson/

According to build logs, there are a few different repos:
- https://repo.eclipse.org/content/repositories/yasson/org/eclipse/yasson/
- https://repo.eclipse.org/content/repositories/yasson-releases/org/eclipse/yasson/
- https://repo.eclipse.org/content/repositories/yasson-snapshots/org/eclipse/yasson/

I think the ""yasson-snapshots"" repo is the correct one, as it has the newest snapshot, 1.0.2-SNAPSHOT.

Looks like there is no 1.0.3-SNAPSHOT yet, perhaps because there has been no green build since this change? https://github.com/eclipse-ee4j/yasson/commit/77580b27411bdac5e37fe38285a194786224a240

Also, I see Yasson has a Travis CI build here (which is green): https://travis-ci.org/eclipse-ee4j/yasson
However, the Travis build is just building the project and running tests.  It's not publishing releases/snapshots anywhere.

So it seems Travis it working and Jenkins is broken.  Are both needed?  Having some information about this in the README would be helpful.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODY5MzMwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODkyMzQ3MA==,yasson,448923470,204,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2018-12-20T09:00:56Z,2018-12-20T09:00:56Z,I don't think we do publish snapshots. We may need to create a job for it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODkyMzQ3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0OTA2NzM0Nw==,yasson,449067347,204,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-20T17:03:48Z,2018-12-20T17:03:48Z,"@bravehorsie We seem to have a snapshot repo and pipeline setup, which is working completely except for the very last step where it tries to upload the snapshot artifact to the snapshot repo.  See issue #206 for details.  I'm hoping you or some of your other Oracle co-workers that set up the pipeline could clarify the original intent of this pipeline and whether or not it should still be working going forward to JakartaEE.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0OTA2NzM0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0OTgzMzgyNg==,yasson,449833826,204,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2018-12-25T09:53:34Z,2018-12-25T09:53:34Z,"Would perhaps someone consider publishing manually a 1.0.3-SNAPSHOT version, in the meantime, if it’s not difficult? I would be happy to benefit from a few recent patches.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0OTgzMzgyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDk1OTY2Nw==,yasson,460959667,204,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-06T09:42:14Z,2019-02-06T09:42:14Z,"Snapshot version for Yasson has been published.
https://oss.sonatype.org/content/repositories/snapshots/org/eclipse/yasson/1.0.3-SNAPSHOT/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDk1OTY2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDk2MDQ2MQ==,yasson,460960461,204,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-06T09:44:51Z,2019-02-06T09:44:51Z,The build is configured to poll SCM changes and republish new version when available.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDk2MDQ2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzkyNzAwNw==,yasson,497927007,204,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2019-06-01T08:56:52Z,2019-06-01T08:56:52Z,Shouldn’t the current SNAPSHOT be named `1.0.4`? `1.0.3` is [out](https://search.maven.org/search?q=g:org.eclipse%20AND%20a:yasson&core=gav) already.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzkyNzAwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/204,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Nzk2OTExNg==,yasson,497969116,204,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-01T18:52:26Z,2019-06-01T18:52:26Z,yes it should. Looks like we just forgot to bump the version after cutting 1.0.3. I've created+merged https://github.com/eclipse-ee4j/yasson/pull/268 which bumps up to 104-snapshot,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Nzk2OTExNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/205,https://api.github.com/repos/eclipse-ee4j/yasson/issues/205,yasson,392610417,205,Better JPMS support in POM,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2018-12-19T13:50:40Z,2019-01-28T13:49:15Z,"Update surefire version, set surefire plugin to put yasson on module path.

See #196 @psakar comments for details.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/205/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/206,https://api.github.com/repos/eclipse-ee4j/yasson/issues/206,yasson,392738107,206,Jenkins build is broken,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2018-12-19T19:06:21Z,2019-02-06T14:41:06Z,"The Jenkins build at https://ci.eclipse.org/yasson/job/yasson-build/ has been failing for a few months with this error:

```
[WARNING] Rule 0: org.apache.maven.plugins.enforcer.RequireJavaVersion failed with message:
Detected JDK Version: 1.8.0-192 is not in the allowed range [9,).
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.901 s
[INFO] Finished at: 2018-12-18T11:15:26-05:00
[INFO] ------------------------------------------------------------------------
```

The failure seems to be caused by this change: https://github.com/eclipse-ee4j/yasson/commit/77580b27411bdac5e37fe38285a194786224a240

I think the proper fix is to update Jenkins build to use JDK 11. However, I'm not sure if we even use this Jenkins build anymore since we now have a Travis build.  Are both Travis and Jenkins needed?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/206/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/206,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODcwOTM0NQ==,yasson,448709345,206,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-19T19:07:15Z,2018-12-19T19:07:15Z,@Verdent perhaps you can weigh in on this one since you seem to work with the CD/CD pipelines for this repo?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODcwOTM0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/206,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODc2Njc0MQ==,yasson,448766741,206,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2018-12-19T22:29:21Z,2018-12-19T22:29:21Z,"Previously the Jenkins build was using the ""SYSTEM"" JDK, which was Java 8.  I updated the config to use `jdk9-latest` (there was no option for 10 or 11 yet), and now the build seems to get farther, but it ultimately fails when it tries to upload the snapshot to the sonatype snapshot repo:

```
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 26.782 s
[INFO] Finished at: 2018-12-19T17:15:46-05:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project yasson: Failed to deploy artifacts: Could not transfer artifact org.eclipse:yasson:jar:1.0.3-20181219.221546-1 from/to ossrh (https://oss.sonatype.org/content/repositories/snapshots/): Failed to transfer file: https://oss.sonatype.org/content/repositories/snapshots/org/eclipse/yasson/1.0.3-SNAPSHOT/yasson-1.0.3-20181219.221546-1.jar. Return code is: 401, ReasonPhrase: Unauthorized. -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
```

I tested this out with a manually initiated build (ran under my ID) and also by merging a bogus PR so the job would run under the system/scheduled ID and both builds failed in the same way with the above error.

@m0mus @Verdent or @bravehorsie It seems that credentials for the sonatype repo changed and the Jenkins build no longer has authority to publish snapshots there.  Can one of you please have a look?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODc2Njc0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/206,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTA0Njc1Mw==,yasson,461046753,206,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-06T14:41:06Z,2019-02-06T14:41:06Z,New space for Yasson jobs is now at https://jenkins.eclipse.org/yasson/.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTA0Njc1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/208,https://api.github.com/repos/eclipse-ee4j/yasson/issues/208,yasson,396142479,208,"Allow handling of ""JsonStructure"" as input for ""fromJson""",michael-schnell,1856319,Michael Schnell,,OPEN,2019-01-05T07:31:51Z,2019-04-11T07:48:56Z,"Hey there,

I just requested a new feature (see [jsonb-api/issues/111](https://github.com/eclipse-ee4j/jsonb-api/issues/111)) for the JSON-B API to allow [javax.json.JsonStructure](https://github.com/eclipse-ee4j/jsonp/blob/master/api/src/main/java/javax/json/JsonStructure.java) as input for deserialization 

How about implementing this already in [JsonBinding.java](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/JsonBinding.java) as a custom feature for Yasson?

```java
public class JsonBinding implements Jsonb {
  ...
  <T> T fromJson(JsonStructure jsonStruct, Class<T> type) throws JsonbException;
  <T> T fromJson(JsonStructure jsonStruct, Type runtimeType) throws JsonbException;
}
```
Cheers,
Michael
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/208/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/208,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MTcwNzE2Ng==,yasson,451707166,208,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-01-06T01:28:08Z,2019-01-06T01:28:08Z,"Added my thoughts on the jsonb-api issue, but to summarize I don't think there is a strong enough use case for adapting from JSON-P --> POJO.  More likely scenarios are to do String --> POJO or to just initialize the POJO directly.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MTcwNzE2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/208,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTY4NjU3MA==,yasson,481686570,208,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-04-10T13:17:24Z,2019-04-10T13:17:24Z,"This is definitely an important feature. In my view, the more important one is to have a binding from a JsonObject, as for JsonArray the order of fields would be relevant, see (#259). I did not dig deeply into the implementation but don't you need to have something like a JsonObject internally when binding happens?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTY4NjU3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/209,https://api.github.com/repos/eclipse-ee4j/yasson/issues/209,yasson,396164659,209,"Fix API link on main page to new ""eclipse-ee4j/jsonb-api""",michael-schnell,1856319,Michael Schnell,,CLOSED,2019-01-05T13:16:07Z,2019-01-05T23:29:49Z,The API link on the project's home page (README.md) still points to the archived https://github.com/javaee/jsonb-spec repository. It should be changed to the new https://github.com/eclipse-ee4j/jsonb-api repo.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/209/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/211,https://api.github.com/repos/eclipse-ee4j/yasson/issues/211,yasson,396528748,211,Public Release,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2019-01-07T15:22:18Z,2019-01-10T10:52:40Z,Last CTS runs indicate no failures in this component. It's time to make a public release. Before the release make sure that Eclipse Release Review is passed and all dependencies have been released.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/211/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/211,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzA1MzkzMw==,yasson,453053933,211,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-01-10T10:52:40Z,2019-01-10T10:52:40Z,Released,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzA1MzkzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/212,https://api.github.com/repos/eclipse-ee4j/yasson/issues/212,yasson,399338247,212,Remove redundant code for root level in JsonbRiParser,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-01-15T13:10:38Z,2019-01-16T10:34:36Z,JsonbRiParser uses `LevelContext root` field to track root level. This proved unnecessary and fragile when parsing single value JSON.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/212/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/212,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDM4ODMxNg==,yasson,454388316,212,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-15T13:16:19Z,2019-01-15T13:16:19Z,"Looking further into deserialising naked boolean value, I found that problem was on our side, not the jsonp.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDM4ODMxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/214,https://api.github.com/repos/eclipse-ee4j/yasson/issues/214,yasson,399427749,214,Yasson parses classes of known type,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-01-15T16:30:21Z,2019-01-28T13:49:15Z,"Known types such as java.lang.String or java.lang.Integer when are held inside collections, they are parsed reflectively by Yasson.

For example:

```java
class JavaBaseProperties {
  public List<String> names;
}
```

will cause java.lang.String to be parsed by Yasson into its class model.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/214/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/214,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDQ1Nzc0Mg==,yasson,454457742,214,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-15T16:32:46Z,2019-01-15T16:32:46Z,"Relates to #205, when used together with custom `PropertyVisibilityStrategy` making accessible private properties it causes `illegal reflective access` which is prohibited in Java 11.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NDQ1Nzc0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/216,https://api.github.com/repos/eclipse-ee4j/yasson/issues/216,yasson,400869823,216,"incorrect implementation of recursive reference detection (version 1.0.2, later versions not applicable)",realmarbro,46825085,,,CLOSED,2019-01-18T20:03:18Z,2019-01-19T12:07:47Z,"I noticed rare exceptions in my prototype application (using Yasson 1.0.2) when performing concurrent serialization from various resources to JSON. 

```java
javax.json.bind.JsonbException: Recursive reference has been found in class class java.util.Currency.
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:95)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:92)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:63)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:95)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:63)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:118)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:74)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
	at com.xxxxxxx.nl.fxa.rest.BasicController.getJson(BasicController.java:239)
	at com.xxxxxxx.nl.fxa.rest.BasicController.created(BasicController.java:220)
	at com.xxxxxxx.nl.fxa.rest.QuotesController.lambda$quotes$0(QuotesController.java:79)
	at com.xxxxxxx.nl.fxa.simulator.FxApiSimulator.createFxQuote(FxApiSimulator.java:187)
	at com.xxxxxxx.nl.fxa.rest.QuotesController.quotes(QuotesController.java:78)
	at sun.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$VoidOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:183)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
```

The resources at hand have properties of type Currency for which I implemented the following adapter:

```java
public class CurrencyAdapter implements JsonbAdapter<Currency, String> {

  @Override
  public String adaptToJson(Currency currency) {
    return currency.getCurrencyCode();
  }

  @Override
  public Currency adaptFromJson(String s) {
    return Currency.getInstance(s);
  }
}
```

There is no way that this could result in a recursive reference and I never encountered this in serial
serialization to JSON. According to the spec for java.json.bind.Jsonb all methods for that class are
thread safe and for the typical use case only one instane is required.

Note: Currency is implemented in such a way that Currency.getInstance(String curCode) for the same
curCode will always result in the same object.

I inspected the code and this part is the culprit:

line 56 of `AdaptedObjectSerializer`:

```java
   public void serialize(T obj, JsonGenerator generator, SerializationContext ctx) {
        JsonbContext jsonbContext = ((Marshaller) ctx).getJsonbContext();
        try {
            if (jsonbContext.addProcessedObject(obj)) {
                final JsonbAdapter<T, A> adapter = (JsonbAdapter<T, A>) adapterInfo.getAdapter();
                A adapted = adapter.adaptToJson(obj);
                final JsonbSerializer<A> serializer = resolveSerializer((Marshaller) ctx, adapted);
                serializer.serialize(adapted, generator, ctx);
            } else {
                throw new JsonbException(Messages.getMessage(MessageKeys.RECURSIVE_REFERENCE, obj.getClass()));
            }
        } catch (Exception e) {
            throw new JsonbException(Messages.getMessage(MessageKeys.ADAPTER_EXCEPTION, adapterInfo.getBindingType(), adapterInfo.getToType(), adapterInfo.getAdapter().getClass()), e);
        } finally {
            jsonbContext.removeProcessedObject(obj);
        }
    }
```

The context is being used to store the traversal of the objects to detect recursive references, however this jsonbContext is shared over all Marshallers created and therefore the Set which has the collection of object being traversed is the set of all object being traversed by multiple Marshallers. Besides there is no proper synchronization in place for this, it seems to me also wrong. This set should be maintained per Marshaller. This particular issue will only occur for objects being referenced from multiple resources, however in case of Currency this is the default behavior.

BTW 1 in `JsonbContext` there is another non synchronized non final variable `genericComponents` which, however a synchronization issue, there would only result in an inefficiency.

BTW 2 in `JsonbContext` there are 2 non final fields `configProperties` and `currentlyProcessedObjects` which should be made final and could lead to race conditions, currently the object is unsafe initialized.

For now I have to start using a pool with Jsonb instances to prevent this from happening, or say farewell to using Currency with an adapter, but I would appreciate it if this can be fixed. I have the feeling that moving that logic up from the context to the Marshaller would fix this, but no doubt the person who implemented this is in a better position to determine this.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/216/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/216,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTc3NDYwMA==,yasson,455774600,216,NA,realmarbro,46825085,,,NA,2019-01-19T12:04:49Z,2019-01-19T12:04:49Z,"> I noticed rare exceptions in my prototype application (using Yasson 1.0.2) when performing concurrent serialization from various resources to JSON.
> 

I was initially under the impression I was working with the lastest version of yasson (1.0.3), but when checking the classpath I noticed that I was actually using 1.0.2 (corrected this in my earlier posting). Checking the master branch I noticed that this issue was already fixed. 

So only BTW 1 and 2 are still relevant from the initial report. I changed the title so it is clear that it only applied to versions before 1.0.3 for if anybody else bumps into this issue.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTc3NDYwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/217,https://api.github.com/repos/eclipse-ee4j/yasson/issues/217,yasson,400991241,217,Unsafe initializations in version 1.0.3,realmarbro,46825085,,,CLOSED,2019-01-19T12:26:23Z,2019-02-05T10:21:25Z,"As a reported and closed #216 I created a new issue to mention the 3 outstanding issues I spotted in the code.

In `org.eclipse.yasson.internal.ProcessingContext`

```java
    /**
     * Used to avoid StackOverflowError, when adapted / serialized object
     * contains contains instance of its type inside it or when object has recursive reference.
     */
    private Set<Object> currentlyProcessedObjects = new HashSet<>();
```

The above should be made final as it represents an unsafe initialization, chances are rare it results into a race condition but it is possible.

in `org.eclipse.yasson.internal.JsonbContext`

```java
    private boolean genericComponents;

    private JsonbConfigProperties configProperties;
```

`configProperties` must be made final as it represents unsafe initialization at this moment and for `genericComponents` it should be volatile or an AtomicBoolean should be used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/217/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/217,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTY4MjMyNw==,yasson,459682327,217,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-01T10:46:05Z,2019-02-01T10:46:05Z,"@realmarbro Thanks for pointing that out, making final as many as possible is always a good practice.

Looking into code, `ProcessingContext` has a ""Thread bound"" mention in its javadoc. So only one thread can ever access particular instance. Anything inside is effectively thread safe. If you search for usages of the constructor of `ProcessingContext` you will see that it is created everytime `Jsonb#toJson(..), Jsonb#fromJson is called.

Situation is a bit different for JsonbContext. Its instance is cached inside `JsonBinding` class, which is shared among threads. However, please note that both of them are initialized during Jsonb instance creation and never modified after, so race condition effectively cannot occur also here. 

Neverthless, it is good idea to make all of them final to avoid any confusion. I will create a PR.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTY4MjMyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/218,https://api.github.com/repos/eclipse-ee4j/yasson/issues/218,yasson,402726489,218,Fix TravisCI build,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-01-24T14:15:24Z,2019-01-28T13:49:17Z,"Javadoc fails at Travis on latest JDK 11.0.2, with following message: 
`[ERROR] Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/218/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/219,https://api.github.com/repos/eclipse-ee4j/yasson/issues/219,yasson,402738589,219,Cache deserializer instance for collections.,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,OPEN,2019-01-24T14:42:29Z,2019-01-24T14:44:33Z,"During deserialization of Collection items deserializer of item should be cached, to tune up performance.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/219/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/219,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NzIyMTU5Mg==,yasson,457221592,219,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-24T14:44:32Z,2019-01-24T14:44:32Z,Relates to #220 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NzIyMTU5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/220,https://api.github.com/repos/eclipse-ee4j/yasson/issues/220,yasson,402739362,220,Add JMH performance tests,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-01-24T14:44:08Z,2019-12-23T08:50:12Z,Add tests to verify performance tuning for Yasson.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/220/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/220,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODI2OTU3NQ==,yasson,568269575,220,NA,nimo23,3045549,,,NA,2019-12-22T14:47:51Z,2019-12-22T14:47:51Z,Please also look at https://github.com/fabienrenaud/java-json-benchmark where it was verified with JMH that yasson is far behind jackson performance. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODI2OTU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/220,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODMxMzI3NQ==,yasson,568313275,220,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-12-22T23:43:46Z,2019-12-22T23:43:46Z,"@nimo23 as mentioned in the other issue, that benchmark makes no mention of Yasson. Not sure where you are getting that information from.

In any case, JMH tests were added under #238 so I""m going to close this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODMxMzI3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/220,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODQwNjQzMQ==,yasson,568406431,220,NA,nimo23,3045549,,,NA,2019-12-23T08:50:11Z,2019-12-23T08:50:11Z,"@aguibert yasson is there: look at the chart on the X axis (for example, the first chart on the 3rd position from the left). ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODQwNjQzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,yasson,403724755,221,Deserialize Enum with @JsonbCreator on factory method,cchacin,292938,Carlos Chacin,cchacin@gmail.com,CLOSED,2019-01-28T09:42:39Z,2019-01-29T16:55:37Z,"### Given the following Enum:
```java
public enum StatusEnum {
    AVAILABLE(""available""),

    PENDING(""pending""),

    SOLD(""sold"");

    private final String name;

    StatusEnum(final String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    @Override
    public String toString() {
        return String.valueOf(this.name);
    }
    
    @javax.json.bind.annotation.JsonbCreator
    public static StatusEnum fromValue(final String text) {
        return java.util.Arrays.stream(StatusEnum.values())
                .filter(b -> java.util.Objects.equals(String.valueOf(b.name), text))
                .findFirst()
                .orElse(null);
    }
}
```

### And the following wrapper class using the enum as a field type:
```java
public class EnumWrapper {
        private final StatusEnum status;

        @JsonbCreator
        public EnumWrapper(
                @JsonbProperty(""status"") StatusEnum status) {
            this.status = status;
        }

        public StatusEnum getStatus() {
            return status;
        }
}
```

### The following test should pass:

```java
@Test
    void testEnumDeserialization() throws Exception {
        // Given
        final Jsonb jsonb = JsonbBuilder.create();

        // When
        final EnumWrapper statusEnum = jsonb.fromJson(""{\""status\"":\""available\""}"", EnumWrapper.class);

        // Then
        assertThat(statusEnum).isNotNull();
}
```

### Error Output:

```
java.lang.IllegalArgumentException: No enum constant models.StatusEnum.available
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/221/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODE4MTU2OA==,yasson,458181568,221,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-28T15:43:16Z,2019-01-28T15:43:16Z,"@cchacin Yasson doesn't propagate `@JsonbCreator` transitively. What for example you would have following addition to your code:
```java
public static class Box {
        private String status;

        public String getStatus() {
            return status;
        }

       @JsonbCreator
       public void Box(String status) {
            this.status = status;
        }
}
```
and in your enum:
```java
         @javax.json.bind.annotation.JsonbCreator
         public static StatusEnum fromValue(final Box box) {
            return java.util.Arrays.stream(StatusEnum.values())
              .filter(b -> java.util.Objects.equals(String.valueOf(b.name), box.getStatus()))
              .findFirst()
              .orElse(null);
        }
```
Would you expect Yasson to scan for `@JsonbCreator` transitively on a Box class?

@aguibert do you have an objection on this?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODE4MTU2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODI5OTg1Mw==,yasson,458299853,221,NA,cchacin,292938,Carlos Chacin,cchacin@gmail.com,NA,2019-01-28T21:02:23Z,2019-01-28T21:02:23Z,"@bravehorsie I added the wrapper in the example just to make my life easier in the test, but the question is:

Having an Enum which has a factory method annotated with `@JsonbCreator`, should the deserializer use the factory method or not?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODI5OTg1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODM0MzkzNg==,yasson,458343936,221,NA,cchacin,292938,Carlos Chacin,cchacin@gmail.com,NA,2019-01-28T23:27:16Z,2019-01-28T23:27:16Z,"Notice that there is not inheritance involved in the example just wanted to deserialize an enum using a factory method annotated with `@JsonbCreate`:

```java
public enum StatusEnum {
    AVAILABLE(""available""),

    PENDING(""pending""),

    SOLD(""sold"");

    private final String name;

    StatusEnum(final String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    @Override
    public String toString() {
        return String.valueOf(this.name);
    }
    
    @javax.json.bind.annotation.JsonbCreator
    public static StatusEnum fromValue(final String text) {
        return java.util.Arrays.stream(StatusEnum.values())
                .filter(b -> java.util.Objects.equals(String.valueOf(b.name), text))
                .findFirst()
                .orElse(null);
    }
}
```

This allows to be able to use a String that does not match with the uppercased enum value.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODM0MzkzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUwMTcxNA==,yasson,458501714,221,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-29T11:12:28Z,2019-01-29T11:12:28Z,"@cchacin 
First: according to [JSONB specification](https://jcp.org/aboutJava/communityprocess/final/jsr367/index.html), deserialization of enums must be done with an Enum#valueOf method. Its not perfectly clear if @JsonbCreator should apply also to enums, but lets leave enums alone and consider following scenario:
```java
public static class BoxWrapper {
        private final Box box;

        @JsonbCreator
        public BoxWrapper(
                @JsonbProperty(""status"") Box box) {
            this.box = box;
        }

        public Box getBox() {
            return box;
        }
    }

    public static class Box {
        private String status;

        public String getStatus() {
            return status;
        }

        @JsonbCreator
        public void Box(String status) {
            this.status = status;
        }
    }
```
During deserialization of a `BoxWrapper` we are expecting here that value for `status` is propagated through `@JsonbCreator` transitively twice - first for `BoxWrapper` creator, second for `Box` creator. That alone is the reason that Yasson currently doesn't propagate the value.  In your example `Box` is an Enum instead of a Class, but the reason for getting error is the same.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUwMTcxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUwMjI2MA==,yasson,458502260,221,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-01-29T11:14:29Z,2019-01-29T11:14:29Z,Alternatively you can declare a `javax.json.bind.serializer.JsonbDeserializer` calling your factory Enum method.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUwMjI2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODYwMTk4Mg==,yasson,458601982,221,NA,cchacin,292938,Carlos Chacin,cchacin@gmail.com,NA,2019-01-29T16:14:51Z,2019-01-29T16:14:51Z,"@bravehorsie thanks for the explanation about the spec, the `JsonbDeserializer` approach worked as a workaround for my case 👍 ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODYwMTk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/221,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODYxODUzMA==,yasson,458618530,221,NA,cchacin,292938,Carlos Chacin,cchacin@gmail.com,NA,2019-01-29T16:55:37Z,2019-01-29T16:55:37Z,Closing since is not an issue and there is a simple way to solve this functionality,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODYxODUzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/226,https://api.github.com/repos/eclipse-ee4j/yasson/issues/226,yasson,406252978,226,Dead code in org.eclipse.yasson.internal.Unmarshaller,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-02-04T09:57:50Z,2019-02-20T09:47:47Z,`org.eclipse.yasson.internal.Unmarshaller` holds an `Unmarshaller#current` field which is not used anymore.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/226/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/226,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDE5Mzk5Nw==,yasson,460193997,226,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-04T10:14:28Z,2019-02-04T10:14:28Z,Found during #225 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDE5Mzk5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/228,https://api.github.com/repos/eclipse-ee4j/yasson/issues/228,yasson,407148226,228,@JsonbPropertyOrder seems to ignore inherited properties,tosix1988,47381744,,,OPEN,2019-02-06T09:36:40Z,2019-02-07T16:17:52Z,"When a type that inherits properties from its supertype is annotated by @JsonbPropertyOrder, the inherited properties are ignored even if specified in the @JsonbPropertyOrder.

To reproduce, suppose we have the following types:
SampleEntitySuper:
```java
public class SampleEntitySuper {

	private Integer superField1;
	private Integer superField2;

	SampleEntitySuper() {
	}
	
	public SampleEntitySuper(Integer superField1, Integer superField2) {
		this.superField1 = superField1;
		this.superField2 = superField2;
	}
	
	public Integer getSuperField1() {
		return superField1;
	}

	public void setSuperField1(Integer superField1) {
		this.superField1 = superField1;
	}

	public Integer getSuperField2() {
		return superField2;
	}

	public void setSuperField2(Integer superField2) {
		this.superField2 = superField2;
	}
}
```
SampleEntitySub:
```java
@JsonbPropertyOrder({""subField"", ""superField1"", ""superField2""})
public class SampleEntitySub extends SampleEntitySuper {

	private Integer subField;

	SampleEntitySub() {
	}

	public SampleEntitySub(Integer subField, Integer superField1, Integer superField2) {
		super(superField1, superField2);
		this.subField = subField;
	}

	public Integer getSubField() {
		return subField;
	}

	public void setSubField(Integer subField) {
		this.subField = subField;
	}

}
```
Now, I would assume the following test to succeed, but it fails instead:
```java
public class JsonbPropertyOrderTest {

    @Test
    public void test() {
        SampleEntitySub sub = new SampleEntitySub(1, 2, 3);
         
        Jsonb jsonb = JsonbBuilder.create();
        String result = jsonb.toJson(sub);

        assertEquals(""{\""subField\"":1,\""superField1\"":2,\""superField2\"":3}"", result);
    }
    
}
```
The failure is:
```
expected:<{""su[bField"":1,""superField1"":2,""superField2"":3]}> but was:<{""su[perField1"":2,""superField2"":3,""subField"":1]}>
```
i.e. SampleEntitySuper fields were ordered before SampleEntitySub fields. Is the current behavior of Yasson in line with the specification, or is this a bug? If the current implementation is ok, what would be the preferred way to achieve the ordering of properties I require?

Note: tested on Yasson version 1.0.3. I can attach the sample maven project if needed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/228/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/228,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ5MjkyNA==,yasson,461492924,228,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-07T16:16:34Z,2019-02-07T16:16:34Z,"Thanks for reporting @tosix1988 ,

Currently processing for `@JsonbPropertyOrder` applies only to class level properties, it does not include properties from superclass(es) or children. If it does and `@JsonbPropertyOrder` is declared on both: child and parent classes including properties from both classes on both declarations, there will be a conflict forcing a need to throw an exception in that case. 

Furthermore as in [JSONB specification document](https://jcp.org/en/jsr/detail?id=367) section 3.13, it is required that properties from parent classes are serialized first. I don't know of any way it is currently possible to override this property order restriction. JsonbConfig supports `PropertyOrderStrategy`, but there is no way to provide user defined implementation, besides using built-in order strategies.  Let's rise a bug to clarify this on [jsonb-api](https://github.com/eclipse-ee4j/jsonb-api). ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ5MjkyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/229,https://api.github.com/repos/eclipse-ee4j/yasson/issues/229,yasson,407279722,229,Custom Deserializer with Generics,notarmara,12168345,,,OPEN,2019-02-06T15:08:26Z,2019-02-06T15:08:26Z,"Hi all,
I ‘m using wildfly 14 with jersey 2.27 and java 11.

Previously I used Jackson and now I’m trying to substitute it with yasson.
I’m using the yasson version provided by wildfly:

<dependency>
                    <groupId>org.eclipse</groupId>
                    <artifactId>yasson</artifactId>
                    <version>1.0.1</version>
                    <scope>provided</scope>
</dependency>


I have the following deserializer:
`public class GenericDeserializer implements JsonbDeserializer<Generic<?>> {`

declared on Generic class
`@JsonbTypeDeserializer(GenericDeserializer.class)`
`public class Generic<O extends Serializable> {`

and a rest service that for example use the Generic class in this way:

`@POST`
`@Path(""/items/mass/{appName}/{id}"")`
`@Consumes(MediaType.APPLICATION_JSON)`
`@Produces(MediaType.APPLICATION_JSON)`
`public Response mass(@PathParam(""appName"") String applicationName, @PathParam(""id"") Long id, Generic<BaseFilterDto>searchRequest)`

of course the class BaseFilterDto is an example, but I can pass each type I want, so I cannot know which it is at deserializer creation time.

I tested the service but the deserializer is not called.

Is there a ""clean"" way to resolve this?
I have found a way using reflection but of course must not be the right one

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/229/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/230,https://api.github.com/repos/eclipse-ee4j/yasson/issues/230,yasson,407571975,230,Collections are not correctly unmarshalled when @JsonbCreator is used,tosix1988,47381744,,,CLOSED,2019-02-07T07:30:17Z,2019-09-13T14:00:20Z,"When using @JsonbCreator to annotate a factory method to create an instance of the type, collection properties of the type are not properly unmarshalled.

To demonstrate this issue, let's assume we have:

Some enum type:
```java
public enum EnumType {
	ONE,
	TWO;
}
```
Then we have two types, each having a collection of EnumType as a property.
EnumCollection (no @JsonbCreator annotation):
```java
public class EnumCollection {

	private List<EnumType> enums;
	
	public EnumCollection() {
	}
	
	public EnumCollection(List<EnumType> enums) {
		this.enums = enums;
	}
	
	public List<EnumType> getEnums() {
		return enums;
	}

	public void setEnums(List<EnumType> enums) {
		this.enums = enums;
	}
}
```
EnumCollectionCreator (using @JsonbCreator):
```java
public class EnumCollectionCreator {

	private List<EnumType> enums;
	
	private EnumCollectionCreator(List<EnumType> enums) {
		this.enums = enums;
	}
	
	@JsonbCreator
	public static EnumCollectionCreator create(@JsonbProperty(""enums"") List<EnumType> enums) {
		return new EnumCollectionCreator(enums);
	}

	public List<EnumType> getEnums() {
		return enums;
	}

	public void setEnums(List<EnumType> enums) {
		this.enums = enums;
	}
}
```
Now the following test passes for the EnumCollection type:
```java
public class EnumCollectionTest {

    @Test
    public void test() {
        EnumCollection coll = new EnumCollection(asList(EnumType.ONE, EnumType.TWO));
         
        Jsonb jsonb = JsonbBuilder.create();
        String result = jsonb.toJson(coll);
        
        assertEquals(""{\""enums\"":[\""ONE\"",\""TWO\""]}"", result);
        EnumCollection unmarshalled = jsonb.fromJson(result, EnumCollection.class);
        assertEquals(coll.getEnums(), unmarshalled.getEnums()); // collection of enums is property unmarshalled
    }
}
```
However, the following test fails for the type using @JsonbCreator (either the assertion fails, or accessing any element from the unmarshalled collection property throws ClassCastException):
```java
public class EnumCollectionCreatorTest {

    @Test
    public void test() {
        EnumCollectionCreator coll = EnumCollectionCreator.create(asList(EnumType.ONE, EnumType.TWO));
        
        Jsonb jsonb = JsonbBuilder.create();
        String result = jsonb.toJson(coll);
        assertEquals(""{\""enums\"":[\""ONE\"",\""TWO\""]}"", result);
        EnumCollectionCreator unmarshalled = jsonb.fromJson(result, EnumCollectionCreator.class); 
        
        // does not pass, coll.getEnums() is a list of enums, whereas unmarshalled.getEnums()
        // is a list of strings
        assertEquals(coll.getEnums(), unmarshalled.getEnums());
        
        // equivalently, the following line of code would throw ClassCastException when executed
        // EnumType t = unmarshalled.getEnums().get(0);
    }
}
```

Note: I have used Yasson 1.0.3 to reproduce. I can provide sample maven project if needed to reproduce.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/230/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/230,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ3NTAwMA==,yasson,461475000,230,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-07T15:39:33Z,2019-02-07T15:39:33Z,Thanks for reporting @tosix1988 !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ3NTAwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/230,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NDcxNDc3MQ==,yasson,464714771,230,NA,tosix1988,47381744,,,NA,2019-02-18T12:29:50Z,2019-02-18T12:29:50Z,"Hi @bravehorsie, I have checked this issue again on master, and it seems that it has already been fixed in the meanwhile (most likely by 6ae0add15), so I believe this issue can be closed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NDcxNDc3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/230,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTI0ODQ4MQ==,yasson,531248481,230,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-13T14:00:05Z,2019-09-13T14:00:05Z,closing out this issue since @tosix1988 indicated it has been fixed. The fix is available as of Yasson 1.0.4,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTI0ODQ4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/231,https://api.github.com/repos/eclipse-ee4j/yasson/issues/231,yasson,407751236,231,@JsonbTypeAdapter is not applied for unmarshalling when @JsonbCreator is used,tosix1988,47381744,,,OPEN,2019-02-07T15:19:33Z,2024-05-21T13:51:59Z,"Suppose we have a following enum type
```java
public static enum EnumType {
	ONE(""one""),
	TWO(""two"");
		
	private EnumType(String value) {
		this.value = value;
	}
		
	private final String value;
		
	public String getValue() {
		return value;
	}
		
	public static EnumType of(String value) {
		for (EnumType t : EnumType.values()) {
			if (t.value.equals(value)) {
				return t;
			}
		}
		return null;
	}
}
```
Then, let's define a custom JsonbAdapter for a list of EnumTypes:
```java
public class EnumTypeListAdapter implements JsonbAdapter<List<EnumType>, JsonArray> {

	@Override
	public JsonArray adaptToJson(List<EnumType> obj) {
		System.out.println(""I am marshalling the list of EnumTypes to JsonArray"");
		return Json.createArrayBuilder(obj.stream()
				.map(EnumType::getValue)
				.collect(Collectors.toList()))
				.build();
	}

	@Override
	public List<EnumType> adaptFromJson(JsonArray obj) {
		System.out.println(""I am unmarshalling the list of EnumTypes from JsonArray"");
		List<EnumType> enums = new ArrayList<>();
		for (JsonString s : obj.getValuesAs(JsonString.class))  {
			enums.add(EnumType.of(s.getString()));
		}
		return enums;
	}
}
```
Then for the type defined as:
```java
public class CollectionAdapterType {

	@JsonbTypeAdapter(EnumTypeListAdapter.class)
	private List<EnumType> enums;
 
	public CollectionAdapterType() {
	}
	
	public CollectionAdapterType(List<EnumType> enums) {
		this.enums = enums;
	}

	public List<EnumType> getEnums() {
		return enums;
	}

	public void setEnums(List<EnumType> enums) {
		this.enums = enums;
	}	
}
```
the following test passes:
```java
public class CollectionAdapterTypeTest {

	@Test
	public void test() {
		CollectionAdapterType coll = new CollectionAdapterType(asList(EnumType.ONE, EnumType.TWO));
        
                Jsonb jsonb = JsonbBuilder.create();
                String result = jsonb.toJson(coll);
        
                assertEquals(""{\""enums\"":[\""one\"",\""two\""]}"", result);
                CollectionAdapterType unmarshalled = jsonb.fromJson(result, CollectionAdapterType.class);
                assertEquals(coll.getEnums(), unmarshalled.getEnums());
                // passes as the custom type adapter has been called for both marshalling and unmarshalling
	}	
}
```
However, when we define the type with @JsonbCreator, such as:
```java
public class CollectionAdapterCreatorType {

	@JsonbTypeAdapter(EnumTypeListAdapter.class)
	private List<EnumType> enums;

	private CollectionAdapterCreatorType(List<EnumType> enums) {
		this.enums = enums;
	}
	
	@JsonbCreator
	public static CollectionAdapterCreatorType create(@JsonbProperty(""enums"") List<EnumType> enums) {
		return new CollectionAdapterCreatorType(enums);
	}

	public List<EnumType> getEnums() {
		return enums;
	}

	public void setEnums(List<EnumType> enums) {
		this.enums = enums;
	}
}
```
then the following test fails:
```java
public class CollectionAdapterCreatorTypeTest {

	@Test
	public void test() {
		CollectionAdapterCreatorType coll = CollectionAdapterCreatorType.create(asList(EnumType.ONE, EnumType.TWO));
        
                Jsonb jsonb = JsonbBuilder.create();
                String result = jsonb.toJson(coll);
        
                assertEquals(""{\""enums\"":[\""one\"",\""two\""]}"", result);
                CollectionAdapterCreatorType unmarshalled = jsonb.fromJson(result, CollectionAdapterCreatorType.class);
                assertEquals(coll.getEnums(), unmarshalled.getEnums());
                // custom adapter was called only for marshalling
	}
}
```
The reason is that the EnumTypeListAdapter was used only when marshalling (and the CollectionAdapterCreatorType type is marshalled correctly), however, it was not picked up when unmarshalling, causing the failure.

Note: I have used Yasson 1.0.3. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/231/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/231,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ3MjgwOA==,yasson,461472808,231,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-07T15:35:13Z,2019-02-07T15:35:13Z,@tosix1988 Thanks for reporting! Looks to be a creator with adapter / serializer issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ3MjgwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/231,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44BNDE,yasson,939839684,231,NA,bfedoronchuk,17601160,Bogdan Fedoronchuk,,NA,2021-10-11T09:11:46Z,2021-10-11T09:11:46Z,"Btw, it works fine when the enum class is annotated instead of the field. I have used Yasson 1.0.8","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44BNDE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/231,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-ha4p,yasson,2122690089,231,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2024-05-21T13:51:58Z,2024-05-21T13:51:58Z,This is still an issue in Yasson 2.x and 3.x with JsonbCreator and JsonbTypeAdapter as well as JsonbTypeDeserializer. :( ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-ha4p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/232,https://api.github.com/repos/eclipse-ee4j/yasson/issues/232,yasson,408421487,232,Deserializing a java.sql.Timestamp returns a java.util.Date,bmarsaud,2720587,Bastien MARSAUD,pro@bastien-marsaud.fr,CLOSED,2019-02-09T11:06:59Z,2019-02-13T06:40:44Z,"Hello !
I'm using Yasson 1.0.3 on Java 11 and deserializing a java.sql.Timestamp returns a java.util.Date instead of a Timestamp. 

For instance, this test :
```java
    @Test
    public void testTimestamp() {
        Timestamp expectedTimestamp = Timestamp.from(Instant.now());

        Jsonb jsonb = new JsonBindingBuilder().build();
        String json = jsonb.toJson(expectedTimestamp);
        Timestamp timestamp = jsonb.fromJson(json, Timestamp.class);
        
        assertEquals(expectedTimestamp, timestamp);
    }
```

Will throw the following exception :
```
java.lang.ClassCastException: class java.util.Date cannot be cast to class java.sql.Timestamp (java.util.Date is in module java.base of loader 'bootstrap'; java.sql.Timestamp is in module java.sql of loader 'platform')

	at [snipped].YassonTest.testTimestamp(YassonTest.java:24)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
```

It's even more problematic when you have a java.sql.Timestamp argument encapsulated in an object, as the full object can't be deserialized. It throws a `java.lang.IllegalArgumentException: argument type mismatch` exeption.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/232/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/232,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjE3NzgwNw==,yasson,462177807,232,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-02-10T21:51:22Z,2019-02-10T21:51:22Z,"hi @TheZopo, thanks for reporting this. Right now Yasson does not provide a built-in adapters for `java.sql.Timestamp`.  According to JSON-B 1.0 spec, only the following date/time classes are required:
- java.util.Date
- java.util.Calendar
- java.util.GregorianCalendar
- java.util.TimeZone
- java.util.SimpleTimeZone
- java.time.*

However, Yasson also provides other adapters beyond the spec like `java.sql.Date`, so I think we could also add one for `java.sql.Timestamp` as well.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjE3NzgwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/232,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY1ODE1NQ==,yasson,462658155,232,NA,bmarsaud,2720587,Bastien MARSAUD,pro@bastien-marsaud.fr,NA,2019-02-12T08:08:35Z,2019-02-12T08:08:35Z,"Didn't realize that `java.sql.Timestamp` wasn't in JSON-B specs, thank to pointing that out.
Howewer, as you said it could be a good improvement to add support for it, as for `java.sql.Date`.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY1ODE1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,yasson,408767424,233,"Configuration propertsy ""withNullValues"" ignored when serializing Collections/Maps",reinhapa,4694567,Patrick Reinhart,,CLOSED,2019-02-11T12:51:19Z,2019-03-01T15:03:25Z,"When serializing collections and maps containing `null` values the `JsonbConfig` property `withNullValues` is ignored. See test provided methods:

```
import static org.junit.Assert.assertEquals;

import java.util.Collections;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;

import org.junit.Test;

public class SerializationTest {
  @Test
  public void testSerializeMapWithNulls() {
    Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withNullValues(Boolean.FALSE));
    assertEquals(""{}"", jsonb.toJson(Collections.singletonMap(null, null)));
    assertEquals(""{}"", jsonb.toJson(Collections.singletonMap(""key"", null)));
    assertEquals(""{}"", jsonb.toJson(Collections.singletonMap(null, ""value"")));
  }

  @Test
  public void testSerializeCollectionWithNulls() {
    Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withNullValues(Boolean.FALSE));
    assertEquals(""[]"", jsonb.toJson(Collections.singleton(null)));
    assertEquals(""[]"", jsonb.toJson(Collections.singletonList(null)));
  }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/233/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzA4NjU1Ng==,yasson,463086556,233,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-13T07:16:57Z,2019-02-13T07:16:57Z,"Thanks for PR @reinhapa, but I think ignoring nullValues:FALSE (which is default) for collections is intentional. 

[The specification document](https://download.oracle.com/otndocs/jcp/json_b-1-final-eval-spec/index.html) is not clear about collections, however Yasson treats them similar to Arrays, see section 3.14.2 in the spec.

The issue with ignoring null values for collections/arrays is that after serialization of collection or array of size 3, with some of the values null and deserializing it back the data will not be the same, and so process of serialization/deserialization would not be symmetric.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzA4NjU1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzEzNjU4OQ==,yasson,463136589,233,NA,reinhapa,4694567,Patrick Reinhart,,NA,2019-02-13T10:02:41Z,2019-02-13T10:02:41Z,"@bravehorsie I see your point in serializing collections though, for the Map serialization on the other hand the `null` handling does not respect the setting and also does the current implementation not behave symmetric in regards of `null` keys though. (the latter corner case is also not clearly specified, a `null` key value is silently converted to `""null""`)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzEzNjU4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzE3MDM1Mw==,yasson,463170353,233,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-13T11:48:54Z,2019-02-13T11:48:54Z,"@reinhapa Key is converted to null because json doesn't allow anything else than string for key values. Correct in that cornercase Yasson is not symmetric, but it tries its best and is symmetric in other cases. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzE3MDM1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzMxODg0NA==,yasson,463318844,233,NA,reinhapa,4694567,Patrick Reinhart,,NA,2019-02-13T18:47:50Z,2019-02-13T18:47:50Z,"@bravehorsie should it not lead to an error if a such a case is found, so that the implementer will be aware of this fact in favour of having ""wrong"" data?
 
Also after a giving other thought to the Collections:
Would it be feasible to have an special implementation handling null values within `java.util.Set` then ignoring `null` values, excluding the `java.util.List`?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzMxODg0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUwNDQ4OQ==,yasson,463504489,233,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-14T06:14:26Z,2019-02-14T06:14:26Z,"@reinhapa Good suggestion, throwing exception for java.util.Map null keys is much better option than to write them as strings.

> Would it be feasible to have an special implementation handling null values within `java.util.Set` then ignoring `null` values, excluding the `java.util.List`?

Not sure what did you mean. Extending / wrapping Set implementations not allowing null values to pass in? I think Yasson could provide a setting for omitting null values on serialization for Maps/Collections/Arrays, but it should be configurable separately from null values for properties. That way the possibility of running such it is now in default mode is still possible. I also think all of the Map/List/Array should be processed in the same manner. Hopefully someone steps in at [https://github.com/eclipse-ee4j/jsonb-api/issues/118](https://github.com/eclipse-ee4j/jsonb-api/issues/118)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUwNDQ4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/233,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUxNzU5OA==,yasson,463517598,233,NA,reinhapa,4694567,Patrick Reinhart,,NA,2019-02-14T07:11:25Z,2019-02-14T07:11:25Z,"@bravehorsie I'm happy to help in [eclipse-ee4j/jsonb-api#118](https://github.com/eclipse-ee4j/jsonb-api/issues/118)
Also I will then remove ignore part from the Collections though..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUxNzU5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,yasson,410004596,237,Deserializing JSON with missing field fails using @JsonbCreator,emattheis,18270192,Erik Mattheis,,OPEN,2019-02-13T21:12:28Z,2024-03-28T07:34:21Z,"When I attempt to deserialize a JSON document with missing fields as a Java type using `@JsonbCreator` I get the following exception:
```
javax.json.bind.JsonbException: JsonbCreator parameter PARAM_NAME is missing in json document.
```
Looking into the source, I found [this](https://github.com/eclipse-ee4j/yasson/blob/1.0.3/src/main/java/org/eclipse/yasson/internal/serializer/ObjectDeserializer.java#L117-L120) which indicates that the error condition is mandated by the spec. However, I can't find anything in the spec that requires all parameters in a creator to be present. Am I missing it?

Here's a test class that illustrates the issue:
```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import javax.json.bind.Jsonb;
import javax.json.bind.annotation.JsonbCreator;
import javax.json.bind.annotation.JsonbProperty;

import org.eclipse.yasson.internal.JsonBindingBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class JsonbCreatorTest {
    public static class Mutable {
        private String test = ""default"";

        public String getTest() {
            return test;
        }

        public void setTest(String test) {
            this.test = test;
        }
    }

    public static class Immutable {
        private final String test;

        @JsonbCreator
        public Immutable(@JsonbProperty(""test"") String test) {
            this.test = test;
        }

        public String getTest() {
            return test;
        }
    }

    private static final String OBJECT_WITH_FIELD = ""{\""test\"":\""test\""}"";

    private static final String EMPTY_OBJECT = ""{}"";

    private Jsonb jsonb;

    @BeforeEach
    public void createJsonBuilder() {
        jsonb = new JsonBindingBuilder().build();
    }

    @Test
    public void testDeserializeMutableFromObjectWithField() {
    	Mutable mutable = jsonb.fromJson(OBJECT_WITH_FIELD, Mutable.class);
    	assertEquals(""test"", mutable.getTest());
    }

    @Test
    public void testDeserializeImmutableFromObjectWithField() {
    	Immutable immutable = jsonb.fromJson(OBJECT_WITH_FIELD, Immutable.class);
    	assertEquals(""test"", immutable.getTest());
    }

    @Test
    public void testDeserializeMutableFromEmptyOBject() {
    	Mutable mutable = jsonb.fromJson(EMPTY_OBJECT, Mutable.class);
    	// spec says the setter MUST NOT be called when the property is absent
    	assertEquals(""default"", mutable.getTest());
    }

    @Test
    public void testDeserializeImmutableFromEmptyOBject() {
    	Immutable immutable = jsonb.fromJson(EMPTY_OBJECT, Immutable.class);
    	// spec does not seem to mention how to handle this - null seems like the only sane choice
    	assertNull(immutable.getTest());
    }
}
```
Ultimately, I think this needs to be clarified in the spec, so I will raise it there as well, but I would like a way to get null passed in to creators when fields are missing instead of exceptions. I don't want to have to resort to mutable POJOs just to support this use case.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUyOTcyNg==,yasson,463529726,237,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-14T08:01:18Z,2019-02-14T08:01:18Z,"Its section 4.5
> In case a field required for a parameter mapping doesn’t exist in JSON document, JsonbException MUST be thrown.

The complicated thing with this example is that Yasson will never know the field is missing intentionally or not. 
When parsing ""{\""test\"":null}"", JsonParser encounters a test field for a constructor or setter and Yasson propagates the null value.
However parsing ""{}"" there is no callback into Yasson for property to be set. In case of `@JsonbCreator` Yasson can be ""smart"" and use null because it has a constructor to call but there are no values for it, but what if properties are missed in JSON unintentionally? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzUyOTcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzY2ODE3NQ==,yasson,463668175,237,NA,emattheis,18270192,Erik Mattheis,,NA,2019-02-14T15:25:11Z,2019-02-14T15:25:11Z,"I followed the link from the [JSON-B website](http://json-b.net/download.html) which leads [here](https://jcp.org/aboutJava/communityprocess/pr/jsr367/index.html). Now I realize that is the public review draft. 🙄 Anyway, I found the [final spec](https://jcp.org/aboutJava/communityprocess/final/jsr367/index.html) and I see the reference.

This is disappointing since it basically means you cannot deserialize to a truly immutable type if your JSON documents have optional fields which is quite common in my experience, but I understand Yasson's position on spec-compliance, so I'll raise the issue in the json-b api project.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzY2ODE3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTM3NDU5OQ==,yasson,505374599,237,NA,misl,2040396,Minto,,NA,2019-06-25T09:56:20Z,2019-06-25T09:56:20Z,"Wouldn't it still be compliant with JSON-B specification if only `Optional<>` JsonbCreator arguments were allowed to be missing? In this case missing none `Optional<>` arguments would still throw the `MessageKeys.JSONB_CREATOR_MISSING_PROPERTY` error.

I did something similar in #276. I only noticed how similar both solutions were after I was done.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTM3NDU5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjAzMDc5MA==,yasson,506030790,237,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-06-26T20:23:34Z,2019-06-26T20:23:34Z,@aguibert @Verdent Can you folks review it. I am also interested in is TCK will pass with this PR merged.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjAzMDc5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjM2Nzk5MQ==,yasson,506367991,237,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-27T14:23:39Z,2019-06-27T14:23:39Z,"@m0mus before we merge this PR or the similar PR that @misl proposed, we need to address this at the JSON-B spec level over at https://github.com/eclipse-ee4j/jsonb-api/issues/121
Lets focus our efforts on that JSON-B spec issue and then we can do the appropriate impl in Yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjM2Nzk5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjY3NzY1NQ==,yasson,506677655,237,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-06-28T09:56:59Z,2019-06-28T09:56:59Z,"We discussed it with @Verdent today. We both agree that the issue exists and it makes sense to fix it. The problem is that it goes against the spec which explicitly restricts this behavior. Thanks @aguibert for creating a task in JSONB spec issues tracker. We will address it when we will start working on a new version of the spec. 
It doesn't mean that it cannot be fixed in Yasson *now*. We can add a Yasson specific configuration property called for example `ALLOW_JSONB_CREATOR_OPTIONAL_PARAMS`. By default this property is not set which makes Yasson 100% spec compliant. If this property is set `JsonbCreator` behavior is switched to what's been suggested above. Setting configuration property is easy:
```
JsonbConfig config = new JsonbConfig()
    .setProperty(""ALLOW_JSONB_CREATOR_OPTIONAL_PARAMS"", true);
```
@aguibert @emattheis what do you think? If you agree please change a PR.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjY3NzY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjc0OTE4OA==,yasson,506749188,237,NA,emattheis,18270192,Erik Mattheis,,NA,2019-06-28T14:13:42Z,2019-06-28T14:13:42Z,"Personally, my interest in Yasson is limited to its role as the JSON-B reference implementation, so I am happy to wait until this becomes specified behavior. If I can't write portable code, then I'm going to use a more mature JSON framework anyway.

I don't necessarily object to making this a configurable behavior of Yasson, and I imagine it won't be difficult to add, but I think it dilutes the value of the JSON-B standard when all the implementations support a common feature in a non-standard way. It would be interesting to know if the TCK specifically enforces spec-compliance in this case. If it doesn't, perhaps a minor change to the spec could be fast-tracked somehow?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjc0OTE4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjgwMDcxOQ==,yasson,506800719,237,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-28T16:43:41Z,2019-06-28T16:43:41Z,"@m0mus I hesitate to add a yasson-specific switch to enable non-spec compliant behavior for the reasons that @emattheis outlined and also because it creates more long-term code maintenance for Yasson. Especially if JSON-B decides to solve this in a completely different way, then we would have to support both ways in Yasson and hope they don't conflict.

We can't fast-track a change to the JSON-B spec unfortuantely. I think this would be a must-have feature for the next version of JSON-B though.
Dmitry, do you know if we are allowed to start working on JSON-B v1.1 now? Or do we have to wait until JakartaEE 8 finalizes before we can do any work at all?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjgwMDcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk0MTE5NA==,yasson,506941194,237,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-06-29T08:55:08Z,2019-06-29T08:55:08Z,"@emattheis in this case we should close this issue. Andy already added a task to JSONB issues tracker. There is no need to keep it open.

@aguibert Sure, we can start working on JSONB 1.1 now in master branch. It's fine to define a scope and feature set and start working on updating APIs. We cannot release a final version without going through the spec approval process (but we can release non-final versions such as betas, RCs, etc.). It's also unclear about javax->jakarta namespace conversion at the moment. I guess we can change all packages to jakarta.* now and start thinking about how we implement it in Yasson. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk0MTE5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WKmk,yasson,1029220772,237,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2022-02-03T17:21:58Z,2022-02-03T17:21:58Z,"The corresponding [issue](https://github.com/eclipse-ee4j/jsonb-api/issues/121) is marked as solved. I am sure that many developers are eager to use this feature. Is Yasson going to implement this soon?

@aguibert [wrote](https://github.com/eclipse-ee4j/yasson/issues/285#issuecomment-516058741), on 29 July 2019: “IMO optional constructor properties are one of the top 3 most needed features for JSON-B (…), my preference is to wait until this is defined at the spec level (which will hopefully be soon).”","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WKmk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WLsQ,yasson,1029225232,237,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-02-03T17:26:45Z,2022-02-03T17:26:45Z,@oliviercailloux sure thing. I am already having working implementation of this feature in my local branch. We will try to get this branch to the master soon. This feature will be released as soon as the new JSONB is released.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WLsQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/237,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs54rKes,yasson,2024581036,237,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2024-03-28T07:34:20Z,2024-03-28T07:34:20Z,What is the current status of this?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs54rKes/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,yasson,411452047,240,Custom JsonbSerializer not used,,,,,CLOSED,2019-02-18T12:26:42Z,2019-03-10T20:31:21Z,"Hello everyone,
We are currently migrating our JavaEE applications to the latest JBoss EAP 7.2 release. Unfortunately we have some trouble with serializing (Hinbernate) entities.
I know from a previous discussion that Yasson should not provide any vendor-specific de-/serialization mechanism and I totally agree. I only want to ask a question about one specific implementation part of Yasson.

Our main problem is that the fasterxml-datatype-hibernate5 module is not working with the used Hibernate version bundled with EAP7.2 (and to be honest we want to use Jsonb). So I am currently working on JsonbSerializer for PersistentBag.

Consider following entity relation:
```
@Entity
public class User
{
    @Id
    private int id;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = ""user"")
    private List<Address> addresses;

   // getter and setter ...
}

@Entity
public class Address
{
    @Id
    private int id;

    @OneToMany(fetch = FetchType.LAZY)
    private User user;

    // getter and setter
}

@Path(""/users"")
public class UserResource
{
    @PersistenceContext
    private EntityManager manager;

    @GET
    @Path(""/{id}"")
    @Produces(MediaType.APPLICATION_JSON)
    public User get(@PathParam(""id"") final int id)
    {
        return this.entityManager.find(id, User.class);
    }
}
```

Now to the problem. My JsonbSerializer for PersistentCollection is not used when the User#addresses field is going to be serialized. I tracked it down to this implementation.

ObjectSerializer#marshallProperty()
```
//revers to ParameterizedTypeImpl List<Address>
Type genericType = ReflectionUtils.resolveType(this, propertyModel.getType());
final JsonbSerializer<?> serializer = new SerializerBuilder(marshaller.getJsonbContext())
    .withWrapper(this)
    .withObjectClass(propertyValue.getClass()) //propertyValue.getClass() is returning PersistentBag
    .withModel(propertyModel)
    .withType(genericType).build();
serializerCaptor(serializer, propertyValue, generator, ctx);
```

The final call to build() method is returning a CollectionSerializer instance. But I would expect here to get my PersistentBag serializer.
Looking into the SerializerBuilder I found the following:
```componentMatcher.getSerializerBinding(getRuntimeType(), customization) @75```
This line is not returning my serializer because `getRuntimeType()` is returning the declared type from User class and not the real runtime type PersistentBag. So my registered serializer is not recognized because `List<Address> != PersistentBag.class`

The next line @87 `getSupportedTypeSerializer(objectClass)` only returns an Optional.empty because obviously PersistentBag is not registered in DefaultSerializers.

This leads to
```
if (Collection.class.isAssignableFrom(objectClass)) {
    return new CollectionSerializer<>(this);
}
```
which is true because PersistentBag implements List.

In my opinion this is a bug, because I am registering a JsonbSerializer for a type which is unknown to Jsonb API but it's not recognized correctly.

I would appreciate your opinion on this one.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/240/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NTUwMTcwMg==,yasson,465501702,240,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-02-20T09:46:03Z,2019-02-20T09:46:03Z,"Hi @cpoels, thanks for reporting!

Currently Yasson looks into property type signature (as is declared on field/getter) for resolving serializers / adapters without considering an instance. That looks like a bug at first glance. I will look further into it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NTUwMTcwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NTczMzE0NA==,yasson,465733144,240,NA,,,,,NA,2019-02-20T20:03:47Z,2019-02-20T20:03:47Z,"Hello @bravehorsie, thanks for the quick response!

I haven't read the specification so far, so I'm not sure if it's really a bug or if the specification is written this way.
No matter how, it would be a pretty cool feature if an instances' type is considered, because this would open up much more configuration possibilities in my opinion.

Maybe not only checking `serializers' type == instances' type`, but also `serializers' type isAssigneableFrom instances' type`.

But as you said, I will let you have a look at it ;)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NTczMzE0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODY5MTg1Mg==,yasson,468691852,240,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-03-01T14:56:33Z,2019-03-01T14:56:33Z,"@cpoels Looks I have been mistaken about instance type not considered. This was already fixed in #164. I've tried to create test simulating your use case (subtypes of generic collections), but my serializer is used by the runtime. Can you take if there is anything missed in the test scenario?

https://github.com/bravehorsie/yasson/tree/serializers-instance-type

https://github.com/bravehorsie/yasson/blob/71ccd671244c6984c30c31b05816dfd2c1602b13/src/test/java/org/eclipse/yasson/serializers/SerializersTest.java#L394

Or could you test your app with latest snapshots?
https://oss.sonatype.org/content/repositories/snapshots/org/eclipse/yasson/1.0.3-SNAPSHOT/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODY5MTg1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTYzNzcxOQ==,yasson,469637719,240,NA,,,,,NA,2019-03-05T11:00:39Z,2019-03-05T11:00:39Z,"@bravehorsie Thanks a lot for your help!
Unfortunately we cannot test your suggested version in our environment, becuase Yasson 1.0.3 is build with the new jakarta packages.
We are bounded to our RedHat support, so we cannot patch the Yasson module without replacing all javax.json dependencies with the jakarta.json ones. If we would do this, we would loose the support.

But your tests looks like exactly what we need. But I think we are stuck here, because we would need a Yasson build with the old ""non-jakarta"" packages.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTYzNzcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTY0MjAxMg==,yasson,469642012,240,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-03-05T11:15:35Z,2019-03-05T11:15:35Z,"@cpoels Losing a RedHat support because updating to JakartaEE? But that is what all JavaEE went into. There will be no further updates of Yasson or other JavaEE components in the old (https://github.com/javaee/) space. Sounds like you are now stuck without any update at all, which is quite bizzare.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTY0MjAxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDQ0MzE3Ng==,yasson,470443176,240,NA,,,,,NA,2019-03-07T09:04:27Z,2019-03-07T09:04:27Z,"Maybe my explanation was not that clear as I thought.
RedHat will update their Jboss EAP versions to the new JakartaEE. So for the future we won't have a problem at all.
But their latest release EAP 7.2 wont get the patches. Of course it would be somehow possible to patch Yasson 1.0.3 by ourselves, but we are then loosing the support.

Okay then, I know everything I need to know. I think we try to patch it anyway.

Thanks a lot for your support & have a nice day!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDQ0MzE3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDc3MTI4Ng==,yasson,470771286,240,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-03-08T01:42:01Z,2019-03-08T01:42:01Z,"It's important to note that even though the _maven dependencies_ are changing from `javax.json` to `jakarta.json`, the package names and binary .class files will all remain the same. So you should be able to run the latest Yasson 1.0.3 even if you are compiling/running against the old `javax.json` maven dependencies","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDc3MTI4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/240,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTM0MTI5NQ==,yasson,471341295,240,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-03-10T20:31:21Z,2019-03-10T20:31:21Z,Closing this issue as a dup of https://github.com/eclipse-ee4j/yasson/issues/164,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTM0MTI5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/241,https://api.github.com/repos/eclipse-ee4j/yasson/issues/241,yasson,411894737,241,Unnecessary reflective call for getting default constructor ,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-02-19T12:15:28Z,2019-03-22T13:24:03Z,"During deserialization, Yasson calls `Class#getDeclaredConstructor` in runtime during each user type instance creation. This call should be cached in order to avoid performance problems.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/241/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/243,https://api.github.com/repos/eclipse-ee4j/yasson/issues/243,yasson,414223804,243,serialization of generic root type with custom serializer fails to use the custom serializer,emattheis,18270192,Erik Mattheis,,CLOSED,2019-02-25T17:39:35Z,2019-03-12T13:40:13Z,"Consider the following type:
```java
@JsonbTypeSerializer(AnnotatedGenericWithSerializerTypeSerializer.class)
@JsonbTypeDeserializer(AnnotatedGenericWithSerializerTypeDeserializer.class)
public class AnnotatedGenericWithSerializerType<T> {
    public T value;
}
```
And the corresponding custom serializer/deserializer:
```java
public class AnnotatedGenericWithSerializerTypeDeserializer implements JsonbDeserializer<AnnotatedGenericWithSerializerType<?>> {
    @Override
    public AnnotatedGenericWithSerializerType<?> deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
        AnnotatedGenericWithSerializerType<?> result = new AnnotatedGenericWithSerializerType<>();
        assertEquals(Event.KEY_NAME, parser.next());
        assertEquals(""generic"", parser.getString());
        result.value = ctx.deserialize(((ParameterizedType) rtType).getActualTypeArguments()[0], parser);
        return result;
    }
}
```
```java
public class AnnotatedGenericWithSerializerTypeSerializer implements JsonbSerializer<AnnotatedGenericWithSerializerType<?>> {
    @Override
    public void serialize(AnnotatedGenericWithSerializerType<?> obj, JsonGenerator generator, SerializationContext ctx) {
        generator.writeStartObject();
        ctx.serialize(""generic"", obj.value, generator);
        generator.writeEnd();
    }
}
```
This works:
```java
AnnotatedGenericWithSerializerType<String> result = jsonb.fromJson(""{\""generic\"":\""inside generic\""}"", new AnnotatedGenericWithSerializerType<String>(){}.getClass().getGenericSuperclass());
assertEquals(""inside generic"", result.value);
```
But this doesn't:
```java
AnnotatedGenericWithSerializerType<String> annotatedType = new AnnotatedGenericWithSerializerType<>();
annotatedType.value = ""inside generic"";
assertEquals(""{\""generic\"":\""inside generic\""}"", jsonb.toJson(annotatedType));
```
Looks like an issue with type erasure at runtime. PR incoming...","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/245,https://api.github.com/repos/eclipse-ee4j/yasson/issues/245,yasson,415285909,245,Way to map directly to/from JsonGenerator and JsonParser,jjspiegel,3903733,Josh Spiegel,josh.spiegel@oracle.com,CLOSED,2019-02-27T19:21:55Z,2019-03-10T20:25:27Z,"Some data binding frameworks provide a way to do mappings to/from parsers and generator. 

JAXB:

   https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXB.html#unmarshal-javax.xml.transform.Source-java.lang.Class-
   https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXB.html#marshal-java.lang.Object-javax.xml.transform.Result-

(see StAXResult and StAXSource)

Jackson:

   https://fasterxml.github.io/jackson-databind/javadoc/2.7/com/fasterxml/jackson/databind/ObjectMapper.html#writeValue(com.fasterxml.jackson.core.JsonGenerator,%20java.lang.Object)
   https://fasterxml.github.io/jackson-databind/javadoc/2.7/com/fasterxml/jackson/databind/ObjectMapper.html#readValues(com.fasterxml.jackson.core.JsonParser,%20java.lang.Class)

This is a useful feature as it allows a user to leverage the mapping rules without requiring a serialization format (JSON text or some other format).  Also some implementations might only implement parser/generator and not implement JsonProvider. 

Could we add to/from JSON methods for JsonParser and JsonGenerator?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/247,https://api.github.com/repos/eclipse-ee4j/yasson/issues/247,yasson,417753896,247,ClassCastException when marshalling char[],frito,4830807,Bernd Zeitler,frito.boggie@quantentunnel.de,CLOSED,2019-03-06T11:22:33Z,2019-03-11T14:28:47Z,"The test` org.eclipse.yasson.defaultmapping.collections.CollectionsTest#testMarshallArray` claims support for several arrays, including `char[]`.

Not all supported arrays are tested.

When adding a testcase using a `char[]`, the test fails with a `ClassCastException: [C cannot be cast to [Ljava.lang.Object;`

```
final char[] charArray = new char[] {'a', 'b', 'c'};
assertEquals(""[\""a\"",\""b\"",\""c\""]"", jsonb.toJson(charArray));
```

Observed with yasson 1.0.1 and reproduced in MASTER.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/247/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/253,https://api.github.com/repos/eclipse-ee4j/yasson/issues/253,yasson,421403884,253,Map deserialization doesn't use Adapter and generates runtime exception on access,nickarls,371975,,,OPEN,2019-03-15T08:25:43Z,2019-06-21T08:45:02Z,"Given a simple POJO ""Person"" with a String attribute ""name"" and a test like 

`	public static void main(String[] args) {
		String json = ""{\""foo\"" : \""bar\""}"";
		Map<Person, String> map = JsonbBuilder.create().fromJson(json, new HashMap<Person, String>() {}.getClass().getGenericSuperclass()); 
		map.keySet().forEach(Person::getName);
	}
`

I end up with
`Exception in thread ""main"" java.lang.ClassCastException: java.lang.String cannot be cast to test.Person
	at java.util.HashMap$KeySet.forEach(HashMap.java:933)
	at test.Test.main(Test.java:14)`

If I register an adapter for Person, it is never called. How can a String even fit into the Person map key and only be detected at runtime?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/253/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/253,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0NzA0NQ==,yasson,473247045,253,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-03-15T11:10:36Z,2019-03-15T11:10:36Z,"Looks like a reopen of #110.
In runtime the `<Person>` signature is not present, so any value fits. However Yasson should avoid class cast failing earlier and also tell something more specific in this case.

A bit of a background on current implementation and why your adapter is not used:
JSON doesn't allow anything else than string to be used as a key in a json object structure.
Serializing Maps with any different key type than String has to end up as a String key mapping.
Currently we use String.valueOf (toString) for serialization of any key type other than string.

This can be customized registering adapter / (de)serializer for whole map type for example:
```java
public class PersonKeyMapSerializer implements JsonbSerializer<Map<Person,String>> {}
```

Adapters / serializers registered directly for the map key type are not used during Map processing. I am not all against it, but if we do want to introduce it, we would still have to check that to/from type cannot be anything else than string for a key. 

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzI0NzA0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/253,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzcxNTI5OQ==,yasson,473715299,253,NA,nickarls,371975,,,NA,2019-03-17T21:12:04Z,2019-03-17T21:12:04Z,Does Gson or Jackson etc have any workaround for this case?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzcxNTI5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/253,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDM0NDk4MQ==,yasson,504344981,253,NA,siaspa,15030979,,,NA,2019-06-21T08:42:23Z,2019-06-21T08:42:23Z,"Maybe I should open a new issue, but my one is similar to this...

I have a Map<NOT_A_STRING, ?> and I would like to have a json like this:

```json
  ""items"": [
     ""item"" {
         ""key"": { ... },
        ""value"": { ... }
     },
     ""item"" {
         ""key"": { ... },
        ""value"": { ... }
     },
  ]
```

I tried to build a MapAdapter, but was only able to get the content of ""key"" and ""value"" as a string, using jsonb.toJson(e.getValue()...)

Then I tried to use serializers. In this case the @JsonbTypeSerializer can't be used because in the MapSerializer the default constructor is missing and a constructor with a builder is required. 

So I've added it to the configuration, it was a little bit complex because of the Builder requirement.

Unfortunately the MapSerializer is based on Map<String, ?> maps. So I've inherited from it and then I've overridden the serializeInternal method. I was not able to serialize the key and the value object, because a class cast exception was thrown. 

If it could be useful, I'll build a small project just to better clarify the point.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDM0NDk4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,yasson,425836732,255,CollectionSerializer only processes first entry,,,,,CLOSED,2019-03-27T09:02:07Z,2019-09-06T22:52:06Z,"Hello together,
I am currently struggling with deserializing a List using a custom deserializer for the generic type of the list. I think that I am missing something obvious but I can't get it to work and I didn't find any issue related to mine.
My simplified implementation:
```
@JsonbTypeDeserializer(ProxyDeserializer.class)
public interface User {
    // only getters (following Java naming convention)
}

public class ProxyDeserializer implements JsonbDeserializer<Object> {
    public Object deserialize(final JsonParser parser, final DeserializationContext ctx, final Type rtType) {
        final JsonObject value = ctx.deserialize(JsonObject.class, parser);
        final Proxy proxy = ... // Create a Java dynamic proxy for rtType (User.class) and the JsonObject
        return proxy;
    }
}
```
In my test I am executing a GET as followed:
```
ClientBuilder.newClient().target(url)
    .buildGet()
    .invoke(new GenericType<List<User>>() {
    });
```
But I only get a List with one entry. My deserializer is not called a second time.
I am using Yasson 1.0.3 in a Wildfly 14 container.

I appreciate any hint!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/255/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MzkzNzQ3Mw==,yasson,493937473,255,NA,notarmara,12168345,,,NA,2019-05-20T10:55:04Z,2019-05-20T10:55:04Z,"I have the same problem, have you solved it?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MzkzNzQ3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDAwOTg2OA==,yasson,494009868,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-20T14:25:05Z,2019-05-20T14:25:05Z,"What is the JSON input for this part:
`final JsonObject value = ctx.deserialize(JsonObject.class, parser);` ?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDAwOTg2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA1NDQ3Mg==,yasson,494054472,255,NA,notarmara,12168345,,,NA,2019-05-20T16:15:40Z,2019-05-20T16:15:40Z,"I can only talk about my case, that is a little bit different from the one that @cpoels reported. 
I think that to the custom deserializer is arriving the entire json, that is to say the entire array, not only the contained objects one a time. For this reason the deserializer is called just once. Probably we are wrong in configuring the jsonb object. 
this is my example, I have the following deserializer:

```
public class HistoryDeserializer implements JsonbDeserializer<History>{
@Override
public History deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
           JsonObject node = parser.getObject();
           History doc = new History();
           if (node.get(ID) != null) {
           doc.setUniqueId(node.getString(ID));
} 
...
```

in which History is a simple class, without generics or anything else.

I have extended the Jersey's AbstractMessageReaderWriterProvider 

```
@Override
public Object readFrom(Class<Object> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException {
               JsonbConfig config = new JsonbConfig().setProperty(JSONB_FAIL_ON_UNKNOWN_PROPERTIES, 
               true).withNullValues(true);
		Jsonb jsonb = JsonbBuilder.create(config);
		try {
			return jsonb.fromJson(entityStream, genericType);
		} catch (JsonbException e) {
			throw new ProcessingException(LocalizationMessages.ERROR_JSONB_DESERIALIZATION(), e);
		}
	}
```

in which the genericType is History[].class, I have checked it.
this is my test rest call:
```
@POST
	@Path(""/jsonArray"")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public History[] jsonArray(History[] array) {
		return array;
	}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA1NDQ3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDI4NDkyOA==,yasson,494284928,255,NA,notarmara,12168345,,,NA,2019-05-21T08:03:31Z,2019-05-21T08:03:31Z,"I just want to add that without a custom deserializer, I have no problems with arrays.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDI4NDkyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDI5OTY4OA==,yasson,494299688,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-21T08:46:57Z,2019-05-21T08:46:57Z,"@notarmara In your custom deserializer you are handling jsonp yourself, so it looks to be either: a bug on jsonp, or an incorrect json parsing. Without a sample JSON text (the input for JsonParser) it is hard to tell. Looking at `@Path(""/jsonArray"")` it looks that JSON text contains an array instead of an object as its root, shouldn't your deserializer call `JsonParser#getArray()` instead of `JsonParser#getObject()`?

As a side note, you are creating Jsonb inside `AbstractMessageReaderWriterProvider#readFrom` on every call, which will cause redundant reflection class scanning, slowing down request processing considerably. Jsonb instance should be cached and reused.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDI5OTY4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMwODAxNQ==,yasson,494308015,255,NA,notarmara,12168345,,,NA,2019-05-21T09:10:14Z,2019-05-21T09:10:14Z,"yes can be a bug of jsonp, I'm trying to understand where is the problem for this reason I involved you.
However the rest call I have reported is a sample, the deserializer is also called with a rest service that receive a single object, for this reason I cannot simply change from ```` JsonParser#getObject() ```` to ```` JsonParser#getArray()```` .
Moreover the code of the ```` AbstractMessageReaderWriterProvider#readFrom ```` is a sample too. I have omitted all the implementation reporting only the things that in my mind are useful to solve the problem, so in my full implementation the jsonb is a singleton.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMwODAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMxODYzNQ==,yasson,494318635,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-21T09:40:25Z,2019-05-21T09:40:25Z,It would be best to narrow down the problem to Yasson outside of Jersey context. Do you have a HTTP request log? Can you save the JSON feeded from parser and log it? ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMxODYzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMzMDk0NQ==,yasson,494330945,255,NA,notarmara,12168345,,,NA,2019-05-21T10:17:06Z,2019-05-21T10:17:06Z,"yes let's will try to go down in deep.
this is the rest call I'm doing

![image](https://user-images.githubusercontent.com/12168345/58086155-64673980-7bbe-11e9-95e8-095d58218b06.png)

this is the operations' sequence performed:
we receiving the START_ARRAY event into JsonbDeserializer#build():

![image](https://user-images.githubusercontent.com/12168345/58086813-a3e25580-7bbf-11e9-8379-de8447f3ab94.png)

![image](https://user-images.githubusercontent.com/12168345/58086904-cb392280-7bbf-11e9-8207-af1080eed8b2.png)

![image](https://user-images.githubusercontent.com/12168345/58086989-f6bc0d00-7bbf-11e9-839a-d77eef767e85.png)

Now my custom deserializer is loaded:

![image](https://user-images.githubusercontent.com/12168345/58087078-2408bb00-7bc0-11e9-89ab-dbee852713fe.png)

![image](https://user-images.githubusercontent.com/12168345/58087197-5d412b00-7bc0-11e9-8dcb-1488b19b24b3.png)

this is the result of parser.getObject():

![image](https://user-images.githubusercontent.com/12168345/58087343-aee9b580-7bc0-11e9-8e4d-23b543871ae0.png)

I have also tryied to perform parser.getArray() but received an error becouse the START_OBJECT event was called.

After that the parser.hasNext() is called but the call returns and an array of one element is created by the 
ObjectArrayDeserializer:

![image](https://user-images.githubusercontent.com/12168345/58087705-67175e00-7bc1-11e9-8261-a299289be7d3.png)

I hope I'm clear now. please tell me if you need more information.
Just one question: must I define in some way that the deserializer is valid both for array and for a single object?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMzMDk0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMzOTI4Nw==,yasson,494339287,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-21T10:43:39Z,2019-05-21T10:43:39Z,"I don't see any problem in provided screens, you have an JSON with an json array as root and one json object inside this array. You get it deserialized once as expected. What is missing?

Am I correct to say it would be the same as calling:
`jsonb.fromJson(""[{...}]"", History[].class);` ?

In your case 
```public class HistoryDeserializer implements JsonbDeserializer<History>```
is defined for History type. If there are more than one object entry in ""history"" json array it should be called multiple times (You need to feed this serializer with `JsonbConfig#withSerializers(...)`. 

If you want a deserializer for whole array instead of its member type you would define it as:
```
public class HistoryDeserializer implements JsonbDeserializer<List<<History>>
public class HistoryDeserializer implements JsonbDeserializer<History[]>
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDMzOTI4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDM0NDU1Nw==,yasson,494344557,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-21T11:02:54Z,2019-05-21T11:02:54Z,"Just tried following code on master branch and it works as expected:
```java
@Test
public void testDeserializeArray() {
    String json = ""[{\""stringProperty\"":\""Property 1 value\""},{\""stringProperty\"":\""Property 2 value\""}]"";      
   Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withDeserializers(new 
   SimplePojoDeserializer()));
   SimplePojo[] result = jsonb.fromJson(json, SimplePojo[].class);
   Assert.assertEquals(2, result.length);
}

public class SimplePojoDeserializer implements JsonbDeserializer<SimplePojo> {
    @Override
    public SimplePojo deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
        SimplePojo simplePojo = new SimplePojo();
        parser.next();
        parser.next();
        simplePojo.setStringProperty(parser.getString());
        return simplePojo;
    }
}

public class SimplePojo {
    private String stringProperty;

    public String getStringProperty() {
        return stringProperty;
    }

    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDM0NDU1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDM4MTgxOA==,yasson,494381818,255,NA,notarmara,12168345,,,NA,2019-05-21T13:03:15Z,2019-05-21T13:03:15Z,"I have tried your test and the deserializer is called 2 times, so I have rewritten your test using my deserializer and my pojo. the result of the test is the same, an array of 3 object and deserializer called just once.
I finally figure out the problem. the problem is related to the following instruction:
```` JsonObject node = parser.getObject(); ````
infact if you rewrite your deserializer in this way you will have the same problem:
```` 
@Test
	public void testDeserializeArray() {
		String json = ""[{\""stringProperty\"":\""Property 1 value\""},{\""stringProperty\"":\""Property 2 value\""}]"";
		Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withDeserializers(new SimplePojoDeserializer()));
		SimplePojo[] result = jsonb.fromJson(json, SimplePojo[].class);
		Assert.assertEquals(2, result.length);
	}
	
//	@Test
//	public void testDeserializeArray() {
//		String json = ""[{\""type\"":\""WORK_CONTRACT\"",\""uniqueId\"":\""2840\"",\""title\"":\""Prime\"",\""addDate\"":\""2018-12-11T15:15:40.862Z\"",\""additionalInfo\"":{},\""additionalIds\"":{}},{\""type\"":\""WORK_CONTRACT\"",\""uniqueId\"":\""2840\"",\""title\"":\""2840, Test_07122018_145404.370\"",\""addDate\"":\""2018-12-07T15:15:40.862Z\"",\""additionalInfo\"":{},\""additionalIds\"":{}}, {\""type\"":\""WORK_CONTRACT\"",\""uniqueId\"":\""2840\"",\""title\"":\""2840, Test_07122018\"",\""addDate\"":\""2018-12-07T15:17:40.862Z\"",\""additionalInfo\"":{},\""additionalIds\"":{}}]"";
//		Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withDeserializers(new HistoryDeserializer()));
//		History[] result = jsonb.fromJson(json, History[].class);
//		Assert.assertEquals(3, result.length);
//	}

	public class SimplePojoDeserializer implements JsonbDeserializer<SimplePojo> {
		@Override
		public SimplePojo deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
			JsonObject json = parser.getObject();
			SimplePojo simplePojo = new SimplePojo();
//			parser.next();
//			parser.next();
//			simplePojo.setStringProperty(parser.getString());
			simplePojo.setStringProperty(json.getString(""stringProperty""));
			return simplePojo;
		}
	}

	public class SimplePojo {
		private String stringProperty;

		public String getStringProperty() {
			return stringProperty;
		}

		public void setStringProperty(String stringProperty) {
			this.stringProperty = stringProperty;
		}
	} 
````
![image](https://user-images.githubusercontent.com/12168345/58103428-39dba780-7be3-11e9-9294-9930d10a305b.png)

Is there an alternative way to access to object data? Do I need to use parser.getString() as you have done in your example?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDM4MTgxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQzMDUxMA==,yasson,494430510,255,NA,notarmara,12168345,,,NA,2019-05-21T15:04:03Z,2019-05-21T15:04:03Z,"After debugging, I think that the problem is related to glassfish implementation of the JsonParser, so it isn't a yasson issue. Probably the @cpoels original issue is different from this, I have misunderstood becouse the effect was the same.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQzMDUxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQzNjE2NA==,yasson,494436164,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-21T15:17:43Z,2019-05-21T15:17:43Z,This https://github.com/eclipse-ee4j/jsonp is glassfish JsonParser impl (the only one). I will take a look at your example later.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQzNjE2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQ0MTk0OA==,yasson,494441948,255,NA,notarmara,12168345,,,NA,2019-05-21T15:31:53Z,2019-05-21T15:31:53Z,"yeah, what I want to say is that I think the problem is not inside the yasson but in jakarta.json lib as you suggested me previously. Ok, I will waiting for your feedback. Thank you","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQ0MTk0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQ1MTUxNA==,yasson,494451514,255,NA,notarmara,12168345,,,NA,2019-05-21T15:56:00Z,2019-05-21T15:56:00Z,"as you probably already know, the problem reported by @cpoels should be the same because the ```` JsonObjectDeserializer```` calls ```` parser.getObject()````","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDQ1MTUxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDg1MDY4MQ==,yasson,494850681,255,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-22T15:22:56Z,2019-05-22T15:22:56Z,"Thank you @notarmara, I now see the problem. Its not because of a bug in jsonp. `JsonParser#getObject` advances parser to the `JsonParser.Event.END_OBJECT`, which Yasson doesn't expect. I will try to fix this in Yasson.

You can also do:
```java
SimplePojo sp = ctx.deserialize(SimplePojo.class, parser);
//instead of
JsonObject obj = parser.getObject();
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDg1MDY4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/255,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTAzOTI4Ng==,yasson,529039286,255,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-06T22:52:06Z,2019-09-06T22:52:06Z,Closing this issue since @bravehorsie delivered the fix in #271 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTAzOTI4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/256,https://api.github.com/repos/eclipse-ee4j/yasson/issues/256,yasson,426414427,256,Error marshalling a Groovy object,siaspa,15030979,,,CLOSED,2019-03-28T10:28:31Z,2019-09-06T22:54:27Z,"This example tries to marshal a simple Groovy object, but it raises the following exception 

Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.internal.model.GetFromGetter can not access a member of class sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl with modifiers ""public final""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)

Maybe it's better to limit the reflection to symbols added in GroovyObject subclasses...in many cases it's what we expect to marshal.

```groovy
import javax.json.bind.Jsonb
import javax.json.bind.JsonbBuilder

class Square {
    Integer size = 10;
}

class GroovyYassonBugTest {

    static void main(String[] args) {
        Square square = new Square()

        Jsonb jsonb = JsonbBuilder.create()
        String jsonString = jsonb.toJson(square);
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/256/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/256,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEwNDM1OQ==,yasson,520104359,256,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-10T00:53:43Z,2019-08-10T00:53:43Z,"Hi @siaspa, thanks for raising this issue.

I tried to use your provided code to reproduce the issue, and I had to change `Square` so it was a public static inner class of the main class like this:
```java
import javax.json.bind.Jsonb
import javax.json.bind.JsonbBuilder

class GroovyYassonBugTest {

    public static class Square {
        Integer size = 10;
    }

    static void main(String[] args) {
        Square square = new Square()

        Jsonb jsonb = JsonbBuilder.create()
        String jsonString = jsonb.toJson(square);
    }
}
```

From here Yasson actually attempted to serialize the object, but ran into an infinite loop that resulted in either a StackOverflowException or an OOM.

After inspecting the resulting Groovy class I see that Groovy adds in a `public MetaClass getMetaClass()` method which seems to be the culprit for the infinite loop. I added a special case in PR #302 to automatically ignore this method and then the code worked for me.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEwNDM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/257,https://api.github.com/repos/eclipse-ee4j/yasson/issues/257,yasson,426446458,257,Invalid property value while unmarshalling: which property?,siaspa,15030979,,,CLOSED,2019-03-28T11:41:58Z,2019-06-06T08:33:07Z,"If a string is passed to an Integer value, an exception in raised but it's too generic.

javax.json.bind.JsonbException: Error deserialize JSON value into type: class java.lang.Integer.

I can't compile the project with Java 8, but I think that in the ObjectDeserializer method a try catch could wrap the deserializer.deserialize() call

```java
protected void deserializeNext(JsonParser parser, Unmarshaller context) 
//wrapping these calls in a try catch block and raising a JsonbException could be an option, because here parserContext.getLastKeyName() has the name of the property...

            Object result = deserializer.deserialize(parser, context, resolvedType);

```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/257/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/258,https://api.github.com/repos/eclipse-ee4j/yasson/issues/258,yasson,430164380,258,Order of kv-pairs wrong when using custom naming and @JsonbPropertyOrder,jesperdj,264564,Jesper de Jong,,CLOSED,2019-04-07T16:24:28Z,2019-09-06T22:53:19Z,"When you use a custom naming strategy, Yasson 1.0.3 does not handle @JsonbPropertyOrder correctly. According to the Javadoc of @JsonbPropertyOrder:

> Order in which properties are serialized. **Names must correspond to original names defined in Java class before any customization applied.**

But when I try this, it does not work: the order of the key-value pairs in JSON is different than what I specify with @JsonbPropertyOrder. To make it work, I must use the translated names instead of the original Java property names, which is against what the Javadoc documentation says.

I've found issue #23 but this does not seem to be fixed in Yasson 1.0.3.

See attached example project: [yasson-bug.zip](https://github.com/eclipse-ee4j/yasson/files/3051727/yasson-bug.zip)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/258/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/258,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYwNzE1OA==,yasson,480607158,258,NA,jesperdj,264564,Jesper de Jong,,NA,2019-04-07T16:29:50Z,2019-04-07T16:29:50Z,"Note: In the example I'm using my own implementation of interface PropertyNamingStrategy, not one of the pre-defined ones as in issue 23.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYwNzE1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/258,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjY3NjUwNw==,yasson,516676507,258,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-07-31T03:12:44Z,2019-07-31T03:12:44Z,thanks for reporting this one @jesperdj. @Verdent has proposed a fix which is now merged so this should be included in the next version of Yasson,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjY3NjUwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/259,https://api.github.com/repos/eclipse-ee4j/yasson/issues/259,yasson,431481838,259,Convert JsonObject to class object efficiently,mdzaebel,415392,Marc Dzaebel,,CLOSED,2019-04-10T12:42:41Z,2019-06-11T11:42:48Z,"A JsonObject can be transformed into it's corresponding class instance via:
`Dog dog=JsonbBuilder.create().fromJson(jsonObject.toString(), Dog.class)`

However, it seems to be inefficient to use _jsonObject_.**toString**() as a String is an other intermediate representation, that contains the same information. I need to transform the _jsonObject_ before the object binding. So is there a more efficient way to achieve the binding from a JsonObject?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/259/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/259,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzAxNDQ1NA==,yasson,483014454,259,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-04-14T16:44:50Z,2019-04-14T16:44:50Z,"Marc asked the same question on StackOverflow, where I've provided the current answer which is basically ""no"": https://stackoverflow.com/questions/55677292/convert-jsonobject-to-pojo-efficiently-with-json-b-1-0-e-g-yasson-java-ee-8

I think the best thing we can do to handle this use case is address it at the spec-level in https://github.com/eclipse-ee4j/jsonb-api/issues/111","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzAxNDQ1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/259,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzEyMDkxMQ==,yasson,483120911,259,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-04-15T06:15:20Z,2019-04-15T06:15:20Z,"Good point. The problem with including JSONP objects, is that Jsonb interfaces and Yasson internal classes are built on top of `JsonGenerator/JsonParser` (for example [JsonbSerializer](https://github.com/eclipse-ee4j/jsonb-api/blob/master/api/src/main/java/javax/json/bind/serializer/JsonbSerializer.java)). What comes to my mind is to implement JsonParser / JsonGenerator in Yasson, which input / output will be JsonStructure. Not sure if this is the best approach in terms of performance and design, but would definitely work.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzEyMDkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/259,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4Mzg3Nzk4Mg==,yasson,483877982,259,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-04-16T23:17:03Z,2019-04-16T23:17:03Z,Sounds quite reasonable.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4Mzg3Nzk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,yasson,432506509,260,Turn JsonbComponentInstanceCreator into a service provider interface,mkouba,913004,Martin Kouba,,CLOSED,2019-04-12T10:51:50Z,2019-06-10T12:55:51Z,"So that an integrator could provide a custom implementation of this interface. `JsonbComponentInstanceCreatorFactory` currently contains some reflection magic to detect the presence of a CDI container. In fact, the presence of the CDI API is enough.

I believe it would be reasonable to define this SPI. [Quarkus](https://github.com/quarkusio/quarkus) integration would definitely make use of it because our DI solution is compatible with CDI but we don't support all ""portable extensions related"" SPIs (they do not fit into our build time metadata processing approach) and so the invocation of  the `BeanManagerInstanceCreator#getOrCreateComponent()` fails.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzE1OTkzMA==,yasson,487159930,260,NA,gsmet,1279749,Guillaume Smet,guillaume.smet@gmail.com,NA,2019-04-26T18:39:42Z,2019-04-26T18:39:42Z,Any thought on this? This is rather blocking for the Yasson Quarkus integration and we have quite a few users asking for it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzE1OTkzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzIyNDM3Mg==,yasson,487224372,260,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-04-26T22:48:35Z,2019-04-26T22:48:35Z,Can you elaborate on what needs to happen in order to turn this into an SPI? Are you asking that we make a `META-INF/service/` entry for this?  Or perhaps just moving it out of the Yasson `.internal` package so it is exported by our JPMS module?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzIyNDM3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzUxNTMwMA==,yasson,487515300,260,NA,mkouba,913004,Martin Kouba,,NA,2019-04-29T09:32:00Z,2019-04-29T09:32:00Z,"Just use the `ServiceLoader` to obtain the `JsonbComponentInstanceCreator` instance so that an integrator could provide its own implementation. The logic from `JsonbComponentInstanceCreatorFactory` should be extracted to a default impl (e.g. `DefaultJsonbComponentInstanceCreator`) and either moved to a separate artifact with `META-INF/service` config, or alternatively `JsonbComponentInstanceCreator` could define a priority (e.g. `default int getPriority() { return 1; }`) and the instance with the highest priority is used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzUxNTMwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4Nzc0MTgwNw==,yasson,487741807,260,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-04-29T20:59:50Z,2019-04-29T20:59:50Z,Sounds like a reasonable change -- do you have cycles to propose a PR?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4Nzc0MTgwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzgzODQyNQ==,yasson,487838425,260,NA,mkouba,913004,Martin Kouba,,NA,2019-04-30T06:52:57Z,2019-04-30T06:52:57Z,"Yes, I'll try to prepare something.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NzgzODQyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4ODQzMzcwNg==,yasson,488433706,260,NA,geoand,4374975,Georgios Andrianakis,,NA,2019-05-01T21:20:14Z,2019-05-01T21:20:14Z,"I can work on this next week when I am back if you haven't had time to do
it until the @mkouba

On Tue, Apr 30, 2019, 08:52 Martin Kouba <notifications@github.com> wrote:

> Yes, I'll try to prepare something.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse-ee4j/yasson/issues/260#issuecomment-487838425>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABBMDP4C6NJXITTYZE7RSWTPS7UEVANCNFSM4HFPOECA>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4ODQzMzcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTc5NjAxNQ==,yasson,491796015,260,NA,gsmet,1279749,Guillaume Smet,guillaume.smet@gmail.com,NA,2019-05-13T12:08:24Z,2019-05-13T12:08:24Z,"@bravehorsie @aguibert is the next release already scheduled? Asking that so that we don't miss it and do the appropriate work in Quarkus as soon as it is released.

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTc5NjAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MjE2OTI4NQ==,yasson,492169285,260,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-05-14T09:51:11Z,2019-05-14T09:51:11Z,@gsmet @aguibert Lets review current PRs and do the release.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MjE2OTI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MjIyMjcwNQ==,yasson,492222705,260,NA,masini,2060870,Luca Masini,,NA,2019-05-14T12:47:57Z,2019-05-14T12:47:57Z,"Thank you for fixing this issue, is a blocking one for our porting to JSONB.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MjIyMjcwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzY3OTk0Nw==,yasson,497679947,260,NA,gsmet,1279749,Guillaume Smet,guillaume.smet@gmail.com,NA,2019-05-31T11:44:47Z,2019-05-31T11:44:47Z,"@bravehorsie @aguibert any news on the release front?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzY3OTk0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzkwMjIyNw==,yasson,497902227,260,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-01T01:39:49Z,2019-06-01T01:39:49Z,@bravehorsie I added a code review to #262 (your big JSON-P interop PR) and I think we should merge it and then we should be good to cut a new release.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzkwMjIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDM2MDkxMQ==,yasson,500360911,260,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-06-10T09:57:47Z,2019-06-10T09:57:47Z,"Yasson 1.0.4 has been released to central, which includes the fix.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDM2MDkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/260,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDQwNjA1MQ==,yasson,500406051,260,NA,gsmet,1279749,Guillaume Smet,guillaume.smet@gmail.com,NA,2019-06-10T12:55:51Z,2019-06-10T12:55:51Z,Thanks @bravehorsie !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDQwNjA1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/263,https://api.github.com/repos/eclipse-ee4j/yasson/issues/263,yasson,440879585,263,Optional.empty() as root object cannot be serialized or deserialized,pdudits,1588543,Patrik Duditš,github@dudits.net,CLOSED,2019-05-06T20:46:28Z,2019-10-15T14:38:17Z,"Following two testcases (added to `OptionalTest`) fail:

````
    @Test
    public void testMarshallEmptyRoot() {
        final Jsonb jsonb = (new JsonBindingBuilder()).build();
        assertEquals(""null"", jsonb.toJson(Optional.empty()));
    }

    @Test
    public void testUnmarshallEmptyRoot() {
        final Jsonb jsonb = (new JsonBindingBuilder()).build();
        assertEquals(Optional.empty(), jsonb.fromJson(""null"", new TestTypeToken<Optional<Customer>>() {}.getType()));
    }
````
````
[ERROR] testMarshallEmptyRoot(org.eclipse.yasson.defaultmapping.specific.OptionalTest)  Time elapsed: 0.008 s  <<< ERROR!
javax.json.bind.JsonbException: Internal error: null
        at org.eclipse.yasson/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:81)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:101)
        at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:98)
        at org.eclipse.yasson/org.eclipse.yasson.defaultmapping.specific.OptionalTest.testMarshallEmptyRoot(OptionalTest.java:172)
        ...
Caused by: java.lang.NullPointerException
        at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.OptionalObjectSerializer.serialize(OptionalObjectSerializer.java:82)
        at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.OptionalObjectSerializer.serialize(OptionalObjectSerializer.java:34)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:143)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:75)
        ... 28 more


javax.json.bind.JsonbException: Error deserialize JSON value into type: class org.eclipse.yasson.defaultmapping.specific.OptionalTest$Customer.
        at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.DeserializerBuilder.build(DeserializerBuilder.java:130)
        at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.OptionalObjectDeserializer.deserialize(OptionalObjectDeserializer.java:35)
        at org.eclipse.yasson/org.eclipse.yasson.internal.serializer.OptionalObjectDeserializer.deserialize(OptionalObjectDeserializer.java:19)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:70)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:56)
        at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
        at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:59)
        at org.eclipse.yasson/org.eclipse.yasson.defaultmapping.specific.OptionalTest.testUnmarshallEmptyRoot(OptionalTest.java:178)
````

I see that spec avoids describing mapping of empty optionals except for object properties, but this creates quite uncomfortable asymetry when non-emty ones serialize without issues.

I will provide a PR for these cases.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/263/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/263,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MjE5MjQxMw==,yasson,542192413,263,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-10-15T12:43:26Z,2019-10-15T12:43:26Z,"Hi @pdudits , could you please update NullSerializer and NullDeserializer and replace GPL license header with EPL license header? Otherwise we will be forced to revert this PR due to copyright incompatibility.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MjE5MjQxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/263,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MjIyOTg0Ng==,yasson,542229846,263,NA,pdudits,1588543,Patrik Duditš,github@dudits.net,NA,2019-10-15T14:06:26Z,2019-10-15T14:06:26Z,"Sure, there you go.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MjIyOTg0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/265,https://api.github.com/repos/eclipse-ee4j/yasson/issues/265,yasson,442197514,265,null is not deserialized,pdudits,1588543,Patrik Duditš,github@dudits.net,CLOSED,2019-05-09T11:53:45Z,2019-05-29T11:36:24Z,"Passing `""null""` as input to `Jsonb.fromJson(String, T)` throws 
````
javax.json.bind.JsonbException: Internal error: Can't infer deserialization type type: VALUE_NULL
        at org.eclipse.yasson/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:76)
        at org.eclipse.yasson/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:56)
        at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:45)
        at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:52)
````
Reproducible via:
````
    @Test
    public void testDeserializeNull() {
        Jsonb jsonb = (new JsonBindingBuilder()).build();
        assertNull(jsonb.fromJson(""null"", Object.class));
    }
````

This is (unfortunately) only case where spec defines what to do with null input, in section 3.6:

> For  ... deserialization operation, ... where output type is specified as Object.class, implementations MUST deserialize a JSON document using Java runtime types specified in table below:  ... `null` : `null`.
 
I'd provide a PR with more generic solution to handle `null` for any specified type (except for optional types handled in my previous PR).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,yasson,443726356,266,Using LinkedHashMap to preserve attribute order,fhm84,4021301,Fabian Halbmann,,OPEN,2019-05-14T06:07:46Z,2020-10-20T13:59:38Z,"When using a generic approach in our Java model (-> maps), we'd like to preserve the attribute order ""as is"". So it would be great to configure whether to not order attributes or preserve the given order (perhaps only when using collections/maps).
What do you think about using LikedHashMap as default implementation when PropertyOrderStrategy is set to ANY?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/266/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNzc3MTQ5Nw==,yasson,517771497,266,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-02T16:51:07Z,2019-08-02T16:51:07Z,"hi @fhm84 thanks for raising this issue. When you say ""preserve attribute order"" I assume you mean preserving the order that fields/methods were defined in the source file?

If that is what you mean, it's not currently possible to guarantee such an ordering, because the JDK does not provide an API to obtain fields/methods in a way that matches the source ordering.

> What do you think about using LikedHashMap as default implementation when PropertyOrderStrategy is set to ANY?

I don't think this would be right, because typically when users specify `ANY` ordering they don't care about ordering at all, and usually we see this option specified when people want to maximize performance. Currently we use HashMap which is very efficient for put/get operations, and switching this to LinkedHashMap would be much slower.

However, we could consider making a new PropertyOrderStrategy (perhaps called `SOURCE`) which would make a _best effort_ to order properties in the source ordering, but ultimately would depend on the behavior of the JDK reflection APIs which do not guarantee ordering.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNzc3MTQ5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNzc4MDA3MA==,yasson,517780070,266,NA,fhm84,4021301,Fabian Halbmann,,NA,2019-08-02T17:17:49Z,2019-08-02T17:17:49Z,"Hi @aguibert thanks for the response.
When I say ""preserve attribute order"" I mean when e.g. reading a json file and mapping it to its corresponding java model the file should look the same if I write this data back to a file again. Currently we use json files for configuring our system where sometimes the ordering of some properties matters. But here we cannot implement a custom naming strategy for ordering, except of introducing additional fields only for this purpose, because the data model is a generic one.
In the past we used Jackson as json mapper and in the beginning they had the same issues. But we decided to use ""the standard"" apis.

I know that looking on performance a HashMap is much more efficient. So your idea to add a new PropertyOrderStrategy sounds very good. 
As you can see my issue is not to preserve attribute order of the source file(s) (I know the jdk does not guarantee the attribute/method ordering) but preserve the order when reading from a file.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNzc4MDA3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODA1OTczNA==,yasson,518059734,266,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T02:03:04Z,2019-08-05T02:03:04Z,"> Currently we use json files for configuring our system where sometimes the ordering of some properties matters. 

If property order matters, then perhaps your data model should reflect this? For example, an array could be used instead of a set which does preserver ordering.

> As you can see my issue is not to preserve attribute order of the source file(s) (I know the jdk does not guarantee the attribute/method ordering) but preserve the order when reading from a file.

So essentially if you go `JSON --> POJO --> JSON` you want the input JSON to be equal to the resulting JSON? This should be the case already because the [default PropertyOrderStrategy defined by the spec](http://json-b.net/docs/user-guide.html#properties-order) is A-Z ordering. Is this not what you are observing?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODA1OTczNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTQ1NzQ3NA==,yasson,565457474,266,NA,nimo23,3045549,,,NA,2019-12-13T14:19:51Z,2019-12-13T14:19:51Z,">Currently we use HashMap which is very efficient for put/get operations, and switching this to LinkedHashMap would be much slower.

1. Does this mean that `PropertyOrderStrategy.ANY`, the ordering for each (de)serializing of the same object is arbitrarily?


> `PropertyOrderStrategy.SOURCE` **cannot be made without reflection**

2. Maybe yes, with the `Java MethodHandles API` such reflection is not needed, or?


3. Btw, does Yasson also need reflection api if I use something like this?:

```
@JsonbNillable(value = true)
@JsonbVisibility(value = PrivatePropsVisible.class)
// reflection api needed?
@JsonbPropertyOrder(value = {
""firstProp"",
""secondProp"",
""thirdProp""
})
public class Task {
    private int firstProp;
    private int secondProp;
    private int thirdProp;
}
```

Maybe Yasson can use `Java MethodHandles API` instead of `Java Reflection` to avoid performance drawbacks. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTQ1NzQ3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/266,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMjgwMjY2NA==,yasson,712802664,266,NA,OrangeDog,675056,James Howe,,NA,2020-10-20T12:07:00Z,2020-10-20T12:07:00Z,"> So essentially if you go `JSON --> POJO --> JSON` you want the input JSON to be equal to the resulting JSON? This should be the case already because the default PropertyOrderStrategy defined by the spec is A-Z ordering. Is this not what you are observing?

That's not what this is asking for, and is also not correct. The input will only equal the output if the input was in alphabetical order.

What this issue is asking for is when doing `JSON -> Map<String, Object> -> JSON`, that there should be an option for a `LinkedHashMap` to be used, and the ordering preserved.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMjgwMjY2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/269,https://api.github.com/repos/eclipse-ee4j/yasson/issues/269,yasson,453056867,269,Remove number stringification.,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,CLOSED,2019-06-06T14:16:50Z,2019-06-10T13:17:27Z,"There is a feauture in Yasson that check number values and tries to figure out if the values does ""fit"" IEEE754 double precision range or not. Based on the result the number is written either as JSON string or JSON integer. This proves to be a wrong approach causing to break any schema and making documentation of REST APIs tricky.

For now this feauture should be removed, after https://github.com/eclipse-ee4j/jsonp/pull/176 is accepted and released, Yasson should support similar parameter configuration to pass it to jsonp, which in turn would know how to handle these types properly.

[1] https://github.com/eclipse-ee4j/jsonb-api/issues/112
[2] https://github.com/eclipse-ee4j/jsonp/issues/160
[3] https://github.com/cyberphone/I-JSON-Number-System#java-json-b","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/269/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/272,https://api.github.com/repos/eclipse-ee4j/yasson/issues/272,yasson,457891881,272,"Deserialization of EnumSet fails with ""No default constructor found""",StaffanHorke,51987232,Staffan Hörke,,CLOSED,2019-06-19T09:03:07Z,2019-09-06T22:52:59Z,"Deserialization of an EnumSet property fails with the exception ""Can't create instance of a class: class java.util.EnumSet, No default constructor found"".

This test fails:
```
  public class EnumSetTest {

    public enum MyEnum {
        VALUE1, VALUE2
    }

    public static class Dummy {
        public EnumSet<MyEnum> myEnums;
    }

    @Test
    public void testEnumSet() {
        assertEquals(EnumSet.of(MyEnum.VALUE1), JsonbBuilder.create()
                .fromJson(""{\""myEnums\"": [\""VALUE1\""]}"", Dummy.class).myEnums);
    }

  }
```

For illustration, testing for EnumSet and creating an empty EnumSet of collectionValueType in org.eclipse.yasson.internal.serializer.CollectionDeserializer#createInstance will make the test pass:

```
    @SuppressWarnings(""unchecked"")
    private T createInstance(DeserializerBuilder builder) {
        Class<T> rawType = (Class<T>) ReflectionUtils
                .getRawType(getRuntimeType());

        if (rawType.isInterface()) {
            final T x = createInterfaceInstance(rawType);
            if (x != null)
                return x;
        } else if (EnumSet.class.isAssignableFrom(rawType)) {
            return (T) EnumSet.noneOf((Class<Enum>) collectionValueType);
        }
        return builder.getJsonbContext().getInstanceCreator()
                .createInstance(rawType);
    }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/272/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,yasson,459479435,273,generic bound not found for type M declared in class,gjsbe,26633549,,,CLOSED,2019-06-22T14:30:19Z,2019-08-08T14:52:43Z,"Hi,
for many time I correctly developed a java ee ear that runs on wildfly 13, that use yasson-1.0.1.
Inside I use jackson for serializing my java beans to JSON.
These java beans uses generics type, on wildfly 13 everything works perfectly.

```
public class JsonModelResult\<M\> extends JsonResult {
	private String jsonKey;
	private M model;

	public String getJsonKey() {
		return jsonKey;
	}

	public void setJsonKey(String jsonKey) {
		this.jsonKey = jsonKey;
	}		
	
	public M getModel() {
		return model;
	}

	public void setModel(M model) {
		this.model = model;
	}
}
```

Now I am making tests to migrate to wildfly 17, it use yasson-1.0.3.
The same code doesn't work more, on the log i see these message:

WARNING [org.eclipse.yasson.internal.ReflectionUtils] (default task-1) Generic bound not found for type M declared in class JsonModelResult.

If I substitute yasson-1.0.3 with yasson-1.0.1 to wildfly 17 everything works.
I'm going crazy, I didn't understand what changed from 1.0.1 to 1.0.3.
Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/273/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4MTI4Ng==,yasson,504681286,273,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-06-22T16:50:37Z,2019-06-22T16:50:37Z,"hi @gjsbe, in order for this issue to be investigated, can you please update with more detailed information such as:
 - the `JsonResult` class that `JsonModelResult<M>` is extending
 - The full stack trace of the error you are seeing
 - Is this error happening on serialization (Java Object -> JSON) or on deserialization (JSON -> Java Object)?

Also, if you are able to extract out the code to reproduce this issue in a standalone test case that would be the best option.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4MTI4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4NjAzNg==,yasson,504686036,273,NA,gjsbe,26633549,,,NA,2019-06-22T17:55:59Z,2019-06-22T17:55:59Z,"Hi, 
wildfly doesn't show any error, In log I see only the warning:
""generic bound not found for type M declared in class JsonModelResult""
Here's JsonResult class:

```
@Dependent
@JsonRes(content = JsonContent.Result)
public class JsonResult {		
    private Boolean result;
	private List<JsonFieldError> fieldErrors;
    private List<JsonErrorMessage> errorMessages;
	private List<String> infoMessages;	

    public Boolean getResult() {
        return result;
    }

    public void setResult(Boolean result) {
        this.result = result;
    }

	public List<JsonErrorMessage> getErrorMessages() {
		return errorMessages;
	}

	public void setErrorMessages(List<JsonErrorMessage> errorMessages) {
		this.errorMessages = errorMessages;
	}

	public List<JsonFieldError> getFieldErrors() {
		return fieldErrors;
	}

	public void setFieldErrors(List<JsonFieldError> fieldErrors) {
		this.fieldErrors = fieldErrors;
	}

	public List<String> getInfoMessages() {
		return infoMessages;
	}
	
    public void setInfoMessages(List<String> infoMessages) {
		this.infoMessages = infoMessages;
	}    
    
	public void addFieldError(JsonFieldError fieldError) {
		
		if(fieldErrors == null) {
			fieldErrors = new ArrayList<>(1);			
		}
		
		fieldErrors.add(fieldError);
	}
	
	public void addErrorMessage(JsonErrorMessage errorMessage) {
		
		if(errorMessages == null) {
			errorMessages = new ArrayList<>(1);			
		}
		
		errorMessages.add(errorMessage);
	}
	
	public void addInfoMessage(String infoMessage) {
		
		if(infoMessages == null) {
			infoMessages = new ArrayList<>(1);			
		}
		
		infoMessages.add(infoMessage);
	}
}

```
And this is JsonModelResult:

```
@Dependent
@JsonRes(content = JsonContent.Model)
public class JsonModelResult<M> extends JsonResult {
	private String jsonKey;
	private M model;

	public String getJsonKey() {
		return jsonKey;
	}

	public void setJsonKey(String jsonKey) {
		this.jsonKey = jsonKey;
	}		
	
	public M getModel() {
		return model;
	}

	public void setModel(M model) {
		this.model = model;
	}
}

```
I paste also a portion of the code of the method that gives that warning:

```
@Path(""/path"")
@RequestScoped
public class MyWs {
       
        @Inject
        MyEjb ejb;

        @GET
        @Path(""/{id: [0-9]*}"")
        @Produces(MediaType.APPLICATION_JSON)
        public JsonModelResult<Bean> getDet(int id) throws Exception {
              JsonModelResult<Bean> bean = ejb.getDet(id);
              return bean;
        }
}

```

And finally

```
@Provider
public class JsonProvider implements ContextResolver<ObjectMapper> {
      private final ObjectMapper mapper = new ObjectMapper();

      public ObjectMapper getContext(Class<?> type) {
                mapper.registerModule(new JsonModule());
                return mapper;
       }

       private class JsonModule extends SimpleModule {

                public JsonModule() {
                        super();
                        this.addSerializer(JsonModelResult.class, new JsonModelSerializer());
                }
        }

         private class JsonModelSerializer extends JsonSerializer<JsonModelResult> {

               public void serialize(
                        JsonModelResult model, JsonGenerator generator, SerializerProvider provider
                ) throws IOException, JsonProcessingException {
                        // this method is no more reached and wildfly process everything to json without passing from here.
                }
         }
}

```

I made many tests today on wildfly 17, for many hours I searched for the bug inside jackson (a mine bug), but when I changed yasson to previous version, and everything restarted working correctly, I opened here the issue.
But I am not sure the code is scalable and complicated, maybe it's a mine problem anyway.
Thank you very much
Regards","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4NjAzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4NjI4MQ==,yasson,504686281,273,NA,gjsbe,26633549,,,NA,2019-06-22T17:59:04Z,2019-06-22T17:59:04Z,"I have another possible scenario, if the new version of yasson is more strict, I made some error inside CDI and with the new version the error comes out.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDY4NjI4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTM2NTI5OQ==,yasson,505365299,273,NA,gjsbe,26633549,,,NA,2019-06-25T09:29:57Z,2019-06-25T09:29:57Z,"Hi,
today I'm trying again to find a workaround or a solution to the problem.
The problem is inside ReflectionUtils.java:

```
if (item == null) {
            //Bound not found, treat it as an Object.class
            logger.warning(Messages.getMessage(MessageKeys.GENERIC_BOUND_NOT_FOUND, typeVariable, typeVariable.getGenericDeclaration()));
            return Object.class;
 }
```
The strange thing is that it returns Object.class and should go on, but the method (jackson related) serialize inside JsonModelSerializer is never called and yasson serialize the entire object without my customization.
Based on the fact that If I load inside wildfly 17 the previous version of yasson (1.0.1) it works like in wildfly 13, it's like Jackson calls some method inside yasson library and is no more able to call custom serializer because it doesn't find a valid mapping.
I tried also using 

this.addSerializer(JsonResult.class, new JsonResultSerializer());

and 

```
private class JsonResultSerializer extends JsonSerializer<JsonResult> {

public void serialize(
	JsonResult model, JsonGenerator generator, SerializerProvider provider
) throws IOException, JsonProcessingException {
        ///code
}
```
but anything change, I don't see any difference.
Thank you very much
Regards","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTM2NTI5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk3OTI5MA==,yasson,506979290,273,NA,gjsbe,26633549,,,NA,2019-06-29T18:52:07Z,2019-06-29T18:52:07Z,"Is not a bug, today I understood the problem. 
Sorry.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk3OTI5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTAxMTQyNA==,yasson,519011424,273,NA,flinthart,39034520,,,NA,2019-08-07T09:07:02Z,2019-08-07T09:07:02Z,"Hi gjsbe - can you let me know what you found?  I'm having a similar issue...
Thank you","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTAxMTQyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTA0MDMyNg==,yasson,519040326,273,NA,gjsbe,26633549,,,NA,2019-08-07T10:32:45Z,2019-08-07T10:32:45Z,"Hi,
the answer is not yasson related, I use yasson in wildfly environment as module.
The problem was after migrate an ear from wildfly 13 to wildfly 17.
The answer is that wildfly 13 use jackson, wildfly 17 comes with java ee 8 and use json-b embedded module.
This was my error, it was a mine error, not yasson related.
Bye","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTA0MDMyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/273,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTU1MzEwNA==,yasson,519553104,273,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-08T14:52:43Z,2019-08-08T14:52:43Z,"hi @flinthart, feel free to open a separate issue and we can look at it there","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTU1MzEwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/275,https://api.github.com/repos/eclipse-ee4j/yasson/issues/275,yasson,459950042,275,Inheriting from class with package level modifier leads to IllegalAccessException,misl,2040396,Minto,,CLOSED,2019-06-24T15:13:59Z,2019-09-06T22:52:23Z,"The following simple example:
``` java
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;

public class InheritanceExample {

  static class Parent {
    public int id;
  }

  public static class Child extends Parent {
    public String name;
  }

  public static void main( String[] args ) {
    Child child = new Child();
    child.id =1;
    child.name = ""name"";

    Jsonb jsonb = JsonbBuilder.create();
    System.out.println( jsonb.toJson( child ) );
  }
}
```
Leads to the following error:

```
Exception in thread ""main"" javax.json.bind.JsonbException: Error getting value on: InheritanceExample$Child@27efef64
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:36)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:73)
	at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:285)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:80)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:148)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:102)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:118)
	at InheritanceExample.main(InheritanceExample.java:20)
Caused by: java.lang.IllegalAccessException: Class org.eclipse.yasson.internal.model.GetFromField can not access a member of class InheritanceExample$Parent with modifiers ""public""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Field.get(Field.java:390)
	at org.eclipse.yasson.internal.model.GetFromField.internalGetValue(GetFromField.java:26)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	... 10 more
```
Making the `Parent` class public makes this simple example work. However in some cases you might not be able or might not want to make inherited classes visible (public) from the outside. 

Should yasson also work for invisible parent classes?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/275/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/276,https://api.github.com/repos/eclipse-ee4j/yasson/issues/276,yasson,460000233,276,Can not cope with Optional.empty() arguments in @JsonbCreator method/constructor,misl,2040396,Minto,,OPEN,2019-06-24T17:05:30Z,2023-07-10T08:58:25Z,"Just like in  #237, I also like to stick to immutable pojos. However I tried a different approach using `Optional<>` fields. In comparisons [like this on](https://developer.ibm.com/articles/j-javaee8-json-binding-4/) with other Json serialization frameworks (Jackson and/or Gson) it is stated that JSON-B has improved handling of `Optional<>` fields. 

However the examples mostly show only serialization works. How about deserialization optional fields. Especially when using immutable pojos. In the following example I used a contructor with `Optional<>` arguments:
``` java
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.annotation.JsonbCreator;
import javax.json.bind.annotation.JsonbProperty;
import java.util.Optional;

public class OptionalInConstructor {

  public static class MyModel {
    private final String mandatory;
    private final Optional<String> optional;

    @JsonbCreator
    public MyModel( @JsonbProperty(""mandatory"") String mandatory, @JsonbProperty(""optional"") Optional<String> optional ) {
      this.mandatory = mandatory;
      this.optional = optional;
    }

    @JsonbProperty(""mandatory"")
    public String getMandatory() {
      return mandatory;
    }

    @JsonbProperty(""optional"")
    public Optional<String> getOptional() {
      return optional;
    }
  }

  public static void main( String[] args ) {
    MyModel model = new MyModel( ""mandatory"", Optional.empty() );

    // From Object -->Json
    Jsonb jsonb = JsonbBuilder.create();
    String serializedModel = jsonb.toJson( model );
    System.out.println( ""Json: "" + serializedModel );

    // From Json --> Object
    MyModel deserialized = jsonb.fromJson( serializedModel, MyModel.class );
  }
}
```
Unfortunately this lead to the following error:
```
Json: {""mandatory"":""mandatory""}
Jun 24, 2019 11:29:14 PM org.eclipse.yasson.internal.Unmarshaller deserializeItem
SEVERE: JsonbCreator parameter optional is missing in json document.
Exception in thread ""main"" javax.json.bind.JsonbException: JsonbCreator parameter optional is missing in json document.
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.createInstance(ObjectDeserializer.java:120)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.getInstance(ObjectDeserializer.java:93)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:61)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:70)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:53)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:60)
	at OptionalInConstructor.main(OptionalInConstructor.java:39)
```
When the `Optional<>` argument is present it works correctly. 

Should this be possible? Or is there another way (without making my pojo mutable) to achieve this?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/276/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/276,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEXXr,yasson,1628534251,276,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T08:58:25Z,2023-07-10T08:58:25Z,"It seems the given example code is working on master, printing out deserialized.getOptional() correctly prints Optional.empty","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEXXr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,yasson,462573591,279,[De]Serialize polymorphic objects,mdzaebel,415392,Marc Dzaebel,,OPEN,2019-07-01T08:09:33Z,2020-03-28T18:32:03Z,"[Dmitry](https://stackoverflow.com/questions/46050845/how-to-deserialize-an-interface-with-json-b) once explained, how to [de]serialize objects into their runtime classes. However, his solution is not valid, as Yasson signals a recursive reference, which is intended/correct behavior. So the question remains, how to realize this usecase, that might occur many times in real applications. Jackson has 3 strategies for this but how could this be done with standard JSON-B, or if not, how can this be done with Yasson specific classes like ObjectSerializer? My question on [SO](https://stackoverflow.com/questions/56804466/generic-polymorphic-jsonbserializer-with-json-b) unfortunately is not answered. There is a [commit](https://github.com/eclipse-ee4j/yasson/pull/64/commits/be04708edd4210add0abaf83563de7493c2f0175) from Roman that handles [Interface to impl mapping](https://github.com/eclipse-ee4j/yasson/pull/64/commits/be04708edd4210add0abaf83563de7493c2f0175) request, so may be there are already some oppotunities?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzI1OTMyMA==,yasson,507259320,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-01T13:14:34Z,2019-07-01T13:14:34Z,There is a similar question in https://github.com/eclipse-ee4j/yasson/issues/133. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzI1OTMyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzY3MTUyNg==,yasson,507671526,279,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-07-02T13:14:51Z,2019-07-02T13:14:51Z,"Yes, I've seen on Stack Overflow that it doesn't work anymore. It used to work at the time I posted this sample. I guess I used older Yasson version and in the newest something's changed and it stopped working. We will investigate what's happened. Thanks for reporting!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzY3MTUyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzk2NTgwMg==,yasson,507965802,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-03T06:55:37Z,2019-07-03T06:55:37Z,Good news! [Romain Manni-Bucau](https://github.com/eclipse-ee4j/jsonb-api/issues/147) already pointed me to [Polymorphic.java](https://github.com/apache/johnzon/blob/master/johnzon-json-extras/src/main/java/org/apache/johnzon/jsonb/extras/polymorphism/Polymorphic.java) which answers a lot (but I have to analyse it further).,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzk2NTgwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODAwODUyMQ==,yasson,508008521,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-03T09:05:14Z,2019-07-03T09:05:14Z,"Romains code is like yours. E.g.
```
public void serialize(Dog obj, JsonGenerator generator, SerializationContext ctx) {
        ctx.serialize(new Wrapper(obj.getClass().getName(), obj), generator); // shortened
}
```
This unfortuately also leads to ""_Recursive reference has been found in class_ ..."", but isn't this correct?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUwODAwODUyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDc4MTU4Mw==,yasson,510781583,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-07-12T07:32:26Z,2019-07-12T07:32:26Z,"@mdzaebel What happens here is that after calling:
```java
ctx.serialize(new Wrapper(obj.getClass().getName(), obj), generator);
```
Yasson founds another instance of ""Dog"" inside ""Wrapper"" and calls your serializer to serialize it, which in turn will call again the above statement so you will end up with StackOverflowException if the _""Recursive reference has been found in class ...""_ is not thrown by Yasson.

There are few solutions to get around it:
 - Update Yasson to remember which serializer classes are currently in callstack and not call them again for same instance objects. (Not sure of what sideeffects it may have)
- Map your ""Wrapper"" to ""javax.json.JsonObject"" before passing to ctx.serialize
- starting from Yasson 1.0.3 you should be able to do following in your serializer:
```java
final org.eclipse.yasson.YassonJsonb jsonb = (YassonJsonb) JsonbBuilder.create();

public void serialize(Dog obj, JsonGenerator generator, SerializationContext ctx) {
       //call Jsonb without registered serializer on current javax.json.stream.JsonGenerator
       jsonb.toJson(new Wrapper(obj.getClass().getName(), obj), generator));
       //JsonGenerator is not closed by inner Jsonb runtime in this case 
       //so current runtime should be able to continue write to it.
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDc4MTU4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTU1NzcxNg==,yasson,511557716,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-15T20:30:00Z,2019-07-15T20:30:00Z,"Roman, thanks for all options! I used the third one, which works great!
Does such an easy method also exist for adding a type attribute directly, without the wrapper? I was able to achieve this by overwriting Yassons Object[De]Serializer but would need a portable solution. However, due to your explanation, anyone who needs polymorphic support with Yasson, can now achieve it easily. As there's not much literature on JSON-B, such answers are quite valuable.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTU1NzcxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzQ4NTM3MQ==,yasson,513485371,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-07-20T17:29:50Z,2019-07-20T17:29:50Z,"> Does such an easy method also exist for adding a type attribute directly, without the wrapper?

Not sure what do you mean, you can pass any type to the runtime. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzQ4NTM3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzUzNjkyOA==,yasson,513536928,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-21T09:05:50Z,2019-07-21T09:05:50Z,"Just in order to reduce JSON depth for network traffic and readability, instead of wrapper serialization
```
{""@class"": ""org.any.Test"",
 ""object"": {""name"": ""Roman Grigoriadi""}
}
```
I'd like
```
{""@class"": ""org.any.Test"",
 ""name"": ""Roman Grigoriadi""}
}
```
E.g. in [Jackson](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization) this would be achieved by:
```
@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=""@class"")
 class Animal { } 
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzUzNjkyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzg4ODg2Mg==,yasson,513888862,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-07-22T17:57:12Z,2019-07-22T17:57:12Z,There is no out of the box support in Yasson for it. You may of course do it manually in your serializer iterating inner properties and passing them to the runtime serialization.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMzg4ODg2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDIwNzU4Mg==,yasson,514207582,279,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-07-23T13:22:54Z,2019-07-23T13:22:54Z,I have made a summary in [#147](https://github.com/eclipse-ee4j/jsonb-api/issues/147) about this topic. I do believe that we could create this feature in yasson as yasson specific feature for the time being.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDIwNzU4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTc0MzEwNQ==,yasson,515743105,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-07-28T08:21:57Z,2019-07-28T08:21:57Z,"@bravehorsie Iterating inner properties is not supported by JSON-B, but Yasson has helpers. Might also be a candidate for JSONB-API.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTc0MzEwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTgxMzA2NA==,yasson,519813064,279,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2019-08-09T07:31:01Z,2019-08-09T07:31:01Z,"As **even the JSON-B user manual** contains a polymorphic example, I tend to say that this is just a bug in Yasson and not a missing feature of the spec: https://javaee.github.io/jsonb-spec/docs/user-guide.html#serializers-deserializers. Hence it should get fixed ASAP.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTgxMzA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDMwMDY1Nw==,yasson,524300657,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-23T12:42:07Z,2019-08-23T12:42:07Z,"@bravehorsie While serialisation with your third option works, deserialisation must also be switched to Jsonb without deserialisation. However, possible methods do not work. Best would be to add a JUnit-Testcase with all necessary Wrappers/Serializers/Deserialisers. Preferably this would works in all JSON-B implementations, but currently, the third option is Yasson specific. I would argree to Markus, that even Dmitry and the User Guide documented a strategy, that Yasson seem not to support. So either the manual or Yasson has to change.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDMwMDY1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTAxMzA5Mg==,yasson,525013092,279,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-26T20:12:34Z,2019-08-26T20:12:34Z,"@mdzaebel @mkarg the doc you linked was for the old Java EE doc, the new JakartaEE doc does not show this serializer/deserializer example anymore:
http://json-b.net/docs/user-guide.html#serializersdeserializers

I just confirmed that the current example we are showing does indeed work with Yasson.

I know @bravehorsie added this ""infinite loop check"" for good reason because users were getting some nasty errors. However, I do also see the value in the originally documented Java EE example. Ideally we can get a solution that covers both cases.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTAxMzA5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTE2ODk0NA==,yasson,525168944,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-27T07:03:29Z,2019-08-27T07:03:29Z,"@aguibert The new serializer example is about accessing different setters rather than transfering polymorphic objects. So the important example is just deleted but we **need** a polymorphic example, that uses JSON-B 1.0. That's what I asked for in my previous comment. The options from @bravehorsie unfortunately doesn't work (may be I did it wrong?). The first option is a change to Yasson itself. The second option has similar problems than the third. The third option has the need to cast to YassonJsonb, but this second instance should be without serializers, so recursive serialization of deeper objects would not be possible. That's the reason, why I asked for an example.

The ""infinite loop check"" is good and necessary and should not be removed in my view, but it should still be possible to de/serialize polymorphic objects.

So again, if there is a solution to de/serialize polymorphic objects (where Throwable subclasses are the hardest example because there are no setters and they need a creator but are built-in) with JSON-B 1.0, it would be **very** important to know, how to implement de/serializers/adapters. The need is documented in SO and in this issue list serveral times. If it's not possible it would be great to know, how to adapt Yasson. In my view, a JSON-B API and RI should be able to de/serialize polymorphic objects with additional De/Serializers/Adapters. If this is not possible, either the specifiation or the implementation is wrong. It should generally be possible and might get easier in future API versions. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTE2ODk0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTI0ODM5MA==,yasson,525248390,279,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-08-27T10:50:50Z,2019-08-27T10:50:50Z,@mdzaebel Yasson doesn't support polymorphic objects serialization since version 1.0.2 (or 1.0.3). It was supported in the first version of Yasson but was removed as a result of fixing important bugs. This functionality must be a part of JSONB spec. It's been already proposed by you https://github.com/eclipse-ee4j/jsonb-api/issues/147 and there is some discussion. To speed up the process we may prepare Yasson-only solution as a proof of concept and add it to the spec if everybody's happy. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTI0ODM5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTI3MTc1Nw==,yasson,525271757,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-27T12:08:49Z,2019-08-27T12:08:49Z,This would be fantastic!,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTI3MTc1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTY5NzU2NA==,yasson,525697564,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-28T11:11:19Z,2019-08-28T11:11:19Z,"Some polymorphic problems to be considered:
- Built-in classes like Throwable
  - Different field names
  - No Setter
  - No default constructor in built-in classes
  - Configuration adaption without annotations
- Map/Array/List type serialisation

Any ideas of completion dates?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTY5NzU2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTcwMTA2MQ==,yasson,525701061,279,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-08-28T11:22:30Z,2019-08-28T11:22:30Z,@mdzaebel I'll ask @Verdent to take a look as he's started this work already. Cannot provide any concrete ETA yet. We'll try to do it in September.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTcwMTA2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTcwNjQ0Nw==,yasson,525706447,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-28T11:40:29Z,2019-08-28T11:40:29Z,"@mdzaebel @aguibert @Verdent  Here is an example of how polymorphic deserialization be done currently using only JSONB-API.

https://github.com/bravehorsie/yasson-client/blob/master/src/test/java/info/grigoriadi/ReadJsonStructureToStringTest.java
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTcwNjQ0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTkzMTI5Mg==,yasson,525931292,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-28T21:33:03Z,2019-08-28T21:33:03Z,"Great, I'll test it tomorrow.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNTkzMTI5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjA2MDI3NA==,yasson,526060274,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-29T07:21:54Z,2019-08-29T07:21:54Z,"@bravehorsie Thanks for your interesting example, which runs. It's really a valuable example in order to understand how to implement Deserializers and what options exist. Thanks at lot! 

However, it has some drawbacks:
- During Deserialisation, the inner animal object is serialized into a string which is then used on the old parser object to deserialize the correct subclass. This could be more efficient.
- The example deserializes the container object too, which is just a helper and should not be visible in the result. 
- Payload is bigger and more complex. Ideally there should just be an other attribute in the Json object.
- The above mentioned polymorphic problems are not solved by this approach

So, it'll still be necessary to implement a new solution. This is not trivial e.g. for Throwables.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjA2MDI3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjA2NzgxMg==,yasson,526067812,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-29T07:44:42Z,2019-08-29T07:44:42Z,"@mdzaebel It is a prototype example on how to not get an error calling yourself recursively with `ctx.deserialize(...)`. You can modify it to whatever you want in your deserializer, avoiding introducing a wrapper container for example. As of performance I doubt appending some data to String would cause considerable slow down of overall process in modern JVM (just make sure to cache JsonProvider). 

You asked for a working example with current API,  but what was your intention - do you actually need a polymorphic deserialization to implement somewhere, or just to bring this feauture to the API for an ingrained support?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjA2NzgxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMDkxOA==,yasson,526100918,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-29T09:17:19Z,2019-08-29T09:17:19Z,"Actually, we plan to transform the complete internal service communication infrastructure of a big insurance company to JSON and I'm evaluating possible implementations. The reason is, that JSON is much more resilient. One requirement is polymorphic deserialization which means, that we need to transport arbitray object graphs (including built-in Throwable's or rarely third party objects, which cannot be anntoated), which must be completely _equal_ after deserialisation. There, we need a concept to control what classes/interfaces are serialized polymorphically and of course it should be compact and readable (so a container solution would hardly be accepted). In Jackson, you can configure a TypeResolverBuilder, which could be used as a sufficient example of how to implement it for Yasson/JSON-B.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMDkxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMDkzMw==,yasson,526100933,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-29T09:17:21Z,2019-08-29T09:17:21Z,"@mdzaebel I suppose it doesn't matter what was the intention for the example, the point is, serializer / deserializer API is abstract enough sou you can do whatever you like inside. How particular (de)serializer works depends on the domain model. Polymorphic (de)serialization is not a problem itself, the problem is that a lazy user is very likely to call `ctx#(de)serialize(...)` with the same type he has registered (de)serializer for. Examples in this issue are intended to make this possible. However the solution that appears proper to me is do more work with driving parser/generator by hand instead to just pass to runtime. For example Throwable has a cauese property which is anothre Throwable. Therefore in this particular case it make sense to me having a (traversing / building) code block along with helper methods `(de)serialize(Throwable t)` which would drive parser/generator by hand and also add type metadata. (It is still possible to call `ctx#(de)serialize` on its substructures like StackTraceElement[] is). Such approach would make parsing a JSON sub-structure to string redundant.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMDkzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMzgyMw==,yasson,526103823,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-29T09:25:28Z,2019-08-29T09:25:28Z,@mdzaebel Must be both clicked comment button in the same instant :) Jackson as a mature JSON framework is indeed a great example to Yasson and its API. Such a shame they haven't participated on a design of JSONB API.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEwMzgyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjExMDk4Mg==,yasson,526110982,279,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-29T09:45:05Z,2019-08-29T09:45:05Z,"@mdzaebel Thinking forhter about Throwable cause recursive reference to another Throwable, this is actually the cause when you want your (De)Serializer for ""Throwable"" type be called recursively after calling `ctx.(de)serialize(cause)`. After you reach the root cause next cause will be null and wrapped instances of (De)Serializer will start to return. The check for ""infinite loop check"" should not trigger here as you are passing the same type but another object instance.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjExMDk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEyMzUwMQ==,yasson,526123501,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-29T10:20:48Z,2019-08-29T10:20:48Z,"I did not know, that Jackson did not participate at JSON-B, that's really a shame.

Yes, the Throwable cause hierarchy should be deserializable (problem is more missing setters, and different field for message (detailMessage).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjEyMzUwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/279,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjE1OTU5Nw==,yasson,526159597,279,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-29T12:19:20Z,2019-08-29T12:19:20Z,"Note, there are 3 cases, where decisions about serialisation have to be made:
- Java Arrays: Jackson: [1,2]  (no change)
- Collections: Jackson: [""java.util.HashSet"", [1, 2]]
- Subclasses: Jackson: {`""@class""`: ""java.lang.NullPointerException"", ""cause"": null, ""stackTrace"": [{...}]}

In our case, we would need to switch off polymorphic serialisation for Collections.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjE1OTU5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,yasson,465847320,281,How to exclude Weld metadata from JSON object serialization by Yasson,akovac35,19531996,Aleksander Kovač,,CLOSED,2019-07-09T15:27:58Z,2019-09-06T22:54:22Z,"Details posted here:

https://stackoverflow.com/questions/56951279/how-to-exclude-weld-metadata-from-json-object-serialization-by-yasson

Here is approximate call stack:
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:36)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:73)
	at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:285)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:80)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:148)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:102)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:153)
	at com.ibm.ws.jaxrs21.providers.json.JsonBProvider.writeTo(JsonBProvider.java:171)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils$3.run(JAXRSUtils.java:1474)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils$3.run(JAXRSUtils.java:1471)
	at java.security.AccessController.doPrivileged(AccessController.java:703)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.writeMessageBody(JAXRSUtils.java:1471)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.serializeMessage(JAXRSOutInterceptor.java:249)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:124)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:85)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:90)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:124)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:275)
	at com.ibm.ws.jaxrs20.endpoint.AbstractJaxRsWebEndpoint.invoke(AbstractJaxRsWebEndpoint.java:134)

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/281/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAzMzQyOQ==,yasson,520033429,281,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T19:16:13Z,2019-08-09T19:16:13Z,"It looks like [Weld CDI beans](https://github.com/weld/api/blob/master/weld/src/main/java/org/jboss/weld/proxy/WeldClientProxy.java#L34) have a few public methods inserted onto them that match the default criteria for a JSON-B property:
```java
public interface WeldClientProxy extends WeldConstruct {

    Metadata getMetadata();

    public interface Metadata {
        Bean<?> getBean();

        Object getContextualInstance();
    }
}
```

Which explains why you are getting the extra `metatdata` property on your JSON
```json
{
  ""accessCounter"": 1,
  ""firstName"": ""test"",
  ""lastName"": ""test"",
  ""metadata"": {
    ""contextualInstance"": {
      ""accessCounter"": 2,
      ""firstName"": ""test"",
      ""lastName"": ""test""
    },
    ""instance"": {
      ""accessCounter"": 3,
      ""firstName"": ""test"",
      ""lastName"": ""test""
    }
  }
}
```

The easiest solution would be to have WELD put `@JsonbIgnore` on their `getMetadata()` method, but this would probably introduce a dependency on the JSON-B API for them.

@manovotn what do you think?

The other option I can think of is to add a special case in Yasson to see if the model object is an instanceof `WeldClientProxy` and if it is we would exclude the `metadata` property.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAzMzQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDgyNTUwNA==,yasson,520825504,281,NA,manovotn,4181235,Matej Novotny,,NA,2019-08-13T13:03:43Z,2019-08-13T13:03:43Z,"Hmm, I am not all that familiar with Yasson, why does it even try to serialize a proxy?
Is it the method signature that matches something Yasson inspects via reflection?

> The easiest solution would be to have WELD put @JsonbIgnore on their getMetadata() method, but this would probably introduce a dependency on the JSON-B API for them.

We're definitely not adding that. Weld is used in environments where there doesn't need to be JSON-B API present.

> The other option I can think of is to add a special case in Yasson to see if the model object is an instanceof WeldClientProxy and if it is we would exclude the metadata property.

Yeah, that sounds plausible. If it is OK to add such logic to Yasson of course.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDgyNTUwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDg1MjM2Mw==,yasson,520852363,281,NA,akovac35,19531996,Aleksander Kovač,,NA,2019-08-13T14:13:28Z,2019-08-13T14:13:28Z,"I would caution against Weld dependency in Yasson code, and reflection will cause slowdowns. While my approach works for simple objects, it would not work if wrapped objects themselves contain injection points.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDg1MjM2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDg1NzMxNA==,yasson,520857314,281,NA,akovac35,19531996,Aleksander Kovač,,NA,2019-08-13T14:25:30Z,2019-08-13T14:25:30Z,"Ok, so I checked update #302 and it seems it will not introduce additional overhead, so it seems as a good solution.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDg1NzMxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDkxMTE5Mw==,yasson,520911193,281,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-13T16:37:32Z,2019-08-13T16:37:32Z,"@manovotn In case you are not familiar, Yasson is the Ref Impl for JSON-B. If an application wants to convert any POJO -> JSON can do that by inspecting the class with reflection by looking for getter and setter methods (or public fields).

If I create a simple CDI bean like this:
```java
@RequestScoped
public class PersonBean {

    private String name;
    private int age;

    // < standard public getters and setters >
}
```

And then inspect the methods of this bean, here is the output:
```
class is: class jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy
  Method Name                   Method.toString()
  ============                  ==============
  setName                       public void jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.setName(java.lang.String)
  weld_getTargetInstance        public java.lang.Object jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.weld_getTargetInstance()
  getAge                        public int jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.getAge()
  getMetadata                   public org.jboss.weld.proxy.WeldClientProxy$Metadata jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.getMetadata()
  getName                       public java.lang.String jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.getName()
  weld_getHandler               public org.jboss.weld.bean.proxy.MethodHandler jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.weld_getHandler()
  weld_getTargetClass           public java.lang.Class jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.weld_getTargetClass()
  lifecycle_mixin_$$_postConstruct   public void jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.lifecycle_mixin_$$_postConstruct()
  weld_setHandler               public void jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.weld_setHandler(org.jboss.weld.bean.proxy.MethodHandler)
  lifecycle_mixin_$$_preDestroy public void jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.lifecycle_mixin_$$_preDestroy()
  setAge                        public void jsonb.cdi.web.PersonBean$Proxy$_$$_WeldClientProxy.setAge(int)
  <methods inherited from java.lang.Object not shown>
```

So it looks like most of the methods automatically added by weld are prefixed with `weld_` which is nice, but `getMetadata` is not, and therefore it matches the default public getter/setter detection and is being included in the JSON output.

So Matej, what do you think would be the most reliable way to tell from reflection if we are looking at the `getMetadata` object, without adding a compile dependency on WELD. My current approach is in PR #302 which I see you reviewed (thanks!), but I'm wondering if we should also check to see if the class name String ends with `$Proxy$_$$_WeldClientProxy` -- do you think this will be a long-term reliable check?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDkxMTE5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTE0OTg2MQ==,yasson,521149861,281,NA,manovotn,4181235,Matej Novotny,,NA,2019-08-14T08:18:42Z,2019-08-14T08:18:42Z,"> So it looks like most of the methods automatically added by weld are prefixed with weld_ which is nice, but getMetadata is not,

Yeah, that's intentional. Those prefixed are internal-only, whereas the `getMetadata` is part of Weld API to unwrap a proxy (although rarely used, it can be handy).

> but I'm wondering if we should also check to see if the class name String ends with $Proxy$_$$_WeldClientProxy -- do you think this will be a long-term reliable check?

Don't do that. While the suffix hasn't changed in eons, you would be relying on internal bits. Also note that it is slightly different for beans that use decorators/interceptors - a subclass is generated and then a proxy on top of that which changes the name of the final class. But it would still end in `$$_WeldClientProxy`.
Your current PR does it perfectly IMO, the [check for return type](https://github.com/eclipse-ee4j/yasson/pull/302/files#diff-0b679cdd432a9709d06c281d3ac6656bR200) is robust enough. Can you imagine a situation where you find a method with the same signature *and* a return type `org.jboss.weld.proxy.WeldClientProxy$Metadata` which you wouldn't want to skip?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTE0OTg2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIwMTU2Mw==,yasson,521201563,281,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-14T11:04:43Z,2019-08-14T11:04:43Z,"I would suggest to raise an improvement on jsonb-api to add configuration support to skip any properties by their string name on a particular class. Similar is currently possible with implementing custom `javax.json.bind.config.PropertyVisibilityStrategy`, but it does operate globally and is a bit cumbersome to use.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIwMTU2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIwNjYwMg==,yasson,521206602,281,NA,manovotn,4181235,Matej Novotny,,NA,2019-08-14T11:23:28Z,2019-08-14T11:23:28Z,"That's interesting idea but it would get a bit verbose basing it on a class - in this case all proxied beans will have the `getMetadata`.
You could maybe achieve the same by adding a property that would ignore certain method based on name and return type. Then again, user would need to care, whereas current solution works with no additional effort (but hardwires it, that's true).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIwNjYwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIyNjE5MQ==,yasson,521226191,281,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-14T12:30:51Z,2019-08-14T12:30:51Z,"Most annotations from Jsonb class level could be put also at package level which will save some copypasting in your case. Weld is not the only framework creating proxies, similar does Hibernate for example. Do we want to exclude all of them hardcoding property parsing adaptations? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTIyNjE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTI0NTYxNg==,yasson,521245616,281,NA,manovotn,4181235,Matej Novotny,,NA,2019-08-14T13:28:22Z,2019-08-14T13:28:22Z,Then we could have an annotation that users can put into their class that will say what methods are to be ignored (since `@JsonbTransient` cannot be used on classes). This will obviously require user to know what he/she wants to exclude but at least gives them some control if they really need to have proxied objects exposed as POJOs via JSON.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTI0NTYxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTI3NTc5NA==,yasson,521275794,281,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-14T14:43:01Z,2019-08-14T14:43:01Z,"> Weld is not the only framework creating proxies, similar does Hibernate for example. Do we want to exclude all of them hardcoding property parsing adaptations?

As long as the number of special cases remains relatively low I think this is OK. For example, we just need 1 hardcoded check for OOTB integration with CDI beans, 1 check for integration with Groovy, and if we have to add 1-2 checks for OOTB integration with JPA I think that is also worth it.

The general solution to applying JSON-B customizations to existing classes at runtime is being discussed here:
https://github.com/eclipse-ee4j/jsonb-api/issues/88
And I think once JSON-B supports this mechanism, we can change Yasson from using these hardcoded checks to using the spec-way of doing it (but still have it pre-configured for the user)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTI3NTc5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/281,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTU5Mzc0Mw==,yasson,521593743,281,NA,akovac35,19531996,Aleksander Kovač,,NA,2019-08-15T10:21:26Z,2019-08-15T10:21:26Z,"It would certainly make sense to have the ability to define ignore lists for certain package, class and method name patterns in advance. Be aware that Yasson is used in enterprise enviroments where code is autogenerated and where there is havy use of proxies and aspectj. Having to manually define ignore lists by setting annotations to classes or methods is virtually impossible in practice - modifying a class once it was generated is ok, but what about when code is regenerated, annotations will be lost then.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTU5Mzc0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,yasson,472424501,282,How to get rid of extra quotes around string values when serializing JsonArray,Degubi,13366932,Degubi,gergonoorbi@gmail.com,CLOSED,2019-07-24T18:12:51Z,2019-07-26T19:04:51Z,"Hi! I got a question, not an issue.
How can I get rid of the extra quotes that I get when I serialize an array of strings to string format.? Example:

```
var strList = List.of(channelQueryHistory.data);   //List<String>
var test = Json.createArrayBuilder(strList).build();  //JsonArray
var arrayStr = Main.json.toJson(test);   //String, Main.json is a Jsonb instance with formatting set to true
```

What I'd expect:
[""Fortnite"",
 ""Half-Life"",
 ""Generation Zero"",
 ""Layers of Fear 2""
  ]

What I get:
[""\\""Fortnite\\"""",
 ""\\""Half-Life\\"""",
 ""\\""Generation Zero\\"""",
 ""\\""Layers of Fear 2\\""""
]","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/282/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc3MDExMw==,yasson,514770113,282,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-07-24T19:36:10Z,2019-07-24T19:36:10Z,"What is the input being used as `channelQueryHistory.data`?

If I try this locally, I get expected results:
```java
        List<String> strList = new ArrayList<>();
        strList.add(""first"");
        strList.add(""second"");
        JsonArray test = Json.createArrayBuilder(strList).build(); // JsonArray
        String arrayStr = jsonb.toJson(test);
        System.out.println(arrayStr);
```
prints:
`[""first"",""second""]`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc3MDExMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc3MDQyOQ==,yasson,514770429,282,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-07-24T19:37:04Z,2019-07-24T19:37:04Z,"My guess is that your input data has an extra set of escaped quotes like this:
```java
        List<String> strList = new ArrayList<>();
        strList.add(""\""first\"""");
        strList.add(""\""second\"""");
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc3MDQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc4MDgwNA==,yasson,514780804,282,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-07-24T20:08:44Z,2019-07-24T20:08:44Z,"Nice catch! It's because the JsonValue::toString method adds them when I read back my settings.json file. (I'm working on switching from gson)

```
public HistoryQueue(JsonArray data, int historySize) {
	this.data = data.stream()
                           .map(JsonValue::toString)  //It happens after mapping
                           .limit(historySize)
                           .toArray(String[]::new);
	this.maxLen = historySize;
}
```
Is there an alternative method to convert a JsonValue to a string without it adding the extra quotes?
Or just use a naive aproach and replace them after mapping?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDc4MDgwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTA1OTM1OQ==,yasson,515059359,282,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-07-25T14:10:53Z,2019-07-25T14:10:53Z,"If you are reading JSON from a file, my recommendation would be to skip over the intermediate conversion to JSON-P objects (e.g. `JsonArray`) and just go straight to a POJO using JSON-B.

Have a look at `Jsonb.fromJson(InputStream, Class<?>)`. If you need to customize the reading further (I see you are doing `limit(historySize)` that's fine. 

If you need to stick with the JSON-P APIs, then it's important that you understand the distinction between `JsonValue::toString` and `JsonString::getString`. The former gives you the raw text representing the JSON data, and the latter gives you the normalized JSON value -- which is what you are expecting in this case.

To illustrate:
```java
        JsonString val = Json.createValue(""foo"");
        System.out.println(val.toString());  // prints ""foo""
        System.out.println(val.getString());  // prints foo
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTA1OTM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/282,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTU2NTgxNA==,yasson,515565814,282,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-07-26T19:04:51Z,2019-07-26T19:04:51Z,Thank you for the explanation! I solved it with using a JsonString.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTU2NTgxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,yasson,472570819,283,Deserializing Map with enum keys results in runtime string keys,ivangreene,27399986,Ivan Greene,ivan@ivan.sh,OPEN,2019-07-24T22:19:58Z,2021-11-25T08:39:51Z,"Attempting to deserialize json into a Map with enum keys will result in the instance having String keys at runtime. Using an enum as the value side of a Map works as expected. We should support Map keys with natural string representations in JSON (immediately, enums and UUIDs come to mind, although I'm sure some other types would benefit from this). This is somewhat related to #110, #177 and #253, although those issues have slightly ambiguous behavior since there is no natural representation, other than the JSON-in-JSON string as the key

A simple example:
```java
public class EnumKeyTest {

    public static class Container {
        public Map<Letter, Integer> letterToOrdinal;
        public Map<String, Letter> nameToLetter;
    }

    @Test
    public void shouldHaveEnumKeys() {
        Jsonb jsonb = JsonbBuilder.create();
        Container container = jsonb.fromJson(""{\""letterToOrdinal\"":{\""B\"": 1}, \""nameToLetter\"":{\""a\"":\""A\""}}"", Container.class);
        assert container.nameToLetter.values().iterator().next() instanceof Letter : ""value is Letter"";
        assert container.nameToLetter.values().iterator().next() == Letter.A : ""value == A"";
        assert container.letterToOrdinal.keySet().iterator().next() instanceof Letter : ""key is letter"";
        assert container.letterToOrdinal.keySet().iterator().next() == Letter.B : ""key == B"";
    }

    enum Letter {
        A, B, C
    }
}
```
This test will fail on key is letter since the key value is actually a String.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/283/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDg3MDg2MA==,yasson,514870860,283,NA,derekm,379469,Derek P. Moore,derek.p.moore@gmail.com,NA,2019-07-25T02:33:01Z,2019-07-25T02:33:01Z,"The JAX-RS spec calls for supporting these stringly-typed types:

https://github.com/eclipse-ee4j/jersey/blob/eafb9bdcb82dfa3fd76dd957d307b99d4a22c87f/docs/src/main/docbook/jaxrs-resources.xml#L363","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNDg3MDg2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI4NzE1Mg==,yasson,518287152,283,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T15:41:31Z,2019-08-05T15:41:31Z,related to #294 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI4NzE1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQxNDQ5Mw==,yasson,518414493,283,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T21:51:12Z,2019-08-05T21:51:12Z,"thanks for raising this issue @ivangreene and for including a test case to reproduce the issue!

I've created a PR that pulls in this test case and gets the Enum key scenario working","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQxNDQ5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NjI0MDE4Ng==,yasson,876240186,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-07-08T08:25:55Z,2021-07-08T08:25:55Z,"Hi!

We have issues reported about this. And #347  doesn't fix the problem completely. I'm going to attach a simple maven project reproducer at the end. To reproduce with current 2.0.2 version just execute `mvn test` with it:

```
unzip issue-map-enum-key.zip
cd issue-map-enum-key
mvn clean  test
```

The _MapToObjectSerializer_ is used if all the keys are strings, enums or numbers [here](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/MapSerializer.java#L126-L130). This class transforms enums (using `name`) or numbers (using `String.valueOf`) into strings for the json key [here](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/MapToObjectSerializer.java#L85-L90). But the deserializer class _MapDeserializer_ does anything to convert back those strings into enums or numbers (see [here](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/MapDeserializer.java#L95-L108)).  So the deserialized map always contains String as keys.

For a `enum KeyEnum {ONE, TWO}` the process is the following (the final map contains string ""ONE"" as the key):

```
Map<KeyEnum,String>                Json                             Map<KeyEnum,String>
{ONE=""value""}       --serialize--> {""ONE"":""value""} --deserialize--> {""ONE""=""value""}
```

The _MapDeserializer_ says that [json keys are strings by spec](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/MapDeserializer.java#L44), so this seems to be done on purpose.

We have thought about trying to convert back the string to enums and numbers using the key type in  the map. Another option is avoiding the use of the _MapToObjectSerializer_ in favor of the _MapToEntriesArraySerializer_ in more cases by default... But we are not sure even reading the JSR-367 spec...

WDYT? Is this a bug or an adapter is just needed for this?

### Reproducer
[issue-map-enum-key.zip](https://github.com/eclipse-ee4j/yasson/files/6782819/issue-map-enum-key.zip)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NjI0MDE4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg3ODQwOTQzNA==,yasson,878409434,283,NA,don-spyker,40198493,,,NA,2021-07-12T16:13:03Z,2021-07-12T16:13:03Z,"Hi,

I have a similar issue like @rmartinc faces, just with Integer as map key: `Map<Integer, Object>`.

The json structure is being deserialized, but when trying to iterate about the `keyset()` of the map a `ClassCastException `is being 
thrown.

I would prefer a solution that converts the key back into the original type, which is actually defined. Using the same DTO on server and client side should be the goal.




","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg3ODQwOTQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40yDHw,yasson,885535216,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-07-23T10:06:48Z,2021-07-23T10:06:48Z,"@Verdent Could you please take a look to this issue when you have time?

I have been doing some work here based on the idea of converting back to the original objects. This is my [WIP branch](https://github.com/rmartinc/yasson/tree/issue4) and the interesting part is in the [DeserializerMap](https://github.com/rmartinc/yasson/commit/11d44a037c2614cd659d3878a2300826404c4c53#diff-0925280ddd94bbdea11c1e4bbb7eafc50dc95972771339d507b2034066906cd4). The idea is just trying to unmarshall the key into the specified type in the map. (There is more work done for configuring the string value used for a null key, but that's less important.) WDYT? Would it be a worthy PR? Or do you prefer another approach?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40yDHw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40yGAZ,yasson,885547033,283,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-07-23T10:29:03Z,2021-07-23T10:29:03Z,"@rmartinc @don-spyker Hi guys, I will take a look at it next week. When I read more about the issue, I will provide some feedback to it :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40yGAZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40_238,yasson,889155068,283,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-07-29T13:42:29Z,2021-07-29T13:42:29Z,"@rmartinc I think this is something we should support. Since we do support transforming other Map key types to String, it should be possible to do it also the other way around. I might ask you to create PR, when this feature is ready and we can go through it there :-) Or if you have any questions about the issue, feel free to contact me or write here.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40_238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CNhB,yasson,889772097,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-07-30T09:39:53Z,2021-07-30T09:39:53Z,Thanks @Verdent! I have submitted PR #509 with an initial and tentative fix. There are several options to fix this but we should start with something. Just comment me there if you prefer something different.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CNhB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41D6tn,yasson,890219367,283,NA,Sboddd,48965472,,,NA,2021-07-30T22:28:58Z,2021-07-30T22:28:58Z,"I ran into this same issue, but with a map that had Integer keys - the deserialized Map had Strings for its keys.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41D6tn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42XDax,yasson,912012977,283,NA,reinhapa,4694567,Patrick Reinhart,,NA,2021-09-02T20:02:10Z,2021-09-02T20:02:10Z,We got the same problems here and had to implement a workaround. @rmartinc  anything we can help to get this forward?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42XDax/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42YPVE,yasson,912323908,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-09-03T07:33:24Z,2021-09-03T07:33:24Z,"@reinhapa The status right now is that there is a PR and it's being reviewed. The first review detected three changes, two are clear to me but in the third point we are still deciding what to do.

@Verdent What do you think about my last proposal for the null key? The more I think about it the more sense it makes to me. I think that a map with a null key should not be serialized with a `MapToObjectSerializer` (JSON does not accept a null key in a object) but with the `MapToEntriesArraySerializer` (it would be something like `[{""key"":null,""value"":...},...]`). It avoids the property and I think it has no risks, because null keys are not common in java and now a null key is also broken (in `MapToObjectSerializer` the null key is de-serialized to a string ""null"" key). I can re-submit the PR branch with the three changes if you agree with this point.

Thanks! ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42YPVE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Ysb0,yasson,912443124,283,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-09-03T10:43:02Z,2021-09-03T10:43:02Z,@rmartinc I will add comment to the PR to not split the conversation :-),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Ysb0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Y3O0,yasson,912487348,283,NA,reinhapa,4694567,Patrick Reinhart,,NA,2021-09-03T12:06:19Z,2021-09-03T12:06:19Z,"> ...  I think that a map with a null key should not be serialized with a `MapToObjectSerializer` (JSON does not accept a null key in a object) but with the `MapToEntriesArraySerializer`

@rmartinc  The concept of `null` keys in a Map is a bad practice anyway, as the consumer side can not tell the difference if there is an entry value where the key _and_ value was `null` or if there was _no_ entry with a `null` key.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Y3O0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Y7Ll,yasson,912503525,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-09-03T12:33:37Z,2021-09-03T12:33:37Z,"@reinhapa Yes, that's why I commented that it's not common (and more important broken right now). But we have reached an agreement, we do what I proposed but adding a yasson property to use the `MapToObjectSerializer` back in case of null keys (just in case someone is using null keys knowing that null is converted to the ""null"" string).

I expect to submit a new PR on Monday.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42Y7Ll/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/283,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46Wa1m,yasson,978955622,283,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-11-25T08:39:51Z,2021-11-25T08:39:51Z,"@Verdent PR also sent to the 1.x branch but without the property, just deserializing Numbers and Enums, it's #522.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46Wa1m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/284,https://api.github.com/repos/eclipse-ee4j/yasson/issues/284,yasson,472896508,284,Deserializing with generic types has different behavior using @JsonbCreator,ivangreene,27399986,Ivan Greene,ivan@ivan.sh,CLOSED,2019-07-25T14:24:24Z,2019-12-21T00:11:18Z,"Deserializing a POJO with generic collection types (Set, Map) has different behavior when using `@JsonbCreator` annotated constructor. When the values of these types are specified as an Enum, they work as expected when Jsonb populates them as fields. However, when using a `@JsonbCreator` annotated constructor or static factory, the values of these members will be String at runtime.

In this example, the JsonbCreator annotation can be commented out to observe the test passing.

```java
public class EnumValueTest {

    public static class Container {
        public Map<String, Letter> nameToLetter;
        public Set<Letter> letters;

        public Container() {
        }

        @JsonbCreator
        public Container(@JsonbProperty(""nameToLetter"") Map<String, Letter> nameToLetter, @JsonbProperty(""letters"") Set<Letter> letters) {
            this.nameToLetter = nameToLetter;
            this.letters = letters;
        }
    }

    @Test
    public void shouldHaveEnumValues() {
        Jsonb jsonb = JsonbBuilder.create();
        Container container = jsonb.fromJson(""{\""nameToLetter\"":{\""a\"":\""A\""}, \""letters\"":[\""A\""]}"", Container.class);
        assert container.letters.iterator().next() instanceof Letter : ""set member is Letter"";
        assert container.letters.iterator().next() == Letter.A : ""member == A"";
        assert container.nameToLetter.values().iterator().next() instanceof Letter : ""value is Letter"";
        assert container.nameToLetter.values().iterator().next() == Letter.A : ""value == A"";
    }

    enum Letter {
        A, B, C
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/284/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/284,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Nzk5MDkwNg==,yasson,567990906,284,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-12-20T16:47:28Z,2019-12-20T16:47:28Z,"Tested with current version, was unable to reproduce.
Tested with 1.0.5, 1.0.4: unable to reproduce.
Tested with 1.0.3 and was able to reproduce what the user described.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Nzk5MDkwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/284,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODEzMTIwMw==,yasson,568131203,284,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-12-21T00:11:18Z,2019-12-21T00:11:18Z,"Thanks for testing @Degubi, looks like it may have been resolved by this PR: https://github.com/eclipse-ee4j/yasson/pull/202

Closing this issue since it is no longer occurring","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODEzMTIwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,yasson,472936528,285,@JsonbCreator should allow properties to be optional,derekm,379469,Derek P. Moore,derek.p.moore@gmail.com,CLOSED,2019-07-25T15:38:06Z,2021-11-17T18:07:40Z,"When using `@JsonbCreator` with `@JsonbProperty`, the creator factory/constructor cannot overcome situations where the property being called for is null-squashed by the remote service.

`@JsonbCreator`-instantiated objects should allow properties to be optional or null-squashed, even when `@JsonbProperty` is used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/285/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTA5NTQwNw==,yasson,515095407,285,NA,ivangreene,27399986,Ivan Greene,ivan@ivan.sh,NA,2019-07-25T15:39:45Z,2019-07-25T15:39:45Z,"Demo test case. Uncomment `@JsonbCreator` to see the exception: `javax.json.bind.JsonbException: JsonbCreator parameter bar is missing in json document.`
```java
public class MissingValuesTest {

    public static class Container {
        public Long foo;
        public Long bar;

        public Container() {
        }

//        @JsonbCreator
        public Container(@JsonbProperty(""foo"") Long foo, @JsonbProperty(""bar"") Long bar) {
            this.foo = foo;
            this.bar = bar;
        }
    }

    @Test
    public void shouldBeOkWithMissingValues() {
        Jsonb jsonb = JsonbBuilder.create();
        Container container = jsonb.fromJson(""{\""foo\"":3}"", Container.class);
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTA5NTQwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTM2OTY5OQ==,yasson,515369699,285,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-07-26T08:58:00Z,2019-07-26T08:58:00Z,Duplicate of #237,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTM2OTY5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTM3MDMwNA==,yasson,515370304,285,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-07-26T09:00:04Z,2019-07-26T09:00:04Z,"We are working on #237 now. Summary is, it's against the current spec, but we are thinking of adding it to Yasson as an experimental feature.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTM3MDMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTQ3MzQwMA==,yasson,515473400,285,NA,ivangreene,27399986,Ivan Greene,ivan@ivan.sh,NA,2019-07-26T14:20:56Z,2019-07-26T14:20:56Z,"@m0mus thanks for a quick response. Interesting to note is Johnzon's approach: https://github.com/apache/johnzon/commit/6c610cf03164236c39214873001bc46f513c5eda
They added a config property to disable this behavior, so by default they are spec compliant in this regard but users can opt out","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTQ3MzQwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjA1ODc0MQ==,yasson,516058741,285,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-07-29T16:15:48Z,2019-07-29T16:15:48Z,"IMO optional constructor properties are one of the top 3 most needed features for JSON-B, and I will be pushing hard for this feature to be standardized at the spec level, which is currently being discussed here:
https://github.com/eclipse-ee4j/jsonb-api/issues/121

For the sake of not needing to have two different implementations of optional ctor properties in Yasson, my preference is to wait until this is defined at the spec level (which will hopefully be soon).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjA1ODc0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/285,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs457PDf,yasson,971829471,285,NA,tsfullman,10775315,,,NA,2021-11-17T18:07:40Z,2021-11-17T18:07:40Z,looks like a merge request went in and closed that referenced json b feature at the spec level allowing optional json parameters. Any plans to update yasson to support that now?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs457PDf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,yasson,475827070,289,json string prints new line between property and value,nimo23,3045549,,,CLOSED,2019-08-01T18:29:39Z,2019-11-25T17:43:04Z,"When printing any json string to the logger (e.g. slf4j, log4j), then the output in the console is:

```
// json string prints new line between property and value
{
 ""id"": 
  1,
  ""name"":
  ""ted"",
  ""description"": null
}
```

instead of 

```
{
  ""id"": 1,
  ""name"": ""ted"",
  ""description"": null
}
```

_tested with org.eclipse.yasson 1.0.4_
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/289/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2MDI4NA==,yasson,518260284,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T14:35:01Z,2019-08-05T14:35:01Z,"hi @nimo23, can you provide more details on your configuration?

- What is your log4j.properties or logging config?
- What is your JSON-B config? It looks like you have `withFormatting(true)` set?
- What is the raw string value of the JSON you are attempting to output?

I attempted to reproduce this locally and everything behaved as expected for me.

log4j.properties:
```
# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=DEBUG, A1
# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender
# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
```

main java class:
```java
public class AGGMain {

    public static class User {
        public long id;
        public Set<String> roles;
        public String name;
        public int age;
    }

    // tested with and without formatting
    private static final Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true));

    public static void main(String args[]) throws Exception {
        User u = new User();
        u.id = 84795629346L;
        u.name = ""Andy"";
        u.age = 26;
        Logger log = LoggerFactory.getLogger(AGGMain.class);
        log.info(jsonb.toJson(u));
    }

}
```

The resulting output was as expected:
```
0    [main] INFO  atest.AGGMain  - 
{
    ""age"": 26,
    ""id"": 84795629346,
    ""name"": ""Andy""
}
```
with formatting on. With formatting=off it was all on one line as expected","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2MDI4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI3MTQ2Mg==,yasson,518271462,289,NA,nimo23,3045549,,,NA,2019-08-05T15:02:40Z,2019-08-05T15:02:40Z,"1. the jsonb-config:

```
var jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true).withNullValues(true)
.withPropertyVisibilityStrategy(new PrivateVisibilityStrategy());
```


2. the logger config (used within wildfly version 17 ""standalone.xml""):

```
<formatter name=""COLOR-PATTERN"">
    <pattern-formatter pattern=""%K{level}%d{HH:mm:ss,SSS} %-5p [%c] (%t) %s%e%n""/>
</formatter>
```

> What is the raw string value of the JSON you are attempting to output?

There is no raw string value. The value comes from a jsonb annotated entity by:

```
var json = jsonb.toJson(object);
log.info(json);
// same issue also with System.out.println
System.out.println(json);
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI3MTQ2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2MDMyNA==,yasson,519960324,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T15:23:02Z,2019-08-09T15:23:02Z,does the same issue occur when you run the code outside of Wildfly? I'm thinking this has to be some sort of interaction caused by using Yasson with Wildfly's loggers.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2MDMyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk4MTc4Nw==,yasson,519981787,289,NA,nimo23,3045549,,,NA,2019-08-09T16:27:47Z,2019-08-09T16:27:47Z,">does the same issue occur when you run the code outside of Wildfly

No. Outside of wildfly the json string prints normally without line breaks.

Strange. I dont know why? Could you give me a solution to work within wildfly? Why does this happen? Using other json libs (e.g. jackson) the printing does as expected, but not with yasson. 

Should I adapt this pattern somehow? 

`<pattern-formatter pattern=""%K{level}%d{HH:mm:ss,SSS} %-5p [%c] (%t) %s%e%n""/>`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk4MTc4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAzNzgxMw==,yasson,520037813,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T19:32:14Z,2019-08-09T19:32:14Z,"I am not familiar with Wildfly logging, so perhaps it would be better to discuss with that community.

A good experiment would be to do:
`System.out.println(""first \n second"")` 
in wildfly and see if there is an extra line break added or not.

In any case, the ""pretty printing"" details are not controlled by Yasson or JSON-B -- we simply set `javax.json.stream.JsonGenerator.PRETTY_PRINTING=true` on the underlying JSON-P generator and it inserts the linebreaks and whatnot.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAzNzgxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEzNjE1Ng==,yasson,520136156,289,NA,nimo23,3045549,,,NA,2019-08-10T10:00:33Z,2019-08-10T10:00:33Z,">in wildfly and see if there is an extra line break added or not.

Yes, Wildfly prints the line break with `System.out.println(""first \n second"")`. Wildfly uses `javax.json-1.1.2.jar`. However, you can close this issue as this is not caused by Yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEzNjE1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEzNzAzNg==,yasson,520137036,289,NA,nimo23,3045549,,,NA,2019-08-10T10:14:26Z,2019-08-10T10:14:26Z,"I have used json-p directly within wildfly and it prints as it should - without line breaks between property and value. So I am wondering why this works but with yasson not?

```
var json = Json.createObjectBuilder()
				.add(""name"", ""Name 1"")
				.add(""task"", ""Task 1"")
				.add(""isNull"", ""null"")
				.add(""born"", 1)
				.build();
		var config = Map.of(JsonGenerator.PRETTY_PRINTING, true);
		var jwf = Json.createWriterFactory(config);
		var sw = new StringWriter();
		try (var jsonWriter = jwf.createWriter(sw)) {
			jsonWriter.writeObject(json);
			System.out.println(sw.toString());
		}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDEzNzAzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE1Mjk0Mg==,yasson,520152942,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-10T14:24:12Z,2019-08-10T14:24:12Z,"Perhaps you could try doing a runtime comparison of both strings?
For example:
```java
var jsonpString = // get string from JSON-P directly
var jsonbString = // get string from JSON-B
```
you could see if they `.equal()` each other, or if their lengths are the same, and if not you could step through the strings char by char and see if any hidden chars (maybe `\n\r`) are getting added in anywhere","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE1Mjk0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE2MDY2Mw==,yasson,520160663,289,NA,nimo23,3045549,,,NA,2019-08-10T16:10:28Z,2019-08-10T16:10:28Z,"I use this class to test json-b and json-p output:


```
import java.io.Serializable;
import java.io.StringWriter;
import java.text.Collator;
import java.util.Map;

import javax.json.Json;
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.annotation.JsonbNillable;
import javax.json.bind.annotation.JsonbPropertyOrder;
import javax.json.stream.JsonGenerator;

@JsonbNillable(value = true)
@JsonbPropertyOrder(value = { ""name"", ""task"" })
public class Tada implements Serializable {

	private static final long serialVersionUID = 2913625996208980629L;

	public static Tada createDefaultInstance() {
		Tada t = new Tada();
		t.setName(""myname"");
		t.setTask(""mytask"");
		return t;
	}

	/**
	 * @param tada
	 * @return json string by Json-P
	 */
	public static String toJsonByJsonP(Tada tada) {
		var json = Json.createObjectBuilder()
				.add(""name"", tada.name)
				.add(""task"", tada.task)
				.build();
		var config = Map.of(JsonGenerator.PRETTY_PRINTING, true);
		var jwf = Json.createWriterFactory(config);
		var sw = new StringWriter();
		try (var jsonWriter = jwf.createWriter(sw)) {
			jsonWriter.writeObject(json);
			return sw.toString();
		}
	}

	/**
	 * 
	 * @param tada
	 * @return json string by Json-B
	 */
	public static String toJsonByJsonB(Tada tada) {
		try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true))) {
			return jsonb.toJson(tada);
		} catch (Exception e) {
			return null;
		}
	}
	
	public static boolean jsonStringIsEquals(String jsonP, String jsonB) {
		
		System.out.println(""Json by Json-B:"");
		System.out.println(jsonB);
		
		System.out.println(""Json by Json-P:"");
		System.out.println(jsonP);
		
		int compare = Collator.getInstance().compare(jsonP, jsonB);
		System.out.println(""json strings are equal: ""  + jsonP.equals(jsonB));
		System.out.println(""json contents are equal: ""  + jsonP.contentEquals(jsonB));
		System.out.println(""json contents are equal: ""  + compare);
		
		System.out.println(""jsonP contains \\n\\r: ""  + jsonP.contains(""\\n\\r""));
		System.out.println(""jsonB contains \\n\\r: ""  + jsonB.contains(""\\n\\r""));

		return jsonP.equals(jsonB);
	}

	private String name;
	private String task;
	
	public String getName() { return name;}
	public void setName(String name) { this.name = name;}
	
	public String getTask() { return task;}
	public void setTask(String task) { this.task = task;}
}
```

and the output is the following within wildfly:

```
18:03:21,928 INFO  [stdout] Json by Json-B:
18:03:21,929 INFO  [stdout] 
18:03:21,929 INFO  [stdout] {
18:03:21,929 INFO  [stdout]     ""name"": 
18:03:21,929 INFO  [stdout]     ""myname"",
18:03:21,929 INFO  [stdout]     ""task"": 
18:03:21,929 INFO  [stdout]     ""mytask""
18:03:21,929 INFO  [stdout] }
18:03:21,929 INFO  [stdout] Json by Json-P:
18:03:21,929 INFO  [stdout] 
18:03:21,929 INFO  [stdout] {
18:03:21,929 INFO  [stdout]     ""name"": ""myname"",
18:03:21,930 INFO  [stdout]     ""task"": ""mytask""
18:03:21,930 INFO  [stdout] }
18:03:21,952 INFO  [stdout] json strings are equal: false
18:03:21,953 INFO  [stdout] json contents are equal: false
18:03:21,953 INFO  [stdout] json contents are equal: -1
18:03:21,954 INFO  [stdout] jsonP contains \n\r: false
18:03:21,954 INFO  [stdout] jsonB contains \n\r: false
```

So there must be something with Json-B string..as json-P output is right. 
**Json-B has not the same content as Json-P.** Why?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE2MDY2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzU3NDE5OQ==,yasson,523574199,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-21T17:47:39Z,2019-08-21T17:47:39Z,"Can you confirm what versions of Glassfish JSON (JSON-P impl) and Yasson are being used?

I just noticed that with older versions there are newlines between some of the properties. For example with:
```xml
<dependency>
    <groupId>org.eclipse</groupId>
    <artifactId>yasson</artifactId>
    <version>1.0.3</version>
</dependency>
<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>javax.json</artifactId>
    <version>1.1.2</version>
</dependency>
```
I get:
```
{
    ""exception"": 
    {
        ""message"": 
        ""foo"",
        ""type"": 
        ""java.lang.RuntimeException""
    },
    ""finishedAt"": 
    ""2019-08-21T17:43:30.319Z"",
    ""startedAt"": 
    ""2019-08-21T17:43:30.319Z""
}
```

But with newer versions:
```xml
<dependency>
    <groupId>org.eclipse</groupId>
    <artifactId>yasson</artifactId>
    <version>1.0.4</version>
</dependency>
<!-- No need to add JSON-P here because it is automatically included as of Yasson 1.0.4 -->
```

I get:
```
{
    ""exception"": {
        ""message"": ""foo"",
        ""type"": ""java.lang.RuntimeException""
    },
    ""finishedAt"": ""2019-08-21T17:46:32.562Z"",
    ""startedAt"": ""2019-08-21T17:46:32.562Z""
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzU3NDE5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzk1MTY3Mw==,yasson,523951673,289,NA,nimo23,3045549,,,NA,2019-08-22T15:19:23Z,2019-08-22T15:19:23Z,"I am using (I also looked at the modules-folder of wildfly and updated yasson):

- yasson-1.0.4.jar
- javax.json-1.1.2.jar

But problem still exits..

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzk1MTY3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzQ3NjkxNw==,yasson,557476917,289,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-22T10:22:05Z,2019-11-22T10:22:05Z,"@nimo23 I tested it with your code and the version 1.0.4 works fine. I'm having the same issue if I run it with 1.0.3.

Lets make one additional check because I don't have experience with Wildfly, but I have seen in other application servers problems with the priority in the class loaders. It could happen that 2 different versions of Yasson are accessible and it is loading the older version.

Could you modify your method:

```
    public static String toJsonByJsonB(Tada tada) {
        try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true))) {
            try(InputStream inputStream = jsonb.getClass().getResourceAsStream(""/META-INF/MANIFEST.MF""); Scanner scanner = new Scanner(inputStream)){
                String result = scanner.useDelimiter(""\\A"").hasNext() ? scanner.next() : """";
                System.out.println(result);
            }
            return jsonb.toJson(tada);
            
        } catch (Exception e) {
            return null;
        }
    }
```
And let us know what does it print. The Yasson version should be displayed.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzQ3NjkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODA4NDI2Nw==,yasson,558084267,289,NA,nimo23,3045549,,,NA,2019-11-25T10:10:42Z,2019-11-25T10:10:42Z,"@jbescos I get this output:

```
01:39:41,649 INFO  [stdout] Manifest-Version: 1.0
01:39:41,649 INFO  [stdout] Created-By: Apache Maven Bundle Plugin
01:39:41,650 INFO  [stdout] Built-By: default
01:39:41,651 INFO  [stdout] Build-Jdk: 11.0.2
01:39:41,651 INFO  [stdout] Bnd-LastModified: 1567805700364
01:39:41,651 INFO  [stdout] Bundle-Description: Eclipse Yasson. Reference implementation of JSR-367 
01:39:41,652 INFO  [stdout]  (JSON-B).
01:39:41,652 INFO  [stdout] Bundle-DocURL: http://www.oracle.com/
01:39:41,653 INFO  [stdout] Bundle-License: https://projects.eclipse.org/content/eclipse-distributio
01:39:41,653 INFO  [stdout]  n-license-1.0-bsd, https://projects.eclipse.org/content/eclipse-public-
01:39:41,653 INFO  [stdout]  license-1.0
01:39:41,653 INFO  [stdout] Bundle-ManifestVersion: 2
01:39:41,653 INFO  [stdout] Bundle-Name: org.eclipse.yasson
01:39:41,653 INFO  [stdout] Bundle-SymbolicName: yasson
01:39:41,653 INFO  [stdout] Bundle-Vendor: Oracle Corporation
01:39:41,653 INFO  [stdout] Bundle-Version: 1.0.5
01:39:41,653 INFO  [stdout] Export-Package: org.eclipse.yasson;version=""1.0.5"";uses:=""javax.json,jav
01:39:41,653 INFO  [stdout]  ax.json.bind,javax.json.bind.config,javax.json.bind.spi,javax.json.stre
01:39:41,653 INFO  [stdout]  am""
01:39:41,653 INFO  [stdout] Import-Package: javax.enterprise.context.spi;resolution:=optional,javax.
01:39:41,654 INFO  [stdout]  enterprise.inject.spi;resolution:=optional,javax.json;version=""[1.1,2)""
01:39:41,654 INFO  [stdout]  ,javax.json.bind;version=""[1.0,2)"",javax.json.bind.adapter;version=""[1.
01:39:41,654 INFO  [stdout]  0,2)"",javax.json.bind.annotation;version=""[1.0,2)"",javax.json.bind.conf
01:39:41,654 INFO  [stdout]  ig;version=""[1.0,2)"",javax.json.bind.serializer;version=""[1.0,2)"",javax
01:39:41,654 INFO  [stdout]  .json.bind.spi;version=""[1.0,2)"",javax.json.spi;version=""[1.1,2)"",javax
01:39:41,654 INFO  [stdout]  .json.stream;version=""[1.1,2)"",javax.xml.datatype,javax.naming;resoluti
01:39:41,654 INFO  [stdout]  on:=optional,java.beans;resolution:=optional
01:39:41,654 INFO  [stdout] Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.8))""
01:39:41,654 INFO  [stdout] Tool: Bnd-3.5.0.201709291849
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODA4NDI2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODExMTk4NA==,yasson,558111984,289,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-25T11:22:28Z,2019-11-25T11:22:28Z,"@nimo23 I don't see the dependency 'jakarta.json:jakarta.json-api:jar:1.1.5:compile'. That actually contains the class JsonPrettyGeneratorImpl. I hope that is the problem, otherwise I'm running out of ideas because I cannot reproduce it.

You can find that dependency here:
https://mvnrepository.com/artifact/jakarta.json/jakarta.json-api/1.1.5

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODExMTk4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODExODA1OQ==,yasson,558118059,289,NA,nimo23,3045549,,,NA,2019-11-25T11:39:55Z,2019-11-25T11:39:55Z,"@jbescos thanks, but I dont see the sense in importing another dependency **by myself** only to have a pretty print enabled by yasson to print my json. I use wildfly and yasson is already included and I am expecting that yasson includes all its needed deps by itself.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODExODA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODIzMjcxNg==,yasson,558232716,289,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-25T16:28:01Z,2019-11-25T16:28:01Z,"I think this issue should be moved to Wildfly, since we have already established that this issue does not occur when running Yasson by itself outside of Yasson.

My suspicion is that the version of Wildfly you are using has an old version of JSON-P (e.g. 1.1.2). The versions of JSONP and JSONB that do not have this issue are 1.1.5 and 1.0.4 respectively. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODIzMjcxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/289,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODI2NDAxOQ==,yasson,558264019,289,NA,nimo23,3045549,,,NA,2019-11-25T17:43:03Z,2019-11-25T17:43:03Z,"yes, the version wildfly actually uses is javax.json-1.1.2.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODI2NDAxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,yasson,475827765,290,runtime-configuration must have precedence over annotation,nimo23,3045549,,,CLOSED,2019-08-01T18:31:24Z,2019-08-06T07:02:13Z,"Annotating a class with

```
@JsonbNillable(value = true)
@JsonbVisibility(value = PrivateFields.class)
public class Item {
..
}
```

and printing the json string with

```
try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true)
				.withNullValues(false)
				.withPropertyVisibilityStrategy(null)
				.withPropertyOrderStrategy(PropertyOrderStrategy.ANY))) {
			return jsonb.toJson(object);
}
```

actually prints the NULL-Values. However, it should **NOT** print the null values, because any runtime-configuration should have precedence over their corresponding annotations. 

**(Tested with org.eclipse.yasson v1.0.4)**","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/290/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2NTM1NA==,yasson,518265354,290,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T14:47:43Z,2019-08-05T14:47:43Z,"hi @nimo23, where do you see that runtime-configuration should have precedence over annotations?  The runtime configuration with `JsonbConfig` is the ""global configuration"" and is the broadest scope of configuration. If configuration exists as a smaller scope (e.g. annotation on a class, field, or method) then the smaller scope takes precedence.

From section 4.3 of the spec:

> If annotations (JsonbNillable or JsonbProperty) on different level apply to the same field (or JavaBean property) or if there is config wide configuration and some annotation (JsonbNillable or JsonbProperty) which apply to the same field (or JavaBean property), the annotation with the smallest scope applies. For example, if there is type level JsonbNillable annotation applied to some class with field which is annotated with JsonbProperty annotation with nillable = false, then JsonbProperty annotation overrides JsonbNillable annotation.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2NTM1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI5MjEyNA==,yasson,518292124,290,NA,nimo23,3045549,,,NA,2019-08-05T15:54:18Z,2019-08-05T15:54:18Z,"Please look at:

https://github.com/eclipse-ee4j/jsonb-api/issues/169

It was said that:

> Global means shared accross attributes/classes, local is the opposite so annotations are clearly local and jsonbconfig global IMHO. In all cases, config must override what is hardcoded for flexibility reasons.

Issue should be reopened.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI5MjEyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQ1NTM5NQ==,yasson,518455395,290,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-06T01:03:53Z,2019-08-06T01:03:53Z,"I'm not sure if Romain was agreeing with you or disagreeing with you over on eclipse-ee4j/jsonb-api#169 =)

We can discuss more over on that issue though, and if we determine the spec/TCK says otherwise then we can change Yasson","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQ1NTM5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/290,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODUyODgxNA==,yasson,518528814,290,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-08-06T06:43:56Z,2019-08-06T06:43:56Z,"Which configuration has precedence is defined by the specification. Generally smaller scope have precedence over larger one.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODUyODgxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/291,https://api.github.com/repos/eclipse-ee4j/yasson/issues/291,yasson,476080014,291,"""fromJson"" with EnumSet",nimo23,3045549,,,CLOSED,2019-08-02T09:14:02Z,2019-08-05T14:54:31Z,"Would be nice to be able to (de)serialize EnumSets.

`
SEVERE [org.eclipse.yasson.internal.Unmarshaller] Can't create instance of a class: class java.util.EnumSet, No default constructor found.`

Something like this does not work with:

```
var jsonb = JsonbBuilder.create();
jsonb.fromJson(json, EnumSet.noneOf(Task.class).getClass().getGenericSuperclass());
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/291/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/291,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2Nzk3Ng==,yasson,518267976,291,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T14:54:31Z,2019-08-05T14:54:31Z,"hi @nimo23, you are right that the currently released version of Yasson does not support EnumSet.

Support for EnumSet was very recently added under PR #287, and will be included in the next release of Yasson (1.0.5).

Closing this issue as a duplicate of #272.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI2Nzk3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/293,https://api.github.com/repos/eclipse-ee4j/yasson/issues/293,yasson,476168877,293,Deserialization from null to JsonValue,leadpony,34061134,,leadpony@openclosed.dev,CLOSED,2019-08-02T13:02:52Z,2019-08-09T15:38:11Z,"First of all, thanks everyone for developing such a nice software.

I have a class to be instantiated from JSON.
```java
public class Stuff {
    public int a;
    public JsonValue b;
}
```
And the input JSON for `Jsonb#fromJson() `is here:
```json
{
    ""a"": 42,
    ""b"": null
}
```
I expected the value of `Stuff#b` should be `JsonValue.NULL` because the target type is `JsonValue`. However I got just a `null` of Java as the value of the member instead. 
Is this intended behavior?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/293/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/293,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2Mjc4MQ==,yasson,519962781,293,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T15:30:03Z,2019-08-09T15:30:03Z,"hi @leadpony, thanks for raising this question.

Here is the relevant portion of the JSON-B spec:

> ## 3.14.1 Null Java field
> The result of serializing a java field with a null value is the absence of the property in the resulting JSON document.
>
> The deserialization operation of a property absent in JSON document MUST not set the value of the field, the setter (if available) MUST not be called, and thus original value of the field MUST be preserved.
>
> The deserialization operation of a property with a null value in a JSON document MUST set the value of the field to null value (or call setter with null value if setter is present). The exception is java.util.Optional, OptionalInt, OptionalLong, OptionalDouble instances. In this case the value of the field is set to an empty optional value.

So according to the spec the value should indeed be `null`, and the only types that get special consideration are the various forms of `Optional`.

That being said, it does seem reasonable to include `JsonValue` in the list of types that get special handling, and have their value set to `JsonValue.NULL` as you suggest. Do you want to [raise this issue over at the JSON-B spec repo](https://github.com/eclipse-ee4j/jsonb-api/issues/new) so we can consider it for the next version of JSON-B?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2Mjc4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/293,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2NTY1Mg==,yasson,519965652,293,NA,leadpony,34061134,,leadpony@openclosed.dev,NA,2019-08-09T15:38:11Z,2019-08-09T15:38:11Z,"@aguibert 
Great!, thank you. I will raise an issue at the API.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2NTY1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/294,https://api.github.com/repos/eclipse-ee4j/yasson/issues/294,yasson,476537679,294,EnumMap (de)serializing issues,nimo23,3045549,,,OPEN,2019-08-04T10:21:45Z,2019-08-05T21:54:12Z,"When using an EnumMap:

```
JsonbBuilder.create().fromJson(json, new EnumMap<TYPE, Task>(TYPE.class) {
private static final long serialVersionUID = -3762002712427352481L;}.getClass());
```

I get this error:

` javax.json.bind.JsonbException: Can't create instance of a class: class java.util.EnumMap, No default constructor found.`

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/294/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/294,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQxNTM0NQ==,yasson,518415345,294,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-05T21:54:07Z,2019-08-05T21:54:07Z,"hi @nimo23 thanks for raising this issue. EnumMap isn't required by the JSON-B spec but since it's part of the JDK I think we can add a default adapter for it.

I've raised a PR (#295) which adds support for EnumMap. However, it doesn't allow the original code example you posted to work as-is. In order to deserialize a generic collection, you will need to call `getGenericSuperClass()` at the end like this:
```java
JsonbBuilder.create().fromJson(json, new EnumMap<TYPE, Task>(TYPE.class) {
  private static final long serialVersionUID = -3762002712427352481L;
}.getClass().getGenericSuperclass());
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODQxNTM0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,yasson,478634027,296,PropertyNamingStrategy translates property names of properties that should not be visible,etay2000,25994877,,,CLOSED,2019-08-08T18:53:04Z,2019-08-22T06:15:26Z,"Currently the PropertyNamingStrategy#translateName method is called on all class fields and methods, regardless of the PropertyVisibilityStrategy assigned. I would assume that those 'invisible' properties would not have any reason to have their property name translated. 

This led to another somewhat edge case where using a lowercase PropertyNamingStrategy leads to a property being ignored:

```
JsonbConfig config = new JsonbConfig().withPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE_WITH_UNDERSCORES);
Jsonb jsonb = JsonbBuilder.create(config);
Widget widget = new Widget();
Widget2 widget2 = new Widget2();
String widgetJson = jsonb.toJson(widget); //  {""url"":""getter#www.google.com""}
String widget2Json = jsonb.toJson(widget2); // {}

public class Widget  {

        private String url = ""www.google.com"";

        public String getUrl() {
            return ""getter#"" + url;
        }

    }

public class Widget2  {

        private String url = ""www.google.com"";

        public String getURL() {
            return ""getter#"" + url;
        }

    }
```

Because the naming strategy changes 'URL' to 'url' in Widget2, it seems to conflict with the private 'url' field, and although no exception is thrown, no value is returned either. According to the default visibility strategy, the private 'url' field should not visible, so is the fact that a 'invisible' field can cause a conflict with a visible public method a separate issue in itself?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/296/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk1OTcwOQ==,yasson,519959709,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T15:21:17Z,2019-08-09T15:21:17Z,hi @etay2000 thanks for raising this issue along with a testcase! It does indeed seem like odd behavior. I'll try to look into this issue soon.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk1OTcwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDA1NTY0Mw==,yasson,520055643,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T20:37:03Z,2019-08-09T20:37:03Z,"@etay2000 I was able to reproduce the issue you described using Yasson 1.0.4, but when I swapped to Yasson 1.0.5-SNAPSHOT it works fine. I'll add a test for this anyway and we can aim to put out a Yasson 1.0.5 release in the next week or so.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDA1NTY0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDA2NTg3OA==,yasson,520065878,296,NA,etay2000,25994877,,,NA,2019-08-09T21:15:08Z,2019-08-09T21:15:08Z,"@aguibert That's good to hear, and thanks for the quick response! Just to clarify when you say it works fine, do you mean that PropertyNamingStrategy is no longer called for invisible properties or just that there no longer appears to be a conflict with the properties colliding? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDA2NTg3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NTY5NA==,yasson,520175694,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-10T19:58:27Z,2019-08-10T19:58:27Z,"yes, when I say it works fine now I mean that:
```java
String widget2Json = jsonb.toJson(widget2);
```
now prints: `{""url"":""getter#www.google.com""}` as expected

The PropertyNamingStrategy was never inspecting values of the hidden (private) properties, it was just incorrectly noticing that they were there and letting those properties overwrite public properties","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NTY5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE4NDkyMQ==,yasson,520184921,296,NA,etay2000,25994877,,,NA,2019-08-10T22:44:50Z,2019-08-10T22:44:50Z,"So with the 1.0.5 SNAPSHOT, in the following example, is PropertyNamingStrategy#translateName still called on on both properties?

```
void jsonbTest() {
        JsonbConfig config = new JsonbConfig()
                .withPropertyNamingStrategy(new TracingNamingStrategy());
        Jsonb jsonb = JsonbBuilder.create(config);
        Widget widget = new Widget();
        String json = jsonb.toJson(widget); // {""show"":""visible""}
        // prints:
        // translateName: hide
        // translateName: hide
        // translateName: show
        // translateName: show
    }

    public static class Widget {

        private String hide = ""invisible"";
        public String show = ""visible"";

    }

    public class TracingNamingStrategy extends LowerCaseStrategy {

        @Override
        public String translateName(String propertyName) {
            System.out.println(""translateName: "" + propertyName);
            return super.translateName(propertyName);
        }

        @Override
        protected char getSeparator() {
            return '_';
        }

    }
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE4NDkyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NzM2Mg==,yasson,520197362,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-11T03:34:18Z,2019-08-11T03:34:18Z,"yes, with 1.0.5.SNAPSHOT translateName is still called on both properties","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NzM2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDIzMTI0MA==,yasson,520231240,296,NA,etay2000,25994877,,,NA,2019-08-11T14:07:55Z,2019-08-11T14:07:55Z,Is the fact that the NamingStrategy is still translating property names on properties that are never serialized a bug? Even if the translated property name is ignored because the property is not visible it still seems inefficient to do the translation in the first place. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDIzMTI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0NjE2MA==,yasson,520246160,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-11T17:33:55Z,2019-08-11T17:33:55Z,"I wouldn't say it's a bug, but it is a bit inefficient yes. However, I expect the performance impact is negligible. Keep in mind that class parsing only happens on the first time a given `Jsonb` instance serializes/deserializes a particular class. After that, the property model is cached for reuse.

So the most important thing for JSON-B performance is that `Jsonb` instances are reused as much as possible (ideally saved off in a `private static final` field), and not recreated each time you do to/fromJson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0NjE2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI1MDA5OA==,yasson,520250098,296,NA,etay2000,25994877,,,NA,2019-08-11T18:31:51Z,2019-08-11T18:31:51Z,"Fair enough, perhaps not a bug but maybe an enhancement then? Without digging into the code it seems like it would be as simple as checking property visibility and only conditionally using the naming strategy on visible properties?  Either way, thanks for your help.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI1MDA5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI4OTcwOA==,yasson,520289708,296,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-12T03:26:23Z,2019-08-12T03:26:23Z,"Yes it could be a minor enhancement. However, we will be working on the next version of JSON-B soon here, and [one of the features being considered](https://github.com/eclipse-ee4j/jsonb-api/issues/61) is to make JSON-B annotations get processed by default regardless of visibility, which would require Yasson to be looking at private fields once again.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI4OTcwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/296,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ2NDkxMw==,yasson,520464913,296,NA,etay2000,25994877,,,NA,2019-08-12T15:07:54Z,2019-08-12T15:07:54Z,"Ok cool, sounds good to me.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ2NDkxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/297,https://api.github.com/repos/eclipse-ee4j/yasson/issues/297,yasson,478935255,297,Include property name that failed to serialize in error messages,nimo23,3045549,,,CLOSED,2019-08-09T11:17:55Z,2019-08-26T02:14:18Z,"**I get this error:**

`SEVERE [org.eclipse.yasson.internal.Marshaller] double value cannot be Infinite or NaN`

Please include the **""property name""** in this error message which makes the trouble. It's a mess to search for that property manually.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/297/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/297,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2MzQzOA==,yasson,519963438,297,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T15:31:56Z,2019-08-09T15:31:56Z,"hi @nimo23, what version of Yasson are you using here? I thought in Yasson 1.0.4 I did add logging to include the property name that failed.

Also, in PR #295 we're going a step farther and also including the value in addition to the property name.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2MzQzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/297,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2NjgyMQ==,yasson,519966821,297,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T15:41:28Z,2019-08-09T15:41:28Z,"ah, I see the problem. We only include the property name that failed for the deserialization process, but not the serialization process. This should be fixed","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk2NjgyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/297,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk4MDUyOA==,yasson,519980528,297,NA,nimo23,3045549,,,NA,2019-08-09T16:23:28Z,2019-08-09T16:23:28Z,ok thanks! I am actually using **yasson v1.0.4**.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTk4MDUyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/298,https://api.github.com/repos/eclipse-ee4j/yasson/issues/298,yasson,478954485,298,Caused by: java.lang.OutOfMemoryError: Java heap space,nimo23,3045549,,,CLOSED,2019-08-09T12:10:01Z,2019-08-09T18:59:33Z,"I get this error while trying to convert an entity to json string and the **stacktrace does not show me which property makes trouble**. So I search like a needle in a haystack. Please add at least the property which makes trouble.

By the way, using exactly the same bean hierarchy and converting to json string with Jackson does not throw any `java.lang.OutOfMemoryError` and json output is sucessfully. But with Yasson, converting the same bean hierarchy to json string does not work and throws this stacktrace:


```
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3746)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:172)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:686)
	at java.base/java.lang.StringBuffer.append(StringBuffer.java:409)
	at java.base/java.io.StringWriter.write(StringWriter.java:99)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.flushBuffer(JsonGeneratorImpl.java:651)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeString(JsonGeneratorImpl.java:608)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeString(JsonGeneratorImpl.java:614)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeIndent(JsonPrettyGeneratorImpl.java:108)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeComma(JsonPrettyGeneratorImpl.java:116)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeName(JsonGeneratorImpl.java:171)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeKey(JsonGeneratorImpl.java:489)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeKey(JsonPrettyGeneratorImpl.java:53)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:88)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializeItem(AbstractContainerSerializer.java:157)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:39)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.CollectionSerializer.serializeInternal(CollectionSerializer.java:27)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/298/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/298,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAyODYwMQ==,yasson,520028601,298,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T18:59:01Z,2019-08-09T18:59:01Z,"hi @nimo23, I'm going to close this issue as a duplicate of #299. It looks like the root problem for both issues is the same -- there is an infinite recursive loop happening somewhere. It just happens to manifest itself as a StackOverflow in some cases and a OutOfMemory in other cases.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAyODYwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/298,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAyODc0OQ==,yasson,520028749,298,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T18:59:33Z,2019-08-09T18:59:33Z,"also, we can use #297 for the general case of including property name whenever there is an unknown serialization failure","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAyODc0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,yasson,478970275,299,Caused by: java.lang.StackOverflowError while converting toJson,nimo23,3045549,,,CLOSED,2019-08-09T12:49:25Z,2019-08-13T20:47:12Z,"Another `java.lang.StackOverflowError` from a bean hierarchy (works in jackson, fails in yasson). Yasson does not show which property makes the trouble. I cannot find the error at the moment. The stacktrace shows nothing but this:

```
Caused by: java.lang.StackOverflowError
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.DefaultSerializers.findByCondition(DefaultSerializers.java:130)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.DefaultSerializers.findValueSerializerProvider(DefaultSerializers.java:126)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.SerializerBuilder.getSupportedTypeSerializer(SerializerBuilder.java:149)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.SerializerBuilder.build(SerializerBuilder.java:85)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:102)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/299/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAxODE1OA==,yasson,520018158,299,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-09T18:24:57Z,2019-08-09T18:24:57Z,"hi @nimo23, can you please include the Java models for the classes you are using?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDAxODE1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTYyOQ==,yasson,520191629,299,NA,nimo23,3045549,,,NA,2019-08-11T01:05:26Z,2019-08-11T01:05:26Z,"I found the error: It s because of circular dependencies between classes. In my case it was a **indirect** circular dependency.

A direct circular dependency example:

```
public class User{
    private Task task;
    ...
}
```

```
public class Task {
    private User user;
    ...
}
```

```
// creates java.lang.StackOverflowError, as it s going from user->task->user->..
jsonb.toJson(user)
```

```
// creates java.lang.StackOverflowError, as it s going from taks->user->taks->..
jsonb.toJson(taks)
```

A solution would be: provide at least feedback which property has circular dependency and stop the processing in such cases..and maybe **a better solution would be to only process unidirectional directions and ignore bidirectional directions**:

`jsonb.toJson(user)// should process user->taks and ignore taks->user`

`jsonb.toJson(taks)// should process taks->user and ignore user->taks`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTYyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NjgzMQ==,yasson,520196831,299,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-11T03:19:37Z,2019-08-11T03:19:37Z,"I am curious, when you say this ""works in Jackson"", what does Jackson produce? Does it stop serializing data once a cycle is reached?

I think we should add circular dependency checking to Yasson, there are a few ways we could do this:
1. Throw a JsonbException if a cycle is detected (better than let it StackOverflow or OOM)
2. Stop processing the JSON if a cycle is detected
3. Use JSON Pointers (being considered at the spec level here: https://github.com/eclipse-ee4j/jsonb-api/issues/72)

Of the 3 options, I think option (3) using JSON Pointers would be the best approach.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NjgzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDIwODUzMg==,yasson,520208532,299,NA,nimo23,3045549,,,NA,2019-08-11T07:58:52Z,2019-08-11T07:58:52Z,">Does it stop serializing data once a cycle is reached?

There were a @JsonIgnore on the other side..

>I think option (3) 

yes, would be the best
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDIwODUzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0MzY1Mg==,yasson,520243652,299,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-11T16:57:36Z,2019-08-11T16:57:36Z,"The JSON-B equivalent to Jackson's `@JsonIgnore` is the `@JsonbTransient` annotation. So if you put `@JsonbTransient` on the other side, it should work the same as Jackson did.

For example, this code works for me:
```java
    public static class Foo {
        public String name = ""foo"";
        @JsonbTransient
        public Foo self;
    }

// ...
        Foo foo = new Foo();
        foo.self = foo;
        System.out.println(jsonb.toJson(foo)); // {""name"":""foo""}

```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0MzY1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0NTI3MA==,yasson,520245270,299,NA,nimo23,3045549,,,NA,2019-08-11T17:20:14Z,2019-08-11T17:20:14Z,"hi. yes I know. However, I did not find the trouble made prop immediatly..

Would be nice to solve circulare deps with JSON Pointers because putting @JsonbTransient at the other side prevents json processing for this property in all cases even if I select the the other side as the root for json processing. 

```
public class Task {
    //
    @JsonbTransient
    private User user;
    ...
}
```

```
// (de)serialize ""user->task"" (root is user)
jsonb.toJson(user)
```

```
// root is task
// should (de)serialize ""task->user"" but user cannot be processed because of @JsonbTransient
jsonb.toJson(task)
```

With JSON Pointers I am not forced to put `@JsonbTransient` on the other side..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI0NTI3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/299,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAwMjY2MQ==,yasson,521002661,299,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-13T20:47:11Z,2019-08-13T20:47:11Z,"Closing this item as a duplicate of #297 (Include property name when a property fails to serialize)

If we eliminate the fact that the property name is not included when serialization fails, the behavior here is the same as Jackson, because with either library the user must add an annotation to ignore the property that leads to the circular reference. Earlier in the issue we also discussed the possibility of better handling this via JSON Pointers, but that item is already tracked at the spec level and would be an enhancement rather than a bug.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAwMjY2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/303,https://api.github.com/repos/eclipse-ee4j/yasson/issues/303,yasson,479258957,303,don't let unresolved proxies cancel json-processing,nimo23,3045549,,,OPEN,2019-08-10T11:45:39Z,2019-08-11T03:39:45Z,"I get this error when  converting object to json-string with json-b:

` javax.json.bind.JsonbException: Internal error: failed to lazily initialize a collection of role: test.Task.logs, could not initialize proxy - no Session`

`Task` is a JPA Entity having `logs`-property as a `lazy` defined relationship, thus it's a **proxy**. I dont bother to include `logs`-property within json string. 

Json-B should treat _unresolvable_ proxies **as null values by default** instead of not generating a json-string and rethrowing exception.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/303/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/303,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NjA0MA==,yasson,520176040,303,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-10T20:04:30Z,2019-08-10T20:04:30Z,"hi @nimo23, can you include the full stack trace of the error, and also include an example of the JPA entity class being used here?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NjA0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/303,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTEzOA==,yasson,520191138,303,NA,nimo23,3045549,,,NA,2019-08-11T00:53:21Z,2019-08-11T00:53:21Z,"hi, this is the full stacktrace - **only one line** of error message and no json string output.

The code which produces the error:

```
// because I used LAZY instead of EAGER
@OneToMany(mappedBy = ""test"", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
private Set<Task> tasks;
```

If I use EAGER, Json-B works but with LAZY Json-B fails. So Json-B has problems with unresolvable proxies - it should return null for such props instead of breaking and rethrowing..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTEzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/303,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NzU2NA==,yasson,520197564,303,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-11T03:39:44Z,2019-08-11T03:39:44Z,"we might be able to add a special-case in Yasson where we automatically ignore certain JPA entity proxy methods.

Could you please upload a a dump of all of the:
 - methods on your entity class at runtime by using `theEntity.getClass().getMethods()`
 - fields on your entity class at runtime by using `theEntity.getClass().getFields()`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5NzU2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/304,https://api.github.com/repos/eclipse-ee4j/yasson/issues/304,yasson,479273284,304,annotations within class should have higher precedence than class annotations,nimo23,3045549,,,CLOSED,2019-08-10T14:35:58Z,2019-08-11T03:40:07Z,"I have this:

```
@JsonbVisibility(value = PrivateVisibilityStrategy.class)
public class Task{

@JsonbProperty(nillable = true)
public Set<Item> getItems(){
return ...;
}
}
```

Now, even I explicitly assign `@JsonbProperty` on a getter,  the value is **not** (de)serialized because of `@JsonbVisibility(value = PrivateVisibilityStrategy.class)`. Is this okay? If I choose to select a getter to (de)serialize as an exception, then json-b should take the inner annotation with higher priority than the class level annotation. 

**So the precedence should be (from higher to lower):**

**runtime configuration > property/getter/setter annotations > class level annotations**","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/304/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/304,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NTk2NQ==,yasson,520175965,304,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-10T20:02:57Z,2019-08-10T20:02:57Z,"This issue on the JSON-B spec repo looks similar to what you are suggesting:
https://github.com/eclipse-ee4j/jsonb-api/issues/61

If you agree, we can close this issue as a duplicate of it","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE3NTk2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/304,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTMzNQ==,yasson,520191335,304,NA,nimo23,3045549,,,NA,2019-08-11T00:58:21Z,2019-08-11T00:58:21Z,"yes, close this issue, if you think it s the same. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDE5MTMzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,yasson,479414230,305,Serializing org.slf4j.Logger results in StackOverflowError,nimo23,3045549,,,CLOSED,2019-08-11T21:27:50Z,2019-11-24T20:19:31Z,"With jackson I get the following json-string as a result of an empty bean with the setting `mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)`

`{ }`


With yasson I get this stacktrace:


```
Caused by: java.lang.StackOverflowError
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeString(JsonGeneratorImpl.java:608)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeString(JsonGeneratorImpl.java:614)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeIndent(JsonPrettyGeneratorImpl.java:108)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeComma(JsonPrettyGeneratorImpl.java:116)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeName(JsonGeneratorImpl.java:171)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonGeneratorImpl.writeKey(JsonGeneratorImpl.java:489)
	at org.glassfish.javax.json@1.1.2//org.glassfish.json.JsonPrettyGeneratorImpl.writeKey(JsonPrettyGeneratorImpl.java:53)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:88)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
```

I guess, the stacktrace is thrown because there are no accessors for that bean. In my opinion, if no accessors are found `{ }` should be returned for that bean instead of `StackOverflowError` ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/305/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI5MDI1Nw==,yasson,520290257,305,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-12T03:31:55Z,2019-08-12T03:31:55Z,"hi @nimo23, are you sure there is not a circular dependency reference somewhere in your bean object? Can you share the contents of your java class?

If I try the following code, it works as expected:
```java
public class AGGMain {

    public static class Bar {
        // no properties here
    }

    private static final Jsonb jsonb = JsonbBuilder.create();

    public static void main(String args[]) throws Exception {
        Bar empty = new Bar();
        System.out.println(jsonb.toJson(empty)); // prints: {}
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDI5MDI1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDM0MDM3OA==,yasson,520340378,305,NA,nimo23,3045549,,,NA,2019-08-12T08:35:51Z,2019-08-12T08:35:51Z,"I found the error, it's the `log` property. Use this class to reproduce:

```
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestBean {

	// The logger throws java.lang.StackOverflowError
	protected final Logger log = LoggerFactory.getLogger(getClass());

	private final String name;

	public TestBean(String name) {
		this.name = name;
	}

	public boolean nameIsSet() {
		return name != null;
	}
}
```

I get this stacktrace which differs a little from the above:

```
Caused by: java.lang.StackOverflowError
	at java.base/java.util.concurrent.ConcurrentHashMap$BaseIterator.<init>(ConcurrentHashMap.java:3426)
	at java.base/java.util.concurrent.ConcurrentHashMap$ValueIterator.<init>(ConcurrentHashMap.java:3467)
	at java.base/java.util.concurrent.ConcurrentHashMap$ValuesView.iterator(ConcurrentHashMap.java:4732)
	at org.eclipse.yasson//org.eclipse.yasson.internal.ComponentMatcher.searchComponentBinding(ComponentMatcher.java:192)
	at org.eclipse.yasson//org.eclipse.yasson.internal.ComponentMatcher.getSerializerBinding(ComponentMatcher.java:148)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.SerializerBuilder.build(SerializerBuilder.java:73)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:102)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:103)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:61)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)

```

**If I delete the `log` property all works.**

If I use  `mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)`, jackson will see the `log`-property as an empty bean and will not try to (de)serialize it, so I guess, jacksons definition of **what is an emtpy bean is a little larger** than yassons definition of an empty bean.


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDM0MDM3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMTQ0Mw==,yasson,520431443,305,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-12T13:46:47Z,2019-08-12T13:46:47Z,"normally `Logger`s are defined as `static`, and static fields will not be included as a bean property","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMTQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzNDA1OA==,yasson,520434058,305,NA,nimo23,3045549,,,NA,2019-08-12T13:53:25Z,2019-08-12T13:53:25Z,"Imagine defining  a logger within  an abstract class and each extended class has a logger instance with its class name (getClass()), this is common. Also, in 3rd party libs, a  Logger can be defined  without using static (for example, within an abstract class) and we cannot use `@JsonBTransient` on 3rd party libs. Jackson (with disabled FAIL_ON_EMPTY_BEANS) does generally  not  include the logger instance  variable within  json (de)serializing which makes sense. 

**Should  not be matter , if static logger or not..yasson should  not try to (de)serialize a logger instance.**","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzNDA1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDk5OTY5OA==,yasson,520999698,305,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-13T20:38:20Z,2019-08-13T20:38:20Z,"I tried this out locally and got the same StackOverflowError. While I still think non-static Loggers is bad practice, Yasson should tolerate this scenario better than it currently does.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDk5OTY5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAwMzg2OA==,yasson,521003868,305,NA,nimo23,3045549,,,NA,2019-08-13T20:50:46Z,2019-08-13T20:50:46Z,"Yes, that would be good. 

_Btw, could you please look at https://github.com/eclipse-ee4j/yasson/issues/306 again and think about to re-open. Would be great._ 
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAwMzg2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc5MTE4Mg==,yasson,549791182,305,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-05T11:52:20Z,2019-11-05T11:52:20Z,"Shouldn't be transient the logger instance?:
`protected final transient Logger log = LoggerFactory.getLogger(getClass());`

Then you can reuse the logger in subclasses, and the json parser should skip the log from serialization.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc5MTE4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/305,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkyMzk4OQ==,yasson,557923989,305,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-24T20:19:31Z,2019-11-24T20:19:31Z,this issue should now be resolved by PR #359 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkyMzk4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,yasson,479591111,306,(de)serialize Double <-> String,nimo23,3045549,,,OPEN,2019-08-12T11:17:26Z,2023-08-06T21:10:44Z,"I get this error when trying to (de)serialize the primitive type `double`:

```
13:11:18,793 SEVERE [org.eclipse.yasson.internal.Marshaller] double value cannot be Infinite or NaN
13:11:18,803 SEVERE [org.eclipse.yasson.internal.Marshaller] Generating incomplete JSON
13:11:18,803 ERROR [io.util.EntityTool] javax.json.bind.JsonbException: Internal error: double value cannot be Infinite or NaN
```

When I change `double` to `Double` all works. 
Am I forced to change all the primitive ""`double`"" properties to ""`Double`"" only to work with yasson?

_Btw, the error log does not show **which** property makes trouble..but it's a property with the type ""double""_","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/306/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMjQ0Mg==,yasson,520432442,306,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-12T13:49:23Z,2019-08-12T13:49:23Z,"hi @nimo23, this issue seems to be an exact duplicate of this other issue you raised earlier:
https://github.com/eclipse-ee4j/yasson/issues/297","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMjQ0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMjk1Mg==,yasson,520432952,306,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-12T13:50:44Z,2019-08-12T13:50:44Z,"> Am I forced to change all the primitive ""double"" properties to ""Double"" only to work with yasson?

No, either one is acceptable. The issue is (as the error message indicates) you can't serialize/deserialize infinite/NaN values into double/Double","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQzMjk1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ0MzgyMA==,yasson,520443820,306,NA,nimo23,3045549,,,NA,2019-08-12T14:17:51Z,2019-08-12T14:17:51Z,">this issue seems to be an exact duplicate of this other issue you raised earlier:

No duplicate, the other was about ""show the property  which makes trouble""..
this issue is about ""double/Double conversion""..

**You say:** 

> you can't serialize/deserialize infinite/NaN values into double/Double

Is this okay? Why not (de)serializing a NaN value to NaN?

`Double test = Double.NaN;`

Does it makes sense to convert NaN to what it is: a `NaN`:
```
{
..
test: ""NaN""
..
}


```

How should one know beforehand when a Double is NaN or not? Yasson should not stop to (de)serialize a Double if the value is NaN. The information about the Double value should be propagated to the json string and vice versa! 

**The `NaN` or `Infinty` is still a valid information! Why answering with an Yasson- Exception?**","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ0MzgyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ0NzkwOQ==,yasson,520447909,306,NA,nimo23,3045549,,,NA,2019-08-12T14:27:33Z,2019-08-12T14:27:33Z,"I actually looked at what Jackson does with such values. Jackson does what it should!
```

{
  ""val1"" : ""NaN"",
  ""val2"" : 1.0,
  ""val3"" : 0.0,
  ""val4"" : ""Infinity""
}
```

Please re-open this issue.

I tried to switch from jackson to yasson..however I found many stumbling blocks which are not really thought through with little logical failures by the yasson maintainers . This issue is one example again..

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDQ0NzkwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAzMzI2OQ==,yasson,521033269,306,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-13T22:29:51Z,2019-08-13T22:29:51Z,"Jackson produces values for infinity and Nan, but these are represented as Strings, not numbers, which would likely break clients that are expecting a number value here.

The JSON-B spec builds on top of the JSON-P spec, and currently the JSON-P spec mandates that these values throw an exception:
```java
    /**
     * Writes the specified value as a JSON number value within the current
     * array, field or root context. The string {@code BigDecimal.valueOf(value).toString()}
     * is used as the text value for writing.
     *
     * @param value a value to be written in current JSON array
     * @return this generator
     * @throws javax.json.JsonException if an i/o error occurs (IOException
     * would be cause of JsonException)
     * @throws JsonGenerationException if this method is not called within an
     *      array or root context.
     * @throws NumberFormatException if the value is Not-a-Number (NaN) or infinity.
     */
    JsonGenerator write(double value);
```

There is also a more general problem for double values that are outside of the range outside of Java's `double` primitive. This issue is being discussed at the JSON-P level here:
https://github.com/eclipse-ee4j/jsonp/issues/160

So while I think this is a valid topic that needs to be discussed, the proper place to resolve this is at the JSON-P spec level in issue 160, rather than here in Yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTAzMzI2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTEyNzMyOQ==,yasson,521127329,306,NA,nimo23,3045549,,,NA,2019-08-14T07:02:36Z,2019-08-14T07:02:36Z,"Hi @aguibert,

could Json-B provide a **workaround** as long as Json-P does not handle `NaN`and `Infinity` of `Double` values  correctly? 

Yasson should use a **`Converter`** internally to provide `NaN` and `Infinty` for the Wrapper `Double` and uses that behind the (de)serializing process when detecting a `Double`.

Please provide a converter as a workaround or something like this:

**Converter for Double to Json-String:**

```
try{
    // normal conversion to double
}
catch(NumberFormatException ex){
    if(val == Double.NaN) return ""NaN"";
    if(Double.isInfinite(val) && val>0) return ""Infinity"";
    if(Double.isInfinite(val) && val<0) return ""-Infinity"";
}
```

**Converter for String to Double:**

```
try{
    if(val == ""NaN"") return Double.NaN;
    if(val == ""Infinity"") return Double.POSITIVE_INFINITY;
    if(val == ""-Infinity"") return Double.NEGATIVE_INFINITY;
    // normal conversion to double
    ...
}

```

You can remove the converter from Yasson  after Json-P supports the wrapper `Double`:

`JsonGenerator write(Double value);`

Actually, I cannot use Yasson **because it does not handle Double right,** I am forced to switch back to Jackson because of this.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMTEyNzMyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDg3NzA3Mg==,yasson,524877072,306,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-08-26T14:13:27Z,2019-08-26T14:13:27Z,I don't agree that it should be solved at JSONP level. I think we should consider it as an enhancement for the new JSONB spec or as a Yasson specific feature.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDg3NzA3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/306,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMzMwNjA3NQ==,yasson,533306075,306,NA,tsfullman,10775315,,,NA,2019-09-19T20:56:11Z,2019-09-19T20:56:11Z,I am having this issue too and would love for the serialization of Infinity to work correctly similar to Jackson,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMzMwNjA3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/307,https://api.github.com/repos/eclipse-ee4j/yasson/issues/307,yasson,482331002,307,Marshaling Generic Type results in WARNINGS each execution,sean-scott-lr,52219783,Sean Scott,,CLOSED,2019-08-19T14:02:21Z,2019-11-26T14:44:24Z,"
yasson-1.0.4.jar

When marshalling a class that utilizes a generic type ( See example below ), a WARNING message is produced each time.  However, the correct json is produced.

I am experiencing this issue when using Quarkus and the WARNING produced occurs on every request to my endpoint.

Example:

```
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;

public class YassonTest {
    public static void main(String[] args){
        JsonbConfig config = new JsonbConfig() .withNullValues(false);
        Jsonb jsonb = JsonbBuilder.create(config);
        String result = jsonb.toJson(new MyEnvelopeClass<MyPayloadClass>(new MyPayloadClass()));
        System.out.println( result );
    }

    public static class MyPayloadClass {
        private String myField = ""fieldValue"";

        public String getMyField(){
            return myField;
        }
    }

    public static class MyEnvelopeClass<T> {
        private T content;

        public MyEnvelopeClass(T content) {
            this.content = content;
        }

        public T getContent() {
            return content;
        }
    }
}
```


Output

```
Aug 19, 2019 8:00:03 AM org.eclipse.yasson.internal.ReflectionUtils resolveItemVariableType
WARNING: Generic bound not found for type T declared in class YassonTest$MyEnvelopeClass.
{""content"":{""myField"":""fieldValue""}}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/307/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/307,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjU5MjA1OQ==,yasson,522592059,307,NA,sean-scott-lr,52219783,Sean Scott,,NA,2019-08-19T14:09:06Z,2019-08-19T14:09:06Z,"Related to:
https://github.com/quarkusio/quarkus/issues/3538","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjU5MjA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/307,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDM4OTY1MQ==,yasson,524389651,307,NA,mdzaebel,415392,Marc Dzaebel,,NA,2019-08-23T17:02:03Z,2019-08-23T17:02:03Z,Got same warning in a different case and would really like to get rid of it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDM4OTY1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/307,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODY2MTE3Ng==,yasson,558661176,307,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-26T14:44:24Z,2019-11-26T14:44:24Z,The fix for this issue has been delivered and will be included in the next release of Yasson (1.0.6),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODY2MTE3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/309,https://api.github.com/repos/eclipse-ee4j/yasson/issues/309,yasson,483521080,309,Adapters not applied properly for properties of differing read/write type,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2019-08-21T16:20:10Z,2019-09-06T22:54:45Z,"If I register a JsonbAdapter for a type T, it will not be correctly applied to properties of type Optional<T> upon serialization. For example:

### Adapter class:
```java
public class ThrowableAdapter implements JsonbAdapter<Throwable, Map<String, Object>> {

  @Override
  public Map<String, Object> adaptToJson(Throwable obj) throws Exception {
    HashMap<String, Object> output = new HashMap<>();
    output.put(""message"", obj.getMessage());
    output.put(""type"", obj.getClass().getName());

    return unmodifiableMap(output);
  }

  @Override
  public Throwable adaptFromJson(Map<String, Object> obj) throws Exception {
    throw new UnsupportedOperationException(""not implemented"");
  }
}
```

### Property class:
```java
public class ValueClass {

  public Instant getStartedAt() { ... }

  public Optional<Instant> getFinishedAt() { ... }

  public Optional<Throwable> getException() { ... }

  // setters ....
}
```

If we attempt to serialize an object of type `ValueClass` like this:
```java
public class JsonbTypeAdapterTest {

  private final JsonbConfig config = new JsonbConfig()
      .withAdapters(
          new ThrowableAdapter()
      )
      .withFormatting(true);

  private final Jsonb jsonb = JsonbBuilder.newBuilder()
      .withConfig(config)
      .build();

  @Test
  public void testTypeAdapter() {
    ValueClass obj = new ValueClass();
    obj.setStartedAt(Instant.now());
    obj.setException(new RuntimeException(""hit me""));
    
    String toJson = jsonb.toJson(obj); // fails with ClassCastException
  }
}
```

### Stack trace:
```
javax.json.bind.JsonbException: Unable to serialize property 'exception' from org.example.testcase.jsonbtypeadapter.ValueClass
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:68)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:148)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:102)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:118)
	at org.example.testcase.jsonbtypeadapter.JsonbTypeAdapterTest.testTypeAdapter(JsonbTypeAdapterTest.java:31)
Caused by: javax.json.bind.JsonbException: Problem adapting object of type class java.lang.Throwable to java.util.Map<java.lang.String, java.lang.Object> in class class org.example.testcase.jsonbtypeadapter.ThrowableAdapter
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:72)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:100)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:66)
	... 24 more
Caused by: java.lang.ClassCastException: java.util.Optional incompatible with java.lang.Throwable
	at java.base/java.lang.ClassCastException.<init>(ClassCastException.java:71)
	at org.example.testcase.jsonbtypeadapter.ThrowableAdapter.adaptToJson(ThrowableAdapter.java:9)
	at org.eclipse.yasson.internal.serializer.AdaptedObjectSerializer.serialize(AdaptedObjectSerializer.java:61)
	... 27 more
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/309,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzkwMzA2OA==,yasson,523903068,309,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-22T13:20:13Z,2019-08-22T13:20:13Z,"After investigating this more I realized that it has to do with a little more than just the getter methods on the JSON model class. This occurs when there is a field of the same name as a getter, but with different types, for example:
```java
public class ValueClass {
   
  private Throwable exception;

  public Optional<Throwable> getException() { ... }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzkwMzA2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/309,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDA2Mzc5OQ==,yasson,524063799,309,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2019-08-22T20:25:57Z,2019-08-22T20:25:57Z,"Good finding! Actually, in my real application, I was using Immutables (https://github.com/immutables/immutables), i.e. a generated class. It indeed uses `@Nullable Throwable exception` internally, because Optional should of course never be used in a field.

That's omnited in the example from https://github.com/eclipse-ee4j/yasson/issues/309#issue-483521080, but does it still produce the same error?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDA2Mzc5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/309,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDY5MTAyNQ==,yasson,524691025,309,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-26T02:18:36Z,2019-08-26T02:18:36Z,"hi @bmhm, yes I was able to reproduce the issue with the generated class, and after attaching a debugger I realized that the root issue was the property field and corresponding getter method having different Java types.

I expect to have a PR soon which you could use to confirm the fix.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDY5MTAyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/316,https://api.github.com/repos/eclipse-ee4j/yasson/issues/316,yasson,486600057,316,Improve Exception message when default constructor is missing,Simulant87,5322205,,,CLOSED,2019-08-28T20:45:06Z,2019-09-06T22:55:19Z,"Caused by this issue https://github.com/quarkusio/quarkus/issues/3179 

```
Caused by: javax.json.bind.JsonbException: Internal error: null
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:76)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:56)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:53)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:93)
	at org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:66)
	... 98 more
Caused by: java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:201)
	at org.eclipse.yasson.internal.serializer.ObjectDeserializer.getInstance(ObjectDeserializer.java:94)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:61)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:70)
	... 102 more
```

I would like to improve the Message of the Exception when a default constructor is missing.
I would put an additional null check into ObjectDeserializer#getInstance and throw an Exception when the constructor is not present containing the name of the class so a user knows the affected class and how to fix the issue.

As I said, I would like to provide a fix by myself in the following days.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/316/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/316,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNzMzMDgyNA==,yasson,527330824,316,NA,Simulant87,5322205,,,NA,2019-09-03T06:58:12Z,2019-09-03T06:58:12Z,"I closed the ticket, as the merge request containing the enhancement is merged.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNzMzMDgyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/319,https://api.github.com/repos/eclipse-ee4j/yasson/issues/319,yasson,487138753,319,Bug: BigDecimal serialized with comma as decimal divider,Simulant87,5322205,,,OPEN,2019-08-29T19:34:38Z,2019-08-31T09:43:14Z,"when I execute the Test `org.eclipse.yasson.documented.DocumentationExampleTest#testDateNumberFormats1` on my local system, it fails because the BigDecimal gets serialized to `123,46` instead of `123.46` containing a comma instead of a dot as decimal divider.

This might be caused by the default localization settings (german) of my local system in combination with the used test class adding a Numberformat to the field `@JsonbNumberFormat(""#0.00"")`, but I would expect the test still not to fail depending on my local settings.

I think it is a bug as the JSON specification only allows the dot `.` as decimal dot and not the comma `,` referencing to the number section https://tools.ietf.org/html/rfc7159#section-6
So the BigDecimal `123.46` should never, even not with my german local settings get serialized to `123,46` as this results in invalid JSON.

Full JUnit output of the test `org.eclipse.yasson.documented.DocumentationExampleTest#testDateNumberFormats1`
```
org.junit.ComparisonFailure: 
Expected :{""birthDate"":""07.08.1999"",""name"":""Jason Bourne"",""salary"":""123.46""}
Actual   :{""birthDate"":""07.08.1999"",""name"":""Jason Bourne"",""salary"":""123,46""}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/319/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/319,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjQ0MDE2Mg==,yasson,526440162,319,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-08-30T03:18:43Z,2019-08-30T03:18:43Z,"thanks for raising this issue @Simulant87, I've also raised https://github.com/eclipse-ee4j/jsonb-api/issues/188 on the JSON-B spec so we can clarify this at the spec level in the future","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjQ0MDE2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/319,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjQ3OTc5OQ==,yasson,526479799,319,NA,Simulant87,5322205,,,NA,2019-08-30T06:43:12Z,2019-08-30T06:43:12Z,"Thank you for taking this onto the spec level, after I saw existing tests failing, I already had the feeling that this should be clarified on a higher level.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjQ3OTc5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/319,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjgxNjc0NQ==,yasson,526816745,319,NA,Simulant87,5322205,,,NA,2019-08-31T09:40:16Z,2019-08-31T09:40:16Z,"@aguibert I had again a look at the tests and now I am even thinking about rejecting my own merge request. As the input **and** the output of the BigDecimal is stored as a **String** (in quotes) in JSON the localized formatting is totally valid also in JSON as it is not a **Number** ( without quotes and only allowing `.`) but a String, that on the other side might be parsed with the same localized settings and could fail if this is not applied as expected.

I was just confused by the default picking up the system default locale to format the BigDecimal String representation and as a result the tests are not system (locale) independent.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjgxNjc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/322,https://api.github.com/repos/eclipse-ee4j/yasson/issues/322,yasson,487754359,322,Tests should fail on change to YassonProperties Strings,Simulant87,5322205,,,CLOSED,2019-08-31T10:09:13Z,2019-09-02T17:57:16Z,"In some Tests the fields defined in `YassonProperties` are use to configure the test setup.
When I change the values of the Strings, simulating a typo that got commited, the tests should fail, but because they use the String from the same field all tests stay green.

The test setup should use raw duplicated Strings, so the tests fail, if the String defined in the fields changes.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/322/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/326,https://api.github.com/repos/eclipse-ee4j/yasson/issues/326,yasson,489370168,326,@JsonbCreator-annotated inaccessible constructors shouldn't overrule no-arg constructor,JohT,7671054,Johannes,,CLOSED,2019-09-04T20:08:31Z,2020-03-28T16:22:34Z,"As mentioned in [yasson/pull/280](https://github.com/eclipse-ee4j/yasson/pull/280)
and shown by the currently ignored unit test method 
""AnnotationIntrospectorTest.testNoArgConstructorShouldBePreferredOverUnusableJsonbAnnotatedProtectedConstructor"",
inaccessible constructors lead to an error, even if there is also an valid standard no-arg constructor. 

This is a cause of using ""creators"" (e.g. constructors) if they exist, 
even if they can't be used at the end.

I guess, this is something to discuss, since the specification seems not to be that clear IMO, how it ""should"" be.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/326/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/326,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyODI4NTc1OQ==,yasson,528285759,326,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-09-05T09:41:09Z,2019-09-05T09:41:09Z,"Yes, I agree that the spec is bit loose in this area. We are currently collecting suggestions for JSONB.next in JSONB API [issues tracker](https://github.com/eclipse-ee4j/jsonb-api/issues). Feel free to make your suggestions there. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyODI4NTc1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/326,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ3MzI0MA==,yasson,605473240,326,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T16:22:33Z,2020-03-28T16:22:33Z,"Dmitry is right that this should be considered at the spec level. I've adjusted this spec-level issue to also include what is being asked for here:
https://github.com/eclipse-ee4j/jsonb-api/issues/61","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ3MzI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,yasson,489649030,328,ZonedDateTime uses ObjectDeserializer ,Celludriel,5664766,Kenny De Smedt,,CLOSED,2019-09-05T09:52:37Z,2019-10-02T08:22:51Z,"Hey, 

Consider following code:

java version ""1.8.0_211""
Java(TM) SE Runtime Environment (build 1.8.0_211-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)

```
<!-- JSON -->
<!-- JSON-P API -->
<dependency>
	<groupId>javax.json</groupId>
	<artifactId>javax.json-api</artifactId>
	<version>1.1</version>
</dependency>

<!-- JSON-P RI -->
<dependency>
	<groupId>org.glassfish</groupId>
	<artifactId>javax.json</artifactId>
	<version>1.1</version>
	<scope>runtime</scope>
</dependency>

<!-- JSON-B API -->
<dependency>
	<groupId>javax.json.bind</groupId>
	<artifactId>javax.json.bind-api</artifactId>
	<version>1.0</version>
</dependency>

<!-- Yasson (JSON-B RI) -->
<dependency>
	<groupId>org.eclipse</groupId>
	<artifactId>yasson</artifactId>
	<version>1.0.4</version>
	<scope>runtime</scope>
</dependency>
```

```
public class TestJson implements JsonObject {

    @JsonbDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"")
    private ZonedDateTime zonedDateTime;

    public ZonedDateTime getZonedDateTime() {
        return zonedDateTime;
    }

    public void setZonedDateTime(ZonedDateTime zonedDateTime) {
        this.zonedDateTime = zonedDateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;

        if (o == null || getClass() != o.getClass()) return false;

        TestJson testJson = (TestJson) o;

        return new EqualsBuilder()
                .append(getZonedDateTime(), testJson.getZonedDateTime())
                .isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 37)
                .append(getZonedDateTime())
                .toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this)
                .append(""zonedDateTime"", zonedDateTime)
                .toString();
    }
}

public class DateFormatTest {

    private JsonMapper jsonMapper = new JsonMapper();

    @Test
    public void dateFormatTest(){
        TestJson testJson = new TestJson();

        LocalDateTime ldt = LocalDateTime.of(2016, Month.AUGUST, 22, 14, 30);
        ZonedDateTime klDateTime = ldt.atZone(ZoneId.of(""Europe/Paris""));

        testJson.setZonedDateTime(klDateTime);

        String result = jsonMapper.toJSON(testJson);

        System.out.println(result);

        TestJson afterRemarshal = jsonMapper.toObjectFromJSON(TestJson.class, result);

        Assertions.assertThat(testJson).isEqualTo(afterRemarshal);
    }
}
```

You would expect that after you serialize and deserialize both results would be the same.  However the result is:

`
org.junit.ComparisonFailure: 
Expected :be.delijn.test.TestJson@3003697[zonedDateTime=2016-08-22T14:30Z[UTC]]
Actual   :be.delijn.test.TestJson@4e41089d[zonedDateTime=2016-08-22T14:30+02:00[Europe/Paris]]
`

After debugging I found out that he is using ObjectDeserializer instead of what I assumed had to be DateTypeDeserializer.java.

Is this expected behavior or a bug and how can we fix it that this test would work.  Do we need to write our own custom Deserializer ?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/328/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTIxNTk2Mw==,yasson,531215963,328,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-09-13T12:22:06Z,2019-09-13T12:22:06Z,"Hi @Celludriel,

I have to say, that I am a bit confused about your example here. For example JsonMapper is not in this project at all. But anyway I have done some rework to your example and found out that you need to add VV at the end of your formatting String. It adds the exact Zone name. It should look like this after the change `@JsonbDateFormat(""yyyy-MM-dd'T'HH:mm:ssZVV"")`

Let me know if it works as expected now :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTIxNTk2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTM1MzczMA==,yasson,531353730,328,NA,Celludriel,5664766,Kenny De Smedt,,NA,2019-09-13T18:59:38Z,2019-09-13T18:59:38Z,"Hey @Verdent 

Apologies, I didn't notice JsonMapper is my helper class to do some of the basic work.  It totally slipped my sight.

I'm home from work now , I'll try it first thing on monday and give you an answer","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTM1MzczMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzAwNTE1Mw==,yasson,537005153,328,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-10-01T12:05:43Z,2019-10-01T12:05:43Z,Not a bug.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzAwNTE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzEwMjAxMA==,yasson,537102010,328,NA,Celludriel,5664766,Kenny De Smedt,,NA,2019-10-01T15:52:05Z,2019-10-01T15:52:05Z,"Apologies it totally slipped my mind, indeed not a bug your proposed solution worked !","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzEwMjAxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/328,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzM4OTk1MA==,yasson,537389950,328,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-10-02T08:22:51Z,2019-10-02T08:22:51Z,No worries :-) I am glad I could help.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzM4OTk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,yasson,491173917,331,Unexpected char ,nimo23,3045549,,,CLOSED,2019-09-09T15:39:21Z,2023-11-13T17:34:04Z,"I get this error and I dont know why. The whole stacktrace only shows this:

```
17:33:00,373 SEVERE [org.eclipse.yasson.internal.Unmarshaller] 
Unexpected char 119 at (line no=1, column no=2, offset=1), expecting 'r'
17:33:00,373 ERROR [my.Utils]
 javax.json.bind.JsonbException: Internal error: Unexpected char 119 at (line no=1, column no=2, offset=1), expecting 'r'
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/331/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTY2MzAxNQ==,yasson,529663015,331,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-09T20:55:21Z,2019-09-09T20:55:21Z,"hi @nimo23, to proceed we will need to get more info. Is the `my.Utils` class burying the exception?  We will need to print the full stack trace somehow.

When an internal error occurs on deserialization, we wrap it in a `JsonbException` but still keep the original exception as a causedBy:
```java
        } catch (Exception e) {
            logger.severe(e.getMessage());
            throw new JsonbException(Messages.getMessage(MessageKeys.INTERNAL_ERROR, e.getMessage()), e);
        }
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTY2MzAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTY2NTQ1Nw==,yasson,529665457,331,NA,nimo23,3045549,,,NA,2019-09-09T21:01:56Z,2019-09-09T21:01:56Z,"Hi,

this is the full stacktrace. No more info is provided by yasson. The my.Utils calls the following method (which works for different entities):

```
public static <T> T fromJsonToObject(String json, Class<T> clazz) {
		try (var jsonb = JsonbBuilder.create()) {
			return jsonb.fromJson(json, clazz);
		} catch (Exception e) {
			log.error(e);
			return null;
		}
	}
```

As I log the stacktrace by` log.error(e)`, I would expect the whole yasson stacktrace is shown in `e`. Or?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTY2NTQ1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTMzNjAwMw==,yasson,531336003,331,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-13T18:05:41Z,2019-09-13T18:05:41Z,"hi @nimo23, I""m not sure what logging framework you are using, but it is fairly common for loggers to only log the exception message and not the full stack trace. Try adding a `e.printStackTrace()` or something.

Also, I see you are calling `JsonbBuilder.create()` on each invocation of this method. This will cause very poor performance, since `Jsonb` instances are supposed to be cached. I suggest you initialize your `Jsonb` instance as `static final Jsonb jsonb = JsonbBuilder.create()` (don't need to worry about closing it in a try-with-resource block)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTMzNjAwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTM0MDg4MQ==,yasson,531340881,331,NA,nimo23,3045549,,,NA,2019-09-13T18:20:24Z,2019-09-13T18:20:24Z,"I use jboss logging provided by wildfly container..

`e.printStackTrace ` instead of log.error(e) ? Really? I think, `e` also logs the full stacktrace. I did not use `e.getMessage()` but `e` which should also print the full stacktrace like `e.printStacktrace`. And using e.printStacktrace instead of log.error() is not good practice. 
https://stackoverflow.com/questions/10477607/avoid-printstacktrace-use-a-logger-call-instead

Yasson does not output more information at this error..it is normal, that `e.printStackTrace ` and `log.error(e)` prints the same ""full"" stacktrace..


> I see you are calling JsonbBuilder.create()

thanks for the tip. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTM0MDg4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA4NDI2MQ==,yasson,551084261,331,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-07T13:43:08Z,2019-11-07T13:43:08Z,"@nimo23 could you copy-paste the JSON you are parsing?. Is it possible that the JSON doesn't have double quotes in a key?. Next example would fail with the same error you have:
`{test:""any""}`
The correct format would be:
`{""test"":""any""}`

`Caused by: javax.json.stream.JsonParsingException: Unexpected char 101 at (line no=2, column no=2, offset=3), expecting 'r'
	at org.glassfish.json.JsonTokenizer.expectedChar(JsonTokenizer.java:583)
	at org.glassfish.json.JsonTokenizer.readTrue(JsonTokenizer.java:281)
	at org.glassfish.json.JsonTokenizer.nextToken(JsonTokenizer.java:366)
	at org.glassfish.json.JsonParserImpl$ObjectContext.getNextEvent(JsonParserImpl.java:442)
	at org.glassfish.json.JsonParserImpl.next(JsonParserImpl.java:352)
	at org.eclipse.yasson.internal.JsonbRiParser.next(JsonbRiParser.java:143)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:75)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:68)
	... 27 more`


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA4NDI2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA5MTc0NQ==,yasson,551091745,331,NA,nimo23,3045549,,,NA,2019-11-07T14:02:06Z,2019-11-07T14:02:06Z,"@jbescos  i cannot trace the error anymore because I did forget the origin json data causing that error...the problem with this is also that the stacktrace produced by yasson did and does not provide more information than needed to trace the error..

however, I think in my case, something like `{test:""any""}` was not the case because I did convert json from yasson or jackson to string and vice versa..so keys had always double quotes..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA5MTc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTEzNDg4NQ==,yasson,551134885,331,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-07T15:41:50Z,2019-11-07T15:41:50Z,"@nimo23 I don't know jboss logging provided by wildfly (could you copy-paste the import of the logger?), but it is very likely that the line you have in the method 'fromJsonToObject' only displays the error message. Then you will not see the stack trace and the cause:
`log.error(e);`

If it is similar to log4j, you should modify that line by this other:
`log.error(""Cannot convert from json: ""+json, e);`

You can see how does it behave with 2 tests:

`
    
    @Test
    public void exceptionWithNoStackTrace() {
        Exception e = new RuntimeException(""test"");
        log.error(e);
    }
    
    @Test
    public void exceptionFullStack() {
        Exception e = new RuntimeException(""test"");
        log.error(""Unexpected error"", e);
    }

`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTEzNDg4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTE4ODE3MA==,yasson,551188170,331,NA,nimo23,3045549,,,NA,2019-11-07T17:44:59Z,2019-11-07T17:44:59Z,"thanks. good to know..I assumed that
 `log.error(e);` prints **same detail** of stacktrace as `log.error(""Unexpected error"", e);`

I use the logger provided by the container:
`import org.jboss.logging.Logger;`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTE4ODE3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTI4MjYxOA==,yasson,551282618,331,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-07T21:52:28Z,2019-11-07T21:52:28Z,"Good catch @jbescos, calling `log.error(e)` where `e` is an Exception will invoke `org.jboss.logging.Logger.error(Object o)`
which logs the `toString()` of the passed in object which for Exceptions is just the caused by.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTI4MjYxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2ODE1Mg==,yasson,605468152,331,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T16:12:35Z,2020-03-28T16:12:35Z,Closing this issue because there hasn't been any activity for a while and it seems the confusion was caused by calling the incorrect logging method on the user end.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2ODE1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/331,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rzc0H,yasson,1808649479,331,NA,prudhvidhar18,98135740,Prudhvidhar Reddy Gopireddy,,NA,2023-11-13T17:34:04Z,2023-11-13T17:34:04Z,"javax.json.stream.JsonParsingException: Unexpected char 80 at (line no=1, column no=12, offset=11)


Hello I am getting this Error . could you please help me","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rzc0H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/333,https://api.github.com/repos/eclipse-ee4j/yasson/issues/333,yasson,493455420,333,Improve performance with internal cache of Jsonb instances,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,OPEN,2019-09-13T18:15:35Z,2019-11-25T08:18:40Z,"The biggest performance issue I see when people use JSON-B is that they create a new `Jsonb` instance on each request. This is understandable because for users that are coming from Jackson, they are used to creating a `new ObjectMapper()` instance on every request.

However, Yasson performs all of its class introspection and annotation scanning scoped per `Jsonb` instance. So if a user does not cache their instance, they are paying the penalty for running the scanning on every request.

Since Jsonb instances are thread-safe, if multiple instances have the same configuration (same JsonbConfig and same JsonProvider), they can be considered the same. 

So if a user does:
```java
Jsonb a = JsonbBuilder.create();
Jsonb b = JsonbBuilder.create();
```
We should hand back instances such that `a == b`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/333/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/333,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODA0MjY0Mg==,yasson,558042642,333,NA,bravehorsie,9378230,Roman Grigoriadi,roman.grigoriadi@gmail.com,NA,2019-11-25T08:18:40Z,2019-11-25T08:18:40Z,"Just a note that in contrast to Jackson, Yasson can be loaded by a shared classloader in and old-style application servers such is Glassfish or Weblogic. This may cause sharing the cache between different apps or their versions. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODA0MjY0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,yasson,494633714,335,POC: Improve deserialization performance,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,OPEN,2019-09-17T13:44:44Z,2020-03-07T15:15:38Z,"I'm currently rewritting deserialization to improve it's performance.

Tests (ops/ms):
1. NewDeserializerTest: deserialization of flat map with 50 elements (mix of JSON string, number, true, false and null)
2. NewArrayDeserializerTest: deserialization of flat array with 100 elements
3. NewPoJoDeserializerTest: Deserialization of simple POJO with strings, numbers and boolean values
4. NewComplexPoJoStructureDeserializerTest: Deserialization of nested object structure
```
+------------------+-----+-----+-----+-----+
| Test             | T1  | T2  | T3  | T4  |
+------------------+-----+-----+-----+-----+
| Old deserializer | 60  | 72  | 369 | 184 |
+------------------+-----+-----+-----+-----+
| 25th Nov 2019    | 114 | 125 | 466 | 293 |
+------------------+-----+-----+-----+-----+
| 28th Nov 2019    | 112 | 123 | 428 | 272 |
+------------------+-----+-----+-----+-----+
| 22th Jan 2020    | 106 | 136 | 395 | 254 |
+------------------+-----+-----+-----+-----+
| 5th Mar 2020    | 108 | 110 | 391 | 237 |
+------------------+-----+-----+-----+-----+
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjIzMTE4NA==,yasson,532231184,335,NA,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,NA,2019-09-17T13:53:45Z,2019-09-17T13:53:45Z,@aguibert @Verdent @m0mus @mkarg What do you guys think about this? :),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjIzMTE4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjI1NTc0OQ==,yasson,532255749,335,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2019-09-17T14:49:54Z,2019-09-17T14:49:54Z,"PR to check:
https://github.com/Tomas-Kraus/yasson/pull/1","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjI1NTc0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjMyMDk2Mg==,yasson,532320962,335,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2019-09-17T17:29:46Z,2019-09-17T17:29:46Z,"@Tomas-Kraus I always apprciate 20-80% performance gain. As I am not a contributor to Yasson, I leave the technical evaluation to those who are. :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjMyMDk2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjg3NDc4OA==,yasson,532874788,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-18T21:30:32Z,2019-09-18T21:30:32Z,"great news @Tomas-Kraus, looking forward to evaluating it.  It is kind of hard to view what the proposed changes are because the PR https://github.com/Tomas-Kraus/yasson/pull/1/files includes many commits that we have already merged into master and are unrelated to the POC.

Can you please rebase what you have on the current yasson/master branch and make a ""draft PR"" (newish github feature) on the Yasson repo? It will be easier to view that way and since it is a draft nobody can accidentally merge it until you mark it as a ""regular"" PR","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMjg3NDc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDExMDc2MA==,yasson,534110760,335,NA,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,NA,2019-09-23T13:56:53Z,2019-09-23T13:56:53Z,"Looks like git was a bit confused. I did rebase/forcepush so code changes are visible now.
Also, this is far from being finished, it's just another concept of deserializers implementation and I want to know whether you like it or not. :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDExMDc2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDMwMDQ5Mg==,yasson,534300492,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-23T21:54:33Z,2019-09-23T21:54:33Z,"thanks, now I can review the changes much more easily. I've added a comment on the PR on your personal repo, but I would suggest creating a ""Draft PR"" on the main Yasson repo so we can potentially have wider participation","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDMwMDQ5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDMwMDg0MA==,yasson,534300840,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-09-23T21:55:41Z,2019-09-23T21:55:41Z,"If it improves performance and simplifies the codebase, I'm all for it. Main question will be backwards compatibility but I think we can rely on our unit tests and TCK tests here.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDMwMDg0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzEwNjUwNQ==,yasson,537106505,335,NA,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,NA,2019-10-01T16:02:07Z,2019-10-01T16:02:07Z,"Yes, it must pass all jUnits and TCK. :)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzEwNjUwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODI2OTY5Ng==,yasson,568269696,335,NA,nimo23,3045549,,,NA,2019-12-22T14:49:19Z,2019-12-22T14:49:19Z,"According to https://github.com/fabienrenaud/java-json-benchmark, the actual performance of yasson in compare to jackson is not really good. The fastest is https://github.com/ngs-doo/dsl-json which also supports jsonb. Would be nice to improve performance in yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODI2OTY5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODMxMzE2Mw==,yasson,568313163,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-12-22T23:41:58Z,2019-12-22T23:41:58Z,I don't see anywhere on the java-json-benchmark where it actually mentions Yasson. The only related thing it only compares the reference implementation of JSON-P.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODMxMzE2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODQ5MjY0OA==,yasson,568492648,335,NA,nimo23,3045549,,,NA,2019-12-23T14:39:33Z,2019-12-23T14:39:33Z,"> I don't see anywhere on the java-json-benchmark where it actually mentions Yasson. 

@aguibert yasson is evaluated in this benchmark: look at the chart on the X axis (for example, the first chart (""Deserialization performance"") on the 3rd position from the left).

Also look at the benchmarked providers here: https://github.com/fabienrenaud/java-json-benchmark/blob/master/src/main/java/com/github/fabienrenaud/jjb/support/BenchSupport.java on line 18.

You can also run a subset of the performance tests yourself with only 3 json-providers:

`./run deser --apis databind --libs jackson,dsljson,yasson`

Why does `jackson` or `dsljson` has so much better performance in compare to `yasson`?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODQ5MjY0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODUxNzM0Mw==,yasson,568517343,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-12-23T16:21:46Z,2019-12-23T16:21:46Z,"Ah, I see Yasson is mentioned on the graph but it doesn't say what version they used. Never heard of dsljson (or anyone using it), but Jackson has been around for many years longer than JSON-B/Yasson and therefore has had more time to optimize performance. Our primary focus has been on adding functionality, rather than performance.

Yasson is still in the 1.0 version, and it doesn't surprise me that Jackson performs better. As you've found on this issue, @Tomas-Kraus is working on improving performance.

In any case, I don't think JSON databinding performance makes that much difference in the overall picture of application performance. I've ran tests in the past that compare a JAX-RS application using JSON-B vs. Jackson, and once you add in network I/O then JSON databind performance becomes negligible. If I were a user trying to evaluate which JSON library to choose, I would look at factors like adoption, compatibility, and stability before I looked at performance.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODUxNzM0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODUyNDM2MA==,yasson,568524360,335,NA,nimo23,3045549,,,NA,2019-12-23T16:51:26Z,2019-12-23T16:51:26Z,">Ah, I see Yasson is mentioned on the graph but it doesn't say what version they used. 

According to https://github.com/fabienrenaud/java-json-benchmark/blob/master/build.gradle it uses v 1.0.1.

> If I were a user trying to evaluate which JSON library to choose, I would look at factors like adoption, compatibility, and stability before I looked at performance.

Definitly. Well, performance and memory consumption is still important. If I were a maintainer, I would look especially to `jackson` or `dsljson` what techniques they use to have that significantly increased performance in compare to `yasson`.

I mentioned the **java-json-benchmark** only FYI:)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODUyNDM2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NDg4NDY1Ng==,yasson,574884656,335,NA,chrisgleissner,3969147,Christian Gleissner,,NA,2020-01-15T22:22:02Z,2020-01-15T22:22:02Z,"In case anyone is interested in up-to-date benchmark figures of Jackson vs Yasson, I've updated the aforementioned java-json-benchmark via a fork. This uses the latest released versions of both frameworks as of today, all evaluated on Amazon Corretto JDK 11.0.5. You can find the results in the README at https://github.com/chrisgleissner/java-json-benchmark I also included the command-line invocations I used for easy reproduction of the test. 

In a nutshell, Jackson serialization is 2.12 times as fast as Yasson. Deserialization is 3.8 times as fast. And Jackson-Afterburner is even faster. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NDg4NDY1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NTA5NDY3Mw==,yasson,575094673,335,NA,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,NA,2020-01-16T10:48:47Z,2020-01-16T10:48:47Z,@chrisgleissner can you run it with original yasson. I would like to see numbers of original and this yasson.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NTA5NDY3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NTIwNjc1MQ==,yasson,575206751,335,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-16T15:33:32Z,2020-01-16T15:33:32Z,"thanks for creating that comparison @chrisgleissner

@Tomas-Kraus you can run it on your own with the following steps:
```
git clone git@github.com:chrisgleissner/java-json-benchmark.git
cd java-json-benchmark
./run ser --apis databind --libs yasson,jackson --datatype users
```
To change the version of Yasson used you can edit the build.gradle file in the root of the repository","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NTIwNjc1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MjEwMTI0MQ==,yasson,582101241,335,NA,nimo23,3045549,,,NA,2020-02-04T20:31:29Z,2020-02-04T20:31:29Z,"@aguibert does yasson use `java.lang.reflect` under the hood? If so, then please consider to use `java.lang.invoke.LambdaMetafactory`. It's way faster.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MjEwMTI0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NTI5NTk3OQ==,yasson,595295979,335,NA,Tomas-Kraus,37806327,Tomáš Kraus,tomas.kraus@oracle.com,NA,2020-03-05T15:41:30Z,2020-03-05T15:41:30Z,"Well, looks like I found a dead end for JsonValue processing. :D
```
Benchmark                                 Mode  Cnt    Score    Error   Units
NewJsonValueDeserializationTest.testNew  thrpt    5    2.504 ±  0.023  ops/ms
NewJsonValueDeserializationTest.testOld  thrpt    5  227.769 ± 14.534  ops/ms
```
So using Json.createArrayBuilder() and build value is **200** times slower than old code using parser.getArray().

Looks like this part of old deserializer was quite good and I won't improve it much. Using original parser.getArray() / parser.getObject() with slightly faster way to get to it will make just few %.

Last benchmark run also showed me the cost of customization processing on all data types. I've lost few % everywhere.

Current progress:
**[ERROR] Tests run: 440, Failures: 27, Errors: 58, Skipped: 1**
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NTI5NTk3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/335,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NjA5ODM3NA==,yasson,596098374,335,NA,chrisgleissner,3969147,Christian Gleissner,,NA,2020-03-07T15:13:38Z,2020-03-07T15:13:38Z,Please note the the maintainer of the Json benchmark project that I cloned for my benchmark runs has now updated his results using Yasson 1.0.6. He also upgraded other frameworks. The benchmark uses JMH and you can find it at https://github.com/fabienrenaud/java-json-benchmark You see Yasson in the 'Users model' diagrams and you can try a different version by changing the Yasson version in the top level build.gradle file. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NjA5ODM3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/339,https://api.github.com/repos/eclipse-ee4j/yasson/issues/339,yasson,500340484,339,"assign ""0"" for primitive types instead of throwing an error",nimo23,3045549,,,CLOSED,2019-09-30T15:08:15Z,2019-09-30T19:11:43Z,"I get this error:

`javax.json.bind.JsonbException: Internal error: Can not set int field Task.score to null value`

because score is of type `int` instead of `Integer`.

Why does yasson cannot solve this issue by assigning `0` to this `int` field instead of throwing an error which says it cannot set it to `null`? If yasson knows this that this is an `int` which is not assignable to `null`, then it should assigns it to `0` by default. **The same solution should go for all primitive types.** 

_Btw, for `boolean` primitive types, it works as expected. If not set, it defaults to `false` instead of throwing an error._ ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/339/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/339,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjcwODMwNA==,yasson,536708304,339,NA,nimo23,3045549,,,NA,2019-09-30T19:11:43Z,2019-09-30T19:11:43Z,it was my fault..the value is coming from a json file which was set to null for a primitive type.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjcwODMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/341,https://api.github.com/repos/eclipse-ee4j/yasson/issues/341,yasson,500893088,341,Checkstyle plugin,Verdent,4483705,David Král,david.k.kral@oracle.com,CLOSED,2019-10-01T13:23:28Z,2019-10-23T08:53:45Z,"I was thinking about adding maven-checkstyle-plugin to yasson and I was wondering about our requirements here. Basically which checks we want to be included.

I was thinking about following:
-  Charset -> UTF-8
- Line separator -> lf
- Javadoc on methods
- Naming conventions for methods, fields, classes etc.
- Avoid star imports
- Unused/redundant imports
- Illegal imports (such as sun.*)
- Left curly bracket -> on the same line as method, if, class etc.
- Right curly bracket -> alone on the line
- Allow single line statement ( if(1>2) return something; )
- Do not allow statement without {} on the new line ( if (1>2) \n return something; )
- Do not allow empty loop body
- Indentation -> 4 chars
- Max line length -> 130?
- Max method lines -> 150?
- Max method parameters -> 7?
- Do not allow multiple variable declaration on the same line
- One statement per line
- File name have to match name of the class
- More or less all of whitespace handling options -> http://checkstyle.sf.net/config_whitespace.html
- Modifier order -> https://checkstyle.sourceforge.io/config_modifier.html#ModifierOrder
- Redundant modifier -> https://checkstyle.sourceforge.io/config_modifier.html#RedundantModifier
- Checks that classes that either override equals() or hashCode() also overrides the other. 
- Incorrect boolean checks ->  if (b == true), b || true, !false, etc. 
- Incorrect boolean returns
- Utility classes does not have public constructor
- TODO comments
- Check for case statements without break, return etc.
- No trailing whitespaces

And possibly:
- Import ordering

What do you think @aguibert ?

Please check another settings if interested here: https://checkstyle.sourceforge.io/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/341/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/341,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzA5ODc4OA==,yasson,537098788,341,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-10-01T15:44:46Z,2019-10-01T15:44:46Z,"TBH I haven't had much issue with code formatting in the Yasson codebase (most of which I did not write). If you want, we can enable some checkstyle rules, but I'd like to keep out any pedantic checks such as:
- Javadoc on methods --> shouldn't have to javadoc internal/private methods
- Naming conventions for methods, fields, classes etc. --> this can be caught at code review time
- Max line length
- Max method lines
- Max method parameters
- No trailing whitespaces --> I see no need to enforce this
- Import ordering --> I see no need to enforce this","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzA5ODc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/341,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzM5NTU4Mg==,yasson,537395582,341,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-10-02T08:38:35Z,2019-10-02T08:38:35Z,"Well the reason behind this for me is more or less just as a prevention. It sometimes finds some incorrectly formatted or forgotten lines of code and it helps to keep codebase format in track. I wouldn't say that it is bad thing to have.

- Javadoc on methods -> yes definitely only on public. I wouldn't even consider enforcing it anywhere else.
- Naming  conventions -> I just wanted something automated to tell you that you have something incorrect in the name. Then you can fix it even before code review. 
- Max line length
- Max method lines
- Max method parameters -> These three there could improve readability of the methods. But I guess it is more or less just nice to have from my point of view so we can ignore those :-)
- No trailing whitespaces -> I have no problem with not including this one.
- Import ordering -> I have no problem with not including this one.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNzM5NTU4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,yasson,500927146,342,Custom De-Serialization Bug,garrettahines1,33440630,Garrett Hines,,OPEN,2019-10-01T14:15:32Z,2021-07-30T09:42:44Z,"Yasson Version: 1.0.4
Java Version: 11.0.2
OS: Windows 10

When using a custom deserializer for a parameter of an object, any parameter object that comes after that custom deserialized object in the json string is not deserialized and is set to its default value (null, 0, etc.).

Example: 

```java
import java.util.List;

import javax.json.bind.annotation.JsonbTypeDeserializer;

public class A {

	private double a;
	@JsonbTypeDeserializer(BDeserializer.class)
	private List<B> b;
	private String c;

	public A() {

	}

	A(double a, List<B> b, String c) {
		this.a = a;
		this.b = b;
		this.c = c;
	}

	public double getA() {
		return a;
	}

	public void setA(final double a) {
		this.a = a;
	}

	public List<B> getB() {
		return b;
	}

	public void setB(final List<B> bObject) {
		this.b = bObject;
	}

	public String getC() {
		return c;
	}

	public void setC(final String c) {
		this.c = c;
	}
	
}
```

```java
public class B {

	String bString;

	public B() {

	}

	public B(String b) {
		this.bString = b;
	}

	public String getbString() {
		return bString;
	}

	public void setbString(final String b) {
		this.bString = b;
	}
}
```

```java
import java.lang.reflect.Type;
import java.util.List;
import java.util.stream.Collectors;

import javax.json.JsonValue;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.stream.JsonParser;

public class BDeserializer implements JsonbDeserializer<List<B>> {
    @Override
    public List<B> deserialize(final JsonParser parser, final DeserializationContext ctx, final Type rtType) {
        final JsonValue arr = parser.getValue();

        return arr.asJsonArray().stream().map(i -> new B(i.toString())).collect(Collectors.toList());
    }
}
```

```java
import java.util.List;

import javax.json.bind.Jsonb;
import javax.json.bind.spi.JsonbProvider;

import org.junit.jupiter.api.Test;

class Driver {

    private Jsonb jsonb = JsonbProvider.provider().create().build();

    @Test
    void test() {
        A a = new A(2.0, List.of(new B(""test"")), ""test1"");
        String json = jsonb.toJson(a);
        System.out.println(""Serialized Result: "" + json);
        A actual = jsonb.fromJson(json, A.class);
        System.out.println(""Deserialized C Value: "" + actual.getC());
    }
}
```

Output:
Serialized Result: {""a"":2.0,""b"":[{""bString"":""test""}],""c"":""test1""}
Deserialized C Value: null

Output after commenting out `@JsonbTypeDeserializer(BDeserializer.class)` in A class:
Serialized Result: {""a"":2.0,""b"":[{""bString"":""test""}],""c"":""test1""}
Deserialized C Value: test1
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0Nzg3ODMzNA==,yasson,547878334,342,NA,garrettahines1,33440630,Garrett Hines,,NA,2019-10-30T12:30:44Z,2019-10-30T12:30:44Z,Checking in to see any update on this issue. This also happens in 1.0.5.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0Nzg3ODMzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM1MzIyMQ==,yasson,550353221,342,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2019-11-06T15:10:45Z,2019-11-06T15:10:45Z,"I have a similar issue with 1.0.5.

The bug is in **JsonbRiParser**:
Some methods (getValue(), getArrayStream(), ...) don't level.pop();

use parser.getArray() directly and be happy :-).

Cheers,

D.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM1MzIyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM3MTUzOA==,yasson,550371538,342,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-06T15:50:15Z,2019-11-06T15:50:15Z,"hi @garrettahines1, thanks for raising this issue along with testcases! 

Can you try @redmitry's suggestion of doing `final JsonValue arr = parser.getArray();` instead of `final JsonValue arr = parser.getValue();` in your custom deserializer and see if that works?

Also, did this ever work as intended prior to Yasson 1.0.4?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM3MTUzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM3MzYxMA==,yasson,550373610,342,NA,garrettahines1,33440630,Garrett Hines,,NA,2019-11-06T15:54:39Z,2019-11-06T15:54:39Z,"@aguibert 

Confirmed that doing `parser.getArray()` or `parser.getObject()` does work correctly in 1.0.5. 1.0.4 was the first version I used. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM3MzYxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM5NjkyMg==,yasson,550396922,342,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2019-11-06T16:45:34Z,2019-11-06T16:45:34Z,"That's not about the List<> but about the JsonbRiParser wrapper.
As I understand the problem, a custom deserializer calls parser.getValue() and _consume_ events.
Meanwhile,  JsonbRiParser doesn't realize this and think we are still in the point of reading object.
The effects could be different, but should lead to the consequent serialization fails.
Note that the custom value is serialized correctly.

I did the small test (attached) to demonstrate the problem.

Cheers,

Dmitry
[yasson_test.zip](https://github.com/eclipse-ee4j/yasson/files/3815707/yasson_test.zip)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MDM5NjkyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NjgxNDI0OQ==,yasson,796814249,342,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-03-11T15:21:15Z,2021-03-11T15:21:15Z,"I have faced the same issue with `getValue`. The [javadoc says that](https://javaee.github.io/javaee-spec/javadocs/javax/json/stream/JsonParser.html#getValue--):

>  If the parser state is START_ARRAY, the behavior is the same as getArray(). If the parser state is START_OBJECT, the behavior is the same as getObject(). For all other cases, if applicable, the JSON value is read and returned.

So I think it is clear that the getValue should act as the getObject and getArray in the implementation. I'm going to send a PR to master with a little test that also tests an Object. I have tested with Dmitry's test and also works with arrays.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NjgxNDI0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/342,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CN5N,yasson,889773645,342,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-07-30T09:42:44Z,2021-07-30T09:42:44Z,I think this is fixed in the current versions of yasson. Could you please close this as resolved?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CN5N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,yasson,503635638,343,StackOverflowError when property is Exception and method visibility is false,alewis001,3482446,Alex Lewis,,CLOSED,2019-10-07T19:09:02Z,2019-11-24T20:34:08Z,"If a bean to be serialized has a property that is an Exception type, and a PropertyVisibilityStrategy is used that sets Field visibility to true and Method visibility false, the tojson method results in a StackOverflowException.

E.g.
A bean...
```
public class ExampleBean {
  
  @JsonbProperty(""name"")
  private String name;
  
  @JsonbProperty(""exception"")
  private Throwable throwable;

  public void setName(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }

  public void setThrowable(Throwable throwable) {
    this.throwable = throwable;
  }

  public Throwable getThrowable() {
    return throwable;
  }
}
```
Simple app to serialize the bean...
```
public class App {

  public static void main(String[] args) {
    final JsonbConfig config = new JsonbConfig()
            .withPropertyVisibilityStrategy(new PropertyVisibilityStrategy() {
              @Override
              public boolean isVisible(Field field) {
                return true;
              }
              
              @Override
              public boolean isVisible(Method method) {
                return false;
              }
            })
            .withFormatting(true);
    
    final Jsonb jsonb = JsonbBuilder.create(config);
    
    final ExampleBean exampleBean = new ExampleBean();
    exampleBean.setName(""an example bean"");
    exampleBean.setThrowable(new Exception(""an example exception""));
    System.out.println(jsonb.toJson(exampleBean));
  }
}
```

Results in the following exception...
```
Oct 07, 2019 7:55:34 PM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Generating incomplete JSON
Exception in thread ""main"" java.lang.StackOverflowError
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:57)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:393)
	at org.eclipse.yasson.internal.model.GetFromField.internalGetValue(GetFromField.java:26)
	at org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:73)
	at org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:284)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:87)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
```

The last 4 line/elements in the stack are repeated:
```
at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/343/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTgwNDMyOA==,yasson,549804328,343,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-05T12:33:51Z,2019-11-05T12:33:51Z,"My comment doesn't address the issue but explains why do you get the StackOverflowError.

There is a default circular reference in every class that extends Throwable:
`private Throwable cause = this;`

But when the value is read from method it returns null (there is no circular reference):
`public synchronized Throwable getCause() {
        return (cause==this ? null : cause);
 }`

You should not get that error if the exception is instanced in this way:
`new Exception(""an example exception"", null);`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTgwNDMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA4MTY3MQ==,yasson,551081671,343,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2019-11-07T13:36:33Z,2019-11-07T13:36:33Z,"In fact this is not a bug. Your configuration is incorrect @alewis001 . You are overriding field visibility here with method isVisible(Field field) and setting all fields explicitly to true. When serialization happens, your field serialized even when if isVisible(Method method) is set to false. 
```
@Override
public boolean isVisible(Field field) {
   return true;
}
              
@Override
public boolean isVisible(Method method) {
   return false;
}
```
But yes I agree that even when this happens, there should be some kind of exception thrown other then `java.lang.StackOverflowError`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA4MTY3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA5NjczNQ==,yasson,551096735,343,NA,alewis001,3482446,Alex Lewis,,NA,2019-11-07T14:14:38Z,2019-11-07T14:14:38Z,@Verdent Thanks for the clarification. I wondered whether that was the situation but thought I'd raise just in case.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTA5NjczNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/343,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkyNTI2NQ==,yasson,557925265,343,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-24T20:34:08Z,2019-11-24T20:34:08Z,"Now that PR #359 is merged you should no longer get a stack overflow, and will instead get a more useful error message like this:

```
Exception in thread ""main"" javax.json.bind.JsonbException: Unable to serialize property 'exception' from org.aguibert.test.AGGMain.ExampleBean
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:71)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:146)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:74)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:100)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:119)
	at org.aguibert.test.AGGMain.go(AGGMain.java:76)
	at org.aguibert.test.AGGMain.main(AGGMain.java:51)
Caused by: javax.json.bind.JsonbException: Unable to serialize property 'cause' from java.lang.Exception
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:71)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69)
	... 7 more
Caused by: javax.json.bind.JsonbException: Recursive reference has been found in class class java.lang.Exception.
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:76)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69)
	... 11 more
```

Closing this issue because we've addressed the immediate issue (invalid config) and the underlying confusion (poor error messages for recursive references)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkyNTI2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/345,https://api.github.com/repos/eclipse-ee4j/yasson/issues/345,yasson,505140428,345,Serializing enums as property or as Map key has different behavior in case of toString overriding,srius,17590313,Sébastien Rius,srius@free.fr,CLOSED,2019-10-10T09:14:04Z,2019-11-24T21:51:16Z,"Hi all,

I noticed a different behavior in enums serialization depending on its usage as a standalone json property or as a key in a map, when enum's `toString()` method is overrided. Here is a simple test to reproduce:

```java
public class EnumKeyTest {

    @Test
    public void shouldHaveHomogeneousSerialization() {
        Jsonb jsonb = JsonbBuilder.create();

        Map<MyEnum, Integer> enumMap = new EnumMap<MyEnum, Integer>(MyEnum.class);
        enumMap.put(MyEnum.ENUM_ONE, 0);

        String enumMapJson = jsonb.toJson(enumMap);
        String enumJson = jsonb.toJson(MyEnum.ENUM_ONE);

        assert enumMapJson.contains(enumJson) : ""enum keyed map keys are not serialized the same way than standalone enums"";
    }

    enum MyEnum {
        ENUM_ONE, ENUM_TWO;

        @Override public String toString() {
            return this.name().toLowerCase();
        }
    }
}
```

For `enumMapJson` and `enumJson` output values are:

```json
{""enum_one"":0}
""ENUM_ONE""
```

In case of enum usage as a map key, it seems that `toString()` is called during serialization. It should have been `name()`.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/345/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/345,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkzMTY3Mg==,yasson,557931672,345,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-24T21:51:16Z,2019-11-24T21:51:16Z,Closing this issue since it has been resolved by PR #347 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzkzMTY3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/346,https://api.github.com/repos/eclipse-ee4j/yasson/issues/346,yasson,505164307,346,"Custom JsonbAdapter/JsonbSerializer not working on ""known root types""",deBFM,5907636,Dennis Kronbügel,,CLOSED,2019-10-10T09:57:52Z,2020-04-29T16:37:30Z,"yasson:1.0.4 doesn't respect custom JsonbAdapter/JsonbSerializer on ""known root types"" anymore.

The outcome of the testcode below differs between yasson:1.0.2 and yasson:1.0.4

With yasson:1.0.2 all test pass
With yasson:1.0.4 the ""adaptKnownRootType"" test fails.

 I assume the problem came from the Marshaller change in PR 215 https://github.com/eclipse-ee4j/yasson/pull/215/files#diff-44d72b506105258cffab226412abc88bR129

```java
import org.junit.jupiter.api.Test;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.adapter.JsonbAdapter;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BugReport {

    /*
        This test passes while using yasson:1.0.2 but fails with yasson:1.0.4.
        I assume the problem came from the Marshaller change in PR 215
        https://github.com/eclipse-ee4j/yasson/pull/215/files#diff-44d72b506105258cffab226412abc88bR129
     */
    @Test
    void adaptKnownRootType() {
        String str = ""Original"";
        JsonbConfig jsonbConfig = new JsonbConfig().withAdapters(new StringAdapter());
        String json = JsonbBuilder.create(jsonbConfig).toJson(str, str.getClass());
        assertEquals(""{\""str\"":\""Adapted\""}"", json.toString());
    }

    /*
        This test passes on yasson:1.0.2 and yasson:1.0.4, because the Adapter transforms an object which isn't a ""Known Type"".
     */
    @Test
    void adaptUnknownRootType() {
        SomeObject obj = new SomeObject();
        JsonbConfig jsonbConfig = new JsonbConfig().withAdapters(new SomeObjectAdapter());
        String json = JsonbBuilder.create(jsonbConfig).toJson(obj, obj.getClass());
        assertEquals(""{\""obj\"":\""Adapted\""}"", json.toString());
    }

    static class StringAdapter implements JsonbAdapter<String, JsonObject> {
        @Override
        public JsonObject adaptToJson(String obj) {
            return Json.createObjectBuilder().add(""str"", ""Adapted"").build();
        }

        @Override
        public String adaptFromJson(JsonObject obj) throws Exception {
            return """";
        }
    }

    static class SomeObjectAdapter implements JsonbAdapter<SomeObject, JsonObject> {

        @Override
        public JsonObject adaptToJson(SomeObject obj) throws Exception {
            return Json.createObjectBuilder().add(""obj"", ""Adapted"").build();
        }

        @Override
        public SomeObject adaptFromJson(JsonObject obj) throws Exception {
            return new SomeObject();
        }
    }

    static class SomeObject {
    }

}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/346/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/346,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAwOTI2NA==,yasson,543009264,346,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-10-17T05:28:53Z,2019-10-17T05:28:53Z,"hi @deBFM, thanks for opening this issue with a test case to reproduce the issue. It does look like an incorrect behavior change happened in 1.0.4, and the line of code you pointed out seems like a likely suspect.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAwOTI2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/346,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAyODU5MQ==,yasson,543028591,346,NA,albers,2901725,Harald Albers,,NA,2019-10-17T06:38:03Z,2019-10-17T06:38:03Z,"I also came across this issue when migrating a webapp from Wildfly 17.0.1.Final to 18.0.0.Final.
Thanks for tracking down the issue to this particular code change, @deBFM.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAyODU5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/346,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTMyNjYwOQ==,yasson,621326609,346,NA,deBFM,5907636,Dennis Kronbügel,,NA,2020-04-29T16:37:30Z,2020-04-29T16:37:30Z,Thanks a lot!,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTMyNjYwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/351,https://api.github.com/repos/eclipse-ee4j/yasson/issues/351,yasson,507194098,351,Copyright plugin,Verdent,4483705,David Král,david.k.kral@oracle.com,CLOSED,2019-10-15T11:52:48Z,2019-11-20T21:31:06Z,I will add copyright plugin to yasson which will ensure correct and updated copyright at each file. From what I have seen so far it is not the case in many of our files in repository.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/351/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/353,https://api.github.com/repos/eclipse-ee4j/yasson/issues/353,yasson,507708386,353,JsonBindingProvider not a subtype,nimo23,3045549,,,CLOSED,2019-10-16T08:51:10Z,2019-10-17T08:32:45Z,"I get the following runtime error sporadically and I dont know the reason. Many times it works, sometimes this error is shown (this is the **whole** stacktrace):


`
java.lang.RuntimeException:java.util.ServiceConfigurationError:javax.json.bind.spi.JsonbProvider:org.eclipse.yasson.JsonBindingProvider not a subtype`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/353/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/353,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAwNzc2Mw==,yasson,543007763,353,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-10-17T05:22:22Z,2019-10-17T05:22:22Z,"hi @nimo23, usually I've seen errors like this when there is a classloader conflict of some sort. For example, 2 copies of JSON-B API being loaded from 2 different classloaders. Double check your maven dependencies and ensure that you aren't pulling in 2 copies of `javax.json.bind` anywhere, or if you're running in an app server check to see if the app server is providing 1 copy and you also have 1 copy packaged inside your ear/war.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzAwNzc2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/353,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzA2Nzk2Mg==,yasson,543067962,353,NA,nimo23,3045549,,,NA,2019-10-17T08:32:45Z,2019-10-17T08:32:45Z,Thanks. Error is gone after rebuild.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzA2Nzk2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,yasson,510959709,355,@JsonbProperty on setter is broken 1.0.5,tsfullman,10775315,,,CLOSED,2019-10-22T22:23:29Z,2023-11-07T06:17:11Z,"After updating from 1.0.4 to 1.0.5, my unit test breaks which now deserializes my 2d array to null every time. It previously deserialized correctly with 1.0.4 and passed the test.  It only doesn't work when there is a custom deserializer associated with the class.

I am deserializing to an interface which my class implements. The interface has the custom deserializer annotated on it for multiple types.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/355/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTMxMTg2Mw==,yasson,545311863,355,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-10-23T07:36:16Z,2019-10-23T07:36:16Z,"hi @tsfullman, thanks for reporting this issue. Are you able to provide a test case to reproduce the issue?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTMxMTg2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTMyMjYwMw==,yasson,545322603,355,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-10-23T08:06:50Z,2019-10-23T08:06:50Z,Looking through the changes I believe this PR may have been related: https://github.com/eclipse-ee4j/yasson/pull/271 to the behavior change,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTMyMjYwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTQ4NDcwNg==,yasson,545484706,355,NA,tsfullman,10775315,,,NA,2019-10-23T14:57:07Z,2019-10-23T14:57:07Z,"Ok so after looking at this more I don't think it's related to the custom deserialization or arrays at all. What happened was I had a setter that didn't match the name of the variable. However, I annotated it with @JsonbProperty and it was still ignored. The getter still registers the @JsonbProperty as expected.

For example:

```java
import java.util.Objects;
import javax.json.bind.annotation.JsonbProperty;

public class Bob {
    
    private String apple;

    public Bob() {
    }

    public Bob(final String test) {
        setTest(test);
    }

    @JsonbProperty(""apple"")
    public String getTest() {
        return apple;
    }

    @JsonbProperty(""apple"")
    public void setTest(String test) {
        this.apple = test;
    }

    @Override
    public int hashCode() {
        return Objects.hash(apple);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Bob other = (Bob) obj;
        return Objects.equals(apple, other.apple);
    }
}

```

which causes this unit test to fail on the assertEquals(b,b1); because the string apple is null in the deserialized object  which passed with 1.0.4:

```java
    @Test
    public void test() {
        final Bob b = new Bob(""hi"");
        
        final String h = JsonbProvider.provider().create().build().toJson(b);
        
        final String expectedJson = ""{\""apple\"":\""hi\""}"";
        
        assertEquals(expectedJson, h); //this passes
        
        final Bob b1 = JsonbProvider.provider().create().build().fromJson(h, Bob.class);
        
        assertNotNull(b1.getTest()); //this fails but passes in 1.0.4
    }
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTQ4NDcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NzI5MTkzMg==,yasson,547291932,355,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-10-29T07:29:15Z,2019-10-29T07:29:15Z,"The bug started happening after #288, if I revert 'propertyModel.getPropertyName()' to 'propertyModel.getReadName()' the test passes again, but then 2 other tests break.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NzI5MTkzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NzI5MjkyMQ==,yasson,547292921,355,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-10-29T07:33:02Z,2019-10-29T07:33:02Z,"Printing out the names (in properties.forEach) it looks like the annotation is getting ignored somewhere when setting the PropertyName:
PROPNAME: test (name of the setter, was 'setTest')
READNAME: apple (name of the field)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NzI5MjkyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTQ2OTY0Mg==,yasson,549469642,355,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-04T17:49:22Z,2019-11-04T17:49:22Z,"thanks for the investigation @Degubi, it looks like you are on the right track. Are you going to continue investigating this one? Just want to make sure we don't duplicate work","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTQ2OTY0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTUwOTgyMg==,yasson,549509822,355,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-11-04T19:28:30Z,2019-11-04T19:28:30Z,"Yes I do @aguibert, I was just waiting for some feedback before continuing. :)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTUwOTgyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTU1MzU4NA==,yasson,549553584,355,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-11-04T21:24:07Z,2019-11-04T21:24:07Z,"Actually I don't think I have the right idea to fix this @aguibert. I was poking around in ClassParser::toPropertyMethod, I found that this is the method that creates the names used in Property.java. I thought that the problem was that the check was missing for the JsonbProperty annotation (in ClassParser::toPropertyMethod), but then other tests broke when I put in the annotation handling code... so had to put in more checks to see if the class has a declared private field as the value of the JsonbProperty annotation. Now the broken and all the original tests pass, but I don't think this is the right solution... just seems wrong to me. (sorry for the bad wording, my English is not my native language)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTU1MzU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/355,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTYxMzYxMQ==,yasson,549613611,355,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-05T00:47:32Z,2019-11-05T00:47:32Z,"I think you were sort of on the right track @Degubi, the main issue is that we had 2 separate PropertyModel instances for the class when we should only have had one. In PR #357 I added some extra code to process the PropertyModel list for a class and merge duplicate PropertyModels as needed. I'm considering two PropertyModels duplicate if their readName and writeName attributes are equal.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTYxMzYxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,yasson,524640512,361,Premature EOF,garrettahines1,33440630,Garrett Hines,,CLOSED,2019-11-18T21:51:01Z,2020-03-28T16:05:45Z,"**Describe the bug**
Sometimes when de-serializing a large amount of data, a permature EOF IOException is thrown. The same data can pass and fail.

**To Reproduce**
Using Yasson to deserialize things over a REST endpoint. Return large amount of data and try a couple times until error is thrown.

**Expected behavior**
Json data is succesfully de-serialized every time.

**System information:**
 - OS: Windows
 - Java Version: 11
 - Yasson Version: 1.0.5

**Additional context**
```
Caused by: javax.json.bind.JsonbException: Internal error: I/O error while parsing JSON
        at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:74)
        at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:54)
        at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:53)
        at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:93)
        at org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:70)
        ... 79 more
Caused by: javax.json.JsonException: I/O error while parsing JSON
        at org.glassfish.json.JsonTokenizer.read(JsonTokenizer.java:466)
        at org.glassfish.json.JsonTokenizer.readNumberChar(JsonTokenizer.java:219)
        at org.glassfish.json.JsonTokenizer.readNumber(JsonTokenizer.java:248)
        at org.glassfish.json.JsonTokenizer.nextToken(JsonTokenizer.java:389)
        at org.glassfish.json.JsonParserImpl$ArrayContext.getNextEvent(JsonParserImpl.java:535)
        at org.glassfish.json.JsonParserImpl.next(JsonParserImpl.java:352)
        at org.eclipse.yasson.internal.JsonbRiParser.next(JsonbRiParser.java:143)
        at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:75)
        at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
        at org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:174)
        at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:84)
        at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:60)
        at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:68)
        ... 83 more
Caused by: java.io.IOException: Premature EOF
        at java.base/sun.net.www.http.ChunkedInputStream.readAheadBlocking(ChunkedInputStream.java:565)
        at java.base/sun.net.www.http.ChunkedInputStream.readAhead(ChunkedInputStream.java:609)
        at java.base/sun.net.www.http.ChunkedInputStream.read(ChunkedInputStream.java:696)
        at java.base/java.io.FilterInputStream.read(FilterInputStream.java:133)
        at java.base/sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3495)
        at java.base/java.io.FilterInputStream.read(FilterInputStream.java:133)
        at org.jboss.resteasy.specimpl.AbstractBuiltResponse$InputStreamWrapper.read(AbstractBuiltResponse.java:580)
        at org.apache.commons.io.input.ProxyInputStream.read(ProxyInputStream.java:99)
        at java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
        at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
        at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
        at java.base/java.io.InputStreamReader.read(InputStreamReader.java:185)
        at org.glassfish.json.JsonTokenizer.fillBuf(JsonTokenizer.java:495)
        at org.glassfish.json.JsonTokenizer.read(JsonTokenizer.java:456)
        ... 95 more
```
https://stackoverflow.com/questions/12335687/java-io-ioexception-premature-eof-in-rest-in-java-using-jersey stackoverflow that seems similar to my issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/361/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQxNzQ4Ng==,yasson,556417486,361,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-20T21:25:30Z,2019-11-20T21:25:30Z,"hi @garrettahines1, thanks for raising this issue. Approximately what size are the payloads your application is reading, and what is the max heap size of your JVM?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQxNzQ4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQyMTM1Mg==,yasson,556421352,361,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-11-20T21:29:02Z,2019-11-20T21:29:02Z,"also, are there any interesting characteristics about the payload? For example:
 - large number of small properties
 - deeply nested object structure
 - very large properties (i.e. a 10000 char string)
 - what data types are being unmarshalled into (e.g. String, arrays, collections, byte arrays, etc)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQyMTM1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQ2MTA1OQ==,yasson,556461059,361,NA,garrettahines1,33440630,Garrett Hines,,NA,2019-11-20T22:05:17Z,2019-11-20T22:05:17Z,"Using the default java heap size for java 11 and the data structure is mostly a large array of doubles and each double is relatively small, usually no more than 20 digits.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NjQ2MTA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzUyMzE2MA==,yasson,557523160,361,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2019-11-22T13:02:15Z,2019-11-22T13:02:15Z,"@garrettahines1 from your stack trace, I imagine that you are connecting to that REST server with an HTTP client (resteasy) and you are having that exception in the client. Did you check the server logs?, maybe there is some relevant information there.

Just to discard there is nothing wrong in server side, could you try with a different HTTP client?, for example with curl. If you are able to do this, could you attach the obtained JSON so we can use it in a test?.

I have tried it with a big array of doubles but I don't get any error. I put it here if you want to try it or make modifications:
```
    @Test
    public void bigStream() throws UnknownHostException, IOException, InterruptedException {
        final int PORT = 16666;
        final int ITERATIONS = 10000000;
        CountDownLatch latch = new CountDownLatch(1);
        Executors.newSingleThreadExecutor().execute(() -> {
            try(ServerSocket server = new ServerSocket(PORT)) {
                latch.countDown();
                try(Socket socket = server.accept(); PrintWriter writer = new PrintWriter(socket.getOutputStream())){
                    writer.write(""["");
                    for(int i=0;i<ITERATIONS;i++) {
                        if(i != 0) {
                            writer.write("","");
                        }
                        writer.write(new Double(546546.984849).toString());
                        if(i % (ITERATIONS/10) == 0) {
                            writer.flush();
                        }
                    }
                    writer.write(""]"");
                    writer.flush();
                }
            } catch (IOException e) {
                System.out.println(""Server socket is closed: ""+e.getMessage());
            }
        });
        latch.await();
        try(Socket socket = new Socket(InetAddress.getLocalHost(), PORT)){
            System.out.println(""Socket start reading"");
            Double[] response = jsonb.fromJson(socket.getInputStream(), new Double[0].getClass());
            assertEquals(ITERATIONS, response.length);
            System.out.println(""Socket stop reading"");
        }
    }
```



","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzUyMzE2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/361,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2NzI1Mg==,yasson,605467252,361,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T16:05:20Z,2020-03-28T16:05:20Z,Closing this issue since there hasn't been any activity for a while. Based on the stack trace it seems that the issue is in the HTTP layer where the input stream is getting cut short and Yasson is simply surfacing that error.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2NzI1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/366,https://api.github.com/repos/eclipse-ee4j/yasson/issues/366,yasson,528171033,366,Add SPI for eagerly parsing class models,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2019-11-25T15:45:12Z,2019-12-06T15:20:26Z,"**Is your feature request related to a problem? Please describe.**
Since GraalVM's native image is becoming popular, the industry is making a push to move more AOT style applications where frameworks figure out as much as they can ahead of time and cache the results for runtime. 

In Yasson, we lazily parse class models, which is a very expensive operation. This only needs to be done once, but it could be further improved by doing this parsing ahead of time.

**Describe the solution you'd like**
Add an SPI hook that receives a number of `Class<?>` arguments indicating which `ClassModel`s should be parsed upon creation of the `Jsonb` instance.

For example:
```java
Jsonb jsonb = JsonbBuilder.create(new JsonbConfig()
          .setProperty(YassonProperties.AOT_PARSE, com.foo.MyModel.class, 
                                                   com.foo.OtherModel.class));
```

**Describe alternatives you've considered**
One of my colleagues in Quarkus [did a POC](https://github.com/quarkusio/quarkus/pull/3553/files) that involved generating serializers in order to significantly improve performance. We will see how much parsing classes AOT can help, since it would be a lot less code to maintain if we simply parsed classes ahead of time.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/366/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/371,https://api.github.com/repos/eclipse-ee4j/yasson/issues/371,yasson,533459083,371,"When PropertyNamingStrategy is specified, properties may not be printed.",aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2019-12-05T16:29:14Z,2019-12-21T00:17:40Z,"@Empressia commented on [Thu Dec 05 2019](https://github.com/eclipse-ee4j/jsonb-api/issues/212)

Payara Micro 5.194（JDK11）でJAX-RSを使用しているときに、  
Json-BのPropertyNamingStrategyを指定したら、  
オブジェクトのプロパティがシリアライズされませんでした。  

テストコードを書きました。  
https://github.com/Empressia/JsonBTest01  
https://github.com/Empressia/JsonBTest01/blob/master/src/test/java/jp/empressia/test/jsonb/JsonBTest01.java  

シリアライズしたクラス：  
```java
	public static class SomethingClass {
		@SuppressWarnings(""unused"")
		private String Subject = ""Field"";
		public String getSubject() {
			return ""Getter"";
		}
	}
```
↓
テスト結果：  
```
Expected: is ""{\""Subject\"":\""Getter\""}""
     but: was ""{}""
```

フィールドを削除するとテストは通ります。


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/371/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/371,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Nzk4MzcxMg==,yasson,567983712,371,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2019-12-20T16:26:00Z,2019-12-20T16:26:00Z,"Tested with current version, was unable to reproduce.
Tested with 1.0.5, unable to reproduce.
Tested with 1.0.4 (same version as the error reporter had) and the error happens there.
Not sure what change fixed this, but it got fixed between 1.0.4 and 1.0.5

Test code:
```java
public class Issue371 {
    
    @Test
    public void runTest() {
        JsonbConfig config = new JsonbConfig().withPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE);
        Jsonb jsonb = JsonbBuilder.newBuilder().withConfig(config).build();

        String jsonString = jsonb.toJson(new SomethingClass());
        
        assertEquals(""{\""Subject\"":\""Getter\""}"", jsonString);
    }
    
    public static class SomethingClass {
        @SuppressWarnings(""unused"")
        private String Subject = ""Field"";
        public String getSubject() {
            return ""Getter"";
        }
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Nzk4MzcxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/371,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODEzMjAzNw==,yasson,568132037,371,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2019-12-21T00:17:33Z,2019-12-21T00:17:33Z,Thanks for testing this one out @Degubi. It looks like this bug report is a duplicate of #296 which has been fixed in 1.0.5 as you indicated ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU2ODEzMjAzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,yasson,553626635,376,Error serializing HibernateProxy properties (member variables),pedroosorio,11360021,Pedro Osório Silva,,OPEN,2020-01-22T15:45:03Z,2021-11-29T10:43:36Z,"Hi !

I'm trying to serialize an object that has hibernate proxies in it. Some of those proxies also contain other members that are proxies.

I can confirm that the LazyInitializer.getImplementation() returns a valid unproxied object in all instances.

Once i try to serialize the object, i get the following exception:

```
Caused by: javax.json.bind.JsonbException: Unable to serialize property 'pricePlanCurrent' from com.smithmicro.safepath.family.persistence.entity.Account
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:67)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:148)
	at org.eclipse.yasson//org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:76)
	at org.eclipse.yasson//org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:102)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:118)
	...
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.jboss.as.ee@18.0.1.Final//org.jboss.as.ee.component.ManagedReferenceMethodInterceptor.processInvocation(ManagedReferenceMethodInterceptor.java:52)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext$Invocation.proceed(InterceptorContext.java:509)
	at org.jboss.as.weld.common@18.0.1.Final//org.jboss.as.weld.interceptors.Jsr299BindingsInterceptor.delegateInterception(Jsr299BindingsInterceptor.java:79)
	at org.jboss.as.weld.common@18.0.1.Final//org.jboss.as.weld.interceptors.Jsr299BindingsInterceptor.doMethodInterception(Jsr299BindingsInterceptor.java:89)
	at org.jboss.as.weld.common@18.0.1.Final//org.jboss.as.weld.interceptors.Jsr299BindingsInterceptor.processInvocation(Jsr299BindingsInterceptor.java:102)
	at org.jboss.as.ee@18.0.1.Final//org.jboss.as.ee.component.interceptors.UserInterceptorFactory$1.processInvocation(UserInterceptorFactory.java:63)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.ejb3@18.0.1.Final//org.jboss.as.ejb3.component.invocationmetrics.ExecutionTimeInterceptor.processInvocation(ExecutionTimeInterceptor.java:43)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.jpa@18.0.1.Final//org.jboss.as.jpa.interceptor.SBInvocationInterceptor.processInvocation(SBInvocationInterceptor.java:47)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.ee@18.0.1.Final//org.jboss.as.ee.concurrent.ConcurrentContextInterceptor.processInvocation(ConcurrentContextInterceptor.java:45)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InitialInterceptor.processInvocation(InitialInterceptor.java:40)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:53)
	at org.jboss.as.ee@18.0.1.Final//org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor.processInvocation(ComponentDispatcherInterceptor.java:52)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.ejb3@18.0.1.Final//org.jboss.as.ejb3.component.pool.PooledInstanceInterceptor.processInvocation(PooledInstanceInterceptor.java:51)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.ejb3@18.0.1.Final//org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor.processInvocation(AdditionalSetupInterceptor.java:54)
	at org.jboss.invocation@1.5.2.Final//org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:422)
	at org.jboss.as.ejb3@18.0.1.Final//org.jboss.as.ejb3.tx.CMTTxInterceptor.invokeInNoTx(CMTTxInterceptor.java:216)
	... 173 more
Caused by: javax.json.bind.JsonbException: Unable to serialize property 'hibernateLazyInitializer' from com.smithmicro.safepath.family.persistence.entity.PricePlan$HibernateProxy$Sne6Togw
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:67)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	... 209 more
Caused by: javax.json.bind.JsonbException: Unable to serialize property 'readOnly' from org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:67)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:64)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:96)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:110)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	... 213 more
Caused by: javax.json.bind.JsonbException: Error getting value on: org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor@2a176e6e
	at org.eclipse.yasson//org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:36)
	at org.eclipse.yasson//org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:73)
	at org.eclipse.yasson//org.eclipse.yasson.internal.model.PropertyModel.getValue(PropertyModel.java:284)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:87)
	at org.eclipse.yasson//org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65)
	... 217 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.yasson//org.eclipse.yasson.internal.model.GetFromGetter.internalGetValue(GetFromGetter.java:28)
	at org.eclipse.yasson//org.eclipse.yasson.internal.model.GetValueCommand.getValue(GetValueCommand.java:34)
	... 221 more
Caused by: org.hibernate.TransientObjectException: Proxy [com.smithmicro.safepath.family.persistence.entity.PricePlan#3] is detached (i.e, session is null). The read-only/modifiable setting is only accessible when the proxy is associated with an open session.
	at org.hibernate@5.3.13.Final//org.hibernate.proxy.AbstractLazyInitializer.errorIfReadOnlySettingNotAvailable(AbstractLazyInitializer.java:343)
	at org.hibernate@5.3.13.Final//org.hibernate.proxy.AbstractLazyInitializer.isReadOnly(AbstractLazyInitializer.java:356)
	... 227 more
```
It seems that is trying to serialize the hibernate implementation of the LazyInitializer (ByteBuddy). I tried to use a Serializer to force Json-B to serialize the real object.

```
public class HibernateProxySerializer implements JsonbSerializer<HibernateProxy> {

    @Override
    public void serialize(HibernateProxy object, JsonGenerator generator, SerializationContext serializer) {
            serializer.serialize(object.getHibernateLazyInitializer().getImplementation(), generator);
        }
}
```
The serializer seems to be used only when the root object is a proxy. If i pass any object that is not a proxy but contains one, the serializer is not used and the exception above is thrown. I suspect this is because the class of an HibernateProxy has inner classes and it is not the main class like <some_class>$HibernateProxy$<some_reference> hence:

```
private void marshallProperty(T object, JsonGenerator generator, SerializationContext ctx, PropertyModel propertyModel) {
        (...)
            final JsonbSerializer<?> propertyCachedSerializer = propertyModel.getPropertySerializer(); 

```
Fails to find a UserSerializer for this.

The first workaround i found was to force the getter of a property (**GetFromGetter**) to unproxy the object. This is not optimal for the code and working around it involves using an oddly named function for the business logic ""get"" and the regular one for Json-B only . For code cleanup, it would be nice if we could annotate a property/method with @JsonbGetter to define the getter Json-B should use.

The second workaround was to create a visibility strategy that blocked fields or functions of type `LazyInitializer.class` and `ProxyConfiguration.class` . This is also not optimal but it seems to get the work done. I noticed that Yasson's default visibility strategy has the ability to look both at the field and method to judge the visibility of each, which is not possible in a custom visibility strategy, specially to enforce the spec.

I would like to have the `propertyModel.getPropertySerializer()` to return my `JsonbSerializer<HibernateProxy>` for property serialization, not just the root object !

Thanks

-----------
Wildfly 18.0.1 Final
Yasson 1.0.5
JDK 11
MySQL Connector 8.0.15

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/376/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NzI4MjkzNg==,yasson,577282936,376,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-22T16:57:50Z,2020-01-22T16:57:50Z,"hi @pedroosorio thanks for reporting this issue. Can you please include an example of the Java model class you are using in this case, along with indicating which fields are hibernate proxy objects?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NzI4MjkzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NzMxOTc1NQ==,yasson,577319755,376,NA,pedroosorio,11360021,Pedro Osório Silva,,NA,2020-01-22T18:24:20Z,2020-01-22T18:24:20Z,"Hey @aguibert !

```
@Entity
@Table(name = ""Account"")
public class Account implements Serializable {
    (...)
    @JoinColumn(name = ""pricePlanCurrent"", referencedColumnName = ""id"")
    @ManyToOne(fetch = FetchType.LAZY)
    private PricePlan pricePlanCurrent;
    (...)
}

@Entity
@Cacheable
@Table(name = ""PricePlan"")
public class PricePlan implements Serializable {
    (...)
    @JoinColumn(name = ""tenant"", referencedColumnName = ""id"")
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Tenant tenant;
    (...)
}
```
When calling `Jsonb.toJson(account.getPricePlanCurrent())` the root object is of class **PricePlan$HibernateProxy$something** and the serializer is engaged, because this goes through `serializeRoot()`. The object **tenant** inside of the **pricePlanCurrent** is not serialized using my serializer, it goes through ObjectSerializer's `marshallProperty()`. The same goes if i do `Jsonb.toJson(account)`. It is crucial to have this because a proxy might be out of session an uninitialized and i need to be able handle that properly in my serializer !","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NzMxOTc1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3ODg2NDI2Mg==,yasson,578864262,376,NA,pedroosorio,11360021,Pedro Osório Silva,,NA,2020-01-27T17:37:42Z,2020-01-27T17:37:42Z,"@aguibert I forgot to state that the properties with FetchType.LAZY are the ones that become proxies. 

I also found another issue. When serializing a PricePlan object that is a proxy (hence the class is **PricePlan$HibernateProxy$Something**) the annotations present in the class methods, _@JsonbTransient_ for instance, are not carried to the proxy methods. This makes the serializer output properties (like the tenant) when it is annotated with _@JsonbTransient_ on the method declaration.

```
public class PricePlan implements Serializable {
    @JoinColumn(name = ""tenant"", referencedColumnName = ""id"")
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Tenant tenant;

   @JsonbTransient
   public Tenant getTenant() {
       return this.tenant;
   }
}
```
Yasson is also creating a **PropertyModel** for **PricePlan** and another for **PricePlan$HibernateProxy$something** so they behave differently. I came up with the following workaround on the visibility strategy to check for the _@JsonbTransient_ annotation:

```
private boolean isJsonbTransient(Method method) {
        if (method.isAnnotationPresent(JsonbTransient.class)) {
            return true;
        }

        Class<?> declaringClass = method.getDeclaringClass();
        try {
            if (HibernateProxy.class.isAssignableFrom(declaringClass)) {
                declaringClass = declaringClass.getSuperclass();
            }

            Method original = declaringClass.getMethod(method.getName(), method.getParameterTypes());
            return original.isAnnotationPresent(JsonbTransient.class);
        } catch (NoSuchMethodException | SecurityException e) {
            return false;
        }
    }
```

 On the other hand, if we annotate the property itself, it works !","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3ODg2NDI2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDM5MTQzOA==,yasson,580391438,376,NA,nimo23,3045549,,,NA,2020-01-30T18:32:47Z,2020-01-30T18:32:47Z,Maybe it is related to https://github.com/eclipse-ee4j/yasson/issues/303,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDM5MTQzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTgwNTk0Nw==,yasson,581805947,376,NA,pedroosorio,11360021,Pedro Osório Silva,,NA,2020-02-04T08:57:05Z,2020-02-04T08:57:05Z,"@nimo23 well, yes and no. If i have the serializer works for all objects that are proxies, which is not the case, i can handle the uninitialized case there easily, i don't yasson to do that for me. @aguibert any news on this ?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTgwNTk0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTUyOTg1NA==,yasson,609529854,376,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-04-06T02:07:09Z,2020-04-06T02:07:09Z,"hi @pedroosorio, since Hibernate is commonly used with JSON-B/Yasson I'd like to come up with some sort of generic integration in Yasson. I like what you have proposed in your previous comment with the enhanced `isJsonbTransient(Method method)` code example that will defer to the superclass if the declaring class is an instance of HibernateProxy.
Perhaps we need to add a special case for Hibernate like we've already done for Groovy and Weld (CDI) here:
https://github.com/eclipse-ee4j/yasson/blob/b03dc0f42ef92c5c7f3206d711e2ad8935caf9f8/src/main/java/org/eclipse/yasson/internal/ClassParser.java#L208

Could you please upload a full set of reproducer code so I can further inspect this case and come up with a solution?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTUyOTg1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMTQyMTcwNg==,yasson,611421706,376,NA,pedroosorio,11360021,Pedro Osório Silva,,NA,2020-04-09T09:11:00Z,2020-04-09T09:11:00Z,"Hey @aguibert will try to get that done in a timely manner !

Thank you !","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMTQyMTcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/376,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46gLUh,yasson,981513505,376,NA,dabbabi,34142102,Mounir Dabbabi,dabbabi@yahoo.com,NA,2021-11-29T10:43:36Z,2021-11-29T10:43:36Z,"Hi
As wildfly 25 upgraded their librairies with this version, this is a regression.
Is there any fix for this issue, please?  ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46gLUh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/377,https://api.github.com/repos/eclipse-ee4j/yasson/issues/377,yasson,556117962,377,Adopt new jakarta.* based JSONB API,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,CLOSED,2020-01-28T10:32:46Z,2020-02-06T17:42:01Z,"We need to start working on adopting a new Jakarta native JSONB API. By Jakarta native I mean that it has all packages moved from java.* to jakarta.*. There is a RC1 version released. See [here](https://search.maven.org/search?q=g:jakarta.json.bind).

I am suggesting using `master` branch for this work. If there were some changes merged to `master` we should branch it out to `1.x` branch. We will use it in case we need to release another `javax.*` version of Yasson.

@aguibert @Verdent any objections?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/377/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/377,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM2MzAzNQ==,yasson,579363035,377,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-28T17:26:03Z,2020-01-28T17:26:03Z,"I have no objections to this plan, but I think we should wait for as long as possible to do this just to save ourselves the dual-maintenance effort between the `1.x` and `master` branches in the short term.

When do we think implementations will be needed for EE 9?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM2MzAzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/377,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM3MDUyNA==,yasson,579370524,377,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2020-01-28T17:43:18Z,2020-01-28T17:43:18Z,I think as soon as we can. We need to finish everything (including TCK testing) in April to submit things for the ballot in May. If we want to continue support of `javaz.*` version of Yasson we will need to backport changes to `1.x` branch anyway. Another solution would be to support both `javax` and `jakarta` APIs. I think it's possible. We need a PoC to prooe it. But in my opinion it's a temporary solution which only delaying a divorce.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM3MDUyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/377,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM5MDUwNQ==,yasson,579390505,377,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-28T18:31:19Z,2020-01-28T18:31:19Z,"I work on a product that will need to support `1.x` indefinitely, so I will certainly have to backport changes in the long run.

I'm fine with making the hard switch to `jakarta.*` APIs. I would like to get the JSON-B TCKs split out so the are part of the `jsonb-api` repo, but this is something we can track at the spec level instead.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU3OTM5MDUwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,yasson,557683350,380,Generating incomplete JSON: too less information,nimo23,3045549,,,CLOSED,2020-01-30T18:50:04Z,2020-12-20T21:26:21Z,"**Describe the bug**
I get a not informative SEVERE message from yasson:

`19:42:23,183 SEVERE [org.eclipse.yasson.internal.Marshaller] Generating incomplete JSON`

Not more information is given in the log by yasson. I call that json processing with:

```
try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(withFormatting)
.withNullValues(withNullValues)
.withPropertyVisibilityStrategy(new PrivateVisibilityStrategy()))) {
return jsonb.toJson(object);} 
catch (Exception e) {
// this is NOT called
log.error(""Error to convert to json: "", e);
return null;
}
```

The Exception-block is NOT called, because yasson logs it as SEVERE and does not throw an exception.

**Expected behavior**
More information about why JSON generation is incomplete so user can find the issue easier.

**System information:**
 - Java Version: 12
 - Yasson Version: 1.0.5","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/380/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQwNjg1NA==,yasson,580406854,380,NA,nimo23,3045549,,,NA,2020-01-30T19:08:25Z,2020-01-30T19:08:25Z,"I checked to parse exactly the same instance by jackson with 

```
return mapper.writeValueAsString(o);
```

and it returns without problems, I did even not include any jackson annotations on that intance - it works. But yasson is not able to create the json with the same instance, the only hint I get is this sentence:

`19:42:23,183 SEVERE [org.eclipse.yasson.internal.Marshaller] Generating incomplete JSON`

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQwNjg1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyMzUyOQ==,yasson,580423529,380,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-30T19:48:14Z,2020-01-30T19:48:14Z,"hi, can you include an example of the Object you are attempting to convert to JSON so we can reproduce the issue?

Also, the error `Generating incomplete JSON` must be coming from this line:
https://github.com/eclipse-ee4j/yasson/blob/1.0.5/src/main/java/org/eclipse/yasson/internal/Marshaller.java#L89","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyMzUyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyNzE2NA==,yasson,580427164,380,NA,nimo23,3045549,,,NA,2020-01-30T19:57:01Z,2020-01-30T19:57:01Z,"I try to find the error and let you know. 

In the meantime, would it be better to throw the error instead of hiding it from the user?

```
} finally {
            try {
                if (close) {
                    jsonGenerator.close();
                }
            } catch (JsonGenerationException jge) {
                logger.severe(jge.getMessage());
                // throw error, instead hiding
                throw jge;
            }
        }
```

Yasson not only produces an _incomplete_ json but nothing, so throwing an error would be better in this case, because yasson did not produce anything.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyNzE2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQzNDQyOQ==,yasson,580434429,380,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-30T20:05:47Z,2020-01-30T20:05:47Z,"yea, I agree that throwing an exception seems preferable here. But I'd need to reproduce the issue for myself and do more investigation to be certain","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQzNDQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ1NjQ0Mw==,yasson,580456443,380,NA,nimo23,3045549,,,NA,2020-01-30T20:57:25Z,2020-01-30T20:57:25Z,"I found the property which leads to this error. It was not easy because I overlooked the property within an **abstract** class. All its subclasses inherited the `log`-method which cannot and should never be (de)serialized:

```
public abstract class AbstractItem {

        // this was the reason for: ""Generating incomplete JSON""
	protected final Logger log = Logger.getLogger(getClass()); 
..
}
```
I annotated the property with `@JsonbTransient` and now it works.
Please make sure that yasson always bypass the logging classes. It makes no sense to try to (de)serialize it. It would also helpful to throw the error (`JsonGenerationException`) so users can look at which field the (de)serializing failed.

The reason why this worked for jackson was because of `mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);`.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ1NjQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ1ODQ4MQ==,yasson,580458481,380,NA,nimo23,3045549,,,NA,2020-01-30T21:02:52Z,2020-01-30T21:02:52Z,"It is also a little related to this:
https://github.com/eclipse-ee4j/yasson/issues/305

But in this case, the stacktrace shown in the other issue is not shown in this issue. And the used logger in this issue is jboss logging.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ1ODQ4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ2NzU2MQ==,yasson,580467561,380,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-01-30T21:26:41Z,2020-01-30T21:26:41Z,"The fix for issue #305 was included in Yasson 1.0.6, and you are on 1.0.5. Does upgrading to 1.0.6 fix the problem?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ2NzU2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ4NDcyNw==,yasson,580484727,380,NA,nimo23,3045549,,,NA,2020-01-30T22:08:38Z,2020-01-30T22:08:38Z,"@aguibert yes, I upgraded to 1.0.6 and it now shows a better message:

`Caused by: javax.json.bind.JsonbException: Unable to serialize property 'log' from ...`

So I will close this issue. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQ4NDcyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/380,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODY3MzAxMw==,yasson,748673013,380,NA,joaomarcosribeiroc,62527567,João Marcos Carvalho,jmrdc1999@gmail.com,NA,2020-12-20T21:26:21Z,2020-12-20T21:26:21Z,"I'm getting the same error. Even though the deserialization occurs, the serialization generate this error.

dez. 20, 2020 6:15:39 PM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Unable to serialize property 'address' from com.negociodacidade.apirest.resource.pojo.CompanyPagePojo
dez. 20, 2020 6:15:39 PM org.eclipse.yasson.internal.Marshaller marshall
SEVERE: Generating incomplete JSON 

All the others properties from CompanyPagePojo got serialized when I put @JsonbTransient in the 'address' property which is a non primitive value nor a collection, just a simple pojo. Even the collections List<String> are serialized without problems. 
I didn't get the solution yet","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODY3MzAxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/382,https://api.github.com/repos/eclipse-ee4j/yasson/issues/382,yasson,559960092,382,PrivateFieldsStrategy uses reflection?,nimo23,3045549,,,CLOSED,2020-02-04T20:27:43Z,2020-03-28T16:10:13Z,"I have a question:

If I use this:
```

public final class PrivateFieldsStrategy implements PropertyVisibilityStrategy {

	@Override
	public boolean isVisible(Field field) {
		return true;
	}

	@Override
	public boolean isVisible(Method method) {
		return false;
	}
}
```

and add it to a class:


```
@JsonbVisibility(value = PrivateFieldsStrategy.class)
public class User{

}
```

will yasson use reflection to access the private fields? If so, then does this mean that the default (method level access with getter) is faster for (de)serializing. Should I avoid `PrivateFieldsStrategy` in terms of performance? ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/382/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/382,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY2NzY0Mw==,yasson,599667643,382,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-03-16T17:32:08Z,2020-03-16T17:32:08Z,"I don't think your PrivateFieldsStrategy should cause any problems performance wise. (as far as I can tell)

PropertyValuePropagation.java line 123 checks if the field is made accessible by a PropertyVisibilityStrategy.
If yes, it calls setAccessible(true) on the field if it is private. Same goes for methods. (happens only once per field/method)
If the field/method was public it simply invokes it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY2NzY0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/382,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY5NjU3Ng==,yasson,599696576,382,NA,nimo23,3045549,,,NA,2020-03-16T18:33:43Z,2020-03-16T18:33:43Z,">I don't think your PrivateFieldsStrategy should cause any problems performance wise.

but in compare to property access, the field access is made by _reflection_ . Or?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY5NjU3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/382,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2Nzg1OQ==,yasson,605467859,382,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T16:10:12Z,2020-03-28T16:10:12Z,"All property access in any JSON library (Yasson, Jackson, etc) is made via reflection because the JSON libraries must programatically discover the properties of the class and invoke them. As @Degubi pointed out earlier there is an extra step with private field access where fields must be set accessible first, but this only happens once so the performance cost is negligible. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2Nzg1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/383,https://api.github.com/repos/eclipse-ee4j/yasson/issues/383,yasson,567614950,383,Recursive reference on serializing root object,johnrodey,1458056,,,CLOSED,2020-02-19T14:38:08Z,2020-03-28T18:40:16Z,"This is in relation to a previous bug: https://github.com/eclipse-ee4j/yasson/issues/187

I too have experienced this problem. Previously (running 2.27) this code would print the root document, however oddly it would only work once if I reused the Jsonb object. Recreating those objects each time is expensive so I updated to the latest (2.30) hoping to fix that and now the same code results in this 'Recursive reference has been found' issue. If this is expected behavior is there a means to printing the root element in the serialized JSON without changing the pojo's structure?  Is it possible to provide a new sample since the previous sample that did something similar to my snippet is no longer valid?

Below is some trimmed down sample code to reproduce:

```
public class CustomSerializer implements JsonbSerializer<SAMPLE> {
	public CustomSerializer() {}
	@Override
	public void serialize(final SAMPLE p, final JsonGenerator g, final SerializationContext c) {
		g.writeStartObject();
		c.serialize(p.getClass().getSimpleName(), p, g);
		g.writeEnd();
	}
}
```
My object to be serialized:

```
@JsonbTypeSerializer(CustomSerializer.class)
public class SAMPLE {
	private String id;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
}
```
I'm looking to get the output:

```
{
    ""SAMPLE"": {
	""id"":1
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/383/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/383,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTUwMTg2MQ==,yasson,605501861,383,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T18:40:16Z,2020-03-28T18:40:16Z,"hi @johnrodey, we are planning to address this feature in the next version of the JSON-B spec in two ways:

1. Allow for polymorphic [de]serialization: https://github.com/eclipse-ee4j/jsonb-api/issues/147
2. Allow for programmatic customization of a class: https://github.com/eclipse-ee4j/jsonb-api/issues/88

Between these two issues what you are trying to do will be possible. But for now, with the current version of JSON-B/Yasson there is not a way to achieve what you are trying to accomplish.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTUwMTg2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/384,https://api.github.com/repos/eclipse-ee4j/yasson/issues/384,yasson,570855297,384,I-JSON date formatter is incorrect,roysjosh,601535,Joshua Roys,,OPEN,2020-02-25T21:46:38Z,2021-09-16T20:35:10Z,"**Describe the bug**
Yasson does not properly implement the date/time format from RFC 7493 (and thus 3339).  Specifically, RFC 3339 section 5.6 states that:

1. partial-time contains an optional time-secfrac (a period followed by 1 or more digits)
2. time-offset is either a literal Z or a time-numoffset but not both; the behavior to match seems to be the DateTimeFormatter pattern ""XXX""

**To Reproduce**
Attempt to integrate with an API following RFC 7493.  Example timestamps:

- 2020-02-25T15:16:25.54249Z
- 2020-02-24T17:38:12.8462945Z

**Expected behavior**
No DateTimeParseExceptions for compliant timestamps.

**System information:**
 - OS: macOS 10.15.3
 - Java Version: 11
 - Yasson Version: 1.0.6

**Additional context**
This was discovered while attempting to integrate with the MS Graph API which has a time-secfrac with a variable number of digits (but frequently 7 digits).  Since yasson's I-JSON didn't work I tried `config.withDateFormat(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSS]XXX"", Locale.getDefault())` which worked for a while until I got a timestamp with only 5 digits for time-secfrac.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/384/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/384,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs426MwH,yasson,921226247,384,NA,JohnSchneider,2652937,,,NA,2021-09-16T20:35:09Z,2021-09-16T20:35:09Z,Please also see Issue #514 and Issue #515 (pull request for possible fix),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs426MwH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/385,https://api.github.com/repos/eclipse-ee4j/yasson/issues/385,yasson,572123255,385,toJson with Type is ignored,martijndwars,426811,Martijn Dwars,,OPEN,2020-02-27T14:25:54Z,2020-02-27T14:34:32Z,"**Describe the bug**
The JSON-B API specifies a `Jsonb#toJson(Object, Type)` method, but the purpose of this `Type` parameter is not clear to me. I was trying to reverse-engineer the purpose of this parameter by trying some examples with Yasson, but none of the examples show the effect of the `Type` parameter. This may indicate that there's a bug in the implementation.

**To Reproduce**
Below are several example usages of Yasson. In each example, the generated JSON includes all properties of the subclass, whereas we expect only the properties of the type that we specify to show up.

With an interface `Animal`:
```
public class App {
    public static void main(String[] args) {
        Jsonb jsonb = JsonbBuilder.create();
        Cat cat = new Cat(""Emma"", 2, ""Sphynx"");
        String result = jsonb.toJson(cat, Animal.class);
        System.out.println(result); // Prints: {""age"":2,""breed"":""Sphynx"",""name"":""Emma""}, but I expected to see only the ""name"" property.
    }
    public static interface Animal {
        public String getName();
    }
    public static class Cat implements Animal {
        public String name;
        public int age;
        public String breed;
        public Cat(String name, int age, String breed) {
            this.name = name;
            this.age = age;
            this.breed = breed;
        }
        public String getName() {
            return name;
        }
        public int getAge() {
            return age;
        }
        public String getBreed() {
            return breed;
        }
    }
}
```

With an abstract class `Animal`:
```
public class App {
    public static void main(String[] args) {
        Jsonb jsonb = JsonbBuilder.create();
        Cat cat = new Cat(""Emma"", 2, ""Sphynx"");
        String result = jsonb.toJson(cat, Animal.class);
        System.out.println(result); // {""age"":2,""breed"":""Sphynx"",""name"":""Emma""}, but I expect to see only the ""name"" property
    }
    public static abstract class Animal {
        public abstract String getName();
    }
    public static class Cat extends Animal {
        public String name;
        public int age;
        public String breed;
        public Cat(String name, int age, String breed) {
            this.name = name;
            this.age = age;
            this.breed = breed;
        }
        public String getName() {
            return name;
        }
        public int getAge() {
            return age;
        }
        public String getBreed() {
            return breed;
        }
    }
}
```

With a concrete class:
```
public class App {
    public static void main(String[] args) {
        Jsonb jsonb = JsonbBuilder.create();
        Cat cat = new Cat();
        cat.name = ""Emma"";
        cat.age = 2;
        cat.breed = ""Sphynx"";
        String result = jsonb.toJson(cat, Animal.class); // {""name"":""Emma"",""age"":2,""breed"":""Sphynx""}, but I expect to see only the ""name"" property
        System.out.println(result);
    }
    public static class Animal {
        public String name;
    }
    public static class Cat extends Animal {
        public int age;
        public String breed;
    }
}
```

With a generic collection:
```
public class App {
    public static void main(String[] args) {
        List<Animal> animals = new ArrayList<>();
        animals.add(new Dog(""Falco""));
        animals.add(new Cat(""Harris"", true));
        Type type = new ArrayList<Animal>() {}.getClass().getGenericSuperclass();
        Jsonb jsonb = JsonbBuilder.create();
        String json = jsonb.toJson(animals, type);
        System.out.println(json); // [{""name"":""Falco""},{""name"":""Harris"",""b"":true}]
        String json2 = jsonb.toJson(animals);
        System.out.println(json2); // [{""name"":""Falco""},{""name"":""Harris"",""b"":true}]
    }

    public static class Animal {
        public String name;
    
        public Animal(String name) {
            this.name = name;
        }
    }

    public static class Cat extends Animal {
        public boolean b;
    
        public Cat(String name, boolean b) {
            super(name);
            this.b = b;
        }
    }
    
    public static class Dog extends Animal {
        public Dog(String name) {
            super(name);
        }
    }
}
```

**System information:**
 - OS: macOS
 - Java Version: 8
 - Yasson Version: 1.0.6","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/385/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/386,https://api.github.com/repos/eclipse-ee4j/yasson/issues/386,yasson,573643052,386,@JsonbTransient on field and lombok getters with property access,nimo23,3045549,,,OPEN,2020-03-01T23:40:30Z,2020-03-28T18:41:28Z,"How should I use the standard **property** (de)serializing (instead of field (de)serializing) with **Lombok**? 

For example, I set a field with `@JsonbTransient` and all my getters are created by Lombok so I cannot set the `@JsonbTransient `to the getters. Yasson ignores my field annotation when using the standard property access. But with that I am forced to put those getters by myself instead of using lombok. Would be nice if yasson has a global property to config such things..","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/386/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/387,https://api.github.com/repos/eclipse-ee4j/yasson/issues/387,yasson,579905010,387,ZoneId serialization not normalized,martijndwars,426811,Martijn Dwars,,OPEN,2020-03-12T12:28:43Z,2020-07-14T22:49:36Z,"**Describe the bug**
According to the JSON-B specification a `java.time.ZoneId` instance needs to be serialized as follows (emphasis mine):

> Implementations MUST support the deserialization of any time zone ID format specified in java.time.ZoneId into a field or property of type java.time.ZoneId. The serialization format of java.time.ZoneId is the **normalized** zone ID as specified in java.time.ZoneId.

The _normalized_ part makes a difference when you have a `ZoneId.of(""UTC"")`, for example. The zone ID is ""UTC"", but the normalized zone ID is ""Z"", as shown by this jshell session:

```
jshell> import java.time.*;

jshell> ZoneId.of(""UTC"").getId()
$2 ==> ""UTC""

jshell> ZoneId.of(""UTC"").normalized().getId()
$3 ==> ""Z""
```

**To Reproduce**
```
> System.out.println(jsonb.toJson(ZoneId.of(""UTC"")));
==> ""UTC""
```

**Expected behavior**
Expected to serialize `ZoneId.of(""UTC"")` as `""Z""` and not as `""UTC""`.

**System information:**
 - OS: macOS 10.14.6
 - Java Version: 8 & 11
 - Yasson Version: 1.0.6","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/387/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/387,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI2MDkwMA==,yasson,644260900,387,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-15T17:14:02Z,2020-06-15T17:14:02Z,Fixed by #418 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI2MDkwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/387,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODQ1MDc5Mw==,yasson,658450793,387,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-07-14T22:49:36Z,2020-07-14T22:49:36Z,"FYI I had to revert PR #418 from @Degubi because it was causing a TCK test to fail. We didn't notice it failed a TCK test originally because CI was accidentally running Yasson unit tests a second time instead of running the TCK tests.

I think this is a change that we need to make, but we have to go through the proper process first of a TCK challenge and get this sorted out at the spec level before we can change our behavior.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODQ1MDc5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/388,https://api.github.com/repos/eclipse-ee4j/yasson/issues/388,yasson,579918420,388,Deserialize ISO_DATE to java.util.Date not supported,martijndwars,426811,Martijn Dwars,,OPEN,2020-03-12T12:53:27Z,2020-07-22T18:02:49Z,"**Describe the bug**
From the JSON-B specification:

> Implementations MUST support deserialization of both ISO_DATE and ISO_DATE_TIME into
java.util.Date, Calendar and GregorianCalendar instances.

The JavaDoc on the `java.time.format.DateTimeFormatter.ISO_DATE` format contains the following comment, indicating that '2011-12-03' is a valid ISO_DATE formatted date.

> The ISO date formatter that formats or parses a date with the offset if available, such as '2011-12-03' or '2011-12-03+01:00'.

But when I run the following with Yasson:

```
System.out.println(jsonb.fromJson(""2011-12-03"", Date.class));
```

I get an error:

> Caused by: java.time.format.DateTimeParseException: Text '2011' could not be parsed at index 4

**To Reproduce**
```
System.out.println(jsonb.fromJson(""2020-03-11"", Date.class));
```

**Expected behavior**
A `Date` object instead of an error.

**System information:**
 - OS: macOS
 - Java Version: 8 & 11
 - Yasson Version: 1.0.6","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/388/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/388,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM4NDUyMQ==,yasson,637384521,388,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-02T08:36:23Z,2020-06-02T08:36:23Z,"While looking after this I noticed that in 'DateTypeDeserializer::parseWithOrWithoutZone' the 'jsonValue' parameter is '2020' (Where did the rest go?)
Followed this one back to JsonbRiParser, where I printed the return value of 'getString()', still printed only '2020'. That one calls JsonParserImpl::getString()","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM4NDUyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/388,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MjYwMTYwMw==,yasson,662601603,388,NA,Katie-Richter,45699443,,,NA,2020-07-22T18:02:48Z,2020-07-22T18:02:48Z,"In regards to where the rest of the jsonValue parameter went, double quotes are required around the date so it is not interpreted as just a number, but rather as a string. The error that is showing up after that fix is: 

> Caused by: java.time.format.DateTimeParseException: Text '2011-12-03' could not be parsed at index 10

**To Reproduce**
```java
System.out.println(jsonb.fromJson(""\""2020-03-11\"""", Date.class));
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MjYwMTYwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,yasson,582339768,389,Yasson on SpringBoot: IOException Stream Closed,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,CLOSED,2020-03-16T14:24:39Z,2020-04-08T06:15:43Z,"Hi guys,

In Spring Boot 2.2.5, one can choose their own json provider.

1. Exclude the default Jackson
2. Add the Yasson dependency in pom.xml (which also brings the JSON-B API + JSON-P)

```xml
<dependency>
    <groupId>org.eclipse</groupId>
    <artifactId>yasson</artifactId>
    <version>1.0.6</version>
    <scope>runtime</scope>
</dependency>
```
3. Specify in ``application.properties`` the following:
``spring.http.converters.preferred-json-mapper=jsonb``

This setup seems to work like a charm, except the logs contain an error at each request:

```
2020-03-16 16:09:20.306 ERROR 1540 --- [io-8090-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception

java.io.IOException: Stream closed
        at sun.nio.cs.StreamEncoder.ensureOpen(StreamEncoder.java:45) ~[na:1.8.0_202]
        at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:140) ~[na:1.8.0_202]
        at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) ~[na:1.8.0_202]
        at org.springframework.http.converter.json.AbstractJsonHttpMessageConverter.writeInternal(AbstractJsonHttpMessageConverter.java:130) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:287) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.4.RELEASE.jar:5.2.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_202]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_202]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.31.jar:9.0.31]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_202]


2020-03-16 16:09:20.354 ERROR 1540 --- [io-8090-exec-10]
s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/country] and exception [Stream closed] as the response has already been committed. As a result, the response may have the wrong status code.

```

Apparently more people are having the same issue. See [here](https://stackoverflow.com/questions/57023602/failed-to-complete-request-java-io-ioexception-stream-closed-from-spring-boot) and [here](https://github.com/fuinorg/ddd-cqrs-4-java-example/issues/4).

Any idea why this could happen? Do you think it's a bug in Yasson or in Spring Boot?
Since the error does not occur with Jackson, I assume it could also be a bug in Yasson.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/389/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4MDgxOQ==,yasson,599580819,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-16T14:54:02Z,2020-03-16T14:54:02Z,"hi @amihaiemil , can you please include the full stack trace? That will give us an idea of the exception flow. What's currently shown has no yasson classes in the stack so I have no idea what close flow we are in","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4MDgxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4NzA2Nw==,yasson,599587067,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-03-16T15:05:31Z,2020-03-16T15:05:31Z,"@aguibert I updated the description with the full stacktrace. Thank you!

I have opened the same Issue in the spring-boot repo, maybe they can also help :) ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4NzA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4OTcyNg==,yasson,599589726,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-16T15:10:09Z,2020-03-16T15:10:09Z,"After the Spring message converter is done calling out do JSON-B to write to a `java.io.Writer` it then calls flush(), but Yasson is closing the Writer after writing the JSON object. 

I see two options here:
A) Spring boot could call `writer.close()` instead of `writer.flush()`. Close will first do a flush, but it will safely no-op if the writer is already closed
B) Yasson could not implicitly close the writer after calling `toJson`

I'm not finding any wording in the spec or javadoc that says an implementation should or should not close a Writer, but it would make more sense if the Writer was left open. I will try to make that change and see if it effects any existing test scenarios.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU4OTcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5MjIzMQ==,yasson,599592231,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-03-16T15:14:44Z,2020-03-16T15:14:44Z,"@aguibert well, I think if Yasson doesn't close the Writer, that could be treated as a Memory Leak of sorts, or? I think Writers should be closed when whoever writes has finished writing. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5MjIzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NDQwMw==,yasson,599594403,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-03-16T15:18:40Z,2020-03-16T15:18:40Z,@aguibert Someone from Spring Boot answered. They are apparently convinced it's a bug in Yasson. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NDQwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NDU4NQ==,yasson,599594585,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-16T15:19:00Z,2020-03-16T15:19:00Z,"I think it could go either way. Since the user is passing in the writer, they still hold a reference to the Writer and could close it on their own -- but this way is more error prone. 

I ran a quick test and confirmed that yasson can _not_ change behavior here. We have some basic scenarios that would break if we stopped closing the writer, for example:
```java
        Writer writer = new StringWriter();
        bindingJsonb.toJson(new Long[]{5L}, writer);
        String writerValue = writer.toString();
```
Current behavior is that `writerValue` is `[5]` but if we don't close the writer then the user gets an empty string.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NDU4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NTQ1Ng==,yasson,599595456,389,NA,wilkinsona,914682,Andy Wilkinson,,NA,2020-03-16T15:20:37Z,2020-03-16T15:20:37Z,"FWIW, the user would get the expected string if Yasson called `flush()` rather than `close()` with the added benefit that they can then continue to use the writer if they wish to do so.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NTQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NjUyOQ==,yasson,599596529,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-03-16T15:22:38Z,2020-03-16T15:22:38Z,"@wilkinsona @aguibert Both Issues are closed now, yet this is clearly a bug. Andrew says Yasson cannot change behaviour. @wilkinsona maybe we can do something on Spring Boot's side,?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NjUyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NjYyNA==,yasson,599596624,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-16T15:22:48Z,2020-03-16T15:22:48Z,"that's a good compromise @wilkinsona, I'll re-open this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTU5NjYyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMzQ1MDcwNg==,yasson,603450706,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-03-24T19:08:11Z,2020-03-24T19:08:11Z,@aguibert Can you please let me know as soon as this fix is released and with what version? Many thanks 💯 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMzQ1MDcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2NDYxNQ==,yasson,605464615,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-03-28T15:44:11Z,2020-03-28T15:44:11Z,"@amihaiemil sure, I'll post back when we cut the next release -- it will be Yasson 1.0.7. I'm going to take a look through our existing bug backlog and see if we can clear out more items before I cut that release though. 

Closing this issue though since fixes are delivered now.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTQ2NDYxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDU4MzY1Mw==,yasson,610583653,389,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-04-07T19:43:42Z,2020-04-07T19:43:42Z,"hi @amihaiemil, Yasson 1.0.7 is now released and should contain the fix for this issue","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDU4MzY1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/389,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDc3MjEzNA==,yasson,610772134,389,NA,amihaiemil,6305156,Mihai A. 🇷🇴🇩🇪🇬🇧🇫🇷,amihaiemil@gmail.com,NA,2020-04-08T06:15:43Z,2020-04-08T06:15:43Z,@aguibert thanks a lot! ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDc3MjEzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/390,https://api.github.com/repos/eclipse-ee4j/yasson/issues/390,yasson,582383798,390,Deserialize primitive boolean array,martijndwars,426811,Martijn Dwars,,CLOSED,2020-03-16T15:23:13Z,2020-04-07T21:29:35Z,"**Describe the bug**
From the specification:

> Implementations MUST support binding of the following basic Java classes and their corresponding primitive types: [...] java.lang.Boolean

and:

> JSON Binding implementations MUST support the binding of Java arrays of all supported Java types from this chapter into/from JSON array structures as defined in Section 5 of RFC 7159. Arrays of primitive types and multi-dimensional arrays MUST be supported.

**To Reproduce**
```
> System.out.println(Arrays.toString(jsonb.fromJson(""[true]"", Boolean[].class)));
[true]
> System.out.println(Arrays.toString(jsonb.fromJson(""[true]"", boolean[].class)));
Mar 16, 2020 4:21:04 PM org.eclipse.yasson.internal.Unmarshaller deserializeItem
SEVERE: [Z cannot be cast to [Ljava.lang.Object;
Exception in thread ""main"" javax.json.bind.JsonbException: Internal error: [Z cannot be cast to [Ljava.lang.Object;
        at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:72)
        at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:52)
        at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
        at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:66)
        at yasson.example.App.main(App.java:48)
Caused by: java.lang.ClassCastException: [Z cannot be cast to [Ljava.lang.Object;
        at org.eclipse.yasson.internal.serializer.ObjectArrayDeserializer.getInstance(ObjectArrayDeserializer.java:50)
        at org.eclipse.yasson.internal.serializer.ObjectArrayDeserializer.getInstance(ObjectArrayDeserializer.java:26)
        at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:65)
        at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:66)
        ... 4 more
```

**Expected behavior**
Deserializing `[true]` to a primitive boolean array `boolean[]` should work just like deserializing `[true]` to a reference Boolean array `Boolean[]`.

**System information:**
 - OS: macOS 10.14.6
 - Java Version: 1.8.0 u241 & 11.0.5
 - Yasson Version: 1.0.6","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/390/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/390,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY1ODE0Mg==,yasson,599658142,390,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-03-16T17:13:04Z,2020-03-16T17:13:04Z,"Created a pr for this issue, #392
All other primitive types were working, ""boolean"" was missing","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTY1ODE0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/390,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDYzMDMyNg==,yasson,610630326,390,NA,martijndwars,426811,Martijn Dwars,,NA,2020-04-07T21:29:35Z,2020-04-07T21:29:35Z,I'll close this issue since a fix was merged to master and backported to 1.0.x. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDYzMDMyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/393,https://api.github.com/repos/eclipse-ee4j/yasson/issues/393,yasson,586380487,393,Deserialize class with bounded type parameter,martijndwars,426811,Martijn Dwars,,OPEN,2020-03-23T17:19:02Z,2020-03-23T17:54:07Z,"**Describe the bug**
Section 3.17 of the JSON-B specification describes Generics and in particular how to deal with bounds on type parameters. If a type parameter has multiple bounds, then every bound should be resolved separately. The following example shows a class where the type variable `T` has two bounds `Child` and `Parent`. Moreover, `Child implements Parent` such that `Child` is the most specific type.

**To Reproduce**
```java
public static class OverlappingBoundsContainer<T extends Child & Parent> {
    public T instance;
    
    public OverlappingBoundsContainer() {
    }
    
    public OverlappingBoundsContainer(T instance) {
        this.instance = instance;
    }
}

public interface Parent {}

public static class Child implements Parent {
    public int number;

    public Child() {
    }

    public Child(int number) {
        this.number = number;
    }
}
```

Now run:

```java
Jsonb jsonb = JsonbBuilder.create();
jsonb.fromJson(""{\""instance\"": {\""number\"": 42}}"", OverlappingBoundsContainer.class);
```

Yields

```
Caused by: java.lang.IllegalArgumentException: Can not set yasson.example.App$Child field yasson.example.App$OverlappingBoundsContainer.instance to java.util.HashMap
```

**Expected behavior**
`Jsonb#fromJson` should return an object that is an instance of `OverlappingBoundsContainer`. It's field `instance` should be set to an object that is an instance of `Child`. This instance should have it's field `number` set to 42.

**System information:**
 - OS: macOS
 - Java Version: 8
 - Yasson Version: 1.0.6

**Additional context**
Note that if you change the class definition to the following, the problem still exists:
```java
public static class OverlappingBoundsContainer<T extends Child> {
    ...
}
```

That means that this problem is not specific to _multiple_ bounds, but bounded type parameters on itself.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/393/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/397,https://api.github.com/repos/eclipse-ee4j/yasson/issues/397,yasson,596156645,397,Big long numbers are not serialized as strings,martijndwars,426811,Martijn Dwars,,CLOSED,2020-04-07T21:15:14Z,2020-04-08T00:54:03Z,"**Describe the bug**
From the JSON-B specification:

> *3.16. Big numbers*
> JSON Binding implementation MUST serialize/deserialize numbers that express greater magnitude or precision than an IEEE 754 double precision number as strings.

The value `Long.MAX_VALUE - 1` cannot be precisely represented by a IEEE 754 double precision number, as the following jshell session shows:

```
jshell> var l = Long.MAX_VALUE - 1
l ==> 9223372036854775806

jshell> (long) (double) l
$29 ==> 9223372036854775807

jshell> (long) (double) l == l
$30 ==> false
```

Therefore, this value should be serialized as the JSON string `""9223372036854775806""`. However, with Yasson we get the following:

```
jshell> import javax.json.bind.JsonbBuilder

jshell> var jsonb = JsonbBuilder.create();
jsonb ==> org.eclipse.yasson.internal.JsonBinding@2d127a61

jshell> class Container<T> {
   ...>   public T instance;
   ...>   public Container() {
   ...>   }
   ...> }
|  created class Container

jshell> long l = Long.MAX_VALUE - 1;
l ==> 9223372036854775806

jshell> var container = new Container<>();
container ==> Container@65466a6a

jshell> container.instance = l;
$7 ==> 9223372036854775806

jshell> jsonb.toJson(container);
$8 ==> ""{\""instance\"":9223372036854775806}""
```

Note that the value is serialized as a JSON number, not as a JSON string. The risk of course is that if you feed this to a JavaScript engine, the numbers will get messed up:

```
> var x = {""instance"":9223372036854775806}
undefined
> x.instance
9223372036854776000
```

**To Reproduce**
See above.

**Expected behavior**
The expected result when calling `toJson(container)` in the example above is:

```
$8 ==> ""{\""instance\"":\""9223372036854775806\""}""
```

**System information:**
 - OS: macOS 10.14.6
 - Java Version: 8, 11
 - Yasson Version: 1.0.6","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/397/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/397,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDY5MTk1Mg==,yasson,610691952,397,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-04-08T00:53:51Z,2020-04-08T00:53:51Z,"Hi @MartijnDwars, thanks for raising this issue. This is the result of a bug in the JSON-B 1.0 spec that needs to be revised in the next version. It has been debated at the spec level under https://github.com/eclipse-ee4j/jsonb-api/issues/82 and https://github.com/eclipse-ee4j/jsonb-api/issues/112, but ultimately Yasson 1.0.X is doing the correct thing for now and we will fix it in 2.0 when we can revise the spec.

The main reason we had to change Yasson in this way is that we found out other components weren't able to cope with values being numbers sometimes and strings at other times, particularly in schema-based designs as described in jsonb-api#112.

I'm going to close this issue because we need to address it at the JSON-B spec level. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDY5MTk1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/399,https://api.github.com/repos/eclipse-ee4j/yasson/issues/399,yasson,604271184,399,Cryptic error on primitive null,triceo,247403,Lukáš Petrovický,,CLOSED,2020-04-21T20:39:51Z,2020-07-14T17:51:14Z,"**Describe the bug**
When a primitive field (such as `boolean`) is null, Yasson gives a very cryptic message which gives no hints as to what or where is wrong.

**To Reproduce**

Consider the following simplified class definition:

    class SomeClass {

        @JsonbProperty(nillable = true)
        private Boolean someBoolean;
   
        void setSomeBoolean(boolean value) { // note that value is a primitive boolean
            // leaving this empty, exception will be thrown before Yasson gets here.
        }

    }

Now assume that the JSON being deserialized has `null` for `someBoolean`. This is clearly an issue, as `boolean` does not accept `null` as a value. (Only `Boolean` does.) Unfortunately, Yasson does not tell you that. Instead, you get this:

    javax.json.bind.JsonbException: Internal error: null

	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:68)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:66)
	...

**Expected behavior**
At the very least, I would expect the exception to be rethrown with a descriptive message pointing out the problem. What was being deserialized (class, field) and what happened.

**System information:**
 - OS: Fedora Linux.
 - Java Version: 11, but it doesn't really matter.
 - Yasson Version: 1.0.7.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/399/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/399,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI1MjY0OQ==,yasson,644252649,399,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-15T16:57:17Z,2020-06-15T16:57:17Z,"Using this code
```java
public final class Main {
    public static class SomeClass {

        @JsonbProperty(nillable = true)
        private Boolean someBoolean;

        void setSomeBoolean(boolean value) { // note that value is a primitive boolean
            // leaving this empty, exception will be thrown before Yasson gets here.
        }
    }
    
    public static void main(String[] args) {
        var jsonb = JsonbBuilder.create();
        
        var input = ""{\""someBoolean\"": null}"";
        var deserialized = jsonb.fromJson(input, SomeClass.class);
    
        System.out.println(""Some: "" + deserialized.someBoolean);
    }
}
```

I got this as output without errors: 'Some: null'.
Did I do something differently? I might have misunderstood something @triceo ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI1MjY0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/404,https://api.github.com/repos/eclipse-ee4j/yasson/issues/404,yasson,612120087,404,Support for ConcurrentMap,NottyCode,1906689,Alasdair Nottingham,,CLOSED,2020-05-04T19:41:07Z,2020-05-20T16:32:33Z,"**Is your feature request related to a problem? Please describe.**
The OpenLiberty website was recently updated to use JSON-B over JSON-P to return data from a REST API. The JSON-B object in question has a field of type ConcurrentMap. This was correctly serialized. As a parallel activity I'm writing some integration tests and for the first time tried to deserialize the JSON-B object. This failed with the following error:

    [ERROR] io.openliberty.website.it.OpenLibertyEndpointIT.testGetReleases  Time elapsed: 0.201 s  <<< ERROR!
    javax.ws.rs.client.ResponseProcessingException: Problem with reading the data, class io.openliberty.website.data.BuildData, ContentType: application/json.
	at io.openliberty.website.it.OpenLibertyEndpointIT.testGetReleases(OpenLibertyEndpointIT.java:41)
    Caused by: javax.json.bind.JsonbException: Internal error: Can not set java.util.concurrent.ConcurrentMap field io.openliberty.website.data.BuildData.builds to java.util.HashMap
	at io.openliberty.website.it.OpenLibertyEndpointIT.testGetReleases(OpenLibertyEndpointIT.java:41)

It seems a JSON-B object with a ConcurrentMap can be serialized, but cannot be deserialized. It should be possible to do both.

**Describe the solution you'd like**
Support for JSON-B fields to contain a ConcurrentMap

**Describe alternatives you've considered**
In this case I will convert to Map to get it to work. This would not work as well if I were doing concurrent updates to the map though as I'd have to use syncronization around the map.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/404/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,yasson,614203099,406,JSON-B / Yasson is ignoring the new JsonbConfig :: withDeserializers,lusabo,191940,Luciano Borges,lucianosantosborges@gmail.com,CLOSED,2020-05-07T16:52:56Z,2020-06-30T02:39:36Z,"I am migrating a project from Jackson to Json-B (Yasson v. 1.0.7), and the code below is to ilustrate a scenario that is ocurring with me.

I have a json file like this:

    {
      ""response"": {
        ""accessories"": {
          ""accessory"": [
            {
              ""finance"": ""mandatory"",
              ""type"": ""INDIVIDUAL""
            },
            {
              ""finance"": ""optional"",
              ""type"": ""ORIGINAL""
            },
            {
              ""finance"": ""not"",
              ""type"": ""TRADE""
            }
          ]
        }
      }
    }

I am rewriting one test like below:

    @Test
    public void testDeserialize() {

        final JsonbConfig config = new JsonbConfig()
                .withSerializers(new MySerializer())
                .withDeserializers(new MyDeserializer());

        final Jsonb jsonb = JsonbBuilder.create(config);

        final InputStream data = this.getClass().getClassLoader().getResourceAsStream(""response.json"");

        final Response obj = jsonb.fromJson(data, Response.class);

        final Accessories accessories = obj.getAccessories();

        assertThat(accessories.getAccessory().isEmpty(), is(false));
    }
	
The code of the class MyDeserializer is:
```
public class MyDeserializer implements JsonbDeserializer<FType> {
    @Override
    public FType deserialize(JsonParser parser, DeserializationContext context, Type type) {
        return FType.MANDATORY;
    }
}
```

The problem is when I run the test the deseralizator is not called and the property **accessory** from object **obj** is null.

How to solve it?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/406/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTQxMzcyOA==,yasson,625413728,406,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-05-07T18:09:10Z,2020-05-07T18:09:10Z,"hi @lusabo, can you please include your model objects such as `Response` and `Accessories`?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTQxMzcyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTY4NjUwOQ==,yasson,625686509,406,NA,lusabo,191940,Luciano Borges,lucianosantosborges@gmail.com,NA,2020-05-08T07:44:07Z,2020-05-08T07:44:07Z,"Hi @aguibert ,

I discovered my problem, I don't know how Yasson can help at this point. It was missing a set method of an attribute which is of type List in one of the entities. The problem is that these entities are generated by JAXB and it seems that JAXB does not generate setters for List type properties.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTY4NjUwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTgyMzg0Mw==,yasson,625823843,406,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-05-08T13:46:27Z,2020-05-08T13:46:27Z,"have you tried using a custom `JsonbAdapter` implementation? The adapter may be used to perform ""manual"" conversion logic for situations like this where you can't control the model class (e.g. JAX-B model) and they don't match the getter/setter pattern.

See: http://json-b.net/docs/user-guide.html#adapters","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTgyMzg0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTgzNDM5NA==,yasson,625834394,406,NA,lusabo,191940,Luciano Borges,lucianosantosborges@gmail.com,NA,2020-05-08T14:10:40Z,2020-05-08T14:10:40Z,"Yes, I tried with Adapter too, now I solving configuring the XJC (JAXB2) plugin to generate my stubs with the setters.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTgzNDM5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg0Mjg3MQ==,yasson,625842871,406,NA,lusabo,191940,Luciano Borges,lucianosantosborges@gmail.com,NA,2020-05-08T14:29:01Z,2020-05-08T14:29:01Z,"Hi @aguibert ,

I managed to get the plugin to generate the stubs with the setters for attributes of List type .

For historical record only, the problem was solved by adding the following arguments:
```
<args>
   <arg> -Xsetters </arg>
   <arg> -Xsetters-mode = direct </arg>
   <arg> -XtoString </arg>
</args>
```

I don't know if this problem will be solved by Yasson, if so, I don't know how to proceed with the issue, otherwise, you can close it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg0Mjg3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg2MDUzOQ==,yasson,625860539,406,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-05-08T15:06:13Z,2020-05-08T15:06:13Z,"can you clarify what the problem is at this point? I've lost track. Is it still the same problem as the OP or has it changed? If it's the same problem as the OP, you'll need to upload the additional info I asked for.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg2MDUzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg2NzQ2OA==,yasson,625867468,406,NA,lusabo,191940,Luciano Borges,lucianosantosborges@gmail.com,NA,2020-05-08T15:21:03Z,2020-05-08T15:21:03Z,"We are migrating a project that uses Jackson to use Json-b / Yasson. A part of this project uses JAXB to generate some classes (stubs). Another part of the project uses these classes, and when serializing/deserializing with my serializers / deserializers (I also tested adapters) I was having problems with one of them that has one of its List <Enum> attributes. When deserializing a json file (as shown at the beginning), the field was null, and when debugging I realized that the class that had the list did not have the set method for this list, which by JSON-B is not possible to deserialize an entity without get and set methods. So I configured the JAXB plugin to generate the setters in the stubs.

The question is, is json-b going to force all entities to have set and get methods for their attributes?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg2NzQ2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg3MzQ3OA==,yasson,625873478,406,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-05-08T15:33:45Z,2020-05-08T15:33:45Z,"> The question is, is json-b going to force all entities to have set and get methods for their attributes?

For the default mapping, yes getters/setters (or public field) are required.

If it is not possible to have these, then ""custom mapping"" may be used, which is when you implement custom Serializer/Deserializer/Adapter classes.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTg3MzQ3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/406,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MTQ4NjUxMw==,yasson,651486513,406,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-30T02:39:35Z,2020-06-30T02:39:35Z,haven't seen any additional activity on this question so I'm going to close out. We can re-open if needed,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MTQ4NjUxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/407,https://api.github.com/repos/eclipse-ee4j/yasson/issues/407,yasson,614887165,407,Clarification needed,maald,47333881,,,CLOSED,2020-05-08T17:47:33Z,2020-05-08T18:29:40Z,"Assume you have a class with 2 properties

```java
public class Whatever {
    public int numberProp;
    public String stringProp;      // String
}
```
Serialize an instance to JSON

```java
Whatever obj = new Whatever();
obj.numberProp = 1;
obj.stringProp = ""hello"";

String json = JsonbBuilder.create().toJson(obj);
System.out.println(json);
```
as expected you get something like this
```json
{ 
   ""numberProp"" :  1,
   ""stringProp"" :  ""hello""
}
```
Now, if you de-serialize the following JSON payload
```json
{ 
   ""numberProp"" :  1,
   ""stringProp"" :  12345
}
```
Json-b will simply de-serialize a JSON number value (12345) to a Java String (""12345"")! 
In that payload, ""stringProp"" clearly has a JSON number value/not a JSON string value.

The confusing part here is that Json-B serializes Java String to JSON string by making sure to include quotes but then de-serialize a JSON number (has no quotes) to Java String.

Is this a bug or the expected behavior?

Personally, I prefer fail-fast approach (let the client know there is an issue with the value/expected a JSON string) instead of masking this basic type mismatch.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/407/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/407,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTk1Mzk0Mg==,yasson,625953942,407,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-05-08T18:29:16Z,2020-05-08T18:29:16Z,"Issue moved to [eclipse-ee4j/jsonb-api #239](https://github.com/eclipse-ee4j/jsonb-api/issues/239) via [**ZenHub**](https://www.zenhub.com/)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTk1Mzk0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,yasson,623828740,412,Illegal access warnings with OpenJDK 15,gunnarmorling,28612,Gunnar Morling,,CLOSED,2020-05-24T09:32:14Z,2020-06-15T17:41:03Z,"**Describe the bug**
I'm getting these warnings with Yasson 1.0.7:

```
WARNING: Illegal reflective access by org.eclipse.yasson.internal.ReflectionUtils (file:/path/to/org.eclipse.yasson-1.0.7.jar) to constructor java.util.AbstractCollection()
WARNING: Illegal reflective access by org.eclipse.yasson.internal.ReflectionUtils (file:/path/to/org.eclipse.yasson-1.0.7.jar) to constructor java.util.AbstractList()
```

While functionality of the application isn't impacted, the warning creates noise, and the default option in a future JDK will be to disallow these reflective access.

**To Reproduce**
Serialize/deserialize e.g. a collection class.

**Expected behavior**
No warning should be printed, reflection should not be unconditionally applied.

**System information:**
 - OS: macos
 - Java Version: JDK 15-ea+24-1168
 - Yasson Version: [e.g. 1.0.7]

**Additional context**
-
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/412/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM5MzE5Nw==,yasson,637393197,412,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-02T08:50:20Z,2020-06-02T08:50:20Z,"Was unable to reproduce this error using this code:

```java
var jsonb = JsonbBuilder.create();
        
var coll1 = List.of(""test1"");
var coll2 = Map.of(""hi"", ""there"");
        
var toJson1 = jsonb.toJson(coll1);
var fromJson1 = jsonb.fromJson(toJson1, List.class);
        
var toJson2 = jsonb.toJson(coll2);
var fromJson2 = jsonb.fromJson(toJson2, Map.class);
        
System.out.println(toJson1);
System.out.println(fromJson1);
System.out.println(toJson2);
System.out.println(fromJson2);
```

This printed the following without any warnings:
```
[""test1""]
[test1]
{""hi"":""there""}
{hi=there}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM5MzE5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM5Nzg4Nw==,yasson,637397887,412,NA,gunnarmorling,28612,Gunnar Morling,,NA,2020-06-02T08:58:02Z,2020-06-02T08:58:02Z,Could you try with a bean that has a list/map as a member?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzM5Nzg4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzQwNjgxOA==,yasson,637406818,412,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-02T09:13:14Z,2020-06-02T09:13:14Z,"Tried with this @gunnarmorling :
```java
public class Main {

    public static void main(String[] args) {
        var jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(Boolean.TRUE));
        
        var data = new TestData();
        var toJson1 = jsonb.toJson(data);
        var fromJson1 = jsonb.fromJson(toJson1, TestData.class);
        
        System.out.println(toJson1);
        System.out.println(fromJson1);
    }
    
    public static class TestData {
        
        public final List<String> data1 = List.of(""test"");
        public final Map<String, String> data2 = Map.of(""hi"", ""sup"");
        
        @Override
        public String toString() {
            return data1.toString() + ' ' + data2.toString();
        }
    }
}
```

This printed the following without errors:
```
{
    ""data1"": [
        ""test""
    ],
    ""data2"": {
        ""hi"": ""sup""
    }
}
[test] {hi=sup}
```

Also tried going back a few commits (I thought maybe something fixed this), but still got no warnings. :/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzQwNjgxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzQzMjQ2OQ==,yasson,637432469,412,NA,gunnarmorling,28612,Gunnar Morling,,NA,2020-06-02T09:59:28Z,2020-06-02T09:59:28Z,"So I went back to see what I did and create a reproducer, but turns out your first example exposes the issue for me already. Here's exactly what I'm doing:

```
java --version
openjdk 15-ea 2020-09-15
OpenJDK Runtime Environment (build 15-ea+24-1168)
OpenJDK 64-Bit Server VM (build 15-ea+24-1168, mixed mode, sharing)
```

```
cat > Test.java <<EOF
import java.util.List;
import java.util.Map;

import javax.json.bind.JsonbBuilder;

public class YassonTest {

    public static void main(String[] args) {
        var jsonb = JsonbBuilder.create();

        var coll1 = List.of(""test1"");
        var coll2 = Map.of(""hi"", ""there"");

        var toJson1 = jsonb.toJson(coll1);
        var fromJson1 = jsonb.fromJson(toJson1, List.class);

        var toJson2 = jsonb.toJson(coll2);
        var fromJson2 = jsonb.fromJson(toJson2, Map.class);
    }
}
EOF
```

```
java --class-path=/Users/gunnar/.m2/repository/org/glassfish/jakarta.json/1.1.6/jakarta.json-1.1.6.jar:/Users/gunnar/.m2/repository/org/eclipse/yasson/1.0.7/yasson-1.0.7.jar:/Users/gunnar/.m2/repository/jakarta/json/bind/jakarta.json.bind-api/1.0.2/jakarta.json.bind-api-1.0.2.jar Test.java

WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.yasson.internal.ReflectionUtils (file:/Users/gunnar/.m2/repository/org/eclipse/yasson/1.0.7/yasson-1.0.7.jar) to constructor java.util.AbstractCollection()
WARNING: Please consider reporting this to the maintainers of org.eclipse.yasson.internal.ReflectionUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
```

Which Java version are you on?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNzQzMjQ2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk1ODU3Mg==,yasson,638958572,412,NA,edufolly,1471193,Eduardo Folly,edufolly@gmail.com,NA,2020-06-04T16:16:21Z,2020-06-04T16:16:21Z,"I received the same message when I was trying to return a list from WS with Hibernate.

```
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.yasson.internal.ReflectionUtils (jar:file:/Users/edufolly/.gradle/caches/modules-2/files-2.1/org.eclipse/yasson/1.0.7/feea69b46df5891c9e76f4eb387285b8520f885b/yasson-1.0.7.jar!/) to constructor java.util.AbstractCollection()
WARNING: Please consider reporting this to the maintainers of org.eclipse.yasson.internal.ReflectionUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
```

It appears with this simple query.

```java
public List<T> getAll() {
    PanacheQuery<T> query = this.find(""deletedAt = ?1"", Config.NOT_DELETED);
    return query.list();
}
```

**uname -a**
```
Darwin MacBook-Pro-de-Eduardo.local 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 x86_64
```
**java -version**
```
openjdk version ""11.0.7"" 2020-04-14
OpenJDK Runtime Environment GraalVM CE 20.1.0 (build 11.0.7+10-jvmci-20.1-b02)
OpenJDK 64-Bit Server VM GraalVM CE 20.1.0 (build 11.0.7+10-jvmci-20.1-b02, mixed mode, sharing)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk1ODU3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI0NjU4NQ==,yasson,644246585,412,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-15T16:45:13Z,2020-06-15T16:45:13Z,"I managed to reproduce it with 1.0.7. It was a mistake on my end...
However I was unable to reproduce it with 2.0.0-M2.
Can you guys try with that version? @gunnarmorling @edufolly ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI0NjU4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/412,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI3Mzk0MA==,yasson,644273940,412,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-15T17:40:55Z,2020-06-15T17:40:55Z,"This issue has been fixed in 2.X stream as @Degubi noted by this PR: https://github.com/eclipse-ee4j/yasson/pull/403

And the fix has already been backported to 1.X here: https://github.com/eclipse-ee4j/yasson/pull/401

So the fix will be included in the next release of Yasson 1.X (1.0.8). Closing this one ad a dup of https://github.com/eclipse-ee4j/yasson/pull/401","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDI3Mzk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/413,https://api.github.com/repos/eclipse-ee4j/yasson/issues/413,yasson,627218005,413,GlassFish needs a M2 release,smillidge,939073,Steve Millidge,,CLOSED,2020-05-29T12:01:28Z,2020-06-04T14:31:35Z,Eclipse GlassFish needs a M2 release incorporating https://github.com/eclipse-ee4j/yasson/pull/411 for the June milestone release.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/413/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/419,https://api.github.com/repos/eclipse-ee4j/yasson/issues/419,yasson,639498881,419,Cannot serialize objects with java.nio.file.Path,rdehuyss,567842,Ronald Dehuysser,,CLOSED,2020-06-16T09:03:48Z,2020-07-02T20:13:00Z,"**Describe the bug**
```
Caused by: java.lang.IllegalAccessException: class org.eclipse.yasson.internal.model.ReflectionPropagation cannot access a member of class sun.nio.fs.UnixPath (in module java.base) with modifiers ""public""
	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)
	at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)
	at java.base/java.lang.reflect.Method.invoke(Method.java:558)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.lambda$acceptMethod$0(ReflectionPropagation.java:51)
	at org.eclipse.yasson.internal.model.ReflectionPropagation.getValue(ReflectionPropagation.java:110)
	... 101 more
```

**To Reproduce**
See failing unit test:
```
package org.jobrunr.utils.mapper;

import org.junit.jupiter.api.Test;

import javax.json.bind.JsonbBuilder;
import java.nio.file.Path;

public class YassonPathTest {

    @Test
    public void serializeObjectWithPath() {
        final ObjectWithPath objectWithPath = new ObjectWithPath(Path.of(""/tmp""));
        final String s = JsonbBuilder.create().toJson(objectWithPath);
    }

    public static class ObjectWithPath {
        private Path path;

        public ObjectWithPath(Path path) {
            this.path = path;
        }

        public Path getPath() {
            return path;
        }

        public void setPath(Path path) {
            this.path = path;
        }
    }
}

```

**Expected behavior**
To have the path serialized in the json

**System information:**
 - OS: Ubuntu 19.10
 - Java Version: 11
 - Yasson Version: 1.0.7

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/419,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDc3OTQxOQ==,yasson,644779419,419,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-16T13:51:09Z,2020-06-16T13:51:09Z,"Thanks for opening this issue @rdehuyss, I'm going to swap it from [bug] to [enhancement] since the JSON-B spec does not mandate support for `java.nio.file.Path` (I still think it will be good to support though).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDc3OTQxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/419,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDQ2MzkyNw==,yasson,650463927,419,NA,rwperrott,52632091,Richard Perrott,,NA,2020-06-27T00:38:45Z,2020-06-27T00:38:45Z,"That's annoying, I'll have to implement a JsonbAdapter<Path,String> for my own project.

To support non-default FileSystems, URI **must** be used as an intermediary between Path and String.

I think that this (untested) JsonbAdapter should work:

```java
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.json.bind.adapter.JsonbAdapter;

public class JsonbPathAdapter implements JsonbAdapter<Path, String> {

    @Override
    public String adaptToJson(Path obj) throws Exception {
        return null == obj ? null : obj.toUri().toString();
    }

    @Override
    public Path adaptFromJson(String obj) throws Exception {
        // Any used non-default FileSystems must be registered for this to work; see Javadoc for FileSystems for details.
        return null == obj ? null : Paths.get(URI.create(obj));
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDQ2MzkyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/419,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDQ2OTY4Mg==,yasson,650469682,419,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-27T01:26:06Z,2020-06-27T01:26:06Z,"hi @rwperrott, I am having a new team member work on this one now actually. Should be available soon in Yasson","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDQ2OTY4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/420,https://api.github.com/repos/eclipse-ee4j/yasson/issues/420,yasson,639824722,420,Illegal reflective access,jefrog1844,54285243,Jeff Rogers,jefrog1844@gmail.com,CLOSED,2020-06-16T16:51:24Z,2020-06-18T02:27:48Z,"**Describe the bug**
OpenJDK 64-Bit Server VM warning: forcing TieredStopAtLevel to full optimization because JVMCI is enabled

2020-06-16 11:29:09,961 INFO  [io.agr.pool] (Quarkus Main Thread) Datasource '<default>': Initial size smaller than min. Connections will be created when necessary
2020-06-16 11:29:16,316 INFO  [io.quarkus] (Quarkus Main Thread) podfx 1.0.0-SNAPSHOT on JVM (powered by Quarkus 1.5.0.Final) started in 9.655s. Listening on: http://0.0.0.0:9080
2020-06-16 11:29:16,316 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.
2020-06-16 11:29:16,316 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, jdbc-postgresql, mutiny, narayana-jta, resteasy, resteasy-jsonb, security, smallrye-jwt, vertx, vertx-web]
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.yasson.internal.ReflectionUtils (jar:file:/C:/Users/019535/.m2/repository/org/eclipse/yasson/1.0.7/yasson-1.0.7.jar!/) to constructor java.util.AbstractCollection()
WARNING: Please consider reporting this to the maintainers of org.eclipse.yasson.internal.ReflectionUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release


**To Reproduce**
Steps to reproduce the bug

**Expected behavior**
A clear and concise description of what you expected to happen.

**System information:**
 - OS: Windows 7
 - Java Version:  11
 - Yasson Version: 1.0.7

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/420/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/420,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NTU4MDI1MQ==,yasson,645580251,420,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-06-17T19:36:10Z,2020-06-17T19:36:10Z,"This is a duplicate of #412, which was already resolved & closed @jefrog1844
See the answer here: 

> This issue has been fixed in 2.X stream as @Degubi noted by this PR: #403
> And the fix has already been backported to 1.X here: #401
> So the fix will be included in the next release of Yasson 1.X (1.0.8).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NTU4MDI1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/420,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NTczMTA0NQ==,yasson,645731045,420,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-18T02:27:39Z,2020-06-18T02:27:39Z,What @Degubi said 🙂 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NTczMTA0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/422,https://api.github.com/repos/eclipse-ee4j/yasson/issues/422,yasson,643483119,422,UserDeserializer deserializeInternal() breaks JsonbDeserializer for named object VALUE_NULL,rwperrott,52632091,Richard Perrott,,OPEN,2020-06-23T02:38:39Z,2020-06-23T02:38:39Z,"**Describe the bug**
An org.eclipse.yasson.internal.serializer.UserDeserializer instance's deserializeInternal method, called from a 1st level JsonbDeserializer, for a 2nd level JsonbDeserializer, fails to check for parser.level.lastEvent==VALUE_NULL (a null value named object field), so calls parser.next(), so that the 2nd level JsonbDeserializer sees KEY_NAME for the next named 1st level field, hmm...

**To Reproduce**
Run Level1.main() in class Level1.java below (I tried to paste as a zip file, but no luck):
```java
import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbException;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.stream.JsonParser;
import java.lang.reflect.Type;
import java.util.Arrays;

import static javax.json.stream.JsonParser.Event.KEY_NAME;
import static javax.json.stream.JsonParser.Event.VALUE_NULL;

@JsonbTypeDeserializer(Level1.JD.class)
public class Level1 {
    private String name1;
    private Level2 level2;
    private String misdirected;

    public static void main(String[] args) {
        String json = ""[\n"" +
                ""  {\n"" +
                ""    \""name1\"" : \""a1\"",\n"" +
                ""    \""level2\"" : null,\n"" +
                ""    \""misdirected\"" : \""to Level2.JD\""\n"" +
                ""  },\n"" +
                ""  {\n"" +
                ""    \""name1\"" : \""b1\"",\n"" +
                ""    \""level2\"" : {\n"" +
                ""         \""name2\"" : \""b2\""\n"" +
                ""       },\n"" +
                ""    \""misdirected\"" : \""to Level2.JD\""\n"" +
                ""  } ,\n"" +
                ""  {\n"" +
                ""    \""name1\"" : \""c1\"",\n"" +
                ""    \""level2\"" : {\n"" +
                ""         \""name2\"" : \""c2\"",\n"" +
                ""         \""value2\"" : \""Value2\""\n"" +
                ""       },\n"" +
                ""    \""misdirected\"" : \""to Level2.JD\""\n"" +
                ""  }\n"" +
                ""]"";
        System.out.println(""json:\n""+json);
        Jsonb jsonb = JsonbBuilder.create();
        Level1[] level1s = jsonb.fromJson(json, Level1[].class);
        System.out.println(""Level1s: ""+Arrays.toString(level1s));
    }

    @Override
    public String toString() {
        return ""Level1{"" +
                ""name1='"" + name1 + '\'' +
                "", level2="" + level2 +
                "", misdirected='"" + misdirected + '\'' +
                '}';
    }

    public static class JD implements JsonbDeserializer<Level1> {

        @Override
        public Level1 deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            Level1 level2 = new Level1();
            while (parser.hasNext()) {
                JsonParser.Event event = parser.next();
                if (event == KEY_NAME) {
                    String name = parser.getString();
                    switch (name) {
                        case ""name1"":
                            if (parser.next() != VALUE_NULL)
                                level2.name1 = parser.getString();
                            break;
                        case ""level2"":
                            level2.level2 = ctx.deserialize(Level2.class, parser);
                            break;
                        case ""misdirected"":
                            if (parser.next() != VALUE_NULL)
                                level2.misdirected = parser.getString();
                            break;
                        // other field clauses
                        default:
                            throw new JsonbException(""Level1 has no property: "" + name);
                    }
                }
            }
            return level2;
        }
    }
}

@JsonbTypeDeserializer(Level2.JD.class)
class Level2 {
    private String name2;
    private String value2;

    @Override
    public String toString() {
        return ""Level2{"" +
                ""name2='"" + name2 + '\'' +
                "", value2='"" + value2 + '\'' +
                '}';
    }

    public static class JD implements JsonbDeserializer<Level2> {

        @Override
        public Level2 deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            Level2 level2 = new Level2();
            while (parser.hasNext()) {
                JsonParser.Event event = parser.next();
                if (event == KEY_NAME) {
                    String name = parser.getString();
                    switch (name) {
                        case ""name2"":
                            if (parser.next() != VALUE_NULL)
                                level2.name2 = parser.getString();
                            break;
                        case ""value2"":
                            if (parser.next() != VALUE_NULL)
                                level2.value2 = parser.getString();
                            break;
                        default:
                            throw new JsonbException(""Level2 has no property: "" + name);
                    }
                }
            }
            return level2;
        }
    }
}
```


**Expected behavior**
org.eclipse.yasson.internal.serializer.UserDeserializer deserializeInternal method checks for parser.level.lastEvent==VALUE_NULL and exits early, so that the parser is not modified, and null is returned to the caller of ctx.deserialize(cls, parser); 

**System information:**
 - OS: Windows
 - Java Version: 11
 - Yasson Version: 1.0.7

**Additional context**
If fixed this bug by modifying org.eclipse.yasson.internal.serializer.UserDeserializer 

From:
```java
    @SuppressWarnings(""unchecked"")
    @Override
    public void deserializeInternal(JsonbParser parser, Unmarshaller context) {
        setParserContext(moveToFirst(parser));
        JsonParser.Event lastEvent = getParserContext().getLastEvent();
        ...
```

To:
```java
    @SuppressWarnings(""unchecked"")
    @Override
    public void deserializeInternal(JsonbParser parser, Unmarshaller context) {
        setParserContext(moveToFirst(parser));
        JsonParser.Event lastEvent = getParserContext().getLastEvent();
        if (lastEvent == VALUE_NULL)
            return;
        ...
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/422/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,yasson,644786564,423,Json silently returns an empty list instead of failing,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,OPEN,2020-06-24T17:30:46Z,2023-07-10T09:04:32Z,"**Describe the bug**
When providing a json object instead of a json array and asking Jsonb to produce a list, the library returns an empty list; whereas it should throw an exception to indicate to the caller that something is wrong.

**To Reproduce**

```
String json = ""{\""name\"": \""John Doe\""}"";
try (Jsonb jsonb = JsonbBuilder.create()) {
	List<Person> list = jsonb.fromJson(json, new ArrayList<Person>() {
		private static final long serialVersionUID = -7485196487128234751L;
	}.getClass().getGenericSuperclass());
	/** The deserialization process returns an empty list instead of failing fast: */
	assertEquals(List.of(), list);
}
```

See [Person](https://github.com/Sarah-Elhelw/teach_spreadsheets/blob/master/src/test/java/io/github/oliviercailloux/teach_spreadsheets/json/Person.java) and [PersonTests](https://github.com/Sarah-Elhelw/teach_spreadsheets/blob/master/src/test/java/io/github/oliviercailloux/teach_spreadsheets/json/PersonTests.java) for full details.

**Expected behavior**
I expect that the call `jsonb.fromJson` in the above example throws an exception indicating that the input string is not in a format that allows to extract a list of persons (as a json array is expected and not a json object).

**System information:**
 - Yasson Version: 1.0.7

**Additional context**
This bug was found by students in my course, whose GitHub usernames are `Sarah-Elhelw` and `Semida-Buzdugan`. Credits go to them.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/423/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTE1NTM2NQ==,yasson,649155365,423,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-06-25T01:12:57Z,2020-06-25T01:12:57Z,"hi @oliviercailloux, thanks for raising this issue. My first thought here is that this falls under the [""must-ignore"" policy](https://github.com/eclipse-ee4j/jsonb-api/blob/master/spec/src/main/asciidoc/jsonb.adoc#318-must-ignore-policy) defined in section 3.18 of the JSON-B spec:

> When JSON Binding implementation during deserialization encounters key in key/value pair that it does not recognize, it should treat the rest of the JSON document as if the element simply did not appear, and in particular, the implementation MUST NOT treat this as an error condition.

I know this is is not always preferred behavior for users though, so I have raised an issue to have a way to globally opt-out of this policy here: https://github.com/eclipse-ee4j/jsonb-api/issues/56","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTE1NTM2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTM2ODM4Nw==,yasson,649368387,423,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2020-06-25T08:29:20Z,2020-06-25T08:29:20Z,"I disagree this falls under must-ignore. Here, Json is given a JsonObject whereas a JsonArray is expected. The lack of failure is not a consequence of ignoring some keys: it is rather as if 1) the whole object was ignored (including thus the opening and closing curly brackets), and 2) the lack of opening and closing square brackets was ignored as well.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTM2ODM4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Kjdlt,yasson,1250810221,423,NA,oliviercailloux,1244880,Olivier Cailloux,olivier.cailloux@dauphine.fr,NA,2022-09-19T09:56:12Z,2022-09-19T09:56:12Z,"Have you had some chance to investigate this bug? To reiterate, the lack of failure is not a consequence of ignoring some keys, thus the quoted paragraph does not apply and Yasson should fail, it seems to me.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Kjdlt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/423,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEZmu,yasson,1628543406,423,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T09:04:32Z,2023-07-10T09:04:32Z,"The given code now correctly throws an exception:

```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Incorrect position for processing type: class java.util.ArrayList. Received event: START_OBJECT Allowed: [START_ARRAY]
	at org.eclipse.yasson/org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:80)
	at org.eclipse.yasson/org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:1)
	at org.eclipse.yasson/org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson/org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:1)
	at org.eclipse.yasson/org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	at org.eclipse.yasson/org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:70)
	at org.eclipse.yasson/asd.Main.main(Main.java:14)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEZmu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/441,https://api.github.com/repos/eclipse-ee4j/yasson/issues/441,yasson,665515319,441,Support java.beans.Transient?,onacit,247819,Jin Kwon,,CLOSED,2020-07-25T04:58:10Z,2020-07-26T01:13:16Z,"I know this is not what an implementation should concern.

But someone please issue to any spec guy for supporting the `java.beans.Transient`.

I know `JsonbTransient` works for that.

```java
    // should not be serialized/deserialized
    //@jakarta.json.bind.annotation.JsonbTransient
    @java.beans.Transient
    public String getSomeHuh() {
        return some + "", huh?"";
    }

    private String some;
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/441/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/441,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzkyMzI4Mw==,yasson,663923283,441,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-07-26T01:13:15Z,2020-07-26T01:13:15Z,"Issue moved to [eclipse-ee4j/jsonb-api #253](https://github.com/eclipse-ee4j/jsonb-api/issues/253) via [**ZenHub**](https://www.zenhub.com/)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzkyMzI4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,yasson,678256696,443,Wrong serialized name and ignored field annotations when second letter is capital,dusik66,63782849,Dušan Križan,,CLOSED,2020-08-13T08:32:31Z,2023-04-11T07:58:54Z,"When the name of the field has second character capital, than serialized name of the field is ignored. Also annotations on the field are ignored. 

**To Reproduce**
String aBc;

Output will be {“ABc”: “value”}

**Expected behavior**
Output should be {“aBc”: “value”}

Mistake is in the ClassParser.toPropertyMethod() and in ClassParser.lowerFirstLetter()

**System information:**
 - OS: [Windows]
 - Java Version: [11]
 - Yasson Version: [1.0.7]
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/443/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY3ODMxNjI0NA==,yasson,678316244,443,NA,martijndwars,426811,Martijn Dwars,,NA,2020-08-21T14:21:34Z,2020-08-21T14:21:34Z,"I cannot reproduce this with Yasson 1.0.7:

```
> cat src/main/java/yt/App.java
package yt;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;

public class App {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.aBc = ""value"";

        Jsonb jsonb = JsonbBuilder.create();
        String result = jsonb.toJson(dog);
        System.out.println(result);
    }

    public static class Dog {
        public String aBc;
    }
}

> ./gradlew run
{""aBc"":""value""}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY3ODMxNjI0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTgyMjE4Mw==,yasson,751822183,443,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-12-28T18:32:36Z,2020-12-28T18:32:36Z,"Same, can't reproduce on 2.0.1. All annotations are working and the output is:
{""aBc"":""value""}","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTgyMjE4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzg3MzI0OA==,yasson,847873248,443,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-05-25T13:31:59Z,2021-05-25T13:31:59Z,"Hi @dusik66 , could you please provide reproducer if this issue is still valid for you?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzg3MzI0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzY1OTk3Mg==,yasson,857659972,443,NA,dusik66,63782849,Dušan Križan,,NA,2021-06-09T12:40:25Z,2021-06-09T12:40:25Z,"Hi, I have found that Lombok cause the problem:

```
import lombok.Data;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;

public class App {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.aBc = ""value"";

        Jsonb jsonb = JsonbBuilder.create();
        String result = jsonb.toJson(dog);
        System.out.println(result);
    }

    @Data
    public static class Dog {
        private String aBc;
    }
}
```

output:
```
{""ABc"":""value""}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzY1OTk3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzk2MzM1Mg==,yasson,863963352,443,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-06-18T11:16:30Z,2021-06-18T11:16:30Z,"Alright so if I am getting this right, it is not an issue at our side? :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzk2MzM1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/443,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Zk-XI,yasson,1502864840,443,NA,dbaldes,2527761,Daniel Baldes,,NA,2023-04-11T07:58:54Z,2023-04-11T07:58:54Z,"I just ran into the same issue. I sort of agree that lombok ""causes"" it, but I think it would be immensely useful if yasson could handle this - considering that a) lombok is quite popular, and b) it behaves correctly by generating getABc() from the property name ""aBc"". The property ""aBc"" is the property that belongs to the getter getABc(), but in this case, the annotations on aBc don't apply - that is not what I would expect.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Zk-XI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/444,https://api.github.com/repos/eclipse-ee4j/yasson/issues/444,yasson,685700146,444,JSON-B transient and property annotation collide unexpectedly,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,CLOSED,2020-08-25T18:32:19Z,2021-05-26T07:45:31Z,"Originally raised by @sdaschner in these issues:
OpenLiberty: https://github.com/OpenLiberty/open-liberty/issues/13640
Quarkus: https://github.com/quarkusio/quarkus/issues/11594

**Describe the bug**
When mapping a class via JSON-B, and annotating fields as follows, the result throws an error because of mismatching types:

```java
public class Coffee {

    @JsonbTransient
    private Order order;

    @JsonbProperty(""order"")
    private URI orderLink;

    Coffee() {
        order = new Order();
        orderLink = URI.create(""http://localhost/"");
    }

    // getters & setters
}
```

this results in: 

```
[ERROR   ] Unable to serialize property 'order' from com.sebastian_daschner.openliberty.Coffee
[ERROR   ] Generating incomplete JSON
[ERROR   ] Problem with writing the data, class com.sebastian_daschner.openliberty.Coffee, ContentType: application/json
```

If both properties `order` and `orderLink` have the same type, it works as expected (i.e. `orderLink` is serialized as `""order""`).

However, if we annotate `@JsonbProperty` on the setter instead, it works:

```java
public class Coffee {

    @JsonbTransient
    private Order order;

    private URI orderLink;

    // [...]

    @JsonbProperty(""order"")
    public URI getOrderLink() {
        return orderLink;
    }

}
```

Response:

```json
{""order"":""http://localhost/""}
```

There seems to be an unexpected type link of the (ignored) property with the default serialized JSON key `""order""`, and the custom name binding.

**To Reproduce**
See code snippets in description

**Expected behavior**
Original code should deserialize into the expected JSON of:
```json
{""order"":""http://localhost/""}
```
instead of throwing an error

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/444/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/444,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDI1OTE1Ng==,yasson,680259156,444,NA,hbelmiro,11776454,Helber Belmiro,helber.belmiro@gmail.com,NA,2020-08-25T20:41:55Z,2020-08-25T20:41:55Z,@aguibert I can try to fix this. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDI1OTE1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/444,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDI2MTgyMQ==,yasson,680261821,444,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-08-25T20:48:06Z,2020-08-25T20:48:06Z,"great, thanks @hbelmiro! ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDI2MTgyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/444,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDg2MzMzMg==,yasson,680863332,444,NA,hbelmiro,11776454,Helber Belmiro,helber.belmiro@gmail.com,NA,2020-08-26T12:59:26Z,2020-08-26T12:59:26Z,@aguibert the problem is not happening in current version. It may have already been fixed.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MDg2MzMzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/448,https://api.github.com/repos/eclipse-ee4j/yasson/issues/448,yasson,709754773,448,Missing artifact with 2.0.0,Degubi,13366932,Degubi,gergonoorbi@gmail.com,CLOSED,2020-09-27T14:55:26Z,2020-09-29T19:49:07Z,"Getting a 'Missing artifact org.eclipse:yasson:jar:2.0.0' error when trying to use the latest version released 23 days ago.

After looking at https://mvnrepository.com/artifact/org.eclipse/yasson there's no 2.0.0 version listed, only 2.0.0-M2
@m0mus ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/448/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/448,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDk0Nzk1NA==,yasson,700947954,448,NA,aguibert,5427967,Andrew Guibert,andy.guibert@gmail.com,NA,2020-09-29T19:49:05Z,2020-09-29T19:49:05Z,I checked with @m0mus on this and he said there is still some additional process to be passed before it is officially released. See here: https://bugs.eclipse.org/bugs/show_bug.cgi?id=567135,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDk0Nzk1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/454,https://api.github.com/repos/eclipse-ee4j/yasson/issues/454,yasson,729429010,454,@JsonbTransient does not work on abstract classes,rmanibus,10419172,Loïc Hermann,loic.hermann@outlook.fr,OPEN,2020-10-26T10:09:55Z,2022-08-24T10:06:04Z,"**Describe the bug**

@JsonbTransient work on interfaces but not on abstract classes.

**To Reproduce**
reproducer:

https://github.com/rmanibus/quarkus_12926

**Expected behavior**
Fields annotated with @JsonbTransient are ignored.

**System information:**
 - OS: [e.g. Linux, Windows, Mac]
 - Java Version: [e.g. 8, 11]
 - Yasson Version: [e.g. 1.0.5]

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/454/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/454,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JC75V,yasson,1225506389,454,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-24T10:06:03Z,2022-08-24T10:06:03Z,"I was debugging this and with the abstract class it is analyzed twice, one for the abstract and other for the anonymous class.

In the abstract class it is able to find the JsonbTransient but it is not getting that from the anonymous class that extends the abstract class. This `org.eclipse.yasson.internal.model.JsonbAnnotatedElement#getAnnotations()` returns empty array

For the interface, it is analyzed only one time, having that annotation.

I guess the fix is about getting the annotations from the parent classes too.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JC75V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/455,https://api.github.com/repos/eclipse-ee4j/yasson/issues/455,yasson,730586770,455,Convertion between JsonValue <-> POJO,scholzi100,3314051,Paul Scholz,,CLOSED,2020-10-27T16:00:33Z,2024-11-12T12:06:20Z,"Im looking for a option to convert a POJO <-> JsonValue. I found a issue on this in the api repo eclipse-ee4j/jsonb-api#111. 
But its about the API not the implemenation. 

Currenty there are only `YassonJsonb#fromJsonStructure` and `YassonJsonb#toJsonStructure` other options for JsonValue are not available. I am not able to find any method doing converting between JsonValue an POJO or visa-vera.

Am i overlooking some thing? If not are there plans to bringing this to version 2.0.0?

Are there workaround?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/455/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/456,https://api.github.com/repos/eclipse-ee4j/yasson/issues/456,yasson,731729547,456,"Value access calls toString() on failure, potentially leading to infinite recursion",nmatt,7593340,,,OPEN,2020-10-28T19:28:23Z,2021-05-25T13:33:12Z,"**Describe the bug**
The implementation of `ReflectionPropagation.setValue()`/`getValue()` calls `toString()` on the target object upon failure, as part of constructing the exception message:
```java
throw new JsonbException(""Error getting value on: "" + object, e);
```
This is a problem if the `toString()` implementation of the object itself uses JSON serialization to produce the string value, leading to infinite recursion and stack overflow.

**To Reproduce**
Run `main()` on the following example:
```java
import javax.json.bind.JsonbBuilder;

public final class Example
{
    public static void main(String[] args) throws Exception
    {
        System.out.println(JsonbBuilder.create().toJson(new Example()));
    }

    public String getProperty()
    {
        throw new RuntimeException(""some error"");
    }

    @Override
    public String toString()
    {
        return JsonbBuilder.create().toJson(this);
    }
}
```
**Expected behavior**
I would argue that `toString()` shouldn't be called upon serialization errors. Even if `toString()` doesn't itself call `toJson()`, there is some likelyhood that it will fail for the same reason that the serialization failed. (E.g. it's not unlikely for `toString()` to call `getProperty()` itself in the example class above.) Instead I would propose to only include the object type in the exception message (e.g. `getClass().getName()`).

**System information:**
 - Yasson Version: 1.0.8

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/456/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/457,https://api.github.com/repos/eclipse-ee4j/yasson/issues/457,yasson,731731148,457,Typo in exception message in ReflectionPropagation.setValue(),nmatt,7593340,,,CLOSED,2020-10-28T19:30:44Z,2020-11-02T15:49:48Z,"**Describe the bug**
Implementation of `ReflectionPropagation.setValue()`:
```java
    void setValue(Object object, Object value) {
        Objects.requireNonNull(object);

        try {
            setValueCommand.setValue(object, value);
        } catch (InvocationTargetException | IllegalAccessException e) {
            throw new JsonbException(""Error getting value on: "" + object, e);
        }
    }
```

**Expected behavior**
This should be ""setting value on"" instead of ""getting value on"".

**System information:**
 - Yasson Version: 1.0.8
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/457/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/459,https://api.github.com/repos/eclipse-ee4j/yasson/issues/459,yasson,732128130,459,Deserialization of object from primitive type not working ?,StephJan,16135939,StephJan,,OPEN,2020-10-29T08:58:31Z,2021-05-26T09:22:49Z,"When an object is serialized as a unique primitive value (say a numeric primary key) using a dedicated Serializer, Yasson fails to natively deserialize it (""Error deserialize JSON value into type XXX"").

For instance, Jackson dynamically checks if a constructor for target object exists with primitive value as a parameter, and invokes it to retrive object instance (so without the need for  custom deserializer)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/459/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/459,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTcyNTM2OQ==,yasson,751725369,459,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2020-12-28T14:12:25Z,2020-12-28T14:12:25Z,@StephJan Can you please show an example to reproduce this?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTcyNTM2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/459,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODYxNDM5Mw==,yasson,848614393,459,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-05-26T09:22:49Z,2021-05-26T09:22:49Z,"@StephJan If I am getting this right, you are referring to the situation like this:
```java
public class Pojo {
   public int someValue;
   public Pojo(int someValue) {
      this.someValue = someValue;
   }
}
public class Parent {
   public Pojo pojo = new Pojo();
}
```
Custom serializer for Pojo class will create something like this, when Parent class is serialized:
```json
{
   ""pojo"" : 1
}
```
And what you want Yasson to do, is to deserialize the json back to the Pojo class without creating custom deserializer. You want Pojo constructor to be automatically discovered, if it matches the type custom serializer created and use it create the instance?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODYxNDM5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/466,https://api.github.com/repos/eclipse-ee4j/yasson/issues/466,yasson,780892109,466,Error caused by #438 when module-info.java is present,Degubi,13366932,Degubi,gergonoorbi@gmail.com,CLOSED,2021-01-06T22:39:33Z,2021-02-18T12:06:26Z,"Using this code:

Main.class:
```java
public final class Main {
    public static void main(String[] args) {
        var json = JsonbBuilder.create();
        var data = """"""
                   {
                       ""prop"": ""hey""
                   }
                   """""";

        var deserialized = json.fromJson(data, Data.class);
    }
}
```

Data.class:
```java
public final class Data {
    public final String prop;

    @JsonbCreator
    public Data(@JsonbProperty(""prop"") String prop) {
        this.prop = prop;
    }
}
```

module-info.java: 
```java
open module degubi.test {
    exports degubi;

    requires jakarta.json;
    requires jakarta.json.bind;
}
```
Exception:
```
jan. 06, 2021 11:32:09 DU. org.eclipse.yasson.internal.Unmarshaller deserializeItem
SEVERE: Error accessing field 'prop' declared in 'class degubi.Data'
Exception in thread ""main"" jakarta.json.bind.JsonbException: Error accessing field 'prop' declared in 'class degubi.Data'
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:550)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:167)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1766)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:60)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:66)
	at degubi.test/degubi.Main.main(Main.java:15)
Caused by: java.lang.IllegalAccessException: access to public member failed: degubi.Data.prop/java.lang.String/getField, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:957)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:3625)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkField(MethodHandles.java:3575)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectFieldCommon(MethodHandles.java:3786)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectFieldNoSecurityManager(MethodHandles.java:3781)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflectField(MethodHandles.java:3287)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflectGetter(MethodHandles.java:3238)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:548)
	... 18 more
```

The exception points to the unreflect calls in PropertyModel.java

I found 2 ways to fix this issue:
- Deleting the module-info.java file in my project fixes this
- I reverted back the MethodHandle changes & just used reflection in PropertyModel.java, that fixed this

Tbh, I don't fully understand why this happens...","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/466/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/466,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTI5NzM3NQ==,yasson,781297375,466,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2021-02-18T12:06:25Z,2021-02-18T12:06:25Z,Fixed by #474,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTI5NzM3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/467,https://api.github.com/repos/eclipse-ee4j/yasson/issues/467,yasson,781971144,467,Serialization of inherited interfaces,jbaker-dstl,14165247,James Baker,,OPEN,2021-01-08T09:16:08Z,2021-01-08T10:24:41Z,"I have the following class setup

```
interface MyInterfaceA {...}
interface MyInterfaceB extends MyInterfaceA {...}

class Foo implements MyInterfaceA {...}
class Bar implements MyInterfaceB {...}

class MySerializer implements JsonbSerializer<MyInterfaceA> {...}
```

If I set up Jsonb using Yasson 2.0.1 as follows:

```
JsonbConfig config = new JsonbConfig().withSerializers(new MySerializer());
Jsonb jb = JsonbBuilder.create(config);

jb.toJson(new Foo());  // Serialized using MySerializer
jb.toJson(new Bar());  // Not serialized using MySerializer
```

Then I would expect instances of both `Foo` and `Bar` to be serialized with my serializer, as both implement `MyInterfaceA`. However, that isn't the case and only `Foo` is correctly serialized using my serializer. `Bar` is serialized by the default serializer (as far as I can tell), not by `MySerializer`.

In previous versions of Yasson (tested in 1.0.7), this worked as I expected. I assume this change is unintentional, and therefore a bug that needs fixing.

If this change intentional, how do I restore the old behavior so that anything implementing `MyInterfaceA` (even by inheritance) is serialized using `MySerializer`?

**System information:**
 - OS: Ubuntu 18
 - Java Version: OpenJDK 11
 - Yasson Version: 2.0.1
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/467/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/467,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjY3NzYzNQ==,yasson,756677635,467,NA,jbaker-dstl,14165247,James Baker,,NA,2021-01-08T10:24:41Z,2021-01-08T10:24:41Z,"The issue seems to be here, as this only considers the direct interface and not any super-interfaces.

https://github.com/eclipse-ee4j/yasson/blob/bac834c36829dcfe0b75f7a6847d10e055d1c1ea/src/main/java/org/eclipse/yasson/internal/ComponentMatcher.java#L209","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjY3NzYzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/470,https://api.github.com/repos/eclipse-ee4j/yasson/issues/470,yasson,787228309,470,transient should not be a trigger for Yasson,nimo23,3045549,,,CLOSED,2021-01-15T21:53:52Z,2021-04-13T08:52:07Z,"**Describe the bug**
Transient properties should NOT be bypassed by yasson. 

**To Reproduce**
I have this:

```
@JsonbProperty // should (de)serialize it, but yasson ignores this property
private transient User user;
```

and yasson does not generate json for property user. Only when removing `transient`-keyword, then yasson will generate the json.

**Expected behavior**
Yasson should ignore the java keyword transient for its (de)serializing stuff. Only `@JsonbTransient` should be a trigger for omitting properties. And if this is not possible, then at marking a property with `@JsonbProperty` should have priority over `transient`- keyword.

**System information:**
 - Java Version: 1.12
 - Yasson Version: current version

**Additional context**
Using it in Wildfly 21
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/470/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/470,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDgxODU2ODI4MA==,yasson,818568280,470,NA,nimo23,3045549,,,NA,2021-04-13T08:52:06Z,2021-04-13T08:52:06Z,"I think, this is a json-b specification issue. So I will move this issue to https://github.com/eclipse-ee4j/jsonb-api/issues/269","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDgxODU2ODI4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,yasson,797436436,471,java.lang.IllegalAccessException: access to public member failed [...] when using yasson through jersey's JsonBindingProvider,doriancransac,5418782,Dorian Cransac,reachme@doriancransac.info,CLOSED,2021-01-30T14:48:01Z,2021-02-18T12:03:03Z,"**Describe the bug**
Calls to `PropertyModel.createReadHandle()` in a standard modular project using yasson 2.0.1 via jersey 3.0.0 & jetty 11 result in an IllegalAccessException and make deserialization of the jersey service input object fail. Here is the full stacktrace:

```
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpInput - available=0 HttpInput@37698291 cs=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=true al=0} cp=org.eclipse.jetty.server.BlockingContentProducer@5097ab20 eof=false
janv. 30, 2021 3:28:00 PM org.eclipse.yasson.internal.Unmarshaller deserializeItem
GRAVE: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelState - sendError HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=true al=0}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.session.SessionHandler - Leaving scope org.eclipse.jetty.server.session.SessionHandler1107530534==dftMaxIdleSec=180 dispatch=REQUEST, async=false, session=null, oldsession=null, oldsessionhandler=null
[qtp1153907750-15] WARN org.eclipse.jetty.server.HttpChannel - /account/test
jakarta.servlet.ServletException: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:410)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:346)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:366)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:319)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:205)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:761)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:517)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1576)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1355)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:181)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:472)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1549)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:179)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1279)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:134)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:154)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.Server.handle(Server.java:567)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:404)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:661)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:396)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:289)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:324)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:106)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:137)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:790)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:912)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:86)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:233)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:212)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:49)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1072)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:885)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:274)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:73)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:56)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:50)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:68)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:109)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:176)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:79)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:469)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:391)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:80)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:255)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:248)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:292)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:274)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:265)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:234)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:680)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:394)
	... 33 more
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:543)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:167)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1766)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:60)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:99)
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:84)
	... 61 more
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:954)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:2977)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:2917)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:3062)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:3055)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflect(MethodHandles.java:2489)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:541)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.

	... 79 more
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelState - thrownException s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=true i=true al=0
jakarta.servlet.ServletException: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:410)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:346)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:366)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:319)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:205)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:761)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:517)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1576)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1355)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:181)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:472)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1549)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:179)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1279)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:134)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:154)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.Server.handle(Server.java:567)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:404)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:661)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:396)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:289)
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'

	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:324)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:106)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:137)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:790)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:912)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:86)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:233)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:212)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)

	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:49)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1072)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:885)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:274)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:73)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:56)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:50)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:68)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:109)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:176)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:79)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:469)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:391)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:80)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:255)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:248)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:292)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:274)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:265)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:234)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:680)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:394)
	... 33 more
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:543)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:167)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1766)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:60)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:99)
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:84)
	... 61 more
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:954)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:2977)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:2917)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:3062)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:3055)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflect(MethodHandles.java:2489)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.

	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:541)
	... 79 more
[qtp1153907750-15] WARN org.eclipse.jetty.server.HttpChannelState - unhandled due to prior sendError
jakarta.servlet.ServletException: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:410)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:346)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:366)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:319)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:205)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:761)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:517)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1576)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:226)
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'

	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1355)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:181)
	at org.eclipse.jetty.servlet@11.0.0/org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:472)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1549)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:179)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1279)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:134)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:154)
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)

	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.Server.handle(Server.java:567)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:404)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:661)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:396)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:289)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:324)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:106)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:137)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:790)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:912)
	at java.base/java.lang.Thread.run(Thread.java:832)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:86)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:233)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:212)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:49)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:132)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1072)
	at jersey.common@3.0.0/org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:885)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:274)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:73)
	at jersey.server@3.0.0/org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:56)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:50)
	at jersey.server@3.0.0/org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:68)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:109)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:176)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:79)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:469)
	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:391)
Caused by: jakarta.ws.rs.ProcessingException: Error deserializing object from entity stream.

	at jersey.server@3.0.0/org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:80)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:255)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:248)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors$1.call(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:292)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:274)
	at jersey.common@3.0.0/org.glassfish.jersey.internal.Errors.process(Errors.java:244)
	at jersey.common@3.0.0/org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:265)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:234)
	at jersey.server@3.0.0/org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:680)
	at jersey.container.servlet.core@3.0.0/org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:394)
	... 33 more
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:543)
Caused by: jakarta.json.bind.JsonbException: Error accessing getter 'getPassword' declared in 'class com.projectvisionaries.server.commons.model.Account'

	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:167)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1766)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:60)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:99)
	at jersey.media.json.binding@3.0.0/org.glassfish.jersey.jsonb.internal.JsonBindingProvider.readFrom(JsonBindingProvider.java:84)
	... 61 more
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:954)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:2977)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:2917)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:3062)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:3055)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflect(MethodHandles.java:2489)
	at org.eclipse.yasson@2.0.1/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:541)
	... 79 more
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelState - unhandle HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=true i=true al=0}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelState - nextAction(false) SEND_ERROR HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannel - action SEND_ERROR HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=222}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpInput - consumeAll HttpInput@37698291 cs=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0} cp=org.eclipse.jetty.server.BlockingContentProducer@5097ab20 eof=false
java.io.IOException: Unconsumed content
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpInput.consumeAll(HttpInput.java:133)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.ensureConsumeAllOrNotPersistent(HttpChannel.java:592)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:439)
	at org.eclipse.jetty.server@11.0.0/org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:289)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:324)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io@11.0.0/org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:106)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:137)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:790)
	at org.eclipse.jetty.util@11.0.0/org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:912)
	at java.base/java.lang.Thread.run(Thread.java:832)
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.AsyncContentProducer - consumeAll [e=java.io.IOException: Unconsumed content] AsyncContentProducer@3db24a3a[r=EofContent,t=null,i=null,error=false,c=HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=222}]
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelOverHttp - failing all content with java.io.IOException: Unconsumed content HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=223}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.AsyncContentProducer - failed all content of http channel EOF=true AsyncContentProducer@3db24a3a[r=EofContent,t=null,i=null,error=false,c=HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=223}]
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpInput - isFinished=true HttpInput@37698291 cs=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0} cp=org.eclipse.jetty.server.BlockingContentProducer@5097ab20 eof=true
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.AsyncContentProducer - isError = false AsyncContentProducer@3db24a3a[r=EofContent,t=null,i=null,error=false,c=HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=223}]
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpInput - isError=false HttpInput@37698291 cs=HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0} cp=org.eclipse.jetty.server.BlockingContentProducer@5097ab20 eof=true
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannelState - completing HttpChannelState@6744f15c{s=HANDLING rs=BLOCKING os=OPEN is=IDLE awp=false se=false i=false al=0}
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannel - sendResponse info=null content=DirectByteBuffer@7f12bc74[p=0,l=511,c=32768,r=511]={<<<<html>\n<head>\n<meta http-...<hr/>\n\n</body>\n</html>\n>>>r/>\n\n</bo...\x00\x00\x00\x00\x00\x00\x00} complete=true committing=true callback=org.eclipse.jetty.util.Callback$3@79345965
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpChannel - COMMIT for /account/test on HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=COMPLETING os=COMMITTED is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=224}
500 null HTTP/1.1
Cache-Control: must-revalidate,no-cache,no-store
Content-Type: text/html;charset=iso-8859-1


[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpConnection - generate: NEED_HEADER for SendCallback@66e13609[PROCESSING][i=HTTP/1.1{s=500,h=2,cl=-1},cb=org.eclipse.jetty.server.HttpChannel$SendCallback@6b0a3bb3] (null,[p=0,l=511,c=32768,r=511],true)@START
[qtp1153907750-15] DEBUG org.eclipse.jetty.http.HttpGenerator - generateHeaders HTTP/1.1{s=500,h=2,cl=-1} last=true content=DirectByteBuffer@7f12bc74[p=0,l=511,c=32768,r=511]={<<<<html>\n<head>\n<meta http-...<hr/>\n\n</body>\n</html>\n>>>r/>\n\n</bo...\x00\x00\x00\x00\x00\x00\x00}
[qtp1153907750-15] DEBUG org.eclipse.jetty.http.HttpGenerator - Cache-Control: must-revalidate,no-cache,no-store
Content-Type: text/html;charset=iso-8859-1


[qtp1153907750-15] DEBUG org.eclipse.jetty.http.HttpGenerator - EOF_CONTENT
[qtp1153907750-15] DEBUG org.eclipse.jetty.server.HttpConnection - generate: FLUSH for SendCallback@66e13609[PROCESSING][i=HTTP/1.1{s=500,h=2,cl=-1},cb=org.eclipse.jetty.server.HttpChannel$SendCallback@6b0a3bb3] ([p=0,l=186,c=8192,r=186],[p=0,l=511,c=32768,r=511],true)@COMPLETING
Caused by: java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)

[qtp1153907750-15] DEBUG org.eclipse.jetty.io.WriteFlusher - write: WriteFlusher@3191f1c6{IDLE}->null [DirectByteBuffer@503f123a[p=0,l=186,c=8192,r=186]={<<<HTTP/1.1 500 Server Error...rver: Jetty(11.0.0)\r\n\r\n>>>\x00\x00\x00\x00\x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00},DirectByteBuffer@7f12bc74[p=0,l=511,c=32768,r=511]={<<<<html>\n<head>\n<meta http-...<hr/>\n\n</body>\n</html>\n>>>r/>\n\n</bo...\x00\x00\x00\x00\x00\x00\x00}]
[qtp1153907750-15] DEBUG org.eclipse.jetty.io.WriteFlusher - update WriteFlusher@3191f1c6{WRITING}->null:IDLE-->WRITING
[qtp1153907750-15] DEBUG org.eclipse.jetty.io.SocketChannelEndPoint - flushed 697 SocketChannelEndPoint@120dee9a{l=/[0:0:0:0:0:0:0:1]:30001,r=/[0:0:0:0:0:0:0:1]:64978,OPEN,fill=-,flush=W,to=225/30000}{io=0/0,kio=0,kro=1}->HttpConnection@6e57ad8d[p=HttpParser{s=END,84 of 84},g=HttpGenerator@293a18dd{s=COMPLETING}]=>HttpChannelOverHttp@5006b5cf{s=HttpChannelState@6744f15c{s=HANDLING rs=COMPLETING os=COMMITTED is=IDLE awp=false se=false i=false al=0},r=2,c=false/false,a=HANDLING,uri=http://localhost:30001/account/test,age=224}
[qtp1153907750-15] DEBUG org.eclipse.jetty.io.WriteFlusher - Flushed=true written=697 remaining=0 WriteFlusher@3191f1c6{WRITING}->null
[qtp1153907750-15] DEBUG org.eclipse.jetty.io.WriteFlusher - update WriteFlusher@3191f1c6{IDLE}->null:WRITING-->IDLE
```

**To Reproduce**

Use the following dependencies:
```
dependencies {
    runtime(""org.eclipse.jetty:jetty-server:11.0.0"")
    compile(""org.eclipse.jetty:jetty-servlet:11.0.0"")
    //compile(""org.eclipse.jetty.toolchain:jetty-jakarta-servlet-api:5.0.1"")

    compile(""org.glassfish.jersey.core:jersey-server:3.0.0"")
    compile(""org.glassfish.jersey.containers:jersey-container-jetty-servlet:3.0.0""){
        exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api'
    }
    //runtime(""jakarta.annotation:jakarta.annotation-api:2.0.0"")
    compile(""jakarta.annotation:jakarta.annotation-api:2.0.0"")
    runtime(""jakarta.xml.bind:jakarta.xml.bind-api:3.0.0"")
    compile(""jakarta.json:jakarta.json-api:2.0.0"")
    compile(""jakarta.json.bind:jakarta.json.bind-api:2.0.0"")

    runtime(""org.glassfish.jersey.containers:jersey-container-jetty-http:3.0.0"")
    runtime(""org.glassfish.jersey.connectors:jersey-jetty-connector:3.0.0"")
    runtime(""org.glassfish.jersey.containers:jersey-container-servlet-core:3.0.0"")
    //runtime(""org.glassfish.jersey.containers:jersey-container-servlet:3.0.0"")

    runtime(""org.glassfish.jersey.inject:jersey-hk2:3.0.0"")
    runtime(""org.glassfish.jersey.media:jersey-media-json-binding:3.0.0"")
}
```

Deploy a basic service on jetty:

```
[...]
        jettyServer = new Server();
        ServerConnector connector = new ServerConnector(jettyServer);
        connector.addConnectionFactory(new HttpConnectionFactory(http));
        connector.setPort(port);
        jettyServer.addConnector(connector);

        resourceConfig.registerClasses(AccountServices.class);
        ServletContainer servletContainer = new ServletContainer(resourceConfig);
        ServletHolder sh = new ServletHolder(servletContainer);
        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
        context.setContextPath(""/"");
        context.addServlet(sh, ""/*"");
        jettyServer.setHandler(handlers);
        jettyServer.start();
        jettyServer.join();

[...]
```

Call basic service which does nothing other than deserialize & reserialize:

```
@Path(""account"")
public class AccountServices {

    @POST
    @Path(""test"")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response testSerialization(Account account) {
              return Response.status(200).entity(account).build();
    }
[...]
```

POJO:
```
public class Account {
    public String name;
    public String password;
    public String email;

    public Account() {
    }

    public Account(String name, String password, String email) {
        this.name = name;
        this.password = password;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
```

Result:
```
![image](https://user-images.githubusercontent.com/5418782/106359182-3d5c8700-6311-11eb-9b7e-e1b26c0ca967.png)
```

**Expected behavior**
I expect my Account object to be deserialized & reserialized as well as no IllegalAccessError to be thrown.

**System information:**
 - OS: Windows 10
 - Java Version: 14, using a modular project
 - Yasson Version: 2.0.1 via Jersey 3.0.0 (more specifically: jersey-media-json-binding:3.0.0)

**Additional context**
Not sure what else to add.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/471/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTYyMzE0NA==,yasson,771623144,471,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-02T13:09:24Z,2021-02-02T13:09:24Z,"I have reproduced your example and it is working for me. I think it is failing to you because of these reasons, could you check them?:

It could be a module-info issue. Make sure com.projectvisionaries.server.commons.model.Account module is visible to the AccountServices module.

It is strange to see `com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual` . That Ljava.lang.Object references to an array Object[], but in the example you wrote there is no such array as argument or return value. Is it possible that Account bytecode has been modified?

From the stack trace I think this is the most relevant exception:

`java.lang.IllegalAccessException: access to public member failed: com.projectvisionaries.server.commons.model.Account.getPassword[Ljava.lang.Object;@55fe3190/invokeVirtual, from class org.eclipse.yasson.internal.model.PropertyModel (module org.eclipse.yasson)`

If you want to try my example:
```
git clone https://github.com/jbescos/Questions.git
cd yassonModuleIssue && mvn clean install && java -jar build/libs/yassonModuleIssue-all-1.0.jar
curl --noproxy ""*"" -H ""Content-Type: application/json"" -X POST -d '{""name"":""John"",""password"":""test"",""email"":""John@gmail.com""}' http://localhost:8080/account/test
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTYyMzE0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTc3NzgzMQ==,yasson,771777831,471,NA,doriancransac,5418782,Dorian Cransac,reachme@doriancransac.info,NA,2021-02-02T16:46:44Z,2021-02-02T16:46:44Z,"@jbescos hi & thanks for your reply.

>  Make sure com.projectvisionaries.server.commons.model.Account module is visible to the AccountServices module

What exactly do you mean by ""visible""? The module containing AccountServices already ""requires"" the module containing Account which ""exports"" the corresponding package, and I'm pretty sure I even tried ""opening"" the entire Account module which didn't help as far as I can recall.

> Is it possible that Account bytecode has been modified?

I guess it's technically possible but I have no idea how nor why. I personally don't do any such manipulation and I'm not aware of any third-party library involved which may do that or have a reason to do that at least. All I can think of is that I have dependencies to mongojack which uses jackson to serialize and persist in mongodb but I don't suspect there's any bytecode manipulation there either.

Just so you know in the meantime I switched my jersey dependency to use jackson instead of yasson and it worked without me having to make any changes to the code. Later, I ended up having to add a couple of --add-opens switches to solve specific cases of cross-module access restrictions (between the unnamed module and my app modules) though, but I don't think that's relevant or related to this issue in any way. I'm just mentioning it in case it is and I'd fail to see how.

I'll try to check out your repo when I get a chance but to be honest I've lost so much time on the whole jetty / jersey / yasson thing over the last few days that it'll be hard for me to invest much more time into this issue now that I've found a satisfactory workaround for it.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTc3NzgzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTgxMTEzMw==,yasson,771811133,471,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2021-02-02T17:21:04Z,2021-02-02T17:21:04Z,"Yasson 2.0.1 has a bug, see #466
My solution was to roll back to 2.0.0-M2, but deleting the module-info.java file also solves it
Explanation: I did a rewrite in 2.0.1 (#438) which caused this bug to appear (still can't figure out why tho). I already reported it...
I 'think' this might be the same issue as yours","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTgxMTEzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjM2MDU1NQ==,yasson,772360555,471,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-03T09:21:10Z,2021-02-03T09:21:10Z,"@Degubi I tried also with your example and it is working for me. I want to reproduce the issue first but I am not lucky so far. Here is your example:
```
git clone https://github.com/jbescos/Questions.git
cd yassonBug && mvn clean install && java -jar target/yassonbug-1.0.jar
```
This is the output:
```
jbescos@jbescos-TECRA-X40-E:~/workspace/Questions/yassonBug$ mvn clean install && java -jar target/yassonbug-1.0.jar
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for es.tododev:yassonbug:jar:1.0
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 30, column 21
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------< es.tododev:yassonbug >------------------------
[INFO] Building yassonbug 1.0
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ yassonbug ---
[INFO] Deleting /home/jbescos/workspace/Questions/yassonBug/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ yassonbug ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ yassonbug ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to /home/jbescos/workspace/Questions/yassonBug/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ yassonbug ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ yassonbug ---
[INFO] Changes detected - recompiling the module!
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ yassonbug ---
[INFO] 
[INFO] --- maven-dependency-plugin:2.8:copy-dependencies (copy-dependencies) @ yassonbug ---
[INFO] Copying jakarta.json-api-2.0.0.jar to /home/jbescos/workspace/Questions/yassonBug/target/jakarta.json-api-2.0.0.jar
[INFO] Copying jakarta.json-2.0.0-module.jar to /home/jbescos/workspace/Questions/yassonBug/target/jakarta.json-2.0.0-module.jar
[INFO] Copying yasson-2.0.1.jar to /home/jbescos/workspace/Questions/yassonBug/target/yasson-2.0.1.jar
[INFO] Copying jakarta.json.bind-api-2.0.0.jar to /home/jbescos/workspace/Questions/yassonBug/target/jakarta.json.bind-api-2.0.0.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ yassonbug ---
[INFO] Building jar: /home/jbescos/workspace/Questions/yassonBug/target/yassonbug-1.0.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ yassonbug ---
[INFO] Installing /home/jbescos/workspace/Questions/yassonBug/target/yassonbug-1.0.jar to /home/jbescos/.m2/repository/es/tododev/yassonbug/1.0/yassonbug-1.0.jar
[INFO] Installing /home/jbescos/workspace/Questions/yassonBug/pom.xml to /home/jbescos/.m2/repository/es/tododev/yassonbug/1.0/yassonbug-1.0.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.838 s
[INFO] Finished at: 2021-02-03T10:17:17+01:00
[INFO] ------------------------------------------------------------------------
Data [prop=hey]

```
I am trying with java 11.0.7 2020-04-14 LTS","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjM2MDU1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjQ4ODUxNQ==,yasson,772488515,471,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2021-02-03T12:58:20Z,2021-02-03T12:58:20Z,"Well I tried it using java 11, 13, 15 and they all gave the error, but only when running my project from Eclipse.
I tried it running from the command line and everything works...
@jbescos So the error only exists when running things from Eclipse, which is weird... I might do an IDE reinstall or something.
Thank you for investigating!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjQ4ODUxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjU0OTU2OA==,yasson,772549568,471,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-03T14:27:03Z,2021-02-03T14:27:03Z,"Check how is set the classpath in Eclipse, maybe there is something strange there.

I'm going to try it more with the example of @doriancransac ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MjU0OTU2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzI1NTExNQ==,yasson,773255115,471,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-04T11:59:43Z,2021-02-04T11:59:43Z,"@Degubi I was trying it with Eclipse IDE to see the java process and it is doing it in this way (pull my repo again because I did some changes):
`java -p target/yassonbug-1.0.jar:target/libs -m es.tododev.yassonbug/es.tododev.yassonbug.Main`

If you execute it in that way you will get the error.

The issue is in `sun.invoke.util.VerifyAccess#isClassAccesible`

There is the next line that returns false:
`lookupModule.canRead(refModule))`

lookupModule = org.eclipse.yasson
refModule = es.tododev.yassonbug

It should be possible in PropertyModel#createReadHandle to add the next line:
`PropertyModel.class.getModule().addReads(field.getDeclaringClass().getModule());`

I think that should fix it, but I need to investigate more.

EDIT:
I confirm that solves the issue (although that doesn't compile for jdk8). 
Other option that also works is using the next lookup:
`private static final MethodHandles.Lookup LOOKUP = MethodHandles.publicLookup();`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzI1NTExNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzMyMjk2MA==,yasson,773322960,471,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2021-02-04T14:01:45Z,2021-02-04T14:01:45Z,"Wow! Nice job @jbescos
I think the publicLookup() solution would be the better one.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzMyMjk2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzQwNDAxMg==,yasson,773404012,471,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-04T15:43:24Z,2021-02-04T15:43:24Z,"Unfortunately it is not that easy. The `MethodHandles.publicLookup() `is too restrictive with other class attributes and makes many tests to fail.

The LOOKUP instance has some bits to control what modifiers should be checked. By default MethodHandles.lookup() comes with Lookup#FULL_POWER_MODES. Basically I need to configure the LOOKUP to make this verification 'true' in `sun.invoke.util.VerifyAccess#isClassAccessible`:
`if (((allowedModes & UNCONDITIONAL_ALLOWED) != 0)`
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzQwNDAxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/471,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTI5NTU0OQ==,yasson,781295549,471,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-02-18T12:03:03Z,2021-02-18T12:03:03Z,Fixed,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTI5NTU0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/475,https://api.github.com/repos/eclipse-ee4j/yasson/issues/475,yasson,803405667,475,inconsistent generating incomplete JSON error,dannyb2018,39492136,,,CLOSED,2021-02-08T10:08:09Z,2021-02-15T13:15:16Z,"I have a very simple servlet that turns a pojo into a json string.  It works on windows 10, it works on docker on windows 10 using WSL 2.  If i try to run the exact same image on docker on linux it prints out this rather unhelpful error with zero other information

**To Reproduce**
```
QPJsonDashboard.java
public class QPJsonDashboard
{
    public QPJsonToolbar toolbar = new QPJsonToolbar();
    public QPJsonView view = null;
    public String textColour;
    public String backgroundColour;
}

QPJsonToolbar.java
public class QPJsonToolbar
{
    public String avatar = null;
    public List<QPJsonMenuItem> toolbarButtons = new ArrayList<>();
}

QPJsonMenuItem.java
public class QPJsonMenuItem
{
    public String icon;
    public String tooltipText;
    public String route;    
    public String componentName;
}
QPJsonView.java
public class QPJsonView
{
    public QPJsonSideMenu sideMenu = null;
    public QPJsonPage landingPage = null;
}
QPJsonSideMenu.java
public class QPJsonSideMenu
{
    public String name;
    public List<QPJsonMenuItem> menuItems = new ArrayList<>();
}
QPJsonPage.java
public class QPJsonPage
{
    public String componentName = null;
}

QPDashboard.java
@Path(""/dashboard"")
public class QPDashboard extends HttpServlet
{
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getUserDashboard(@Context HttpServletRequest httpRequest)
    {
        Response response = null;
        try
        {
            JsonbConfig jsonbConfig = new JsonbConfig()
                                      .withPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE_WITH_UNDERSCORES)
                                      .withNullValues(true)
                                      .withFormatting(false);

            Jsonb jsonb = JsonbBuilder.create(jsonbConfig);


            // Make the dashboard upon landing
            QPJsonDashboard instance = new QPJsonDashboard();

            // Set the colours
            instance.backgroundColour = ""cpta-blue-grey"";
            instance.textColour = ""cpta-gold"";

            // Make the toolbar
            instance.toolbar = new QPJsonToolbar();
            // Set the user avatar
            instance.toolbar.avatar = ""https://avatars3.githubusercontent.com/u/39492136?s=460&v=4"";
            // Add the buttons
            // First do the general overview
            QPJsonMenuItem item = new QPJsonMenuItem();
            item.icon = ""mdi-pipe-wrench"";
            item.tooltipText = ""Quick Start"";
            item.route=""/general"";
            item.componentName=""qp-general-view"";
            instance.toolbar.toolbarButtons.add(item);

            String json = jsonb.toJson(instance);

            response = Response.ok().entity(json).build();
        }
        catch(Exception E)
        {
            E.printStackTrace();
        }
        // The workspace is made up of 
        return response;
    }
}
```

**Expected behavior**
A clear and concise description of what you expected to happen.
I would expect the output of a call to that url to be:
`{""background_colour"":""cpta-blue-grey"",""text_colour"":""cpta-gold"",""toolbar"":{""avatar"":""https://avatars3.githubusercontent.com/u/39492136?s=460&v=4"",""toolbar_buttons"":[{""component_name"":""qp-general-view"",""icon"":""mdi-pipe-wrench"",""route"":""/general"",""tooltip_text"":""Quick Start""}]},""view"":null}`

Or at least a stack trace after an exception is thrown but it dies at this line
`            String json = jsonb.toJson(instance);`
and i see a SEVERE: generating incomplete JSON error.

**System information:**
 - OS: [e.g. Linux, Windows, Mac]
 - **works on**
 - Windows 10 - 19042.746
 - JRE 11.0.6
 - docker 20.10
 - yasson 1.0.8
 - running in jetty 9.4.31.v20200723
 
**does not work on**
linux ubuntu 18.04.5LTS
JRE 11.0.6
docker 10.3
yasson 1.0.8

The images are built on windows saved moved to the ubuntu machine loaded and containers built, so what is running in both should be identical.  

**I think i am not the only person to mention that this error message is completely useless, could you at least throw an exception so their might be a hint at what the problem is**","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/475/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/475,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NjY0MTQ3NA==,yasson,776641474,475,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2021-02-10T11:24:36Z,2021-02-10T11:24:36Z,"I have tried your example without the layer of jax-rs, with Yasson 1.0.8 and 2.0.1 and I get the expected JSON. I am running it in:
```
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.5 LTS
Release:	18.04
Codename:	bionic

```
Could you try it in newer Yasson version?. For example 2.0.1.

In case docker is not printing the stederr properly, if you add this in your code do you see the stack trace?:
```
try {
 throw new IllegalArgumentException(""I want to see this stack trace"");
} catch (IllegalArgumentException e) {
 e.printStackTrace();
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NjY0MTQ3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/475,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3OTIxNjcyNA==,yasson,779216724,475,NA,dannyb2018,39492136,,,NA,2021-02-15T13:15:16Z,2021-02-15T13:15:16Z,"Hi,

Thanks for your prompt reply.  

**The error was an inconsistent javaee-api version.  The version of yasson 1.0.4 and 1.0.8 both require javaee-api 8 and one part of the application had 7 and another 8.**  

No idea why it was a problem in **docker** on linux but not on windows.  stderr was printing ok, looking at the code it looks like you are throwing an exception now but it didnt print.  Not sure how to stop this problem coming up again but you might see it in people using JEE containers so am leaving here in case anyone has the same problem.

Thank you again","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc3OTIxNjcyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,yasson,805684861,476,"@JsonbProperty(""propertyName"") is not respecting new JsonbConfig().withNullValues(true)",wiesnery,7962144,Yannick Wiesner,,OPEN,2021-02-10T16:46:37Z,2022-08-24T07:58:56Z,"Hi there,

I just ran into an issue wich took me some time to debug. As of my opinion, this is not the expected behavior:

### Steps to reproduce:

1. Create a Class with a property and annotate it with `@JsonbProperty(""propertyName"")`
2. Initialize an Instance of that class with a null value in that property
3. Initialize a JSON-B Mapper with a custom config: `new JsonbConfig().withNullValues(true)`
4. Serialize the object

This issue occurred using yasson 1.0.5

### Expected outcome:
Object is serialized with the property included and value `null`.

### Actual outcome:
Object is serialized without the property.

### One step further:
5. Remove the `@JsonbProperty(""propertyName"")` from the field
6. Serialize again and watch the property appearing in the serialized json

As I debugged though the code of Yasson, I came across the reason why this behavior shows up:
The Annotation `@JsonbProperty` has a property `nillable` with the default value being `false`

Although I would rather expect the default value being `null` and to respect the global configuration when omitting the annotation parameter, I see that this would be a breaking change. Instead I would suggest to add a new Annotation like `@JsonbPropertyName` with only the property name being possible to customize.

**Please advise if this behavior is known and if so what could be a mitigation.**

Kind regards,

Yannick","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/476/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4NDIxNDA2NA==,yasson,784214064,476,NA,wiesnery,7962144,Yannick Wiesner,,NA,2021-02-23T13:46:49Z,2021-02-23T13:46:49Z,@aguibert can you comment on that or can you name someone responsible for this project?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc4NDIxNDA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49_Lb6,yasson,1039972090,476,NA,don-spyker,40198493,,,NA,2022-02-15T08:02:13Z,2022-02-15T08:02:13Z,"Observed the same issue and took me some time as well. I'd expect the same outcome. Unless there is no value set in the annotation, the global configuration should be taken into account.

see #290 as well
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49_Lb6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5A0MeA,yasson,1087424384,476,NA,wiesnery,7962144,Yannick Wiesner,,NA,2022-04-04T11:13:00Z,2022-04-04T11:13:00Z,"@don-spyker we can still not adjust it, as it would break many projects I guess. Do you see any sense in improving the status quo or is a hint in the documentation all we can do for now?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5A0MeA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5BRDlJ,yasson,1094990153,476,NA,don-spyker,40198493,,,NA,2022-04-11T12:29:24Z,2022-04-11T12:29:24Z,"Well, for me it seems to be an issue, as it is not very obvious. Changing the property name should not impact the null-value-behaviour. If changing the implementation might break projects, adding a feature flag or config option would be helpful.

It would be an option to add an additional JsonbConfig method
`new JsonbConfig().withNullValues(true).forReal().srsly().evenWithAnnotationOnProperties()` ;-)

an alternativ would be to overload the withNullValues method so that projects can configure the behaviour, e.g.

`new JsonbConfig().withNullValues(true) // current implementation`

`new JsonbConfig().withNullValues(DEFAULT) // same as true`

`new JsonbConfig().withNullValues(GLOBAL) // alternative 1`

`new JsonbConfig().withNullValues(WITH_ANNOTATIONS) // alternative 2`

`new JsonbConfig().withNullValues() // alternative 3`

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5BRDlJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Fk-3a,yasson,1167322586,476,NA,wiesnery,7962144,Yannick Wiesner,,NA,2022-06-27T12:59:59Z,2022-06-27T12:59:59Z,"We even missed the 3.0 release...
So I guess this one would be a potential 4.0 fix but no one from the core team seems to care.
A bit sad to see this as this is the reference implementation.

@coreteam please give some advise, I am happy to help. The only problem is, that the direction is unclear.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Fk-3a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/476,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JCS9J,yasson,1225338697,476,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-24T07:58:56Z,2022-08-24T07:58:56Z,"Hello,

withNullValues is overridden by the default value of @JsonbProperty.nillable = false

That property is deprecated from JSONB 2.1, so it will be eventually removed. Note this is defined in JSONB spec and we cannot remove it in Yasson. Once it is removed it will take the configuration valiue from JsonbConfig#withNullValues

You can use additional annotation for that value: @JsonbNillable

For example:

```
public class Issue476Test {

    @Test
    public void objectWithNullValue() {
        Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withNullValues(true));
        assertEquals(""{\""test\"":null}"", jsonb.toJson(new Example1()));
        assertEquals(""{}"", jsonb.toJson(new Example2()));
        assertEquals(""{\""test\"":null}"", jsonb.toJson(new Example3()));
        Map<String, String> exmaple4 = new HashMap<>();
        exmaple4.put(""test"", null);
        assertEquals(""{\""test\"":null}"", jsonb.toJson(exmaple4));
    }

    public static class Example1 {
        @JsonbProperty(""test"")
        @JsonbNillable
        public String test;
    }
    
    public static class Example2 {
        @JsonbProperty(""test"")
        public String test;
    }

    public static class Example3 {
        public String test;
    }
}
```
 ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JCS9J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/478,https://api.github.com/repos/eclipse-ee4j/yasson/issues/478,yasson,807043430,478,Custom deserializer not picket up with ParameterizedType,amoscatelli,16684470,,,CLOSED,2021-02-12T08:23:57Z,2021-03-12T14:47:17Z,"**Describe the bug**
When deserializing a ParameterizedType custom deserializer are not picket up
The same applies for TypeVariable (for example when deserializing a class extending an abstract class having a generic field)

**To Reproduce**
Try to deserialize a ParameterizedType (for example Collection < what you want >) and you'll see any registered custom deserialized that would normally be invoked is not picket up

**Expected behavior**
Custom deserializer is picked up as usual

**System information:**
 - OS: [Windows]
 - Java Version: [11]
 - Yasson Version: [1.0.5] (but I verified this issue is present with 1.0.8 and I see the bug in 2.x source code too)

**Additional context**
I already provided a pull request to support such scenario for both ParameterizedType and TypeVariable : 
https://github.com/eclipse-ee4j/yasson/pull/477
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/478/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/478,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NzUzNTQ1Mg==,yasson,797535452,478,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-03-12T14:47:17Z,2021-03-12T14:47:17Z,Fixed by #477,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NzUzNTQ1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/485,https://api.github.com/repos/eclipse-ee4j/yasson/issues/485,yasson,848457059,485,@JsonbProperty with At Sign In Field Name Doesn't Parse,bekwam,6334243,"Bekwam, Inc",,CLOSED,2021-04-01T13:12:49Z,2021-04-01T14:26:32Z,"**Describe the bug**

Yasson won't parse a JSON field with a name that contains the at sign (@<!-- -->)

**To Reproduce**

1. Mark up a class with @<!-- -->JsonbProperty(""@<!-- -->myfield"") on a getter
2. Attempt to parse a JSON object with a field containing the name ""@<!-- -->myfield""
3. Verify that the Java object returned is empty

This is my data class containing the JsonbProperty annotation.  

```
public class MyRecord {
    private String myfield;

    @JsonbProperty(""@myfield"")
    public String getMyfield() {
        return myfield;
    }

    public void setMyfield(String myfield) {
        this.myfield = myfield;
    }
}

```

This is my test class 

```
public class SimpleTest {

    @Test
    public void testMyRecord() {

        String json = ""{ \""@myfield\"": \""myvalue\"" }"";
        Jsonb jsonb = JsonbBuilder.create();

        MyRecord myRecord = jsonb.fromJson(json, MyRecord.class);

        assertEquals( ""myvalue"", myRecord.getMyfield());

    }
}
```

**Expected behavior**
I expected a Java object to be produced with the myfield field set.

**System information:**
Yasson 1.0.5
Java 11
Accessed through Resteasy 3.14.0.Final

**Additional context**
I pulled the at sign off of ""myfield"" both in the annotation and in the test string.  It parsed correctly.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/485/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/485,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMTk0NTU4MA==,yasson,811945580,485,NA,bekwam,6334243,"Bekwam, Inc",,NA,2021-04-01T14:26:32Z,2021-04-01T14:26:32Z,This is working if I put the JsonbProperty on the field or the setter,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMTk0NTU4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/486,https://api.github.com/repos/eclipse-ee4j/yasson/issues/486,yasson,855449412,486,Support for YearMonth Serialization,thatsIch,2210496,thatsIch,,CLOSED,2021-04-12T00:32:06Z,2021-05-26T07:59:23Z,"**Is your feature request related to a problem? Please describe.**
Yasson supports `java.time.*`-classes like `LocalDateTime` but is missing support for `YearMonth` (and `MonthDay` as a matter of fact) 

**Describe the solution you'd like**
The yasson-package [org.eclipse.yasson.internal.serializer](https://github.com/eclipse-ee4j/yasson/tree/master/src/main/java/org/eclipse/yasson/internal/serializer) should contain:

* `YearMonthSerializer`
* `YearMonthDeserializer`

which allows allowing following use-case

```java
class YearMonthWrapper {
    public YearMonth yearMonth;
}

class Main {
    public static void main(String[] args) {
        Jsonb jsonb = JsonbBuilder.create();
        YearMonthWrapper wrapper = new YearMonthWrapper();
        wrapper.yearMonth = YearMonth.of(2021, Month.April);

        String serializationResult = jsonb.toJson(wrapper);
        YearMonthWrapper deserializationResult = jsonb.fromJson(serializationResult, YearMonthWrapper.class);
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/486/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/486,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzcyOTY3Mg==,yasson,847729672,486,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-05-25T09:56:00Z,2021-05-25T09:56:00Z,"Hi @thatsIch , thank you for this suggestion. I think it does make sense to add this support. :-) I will take a look at that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzcyOTY3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/487,https://api.github.com/repos/eclipse-ee4j/yasson/issues/487,yasson,867959062,487,Not all ISO 8601 offset formats are accepted,j-be,8503582,Juri Berlanda,juriberlanda@hotmail.com,OPEN,2021-04-26T17:40:19Z,2021-05-25T13:20:08Z,"**Describe the bug**

Yasson fails on offsets formatted as `+hhmm` and `+hh`, even though they are considered valid ISO 8601 zone offsets (see https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)

**To Reproduce**

```java
JsonbBuilder.create().fromJson(""\""2021-04-26T16:14:44.538+0000\"""", Date.class);
JsonbBuilder.create().fromJson(""\""2021-04-26T16:14:44.538+00\"""", Date.class);
```

**Expected behavior**

Above works.

**System information:**
 - OS: Linux Mint 20
 - Java Version:  AdoptOpenJDK (build 11.0.10+9)
 - Yasson Version: 2.0.2

**Additional context**

The above examples works fine using `LocalDateTime.parse(isoDate, DateTimeFormatter.ISO_OFFSET_DATE_TIME)`.

I will push a small test project to reproduce the issue shortly. Will link it here as soon as it is ready.

EDIT: Minimal project to reproduce can be found https://github.com/j-be/yasson-487","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/487/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/487,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzYzODA3MQ==,yasson,847638071,487,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-05-25T07:52:27Z,2021-05-25T07:52:27Z,"Hi @j-be , Thank you for reaching out. Unfortunately this behavior is by the spec. It is described which formatter should be used for each type if there is no formatter specified. For Date it is `DateTimeFormatter.ISO_DATE_TIME` if there is any time information present. This can be found in 3.5.1 of the JSONB-API spec.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzYzODA3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/487,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzgzOTYyMA==,yasson,847839620,487,NA,j-be,8503582,Juri Berlanda,juriberlanda@hotmail.com,NA,2021-05-25T12:47:49Z,2021-05-25T12:47:49Z,"@Verdent Thanks for the feedback. I see. So following the spec the right thing to do would be to use `java.time.OffsetDateTime`, is that correct?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzgzOTYyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/487,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzg2Mzc0Ng==,yasson,847863746,487,NA,j-be,8503582,Juri Berlanda,juriberlanda@hotmail.com,NA,2021-05-25T13:19:40Z,2021-05-25T13:19:40Z,"After looking through it again - could it be that I (unknowingly) stumbled over a bug in Java itself here?

`LocalDateTime.parse(""2021-04-26T16:14:44.538+0000"", DateTimeFormatter.ISO_ZONED_DATE_TIME);` doesn't work, even though all of the following work:

* `LocalDateTime.parse(""2021-04-26T16:14:44.538+00:00"", DateTimeFormatter.ISO_ZONED_DATE_TIME);`
* `LocalDateTime.parse(""2021-04-26T16:14:44.538+00"", DateTimeFormatter.ISO_ZONED_DATE_TIME);`
* `LocalDateTime.parse(""2021-04-26T16:14:44.538Z"", DateTimeFormatter.ISO_ZONED_DATE_TIME);`

The same is true for `ISO_OFFSET_DATE_TIME`. All of the above should imho. be valid ISO 8601 zone offsets.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzg2Mzc0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,yasson,894296371,490,module-info.java does not require java.xml directly,tomsontom,52631,Tom Schindl,tom.schindl@bestsolution.at,CLOSED,2021-05-18T11:53:32Z,2021-06-09T15:46:28Z,"I've tried to use yasson in a project where I also use jlink to build a custom JRE. Looking the at the runtime dependencies of yasson it only requires:
* jakarta.json
* jakarta.json.bind
* java.logging

as the other requires are defined as static. Building an image and launch although leads to the following error
```
Started application
May 18, 2021 12:53:01 PM org.eclipse.yasson.internal.Marshaller marshall
SCHWERWIEGEND: Generating incomplete JSON
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/xml/datatype/XMLGregorianCalendar
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.serializer.DefaultSerializers.initSerializers(DefaultSerializers.java:143)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.serializer.DefaultSerializers.<clinit>(DefaultSerializers.java:57)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.AnnotationIntrospector.collectAnnotations(AnnotationIntrospector.java:763)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:90)
        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(Unknown Source)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.Marshaller.getRootSerializer(Marshaller.java:161)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:142)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:73)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:101)
        at org.eclipse.yasson@2.0.2/org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:126)
....
```
The problem is caused because `java.desktop` and `java.sql` transitively require `java.xml` so even linking in `javax.xml` does not help because the yasson module is not going to find the classes in `java.xml` unless the static module is there. 

My current fix is to link in `java.desktop` - I have no idea why `java.sql` does not work - but ideally I can get rid of those extra bits.

I tested with a modified `module-info.java` that adding a `requires java.xml` fixes the problem.

One could naturally argue now that `java.xml` should be required static and one would handle the CNF gracefully in `DefaultSerializers` because if this (de)serializer is used the user anyways has to have him/her self a runtime dependency on `java.xml`. 

I'll provide a PR and this can be discussed there.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/490/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3MDUyNg==,yasson,857170526,490,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-06-08T21:28:58Z,2021-06-08T21:28:58Z,"Hi Tom,
I do agree that this should be optional similarly to java.sql. Thank you for proposed solution. :-) Could you please change it a bit to register deserializers and serializers of XMLGregorianCalendar similarly to as it is done for java.sql.Date? This allows us to make java,xml static and finally fully optional :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3MDUyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3MjQzNQ==,yasson,857172435,490,NA,tomsontom,52631,Tom Schindl,tom.schindl@bestsolution.at,NA,2021-06-08T21:30:59Z,2021-06-08T21:30:59Z,sure - I'll take a look tomorrow and update the PR,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3MjQzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3NDEzOQ==,yasson,857174139,490,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-06-08T21:32:47Z,2021-06-08T21:32:47Z,Great! Thank you for quick response and sorry for unexcusable delay from my side.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3NDEzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3NjE3Ng==,yasson,857176176,490,NA,tomsontom,52631,Tom Schindl,tom.schindl@bestsolution.at,NA,2021-06-08T21:34:50Z,2021-06-08T21:34:50Z,As I maintain multiple OSS-Projects myself beside the company duties I'm assigned on you don't have to excuse for not directly following up.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzE3NjE3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/490,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzU3MjE3NA==,yasson,857572174,490,NA,tomsontom,52631,Tom Schindl,tom.schindl@bestsolution.at,NA,2021-06-09T10:16:17Z,2021-06-09T10:16:17Z,I applied the java.sql strategy and made the java.xml dependency static,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzU3MjE3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,yasson,901032055,495,Add built-in Record  type support,hantsy,854520,Hantsy Bai,hantsy@gmail.com,CLOSED,2021-05-25T16:05:46Z,2021-11-04T10:09:35Z,"Currently, to make `Record` work with JSONB needs extra config.  

https://github.com/hantsy/java-sandbox/blob/master/record/src/main/java/com/example/demo/JsonbExample.java

I think it should be supported,  although the latest Jakarta EE 10 APIs targets Java 11. But it should not reject the newest Java syntax.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/495/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODU1MTc5Mg==,yasson,848551792,495,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-05-26T07:53:19Z,2021-05-26T07:53:19Z,"Hi @hantsy , of course this feature is planned to be supported. I do even have this working in my repository, but didn't add it to the master yet.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODU1MTc5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41QJvL,yasson,893426635,495,NA,Thihup,13357965,Thiago Henrique Hüpner,thihup@gmail.com,NA,2021-08-05T12:41:10Z,2021-08-05T12:41:10Z,Any updates?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41QJvL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41QKCI,yasson,893427848,495,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-08-05T12:43:14Z,2021-08-05T12:43:14Z,"Oh, I forgot to link the PR :-) I just need to update testing pipelines because of this PR a bit and after that I will merge it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41QKCI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44uGIo,yasson,951607848,495,NA,clausfod,8600005,Claus Nielsen,,NA,2021-10-26T06:38:28Z,2021-10-26T06:38:28Z,Any updates?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44uGIo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/495,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45QdZ5,yasson,960616057,495,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-11-04T10:09:35Z,2021-11-04T10:09:35Z,PR with this change merged,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45QdZ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/496,https://api.github.com/repos/eclipse-ee4j/yasson/issues/496,yasson,910289613,496,Support for accessors without get/set,tomas-langer,13766491,Tomas Langer,tomas.langer@gmail.com,OPEN,2021-06-03T09:12:03Z,2021-06-03T09:12:03Z,"Our framework is using accessors without verbs.

Example:
```
public class SomeBean {
  private String name;

 // setter
 public void name(String name) {
   this.name = name;
 }

 // getter
 public String name() {
   return name;
 }
}
```

Would it be possible to add configuration of Yasson that would treat such methods as bean accessors?
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/496/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/497,https://api.github.com/repos/eclipse-ee4j/yasson/issues/497,yasson,910592225,497,SerializationContext in custom JsonbSerializer won't call other custom serializers,CarlosMOGoncalves,2636004,Carlos Gonçalves,carlosmoliveiragoncalves@gmail.com,CLOSED,2021-06-03T15:14:05Z,2021-06-04T20:55:00Z,"**Describe the bug**
Hello,

I was experimenting with some custom serializers in a Payara-based Jakarta EE application and found out that I am unable to call other registered custom serializers, at least in my particular case. I've mostly found out why, but I am not sure this is actually a bug or an intended behaviour.

In short, when one calls a **SerializationContext.serialize()** on an object that happens to have a custom serializer registered AND a default one, it will call the default one and not the registered. In my particular case, it was a **LocalDateTime** custom serializer that was bypassed in favour of the default one. I will explain in the details.

**To Reproduce**

I have created a simple LocalDateTime serializer because I wanted to write it to JSON as a number, in milliseconds (default writes it as String).


```
public class LocalDateTimeToMillisSerializer implements JsonbSerializer<LocalDateTime> {

    @Override
    public void serialize(LocalDateTime dateToSerialize, JsonGenerator generator, SerializationContext ctx) {

        if (dateToSerialize != null) {
            generator.write(dateToSerialize.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());
        } else {
            generator.writeNull();
        }
    }
}
```
And in my application, I have registered it as JSON config to be applied globally.

```
@Provider
@Produces(MediaType.APPLICATION_JSON)
public class JSONBConfigurator implements ContextResolver<Jsonb> {

    @Override
    public Jsonb getContext(Class<?> type) {

        return JsonbBuilder.newBuilder()
            .withConfig(createConfiguration())
            .build();

    }

    private JsonbConfig createConfiguration() {
        return new JsonbConfig()
            .withSerializers(new DateToMillisSerializer(), new LocalDateTimeToMillisSerializer(), new PairSerializer())
            .withNullValues(true)
            .withDateFormat(JsonbDateFormat.TIME_IN_MILLIS, Locale.getDefault());
    }
}
```
This Provider is naturally registered in the JAXRS Application class, as a Singleton.

Then I decided I wanted a new one for a **Google Guava** class called **Pair**. 
This is useful to quickly build a JSON response without an object. I used to use Jackson before JSONB/Yasson was a thing and this worked fine. It prints a simple JSON object with the key and the value.
Since there is currently no dedicated JsonbSerializer for this class, Yasson ends up printing an object with all its variables (I would say this is standard behaviour). 
So I coded this:

```
public class PairSerializer implements JsonbSerializer<Pair> {

    @Override
    public void serialize(Pair obj, JsonGenerator generator, SerializationContext ctx) {

        if (obj != null) {
            generator.writeStartObject();
            generator.writeKey(obj.getLeft().toString());
            ctx.serialize(obj.getRight(), generator); // HERE
            generator.writeEnd();
        } else {
            generator.writeNull();
        }
    }
}
```
You will notice that they were both registered above.

Now, this won't work quite so nicely. Because when I have a JAX-RS **Response** like this 

`return Response.ok(Pair.of(""date"", LocalDateTime.now())).build();`

It will print the LocalDateTime using the default serializer (i.e. as a String) and not my custom one (as a number).

No this happens because when the **Marshaller.class** is building the Serializer for that date it won't add a Customization to the builder (here, **line 156** of Marshaller)

```
JsonbSerializer<?> getRootSerializer(Class<?> rootClazz) {
    final ContainerSerializerProvider serializerProvider = getMappingContext().getSerializerProvider(rootClazz);
    if (serializerProvider != null) {
        return serializerProvider
                .provideSerializer(new JsonbPropertyInfo()
                                           .withRuntimeType(runtimeType));
    }
    SerializerBuilder serializerBuilder = new SerializerBuilder(getJsonbContext())
            .withObjectClass(rootClazz)
            .withType(runtimeType);

    if (!DefaultSerializers.getInstance().isKnownType(rootClazz)) { // here
        ClassModel classModel = getMappingContext().getOrCreateClassModel(rootClazz);
        serializerBuilder.withCustomization(classModel.getClassCustomization());
    }
    return serializerBuilder.build();
}

```
Because it did find a **DefaultSerializer** for that Type. Since it has no Customization added to the builder, when actually building it will bypass the part of the code where it fetches a **UserSerializer**, which we see here, on line 67 of SerializerBuilder:

```
 public JsonbSerializer<?> build() {
        withRuntimeType(resolveRuntimeType());

        if (getCustomization() instanceof ComponentBoundCustomization) {
            ComponentBoundCustomization customization = (ComponentBoundCustomization) this.getCustomization();
            //First check if user deserializer is registered for such type
            final ComponentMatcher componentMatcher = getJsonbContext().getComponentMatcher();
            Optional<SerializerBinding<?>> userSerializer = componentMatcher // HERE
                    .getSerializerBinding(getRuntimeType(), customization);
            if (userSerializer.isPresent()) {
                return new UserSerializerSerializer<>(getClassModel(), userSerializer.get().getJsonbSerializer());
            }

            //Second user components is registered.
            Optional<AdapterBinding> adapterInfoOptional = componentMatcher
                    .getSerializeAdapterBinding(getRuntimeType(), customization);
            if (adapterInfoOptional.isPresent()) {
                return new AdaptedObjectSerializer<>(getClassModel(), adapterInfoOptional.get());
            }
        }

        final Optional<AbstractValueTypeSerializer<?>> supportedTypeSerializer = getSupportedTypeSerializer(objectClass);
        if (supportedTypeSerializer.isPresent()) {
            return supportedTypeSerializer.get();
        }
...
```

As we see here, if it has a Customization it will fetch the right LocalDateTimeSerializer I've programmed, otherwise it will get a supported type serializer and will just use the standard one.

So my question is: is this suposed to be like that? Shouldn't it consider the other custom serializers that might be present? Or are developers supposed to build JsonbSerializer from scratch to account for this cases? 

(Eventually I did manage to make it work by building a JsonbSerializer and passing it a Customization as I've seen in another serializer elsewhere.)

**Expected behavior**
When calling serialize on an object of a given type it should build a JsonbSerializer in such a way that it would fetch any other custom serializer implemented in the context.

**System information:**
 - OS: Windows 10
 - Java Version: 1.8.0_282 - AdoptOpenJDK
 - Yasson Version: 1.0.6

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/497/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/497,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDgwOTI0OA==,yasson,854809248,497,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-06-04T15:19:33Z,2021-06-04T15:19:33Z,"Hi @CarlosMOGoncalves , thank you for reaching out and for detailed description. I have done some testing and this issue is fixed in the 1.0.7 and higher.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDgwOTI0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/497,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDkxMjI3NQ==,yasson,854912275,497,NA,CarlosMOGoncalves,2636004,Carlos Gonçalves,carlosmoliveiragoncalves@gmail.com,NA,2021-06-04T18:09:24Z,2021-06-04T18:09:24Z,"Thanks for the quick response @Verdent .

The latest version of Payara is still on 1.0.6 and has been for a while, which is why I didn't have a newer one.
Great news that is fixed!
I will try asking them to update the version in one of the next releases.

I think you can close this then.

Cheers!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDkxMjI3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/497,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDk5MjgzMQ==,yasson,854992831,497,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-06-04T20:55:00Z,2021-06-04T20:55:00Z,Resolved,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDk5MjgzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/500,https://api.github.com/repos/eclipse-ee4j/yasson/issues/500,yasson,939553556,500,Serialization of a Map fails if the key uses a custom Serializer,rmartinc,26901232,Ricardo Martin,,OPEN,2021-07-08T07:20:51Z,2021-11-25T08:40:24Z,"**Describe the bug**
Define a custom Serializer for a Locale object like the following:

```java
    public static class LocaleSerializer implements JsonbSerializer<Locale> {
        @Override
        public void serialize(Locale obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.toLanguageTag());
        }
    }
```

And use a Pojo class that contains a Map field with Locale as the key:

```java
public class TestObject {
  private Map<Locale, String> localeKeyMap;
  ...
}
```

If you try to serialize it with current version 2.0.2 like the following:

```java
        Jsonb jsonb = JsonbBuilder.create(new JsonbConfig()
                .withSerializers(new LocaleSerializer())
                .withDeserializers(new LocaleDeserializer()));
        TestObject o = new TestObject();
        o.getLocaleKeyMap().put(Locale.US, ""us"");
        jsonb.toJson(o);
```

The following exception is thrown:

```
jakarta.json.bind.JsonbException: Unable to serialize property 'values' from test.MapObjectTest.MapObjectLocaleString
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:71)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:147)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:73)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:101)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:126)
	at test.MapObjectTest.test1(MapObjectTest.java:95)
	...
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to java.util.Locale
	at test.MapObjectTest$LocaleSerializer.serialize(MapObjectTest.java:27)
	at org.eclipse.yasson.internal.serializer.UserSerializerSerializer.serialize(UserSerializerSerializer.java:53)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializeItem(AbstractContainerSerializer.java:194)
	at org.eclipse.yasson.internal.serializer.MapToEntriesArraySerializer.lambda$serializeContainer$0(MapToEntriesArraySerializer.java:111)
	at java.util.HashMap.forEach(HashMap.java:1289)
	at org.eclipse.yasson.internal.serializer.MapToEntriesArraySerializer.serializeContainer(MapToEntriesArraySerializer.java:106)
	at org.eclipse.yasson.internal.serializer.MapSerializer.serializeInternal(MapSerializer.java:156)
	at org.eclipse.yasson.internal.serializer.MapSerializer.serializeInternal(MapSerializer.java:27)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107)
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69)
	... 38 more
```

**To Reproduce**

With the attached maven project just execute test on it:

```bash
unzip issue-map-locale-key.zip
cd issue-map-locale-key
mvn clean test
```

**Expected behavior**

The test should pass and the LocaleSerializer should be used to serialize the Locale key into a String.

**System information:**
 - OS: any
 - Java Version: 8 or 11
 - Yasson Version: 2.0.2

**Additional context**

The problem can be that the _MapToEntriesArraySerializer_ calls to serialize the key and the values with the same method [MapSerializer.serializeItem](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/MapToEntriesArraySerializer.java#L109-L111). The _serializeItem_ method is in _AbstractContainerSerializer_ and this class always obtains the [getValueType](https://github.com/eclipse-ee4j/yasson/blob/2.0.2/src/main/java/org/eclipse/yasson/internal/serializer/AbstractContainerSerializer.java#L206) from the generic 0 (the key). In a map the generic type can be 0 (the key) or 1 (the value). We are preparing a tentative PR for review. We will try to submit it as soon as possible.

Reproducer project: [issue-map-locale-key.zip](https://github.com/eclipse-ee4j/yasson/files/6782335/issue-map-locale-key.zip)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/500/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/500,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46Wa6p,yasson,978955945,500,NA,rmartinc,26901232,Ricardo Martin,,NA,2021-11-25T08:40:24Z,2021-11-25T08:40:24Z,"PR also sent to 1.x branch, it's #521.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs46Wa6p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/502,https://api.github.com/repos/eclipse-ee4j/yasson/issues/502,yasson,942839484,502,fromJson fails if multiple Levels of generics are involved,ChrisSchoe,61139264,Christoph Schoennenbeck,,CLOSED,2021-07-13T06:36:30Z,2021-10-19T14:32:17Z,"**Describe the bug**
I was directed here from reporting this as a Quarkus bug [here](https://github.com/quarkusio/quarkus/issues/18621).
Using classes implementing generics in a certain way can lead to `fromJson` not working properly and failing with the stacktrace posted below:

`java.lang.ClassCastException: class model.AbstractChild cannot be cast to class model.ConcreteChild (model.AbstractChild and model.ConcreteChild are in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @dddacdd)
	at org.jboss.resteasy.core.ExceptionHandler.handleApplicationException(ExceptionHandler.java:106)
	at org.jboss.resteasy.core.ExceptionHandler.handleException(ExceptionHandler.java:372)
	at org.jboss.resteasy.core.SynchronousDispatcher.writeException(SynchronousDispatcher.java:218)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:519)
	at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
	at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
	at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
	at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
	at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
	at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:138)
	at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler$1.run(VertxRequestHandler.java:93)
	at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:481)
	at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2442)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1476)
	at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
	at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.ClassCastException: class model.AbstractChild cannot be cast to class model.ConcreteChild (model.AbstractChild and model.ConcreteChild are in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @dddacdd)
	at org.acme.getting.started.GreetingResource.testYasson(GreetingResource.java:34)
	at org.acme.getting.started.GreetingResource_Subclass.testYasson$$superforward1(GreetingResource_Subclass.zig:132)
	at org.acme.getting.started.GreetingResource_Subclass$$function$$4.apply(GreetingResource_Subclass$$function$$4.zig:24)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:54)
	at io.quarkus.arc.runtime.devconsole.InvocationInterceptor.proceed(InvocationInterceptor.java:62)
	at io.quarkus.arc.runtime.devconsole.InvocationInterceptor.monitor(InvocationInterceptor.java:49)
	at io.quarkus.arc.runtime.devconsole.InvocationInterceptor_Bean.intercept(InvocationInterceptor_Bean.zig:521)
	at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:41)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:41)
	at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:32)
	at org.acme.getting.started.GreetingResource_Subclass.testYasson(GreetingResource_Subclass.zig:280)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
	at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
	at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
	at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
	at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:408)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:69)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
	... 15 more`

**To Reproduce**
Using the model classes from the minimal example( https://github.com/ChrisSchoe/quarkus-resteasy-bug-minimal-example )
try to create an object of type `ConcreteContainer` from a Json-String (either given as a string or obtained via `fromJson` such as in the `testYasson`method [here](https://github.com/ChrisSchoe/quarkus-resteasy-bug-minimal-example/blob/yasson/src/main/java/org/acme/getting/started/GreetingResource.java). The `child`-field of the resulting object is of type `AbstractChild` and the above error is thrown when trying to access the fields only contained in the subclass `ConcreteChild`.

**Expected behavior**
An object of type `ConcreteContainer` should be created and its field `child` should contain an object of type `ConcreteChild` whose fields are all accessible.

**System information:**
 - OS: MacOS BigSur
 - Java Version: 11.0.10
 - Yasson Version: 1.0.9
Note: With Yasson 1.0.8 everything works fine


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/502/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/502,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40m-tU,yasson,882633556,502,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-07-19T15:16:52Z,2021-07-19T15:16:52Z,"Hi @ChrisSchoe ,
Thank you for reaching out. It really looks like a bug. I will make a fix for this.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs40m-tU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/504,https://api.github.com/repos/eclipse-ee4j/yasson/issues/504,yasson,953562512,504,JsonbConfig fails to register serializer,sfrank-mc,67592530,,,CLOSED,2021-07-27T06:50:21Z,2021-08-16T07:02:45Z,"**Describe the bug**
An issue with Yasson percolates to a bug in the Quarkus REST Client (escalated from https://github.com/quarkusio/quarkus/issues/15628):
When a serializer class doesn't explicitly implement `JsonbSerializer` but rather implicitly does so it will not be registered thus failing to serialize correctly.

**Expected behavior**
When a serializer is implicitly implementing `JsonbSerializer` it should be registered to correctly perform serialization.

**Actual behavior**
Serializer class that is explicitly implementing `JsonbSerializer` is not registered thus failing to serialize correctly.

**To Reproduce**

Clone the [example repo](https://github.com/sfrank-mc/rest-client-bug)

Steps to reproduce the behavior:
1. Have any echo server running at localhost:3000 (e.g. you can use [http-echo-server](https://www.npmjs.com/package/http-echo-server))
1. Enable [JsonConfig.java line 17](https://github.com/sfrank-mc/rest-client-bug/blob/main/app/src/main/java/rest/client/bug/JsonConfig.java#L17) 
1. Disable [JsonConfig.java line 18](https://github.com/sfrank-mc/rest-client-bug/blob/main/app/src/main/java/rest/client/bug/JsonConfig.java#L18) 
1. Run app (i.e. gradle run or any other way)
1. Notice the body is `[{""key"":{""1111"":""1"",""2222"":""2""},""value"":{""1111"":""1"",""2222"":""2""}}]`

1. Disable [JsonConfig.java line 17](https://github.com/sfrank-mc/rest-client-bug/blob/main/app/src/main/java/rest/client/bug/JsonConfig.java#L17) 
1. Enable [JsonConfig.java line 18](https://github.com/sfrank-mc/rest-client-bug/blob/main/app/src/main/java/rest/client/bug/JsonConfig.java#L18)
1. Run app (i.e. gradle run or any other way)
1. Notice the body is `[{""key"":{},""value"":{}}]`

**Environment (please complete the following information):**
```
$ uname -a          
Darwin mc-lon-mb15392 19.6.0 Darwin Kernel Version 19.6.0: Tue Jan 12 22:13:05 PST 2021; root:xnu-6153.141.16~1/RELEASE_X86_64 x86_64
$ java -version
openjdk version ""11.0.7"" 2020-04-14
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.7+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.7+10, mixed mode)
$ gradle --version
------------------------------------------------------------
Gradle 6.8.3
------------------------------------------------------------

Build time:   2021-02-22 16:13:28 UTC
Revision:     9e26b4a9ebb910eaa1b8da8ff8575e514bc61c78

Kotlin:       1.4.20
Groovy:       2.5.12
Ant:          Apache Ant(TM) version 1.10.9 compiled on September 27 2020
JVM:          11.0.7 (AdoptOpenJDK 11.0.7+10)
OS:           Mac OS X 10.15.7 x86_64
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/504/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/504,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CW_M,yasson,889810892,504,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-07-30T10:49:39Z,2021-07-30T10:49:39Z,"Hi @sfrank-mc ,
thank you for reporting this issue. It is indeed a bug and it will be fixed in the new version of 2.x and also 1.x","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41CW_M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/504,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41mc5S,yasson,899272274,504,NA,sfrank-mc,67592530,,,NA,2021-08-16T07:02:45Z,2021-08-16T07:02:45Z,Thanks @Verdent !,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs41mc5S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/505,https://api.github.com/repos/eclipse-ee4j/yasson/issues/505,yasson,953639600,505,Generic Map in serializer not found in Adapter,lpiet,25503791,,louis@transtrend.com,OPEN,2021-07-27T08:32:59Z,2023-07-10T09:33:15Z,"**Describe the bug**
We ran into a functional change when updating from 1.0.7 to 1.0.8 which we are not sure was entirely intended. It breaks our de serialization because a HashMap is no longer recognized as a Map. Specially in  [this](https://github.com/eclipse-ee4j/yasson/commit/f2b649370f5b4ccff54b02a0331260b9978a1e26) commit. Around [line](https://github.com/eclipse-ee4j/yasson/commit/f2b649370f5b4ccff54b02a0331260b9978a1e26#diff-948f3eb98b4bbbadf732f5675b4d637256d24996a199b89a7f949da4cc7d85e9R197) the logic was changed to fetching a specific type from the map and finding any matching binding. In 1.0.7 and before the method looped over all userComponents and used the matches function [line](https://github.com/eclipse-ee4j/yasson/commit/f2b649370f5b4ccff54b02a0331260b9978a1e26#diff-948f3eb98b4bbbadf732f5675b4d637256d24996a199b89a7f949da4cc7d85e9R232l)  to find the first match, due to the way the final return in matches was written a HashMap and a Map would match and would be used. In 1.0.8 the logic for superclasses and interfaces is hidden behind a runtype instanceof Class and we no longer hit it, therefore not even trying the match.

**To Reproduce**
Please see the zip file included, it has a minimal example which shows the problem. It included a serializer and adapter as this is the workaround we found for getting maps with non String keys to work. Run the deSerialize test with yasson version in the pom set to 1.0.7 and it works. Run it with 1.0.8 and you get an error.

`java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Long (java.lang.String and java.lang.Long are in module java.base of loader 'bootstrap')

	at com.transtrend.yassonExample.yassonExample.TestObjectThis.deSerialize(TestObjectThis.java:33)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:208)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:114)`

**Expected behavior**
Although the specific example here can also be solved by specifying the deserializer to HashMap, I would expect a deserializer for Map to also work with HashMap like it did in 1.0.7

**System information:**
 - OS: Linux
 - Java Version: 11
 - Yasson Version: 1.0.8

**Additional context**
[yassonBugExample.zip](https://github.com/eclipse-ee4j/yasson/files/6883938/yassonBugExample.zip)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/505/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/505,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEkkI,yasson,1628588296,505,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T09:33:15Z,2023-07-10T09:33:15Z,"The given example code no longer throws exceptions, it runs fine. Output:

```
{""map"":{""a1"":{""1"":{""a"":""a""}}}}
{""a1"":{""1"":{""a"":""a""}}}
id: a1 Value {""1"":{""a"":""a""}}
a
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEkkI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/514,https://api.github.com/repos/eclipse-ee4j/yasson/issues/514,yasson,996410719,514,ZonedDateTime and OffsetDateTime JsonbConfig withStrictIJSON(true),JohnSchneider,2652937,,,OPEN,2021-09-14T20:36:35Z,2021-09-15T23:23:12Z,"When configured to use StrictIJson, ZonedDateTime and OffsetDateTime are serialized with ""Z"" plus the time zone offset when the time is not UTC.  Conversely, de-serializing requires ""Z"" even for times not in UTC. 

The way I interpret https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 is that if the time is in UTC (e.g ""2021-09-14T15:59:50Z"", then ""Z"" could be specified (or alternatively ""+00:00""), and if the time is not in UTC then only the offset should be specified (e.g. ""2021-09-14T15:59:50-04:00"".

**To Reproduce**

	public static void main(String... args) {
		JsonbConfig config = new JsonbConfig().withStrictIJSON(true);
		Jsonb jsonb = JsonbBuilder.create(config);
		Foo foo = new Foo(ZonedDateTime.now(), OffsetDateTime.now());

		String serialized = jsonb.toJson(foo);
		boolean containsZ = serialized.contains(""Z"");
		if (containsZ) {
			System.out.println(""INCORRECT: Serialized values contains 'Z' plus timezone offset: "" + serialized);
		} else {
			System.out.println(""CORRECT: Serialized values contains only timezone offset: "" + serialized);
		}

		try {
			String fooString1 = ""{\""offset\"":\""2021-09-14T15:59:50Z-04:00\"",\""zoned\"":\""2021-09-14T15:59:50Z-04:00\""}"";
			jsonb.fromJson(fooString1, Foo.class);
			System.out.println(""INCORRECT: deserialized values including 'Z' plus timezone offset"");
		} catch (Exception e) {
			System.out.println(""CORRECT: deserialized values including 'Z' plus timezone offset: "" + e.getMessage());
		}

		try {
			String fooString2 = ""{\""offset\"":\""2021-09-14T15:59:50-04:00\"",\""zoned\"":\""2021-09-14T15:59:50-04:00\""}"";
			jsonb.fromJson(fooString2, Foo.class);
			System.out.println(""CORRECT: deserialized values including only timezone offset"");
		} catch (Exception e) {
			System.out.println(""INCORRRECT: deserializing values including only timezone offset: "" + e.getMessage());
		}

		try {
			ZonedDateTime.parse(""2021-09-14T15:59:50Z-04:00"");
			System.out.println(""INCORRECT: direct parsing value including 'Z' plus timezone offset"");
		} catch (Exception e) {
			System.out.println(""CORRECT: direct parsing datetime including 'Z' plus timezone offset: "" + e.getMessage());
		}

		try {
			ZonedDateTime.parse(""2021-09-14T15:59:50-04:00"");
			System.out.println(""CORRECT: direct parsing value including only timezone offset"");
		} catch (Exception e) {
			System.out.println(""INCORRECT: direct parsing value including only timezone offset: "" + e.getMessage());
		}

	}

	public class Foo {

	private ZonedDateTime zoned;
	private OffsetDateTime offset;

	public Foo(ZonedDateTime zoned, OffsetDateTime offset) {
		this.zoned = zoned;
		this.offset = offset;
	}

	public Foo() {
	}

	public ZonedDateTime getZoned() {
		return zoned;
	}

	public void setZoned(ZonedDateTime zoned) {
		this.zoned = zoned;
	}

	public OffsetDateTime getOffset() {
		return offset;
	}

	public void setOffset(OffsetDateTime offset) {
		this.offset = offset;
	}

	}

**Expected behavior**
Example serialization ZonedDateTime / OffsetDateTime with withStrictIJSON(true).
Expected: 2021-09-14T15:59:50-04:00
Actual: 2021-09-14T15:59:50Z-04:00

Example de-serialization of ""2021-09-14T15:59:50-04:00"".
Expected: ZoneDateTime and OffsetDateTime representing input string
Actual: DateTimeParseException

Example de-serialization of  ""2021-09-14T15:59:50Z-04:00"".
Expected: DateTimeParseException
Actual: ZoneDateTime and OffsetDateTime representing input string

**System information:**
 - OS: any
 - Java 11
 - Yasson Version: 1.0.5, 1.0.9
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/514/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/514,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42zp5O,yasson,919510606,514,NA,JohnSchneider,2652937,,,NA,2021-09-14T21:03:09Z,2021-09-14T21:03:09Z,"org.eclipse.yasson.internal.serializer.JsonbDateFormatter.java constant IJSON_DATE_FORMATTER contains an unconditional method call to "".appendLiteral('Z')"" which I think is incorrect. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs42zp5O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/514,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs423RCf,yasson,920457375,514,NA,JohnSchneider,2652937,,,NA,2021-09-15T23:23:12Z,2021-09-15T23:23:12Z,Pull request created. https://github.com/eclipse-ee4j/yasson/pull/515,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs423RCf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/516,https://api.github.com/repos/eclipse-ee4j/yasson/issues/516,yasson,1013306286,516,Support package-private classes/accessors,lostiniceland,1516116,Marc Schlegel,,OPEN,2021-10-01T12:50:06Z,2022-08-23T09:53:49Z,"**Is your feature request related to a problem? Please describe.**
Assuming all classes responsible communication with some external resource or a JAX-RS endpoint, there is no need to make the DTOs public. Once they are public, misuse can easily happen.

**Describe the solution you'd like**
The reflection api has the capabilities to make fields accessible which are not public. JSONB/Yasson should make use of this and dont force public accessors onto its users.

**Describe alternatives you've considered**
Jackson does support package-private visibility, but some apis are hardwired to json-b.

**Additional context**
The Java bean-convention, despite its success, has polluted the java ecosystem with its overuse of public. Most developers just dont think about accessibility anymore. They just create a class and make everything public because that was the way it was necessary for instance to work with Hibernate.
The Java community should leave those days behind.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/516/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/516,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45QVXB,yasson,960583105,516,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2021-11-04T09:22:36Z,2021-11-04T09:22:36Z,"Hi @lostiniceland ,
would `PropertyVisibilityStrategy` be viable to you? You can force Yasson to use non public fields/accessors.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45QVXB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/516,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45SUfw,yasson,961103856,516,NA,lostiniceland,1516116,Marc Schlegel,,NA,2021-11-04T14:53:02Z,2021-11-04T14:53:02Z,"I did try this one but it failed because Records where not supported at the time.
Since this [PR](https://github.com/eclipse-ee4j/yasson/pull/499) is now merged, I can give it another try...once the new version is available in Quarkus. Or I test without a Record. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs45SUfw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/516,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4_ub9r,yasson,1069137771,516,NA,lostiniceland,1516116,Marc Schlegel,,NA,2022-03-16T13:35:51Z,2022-03-16T13:35:51Z,"Since, for other reasons, we still cannot use records I was trying to achieve something similar with some package-private DTOs and using the `PropertyVisibilityStrategy`.

**The serialization worked fine, but Yasson cannot deserialize with the following message:** `class org.eclipse.yasson.internal.ReflectionUtils cannot access a member of class some.MyDTO with modifiers """"
	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392)`
	
```
class MyDTO {

   enum SomeEnum {
      A,
      B
   }

   public SomeEnum fieldA,
   public String fieldB
}
```

Note, that I had to make the fields public due to an issue in MapStruct which is hopefully resolved soon.

The issue seems to be caused by the default-constructor. When I add a public default-constructor the error occurs as well but with a slightly differen message ` with modifiers ""public""` (public in quotes).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4_ub9r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,yasson,1024910819,517,Fails to serialize generic class annotated with @JsonbTypeSerializer,mkarg,1701815,Markus KARG,markus@headcrashing.eu,OPEN,2021-10-13T07:49:30Z,2022-08-28T11:22:29Z,"Yasson 1.0.9 and 2.0.2 both fail running the following code, but succeed once `@JsonbTypeSerializer` annotation is removed:

```java
public class Yasson {
    public static void main(String[] args) {
        System.out.println(JsonbBuilder.create().toJson(new MyClass<String>()));
    }

    @JsonbTypeSerializer(MySerializer.class)
    public static class MyClass<T> {
    }

    public static class MySerializer<T> implements JsonbSerializer<MyClass<T>> {

        @Override
        public void serialize(MyClass<T> o, JsonGenerator generator, SerializationContext context) {
            context.serialize(new Object(), generator);
        }
    }

}
```

Stack trace:

```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Internal error: Generic bound not found for type T declared in class java.lang.Class.
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:79)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:101)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:126)
	at _SANDBOX.Yasson.main(Yasson.java:11)
Caused by: java.lang.IllegalStateException: Generic bound not found for type T declared in class java.lang.Class.
	at org.eclipse.yasson.internal.ReflectionUtils.resolveTypeArguments(ReflectionUtils.java:220)
	at org.eclipse.yasson.internal.ComponentMatcher.resolveTypeArg(ComponentMatcher.java:351)
	at org.eclipse.yasson.internal.ComponentMatcher.introspectSerializerBinding(ComponentMatcher.java:337)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getSerializerBinding(AnnotationIntrospector.java:319)
	at org.eclipse.yasson.internal.AnnotationIntrospector.introspectCustomization(AnnotationIntrospector.java:737)
	at org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:91)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
	at org.eclipse.yasson.internal.Marshaller.getRootSerializer(Marshaller.java:161)
	at org.eclipse.yasson.internal.Marshaller.serializeRoot(Marshaller.java:142)
	at org.eclipse.yasson.internal.Marshaller.marshall(Marshaller.java:73)
	... 3 more
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/517/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44Jjg2,yasson,942028854,517,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2021-10-13T07:55:15Z,2021-10-13T07:55:15Z,"BTW, it works fine unchanged using Johnzon instead of Yasson, and it also works in Yasson once the serializer's type variable `T` is replaced by `?`, which is an acceptable workaround.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs44Jjg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5I8OYz,yasson,1223747123,517,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-23T08:39:30Z,2022-08-23T08:39:30Z,"Is this still an issue?. I was going to reproduce it and it works to me:

```
[INFO] Running org.eclipse.yasson.Issue517Test
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in org.eclipse.yasson.Issue517Test
```

```
package org.eclipse.yasson;

import org.junit.jupiter.api.Test;

import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.JsonbSerializer;
import jakarta.json.bind.serializer.SerializationContext;
import jakarta.json.stream.JsonGenerator;

public class Issue517Test {

    @Test
    public void genericType() {
        JsonbBuilder.create().toJson(new MyClass<String>());
    }

    @JsonbTypeSerializer(MySerializer.class)
    public static class MyClass<T> {
    }

    public static class MySerializer<T> implements JsonbSerializer<MyClass<T>> {
        @Override
        public void serialize(MyClass<T> o, JsonGenerator generator, SerializationContext context) {
            context.serialize(new Object(), generator);
        }
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5I8OYz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JJR5J,yasson,1227169353,517,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2022-08-25T12:06:05Z,2022-08-25T12:06:05Z,"> Is this still an issue?. I was going to reproduce it and it works to me:

I confirm that this bug does **not** happen anymore when using Yasson **3.0.0 or 3.0.1**, but the bug still **does exist** in Yasson **2.0.4 and 1.0.11**.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JJR5J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/517,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JR7YZ,yasson,1229436441,517,NA,onacit,247819,Jin Kwon,,NA,2022-08-28T11:22:11Z,2022-08-28T11:22:11Z,I got shot with this problem with 1.0.11. Do we have any change for fixing? Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JR7YZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/527,https://api.github.com/repos/eclipse-ee4j/yasson/issues/527,yasson,1070908472,527,The link to the JSON B webpage leads to a hacked website,ljnelson,80764,Laird Nelson,ljnelson@gmail.com,CLOSED,2021-12-03T19:59:12Z,2022-01-13T16:56:35Z,There is a link in the `README` to supposedly the JSON-B website.  It leads to a hacked webpage.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/527/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/527,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VtY_,yasson,1012323903,527,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-13T16:56:35Z,2022-01-13T16:56:35Z,"Fixed in #532 
Thank you for reporting this","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VtY_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,yasson,1095347299,528,Backport Record support to the 1.x,Verdent,4483705,David Král,david.k.kral@oracle.com,CLOSED,2022-01-06T14:00:01Z,2022-01-14T10:19:41Z,Title says it all :-),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48T6i-,yasson,1011853502,528,NA,lostiniceland,1516116,Marc Schlegel,,NA,2022-01-13T07:04:06Z,2022-01-13T07:04:06Z,"@Verdent I started with this today, but after cloning I realised that both `master` and `1.x` have failing tests (no changes, just as is). Do I have to pass some arguments to `mvn package` to make it work?
```

[ERROR] Failures: 
[ERROR]   DocumentationExampleTest.testDateNumberFormats1:368 expected: <{""birthDate"":""07.08.1999"",""name"":""Jason Bourne"",""salary"":""123.46""}> but was: <{""birthDate"":""07.08.1999"",""name"":""Jason Bourne"",""salary"":""123,46""}>
[ERROR]   DocumentationExampleTest.testDateNumberFormats2:398 expected: <123.45678> but was: <123>
[ERROR] Errors: 
[ERROR]   CdiInjectionTest.testInjectionAndCleanup » Weld WELD-001524: Unable to load pr...
[INFO] 
[ERROR] Tests run: 463, Failures: 2, Errors: 1, Skipped: 1

```

I would assume the projects CI is working and only working changes are merged to master/1.x, so I am left with my local machine setup (Linux, JDK 17) causing this issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48T6i-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48UOAb,yasson,1011933211,528,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-13T09:04:22Z,2022-01-13T09:04:22Z,"Hi @lostiniceland , thank you very much for volunteering to do that. Unfortunately the record handling needed some fixing and I am having PR opened for that and hopefully it will be merged and backported this week. 

See #530

Now in terms of the failing tests. This happens usually when your local setup is running on different localization than EN. Is that also your issue? I need to fix those test to be more universal, or to set everything up properly, but I didn't have time for it yet :-)

Sure only passing PRs are merged and none other would be allowed. 

What confuses me a bit though is that failing CdiInjectionTest. I have never encountered that before. May I ask you to do a little diggings around it? :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48UOAb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48UaUJ,yasson,1011983625,528,NA,lostiniceland,1516116,Marc Schlegel,,NA,2022-01-13T10:07:25Z,2022-01-13T10:07:25Z,"Yes, I am running German localisation, which seems to be the culprit here. I will try to do some digging and maybe I can fix those tests.

Regarding the backport: I just cherry-picked the one from 2.x and had to adjust some packages (jakarta) and static-methods. The record-tests seemed to work (but I didnt fully checked because I wanted the baseline-tests to run first)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48UaUJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48Ubpe,yasson,1011989086,528,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-13T10:13:55Z,2022-01-13T10:13:55Z,"Records handling is supported by the first version, but it is actually having problems in dealing with edited records such as multiple constructors, JsonbCreator included, extra methods added etc. :-) That had to be fixed and that's what my mentioned PR is fixing.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48Ubpe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VBt7,yasson,1012145019,528,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-13T13:38:48Z,2022-01-13T13:38:48Z,@lostiniceland I have fixed (or better to say... made it working:-D ) that CDI test. It was failing due to higher version of java. Complete backport with the cdi test fix is here #531,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VBt7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VcQO,yasson,1012253710,528,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-13T15:39:50Z,2022-01-13T15:39:50Z,Backported. Release of the new 1.x and 2.x will be soon,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48VcQO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/528,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48YP8G,yasson,1012989702,528,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-14T10:19:40Z,2022-01-14T10:19:40Z,@lostiniceland Just letting you know that Yasson 1.0.11 and 2.0.4 are being released today to the maven central. :-),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48YP8G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/529,https://api.github.com/repos/eclipse-ee4j/yasson/issues/529,yasson,1095460768,529,IllegalAccessException when using io.vertx.mutiny.core.buffer.Buffer as Request body,argenstijn,130732,,,OPEN,2022-01-06T16:05:37Z,2022-08-23T09:33:39Z,"**Describe the bug**

@See https://github.com/quarkusio/quarkus/issues/22693

All information including how to reproduce is stated over there","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/529/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/529,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48mNcm,yasson,1016649510,529,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-01-19T16:37:00Z,2022-01-19T16:37:00Z,"Hi @argenstijn , I do not think this is a bug or even Yasson issue.
What are you trying to use JSONB (Yasson in this case) for in your usecase? I do not see the reason for JSONB usage in this usecase, because how would it work?

JSONB is used for some specific class creation, such as class Animal, it will parse the obtained JSON and will produce the instance of the desired class filled with the parsed data. But how would it work with the Buffer? If I am not mistaken this Buffer will contain unhandled data for you to process. It feels kind of redundant in this case.

This means, there is no reason to use Yasson for this. I think this is more like Quarkus or Resteasy issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs48mNcm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/529,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49H8Ti,yasson,1025492194,529,NA,argenstijn,130732,,,NA,2022-01-31T08:32:43Z,2022-01-31T08:32:43Z,"The Buffer contains a body which is a json (with jackson it works). 

The issue was orginal posted in Quarkus Github but they said it's  a Yasson error. I could investigate it more to figure out what is going wrong exactly.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49H8Ti/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/535,https://api.github.com/repos/eclipse-ee4j/yasson/issues/535,yasson,1121110735,535,Date in TIME_IN_MILLIS not serialized as number,maxencelaurent,6583528,,,CLOSED,2022-02-01T19:27:26Z,2022-04-27T08:47:47Z,"**Describe the bug**
According to  jsonb-api ([JsonbDateFormat#TIME_IN_MILLIS](https://github.com/eclipse-ee4j/jsonb-api/blob/703826016ebd5aa439d56d272c073e1961415ad4/api/src/main/java/jakarta/json/bind/annotation/JsonbDateFormat.java#L61)), a date formatted with the `TIME_IN_MILLIS` formatter shall be serialized as a number. This is not the case. Such dates are serialized as strings.

Explicit conversion to string is made here:
https://github.com/eclipse-ee4j/yasson/blob/e7ff427f306a784f79d5a9273e23bb715e005b45/src/main/java/org/eclipse/yasson/internal/serializer/AbstractDateTimeSerializer.java#L67

Then, this string is escaped when writing the JSON object in JsonGenerator#write(String).

**To Reproduce**
Serialize an instance of:
```java
public class Dummy {

    @JsonbDateFormat(value = JsonbDateFormat.TIME_IN_MILLIS)
    private OffsetDateTime date;

    public OffsetDateTime getDate(){ return date;}
    public void setDate(OffsetDateTime date){  this.date = date;}
}
```

The JSON will looks like
```json
{ ""date"": ""1638953417522"" }
```

**Expected behavior**

JSON should looks like
```json
{ ""date"": 1638953417522 }
```

**System information:**
 - OS: Linux
 - Java Version: 11
 - Yasson Version: 2.0.4

**Additional context**
Deserialization works fine, with both representation: 

```json
{ ""date"": 1638953417522 }

{ ""date"": ""1638953417522"" }

```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/535/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/535,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WNUg,yasson,1029231904,535,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-02-03T17:34:08Z,2022-02-03T17:34:08Z,"Hi @maxencelaurent , thank you for reaching out. This really seems like a bug. Thank you for reporting this. I will take a look at it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49WNUg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/535,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49ZyqJ,yasson,1030171273,535,NA,abimarank,2951657,Abimaran Kugathasan,k.abimaran@gmail.com,NA,2022-02-04T16:58:45Z,2022-02-04T16:58:45Z,"Hi @Verdent, Are you working on this issue? If not, I planned to provide the fix. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49ZyqJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/535,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49Z58i,yasson,1030201122,535,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-02-04T17:32:09Z,2022-02-04T17:32:09Z,"Hi @abimarank , I did not yet started. Feel free to do it :-) Thank you","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs49Z58i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/536,https://api.github.com/repos/eclipse-ee4j/yasson/issues/536,yasson,1133088181,536,Records fail on optional fields,jsinclair-mckesson,77303737,Joseph Sinclair,,CLOSED,2022-02-11T20:58:31Z,2022-03-28T07:42:49Z,"**Describe the bug**
The recently added support for java records only works if every JSON object contains every possible field.  The vast majority of JSON in use contains optional fields that may not be present.  This causes an exception (e.g. ""javax.json.bind.JsonbException: JsonbCreator parameter model is missing in json document."") when deserializing the document.

**To Reproduce**
Add the following (slightly adjusted) code to the existing unit tests.
```java
public record Car(String type, String model, String color) {} // properties are optional, and often not present
private static final Jsonb serializer = Jsonbs.defaultJsonb; 
private static final Jsonb deSerializer = Jsonbs.defaultJsonb; 
@Test
public void testRecordJsonbMissingProperties() {
    Car carMissingColor = new Car(""Tesla"", ""Model 3"", null);
    Car carMissingModel = new Car(""Toyota"", null, ""Metallic Silver"");
    Car carOnlyType = new Car(""Volvo"", null, null);
    String expectedMissingColor = """"""
    {
        ""type"": ""Tesla"",
        ""model"": ""Model 3""
    }
    """""";
    String expectedMissingModel = """"""
    {
        ""type"": ""Toyota"",
        ""color"": ""Metallic Silver""
    }
    """""";
    String expectedOnlyType = """"""
    {
        ""type"": ""Volvo""
    }
    """""";
    // All three cases below fail with exception on deserialize (fromJson)
    String jsonMissingColor = serializer.toJson(carMissingColor);
    Car deserializedMissingColor = deSerializer.fromJson(expectedMissingColor, Car.class);
    assertEquals(expectedMissingColor, json);
    assertEquals(carMissingColor, deserializedMissingColor);

    String jsonMissingModel = serializer.toJson(carMissingModel);
    Car deserializedMissingModel = deSerializer.fromJson(expectedMissingModel, Car.class);
    assertEquals(expectedMissingModel, json);
    assertEquals(carMissingModel, deserializedMissingModel);

    String jsonOnlyType = serializer.toJson(carOnlyType);
    Car deserializedOnlyType = deSerializer.fromJson(expectedOnlyType, Car.class);
    assertEquals(expectedOnlyType, json);
    assertEquals(carOnlyType, deserializedOnlyType);
}
```

**Expected behavior**
The object should serialize to JSON with, or without, the null property filled in as ""null"" based only on whether `withNullValues(boolean)` is set on the JsonBuilder.
The object should deserialize from JSON with null for any parameter to the record that is not present in the JSON being parsed.

**System information:**
 - OS: Any
 - Java Version: 17
 - Yasson Version: 1.0.11 and 2.0.4

**Additional context**
The goal is to permit using record classes to accept the JSON payload sent to a ReST based microservice built on Microprofile.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/536/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/536,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4-E9-v,yasson,1041489839,536,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-02-16T13:26:14Z,2022-02-16T13:26:14Z,"Hi @jsinclair-mckesson , currently records in Yasson are using the same approach as if the constructor is annotated with `@JsonbCreator`. In version 1.x and 2.x there was no mechanism for default values to be passed if property is missing. We will be releasing 3.0.0-RC1 version of the Yasson very soon. This version does not have this restriction anymore since this requirement for the properties to be present in the JSON document has been relaxed in the spec. 

It might make sense to change it for records in 2.x and 1.x also.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4-E9-v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/536,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4-SQTD,yasson,1044972739,536,NA,jsinclair-mckesson,77303737,Joseph Sinclair,,NA,2022-02-18T18:29:01Z,2022-02-18T18:29:01Z,"Thank you for the update.  I noticed the approach, which is why I provided some unit test code to demonstrate the issue. We can't use the `@JsonbCreator` annotation anywhere for similar reasons; it breaks on optional fields.
The sooner we can have records supported fully as JSON proxies, without failing on optional fields, the better.
Right now we have to write, on average, several hundred lines of unnecessary boilerplate code per JSON object to implement accessors, mutators, and other methods that we prefer not exist. We have scripting to create objects from lists of fields, but it's still many thousands of lines of code we could eliminate if records were supported more fully.

We would definitely need this backported to 1.x and 2.x, if at all possible, because the microprofile platforms we must use are not ready to migrate to the 3.x versions (quarkus, for instance, is still on 1.x for a while).","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs4-SQTD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/536,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5AZCyz,yasson,1080306867,536,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-03-28T07:42:49Z,2022-03-28T07:42:49Z,Will be included in the new 2.x and 1.x release,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5AZCyz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/540,https://api.github.com/repos/eclipse-ee4j/yasson/issues/540,yasson,1154272010,540,Deserialization of Map key with backslash fails,jakobbraun,18247545,,,CLOSED,2022-02-28T16:07:00Z,2022-04-20T10:58:53Z,"**Describe the bug**
When deserializing a Map with a key containing a `\` an exception is thrown.

**To Reproduce**

```java
@Test
void test() throws Exception {
    final Map<String, String> x = Map.of(""test\\pom.xml"", ""hallo"");
    final String json = toJson(x);
    System.out.println(""json: "" + json);
    System.out.println(fromJson(json));
}

private String toJson(final Map<String, String> x) throws Exception {
    try (final Jsonb jsonb = JsonbBuilder.create()) {
        return jsonb.toJson(x);
    }
}

private Map fromJson(final String json) throws Exception {
    try (final Jsonb jsonb = JsonbBuilder.create()) {
        return jsonb.fromJson(json, Map.class);
    }
}
```

For me this code fails with:

```
jakarta.json.bind.JsonbException: Unable to deserialize property 'test\pom.xml' because of: Internal error: Unexpected char 112 at (line no=1, column no=7, offset=6)

	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:100)
	at org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:64)
	at org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:62)
	at org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:66)
	at Test.java:57
```

**Expected behavior**

Deserialization works fine.


**System information:**
 - OS: Linux
 - Java Version: 11
 - Yasson Version: 2.0.4
 - jakarta.json.bind-api version: 2.0.0
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/540/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/540,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Bgchl,yasson,1099024485,540,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-14T10:24:11Z,2022-04-14T10:24:11Z,"I do not think, this is Yasson issue. This exception is caused by JSON-P implementation.
```
Caused by: jakarta.json.stream.JsonParsingException: Unexpected char 112 at (line no=1, column no=7, offset=6)
	at org.glassfish.json.JsonTokenizer.unexpectedChar(JsonTokenizer.java:577)
	at org.glassfish.json.JsonTokenizer.unescape(JsonTokenizer.java:207)
	at org.glassfish.json.JsonTokenizer.readString(JsonTokenizer.java:160)
       ....
```

I was able to reproduce this with 2.x version of Yasson, but I have also verified, that it is no longer happening in version 3.0.0-RC1. 3.0.0-RC1 is using newer version of the JSON-P implementation.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Bgchl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/544,https://api.github.com/repos/eclipse-ee4j/yasson/issues/544,yasson,1194857500,544,Polymorphic Deserialization loses type information when subtypes of subtypes are added,njr-11,13710803,Nathan Rauh,,CLOSED,2022-04-06T16:40:56Z,2022-04-25T11:47:29Z,"**Describe the bug**
When trying out the new polymorphic deserialization feature that is new in JSON-B 3.0 on the Yasson 3.0.0-RC1 JSON-B provider, I noticed that it worked well in the basic scenario of a type with subtypes, but when more subtypes were added to a subtype, then the first-level subtype itself lost its `@type` property in the generated JSON, causing it to be unable to deserialize.  In the following test output, you can see that the third list element lacks a `""@type"":""area""` in its JSON, and then the error which goes along with that,

```
Converted list of locations to JSON as:
[{""@type"":""area"",""@area"":""city"",""name"":""Some City"",""population"":2000,""state"":""Some State""},
{""@type"":""area"",""@area"":""state"",""name"":""Some State"",""population"":1000000,""capital"":""Some Capital City""},
{""name"":""North America"",""population"":600000000}]
Apr 06, 2022 11:19:54 AM org.eclipse.yasson.internal.DeserializationContextImpl deserializeItem
SEVERE: Cannot infer a type for unmarshalling into: TestPolymorphism$Location
Exception in thread ""main"" jakarta.json.bind.JsonbException: Cannot infer a type for unmarshalling into: TestPolymorphism$Location
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.<init>(DefaultObjectInstanceCreator.java:41)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createObjectDeserializer(DeserializationModelCreator.java:251)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:193)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createNewChain(DeserializationModelCreator.java:487)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:476)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:429)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createArrayDeserializer(DeserializationModelCreator.java:333)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:187)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:123)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:141)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:131)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at TestPolymorphism.main(TestPolymorphism.java:69)
```

I found that you can work around this by awkwardly declaring the subtype to be a subtype of itself,
```
    @JsonbTypeInfo(key = ""@area"", value = {
        ...
        @JsonbSubtype(alias = ""general"", type = Area.class)
    })
    public static class Area implements Location {
```

in which case the `@type` gets added back in,
```
{""@type"":""area"",""@area"":""general"",""name"":""North America"",""population"":600000000}
```

but that should not be necessary.

**To Reproduce**
Run this test case:

```
import jakarta.json.bind.*;
import jakarta.json.bind.annotation.*;
import java.util.*;

public class TestPolymorphism {

    @JsonbTypeInfo({
        @JsonbSubtype(alias = ""point"", type = Point.class),
        @JsonbSubtype(alias = ""area"", type = Area.class)
    })
    public static interface Location {
    }

    @JsonbTypeInfo(key = ""@area"", value = {
        @JsonbSubtype(alias = ""city"", type = City.class),
        @JsonbSubtype(alias = ""state"", type = State.class),

        // Workaround here - It is awkward that Area must include itself
        // as a subtype of itself, but if we don't do this, Yasson also
        // omits ""@type"": ""area"" from the JSON, making it unable to
        // deserialize as a Location.class.
        // --- Comment out the following annotation to make it fail ---
        //@JsonbSubtype(alias = ""general"", type = Area.class)
    })
    public static class Area implements Location {
        public String name;
        public long population;
    }

    public static class City extends Area {
        public String state;
    }

    public static class State extends Area {
        public String capital;
    }

    public static class Point implements Location {
        public double x;
        public double y;
    }

    public static void main(String[] args) throws Exception {
        try (Jsonb jsonb = JsonbBuilder.create()) {
            Location[] list = new Location[3];

            City city = new City();
            city.name = ""Some City"";
            city.population = 2000;
            city.state = ""Some State"";
            list[0] = city;

            State state = new State();
            state.name = ""Some State"";
            state.population = 1000000;
            state.capital = ""Some Capital City"";
            list[1] = state;

            Area northAmerica = new Area();
            northAmerica.name = ""North America"";
            northAmerica.population = 600000000;
            list[2] = northAmerica;

            String json = jsonb.toJson(list);

            System.out.println(""Converted list of locations to JSON as:"");
            System.out.println(json);

            Location[] deserialized = jsonb.fromJson(json, Location[].class);

            City c = (City) deserialized[0];
            assertEquals(city.name, c.name);
            assertEquals(city.population, c.population);
            assertEquals(city.state, c.state);

            State s = (State) deserialized[1];
            assertEquals(state.name, s.name);
            assertEquals(state.population, s.population);
            assertEquals(state.capital, s.capital);

            Area a = (Area) deserialized[2];
            assertEquals(northAmerica.name, a.name);
            assertEquals(northAmerica.population, a.population);
        }
    }

    private static final void assertEquals(Object expected, Object observed) {
        if (!Objects.equals(expected, observed))
            throw new AssertionError(""Expected "" + expected + "", but observed "" + observed);
    }
}
```

**Expected behavior**
The third list element of the test output JSON array (without the workaround enabled) should look like this, including `@type`,
```
{""@type"":""area"",""name"":""North America"",""population"":600000000}
```
and then it would deserialize properly because the necessary type information would be found there.

**System information:**
 - OS: Mac
 - Java Version: 11
 ```
openjdk version ""11.0.2"" 2019-01-15
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.2+9)
Eclipse OpenJ9 VM AdoptOpenJDK (build openj9-0.12.1, JRE 11 Mac OS X amd64-64-Bit Compressed References 20190204_123 (JIT enabled, AOT enabled)
OpenJ9   - 90dd8cb40
OMR      - d2f4534b
JCL      - 289c70b684 based on )
```
 - Yasson Version: 3.0.0-RC1

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/544/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/544,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5BcV22,yasson,1097948598,544,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-13T11:39:05Z,2022-04-13T11:39:05Z,"Thank you, I will take a look at that :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5BcV22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/544,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Bcmm3,yasson,1098017207,544,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-13T12:55:57Z,2022-04-13T12:55:57Z,"Very nice example. It was easy to see the issue. I will tune Yasson it a bit to reflect the following situations:
1. Serialized instance is type of Area -> it will contain just the type information from its parents and not area information itself
2. Serialized instance is type of Village and not present in Area configuration -> no polymorphic info included.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Bcmm3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,yasson,1198969790,545,"Java module system: ""access to public member failed"" when using 'opens' x to 'y'",mfdewit,534516,Mauro de Wit,,OPEN,2022-04-10T10:08:43Z,2022-08-22T12:37:12Z,"**Describe the bug**
Allowing runtime-only access to a package by org.eclipse.yasson is not working.
I have a module-info file containing the following statement:

`opens nl.scuro.media.model to org.eclipse.yasson;`

This should allow Yasson to be able to read this package when (de)serializing. Unfortunately, I get an error:

```
Caused by: java.lang.IllegalAccessException: access to public member failed: nl.scuro.media.model.MediaRefClientWrapper.getMediaRef[Ljava.lang.Object;@6af6a361/invokeVirtual, from public Lookup
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:955)
```

I can work around this by exporting my package:
`exports nl.scuro.media.model;`

But I there are scenarios where one doesn't want to export globally.

**To Reproduce**
Create a simple project with a module-info file and package containing a POJO.
Add Yasson as a dependency and _open_ this package _to_ org.eclipse.yasson.

**Expected behavior**
I would expect Yasson to be able to access all classes in the _opened_ package.

**System information:**
 - OS: Linux
 - Java Version: 17
 - Yasson Version: 2.0.4

**Additional context**
While I'm not very experienced with the module system yet, this seems to be incorrect behavior.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/545/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5DrMPw,yasson,1135395824,545,NA,Thihup,13357965,Thiago Henrique Hüpner,thihup@gmail.com,NA,2022-05-24T04:33:56Z,2022-05-24T04:33:56Z,"It seems to be using the `MethodHandles.publicLookup()` instead of the `MethodHandles.lookup()`, so it cannot access private fields","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5DrMPw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5DvgpE,yasson,1136527940,545,NA,Thihup,13357965,Thiago Henrique Hüpner,thihup@gmail.com,NA,2022-05-24T23:27:11Z,2022-05-24T23:27:11Z,"This is probably a little more tricky than expected. `access to public member failed` seems to happen when a module does not read the other.
Adding the following in the `PropertyModel::createReadHandle` class seems to fix my case
```java
    PropertyModel.class.getModule().addReads(getter.getDeclaringClass().getModule())
    return LOOKUP.unreflect(getter);
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5DvgpE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Icj-S,yasson,1215446930,545,NA,xxINFERNALzz,6696624,Eugene Uraskin,,NA,2022-08-15T17:28:42Z,2022-08-15T17:28:42Z,"I have the same error with module system, even on yasson version 3.0.1.
Global export indeed is a temporal solution. 
After JDK 9 on module system to have access to something via reflection need to called `reflectionObject.setAccessible(true)`.
Method `ProperyModel.isMethodVisible(Method method, PropertyVisibilityStrategy strategy)` should override accessibility and solve this issue, but seams used a wrong combination of flags.

As a temporal solution I used custom visibility strategy:
```
public class CustomPropertyVisibilityStrategy implements PropertyVisibilityStrategy {

    @Override
    public boolean isVisible(Field field) {
        field.setAccessible(true);
        return true;
    }

    @Override
    public boolean isVisible(Method method) {
        method.setAccessible(true);
        return true;
    }
}
```

And by adding simple annotation we can solve this without global export:
```
@JsonbVisibility(value = CustomPropertyVisibilityStrategy.class)
public class SimplePlaylistItemAdditionalInfo implements Serializable
```

But anyway this is temporal solution and this bug should be fixed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Icj-S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/545,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5I2f4r,yasson,1222245931,545,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-22T11:50:01Z,2022-08-22T11:50:01Z,"According to Javadoc sun.invoke.util.VerifyAccess.isClassAccessible(Class<?> refc, Class<?> lookupClass, int allowedModes)

```
Evaluate the JVM linkage rules for access to the given class on behalf of caller.
JVM Specification, 5.4.4 ""Access Control""
A class or interface C is accessible to a class or interface D if and only if any of the following conditions are true:
C is public and in the same module as D.
D is in a module that reads the module containing C, C is public and in a package that is exported to the module that contains D.
C and D are members of the same runtime package.
Parameters:
refc the symbolic reference class to which access is being checked (C)
lookupClass the class performing the lookup (D)
allowedModes
```

The package where you have the class to Serialize/Deserialize needs to be exported.

For this particular case, you need to add in module-info:
`exports nl.scuro.media.model;`

The next is not necessary:
`opens nl.scuro.media.model to org.eclipse.yasson;`

From my eyes, `opens` should be acceptable, but this is how the public lookup is implemented unfortunately.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5I2f4r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/547,https://api.github.com/repos/eclipse-ee4j/yasson/issues/547,yasson,1212178139,547,Instances of Log & Throw,dansiviter,1540398,,,CLOSED,2022-04-22T10:33:45Z,2022-04-26T11:38:58Z,"**Describe the bug**
Log and throw is generally considered an anti-pattern but there are multiple instances where this is happenening:
-  [`DeserializationContextImpl[L144-L147]`](/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/DeserializationContextImpl.java#L144-L147),
- [`SerializationContextImpl[L135-L138]`](/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/SerializationContextImpl.java#L135-L138).

Log & Throw needlessly pollutes the logs and adds no value over and above the exception. It should be down to the developer if they handle and log the exception.

There are potentially more incidents of this.

**To Reproduce**
Deserialise a bad payload to force an exception to be thrown. The following log is observed:

```
2022.04.21 19:17:27 SEVERE org.eclipse.yasson.internal.DeserializationContextImpl Thread[helidon-1,5,server]: Unable to deserialize property 'foo' because of: Error deserialize JSON value into type: int.
```

**Expected behavior**
Only the exceptions should be thrown and no log messages should be written.

**System information:**
 - OS: Linux
 - Java Version: 17
 - Yasson Version: 3.0.0-RC1

**Additional context**
Workaround is to selectively disable logging, but as this is often set to `SEVERE` then other messages may be missed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/547,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CJIN0,yasson,1109689204,547,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-26T11:38:20Z,2022-04-26T11:38:20Z,Fixed by #548,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CJIN0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,yasson,1213249886,549,Record with no-arg constructor with does not deserialise correctly,dansiviter,1540398,,,CLOSED,2022-04-23T09:05:48Z,2022-04-27T08:57:40Z,"**Describe the bug**
If a record has a no-arg constructor when deserialised the optional is always `<empty>`. 

**To Reproduce**
An example is available [here](//gist.github.com/dansiviter/9d826225a553a3b5e493bac944fca7ce).

**Expected behavior**
The correct constructor for the record is selected.

**System information:**
 - OS: Windows 11
 - Java Version: 17
 - Yasson Version: 3.0.0-RC1

**Additional context**
N/A
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/549/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CAit8,yasson,1107438460,549,NA,dansiviter,1540398,,,NA,2022-04-23T09:09:51Z,2022-04-23T09:09:51Z,Updates as I originally thought it was due to `Optional` but appears it happens every time.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CAit8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CEFvk,yasson,1108368356,549,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-25T10:12:51Z,2022-04-25T10:12:51Z,"Hi Dan, this is happening due to default empty constructor you are having in all of the records. Yasson is trying to find `@JsonbCreator` annotated constructor/factory and finds none, tries to find not annotated constructor to use, but there are multiple of them and it is not clear which one should be used. But since there is default constructor, if  backs to use that. If you remove empty constructor, everything will work as expected. Or if you need that default constructor for some reason, you can overwrite the parametrized one and mark it as `@JsonbCreator` and Yasson will prioritize this one. This is possible workaround for now.

Now I am thinking whether we should throw an exception in cases when record do have multiple constructors (including the default one) and none of them is marked as `@JsonbCreator`. It might possibly make sense for records. Record processing is already failing when handling multiple parametrized constructors and have none annotated as creator.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CEFvk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CGPW1,yasson,1108932021,549,NA,dansiviter,1540398,,,NA,2022-04-25T19:04:11Z,2022-04-25T19:04:11Z,From [RecordTest.java:L69](/eclipse-ee4j/yasson/blob/master/src/test/java16/org/eclipse/yasson/records/RecordTest.java#L69) it does suggest that it should throw an exception but I'm not seeing that behaviour in 3.0.0-RC1. 🤔,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CGPW1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CGVFK,yasson,1108955466,549,NA,dansiviter,1540398,,,NA,2022-04-25T19:28:39Z,2022-04-25T19:28:39Z,I've just checked and it's due to default no-args constructor behaviour of records. I'd argue a no-arg constructor is a pointless record so should throw an exception regardless.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CGVFK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CIRj-,yasson,1109465342,549,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-26T07:50:38Z,2022-04-26T07:50:38Z,Exactly my thought when I was analyzing it yesterday. I will make the needed change :-),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CIRj-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/549,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CISC6,yasson,1109467322,549,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-04-26T07:52:40Z,2022-04-26T07:52:40Z,"It does fail for multiple constructors, but since it is taking nearly the same processing path as regular class, I forgot to make it to fail when default constructor is present. It backs to use that and does not fail in this case. :-)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5CISC6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/557,https://api.github.com/repos/eclipse-ee4j/yasson/issues/557,yasson,1227022956,557,Missing doPrivileged when reading jsonb.creator-parameters-required system property,njr-11,13710803,Nathan Rauh,,CLOSED,2022-05-05T18:19:15Z,2022-05-09T21:46:43Z,"**Describe the bug**
JsonbBuilder.build() fails with the following exception when using Yasson 3.0.0-RC1 as the JSON-B provider and Java 2 security is enabled:
```
java.security.AccessControlException: Access denied (""java.util.PropertyPermission"" ""jsonb.creator-parameters-required"" ""read"")
at java.base/java.security.AccessController.throwACE(AccessController.java:176)
at java.base/java.security.AccessController.checkPermissionHelper(AccessController.java:238)
at java.base/java.security.AccessController.checkPermission(AccessController.java:385)
at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)
at com.ibm.ws.kernel.launch.internal.MissingDoPrivDetectionSecurityManager.checkPermission(MissingDoPrivDetectionSecurityManager.java:45)
at java.base/java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1066)
at java.base/java.lang.System.getProperty(System.java:582)
at java.base/java.lang.System.getProperty(System.java:565)
at org.eclipse.yasson.internal.JsonbConfigProperties.initRequiredCreatorParameters(JsonbConfigProperties.java:189)
at org.eclipse.yasson.internal.JsonbConfigProperties.<init>(JsonbConfigProperties.java:99)
at org.eclipse.yasson.internal.JsonbContext.<init>(JsonbContext.java:82)
at org.eclipse.yasson.internal.JsonBinding.<init>(JsonBinding.java:45)
at org.eclipse.yasson.internal.JsonBindingBuilder.build(JsonBindingBuilder.java:61)
at ...
```

Missing doPrivileged is at this line:
https://github.com/eclipse-ee4j/yasson/blob/a6795d53590d5f229ab087304be6d779d3911dc6/src/main/java/org/eclipse/yasson/internal/JsonbConfigProperties.java#L191

**To Reproduce**
Run with Java 2 security enabled

**Expected behavior**
JsonbBuilder.build() should succeed

**System information:**
 - OS: all
 - Java Version: 11
 - Yasson Version: 3.0.0-RC1
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/557/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/559,https://api.github.com/repos/eclipse-ee4j/yasson/issues/559,yasson,1248097758,559,"Using Custom Serializer with toJson(T, Type) causes ClassCastException",pdudits,1588543,Patrik Duditš,github@dudits.net,CLOSED,2022-05-25T13:27:28Z,2022-05-30T08:27:34Z,"**Describe the bug**
When custom serializer wants to serialize a property using `SerializationContext.serialize(String, Object p, JsonGenerator)` and serialization is invoked with explicit type (`Jsonb.toJson(Object,Type t)`), it fails with `ClassCastException` where object `p` is attempted to be cast to type `t`.

```
jakarta.json.bind.JsonbException: Unable to serialize property 'crate' from org.eclipse.yasson.serializers.model.Box

	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:43)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.serialize(ObjectSerializer.java:38)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:197)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:133)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:159)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:129)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.serializers.SerializersTest.testSerializerSerializationOfTypeWithExplicitType(SerializersTest.java:168)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:208)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: jakarta.json.bind.JsonbException: Unable to serialize property 'boxStr' from org.eclipse.yasson.serializers.model.CrateInner
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:43)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.serialize(ObjectSerializer.java:38)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:197)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.SerializationContextImpl.serialize(SerializationContextImpl.java:178)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.serializers.model.CrateSerializer.serialize(CrateSerializer.java:29)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.serializers.model.CrateSerializer.serialize(CrateSerializer.java:23)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.UserDefinedSerializer.serialize(UserDefinedSerializer.java:35)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:43)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 76 more
Caused by: jakarta.json.bind.JsonbException: Error getting value on: org.eclipse.yasson.serializers.model.CrateInner@21e360a
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:41)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 92 more
Caused by: java.lang.ClassCastException: Cannot cast org.eclipse.yasson.serializers.model.CrateInner to org.eclipse.yasson.serializers.model.Box
	at java.base/java.lang.Class.cast(Class.java:3889)
	at org.eclipse.yasson@3.0.0-SNAPSHOT/org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:39)
	... 93 more
```

The trouble seems to be, that `runtimeType` is applied in `SerializationContextImpl.serializeObject` despite this is no longer root Serialization context.


**To Reproduce**
Reproducable with variation of `SerializersTest.testSerializerSerializationOfType` with additional argument to `toJson`:

```
    @Test
    public void testSerializerSerializationOfTypeWithExplicitType() {
        JsonbConfig config = new JsonbConfig().withSerializers(new CrateSerializer());
        Jsonb jsonb = JsonbBuilder.create(config);
        String expected = ""{\""boxStr\"":\""Box string\"",\""crate\"":{\""crateStr\"":\""REPLACED crate str\"",\""crateInner\"":{\""crateInnerBigDec\"":10,\""crate_inner_str\"":\""Single inner\""},\""crateInnerList\"":[{\""crateInnerBigDec\"":10,\""crate_inner_str\"":\""List inner 0\""},{\""crateInnerBigDec\"":10,\""crate_inner_str\"":\""List inner 1\""}],\""crateBigDec\"":54321},\""secondBoxStr\"":\""Second box string\""}"";
        Box pojo = createPojo();

        assertEquals(expected, jsonb.toJson(pojo, Box.class));

        Box result = jsonb.fromJson(expected, Box.class);
        assertEquals(new BigDecimal(""54321""), result.crate.crateBigDec);
        //result.crate.crateStr is mapped to crate_str by jsonb property
        assertNull(result.crate.crateStr);
        assertEquals(pojo.crate.crateInner.crateInnerStr, result.crate.crateInner.crateInnerStr);
        assertEquals(pojo.crate.crateInner.crateInnerBigDec, result.crate.crateInner.crateInnerBigDec);
    }
```

**Expected behavior**
No exception, root type is not taken into account for non-root contexts.

**System information:**
 - OS: Windows
 - Java Version: 17
 - Yasson Version: Current master 52abc48

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/559/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/561,https://api.github.com/repos/eclipse-ee4j/yasson/issues/561,yasson,1286629629,561,Serializing an array of values in a JsonbSerializer fails when not chaining calls,stephane-vallee9,108309796,,,CLOSED,2022-06-28T01:12:14Z,2022-06-30T08:16:55Z,"**Describe the bug**
When defining a custom JsonbSerializer that writes an array of primitives, serializing will fail when not chaining calls that write the primitives.

**To Reproduce**
```
public class Yasson {
	public static class Dummy {
	}

	public static JsonbSerializer<Dummy> dummySerializerOK = new JsonbSerializer<>() {
		public void serialize(Dummy dummy, JsonGenerator out, SerializationContext ctx) {
			out.writeStartArray().write(""abc"").write(""def"").write(""ghi"").writeEnd();
		}
	};

	public static JsonbSerializer<Dummy> dummySerializerThatFails = new JsonbSerializer<>() {
		public void serialize(Dummy dummy, JsonGenerator out, SerializationContext ctx) {
			out.writeStartArray();
			out.write(""abc"");
			out.write(""def"");
			out.write(""ghi"");
			out.writeEnd();
		}
	};

	public static void main(String... args) {
		JsonbConfig cfg = new JsonbConfig().withSerializers(dummySerializerOK);
		Jsonb jsonb = JsonbBuilder.newBuilder().withConfig(cfg).build();
		System.out.println(jsonb.toJson(new Dummy()));
		System.out.println(""----------"");

		cfg = new JsonbConfig().withSerializers(dummySerializerThatFails);
		jsonb = JsonbBuilder.newBuilder().withConfig(cfg).build();
		System.out.println(jsonb.toJson(new Dummy()));
	}
}
```
**Stack trace**
```
[20:42:12 stephane_vallee] ~/dev/projects/nuts-platform $  cd /Users/stephane_vallee/dev/projects/nuts-platform ; /usr/bin/env /Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home/bin/java -XX:+ShowCodeDetailsInExceptionMessages @/var/folders/1x/ck69t7mx1fl7r1y9mhqq28980000gn/T/cp_cmtppnwhql5z07xz6qdg4tpr7.argfile com.nuts.Yasson 
[""abc"",""def"",""ghi""]
----------
Jun. 27, 2022 8:42:38 P.M. org.eclipse.yasson.internal.SerializationContextImpl marshall
SEVERE: Generating incomplete JSON
Exception in thread ""main"" jakarta.json.bind.JsonbException: write(String value) cannot be called outside of the scope of user generator.
        at org.eclipse.yasson.internal.serializer.YassonGenerator.writeValidate(YassonGenerator.java:212)
        at org.eclipse.yasson.internal.serializer.YassonGenerator.write(YassonGenerator.java:146)
        at com.nuts.Yasson$2.serialize(Yasson.java:26)
        at com.nuts.Yasson$2.serialize(Yasson.java:1)
        at org.eclipse.yasson.internal.serializer.UserDefinedSerializer.serialize(UserDefinedSerializer.java:35)
        at org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
        at org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
        at org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
        at org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:197)
        at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:133)
        at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:159)
        at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:121)
        at com.nuts.Yasson.main(Yasson.java:39)
```

**Expected behavior**
Both serializers should output [""abc"",""def"",""ghi""]. Only the first one with chained method calls does.


**System information:**
 - OS: any
 - Java Version: 17
 - Yasson Version: 3.0.0

**Additional context**
If I understand correctly the spec, it seems to me that the guarding class `org.eclipse.yasson.internal.serializer.YassonGenerator` should return `this` instead of the result of the delegated call, which is the delegate itself.
However, when returning `this` (or invoking the generator with distinct calls), the logic of validating the current nesting level probably needs to be reworked a bit, as writing a value decrement the level, which it should not unless in pair with a key (that had incremented it). I also think that, when leaving an array or object, level should be checked against its value when entering these structures, which doesn't seem to be the case right now.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/561/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/561,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Fq84x,yasson,1168887345,561,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-06-28T15:41:13Z,2022-06-28T15:41:13Z,"Hi @stephane-vallee9 , Thank you for reporting this issue. I will take a look into it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Fq84x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/563,https://api.github.com/repos/eclipse-ee4j/yasson/issues/563,yasson,1312109913,563,Input ignored after unbound key,feefifo,5922574,,,CLOSED,2022-07-20T23:17:14Z,2022-07-21T12:35:22Z,"When a key with an _object_ for a value is not recognized, the remainder of the input is ignored.

There are a couple of reasons I believe the must-ignore policy does not apply here, and that this is a bug.

> When JSON Binding implementation during deserialization encounters key in key/value pair that it does not recognize, it should treat the rest of the JSON document as if the element simply did not appear, and in particular, the implementation MUST NOT treat this as an error condition.

1. The specification says that the rest of the document should be treated as if the element did not appear. My interpretation is that only that key-value is to be ignored, otherwise the specification would say something like, ""treat the rest of the JSON document as if **_it_** simply did not appear.""
2. Remaining input is _not_ ignored unless the unrecognized key has an object value. Strings, numbers, etc. do not trigger this problem. This suggests that the behavior is accidental rather than a deliberate interpretation applying the must-ignore policy to ""the rest of the document.""
3. This behavior violently violates the principle of least surprise.

Here is a test:

```java
import java.util.Map;

import jakarta.json.bind.JsonbBuilder;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class JsonbTest {

    private static final String EXAMPLE = ""{\""obj\"":{\""foo\"":\""bar\""},\""key\"":\""val\""}"";

    public static class Fail {
        public String key;
    }

    public static class Pass extends Fail {
        public Map<String, String> obj;
    }

    @ParameterizedTest
    @ValueSource(classes = { Pass.class, Fail.class })
    void bindWithMissingProperties(Class<? extends Fail> clz) {
        Fail fail = JsonbBuilder.create().fromJson(EXAMPLE, clz);
        Assertions.assertEquals(""val"", fail.key);
    }

}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/563/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/563,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5HAvDr,yasson,1191375083,563,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-07-21T11:34:49Z,2022-07-21T11:34:49Z,"Hi, thank you for reaching out. This is definitely a bug. I will make a fix for this.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5HAvDr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/569,https://api.github.com/repos/eclipse-ee4j/yasson/issues/569,yasson,1332971234,569,@JsonbTypeDeserializer ignored on parent,redmitry,6804872,Dmitry Repchevsky,,OPEN,2022-08-09T09:25:10Z,2022-08-15T08:11:24Z,"**Describe the bug**
The deserializer defined on the parent type is ignored while working OK with JsonbConfig.

**To Reproduce**
1. create two classes:  Animal and Cat
2. annotate Animal with `@JsonbTypeDeserializer(AnimalDeserializer.class)`
3. try to deserialize Cat (!)

**Expected behavior**
Even though the Cat is deserialized I expect the custom deserializer is called,
It works when it is passed to the JsonBuilder:
`JsonbBuilder.create(new JsonbConfig().withDeserializers(new AnimalDeserializer()))`

**System information:**
 - OS: Windows 10 version 10.0 running on amd64
 - Java Version: OpenJDK 64-Bit Server VM 11.0.15+10-LTS
 - Yasson: 3.0.1

**Additional context**
See simple maven project attached 
[yasson-test-001.zip](https://github.com/eclipse-ee4j/yasson/files/9289102/yasson-test-001.zip)

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/569/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/569,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5IF-E-,yasson,1209524542,569,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2022-08-09T15:21:47Z,2022-08-09T15:21:47Z,"I think, I found the problem:
[AnnotationIntrospector](https://github.com/eclipse-ee4j/yasson/blob/39b667a0eb40c9604e0f634d4f59a273c5d5cde5/src/main/java/org/eclipse/yasson/internal/AnnotationIntrospector.java#L330) does not introspect parents for the `@JsonbTypeDeserializer` annotation.
It just returns the 'null':
~~~java
        if (deserializerAnnotation == null) {
            return null;
        }
~~~
I tried simple sulution and it seems to work.
[issue-569.patch.txt](https://github.com/eclipse-ee4j/yasson/files/9292337/issue-569.patch.txt)

PS the same should work for the #467","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5IF-E-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/569,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5IZ2jT,yasson,1214736595,569,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-15T08:11:24Z,2022-08-15T08:11:24Z,"Hi @redmitry , thank you for reporting this issue and taking time to create the patch :-) I will take a look into what you have found.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5IZ2jT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,yasson,1348053652,571,"yasson should support (de)serializing of ""java.math.MathContext""",nimo23,3045549,,,OPEN,2022-08-23T14:29:30Z,2023-09-05T09:16:07Z,"**Describe the bug**
I get this error when trying to create json output of an instance of `java.math.MathContext`. 

```
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field final java.math.RoundingMode java.math.MathContext.roundingMode accessible: module java.base does not ""opens java.math"" to unnamed module @4dca0ecd
	at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354) ~[?:?]
	at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) ~[?:?]
	at java.lang.reflect.Field.checkCanSetAccessible(Field.java:178) ~[?:?]
	at java.lang.reflect.Field.setAccessible(Field.java:172) ~[?:?]
	at org.eclipse.yasson.internal.model.PropertyValuePropagation.lambda$overrideAccessible$2(PropertyValuePropagation.java:153) ~[yasson-1.0.9.jar:?]
	at java.security.AccessController.doPrivileged(AccessController.java:318) ~[?:?]
	at org.eclipse.yasson.internal.model.PropertyValuePropagation.overrideAccessible(PropertyValuePropagation.java:152) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.model.PropertyValuePropagation.isFieldVisible(PropertyValuePropagation.java:127) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.model.PropertyValuePropagation.initReadable(PropertyValuePropagation.java:94) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.model.PropertyValuePropagation.<init>(PropertyValuePropagation.java:80) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.model.ReflectionPropagation.<init>(ReflectionPropagation.java:39) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:134) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:71) ~[yasson-1.0.9.jar:?]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197) ~[?:?]
	at java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1779) ~[?:?]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[?:?]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[?:?]
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921) ~[?:?]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682) ~[?:?]
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:72) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97) ~[yasson-1.0.9.jar:?]
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708) ~[?:?]
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:65) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializeItem(AbstractContainerSerializer.java:194) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.MapToObjectSerializer.serializeContainer(MapToObjectSerializer.java:99) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.MapSerializer.serializeInternal(MapSerializer.java:156) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.MapSerializer.serializeInternal(MapSerializer.java:27) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serialize(AbstractContainerSerializer.java:107) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.AbstractContainerSerializer.serializerCaptor(AbstractContainerSerializer.java:125) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.marshallProperty(ObjectSerializer.java:121) ~[yasson-1.0.9.jar:?]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serializeInternal(ObjectSerializer.java:69) ~[yasson-1.0.9.jar:?]
	... 79 more
```

**To Reproduce**
Steps to reproduce the bug

**Expected behavior**
To be able to (de)serialize `java.math.MathContext`.

**System information:**
 - OS: Mac
 - Java Version: 17
 - Yasson Version: 1.0.9
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/571/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JIG2n,yasson,1226861991,571,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-25T07:07:07Z,2022-08-25T07:07:07Z,Could you provide a reproducer please?.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JIG2n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JIlmo,yasson,1226987944,571,NA,nimo23,3045549,,,NA,2022-08-25T09:05:48Z,2022-08-25T09:05:48Z,"@jbescos Here is the test case leading to this exception:

```
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.config.PropertyVisibilityStrategy;

import org.junit.jupiter.api.Test;

class BigDecimalJsonTest {

	public static class NumberText {

		private final BigDecimal number;
		private final MathContext mathContext;

		public NumberText(BigDecimal number, MathContext mathContext) {
			this.number = number;
			this.mathContext = mathContext;
		}

		public BigDecimal getNumber() {
			return number;
		}

		public MathContext getMathContext() {
			return mathContext;
		}
	}

	public static final class PrivateVisibilityStrategy implements PropertyVisibilityStrategy {
		@Override
		public boolean isVisible(Field field) {
			return true;
		}

		@Override
		public boolean isVisible(Method method) {
			return method.isAnnotationPresent(javax.json.bind.annotation.JsonbProperty.class);
		}
	}

	@Test
	final void testNumberText() {
		var mathContext = new MathContext(32, RoundingMode.HALF_UP);
		var numberText = new NumberText(BigDecimal.valueOf(5.3), mathContext);

		var json = toJson(numberText);
		System.out.println(json);
		assertNotNull(json);
	}

	public static String toJson(Object object) {
		try (var jsonb = JsonbBuilder.create(new JsonbConfig().withFormatting(true)
				.withNullValues(true)
				// using ""PrivateVisibilityStrategy"" leads to an exception
				.withPropertyVisibilityStrategy(new PrivateVisibilityStrategy()))) {
			return jsonb.toJson(object);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
```


I found the reason for this exception: 
I am using the `PrivateVisibilityStrategy` which leads to this exception. However, it's not very convenient to turn this off because in my case `NumberText` is just a property of another class hierarchy where I need the `PrivateVisibilityStrategy`. So if I disable it just because of `MathContext`, then the `PrivateVisibilityStrategy` for all other properties within the class hierarchy will also be disabled.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JIlmo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JI6m9,yasson,1227073981,571,NA,jbescos,4736283,Jorge Bescos Gascon,,NA,2022-08-25T10:26:29Z,2022-08-25T10:26:29Z,"I think the issue is that java.math module is not opened to java.base module, but you can explicitly open it with this JVM argument:
`--add-opens java.base/java.math=ALL-UNNAMED`","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JI6m9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JJHt_,yasson,1227127679,571,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-25T11:22:15Z,2022-08-25T11:22:15Z,"`MathContext` is not supported by Yasson currently. If you need this to be serialized/deserialized properly, please create your own custom Serializer/Deserializer for it.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JJHt_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lkEhL,yasson,1703954507,571,NA,nimo23,3045549,,,NA,2023-09-02T22:26:30Z,2023-09-02T22:26:30Z,"@Verdent Look here with the current version:

```
Caused by: jakarta.json.bind.JsonbException: Unable to serialize property 'amount' from user.Item
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:43)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ObjectSerializer.serialize(ObjectSerializer.java:38)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.findSerializer(ObjectTypeSerializer.java:68)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.serializeValue(ObjectTypeSerializer.java:50)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.TypeSerializer$ValueSerializer.serialize(TypeSerializer.java:51)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.TypeSerializer.serialize(TypeSerializer.java:37)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.serialize(ObjectTypeSerializer.java:31)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.CollectionSerializer.lambda$serialize$0(CollectionSerializer.java:37)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.CollectionSerializer.serialize(CollectionSerializer.java:37)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:43)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 104 more
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field final java.math.RoundingMode java.math.MathContext.roundingMode accessible: module java.base does not ""opens java.math"" to unnamed module @765877f0
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:180)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:174)
	at deployment.test.war/org.eclipse.yasson.internal.model.PropertyModel.lambda$overrideAccessible$2(PropertyModel.java:594)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at deployment.test.war/org.eclipse.yasson.internal.model.PropertyModel.overrideAccessible(PropertyModel.java:593)
	at deployment.test.war/org.eclipse.yasson.internal.model.PropertyModel.isFieldVisible(PropertyModel.java:568)
	at deployment.test.war/org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:516)
	at deployment.test.war/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:157)
	at deployment.test.war/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1779)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at deployment.test.war/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at deployment.test.war/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:105)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at deployment.test.war/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:77)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChainInternal(SerializationModelCreator.java:187)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChain(SerializationModelCreator.java:137)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.memberSerializer(SerializationModelCreator.java:381)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.createObjectSerializer(SerializationModelCreator.java:213)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChainInternal(SerializationModelCreator.java:199)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChainRuntime(SerializationModelCreator.java:123)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.lambda$findSerializer$0(ObjectTypeSerializer.java:67)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.findSerializer(ObjectTypeSerializer.java:65)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.serializeValue(ObjectTypeSerializer.java:50)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.TypeSerializer$ValueSerializer.serialize(TypeSerializer.java:51)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.TypeSerializer.serialize(TypeSerializer.java:37)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.types.ObjectTypeSerializer.serialize(ObjectTypeSerializer.java:31)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:43)
	at deployment.test.war/org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 124 more
```

>MathContext is not supported by Yasson currently. 

Why? It has only two properties `final int precision;` and `final RoundingMode roundingMode;` (or their getters `getPrecision()`, `getRoundingMode()`) which can be easily (de)serialized by yasson. I think I can remember that this was already possible in one of the earlier versions of Yasson, because I used that lib back then and didn't have these problems with exactly this class. But I don't remember which version was suddenly no longer possible. I think, in combination with (de)serializing `BigDecimal`, de)serializing `MathContext` as well has it needs..

What must be done to support it?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lkEhL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lpMxn,yasson,1705299047,571,NA,nimo23,3045549,,,NA,2023-09-04T13:42:03Z,2023-09-04T13:42:03Z,"I can provide a PR. I wrote a `MathContextAdapter`:

```
public class MathContextAdapter implements JsonbAdapter<MathContext, JsonObject> {

	@Override
	public JsonObject adaptToJson(MathContext mathContext) throws Exception {
		return Json.createObjectBuilder()
				.add(""precision"", mathContext.getPrecision())
				.add(""roundingMode"", mathContext.getRoundingMode().name())
				.build();
	}

	@Override
	public MathContext adaptFromJson(JsonObject jsonObject) throws Exception {
		var precision = jsonObject.getInt(""precision"");
		var roundingMode = jsonObject.getString(""roundingMode"");
		MathContext mathContext = new MathContext(precision, RoundingMode.valueOf(roundingMode));
		return mathContext;
	}
}
```

However, looking into e.g. https://github.com/eclipse-ee4j/yasson/tree/master/src/main/java/org/eclipse/yasson/internal, Yasson only accepts serializers and deserializers. Should I then implement `MathContextSerializer`/`MathContextDeserializer`?

I think it would be good to support `MathContext` by default (so the user does not need to write a adapter) since it is a Java built-in class and like other classes (like `ZoneId`, which is also supported by Yasson) it is a common Java class.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lpMxn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/571,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lsz-i,yasson,1706246050,571,NA,nimo23,3045549,,,NA,2023-09-05T09:16:07Z,2023-09-05T09:16:07Z,Another question: Why do I even have to register such a (De)serializer to be able to (de)serialize this class? Normally Json-B can (de)serialize a common class like this (consisting only of a `String` and an `Enum` property) by default.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5lsz-i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/573,https://api.github.com/repos/eclipse-ee4j/yasson/issues/573,yasson,1353910115,573,Failing deserialize JsonObjet : null,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2022-08-29T08:34:25Z,2022-08-31T12:54:32Z,"**Describe the bug**
Yasson 3 faild to deserilize JsonObject when null

**To Reproduce**
Create a simple bean with JsonObject ""info"" property.
try to deserialize { ""info"": null}

**Expected behavior**
The bean with unset ""info"" property must be deserialized.

**System information:**
OS: Windows 10 version 10.0 running on amd64
Java Version: OpenJDK 64-Bit Server VM 11.0.15+10-LTS
Yasson: 3.0.1

**Additional context**
Works well with Yasson 2.0.4
[yasson-test-003.zip](https://github.com/eclipse-ee4j/yasson/files/9442958/yasson-test-003.zip)

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/573/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,yasson,1356974770,575,Yasson 3 fails to serialize a null Optional,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,CLOSED,2022-08-31T08:16:35Z,2022-09-13T09:02:30Z,"**Describe the bug**
Yasson 3 is unable to serialize a null Optional, leading to a NullPointerException.

```
jakarta.json.bind.JsonbException: Unable to serialize property 'optionalString' from io.quarkus.it.mongodb.pojo.Pojo
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:43)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.serialize(ObjectSerializer.java:38)
	at org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:197)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:133)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:159)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:121)
	at io.quarkus.it.mongodb.OptionalTest.optional_null(OptionalTest.java:18)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:55)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:223)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:175)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:139)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
Caused by: java.lang.NullPointerException
	at org.eclipse.yasson.internal.serializer.OptionalSerializer.serialize(OptionalSerializer.java:36)
	at org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:43)
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 82 more
```

It worked with Yasson 1.0.11 but not with Yasson 3.0.1

**To Reproduce**
```
        Jsonb jsonb = JsonbBuilder.create();
        Pojo pojo = new Pojo();
        pojo.description = ""description"";
        String pojoJson = jsonb.toJson(pojo);
        System.out.println(pojoJson);
        Pojo deserialized = jsonb.fromJson(pojoJson, Pojo.class);
```

**Expected behavior**
Serializing a null Optional works as expected.

**System information:**
 - OS: Linux
 - Java Version: 11
 - Yasson Version: 3.0.1
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/575/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfQUW,yasson,1232930070,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-31T13:20:11Z,2022-08-31T13:20:11Z,"Hi @loicmathieu, 
Thank you for reaching out. It will be fixed in the new release.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfQUW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfVve,yasson,1232952286,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-08-31T13:39:04Z,2022-08-31T13:39:04Z,"Hi @Verdent 
Thanks !
As soon as you have a fix that I can test please contact me, we have a strange issue in one of Quarkus integration test that I think is linked to this issue so we want to be able to test it asap.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfVve/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfWxf,yasson,1232956511,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-31T13:42:36Z,2022-08-31T13:42:36Z,"Fix is presented currently in PR [#576](https://github.com/eclipse-ee4j/yasson/pull/576). It should be merged fairly quickly. When that is done you could possibly build new Yasson out of the main branch to test it, or wait for snapshot to be automatically build. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfWxf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jfaxr,yasson,1232972907,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-08-31T13:55:29Z,2022-08-31T13:55:29Z,"Great !
I'll use the snapshot when the PAR will be merged and a new one is published","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jfaxr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfnCf,yasson,1233023135,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-31T14:35:32Z,2022-08-31T14:35:32Z,@loicmathieu New snapshot is live now :-),"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfnCf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jftco,yasson,1233049384,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-08-31T14:56:11Z,2022-08-31T14:56:11Z,"@Verdent thanks a lot !
Are they in the Maven central or the sonatype OSS snapshot repo ? I cannot find them and I look at the documentation the snaphost repo is not documented.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jftco/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfueO,yasson,1233053582,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-08-31T14:59:23Z,2022-08-31T14:59:23Z,"Our snapshot repo is in jakarta OSS sonatype :-)
```xml   
<repositories>
    <repository>
        <id>jakarta-snapshots</id>
        <url>https://jakarta.oss.sonatype.org/content/repositories/staging/</url>
    </repository>
</repositories>
``` ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5JfueO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Ji1Uz,yasson,1233868083,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-09-01T07:33:53Z,2022-09-01T07:33:53Z,Thanks @Verdent I'll have a look tomorrow and let you know how it goes.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Ji1Uz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jn2mM,yasson,1235184012,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-09-02T07:50:41Z,2022-09-02T07:50:41Z,Thanks @Verdent it solves the reported issue.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jn2mM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jn4O-,yasson,1235190718,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-09-02T07:58:43Z,2022-09-02T07:58:43Z,@loicmathieu Thank you for reporting back. I am glad to hear that! I will do a new release some time next week.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Jn4O-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5KNpTP,yasson,1245091023,575,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2022-09-13T08:43:55Z,2022-09-13T08:43:55Z,@loicmathieu Yasson 3.0.2 is out.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5KNpTP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/575,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5KNubR,yasson,1245112017,575,NA,loicmathieu,1819009,Loïc Mathieu,loikeseke@gmail.com,NA,2022-09-13T09:02:30Z,2022-09-13T09:02:30Z,@Verdent thanks! We'll upgrade it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5KNubR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/579,https://api.github.com/repos/eclipse-ee4j/yasson/issues/579,yasson,1449559863,579,Generic bound not found in deserialization,amoscatelli,16684470,,,OPEN,2022-11-15T10:40:50Z,2023-08-24T09:37:35Z,"**Describe the bug**

Defined this endpoint :

```
public abstract class AbstractIdentifiableResource<T extends Identifiable, D extends IdentifiableDTO, C extends IdentifiableController<T>> extends AbstractEndpoint<T, D, C> implements IdentifiableEndpoint<T, D> {

    @POST
    @Path(""find"")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public FindResultDTO<D> find(FindRequestDTO<D> request) {
        return this.find(request.getCriterias(), request.getOrders(), request.getQuantity(), request.getOffset());
    }

}

```

And this parameter

```
public class FindRequestDTO<T extends IdentifiableDTO> extends RequestDTO {
    
    private Collection<FindCriteriaDTO<T>> criterias;

    public Collection<FindCriteriaDTO<T>> getCriterias() {
        return criterias;
    }

    public void setCriterias(Collection<FindCriteriaDTO<T>> criterias) {
        this.criterias = criterias;
    }

}
```

I get this error during deserialization :

```
11:18:01,241 ERROR [org.jboss.resteasy.core.providerfactory.DefaultExceptionMapper] (default task-1) RESTEASY002375: Error processing request POST /optoplus-services-web/api/credentialgrouping/find - org.visiontech.commons.authentication.impl.resource.CredentialGroupingResource.find: jakarta.ws.rs.ProcessingException: RESTEASY008200: JSON Binding deserialization error: jakarta.json.bind.JsonbException: Internal error: Generic bound not found for type T declared in java.util.Collection<org.visiontech.commons.persistence.api.dto.FindCriteriaDTO<T>>.
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.1.Final//org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:80)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.AbstractReaderInterceptorContext.readFrom(AbstractReaderInterceptorContext.java:101)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.ServerReaderInterceptorContext.readFrom(ServerReaderInterceptorContext.java:63)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.AbstractReaderInterceptorContext.proceed(AbstractReaderInterceptorContext.java:80)
	at org.jboss.resteasy.resteasy-crypto@6.2.1.Final//org.jboss.resteasy.security.doseta.DigitalVerificationInterceptor.aroundReadFrom(DigitalVerificationInterceptor.java:35)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.AbstractReaderInterceptorContext.proceed(AbstractReaderInterceptorContext.java:88)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.plugins.interceptors.GZIPDecodingInterceptor.aroundReadFrom(GZIPDecodingInterceptor.java:111)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.AbstractReaderInterceptorContext.proceed(AbstractReaderInterceptorContext.java:88)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.MessageBodyParameterInjector.inject(MessageBodyParameterInjector.java:213)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.MethodInjectorImpl.injectArguments(MethodInjectorImpl.java:95)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:128)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:408)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:69)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:249)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:60)
	at org.jboss.resteasy.resteasy-core@6.2.1.Final//org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:55)
	at jakarta.servlet.api@6.0.0//jakarta.servlet.http.HttpServlet.service(HttpServlet.java:614)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
	at io.undertow.websocket@2.3.0.Final//io.undertow.websockets.jsr.JsrWebSocketFilter.doFilter(JsrWebSocketFilter.java:172)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.smallrye.opentracing-contrib//io.smallrye.opentracing.contrib.jaxrs2.server.SpanFinishingFilter.doFilter(SpanFinishingFilter.java:69)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at jakarta.servlet.api@6.0.0//jakarta.servlet.http.HttpFilter.doFilter(HttpFilter.java:126)
	at deployment.optoplus.ear//org.visiontech.commons.persistence.impl.AbstractTransactionFilter.doFilter(AbstractTransactionFilter.java:30)
	at jakarta.servlet.api@6.0.0//jakarta.servlet.http.HttpFilter.doFilter(HttpFilter.java:97)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at deployment.optoplus.ear//org.visiontech.commons.security.impl.http.AbstractRestrictionFilter.doFilter(AbstractRestrictionFilter.java:68)
	at jakarta.servlet.api@6.0.0//jakarta.servlet.http.HttpFilter.doFilter(HttpFilter.java:97)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at deployment.optoplus.ear//org.visiontech.commons.security.impl.http.AbstractOptionsFilter.doFilter(AbstractOptionsFilter.java:18)
	at jakarta.servlet.api@6.0.0//jakarta.servlet.http.HttpFilter.doFilter(HttpFilter.java:97)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at org.wildfly.security.elytron-web.undertow-server@3.0.0.Final//org.wildfly.elytron.web.undertow.server.ElytronRunAsHandler.lambda$handleRequest$1(ElytronRunAsHandler.java:68)
	at org.wildfly.security.elytron-base@2.0.0.Final//org.wildfly.security.auth.server.FlexibleIdentityAssociation.runAsFunctionEx(FlexibleIdentityAssociation.java:103)
	at org.wildfly.security.elytron-base@2.0.0.Final//org.wildfly.security.auth.server.Scoped.runAsFunctionEx(Scoped.java:161)
	at org.wildfly.security.elytron-base@2.0.0.Final//org.wildfly.security.auth.server.Scoped.runAs(Scoped.java:73)
	at org.wildfly.security.elytron-web.undertow-server@3.0.0.Final//org.wildfly.elytron.web.undertow.server.ElytronRunAsHandler.handleRequest(ElytronRunAsHandler.java:67)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.core@2.3.0.Final//io.undertow.server.handlers.DisableCacheHandler.handleRequest(DisableCacheHandler.java:33)
	at io.undertow.core@2.3.0.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.core@2.3.0.Final//io.undertow.security.handlers.AuthenticationConstraintHandler.handleRequest(AuthenticationConstraintHandler.java:53)
	at io.undertow.core@2.3.0.Final//io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler.handleRequest(ServletSecurityConstraintHandler.java:59)
	at io.undertow.core@2.3.0.Final//io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at org.wildfly.security.elytron-web.undertow-server-servlet@3.0.0.Final//org.wildfly.elytron.web.undertow.server.servlet.CleanUpHandler.handleRequest(CleanUpHandler.java:38)
	at io.undertow.core@2.3.0.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
	at io.undertow.core@2.3.0.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52)
	at io.undertow.core@2.3.0.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:275)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:134)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:131)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1435)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1435)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1435)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1435)
	at org.wildfly.extension.undertow@27.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1435)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:255)
	at io.undertow.servlet@2.3.0.Final//io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:100)
	at io.undertow.core@2.3.0.Final//io.undertow.server.Connectors.executeRootHandler(Connectors.java:391)
	at io.undertow.core@2.3.0.Final//io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:859)
	at org.jboss.threads@2.4.0.Final//org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
	at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1990)
	at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
	at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
	at org.jboss.xnio@3.8.8.Final//org.xnio.XnioWorker$WorkerThreadFactory$1$1.run(XnioWorker.java:1282)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: jakarta.json.bind.JsonbException: Internal error: Generic bound not found for type T declared in java.util.Collection<org.visiontech.commons.persistence.api.dto.FindCriteriaDTO<T>>.
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:142)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:69)
	at deployment.optoplus.ear//org.visiontech.commons.service.impl.JsonbPolymorphicDeserializer.deserialize(JsonbPolymorphicDeserializer.java:104)
	at deployment.optoplus.ear//org.visiontech.commons.service.impl.JsonbPolymorphicDeserializer.deserialize(JsonbPolymorphicDeserializer.java:33)
	at deployment.optoplus.ear//org.visiontech.commons.service.impl.JsonbPolymorphicDeserializer$Proxy$_$$_WeldClientProxy.deserialize(Unknown Source)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:69)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:26)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:95)
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.1.Final//org.jboss.resteasy.plugins.providers.jsonb.ManagedJsonb.fromJson(ManagedJsonb.java:73)
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.1.Final//org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:72)
	... 95 more
Caused by: java.lang.IllegalStateException: Generic bound not found for type T declared in java.util.Collection<org.visiontech.commons.persistence.api.dto.FindCriteriaDTO<T>>.
	at org.eclipse.yasson//org.eclipse.yasson.internal.ReflectionUtils.resolveTypeArguments(ReflectionUtils.java:248)
	at org.eclipse.yasson//org.eclipse.yasson.internal.ReflectionUtils.resolveType(ReflectionUtils.java:141)
	at org.eclipse.yasson//org.eclipse.yasson.internal.ReflectionUtils.resolveType(ReflectionUtils.java:126)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createCollectionDeserializer(DeserializationModelCreator.java:271)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:183)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:123)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:137)
	... 109 more
```

**To Reproduce**
I pasted some example code above

**Expected behavior**
I believe it should be able to detect IdentifiableDTO as the bound.

**System information:**
 - OS: Windows
 - Java Version: 11
 - Yasson Version: 3.0.1

**Additional context**
Migrating to Wildfly 27
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/579/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/579,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5kz_ae,yasson,1691350686,579,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2023-08-24T09:37:35Z,2023-08-24T09:37:35Z,up.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5kz_ae/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/581,https://api.github.com/repos/eclipse-ee4j/yasson/issues/581,yasson,1461392480,581,Can't use Yasson in a Java EE 7 environment because java:comp/BeanManager is not jakarta.enterprise.inject.spi.BeanManager,e6c31d,90863725,,,OPEN,2022-11-23T09:40:01Z,2022-11-23T09:40:01Z,"**Describe the bug**
I'm trying to use JSON-B 2 (from Jakarta EE 9) and Yasson 2 in an application that will be deployed on IBM WebSphere Application Server 9, which is a Java EE 7 environment. I know this is unusual, but it mostly works except for the below issue.

Yasson tries to use JNDI to lookup `java:comp/BeanManager` and use it if it exists. The first problem is that `jakarta.enterprise.inject.spi.BeanManager` is not in the classpath, so we get a NoClassDefFoundError:
```
Caused by: java.lang.NoClassDefFoundError: jakarta/enterprise/inject/spi/BeanManager
	at org.eclipse.yasson.internal.components.BeanManagerInstanceCreator.<init>(BeanManagerInstanceCreator.java:49)
	at org.eclipse.yasson.internal.components.JsonbComponentInstanceCreatorFactory.getComponentInstanceCreator(JsonbComponentInstanceCreatorFactory.java:69)
	at org.eclipse.yasson.internal.JsonbContext.initComponentInstanceCreator(JsonbContext.java:148)
	at org.eclipse.yasson.internal.JsonbContext.<init>(JsonbContext.java:64)
	at org.eclipse.yasson.internal.JsonBinding.<init>(JsonBinding.java:49)
	at org.eclipse.yasson.internal.JsonBindingBuilder.build(JsonBindingBuilder.java:61)
	at jakarta.json.bind.JsonbBuilder.create(JsonbBuilder.java:86)
	at com.example.TestBean.<init>(TestBean.java:11)
```

After adding `jakarta.enterprise:jakarta.enterprise.cdi-api` jars, we get a more understandable error:
```
Caused by: jakarta.json.bind.JsonbException: Internal error: beanManager instance should be of type 'interface jakarta.enterprise.inject.spi.BeanManager'
	at org.eclipse.yasson.internal.components.BeanManagerInstanceCreator.<init>(BeanManagerInstanceCreator.java:50)
	at org.eclipse.yasson.internal.components.JsonbComponentInstanceCreatorFactory.getComponentInstanceCreator(JsonbComponentInstanceCreatorFactory.java:69)
	at org.eclipse.yasson.internal.JsonbContext.initComponentInstanceCreator(JsonbContext.java:148)
	at org.eclipse.yasson.internal.JsonbContext.<init>(JsonbContext.java:64)
	at org.eclipse.yasson.internal.JsonBinding.<init>(JsonBinding.java:49)
	at org.eclipse.yasson.internal.JsonBindingBuilder.build(JsonBindingBuilder.java:61)
	at jakarta.json.bind.JsonbBuilder.create(JsonbBuilder.java:86)
	at com.example.TestBean.<init>(TestBean.java:11)
```

**To Reproduce**
Here's a simple maven project that reproduces the issue: [test-servlet.zip](https://github.com/eclipse-ee4j/yasson/files/10073274/test-servlet.zip)

**Expected behavior**

To fix this, I suggest changing [`JsonbComponentInstanceCreatorFactory`](https://github.com/eclipse-ee4j/yasson/blob/6e7ec79c54218a05342cbb65f5b150cc5892b7c2/src/main/java/org/eclipse/yasson/internal/components/JsonbComponentInstanceCreatorFactory.java#L58) as follows:
1. If `jakarta.enterprise.inject.spi.BeanManager` is **not in** the classpath, then it should skip trying to get a BeanManager from CDI or JNDI and jump directly to using `DefaultConstructorCreator`.
2. If `jakarta.enterprise.inject.spi.BeanManager` is **in** the classpath but `getJndiBeanManager` somehow returned a `javax.enterprise.inject.spi.BeanManager` instead (note the javax), then just ignore it and use `DefaultConstructorCreator`.


**System information:**
 - OS: Linux
 - Java Version: 8
 - Yasson Version: 2.0.4

**Additional context**
I was also able to reproduce this error using [Open Liberty server](https://github.com/OpenLiberty/open-liberty) with the `javaee-7.0` feature enabled.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/581/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/582,https://api.github.com/repos/eclipse-ee4j/yasson/issues/582,yasson,1480085660,582,"Deceptive exception: Cannot serialize java.time.Instant, IllegalAccessException: class is not public",hontvari,208405,Hontvári Levente,,OPEN,2022-12-06T20:16:19Z,2023-07-10T09:51:00Z,"When serializing a class with an Instant field, I get an exception:
Caused by: java.lang.IllegalAccessException: class is not public: .../java.time.Instant/getField, from public Lookup
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:955)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:3882)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkField(MethodHandles.java:3832)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectFieldCommon(MethodHandles.java:4045)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectFieldNoSecurityManager(MethodHandles.java:4040)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflectField(MethodHandles.java:3504)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflectGetter(MethodHandles.java:3455)
	at org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:518)
	... 35 common frames omitted

It is not that the Instant class is not public, neither the return value or parameter type of getField, but the class containing the Instant field.

**System information:**
 - Java Version: 17.0.5
 - Yasson Version: 3.0.2
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/582/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/582,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEorZ,yasson,1628605145,582,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T09:44:01Z,2023-07-10T09:44:01Z,"Using this code:

```java
    public static void main( String[] args ) throws Exception {
        var jsonb = JsonbBuilder.create();
        var test = new Test(Instant.now());

        jsonb.toJson(test);
    }

    private static class Test {

        public final Instant testField;

        @JsonbCreator
        public Test(@JsonbProperty(""testField"") Instant testField) {
            this.testField = testField;
        }
    }
```

I got a top level exception like this:

```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Error accessing field 'testField' declared in 'class asd.Main$Test'
```

There seems to be a nested exception too, which looks similar to the message reported by the OP:

```
Caused by: java.lang.IllegalAccessException: class is not public: asd.Main$Test.testField/java.time.Instant/getField, from public Lookup
```

The top level exception is thrown by Yasson, which looks fine to me (maybe could be improved to state that the field can't be accessed because class itself is not accessible)
The nested exception message is created in java.lang.invoke.MemberName.makeAccessException, which is not controlled by Yasson","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hEorZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,yasson,1484090788,583,PropertyNamingStrategy is not considered for JsonbCreators,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,CLOSED,2022-12-08T09:00:45Z,2023-02-15T11:54:14Z,"**Describe the bug**

PropertyNamingStrategy is not considered for records

**To Reproduce**

* Create a record with camelCase fields
* Add a constructor (no parameters, no implementation) with `@JsonbCreator`.
* Create a propertyVisibilityStrategy:
```java
  static class PrivateVisibilityStrategy implements PropertyVisibilityStrategy {

    @Override
    public boolean isVisible(Field field) {
      return true;
    }

    @Override
    public boolean isVisible(Method method) {
      return false;
    }
  }
```
* Use the naming Strategy with underscores
* Put it all together
```java
        new JsonbConfig()
            .withAdapters(new AuthorIdAdapter())
            .withNullValues(Boolean.TRUE)
            .withFormatting(Boolean.TRUE)
            .withPropertyVisibilityStrategy(new PrivateVisibilityStrategy())
            .withPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE_WITH_UNDERSCORES);
```

Try to read a JSON file and see this error:

```
jakarta.json.bind.JsonbException: JsonbCreator parameter firstName is missing in json document.
```

**Expected behavior**

SHould have used first_name instead.

**System information:**

 - OS: Linux
 - Java Version: 17 semeru
 - Yasson Version: 2.0.4 and 3.0.2

**Additional context**

Example on this commit: https://github.com/bmarwell/jaxrs-test-showcase/pull/61/commits/71348e8d153300a4699ec33314bb577ec1c87228
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/583/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QAq42,yasson,1342352950,583,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2022-12-08T09:29:12Z,2022-12-08T09:29:12Z,"Looking at `ObjectDeserializer::deserialzeNext`, it seems that `getClassModel().getClassCustomization().getCreator()` did not get the underscore property names.

This is being createad in `MappingContext::createParseClassModelFunction` which has the var `ClassCustomization customization` already containing no creator customization.

That in return is created by `AnnotationIntrospector::getCreator`. The method `JsonbCreator createJsonbCreator` checks for `@JsonbProperty`, but  never considers the naming Strategy:
https://github.com/eclipse-ee4j/yasson/blob/6e7ec79c54218a05342cbb65f5b150cc5892b7c2/src/main/java/org/eclipse/yasson/internal/AnnotationIntrospector.java#L208

In this line it should have  considered the already known PropertyModel, just call `model.get(parameter.getName())` to receive the JSON name.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QAq42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QAzTR,yasson,1342387409,583,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2022-12-08T09:46:25Z,2022-12-08T09:46:25Z,"Works in Apache Johnzon. When no `@JsonbProperty` is defined on a `@JsonbCreator`, the naming strategy is being considered.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QAzTR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QBUXl,yasson,1342522853,583,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2022-12-08T10:52:00Z,2022-12-08T10:52:00Z,"Example project with builds of:

* johnzon
* johnzon-snapshot
* yasson2
* yasson3

... is here: https://github.com/bmarwell/jsonb-creator-property-naming

Romain fixed it in johnzen literally minutes after talking to him 😆 => https://github.com/apache/johnzon/commit/b25243b23f36f257e47d8fce9b914bb5c882889c

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5QBUXl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5R3ryw,yasson,1373551792,583,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2023-01-06T12:10:19Z,2023-01-06T12:10:19Z,"Hi @bmarwell , I am finally having a little bit of time to take a look into this :-) Thank you for bringing this up and making fix for it as well. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5R3ryw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/583,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VTydb,yasson,1431250779,583,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2023-02-15T11:54:14Z,2023-02-15T11:54:14Z,Fix merged,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VTydb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/587,https://api.github.com/repos/eclipse-ee4j/yasson/issues/587,yasson,1517302738,587,Yasson 3.0.1 and 3.0.2 don't use custom Deserializer for a list property (works in 2.0.4),ftrossbach,3863258,,,CLOSED,2023-01-03T12:08:28Z,2023-08-10T15:34:11Z,"**Describe the bug**
I have a container object that contains a list of containee objects and I want to use a custom serializer/deserializer to handle the elements of that list. I annotated the containee as such:

```
@JsonbTypeDeserializer(ContaineeDeserializer.class)
@JsonbTypeSerializer(ContaineeSerializer.class)
public class Containee {
```

. When I serialize and deserialize a container object, deserialization fails and the stacktrace indicates that instead of using my custom deserializer, it uses the default (which then fails because there is no public no-args constructor). This works fine in Yasson 2.0.4.

```
jakarta.json.bind.JsonbException: Unable to deserialize property 'containees' because of: Can't create instance

	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:80)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:31)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:57)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at org.example.model.SerializationTest.testSerialization(SerializationTest.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: jakarta.json.bind.JsonbException: Can't create instance
	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:276)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:55)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:36)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:22)
	at org.eclipse.yasson.internal.deserializer.CollectionDeserializer.deserialize(CollectionDeserializer.java:49)
	at org.eclipse.yasson.internal.deserializer.CollectionInstanceCreator.deserialize(CollectionInstanceCreator.java:61)
	at org.eclipse.yasson.internal.deserializer.CollectionInstanceCreator.deserialize(CollectionInstanceCreator.java:37)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:36)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:22)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:78)
	... 82 more
Caused by: java.lang.IllegalAccessException: class org.eclipse.yasson.internal.ReflectionUtils cannot access a member of class org.example.model.Containee with modifiers ""private""
	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392)
	at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:674)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:489)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.eclipse.yasson.internal.ReflectionUtils.createNoArgConstructorInstance(ReflectionUtils.java:274)
	... 100 more
```

**To Reproduce**
I've created a sample project at https://github.com/ftrossbach/yasson-bug-evaluation. There is a super simple unit test: `org.example.model.SerializationTest`

If you use yasson version 3.0.1 or 3.0.2, it fails. If you change the pom to use 2.0.4, it works. I can also see in the debugger that the custom deserializer is not called in 3.0.x but it is called in 2.0.4

**Expected behavior**
Yasson should use the custom deserializer

**System information:**
 - OS: Linux
 - Java Version: verified on 11 and 17
 - Yasson Version: 3.0.2


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/587/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/587,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5RpNWp,yasson,1369757097,587,NA,ftrossbach,3863258,,,NA,2023-01-03T13:17:25Z,2023-01-03T13:17:25Z,"Addendum:
it works in 3.0.x when I manually add the Deserializer to the JsonbConfig when creating the Jsonb object, but I think @JsonbTypeDeserializer should work just fine on its own. Is that a misconception?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5RpNWp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/587,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5jvwBQ,yasson,1673461840,587,NA,javierpedrido,23361078,,,NA,2023-08-10T15:34:09Z,2023-08-10T15:34:09Z,I think that this bug fix should also be applied to map values and arrays.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5jvwBQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,yasson,1579463715,589,Deserialization of a nested inherited type with an unknown json object fails with a NullPointerException,DXTR66,5831682,Matthias,,CLOSED,2023-02-10T10:52:01Z,2023-03-31T08:40:38Z,"**Describe the bug**
Deserialization of an inherited type structure fails with a NullPointerException if the structure itself is nested and the structure contains an unknown object which should be skipped.

**To Reproduce**
Very basic model:
```
// base class
@JsonbTypeInfo(key = ""_type"", value = @JsonbSubtype(type = Derivation.class, alias = ""derivationA""))
public class Base {
    private Long id;
}

// derivation of the base class
public class Derivation extends Base {}

// some arbitrary 'outer' root element
public class Outer {
    private Base inner;
}
```

JSON representation containing an unknown object in the nested object.
```
{
  ""inner"" : {
      ""id"" : 123,
      ""_type"" : ""derivationA"",
      ""unmapped"" : {}
    }
}
```

If you try to deserialize the given JSON in the given model with `JsonbBuilder.create().fromJson(json, Outer.class);` this exception is thrown
```
jakarta.json.bind.JsonbException: Internal error: null
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:142)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at x.a.b.bla.Bla.bla(Bla.java:52)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:95)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:91)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:60)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: java.lang.UnsupportedOperationException
	at jakarta.json.stream.JsonParser.skipObject(JsonParser.java:502)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:86)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:31)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:57)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.InheritanceInstanceCreator.deserialize(InheritanceInstanceCreator.java:72)
	at org.eclipse.yasson.internal.deserializer.InheritanceInstanceCreator.deserialize(InheritanceInstanceCreator.java:31)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:36)
	at org.eclipse.yasson.internal.deserializer.ContextSwitcher.deserialize(ContextSwitcher.java:22)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:78)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:31)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:57)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	... 74 more

```

**Expected behavior**
The unmapped object should be skipped, no error should occur.

**System information:**
 - OS: Windows
 - Java Version: 17
 - Yasson Version: 3.0.1
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/589/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgAnS,yasson,1434454482,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-17T10:41:08Z,2023-02-17T10:41:08Z,Let me take a look...,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgAnS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgWH4,yasson,1434542584,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-17T12:01:31Z,2023-02-17T12:01:31Z,"The first observation that struck me is that Yasson version 1.1.1 is nowhere to be found in public Maven repositories... If we look at https://mvnrepository.com/artifact/org.eclipse/yasson , we can versions 1.0.1 (Nov 2017), 1.0.10 (Nov 2021) and 1.0.11 (Jan 2022) there. Perhaps, you are using one of those?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgWH4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgXKC,yasson,1434546818,589,NA,DXTR66,5831682,Matthias,,NA,2023-02-17T12:05:00Z,2023-02-17T12:05:00Z,"Big sry, my bad - it is of course version **3.0.1** (which is part of Wildfly 27). I updated my opening post.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VgXKC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vg8LT,yasson,1434698451,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-17T14:06:45Z,2023-02-17T14:06:45Z,"Oh, ok, I see. After some experiments, I managed to reproduce the error on 3.x code branch. It seems as the root cause of this is use of annotations (to specify the exact mapping of JSON-to-Java objects); the use of annotations cause Yasson to rely on the ``JsonStructureToParserAdapter`` internal JSON parser that simply do not have the ``skipObject()`` (skip this nested object and advance to the next property of the parent / enclosing object) and ``skipArray()`` (the same, but for arrays) methods implemented! As simple as that. Why it does not implement them, I am not exactly sure. Probably an omission.

Let me try to implement them to see whether this will resolve the issue. If it does, then obviously you would have to wait for the next Yasson version - or even wait until Wildfly developers or maintainers choose to adopt it. OR grab it manually and add to Wildfly server libraries. The only workaround would be to set the ``failOnUnknownProperty`` property to ``true`` i.e. causing JSON parser to trip and abort on an unmapped property such as one in your example. But if you do not have full control over the inbound JSON contents, then this may not be a good idea....","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vg8LT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vh1n9,yasson,1434933757,589,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2023-02-17T17:04:19Z,2023-02-17T17:04:19Z,"Pretty sure this is the same issue.

The problem is that JsonStructureToParserAdapter peek object without skipping to the next property.
Could you confirm that it is fixed with the patch?

Thank you,

D.

[yasson-test-589.zip](https://github.com/eclipse-ee4j/yasson/files/10769075/yasson-test-589.zip)

P.S. the version is 3.0.2","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vh1n9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VjT0Q,yasson,1435319568,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-17T21:56:11Z,2023-02-17T21:56:11Z,"@redmitry , will look into this on Monday. Seems similar indeed (I have noticed that JsonStructureToParserAdapter's ``next()`` logic is a bit shaky...)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VjT0Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VoWIL,yasson,1436639755,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-20T09:42:43Z,2023-02-20T09:42:43Z,"Well, after studying and debuggin the Yasson code over the weekend, I must say the last issue is not an easy one to resolve... Apparently, ``JsonStructureToParserAdapter`` works well with non-annotated (non-polymorphic) POJOs, and is able to deserialize input JSON messages / strings without issues, relying on the concept of nested object iterators - for each inner object (property) to map and deserialize, an iterator is added to the context chain. However, then type customisations (annotations) join the game, handling each subtype annotation creates its own, independent ""deserialization context"", with its own set of iterators processing key by key, one at a time. This works fairly well, except that ""parent"" context and parent iterators know nothing about this! So once we get back to the parent POJO - the ""Pets"" in @redmitry test case - parent and nested deserialization contexts (and iterators) are out of sync and things get broken.

_(thinking about a workaround for this that would not break other things - few things already tried did break other tests...)_","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5VoWIL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/589,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vojvs,yasson,1436695532,589,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2023-02-20T10:19:57Z,2023-02-20T10:19:57Z,"@redmitry , thank you for bringing up a rather peculiar deserialization issue, and putting together a very useful test case! That issue is resolved now by amending the original code patch - it turns out, the root cause of the ORIGINAL bug described here was two-fold, and now both places are hopefully patched, and JSON deserialization is no longer ""leaky"".","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5Vojvs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/591,https://api.github.com/repos/eclipse-ee4j/yasson/issues/591,yasson,1592065852,591,JsonBinding#fromJson not closing InputStream after successfull completion,Scharage,52360455,,,CLOSED,2023-02-20T15:27:15Z,2023-08-21T12:10:18Z,"**Describe the bug**
The problem is the following:
I want to use the fromJson method with a FileInputStream and noticed that the Stream is not closed as promised through the api documentation: 

```
Description copied from interface:
jakarta.json.bind.Jsonb Reads in a JSON data from the specified InputStream and return the resulting content tree.
Specified by:
fromJson in interface Jsonb
Params:
stream – The stream is read as a JSON data. **Upon a successful completion, the stream will be closed by this method.**
clazz – Type of the content tree's root object.
Type parameters:
<T> – Type of the content tree's root object.
Returns:
the newly created root object of the java content tree
Throws:
JsonbException – If any unexpected error(s) occur(s) during deserialization.
NullPointerException – If any of the parameters is null.

```

**To Reproduce**
To reproduce the behaviour i wrote a code snippet. To make it functional replace PATHTOJSONFILE with an actual json file which holds {""key"":""Test""} as a content for example.

```
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class Test {

	public static void main(String[] args) throws FileNotFoundException {
		Jsonb jsonb = JsonbBuilder.create();
		InputStream testStream = new FileInputStream(new File(""PATHTOJSONFILE""));
		jsonb.fromJson(testStream,TestEntity.class);

		try{
			testStream.read();
			throw new RuntimeException(""Failed, because stream was not closed."");
		}catch (IOException e) {
			//This is wanted as stream should be closed.
		}

	}

	public static class TestEntity{
		private String key;

		public TestEntity() {
		}
	}
}
```

**Expected behavior**
I expect the method to close the inputstream after completion, just as documented in the documentation. Or the documentation to be updated describing that its not closed, with a reason.

**System information:**
 - OS: Windows
 - Java Version: 11
 - Yasson Version: Noticed first 2.0.1 , tested in 3.0.2 again

**Additional context**
Add any other context about the problem here.
[test.txt](https://github.com/eclipse-ee4j/yasson/files/10785692/test.txt)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/591/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/591,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDfoG,yasson,1628305926,591,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T06:14:36Z,2023-07-10T06:14:36Z,This was fixed by #586,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDfoG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/591,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5kgYpe,yasson,1686211166,591,NA,Scharage,52360455,,,NA,2023-08-21T12:10:18Z,2023-08-21T12:10:18Z,"I tested it again and it is indeed fixed in the 3.0.3 version. 
Thank you, this Ticket will be closed now.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5kgYpe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/592,https://api.github.com/repos/eclipse-ee4j/yasson/issues/592,yasson,1592245068,592,List deserialization fail with a subtypes configuration.,remimarechal,859908,Rémi Maréchal,,OPEN,2023-02-20T17:38:02Z,2023-02-24T09:25:48Z,"PR #590 fixes this issue

I get the next exception :
Unable to deserialize property 'elements' because of: Unexpected state: KEY_NAME

I don't know how to describe exactly the issue, but i provide some tests cases with failure and successes.

![image](https://user-images.githubusercontent.com/859908/220170938-6108a667-0a34-44ae-963a-1fa319819795.png)

[YassonBugTest.txt](https://github.com/eclipse-ee4j/yasson/files/10786738/YassonBugTest.txt)


```
package yasson.testcase;

import jakarta.json.Json;
import jakarta.json.JsonStructure;
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.annotation.JsonbSubtype;
import jakarta.json.bind.annotation.JsonbTypeInfo;
import org.eclipse.yasson.YassonJsonb;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.StringReader;
import java.util.List;

public class YassonBugTest {

    YassonJsonb jsonb;

    @BeforeEach
    void beforeEach() {
        jsonb = (YassonJsonb) JsonbBuilder.create();
    }

    @Test
    void test00_work_with_MyCanvas_type_and_list() {
        // We deserialize a List
        // But we give MyCanvas as type
        System.out.println(jsonb.toJson(jsonb.fromJson(""""""            
            {
                ""@type"": ""canvas"",
                ""elements"": [
                    {
                       ""@type"": ""note""
                    }
                ]
            }
            """""", MyCanvas.class)));
    }


    @Test
    void test01_work_with_MyObject_without_list() {
        // We don't deserialize a List
        System.out.println(jsonb.toJson(jsonb.fromJson(""""""            
            {
                ""@type"": ""canvas"",
                ""element"": {
                   ""@type"": ""note""
                }
            }
            """""", MyObject.class)));
    }

    @Test
    void test02_doesnt_work_with_MyObject_type_with_list() {
        // We deserialize a List
        System.out.println(jsonb.toJson(jsonb.fromJson(""""""            
            {
                ""@type"": ""canvas"",
                ""elements"": [
                    {
                       ""@type"": ""note""
                    }
                ]
            }
            """""", MyObject.class)));
    }


    @Test
    void test03_doesnt_work_with_structure_and_MyCanvas_type_and_list() {
        // We deserialize a List
        JsonStructure structure = Json.createReader(new StringReader(""""""            
            {
                ""@type"": ""canvas"",
                ""elements"": [
                    {
                       ""@type"": ""note""
                    }
                ]
            }
            """""")).read();

        System.out.println(jsonb.toJson(jsonb.fromJsonStructure(structure, MyCanvas.class)));
    }


    @Test
    void test04_work_with_structure_and_MyCanvas_type_without_list() {
        // We don't deserialize a List
        JsonStructure structure = Json.createReader(new StringReader(""""""            
            {
                ""@type"": ""canvas"",
                ""element"": {
                   ""@type"": ""note""
                }
            }
            """""")).read();

        System.out.println(jsonb.toJson(jsonb.fromJsonStructure(structure, MyCanvas.class)));
    }


    @JsonbTypeInfo({
        @JsonbSubtype(alias = ""canvas"", type = MyCanvas.class)})
    public static class MyObject {

    }

    public static class MyCanvas extends MyObject {

        public List<MyElement> elements;

        public MyElement element;
    }

    @JsonbTypeInfo({
        @JsonbSubtype(alias = ""element"", type = MyElement.class),
        @JsonbSubtype(alias = ""note"", type = MyNote.class)})
    public static class MyElement  {

        public Double x;
        public Double y;

    }

    public static class MyNote extends MyElement {

    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/592/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/594,https://api.github.com/repos/eclipse-ee4j/yasson/issues/594,yasson,1604809236,594,UserDefinedDeserializer cycle. please uncomment.,redmitry,6804872,Dmitry Repchevsky,,OPEN,2023-03-01T11:42:32Z,2023-03-01T11:42:32Z,"Hello.
For the custom user JsonbDeserializer(s) it would be great to fix cycle checking:
[UserDefinedDeserializer.java](https://github.com/eclipse-ee4j/yasson/blob/a5b6943db1cf24e6c34687899c487750dd3fa937/src/main/java/org/eclipse/yasson/internal/deserializer/UserDefinedDeserializer.java#L33).
The code below fails, (`DefaultEntity implements MyEntityInterface`) and we can't specify concrete type.
```java
    @Override
    public MyEntityInterface deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
        final JsonValue value = parser.getValue();
        if (JsonValue.ValueType.OBJECT == value.getValueType()) {
            final JsonObject obj = value.asJsonObject();
            final JsonValue obj_type = obj.get(""type"");
            if (obj_type == null) {
                return ctx.deserialize(DefaultEntity.class, 
                        Json.createParserFactory(Collections.EMPTY_MAP)
                                .createParser(obj));
            }
        ...
```
Currently the only solution is parse the JsonValue again:
```java
return jsonb.fromJson(value.toString(), DefaultEntity.class);
```
Cheers,

D.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/594/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/595,https://api.github.com/repos/eclipse-ee4j/yasson/issues/595,yasson,1605079632,595,JsonStructureToParserAdapter must implement skipObject() & skipArray() methods,redmitry,6804872,Dmitry Repchevsky,,CLOSED,2023-03-01T14:27:52Z,2023-03-01T14:31:51Z,"**Describe the bug**
Yasson fails on deserialization when undeclared OBJECT or ARRAY property found in the polymorthic type.

Best,

D.

**To Reproduce**
1. Create two polymorthic types (""Cat"" & ""Dog"") that implements ""Pet""
2. in the cat.json add ""undeclared"" property of type Object.
3. get the exception

**Expected behavior**
[yasson-test-595.zip](https://github.com/eclipse-ee4j/yasson/files/10861966/yasson-test-595.zip)

Cat is properly deserialized

**System information:**
 - Windows
 - Java 11
 - Yasson Version: 3.0..2

**Additional context**
The call that fails with ""UnsupportedOperationException"":
[ObjectDeserializer.java](https://github.com/eclipse-ee4j/yasson/blob/719cd4176de0d022c138c134bf4c22d3ec8ac116/src/main/java/org/eclipse/yasson/internal/deserializer/ObjectDeserializer.java#L86)

Please find an attached test.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/595/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/596,https://api.github.com/repos/eclipse-ee4j/yasson/issues/596,yasson,1651412528,596,SerializationContextImpl marshall fails if one attribute in record is Enum,bojanstok,15427861,Bojan Stok,,OPEN,2023-04-03T06:18:16Z,2023-04-05T07:49:42Z,"SerializationContextImpl marshall fails if one attribute in record is Enum.

Record ColoredPoint has two attributes:  Point p and Enum Color c.  Serialization to json fails ""error accessing getter 'p' declared""
Example:

public record Point(int x, int y) {}
enum Color { BLACK, RED, GREEN, BLUE};
record ColoredPoint(Point p, Color c) {};
record Rectangle(ColoredPoint upperLeft, ColoredPoint  lowerRight) {};


Works:
    System.out.println(""Point: "" + p1);
    jsonStr = json.toJson(p1);
    System.out.println(jsonStr);
    p1 = json.fromJson(jsonStr, Point.class);
    System.out.println(""Point2: "" + p1);

Not works:
    ColoredPoint cp1 = new ColoredPoint(p1, Color.BLUE);
    System.out.println(""ColoredPoint: "" + cp1);
    jsonStr = json.toJson(cp1);
    System.out.println(jsonStr);
    cp1 = json.fromJson(jsonStr, ColoredPoint.class);
    System.out.println(""Point2: "" + cp1);

Exception:
apr. 03, 2023 8:04:14 DOP. org.eclipse.yasson.internal.SerializationContextImpl marshall
SEVERE: Generating incomplete JSON
Exception in thread ""main"" jakarta.json.bind.JsonbException: Error accessing getter 'p' declared in 'class si.izum.json.ColoredPoint'
	at org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:500)
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:157)
	at org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1761)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:104)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:77)
	at org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChain(SerializationModelCreator.java:93)
	at org.eclipse.yasson.internal.SerializationContextImpl.getRootSerializer(SerializationContextImpl.java:208)
	at org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:196)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:133)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:159)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:121)
	at si.izum.json.DemoJsonB.main(DemoJsonB.java:33)


Also not works:
    Rectangle r = new Rectangle(new ColoredPoint(p1, Color.RED), new ColoredPoint(p2, Color.GREEN));
    System.out.println(""Rectangle: "" + r);
    jsonStr = json.toJson(r);
    System.out.println(jsonStr);
    r = json.fromJson(jsonStr, Rectangle.class);
    System.out.println(""Rectangle2: "" + r);


Java 17, Windows 11
Yasson 3.0.2

		<dependency>
			<groupId>jakarta.json.bind</groupId>
			<artifactId>jakarta.json.bind-api</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse</groupId>
			<artifactId>yasson</artifactId>
			<version>3.0.2</version>
		</dependency>","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/596/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/596,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5ZO225,yasson,1497066937,596,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2023-04-05T07:49:41Z,2023-04-05T07:49:41Z,"Hi, I will take a look at this. Thank you for reporting this problem.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5ZO225/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/597,https://api.github.com/repos/eclipse-ee4j/yasson/issues/597,yasson,1660762600,597,JSON-B does not play well with bean model generated by JAXB,alan-marcinkowski,86372379,,,OPEN,2023-04-10T13:06:32Z,2023-04-10T13:07:16Z,"Seems these tools ought to endeavor to interoperate especially in legacy applications. The HL7 CDA XSD which uses ever single arcane nuance of XML Schema ever invented (just to make life interesting you know), when generated to JAXB annotated beans ... the models of those classes can not be bound using JSON-B :-( Think XMLElementRef/s, XMLMixed, etc ... all the real stupid things baked into XML.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/597/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/598,https://api.github.com/repos/eclipse-ee4j/yasson/issues/598,yasson,1671703228,598,"Interpretation of the ""ANY"" PropertyOrderStrategy",q3769,14980208,Qingtian Wang,,OPEN,2023-04-17T18:01:04Z,2023-04-20T13:27:13Z,"**Is your feature request related to a problem? Please describe.**
I'm always frustrated with the Yasson implementation of the ANY serialization order. The spec says ANY means ""the order of properties is not guaranteed to retain any order."" The Yasson interpretation of that is correct, but NOT user friendly - the serialized json result has ""random"" (HashMap) property order, which is not as sensible to the user as ""same order as the properties fields or getters appear in the Java class"". Although the spec says ANY means no guarantee, having it in a sensible order does not violate the spec. 

**Describe the solution you'd like**
When the PropertyOrderStrategy is ANY,  then the JSON serialization should preserve the same order the property fields (or getters) as they appear in the Java source class.

**Describe alternatives you've considered**
Alternatively, the Yasson impl could provide an additional custom order to the spec e.g. SOURCE, meaning the serialization (or even the deserialization) should be in the same order as the property fields/getters/setters appear in the source Java class (or source JSON for deserialization).

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/598/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/598,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5aYVrx,yasson,1516329713,598,NA,q3769,14980208,Qingtian Wang,,NA,2023-04-20T13:27:13Z,2023-04-20T13:27:13Z,"Forgot to mention I am on version 3.0.3
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5aYVrx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,yasson,1697381883,599,Issue with @JsonbCreator constructor with Generic Type in Yasson 3.0.0 and higher,mskacelik,124160830,Marek Skácelík,,OPEN,2023-05-05T10:28:40Z,2025-02-03T21:37:14Z,"There seems to be a bug in Yasson version 3.0.0 and higher that affects the `@JsonbCreator` constructor when it has a Generic Type parameter. This issue is not present in Yasson version 2.0.4.


Stack trace from the reproducer (version 3.0.0 and higher):
```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Error resolving runtime type for type: T
	at org.eclipse.yasson.internal.ReflectionUtils.lambda$getRawType$0(ReflectionUtils.java:92)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at org.eclipse.yasson.internal.ReflectionUtils.getRawType(ReflectionUtils.java:92)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createObjectDeserializer(DeserializationModelCreator.java:236)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:193)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createNewChain(DeserializationModelCreator.java:488)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:477)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:430)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createCollectionDeserializer(DeserializationModelCreator.java:273)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:183)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createNewChain(DeserializationModelCreator.java:488)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:477)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.typeProcessor(DeserializationModelCreator.java:430)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createObjectDeserializer(DeserializationModelCreator.java:227)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:193)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:123)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:137)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at Reproducer.main(Reproducer.java:27)
```

**Reproducer using JBang**:
```java
///usr/bin/env jbang ""$0"" ""$@"" ; exit $?
//DEPS org.eclipse:yasson:3.0.3


import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbConfig;
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.annotation.JsonbCreator;
import java.util.List;


public class Reproducer {

    public static void main(String... args) {
        Jsonb jsonb = JsonbBuilder.create(new JsonbConfig()
                .withFormatting(true)
                .withNullValues(true));
        String jsonString = ""{\n"" +
                ""    \""id\"": 0,\n"" +
                ""    \""multiLangRecords\"": [{\n"" +
                ""      \""lang\"": \""\"",\n"" +
                ""      \""record\"": {\n"" +
                ""        \""description\"": \""\""\n"" +
                ""      }\n"" +
                ""    }]  \n"" +
                ""  }"";
        System.out.println(jsonb.fromJson(jsonString, InsertTechnicalLocationInputJ.class));
        // EXPECTED: InsertTechnicalLocationInputJ[id=0, multiLangRecords=[InsertLangEntryGQLJ[lang=, record=InsertTechnicalLocationRecordGQLJ[description=]]]]
    }

    public record InsertTechnicalLocationInputJ(String id,
                                                List<InsertLangEntryGQLJ<InsertTechnicalLocationRecordGQLJ>> multiLangRecords) {

        @JsonbCreator
        public InsertTechnicalLocationInputJ {
        }
    }

    public record InsertTechnicalLocationRecordGQLJ(String description) {

        @JsonbCreator
        public InsertTechnicalLocationRecordGQLJ {
        }
    }

    public record InsertLangEntryGQLJ<T>(String lang, T record) {
        @JsonbCreator
        public InsertLangEntryGQLJ {
        }
    }

}
```
Switching yasson's version (line starting `//DEPS`) from 3.0.3 to 2.0.4 resolves the issue.

JBang documentation and how to download it: https://www.jbang.dev/","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/599/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDnbK,yasson,1628337866,599,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T06:44:05Z,2023-07-10T06:44:05Z,"The first commit where this error gets thrown is b74033d
Not sure what caused this because the diff is huge","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDnbK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhNfg,yasson,1803868128,599,NA,edgarvonk,803121,Edgar Vonk,edgar@info.nl,NA,2023-11-09T13:49:37Z,2023-11-09T13:49:37Z,"It seems we are facing the same issue using Yasson 3.0.2 (which ships with WildFly 30):

```
jakarta.ws.rs.ProcessingException: RESTEASY008200: JSON Binding deserialization error: jakarta.json.bind.JsonbException: Error resolving runtime type for type: T
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.5.Final//org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:78
	
[..]
Caused by: jakarta.json.bind.JsonbException: Error resolving runtime type for type: T
	at org.eclipse.yasson//org.eclipse.yasson.internal.ReflectionUtils.lambda$getRawType$0(ReflectionUtils.java:92)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at org.eclipse.yasson//org.eclipse.yasson.internal.ReflectionUtils.getRawType(ReflectionUtils.java:92)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createObjectDeserializer(DeserializationModelCreator.java:236)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:193)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
	at org.eclipse.yasson//org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:123)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:137)
	at org.eclipse.yasson//org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson//org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:95)
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.5.Final//org.jboss.resteasy.plugins.providers.jsonb.ManagedJsonb.fromJson(ManagedJsonb.java:73)
	at org.jboss.resteasy.resteasy-json-binding-provider@6.2.5.Final//org.jboss.resteasy.plugins.providers.jsonb.JsonBindingProvider.readFrom(JsonBindingProvider.java:71)	
```	

In our case the Java data class in question which Yasson is trying to deserialize is:

```
public class RuleResponse<T> {

    private final T result;

    @JsonbCreator
    public RuleResponse(@JsonbProperty(""result"") final T result) {
        this.result = result;
    }

    public T getResult() {
        return result;
    }
}
```

Is there a workaround for this issue? We cannot just downgrade Yasson because Yasson 3 is used internally by WildFly a lot as well it seems.

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhNfg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhcGD,yasson,1803927939,599,NA,mskacelik,124160830,Marek Skácelík,,NA,2023-11-09T14:23:15Z,2023-11-09T14:23:15Z,@edgarvonk Possible workaround was brought up here: https://github.com/smallrye/smallrye-graphql/issues/1819#issuecomment-1549588537,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhcGD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhq8g,yasson,1803988768,599,NA,edgarvonk,803121,Edgar Vonk,edgar@info.nl,NA,2023-11-09T14:56:42Z,2023-11-09T14:56:42Z,Thanks @mskacelik ! It seems to do the trick indeed. A rather cumbersome workaround for us however since our code base is large with quite a huge number of Java value classes that do not implement an interface nor extend from an abstract class which are used as generic types in JSON deserialisation.. ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rhq8g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/599,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6c4O92,yasson,2631987062,599,NA,jamezp,420065,James R. Perkins,,NA,2025-02-03T20:19:01Z,2025-02-03T20:19:01Z,"This likely came in on #537. ~~I've locally got a fix for it, but I'm working to see if I can write a test for it.~~ The fix I've got locally fixes a slightly different issue I'm seeing which I'll file an issue and a fix for. ","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6c4O92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/600,https://api.github.com/repos/eclipse-ee4j/yasson/issues/600,yasson,1701799522,600,Capturing undeclared fields,jsorel,8068203,Johann Sorel,,OPEN,2023-05-09T10:21:10Z,2023-05-09T12:44:50Z,"Hello,

I am currently working on a JSON binding implementation in Apache SIS (https://sis.apache.org/) of the Coverage-JSON specification (https://github.com/opengeospatial/CoverageJSON)  .

In the specification, several extensions are possible as described in chapter 9.6 (https://opengeospatial.github.io/ogcna-auto-review/21-069.html#_56b929af-e36d-4994-ac3b-29bcf86f4728)
```
9.7.  Extensions

A CoverageJSON document can be extended with custom members and types in a robust and interoperable way. For that, it makes use of absolute URIs and compact URIs (prefix:suffix) in order to avoid conflicts with other extensions and future versions of the format. A central registry of compact URI prefixes is provided which anyone can extend and which is a simple mapping from compact URI prefix to namespace URI in order to avoid collisions with other extensions that are based on compact URIs as well. Extensions that do not follow this approach MAY use simple names instead of absolute or compact URIs but have to accept the consequence of the document being less interoperable and future-proof. In certain use cases this is not an issue and may be a preferred solution for simplicity reasons, for example, if such CoverageJSON documents are only used internally and are not meant to be shared to a wider audience.
```

Problem is, I could not find a way to catch those additional attributes, as in Jackson (@JsonAnyGetter) or Johnzon (@JohnzonAny)

Maybe I just missed it ? is there an example somewhere ?

If not, here is what I would like to see one day maybe :

As in Johnzon or Jackson :
```
@YassonUndeclared
public final Map<String, Object> any = new LinkedHashMap<>();
```

Or maybe with some changes in jsonb specification ?
```
@JsonbProperty(""*"")
public final Map<String, Object> any = new LinkedHashMap<>();
```

**Version**
Yasson 3.0.3


","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/600/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/601,https://api.github.com/repos/eclipse-ee4j/yasson/issues/601,yasson,1701830764,601,Deserializing Object or String,jsorel,8068203,Johann Sorel,,OPEN,2023-05-09T10:41:45Z,2024-03-04T10:02:57Z,"
When trying to deserialize a bean property which can be a String or an Object, there is no way to deserialize the object version.

**Version**
Yasson 3.0.3

**To Reproduce**

```
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.JsonbException;
import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.reflect.Type;

public class Test {

    public static class Parent {

        @JsonbTypeDeserializer(DomainDeserializer.class)
        public Object domain;
    }

    public static class Child {
        public String name;
    }

    public static class DomainDeserializer implements JsonbDeserializer<Object> {
        @Override
        public Object deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            final JsonParser.Event event = parser.next();
            if (event == JsonParser.Event.START_OBJECT) {
                // Deserialize inner object
                return ctx.deserialize(Child.class, parser);
            } else if (event == JsonParser.Event.VALUE_STRING) {
                return parser.getString();
            } else {
                throw new JsonbException(""Unexpected json element "" + event.name() + "" "" + parser.getString());
            }
        }
    }

    public static void main(String[] args) {

        Parent parent1 = JsonbBuilder.create().fromJson(""{\""domain\"": \""test\""}"", Parent.class);
        Parent parent2 = JsonbBuilder.create().fromJson(""{\""domain\"": {\""name\"":\""test\""}}"", Parent.class);

    }
}
```

**Additional context**

In the first case `Parent parent1 = JsonbBuilder.create().fromJson(""{\""domain\"": \""test\""}"", Parent.class);`
We get :
```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Internal error: There are no more elements available!
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:142)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at org.apache.sis.internal.coveragejson.Test.main(Test.java:48)
Caused by: java.util.NoSuchElementException: There are no more elements available!
	at org.eclipse.yasson.internal.deserializer.YassonParser.validate(YassonParser.java:192)
	at org.eclipse.yasson.internal.deserializer.YassonParser.next(YassonParser.java:71)
	at org.apache.sis.internal.coveragejson.Test$DomainDeserializer.deserialize(Test.java:34)
	at org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:69)
	at org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:78)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:31)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:57)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	... 4 more
```

In the second `Parent parent2 = JsonbBuilder.create().fromJson(""{\""domain\"": {\""name\"":\""test\""}}"", Parent.class);`
```
Exception in thread ""main"" jakarta.json.bind.JsonbException: Unable to deserialize property 'domain' because of: Unexpected json element KEY_NAME name
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:80)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:31)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:57)
	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.deserialize(DefaultObjectInstanceCreator.java:29)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	at org.apache.sis.internal.coveragejson.Test.main(Test.java:49)
Caused by: jakarta.json.bind.JsonbException: Unexpected json element KEY_NAME name
	at org.apache.sis.internal.coveragejson.Test$DomainDeserializer.deserialize(Test.java:41)
	at org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:69)
	at org.eclipse.yasson.internal.deserializer.UserDefinedDeserializer.deserialize(UserDefinedDeserializer.java:26)
	at org.eclipse.yasson.internal.deserializer.ObjectDeserializer.deserialize(ObjectDeserializer.java:78)
	... 12 more
```

**Expected behavior**
In the first case I would have expected a VALUE_STRING event but instead we have nothing.
In the second case  I would have expected a START_OBJECT event but instead it jumps to the first attribute.

Or am I doing something wrong here ?

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/601/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/601,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs51ynej,yasson,1976203171,601,NA,shameerahamed,12745195,Shameer,,NA,2024-03-04T10:02:55Z,2024-03-04T10:02:55Z,"I'm facing the same issue for the below sample. The ""obj"" attribute is considered as JSON Event ""KEY_NAME"". Is there any workaround or fix for this issue ? Thanks. 

PS:  skipObject() might not work due to this issue as well. 

```
{
   ""type"" : ""String"",
   ""obj"" : {
      ""type"" : ""Number"",
      ""id"" : ""1212'
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs51ynej/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/602,https://api.github.com/repos/eclipse-ee4j/yasson/issues/602,yasson,1705167692,602,"Map<K, V> produces JSON list instead of JSON map",mkarg,1701815,Markus KARG,markus@headcrashing.eu,OPEN,2023-05-11T06:39:55Z,2023-07-10T05:46:01Z,"**Describe the bug**

According to JSON-B Specification v3 chapter 3.1.1 all implementations MUST support serialization of `java.util.Map`. While Yasson *does* serialize maps, it does it in an inconsistent way:
* `Map<String, V>` is correctly serialized as a JSON **map** where `String` is key and serialized `V` is value.
  ```java
  System.out.println(jsonb.toJson(Map.of(k.toString(), v))); // correctly prints `{""k"":<v>}`
  ```
* `Map<K, V>` is rather unexpectedly serialized as a JSON **list** holding one JSON map per entry *inside* that list, all having a key name of literally the word `key`, and a value of literally the word `value`.
  ```java
  System.out.println(jsonb.toJson(Map.of(k, v))); // prints `[{""key"":<k>,""value"":<v>}]`, but should print `{<k>: <v>}`
  ```
**To Reproduce**
```java
package de.quipsy.sandbox.yassonbugs;

import java.io.IOException;
import java.util.Map;

import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.JsonbConfig;
import jakarta.json.bind.adapter.JsonbAdapter;

public final class YassonBugs {

  public static final void main(final String[] arguments) throws IOException {
    final var cfg = new JsonbConfig().withAdapters(new CAdapter());
    final var jsonb = JsonbBuilder.newBuilder().withConfig(cfg).build();
    final var k = new C();
    final var v = new C();
    System.out.println(jsonb.toJson(Map.of(k.toString(), v))); // correctly prints `{""C"":""C""}]`
    System.out.println(jsonb.toJson(Map.of(k, v))); // prints `[{""key"":""C"",""value"":""C""}]`, but should print `{""C"": ""C""}`
  }

  public static final class C {
    @Override
    public final String toString() {
      return ""C"";
    }
  }

  public static final class CAdapter implements JsonbAdapter<C, String> {

    @Override
    public final String adaptToJson(final C obj) throws Exception {
      return obj.toString();
    }

    @Override
    public final C adaptFromJson(final String obj) throws Exception {
      throw new UnsupportedOperationException(""Unimplemented method 'adaptFromJson'"");
    }

  }

}
```

**Expected behavior**
`System.out.println(jsonb.toJson(Map.of(k, v)));` should print print `{<k>: <v>}`, i. e. a map with serialized `k` as key and serialized `v` as value, to be consistent with the behaviour of `Map<String, V>`.

**System information:**
 - OS: Windows
 - Java Version: 19
 - Yasson Version: 3.0.3

**Additional context**
N/A
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/602/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/602,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDV1X,yasson,1628265815,602,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T05:46:01Z,2023-07-10T05:46:01Z,"Not sure what the correct behaviour is in this case, but the serializer selection happens [here](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/serializer/MapSerializer.java#L81) in MapSerializer.java.
According to this code only using Enum keys or the [types](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/serializer/types/TypeSerializers.java#L74) defined in TypeSerializers.java are supported as keys.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDV1X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/603,https://api.github.com/repos/eclipse-ee4j/yasson/issues/603,yasson,1705248802,603,Yasson ignored @JsonbTypeAdapter on field level for map keys,mkarg,1701815,Markus KARG,markus@headcrashing.eu,OPEN,2023-05-11T07:40:13Z,2024-10-30T16:17:52Z,"**Describe the bug**

According to the JSON-B Specification v3 chapter 4.7.1...
>There are two ways how to register JsonbAdapter:
>* Using JsonbConfig::withAdapters method;
>* Annotating a class field with JsonbTypeAdapter annotation.

Yasson 3.0.3 and 3.0.4 inconsistently handles adapters for map keys:
* Using `JsonbConfig::withAdapters`, Yasson *correctly* respects the adapter for a map key.
* Using `@JsonbTypeAdapter` on the class field, Yasson *incorrectly* ignores the adapter for the map key but prints an empty object `{}` as the key value.

**To Reproduce**
```java
package de.quipsy.sandbox.yassonbugs;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.adapter.JsonbAdapter;
import jakarta.json.bind.annotation.JsonbTypeAdapter;

public final class YassonBug {

  public static final void main(final String[] arguments) throws IOException {
    final var jsonb = JsonbBuilder.newBuilder().build();
    final var b = new B();
    final var c = new C();
    System.out.println(jsonb.toJson(b)); // correctly prints `{""c"":""C""}`
    System.out.println(jsonb.toJson(List.of(b))); // correctly prints `[{""c"":""C""}]`
    System.out.println(jsonb.toJson(Map.of(c, b))); // prints `[{""key"":{},""value"":{""c"":""C""}}]`, but should print `[{""key"":{""c""},""value"":{""c"":""C""}}]`
  }

  public static final class B {
    @JsonbTypeAdapter(CAdapter.class)
    public final C c = new C();
  }

  public static final class C {
    @Override
    public final String toString() {
      return ""C"";
    }
  }

  public static final class CAdapter implements JsonbAdapter<C, String> {

    @Override
    public final String adaptToJson(final C obj) throws Exception {
      return obj.toString();
    }

    @Override
    public final C adaptFromJson(final String obj) throws Exception {
      throw new UnsupportedOperationException(""Unimplemented method 'adaptFromJson'"");
    }

  }

}
```

**Expected behavior**

Yasson should correctly respect adapter for map key registered using `@JsonbTypeAdapter` just in the same ways it already correctly respects adapters set using `::withAdapters`.

NB: Yasson should also respect adapter registered using `@JsonbTypeAdapter` at the *class* level for map key, just as it already correctly respects that adapter for any other use besides map key.

**System information:**

 - OS: Windows
 - Java Version: 19
 - Yasson Version: 3.0.3, 3.0.4

**Additional context**

See also https://github.com/eclipse-ee4j/yasson/issues/652","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/603/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/603,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6R3oob,yasson,2447280667,603,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2024-10-30T14:04:43Z,2024-10-30T14:04:43Z,This bug is open since more than one year. I wonder why it has neither been fixed *nor* rejected. Does this project need more helping hands? 🤔 ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6R3oob/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,yasson,1732063043,604,Regression: yasson on SpringBoot: IOException Stream Closed,IndyNaessens,16327844,Indy Naessens,indy.naessens@pm.me,OPEN,2023-05-30T11:28:21Z,2025-02-12T11:06:08Z,"**Describe the bug**
It seems there is a regression on the following issue https://github.com/eclipse-ee4j/yasson/issues/389. I originally reported the issue here https://github.com/spring-projects/spring-boot/issues/35651. 

**To Reproduce**
```
FileWriter writer = new FileWriter(""output.json"");
Jsonb jsonb = JsonbBuilder.create();
jsonb.toJson(Collections.singletonMap(""a"", ""alpha""), writer);
jsonb.toJson(Collections.singletonMap(""a"", ""alpha""), writer);
```

**Expected behavior**
`toJson` not closing the writer.

**System information:**
 - OS: **Windows**
 - Java Version: **17**
 - Yasson Version: **3.0.3**

**Additional context**
This issue seems to be introduced with version **3.0.3**. Version **3.0.2** and below work as expected.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/604/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDKJT,yasson,1628217939,604,NA,Degubi,13366932,Degubi,gergonoorbi@gmail.com,NA,2023-07-10T05:18:41Z,2023-07-10T05:18:41Z,"Seems to be caused by #586, reverting this fixes it for me","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hDKJT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5oZctU,yasson,1751501652,604,NA,jamezp,420065,James R. Perkins,,NA,2023-10-06T23:35:43Z,2023-10-06T23:35:43Z,"#586 is the correct fix according the `Jsonb.fromJson()` JavaDoc.
> stream - The stream is read as a JSON data. Upon a successful completion, the stream will be closed by this method.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5oZctU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6eI72P,yasson,2653142415,604,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2025-02-12T09:40:33Z,2025-02-12T09:40:33Z,"Discovered few days ago in our test system that REST/JSON based backend app logs are literally FULL of the very same error. The output stream being already closed by the moment Spring's JSON HTTP message converter attempts to write the response and flush it to the (http) output stream. After some code analysis, I reached the same offending change (#586 ) that someone introduced into Yasson 3.0.3 to supposedly auto-close the generators and parsers...

Well, it ruins the intent of original fix (#389 ) as can be clearly evident from `org.eclipse.yasson.internal.JsonBinding` code:

```java
@Override
public String toJson(Object object, Type type) throws JsonbException {
    StringWriter writer = new StringWriter();
    try (JsonGenerator generator = writerGenerator(writer)) {
        new SerializationContextImpl(jsonbContext, type).marshall(object, generator);
    }
    return writer.toString();
}

@Override
public void toJson(Object object, Writer writer) throws JsonbException {
    final SerializationContextImpl marshaller = new SerializationContextImpl(jsonbContext);
    try (JsonGenerator generator = writerGenerator(writer)) {
        marshaller.marshallWithoutClose(object, generator);
    }
}
```

The try-with-resources obviously closes the JSON generator once the ""marshall-WITHOUT-close"" (emphasis mine) method completes. Why close the resource if the intent is NOT to close it?... Sorry for the rant.

**System information:**

- OS: Windows 11
- Java Version: 17
- Yasson Version: 3.0.4 (latest one as of writing)
- Spring Version: 5.3.39 (not Spring Boot)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6eI72P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/604,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6eJBm8,yasson,2653166012,604,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2025-02-12T09:47:10Z,2025-02-12T09:47:10Z,"The #631 did resolve the implicitly closing the output STREAMS when generating JSON content, but my particular issue is with (output) WRITERS, not streams. They should not be closed by Yasson code either if a ready-to-use Writer has been passed in by the calling code; the calling code is supposed to take care of its resources and objects.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6eJBm8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/606,https://api.github.com/repos/eclipse-ee4j/yasson/issues/606,yasson,1796993505,606,@JsonbTypeDeserializer is not recognized for record parameters,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,OPEN,2023-07-10T15:13:20Z,2023-07-11T06:46:30Z,"**Describe the bug**

I have a malformed UUID, which I re-map like so:


`record MyClass(@JsonbProperty(""sys_id"") @JsonbTypeDeserializer(SysIdDeserializer.class) UUID sysId) {}`

It will just be ignored:

```
Caused by: java.lang.IllegalArgumentException: Invalid UUID string: 2b8f1a676f04c7c027e0cc60cb1f4ec3
        at java.base/java.util.UUID.fromString1(UUID.java:280)
        at java.base/java.util.UUID.fromString(UUID.java:258)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.UUIDTypeDeserializer.deserialize(UUIDTypeDeserializer.java:37)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.UUIDTypeDeserializer.deserialize(UUIDTypeDeserializer.java:24)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.AbstractValueTypeDeserializer.deserialize(AbstractValueTypeDeserializer.java:64)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.ObjectDeserializer.deserializeNext(ObjectDeserializer.java:167)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserializeInternal(AbstractContainerDeserializer.java:94)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.serializer.AbstractContainerDeserializer.deserialize(AbstractContainerDeserializer.java:64)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:62)
        ... 86 more
```

**To Reproduce**

```
record MyClass(@JsonbProperty(""sys_id"") @JsonbTypeDeserializer(SysIdDeserializer.class) UUID sysId) {}
```

**Expected behavior**

Should work.


**System information:**
 - OS: Mac (latest)
 - Java Version: 17 (tem and sem)
 - Yasson Version: 2.0.4

**Additional context**

Workaround: add the converter globally. But then it will be used even for json fields which already have valid fields.

`@JsonbTypeAdapter()` seems to check wrong types, will create a separate issue.

Yes, this is a 2.0.4 bug. I cannot upgrade to 3.x.x just now, because I am stuck with Jakarta 8 for now.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/606/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/606,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hK4df,yasson,1630242655,606,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2023-07-11T06:46:30Z,2023-07-11T06:46:30Z,"Same bug on 3.x.x, just checked.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hK4df/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/607,https://api.github.com/repos/eclipse-ee4j/yasson/issues/607,yasson,1797015905,607,@JsonbTypeAdapter recognized but not used for record classes,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,OPEN,2023-07-10T15:26:02Z,2024-10-16T06:48:55Z,"**Describe the bug**

```
record MyClass(@JsonbProperty(""my_set_field"") @JsonbTypeAdapter(SetAdapter.class) Set<String> entries) {};

public class SetAdapter implements JsonbAdapter<String, Set<String>> { /* ... */ }
```

Exception:

```
Caused by: jakarta.json.bind.JsonbException: Adapter of runtime type class java.lang.String does not match property type interface java.util.Set
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBindingFromAnnotation(AnnotationIntrospector.java:247)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.AnnotationIntrospector.getAdapterBinding(AnnotationIntrospector.java:221)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.model.PropertyModel.introspectCustomization(PropertyModel.java:272)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:171)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
        at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1787)
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:97)
        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1740)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:81)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.Unmarshaller.deserializeItem(Unmarshaller.java:60)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.Unmarshaller.deserialize(Unmarshaller.java:51)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:59)
        at org.eclipse.yasson@2.0.4/org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:66)
```

**To Reproduce**

See classes above

**Expected behavior**

The 2nd parameter is used for comparison as it is for POJOs.

**System information:**
 - OS: Mac
 - Java Version: 17, 20
 - Yasson Version: 2.0.4

**Additional context**

./.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/607/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/607,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hK2LJ,yasson,1630233289,607,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2023-07-11T06:38:46Z,2023-07-11T06:38:46Z,"I found out that neither

```
public class SetAdapter implements JsonbAdapter<Set<String>, JsonString> {}
```

and 

```
public class SetAdapter implements JsonbAdapter<Set<String>, String> {}
```

Now that error is gone, but neither option was actually called.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5hK2LJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/607,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6P_2sv,yasson,2415881007,607,NA,t1,185260,Rüdiger zu Dohna,ruediger.dohna@codecentric.de,NA,2024-10-16T06:48:54Z,2024-10-16T06:48:54Z,"I found an issue that seems to have exactly the same cause. It works if Yasson first sees the record class directly with the adapter, _before_ it sees it in a generic type.

I've created a very minimalistic reproducer [here](https://github.com/t1/yasson-record-issue). If you want, I can turn that into a test for a PR. Finding and fixing the actual bug would require diving deeper into the Yasson code than I can find the time for.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6P_2sv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/609,https://api.github.com/repos/eclipse-ee4j/yasson/issues/609,yasson,1820014454,609,JsonbDeserializer deserializes JSON array into class java.lang.String,dziobiak-203872,34040963,dziobiaka,,OPEN,2023-07-25T10:20:44Z,2023-07-25T10:20:44Z,"**Describe the bug**
Hello,

After changing yasson version to 3.0.3 JsonbDeserializer started to allow deserializing JSON array into String by taking last value from array and ignoring the rest of the values.

**To Reproduce**
Steps to reproduce the bug

I am trying to deserialize json: 
```
{
  ""test"": [
         ""data1"",
         ""data2"",
         ""data3"",
         ""data4""
   ]
}
```

into:
```
public class ExampleRequest {

  private String test;
}
```

with the following code:
```
  Jsonb jsonb = JsonbBuilder.create(new JsonbConfig()
        .withFormatting(true)
        .withNullValues(true));

    String jsonString = ""{\n""
        + ""  \""test\"": [\n""
        + ""         \""data1\"",\n""
        + ""         \""data2\"",\n""
        + ""         \""data3\"",\n""
        + ""         \""data4\""\n""
        + ""   ]\n""
        + ""}"";
    ExampleRequest er = jsonb.fromJson(jsonString, ExampleRequest.class);
```

with yasson version **2.0.4** exception is thrown: 
`jakarta.json.bind.JsonbException: Unable to deserialize property 'test' because of: Can't deserialize JSON array into: class java.lang.String
`

with yasson version **3.0.3** during the deserialisation  no exception is thrown and instead last value from that array is taken to initialize ExampleRequest:
`ExampleRequest(test=data4)
`

**Expected behavior**
Throw an exception

**System information:**
 - OS: Mac
 - Java Version: 17
 - Yasson Version: 3.0.3 (but problem occurs since 3.0.0-RC2)

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/609/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/610,https://api.github.com/repos/eclipse-ee4j/yasson/issues/610,yasson,1824641462,610,override the @JsonbTypeDeserializer,redmitry,6804872,Dmitry Repchevsky,,OPEN,2023-07-27T15:40:11Z,2023-07-27T15:40:11Z,"Hello,

According the specification:

>There are two ways how to register JsonbSerializer/JsonbDeserializer:
>    1. Using JsonbConfig::withSerializers/ JsonbConfig::withDeserializers method;
>    2. Annotating a type with JsonbSerializer/JsonbDeserializer annotation.

The annotation is the natural way to provide a custom (de)serializer in the library (e.g. polymorphism) while using Jsonb configuration is the way to do this without a model change.

What I do expect is when I provide my own custom (de)serializer it is used instead of the one provided by the annotation.
Unfortunately, Yasson ignores (de)serializer provided via the config when there is one already provided in the model.

Cheers,

D.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/611,https://api.github.com/repos/eclipse-ee4j/yasson/issues/611,yasson,1855131069,611,YassonParser does not implement JsonParser.currentEvent(),nibsi,2323961,Stephan van Hulst,,OPEN,2023-08-17T14:32:23Z,2023-08-17T14:32:23Z,"**Describe the bug**
Version 2.1 of the Jakarta JSON Processing API added the method `currentEvent()` to the `JsonParser` interface. This method has a default implementation that throws `UnsupportedOperationException`.

Yasson implements JSON-P 2.1, but it does not override the default implementation for `JsonParser.currentEvent()`.

This is likely an oversight. It's easy to miss new methods in interfaces when they have a default implementation.

**To Reproduce**
- Initialize a `YassonParser parser`.
- Call `parser.next()`
- Call `parser.currentEvent()`
- Observe that `UnsupportedOperationException` is thrown.

**Expected behavior**
- `parser.currentEvent()` returns the last event returned by `parser.next()`.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/611/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/612,https://api.github.com/repos/eclipse-ee4j/yasson/issues/612,yasson,1873738391,612,StackOverflowError when deserializing an interface bounded to a dynamically Deserializer,davidobber,46542028,,,OPEN,2023-08-30T13:55:55Z,2023-09-12T15:19:32Z,"Binding a deserializer to an interface with JsonbConfig.withDeserializers() leads to a StackOverflowError Exception. Doing the same using the annotation works. This worked in java 8 & yasson 1.0.6

To Reproduce:
To Reproduce the bug, just run the Spock Spec included in the attached zip. One of the two test cases works, the other fails.

Expected behaviour:
No exception is expected

 - OS: Windows
 - Java Version: 11
 - Yasson Version: 3.0.x (it happens even with 2.0.x)

[deserializer.zip](https://github.com/eclipse-ee4j/yasson/files/12476317/deserializer.zip)
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/612/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/612,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mRwO_,yasson,1715930047,612,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2023-09-12T15:19:32Z,2023-09-12T15:19:32Z,probably related to the #594.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mRwO_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,yasson,1884271061,613,JsonGenerationException: not valid in current context IN_OBJECT,nimo23,3045549,,,CLOSED,2023-09-06T15:31:38Z,2023-09-12T14:53:18Z,"**Describe the bug**
I have a custom `JsonbSerializer`. The following code works:

```
public final class NumberWrapperSerializer implements JsonbSerializer<NumberWrapper> {

  @Override
  public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	generator.writeStartObject();
	var number = numberWrapper.getValue();
	if (number instanceof Double doubleNum) {
		generator.write(""value"", doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
	}
	generator.writeEnd();
  }
}
```

The json output:

```
..
""myNum"": {
	""value"": 5.500000
},
..
```

However, what I want to achieve is to write the value directly to myNum:

```
..
""myNum"": 5.500000,
..
```

So I adapt `NumberWrapperSerializer` as follows:

```
@Override
public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	generator.writeStartObject();
	var number = numberWrapper.getValue();
	if (number instanceof Double doubleNum) {
		// the stacktrace points to this line:
		generator.write(doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
	}
	generator.writeEnd();
}
```

But then I get the following stacktrace:

```
Caused by: jakarta.json.stream.JsonGenerationException: Illegal method during JSON generation, not valid in current context IN_OBJECT
	at org.eclipse.parsson//org.eclipse.parsson.JsonGeneratorImpl.checkContextForValue(JsonGeneratorImpl.java:406)
	at org.eclipse.parsson//org.eclipse.parsson.JsonGeneratorImpl.write(JsonGeneratorImpl.java:412)
	at org.eclipse.parsson//org.eclipse.parsson.JsonPrettyGeneratorImpl.write(JsonPrettyGeneratorImpl.java:27)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.YassonGenerator.write(YassonGenerator.java:168)
	at deployment.mytest.war//my.util.NumberWrapperSerializer.serialize(NumberWrapperSerializer.java:22)
	at deployment.mytest.war//my.util.NumberWrapperSerializer.serialize(NumberWrapperSerializer.java:1)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.UserDefinedSerializer.serialize(UserDefinedSerializer.java:35)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:38)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.MapSerializer$StringKeyMapSerializer.lambda$serialize$0(MapSerializer.java:109)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.MapSerializer$StringKeyMapSerializer.serialize(MapSerializer.java:107)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.KeyWriter.serialize(KeyWriter.java:41)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.NullVisibilitySwitcher.serialize(NullVisibilitySwitcher.java:40)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.NullSerializer.serialize(NullSerializer.java:67)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.ValueGetterSerializer.serialize(ValueGetterSerializer.java:43)
	at deployment.mytest.war//org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 98 more
```

If I use this:

```
@Override
public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	var number = numberWrapper.getDelegate();
	if (number instanceof Double doubleNum) {
		// the stacktrace points to this line:
		generator.write(doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
	}
}
```

then the following stacktrace happens:

```
Caused by: jakarta.json.stream.JsonGenerationException: Illegal method during JSON generation, not valid in current context IN_FIELD
	at org.eclipse.parsson//org.eclipse.parsson.JsonGeneratorImpl.writeKey(JsonGeneratorImpl.java:459)
	at org.eclipse.parsson//org.eclipse.parsson.JsonPrettyGeneratorImpl.writeKey(JsonPrettyGeneratorImpl.java:27)
```

**Expected behavior**
No errors.

**System information:**
 - OS: Mac OS
 - Java Version: 17
 - Yasson Version: yasson-3.0.3.jar
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/613/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mPUPA,yasson,1715291072,613,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2023-09-12T08:52:19Z,2023-09-12T08:52:19Z,"Hi,

To be fair I do not see the problem.

```java
generator.writeStartObject();
generator.write(""value"", doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
generator.writeEnd();
```
generates;
```json
""myNum"": {
	""value"": 5.500000
}
```
is exactly what you are writing.

```java
generator.writeStartObject();
generator.write(doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
generator.writeEnd();
```
What you suppose to write?
```json
{ 5.500000 }
```
???
This is the invalid JSON and what is reported by the parser:
>Illegal method during JSON generation, not valid in current context IN_FIELD

Just write the property if this is what you want:  
`generator.write(""value"", doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);`

>..
>""myNum"": 5.500000,
>..

Kind regards,

D.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mPUPA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mPqj5,yasson,1715382521,613,NA,nimo23,3045549,,,NA,2023-09-12T09:47:50Z,2023-09-12T09:47:50Z,">Just write the property if this is what you want:
generator.write(""value"", doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);

I have a property within a class

```
public class User {

    private NumberWrapper myNum;

    // getter/setter

}
```

and registered my `NumberWrapperSerializer` 

`JsonbBuilder.create(new JsonbConfig().withSerializers(new NumberWrapperSerializer())`

@redmitry When I simply use the following (as you suggested):

```
@Override
public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	var number = numberWrapper.getValue();
	if (number instanceof Double doubleNum) {
	    generator.write(""value"", doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
	}
	generator.writeEnd();
}
```

or this:

```
@Override
public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	var number = numberWrapper.getValue();
	if (number instanceof Double doubleNum) {
	    generator.write(doubleNum.isNaN() || doubleNum.isInfinite() ? null : doubleNum);
	}
}
```

Then I get this error:

```
Caused by: jakarta.json.stream.JsonGenerationException: Illegal method during JSON generation, not valid in current context IN_FIELD
	at org.eclipse.parsson//org.eclipse.parsson.JsonGeneratorImpl.write(JsonGeneratorImpl.java:211)
	at org.eclipse.parsson//org.eclipse.parsson.JsonPrettyGeneratorImpl.write(JsonPrettyGeneratorImpl.java:27)
```


When serializing a User-instance, I simply want 

```
..
""myNum"": 5.500000,
..
```

instead of

```
..
""myNum"": {
	""value"": 5.500000
},
..
```

How can I do that?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mPqj5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mQwEi,yasson,1715667234,613,NA,redmitry,6804872,Dmitry Repchevsky,,NA,2023-09-12T12:52:12Z,2023-09-12T12:52:12Z,"Hi,
First to mention, you can't just write null, but rather call writeNull() method.
Also since we are writing the value we always have to write something (null?).
My guess:
```java
@Override
public void serialize(NumberWrapper numberWrapper, JsonGenerator generator, SerializationContext ctx) {
	var number = numberWrapper.getDelegate();
	if (number instanceof Double doubleNum) {
		// the stacktrace points to this line:
                if (doubleNum.isNaN() && doubleNum.isInfinite()) {
                        generator.writeNull();
                } else {
                        generator.write(doubleNum);
                }
	} else {
	        generator.writeNull();
        }
}","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mQwEi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/613,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mRk1H,yasson,1715883335,613,NA,nimo23,3045549,,,NA,2023-09-12T14:53:17Z,2023-09-12T14:53:17Z,@redmitry Thanks! It works now. Using `generator.writeNull();` solved this problem.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mRk1H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/614,https://api.github.com/repos/eclipse-ee4j/yasson/issues/614,yasson,1894520017,614,Serializer not called on List Elements,mdoy179,93272204,,,OPEN,2023-09-13T13:19:48Z,2023-10-04T12:17:00Z,"**Describe the bug**
In version `3.0.3` of yasson, the elements of a list do not have their Serializers called. This issue does not happen in version `2.0.4`.

In the following example, if a `List<Temp>` is serialized, the serializer will not throw the exception (or be called). If `Temp` is serialized by itself, the serializer will be called.:
```
@JsonbTypeSerializer(Temp.Serializer.class)
public class Temp {

    private List<UUID> vals;

    public List<UUID> getVals() {
        return vals;
    }

    public Temp(List<UUID> vals) {
        this.vals = vals;
    }

    public static class Serializer implements JsonbSerializer<Temp> {

        @Override
        public void serialize(Temp obj, JsonGenerator generator, SerializationContext ctx) {
            throw new UnsupportedOperationException(""Unimplemented method 'serialize'"");
        }

    }

}
```

**To Reproduce**
Included sample app with unit tests to replicate the problem. 
[yasson-bug-sample.zip](https://github.com/eclipse-ee4j/yasson/files/12597864/yasson-bug-sample.zip)


**Expected behavior**
Expected that a list would be serialized.

**System information:**
 - OS: Windows
 - Java Version: 17
 - Yasson Version: 3.0.3

**Additional context**
N/A
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/614/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/614,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mt8wS,yasson,1723321362,614,NA,mdoy179,93272204,,,NA,2023-09-18T12:36:45Z,2023-09-18T12:36:45Z,This issue seems related to this issue that was closed: https://github.com/eclipse-ee4j/yasson/issues/587. I'm wondering if serialization was not fixed? ,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5mt8wS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/614,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5m4bhG,yasson,1726068806,614,NA,mdoy179,93272204,,,NA,2023-09-19T16:46:02Z,2023-09-19T16:46:02Z,"Was able to get a workaround working by using jsonbConfig. If you update the ExampleTests.java to pass in a jsonbConfig then it will work. Something like this:
```
    @BeforeEach
    void setup() {
        myClass = new MyClass(""test"");
        JsonbConfig jsonbConfig = new JsonbConfig();
        
        var serializer = new JsonbSerializer[]{
            new MyClass.Serializer()
        };
        jsonbConfig.withSerializers(serializer);
        
        jsonb = JsonbBuilder.create(jsonbConfig);
    }  
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5m4bhG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/615,https://api.github.com/repos/eclipse-ee4j/yasson/issues/615,yasson,1924844373,615,Field not read (is null when JSON-content is not),bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,OPEN,2023-10-03T19:56:03Z,2023-10-03T19:56:26Z,"**Describe the bug**

A field used in an interface with `@JsonbTypeInfo` and Subtypes as well as a type adapter becomes `null` in implementing records.

**To Reproduce**

```
@JsonbTypeInfo(
    key = ""reason"",
    value = {
        @JsonbSubtype(alias = ""mention"", type = AtMentionNotification.class),
        @JsonbSubtype(alias = ""follow"", type = AtFollowNotification.class)
    })
public sealed interface AtNotification permits AtFollowNotification, AtMentionNotification {
    @JsonbTypeAdapter(AtNotificationReasonAdapter.class)
    @JsonbProperty(""reason"")
    AtNotificationReason reason();
}
```

Then the implementing record:

```

public record AtMentionNotification(
        @JsonbProperty(""uri"") String uri,
        @JsonbProperty(""cid"") String cid,
        @JsonbProperty(""author"") AtNotificationAuthor author,
        @JsonbTypeAdapter(AtNotificationReasonAdapter.class) @JsonbProperty(""reason"") AtNotificationReason reason,
        @JsonbProperty(""record"") AtPostNotificationRecord record,
        @JsonbProperty(""indexedAt"") Instant indexedAt,
        @JsonbProperty(""isRead"") boolean isRead)
        implements AtNotification {}
```

Adapter for Reason enum:

```
public class AtNotificationReasonAdapter implements JsonbAdapter<AtNotificationReason, String> {
    @Override
    public String adaptToJson(final AtNotificationReason obj) throws Exception {
        return obj.getReasonString();
    }

    @Override
    public AtNotificationReason adaptFromJson(final String obj) throws Exception {
        return AtNotificationReason.fromString(obj);
    }
}
```



**Expected behavior**

Field ""reason"" is set.

** Actual behaviour**

```
[ERROR] Failures: 
[ERROR]   AtNotificationResponseWrapperTest.can_deserialize:93 [List element at index 0] 
Expecting
  AtMentionNotification[uri=at://did:plc:n5o2wksggcs653t3seg5eu6b/app.bsky.feed.post/3kaqpcklzqg2x, cid=bafyreiejmowzo54ffnk4o5ebz3l2jixso6qnezx4h3ctygugp5sjv5z3hu, author=AtNotificationAuthor[did=did:plc:n5o2wksggcs653t3seg5eu6b, handle=bmarwell.de, displayName="""", description=""""., avatarUri=""""], indexedAt=2023-10-02T08:10:24.445Z], reason=null, record=AtPostNotificationRecord[text="""", type=POST, lang=null, createdAt=2023-10-02T05:47:58.002Z], indexedAt=2023-10-02T05:47:58.002Z, isRead=false]
to have a property or a field named ""reason"" with value
  ""mention""
but value was:
  null
(static and synthetic fields are ignored)
```

**System information:**
 - OS: Linux
 - Java Version:17
 - Yasson Version: any 3.0.x

**Additional context**

Run `./mvnw test` here: 
https://github.com/bmarwell/social-metricbot/tree/yasson_bug","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/615/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/616,https://api.github.com/repos/eclipse-ee4j/yasson/issues/616,yasson,1926559739,616,Recognize or honor @JsonbProperty annotation when applied to enumerated types.,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-10-04T16:10:40Z,2023-10-04T16:10:40Z,"As mentioned here https://github.com/jakartaee/jsonb-api/issues/255, and likely implemented in Johnzon as of https://issues.apache.org/jira/browse/JOHNZON-321, the @JsonbProperty annotation isn't recognized right now on the enum entries. So one need a custom adapter or serilizer / deserliser.

Is it possible to implement it directly? So one only need to use the annotation inside the enum directly, and nothing more?

I think about something like:
```
public enum Colors {

	@JsonbProperty(""Red"")
	RED,
	@JsonbProperty(""Green"")
	GREEN
}```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/616/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/617,https://api.github.com/repos/eclipse-ee4j/yasson/issues/617,yasson,1927966634,617,@JsonbTypeDeserializer is ignored on Enums in 3.0.3; works in 2.0.4,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-10-05T10:36:27Z,2023-10-05T10:36:27Z,"**Describe the bug**
I wanted a custom Serializer / Deserializer for my enum. I found the adapter code [here](https://rmannibucau.metawerx.net/jsonb-enum-serialization.html) and separate it into two different classes. But the @JsonbTypeDeserializer is ignored in 3.0.3, and not in 2.0.4. Both @JsonbTypeSerializer and @JsonbTypeAdapter are registered in 3.0.3 and 2.0.4. So it's only @JsonbTypeDeserializer which is ignored. 

**To Reproduce**
I created a small project with both scenarios, Serializer / Deserializer and adapter. One can comment one or another. One can also easily play with Yasson version there and see the test falls through or not.
https://github.com/api-from-the-ion/yasson-enum-bug-evaluation

**Expected behavior**
The Deserializer and test should work both in 3.x and 2.x versions,

**System information:**
 - OS:  Linux
 - Java Version: 11, 17
 - Yasson Version:3.0.3

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/617/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,yasson,1929832518,618,Is it possible to release 3.0.3 officially?,api-from-the-ion,145679039,Anton Pinsky,,CLOSED,2023-10-06T10:04:55Z,2024-11-05T13:01:26Z,I see the 3.0.3 tagged but not officially released. Can this be done?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/618/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5oZVA3,yasson,1751470135,618,NA,jamezp,420065,James R. Perkins,,NA,2023-10-06T22:34:42Z,2023-10-06T22:34:42Z,The changes also don't seem to be merged into the master branch.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5oZVA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5KXl,yasson,1759815141,618,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2023-10-12T15:18:47Z,2023-10-12T15:18:47Z,"Hi, you mean that it is not listed among releases? I will take a look into that.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5KXl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5LV_,yasson,1759819135,618,NA,jamezp,420065,James R. Perkins,,NA,2023-10-12T15:21:16Z,2023-10-12T15:21:16Z,"The tag is there, https://github.com/eclipse-ee4j/yasson/tags, but it's not under [release](https://github.com/eclipse-ee4j/yasson/releases). The main branch seems out of date as well. It's still on 3.0.3-SNAPSHOT version and is missing the commits in the 3.0.3 tag.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5LV_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5hoa,yasson,1759910426,618,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2023-10-12T15:58:56Z,2023-10-12T15:58:56Z,"Yep, that is absolutely true. I will be having fix tomorrow at latest.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5o5hoa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6DeXJJ,yasson,2205774409,618,NA,bh-tt,71650427,,,NA,2024-07-03T10:47:53Z,2024-07-03T10:47:53Z,"This can probably be closed, as 3.0.3 is available in maven central?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6DeXJJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SF4Ry,yasson,2451014770,618,NA,mkarg,1701815,Markus KARG,markus@headcrashing.eu,NA,2024-10-31T23:28:36Z,2024-10-31T23:28:36Z,@Verdent Why not closing this issue?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SF4Ry/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/618,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SdIEt,yasson,2457108781,618,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2024-11-05T13:01:26Z,2024-11-05T13:01:26Z,@mkarg Thank you! Closing,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SdIEt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/620,https://api.github.com/repos/eclipse-ee4j/yasson/issues/620,yasson,1931840318,620,Can't invoke mvnd because of some expressions instead of URLs in some profiles.,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-10-08T15:01:22Z,2023-10-14T22:44:10Z,"**Is your feature request related to a problem? Please describe.**
I try to compile and test this project with mvnd instead of maven. But mvnd complains about expressions instead of constants on some values in project POM and parent POM. These places are:

- 'profiles.profile[staging].repositories.repository.[sonatype-nexus-staging].url' contains an expression but should be a constant. @ line 310, column 26

- 'profiles.profile[staging].pluginRepositories.pluginRepository.[sonatype-nexus-staging].url' contains an expression but should be a constant. @ line 323, column 26

-  'profiles.profile[snapshots].repositories.repository.[sonatype-nexus-snapshots].url' contains an expression but should be a constant. @ org.eclipse.ee4j:project:1.0.7, ~/.m2/repository/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom, line 271, column 26
- 'profiles.profile[snapshots].pluginRepositories.pluginRepository.[sonatype-nexus-snapshots].url' contains an expression but should be a constant. @ org.eclipse.ee4j:project:1.0.7, ~/.m2/repository/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom, line 284, column 26
- 'profiles.profile[staging].repositories.repository.[sonatype-nexus-staging].url' contains an expression but should be a constant. @ org.eclipse.ee4j:project:1.0.7, ~/.m2/repository/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom, line 308, column 26
- 'profiles.profile[staging].pluginRepositories.pluginRepository.[sonatype-nexus-staging].url' contains an expression but should be a constant. @ org.eclipse.ee4j:project:1.0.7, ~/.m2/repository/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom, line 321, column 26


**Describe the solution you'd like**
Could this be somehow replaced? Frankly speaking, I don't even know how. But it would be wonderful if mvnd can be used parallel with maven itself.

**Describe alternatives you've considered**
Maybe it's a problem with mvnd and should be addressed there? I don't think so, but anything is possible.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/620/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/620,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5pGEts,yasson,1763199852,620,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-10-14T22:44:09Z,2023-10-14T22:44:09Z,"Found this [regression](https://issues.apache.org/jira/browse/MNG-7867),","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5pGEts/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/624,https://api.github.com/repos/eclipse-ee4j/yasson/issues/624,yasson,1940478644,624,JsonbConfig().withSerializers() / withDeserializers() and lambda as parameter value cause exception.,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-10-12T17:38:38Z,2023-10-12T17:48:46Z,"**Describe the bug**
In case when parameter of the withSerializers() / withDeserializers() call is lambda [() → {}], we have an JsonbException because of ClassCastException in ReflectionUtils.findParameterizedType(ReflectionUtils.java:342).

The reason: lambdas have no runtime information - comparing to the (anonymous) classes. Therefore, Class.getGenericInterfaces() just get us the lambda's implemented interface itself, not the generic interfaces of the implemented class or interface. So we can't cast it and get an exception. And the given class itself has no generic information. So in case of lambdas, we have no chance to get the generic information through the reflection.

**To Reproduce**
I duplicated the existing two deserializes tests with lambdas instead of the anonymous classes. Of course, this tests asserts the exception now.

**Expected behavior**
There should be no difference between the deserializer implemented as class, anonymous class or lambda.

**Additional context**
Because of Java internals, which in case of lambda don't specify how to handle the runtime information of lambdas or specifying to having none, there would be no chance to get this information during the runtime.

I can think about one possible solution, which is already used in Gson (see https://www.javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/GsonBuilder.html#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object) for example): to have an additional method with directly given type for a serializer / deserializer / adapter (the last isn't important, because adapter can't be implemented with lambda). This way, one don't have to go through reflection to get the generic interface of the parameter's implementation. Because it was already given as another parameter.

I understand, that this means a change in the upstream / implemented API. But I think that this is an issue, which another implementation should also see at this point.

Maybe there are also another solutions.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,yasson,1966357572,625,Polymorphic deserialization fails with a JsonValue property,zmarcos,17889472,Marcos Zolnowski,,OPEN,2023-10-28T01:46:22Z,2023-11-04T23:44:09Z,"**Describe the bug**

Polymorphic deserialization throws exception when deserializing to a class with a `JsonValue` property.

> jakarta.json.bind.JsonbException: Internal error: null
> 
> 	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:142)
> 	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
> 	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
> 	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)

**To Reproduce**
```Java
@JsonbTypeInfo(
        key = ""type"",
        value = {@JsonbSubtype(alias = ""jsv"", type = PolyContainer.JsValueContainer.class)}
)
public interface PolyContainer {
    class JsValueContainer implements PolyContainer {
        public JsonValue jsValue;
    }
}
```
```Java
public void test() throws Exception {
        try (Jsonb jsonb = JsonbBuilder.create()) {
            var container = new PolyContainer.JsValueContainer();
            container.jsValue = Json.createValue(""a json string"");
            String containerSerialized = jsonb.toJson(container);
            assertNotNull(containerSerialized);
            var deserializedDirectly = jsonb.fromJson(containerSerialized, PolyContainer.JsValueContainer.class);//good
            assertNotNull(deserializedDirectly);
            var deserializedFromPoly = jsonb.fromJson(containerSerialized, PolyContainer.class);//bad
            assertNotNull(deserializedFromPoly);
        }
    }
```
**Expected behavior**

The object to be deserialized the same way as it does when not using polymorphism.

**System information:**
 - OS: Windows 11
 - Java Version: 21
 - Yasson Version: 3.0.3

**Additional context**
Using a custom deserializer also does not work:
```Java
public class JSONGenericDeserializer implements JsonbDeserializer<JsonValue> {
    @Override
    public JsonValue deserialize(JsonParser jsonParser, DeserializationContext deserializationContext, Type type) {
        return jsonParser.getValue();
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/625/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qleih,yasson,1788209313,625,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-11-01T00:19:33Z,2023-11-01T00:19:33Z,"No offense, but I can't understand your example or test. What is the result you try to achieve? You try to deserialize into the interface, but this is impossible because interfaces have no fields. It's really hard to find something to serialize or deserialize in interfaces. ;-)

And I don't see any polymorphism here. This would work the same way without these annotations. Just take a look at the example in the [documentation](https://tomee.apache.org/jakartaee-10.0/javadoc/jakarta/json/bind/annotation/JsonbSubtype.html
) or [specification](https://jakarta.ee/specifications/jsonb/3.0/jakarta-jsonb-spec-3.0.html#polymorphic-types) : there you have more than one class derived from the interface. So it is nice to know exactly which class we try to serialize or deserialize.

I hope I could help you. Give me more information, please, if there is some misunderstanding.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qleih/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qlhxu,yasson,1788222574,625,NA,zmarcos,17889472,Marcos Zolnowski,,NA,2023-11-01T00:36:51Z,2023-11-01T00:36:51Z,"Typically this is how I would use it:
```Java
@JsonbTypeInfo(
        key = ""type"",
        value = {
        @JsonbSubtype(alias = ""jsv"", type = PolyContainer.JsValueContainer.class),
        @JsonbSubtype(alias = ""oth"", type = PolyContainer.OtherContainer.class)
        }
)
public interface PolyContainer {
    class JsValueContainer implements PolyContainer {
        public JsonValue jsValue;
    }
    class OtherContainer implements PolyContainer {
        public String value1;
        public double value2;
    }
}
```

> No offense, but I can't understand your example or test. What is the result you try to achieve?

If the type field is `""jsv""` it deserializes to `PolyContainer.JsValueContainer`, if `""oth""` to `PolyContainer.OtherContainer`.

I am sure this works, if you don't like interfaces change it to `abstract class`, it is the same problem.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qlhxu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qqGuB,yasson,1789422465,625,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-11-01T18:09:37Z,2023-11-01T18:09:37Z,"OK, thank you for the clarification. I got it: the issue isn't in polymorphism but in a JsonValue in the case of polymorphism. I don't see this with simple classes like String.

Furthermore, I think I found out why it is so and will try to produce a patch. I hope this will help. I would like to extend your test to cover more types.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qqGuB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qy15D,yasson,1791712835,625,NA,zmarcos,17889472,Marcos Zolnowski,,NA,2023-11-02T23:47:47Z,2023-11-02T23:47:47Z,"> OK, thank you for the clarification. I got it: the issue isn't in polymorphism but in a JsonValue in the case of polymorphism. I don't see this with simple classes like String.

Yes, yes, this is the issue. 

> Furthermore, I think I found out why it is so and will try to produce a patch. I hope this will help. I would like to extend your test to cover more types.

This is good news. I didn't test other JSON values, I only tried with the containing object being a record, had the same issue.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qy15D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5q5lDD,yasson,1793478851,625,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-11-04T15:40:19Z,2023-11-04T15:40:19Z,"I created a [patch](https://github.com/api-from-the-ion/yasson/commit/2efa478be67d1b933f25353a41254659584aa81a) for this bug. Good news: your bug is solved. Not so good news: there are some other issues detected that need to be discussed. So I explain it step by step.

Your actual issue could really be explained and corrected quickly. Everything is in the stack trace. In cases like yours, where we have some JsonValue or its inheritance in a deserialized object, the own parser class [implementation](https://github.com/eclipse-ee4j/yasson/blob/master/src/main/java/org/eclipse/yasson/internal/jsonstructure/JsonStructureToParserAdapter.java) is used for parsing the already parsed JSON structure. So this isn't a real parser but a facade, which implements the parser methods by simply forwarding the parts of the already parsed JSON structure.

The issue in your case is that not all the methods of the parser are implemented. And the code you are calling is trying to use one of them. Which leads to the exception. So I implemented the methods, and now it should work in your case.

But during the implementation, I saw another problem. There is no real specification for the JSON-P. The official [site](https://jakarta.ee/specifications/jsonp/2.1/) states that JavaDoc is the official documentation for this API. And in the case of these methods, the documentation isn't 100 % clear, which leaves room for interpretation.

So, for example, the missing method in your case is getValue(), which should give you a JsonValue object. The description is clear about what should happen if the parser is at the position of an array or an object in the parsed JSON. But there is no clear description of the other cases.

I ended up with a TDD approach. It looks like an old Glassfish implementation (from [here](https://javaee.github.io/jsonp/) go [here](https://github.com/javaee/jsonp)) was moved to Jakarta. And it is separated into the API part ([here](https://github.com/jakartaee/jsonp-api)) and the reference implementation part called [Parsson](https://github.com/eclipse-ee4j/parsson). The latest is used by Yasson (indirectly through the API and by providing it as a dependency) to really parse the given JSON.

At the end, I just wrote the tests for the Parsson implementation and used the same data and results to test my implementation. This way, I can at least assert that there is no difference in behavior between these two implementations. Because this is one of the ideas behind the API and interfaces in common: one shouldn't think about which implementation is behind it, this should work as expected no matter which implementation is used behind the scenes.

But back to your example: Parsson's implementation of the getValue() method delivers the results not only for the values in the JSON but also for the keys. Because the description isn't clear here, which part of the JSON should be delivered. But in the case of the parser, which is a facade for already parsed JSON structures, we have a problem: the keys are not some of the JsonValue inheritance but simply the String! So one needs something to create a JsonString from the String. And right now, this something (like jsonContext) is missing here.

Right now, because I can't create a JsonString for the keys, this parser realization is different from Parsson's one. It could be seen in the test. I will provide another change set with forwarded context and the creation of the JsonString from the keys.

Maybe we need some discussion about the API to make it more clear. Maybe even the current reference implementation (Parsson) isn't right here. Fun fact: during the development of this fix, I found a similar facade parser in Parsson itself. So there are at least two implementations there: [JsonParserImpl](https://github.com/eclipse-ee4j/parsson/blob/master/impl/src/main/java/org/eclipse/parsson/JsonParserImpl.java) is used for the parsing of real JSON data coming from the reader or stream. And [JsonStructureParser](https://github.com/eclipse-ee4j/parsson/blob/master/impl/src/main/java/org/eclipse/parsson/JsonStructureParser.java) is a facade parser used for forwarding information from an already parsed JSON structure, like the one Yasson is using. But this implementation implements even fewer methods than the Yasson one! So one would have even more exceptions in the case it uses Parsson's parser from JsonObject or JsonArray.

Maybe we need to correct it also in the Parsson. So we can use all of Parsson's parsers without fear of the exceptions from not-implemented methods. And after that, we could also use the JsonStructureParser in Yasson. Maybe I should also fork that repository and provide a patch for this situation there.

I also implemented three stream methods: getArrayStream(), getObjectStream() and getValueStream(). But there, I have the same questions. It is clear what the type of return values for these methods should be. And it's clear when these methods should return some value and when there should be an exception because of the wrong parser state in the parsed JSON. But what should be the content of these return values?

Should getArrayStream() deliver the current array as a stream, or the elements in the current array in the stream? Because the current Parsson's implementation is doing the latter now. The getObjectStream() method delivers a stream of key-value pairs. But should arrays and objects also be automatically sub-streamed? Or is it an obligation of the developer to manually do so in case he finds out that the current element in the stream is an array or an object, not a simple value? And the getValueStream() method right now gives me a stream with only one object—the whole root JSON itself. But shouldn't it be a stream of all elements in this root object, or from the point where the parser currently is? Just like getObjectStream(), but without the keys? These are all somehow legit questions about the API itself.

We need an opinion from somebody else involved here, like @Verdent.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5q5lDD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/625,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5q5-Uo,yasson,1793582376,625,NA,zmarcos,17889472,Marcos Zolnowski,,NA,2023-11-04T23:44:09Z,2023-11-04T23:44:09Z,"I suspected it could an issue on Parsson.

> But during the implementation, I saw another problem. There is no real specification for the JSON-P. The official [site](https://jakarta.ee/specifications/jsonp/2.1/) states that JavaDoc is the official documentation for this API. And in the case of these methods, the documentation isn't 100 % clear, which leaves room for interpretation.

This is very concerning.
Well, I found the spec on https://github.com/jakartaee/jsonp-api/blob/2.1.3/spec/src/main/asciidoc/jsonp.adoc

> [Introduction](https://github.com/jakartaee/jsonp-api/blob/2.1.3/spec/src/main/asciidoc/jsonp.adoc#introduction)
> Jakarta JSON Processing defines a Java® based framework for parsing, generating, transforming, and querying JSON documents.

That is it, the entire spec is this, at least they should say ""it is **JSR 374**, go look there"", or better yet copy-paste the entire thing and call it a day.

> So, for example, the missing method in your case is getValue(), which should give you a JsonValue object. The description is clear about what should happen if the parser is at the position of an array or an object in the parsed JSON. But there is no clear description of the other cases.

From the Jakarta EE javadoc: https://jakarta.ee/specifications/platform/10/apidocs/jakarta/json/stream/jsonparser#getValue()
```java
default JsonValue getValue()

Returns a JsonValue at the current parser position. 
If the parser state is START_ARRAY, the behavior is the same as getArray(). 
If the parser state is START_OBJECT, the behavior is the same as getObject(). 
For all other cases, if applicable, the JSON value is read and returned.

Returns:
the JsonValue at the current parser position.

Throws:
JsonException - if an i/o error occurs (IOException would be cause of JsonException)
IllegalStateException - when the parser state is END_OBJECT or END_ARRAY
JsonParsingException - if the parser encounters invalid JSON when advancing to next state.
NoSuchElementException - if there are no more parsing states.
Since:
1.1
```
It clearly says:

> For all other cases, if applicable, the JSON value is read and returned.

You can also find in the Jakarta EE  javadoc more details about `getArrayStream()`, `getObjectStream()` and `getValueStream()`. I find them a bit problematic, having to decide when to call skip, very likely to lead to mistakes.

In the context of a custom JSONB deserializer, it would be the best if the specification makes clear the `parser` parameter is a section of the content, only the current element can be parsed, and making the `close()` and skip methods to be non-operational.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5q5-Uo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/626,https://api.github.com/repos/eclipse-ee4j/yasson/issues/626,yasson,1970693018,626,DocumentationExampleTest: tests for date and number formats not working on installations with a non-English default locale.,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-10-31T15:11:32Z,2023-10-31T16:03:22Z,"**Describe the bug**
The two tests mentioned before are not working on the JRE with a non-English default locale. Cause: because in the given number format in the first test, only the pattern is set, but no locale is given, the default locale is used (see the standard description for annotation). In the case of the non-English default locale, the result JSON string could be different from the constant used in the test. Therefore, this test fails.

In the second test, there is no number formatting used because the standard doesn't give us the possibility to do so with the builder's configuration, not with annotation. There is still a question, why is it so in the standard? But aside from this, this test also only works on the installations with English as the default locale. This time, one uses the class without formatting to serialize and with formatting to deserialize. This also fails with non-English locales.

So there are two possibilities for the first test: either set both the pattern and locale in the annotations. Or respect the current default locale in the expected JSON string.

For the second test, there is only one solution: one should use the same class for serialization and deserialization. It is also a scenario that would work in the productive system: it would be hard to serialize and deserialize with such differently configured classes.

**To Reproduce**
Run the tests mentioned before.

**Expected behavior**
Tests not to fail.

**System information:**
 - OS: Linux
 - Java Version: 17.0.9
 - Yasson Version: 3.0.3

**Additional context**
I'll create a PR with the second solution.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/626/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/626,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qi2tf,yasson,1787521887,626,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-10-31T16:03:22Z,2023-10-31T16:03:22Z,The [PR](https://github.com/api-from-the-ion/yasson/commit/a8edee59a54b236b083d971c05c649fcf2b6b8e0).,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5qi2tf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/627,https://api.github.com/repos/eclipse-ee4j/yasson/issues/627,yasson,1978010641,627,"Components (adapters, de- serializes) not really cached because of the bug in the ComponentMatcher",api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-11-05T22:47:50Z,2023-11-05T22:47:50Z,"**Describe the bug**
Because of the bug in the introspectXXX methods of the ComponentMatcher, the component's cache isn't really used. Because of this, a new instance is created every time.

**To Reproduce**
The bug: the class of the component is compared to the class of the binding from the cache, not to the class of the component inside the binding. The first equals is always false; therefore, the instance from the binding is never returned. Instead, a new instance is created or returned.

IntelliJ even warns here because both instances are inherited from the different classes, so there is no chance for this to be true.

**Expected behavior**
If the component was already registered for the given type, the old registered instance should be reused, not the new or created one.

**System information:**
 - OS: Linux
 - Java Version: 11
 - Yasson Version: 3.0.3

**Additional context**
I will create a patch for this. Also, the only tests that could have more than one component on the type, the Number tests, will be extended to check that only one instance was created. This way, we can assert that the cache was used.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/627/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/628,https://api.github.com/repos/eclipse-ee4j/yasson/issues/628,yasson,1980735897,628,Make yasson to honor @JsonbProperty on the getter when deserializing,onacit,247819,Jin Kwon,,CLOSED,2023-11-07T07:38:10Z,2023-11-09T07:37:40Z,"**Is your feature request related to a problem? Please describe.**
May be or not.

**Describe the solution you'd like**
Make Yasson to honor `@JsonbProperty` on the getter when no `@JsonbProperty` defined on the setter.

**Describe alternatives you've considered**
N/A.

**Additional context**
The effectiveness of the `@JsonbProperty` for getters/setters is, at least to me, unclear.

```java
@Setter
@Getter
@EqualsAndHashCode
@ToString
public class User {

    @JsonbTransient
    private String name;

    @JsonbTransient
    private String lastName;
}
```

```java
public interface UserHolder {

    @JsonbProperty(""name"")
    default String getName() {
        //
    }

    // Works without @JsonbProperty, cuz it's just one word, `name`
    default void setName(String name) {
        //
    }

    @JsonbProperty(""last_name"")
    default String getLastName() {
        try {
            var field = getClass().getDeclaredField(""user"");
            if (!field.canAccess(this)) {
                field.setAccessible(true);
            }
            final User user = (User) field.get(this);
            if (user == null) {
                return null;
            }
            return user.getLastName();
        } catch (ReflectiveOperationException roe) {
            throw new RuntimeException(roe);
        }
    }

    @JsonbProperty(""last_name"") // Yasson tries to deserialize `lastName` without this annotation.
    default void setLastName(String lastName) {
        try {
            var field = getClass().getDeclaredField(""user"");
            if (!field.canAccess(this)) {
                field.setAccessible(true);
            }
            User user = (User) field.get(this);
            if (user == null) {
                user = new User();
                field.set(this, user);
            }
            user.setLastName(lastName);
        } catch (ReflectiveOperationException roe) {
            throw new RuntimeException(roe);
        }
    }
}
```
```java
@Setter // just for application
@Getter // just for application
@EqualsAndHashCode
@ToString
public class UserHolderImpl
        implements UserHolder {

    @JsonbTransient
    private User user;
}
```

I already checked that, with Jakarta JSON Binding, `@JsonbProperty` may be used on both getters and setters, especially for using different names.

>To provide custom name for given field (or JavaBean property), jakarta.json.bind.annotation.JsonbProperty may be used. JsonbProperty annotation may be specified on field, getter or setter method.

>If jakarta.json.bind.annotation.JsonbProperty is specified on getter method, it is used only for serialization. If jakarta.json.bind.annotation.JsonbProperty is specified on setter method, it is used only for deserialization.

> It is possible to specify different values for getter and setter method for jakarta.json.bind.annotation.JsonbProperty annotation. In such case the different custom name will be used for serialization and deserialization.

Can we make Yasson make the `@JsonbProperty` defined on the getter when the setter has no `@JsonbProperty`?

```java
@JsonbProeprty(""whatever_named"")
String getWhateverNamed() {}

//@JsonbProeprty(""whatever_named"") // Make yasson use `whatever_named` not `whateverNamed`
void setWhateverNamed(String whateverName) {}
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/628/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/628,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rcxm9,yasson,1802705341,628,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-11-08T21:26:04Z,2023-11-08T21:26:04Z,"Didn't you misspell something here ? In your last example, you are using an annotation that isn't from this API and is misspelled.

There are tests for this annotation in this project, like [JsonbPropertyTest](https://github.com/eclipse-ee4j/yasson/blob/master/src/test/java/org/eclipse/yasson/customization/JsonbPropertyTest.java) and [JsonbPropertyName](https://github.com/eclipse-ee4j/yasson/blob/master/src/test/java/org/eclipse/yasson/customization/model/JsonbPropertyName.java). May you take a look at them and tell us which one you mean? By the way, all these tests are working.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rcxm9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/628,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rd5HR,yasson,1802998225,628,NA,onacit,247819,Jin Kwon,,NA,2023-11-09T00:58:51Z,2023-11-09T00:58:51Z,"@api-from-the-ion Yes I did, sorry. Fixed.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rd5HR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/628,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rd9Cz,yasson,1803014323,628,NA,api-from-the-ion,145679039,Anton Pinsky,,NA,2023-11-09T01:20:28Z,2023-11-09T01:20:28Z,"Thank you, but in example, this is still misspelled. ;-) And did you take a look at the above mentioned tests? Are there any of them which resembles your situation? Or write your own test and publish it here.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5rd9Cz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/629,https://api.github.com/repos/eclipse-ee4j/yasson/issues/629,yasson,1985640522,629,Can not access package scope class,hantsy,854520,Hantsy Bai,hantsy@gmail.com,OPEN,2023-11-09T13:36:00Z,2024-03-27T13:59:10Z,"**Describe the bug**
[The test class](https://github.com/hantsy/quarkus-sandbox/blob/master/restclient-vertx/src/test/java/com/example/demo/JdkLocalDateTimeJsonSerDeserTest.java) was working before, but failed in the latest update.

**To Reproduce**

The class is an inner class in the test, which is working well before, but now I got an exception of field access error.

```bash
Error:  com.example.demo.JdkLocalDateTimeJsonSerDeserTest.testSeAndDes -- Time elapsed: 0.118 s <<< ERROR!
jakarta.json.bind.JsonbException: Error accessing getter 'getOccured' declared in 'class com.example.demo.TestObject'
	at org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:513)
	at org.eclipse.yasson.internal.model.PropertyModel.<init>(PropertyModel.java:157)
	at org.eclipse.yasson.internal.ClassParser.lambda$parseProperties$0(ClassParser.java:70)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1787)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.eclipse.yasson.internal.ClassParser.parseProperties(ClassParser.java:71)
	at org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:105)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:77)
	at org.eclipse.yasson.internal.serializer.SerializationModelCreator.serializerChain(SerializationModelCreator.java:93)
	at org.eclipse.yasson.internal.SerializationContextImpl.getRootSerializer(SerializationContextImpl.java:208)
	at org.eclipse.yasson.internal.SerializationContextImpl.serializeObject(SerializationContextImpl.java:196)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:133)
	at org.eclipse.yasson.internal.SerializationContextImpl.marshall(SerializationContextImpl.java:159)
	at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:131)
	at com.example.demo.JdkLocalDateTimeJsonSerDeserTest.testSeAndDes(JdkLocalDateTimeJsonSerDeserTest.java:44)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	Suppressed: jakarta.json.stream.JsonGenerationException: Generating incomplete JSON
		at org.eclipse.parsson.JsonGeneratorImpl.close(JsonGeneratorImpl.java:521)
		at org.eclipse.yasson.internal.JsonBinding.toJson(JsonBinding.java:130)
		... 4 more
Caused by: java.lang.IllegalAccessException: class is not public: com.example.demo.TestObject.getOccured[Ljava.lang.Object;@63813085/invokeVirtual, from public Lookup
	at java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:894)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkAccess(MethodHandles.java:3987)
	at java.base/java.lang.invoke.MethodHandles$Lookup.checkMethod(MethodHandles.java:3923)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:4072)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:4065)
	at java.base/java.lang.invoke.MethodHandles$Lookup.unreflect(MethodHandles.java:3451)
	at org.eclipse.yasson.internal.model.PropertyModel.createReadHandle(PropertyModel.java:510)
	... 23 more

```

**Expected behavior**

I should work as before.

**System information:**
 - OS: Github actions Ubuntu
 - Java Version: 21
 - Yasson Version: Quarkus 3.5.1 built-in

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/629/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/629,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs54kil0,yasson,2022844788,629,NA,hantsy,854520,Hantsy Bai,hantsy@gmail.com,NA,2024-03-27T13:59:09Z,2024-03-27T13:59:09Z,Any update here?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs54kil0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/630,https://api.github.com/repos/eclipse-ee4j/yasson/issues/630,yasson,1989764785,630,YassonParser stream and skip methods breaks parser state and DeserializationContext contract,api-from-the-ion,145679039,Anton Pinsky,,OPEN,2023-11-13T02:23:02Z,2023-11-13T02:23:02Z,"**Describe the bug**
I try to fix the ticket #611 and write the tests, which would test every method of the underlying YassonParser. The issue that I found: if you use getObjectStream() for example, you can't go past the end of the object you are inside. The parser state is then broken. It doesn't matter which kind of stream methods you are using, all consuming like collect() or just findFirst() to get the first one.

**To Reproduce**
The reason:  we return the stream from delegate but assuming, already before, that the whole object was consumed and lowering the current internal level. But especially in case of the getObjectStream() one can't reach the end of the object using the stream methods itself. So one have to use skipObject() to get to the end of the object, lowering the internal level value to zero. Trying to get the next value, one gets an exception from the validate() method.

Analyzing the situation, a discovered more probably issues. First, all of this stream methods simply returns the according streams from the underlying JsonP parser. Now if one uses this stream, one changes the state of this underlying parser, but YassonParser itself state doesn't change. The bug above is one of examples of such desynchronization.

On the other hand, this parser maintains the last event state in the given context by using setLastValueEvent() method. This is clearly not happens in case of the stream using and the skip methods.

**Expected behavior**
I expect to use stream methods without any side effects

**System information:**
 - OS: Linux
 - Java Version: 17
 - Yasson Version: 3.0.3

**Additional context**
I'll create a patch: I already implemented the stream methods in the JsonStructureToParserAdapter #625, where they were missed. The implementation using the hasNext(), next() and getValue() methods of the parser. I'll extract this code into a class which could create such streams for any given parser. And correct the skip methods; and write the test for all of this, so the code coverage of the YassonParser will reach 100%.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/630/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/633,https://api.github.com/repos/eclipse-ee4j/yasson/issues/633,yasson,2053699382,633,Get a warning '-H:IncludeResourceBundles=yasson-messages' is experimental,ramiswailem,26059392,Rami Swailem,rami.swailem@gmx.de,OPEN,2023-12-22T10:16:20Z,2023-12-22T10:16:20Z,"**Describe the bug**
Getting a warning during native image compilation when `io.quarkus:quarkus-jsonb:jar:3.6.4` is included as a dependency in GraalVM Native image builds.

`Warning: The option '-H:IncludeResourceBundles=yasson-messages' is experimental and must be enabled via '-H:+UnlockExperimentalVMOptions' in the future.`

```
[INFO] +- io.quarkus:quarkus-jsonb:jar:3.6.4:compile
[INFO] |  \- org.eclipse:yasson:jar:3.0.3:compile

```

**System information:**
 - OS: Linux
 - Java Version: openjdk version ""21.0.1"" 2023-10-17
OpenJDK Runtime Environment GraalVM CE 21.0.1-dev+12.1 (build 21.0.1+12-jvmci-23.1-b22)
OpenJDK 64-Bit Server VM GraalVM CE 21.0.1-dev+12.1 (build 21.0.1+12-jvmci-23.1-b22, mixed mode, sharing)
 - Yasson Version: 3.0.3, 3.0.4-SNAPSHOT","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/633/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/636,https://api.github.com/repos/eclipse-ee4j/yasson/issues/636,yasson,2068449775,636,Deserializing in GraalVM throws exception,rdehuyss,567842,Ronald Dehuysser,,OPEN,2024-01-06T07:29:42Z,2024-01-06T07:29:42Z,"Hi there,

I'm Ronald, the creator of [JobRunr](https://github.com/jobrunr/jobrunr). A user created an [issue with me](https://github.com/jobrunr/jobrunr/issues/887) where Yasson cannot deserialize an object as it tries to set an `Integer` to a `Boolean` field when using GraalVM in Quarkus. The generated json is generated by Yasson before deserializing again.

A reproducible test case is attached to the issue: https://github.com/tms0/jobrunr-jsonb-issue.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/636/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,yasson,2069893217,637,Multithreading leads to file corruption,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,OPEN,2024-01-08T07:40:05Z,2024-09-18T15:17:05Z,"**Describe the bug**

When writing JSON files in parallel with multiple threads (>>100), JSON files are very likely (>80%) to get corrupted like so:

```
{ 
  ""results"": [
    { ""key"": ""val]}
}
```

Sometimes even data from other files is included randomly, again invalidating the JSON file.
This does not happen with FasterXML Jackson nor with Apache Johnzon (the latter also implementing Jakarta JSON-B).

**To Reproduce**

Here's working code with Jackson:

```
public class PatchJsonWriter implements AutoCloseable {

    private final Path outputDir;
    private final ExecutorService executorService;

    private final ObjectMapper om;

    public PatchJsonWriter(Path outputDir, ExecutorService executorService) {
        this.outputDir = outputDir;
        this.executorService = executorService;

        this.om = new ObjectMapper().findAndRegisterModules().setDefaultPrettyPrinter(new MinimalPrettyPrinter());
    }

    public void writeParallel(Collection<PatchParameterInfo> parameterInfos) {
        List<CompletableFuture<Void>> futures =
                parameterInfos.stream().map(this::writeAsync).toList();

        CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).join();
    }

    private CompletableFuture<Void> writeAsync(PatchParameterInfo patchParameterInfo) {
        return CompletableFuture.runAsync(() -> doWritePatchParameterInfo(patchParameterInfo), this.executorService);
    }

    private void doWritePatchParameterInfo(PatchParameterInfo patchParameterInfo) {
        Path path = this.outputDir
                .resolve(patchParameterInfo.groupName())
                .resolve(patchParameterInfo.appNameName())
                .resolve(patchParameterInfo.version());
        Path file = path.resolve(""patch.json"");

        try {
            Files.createDirectories(path);
        } catch (IOException ioException) {
            throw new UncheckedIOException(ioException);
        }

        Logger logger = Logger.getLogger(PatchJsonWriter.class.getName());
        PatchParameterWrapper parameterWrapper = PatchParameterWrapper.from(patchParameterInfo.patchParameter());
        logger.info(() -> String.format(Locale.ROOT, ""Writing file [%s] with content [%s]"", file, parameterWrapper));

        try (OutputStream fos = Files.newOutputStream(
                file, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)) {
            this.om.writeValue(fos, parameterWrapper);
        } catch (IOException ioException) {
            throw new UncheckedIOException(ioException);
        } catch (Exception ex) {
            throw new RuntimeException(""Problem creating Jsonb instance"", ex);
        }
    }

    @Override
    public void close() {}
}
````

This is the version I created with the latest Yasson version (3.0.4 -- where are the release notes btw?):

```
public class PatchJsonWriter implements AutoCloseable {

    private final Path outputDir;
    private final ExecutorService executorService;
    private final Jsonb jsonb;

    public PatchJsonWriter(Path outputDir, ExecutorService executorService) {
        this.outputDir = outputDir;
        this.executorService = executorService;

        this.jsonb = JsonbFactory.create();
    }

    // omit sne methods

    private void doWritePatchParameterInfo(PatchParameterInfo patchParameterInfo) {
        // ... same

        try (OutputStream fos = Files.newOutputStream(
                file, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)) {
            this.jsonb.toJson(PatchParameterWrapper.from(patchParameterInfo.patchParameter()), fos);
        } catch (IOException ioException) {
            throw new UncheckedIOException(ioException);
        }
    }

    @Override
    public void close() throws IOException {
        try {
            this.jsonb.close();
        } catch (IOException ioException) {
            throw ioException;
        } catch (Exception other) {
            throw new UnsupportedOperationException(other);
        }
    }
}
```

Using this code, some files are corrupted like shown above:

```
{
  ""result"": [
    {
      ""name"": ""app1.service.url""
    },
    {
      ""name"": ""app1.service.ttl""
    },
    {
      ""nawr"": ""app1.jwt.expiration""
    },
    {
      ""namwrc.""app1.ldap.searchbase""
        },
            ""name""ot""app1.ldap.selfservice_searchba,
      n""  ""erap.alias""
        },
        {
            ""name"": ""otherappport""
        }
    ]
} ""app1.jwt.encryptionKeySource""
        },
        }
    ]
}
```

The Jackson variant does not suffer from this behaviour.
Yasson is mixing in contents from another file into this example file


**Expected behaviour**

* Write valid JSON
* do not leak data from other files into any files

**System information:**

 - OS: [e.g. Linux, Windows, Mac]: Linux
 - Java Version: [e.g. 8, 11]: 17
 - Yasson Version: [e.g. 1.0.5]: 3.0.4 (released, undocumented)

**Additional context**

* Non-JakartaEE CLI app
* Executor used is `ExecutorService executorService = Executors.newWorkStealingPool();`
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/637/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5w2W7o,yasson,1893297896,637,NA,rdehuyss,567842,Ronald Dehuysser,,NA,2024-01-16T08:47:59Z,2024-01-16T08:47:59Z,"We from [JobRunr](https://github.com/jobrunr/jobrunr) have the same issue. We are using Yasson as an option to generate JSON from some objects and sometimes it generates invalid JSON - this is with really limited parallelism (about 2 simultaneous requests).

The invalid JSON:
```json
[{""deleteSucceededJobsAfter"":129600.000000000,""firstHeartbeat"":""2024-01-16T08:38:09.971713Z"",""id"":""6e836e6f-3bea-4dc8-9d90-804ce2d3f76c"",""lastHeartbeat"":""2024-01-16T08:38:39.994807Z"",""name"":""Ismailas-MacBook-Pro.local"",""permanent,{""type"":""severe-jobrunr-exception""0000000,""pollIntervalInSeconds"":15,""processAllocatedMemory"":18048136,""processCpuLoad"":0.0020519469633203924,""processFreeMemory"":17161821048,""processMaxMemory"":17179869184,""running"":true,""systemCpuLoad"":0.2227047146401985,""systemFreeMemory"":20553973760,""systemTotalMemory"":68719476736,""workerPoolSize"":96}]
```

Notice the permanent where invalid json is generated. Below is the valid json:
```json
[{""deleteSucceededJobsAfter"":129600.000000000,""firstHeartbeat"":""2024-01-16T08:38:09.971713Z"",""id"":""6e836e6f-3bea-4dc8-9d90-804ce2d3f76c"",""lastHeartbeat"":""2024-01-16T08:41:40.032196Z"",""name"":""Ismailas-MacBook-Pro.local"",""permanentlyDeleteDeletedJobsAfter"":259200.000000000,""pollIntervalInSeconds"":15,""processAllocatedMemory"":48091728,""processCpuLoad"":4.15962064712972E-4,""processFreeMemory"":17131777456,""processMaxMemory"":17179869184,""running"":true,""systemCpuLoad"":0.17733182589033353,""systemFreeMemory"":20528300032,""systemTotalMemory"":68719476736,""workerPoolSize"":96}]
```

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5w2W7o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-hYs7,yasson,2122681147,637,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2024-05-21T13:47:50Z,2024-05-21T13:47:50Z,"@rdehuyss for me I found that I was actually writing to the same file twice. Switching to Apache Johnzon only fixed it because it was way faster. For me, this is closed. But I can leave it open for you.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-hYs7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-hcye,yasson,2122697886,637,NA,rdehuyss,567842,Ronald Dehuysser,,NA,2024-05-21T13:55:13Z,2024-05-21T13:55:13Z,@bmarwell : these were two different Strings (so not even files).,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs5-hcye/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6MjQSR,yasson,2358051985,637,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2024-09-18T10:08:59Z,2024-09-18T10:08:59Z,"Hello @bmarwell and @rdehuyss ,
I have tried to reproduce this and no luck so far.

Would you please be so kind and try to verify, if this still happens with the latest release?","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6MjQSR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/637,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Ml8-K,yasson,2358759306,637,NA,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,NA,2024-09-18T15:17:04Z,2024-09-18T15:17:04Z,No I was not able to reproduce it. Maybe it was overlapping writing to the same files after all?,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Ml8-K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/638,https://api.github.com/repos/eclipse-ee4j/yasson/issues/638,yasson,2101760431,638,CVE-2023-4043 vulnerability in parsson-1.1.0.jar,funnelspider,59641306,,,CLOSED,2024-01-26T08:01:09Z,2024-09-13T09:45:33Z,"Eclipse yasson 3.0.3 uses org.eclipse.parsson 1.1.0 which is vulnerable to CVE-2023-4043
Is there a plan to upgrade to eclipse.parsson 1.1.5 which apparently doesn't have this issue ? 


In Eclipse Parsson before versions 1.1.4 and 1.0.5, Parsing JSON from untrusted sources can lead malicious actors to exploit the fact that the built-in support for parsing numbers with large scale in Java has a number of edge cases where the input text of a number can lead to much larger processing time than one would expect.


To mitigate the risk, parsson put in place a size limit for the numbers as well as their scale.


CWE-834 Excessive Iteration

CVSSv3:
Base Score: HIGH (7.5)
Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H

References:
MISC - https://github.com/eclipse-ee4j/parsson/pull/100
MISC - https://gitlab.eclipse.org/security/vulnerability-reports/-/issues/13
OSSINDEX - [[CVE-2023-4043] CWE-20: Improper Input Validation](https://ossindex.sonatype.org/vulnerability/CVE-2023-4043?component-type=maven&component-name=org.eclipse.parsson%2Fparsson&utm_source=dependency-check&utm_medium=integration&utm_content=8.4.0)
OSSIndex - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2023-4043
OSSIndex - https://github.com/eclipse-ee4j/parsson/pull/100
Vulnerable Software & Versions: ([show less](https://github.com/eclipse-ee4j/yasson/issues/new?assignees=&labels=bug&projects=&template=bug_report.md&title=#))

[cpe:2.3:a:eclipse:parsson:*:*:*:*:*:*:*:* versions up to (excluding) 1.0.5](https://web.nvd.nist.gov/view/vuln/search-results?adv_search=true&cves=on&cpe_version=cpe%3A%2Fa%3Aeclipse%3Aparsson)
[cpe:2.3:a:eclipse:parsson:*:*:*:*:*:*:*:* versions from (including) 1.1.0; versions up to (excluding) 1.1.4](https://web.nvd.nist.gov/view/vuln/search-results?adv_search=true&cves=on&cpe_version=cpe%3A%2Fa%3Aeclipse%3Aparsson)","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/638/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/638,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6L-4xD,yasson,2348518467,638,NA,Verdent,4483705,David Král,david.k.kral@oracle.com,NA,2024-09-13T09:45:33Z,2024-09-13T09:45:33Z,Parsson is upgraded to version 1.1.7 now. Closing this issue. Thank you for reporting it.,"{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6L-4xD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/639,https://api.github.com/repos/eclipse-ee4j/yasson/issues/639,yasson,2122500880,639,Serialization of generic root type with custom serializer not working,bpasson,6814512,Bas Passon,,OPEN,2024-02-07T08:53:30Z,2024-02-07T08:57:55Z,"**Describe the bug**
When using a custom serializer for a generic root type yasson does not use it when you specify the generic type in stead of the raw type.

**To Reproduce**
I created a small reproducer project which demonstrates the issue.

1. git clone https://github.com/bpasson/eclipse-yasson-issue-639
2. cd eclipse-yasson-issue-639
3. ./mvnw clean verify

See the failing test cases.

**Expected behavior**
At least the `TypedRecordSerializerParameterized` from the reproducer project should be used to serialize the `TypedRecord` instances. Both `TypedRecordSerializerParameterized` and `TypedRecordSerializerRaw` working might be fine too, but I cannot see if that causes difficulties elsewhere.

**System information:**
 - OS: Mac
 - Java Version: 21
 - Yasson Version: 3.0.3
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/639/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,yasson,2146096265,641,Is Yasson still maintained?,rdehuyss,567842,Ronald Dehuysser,,OPEN,2024-02-21T08:22:12Z,2024-09-05T22:49:41Z,"I want to address the elephant in the room here and ask whether Yasson is still maintained...

Please don't take this the wrong way but important issues like #636, #637, #638 do not get any response and I wonder whether I should continue to support it in [JobRunr](https://github.com/jobrunr/jobrunr). 
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/641/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6HHLCy,yasson,2266804402,641,NA,t1,185260,Rüdiger zu Dohna,ruediger.dohna@codecentric.de,NA,2024-08-03T15:25:44Z,2024-08-03T15:25:44Z,"I can't give an official answer to this question, but Yasson was built as the Reference Implementation RI for Jakarta JSON Binding JSON-B; i.e. its purpose is to prove that it's possible to implement that standard. Being production ready never was a core design goal. And updates come mainly for new versions of JSON-B.

It would be false to conclude that JSON-B is not a viable, just because Yasson seems to be. IIRC, there was even a motion to support JSON-B in Jackson, but I haven't heard any updates on that for a long time (I didn't find the link where I saw that ~5 years ago). There are other implementations, e.g. https://johnzon.apache.org. Maybe that would be a better option for you.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6HHLCy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6IZw6A,yasson,2288455296,641,NA,bh-tt,71650427,,,NA,2024-08-14T11:02:35Z,2024-08-14T11:02:35Z,"@t1 are you affiliated with this project? I dont see any commits from you, so the following comment is likely not meant for you, only for the project maintainers.

I am a little disappointed by the maintenance of this project, for the following reasons:
 - the jakarta JSON Binding github repo lists this project (and no others!) as a compatible implementation, which will naturally lead many developers to use this project
 - there are not many alternatives implementing the jsonb spec out there, I cannot find a list with other implementations than yasson
 - several major frameworks (Quarkus, Spring Boot 3, where Spring actually moved away from johnzon during the 2 -> 3 upgrade) use yasson as the provider for JSONB

I understand that the maintainers do this work in their private time for no compensation. However, for a pretty key ecosystem project like this (maven centrals usage statistics seem to be wrong, I highly doubt that there are only 200ish projects out there using jakarta json binding) to go unmaintained is bad for the ecosystem as a whole. 

Perhaps this project should call for additional maintainers? The project currently seems to be in full maintenance mode (e.g. only the bare minimal necessary changes are being done) under a single committer, given the current issue list 1 or 2 additional maintainers seem to be necessary to keep this project relevant.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6IZw6A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6JuJdX,yasson,2310575959,641,NA,ivargrimstad,149188,Ivar Grimstad,ivar.grimstad@gmail.com,NA,2024-08-26T16:14:25Z,2024-08-26T16:14:25Z,"Thank you @rdehuyss for raising the issue. I will send an email on the project mailing list and ask the committers to comment (btw, please join the list if you are not subscribing to it yet).

I see that the committer list is fairly short (https://projects.eclipse.org/projects/ee4j.yasson/who), so I am sure they would be very happy for contributions adressing any of the issues mentioned.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6JuJdX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6K-7gW,yasson,2331752470,641,NA,m0mus,9343261,Dmitry Kornilov,dmitry.kornilov@oracle.com,NA,2024-09-05T13:55:41Z,2024-09-05T13:55:41Z,"Thanks for using Yasson! Yes, the project is still being maintained. It might not be as actively maintained as we’d all prefer, but it’s definitely still alive. The folks working on it are juggling other projects too, so it’s all about priorities.

By the way, we’re always happy to get pull requests (PRs)—they can help speed things up!

About issue #638: it's fixed, and I see Parsson 1.1.7 is now being used. We’ll also check out the other issues you mentioned.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6K-7gW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/641,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6LC-LJ,yasson,2332811977,641,NA,rdehuyss,567842,Ronald Dehuysser,,NA,2024-09-05T22:49:40Z,2024-09-05T22:49:40Z,"I'd love to help but as I'm in the opensource business myself, I'm juggling other priorities too (I know, an excuse ☺️).

Thanks for the update!","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6LC-LJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/647,https://api.github.com/repos/eclipse-ee4j/yasson/issues/647,yasson,2472733086,647,JsonBinding will close writer,lazyrobert,1594466,Robert Lai,lazyrobert@live.cn,OPEN,2024-08-19T08:10:27Z,2024-08-19T08:10:27Z,"**Describe the bug**
@Override
    public void toJson(Object object, Type type, Writer writer) throws JsonbException {
        final SerializationContextImpl marshaller = new SerializationContextImpl(jsonbContext, type);
        try (JsonGenerator generator = writerGenerator(writer)) {
            marshaller.marshallWithoutClose(object, generator);
        }
    }

try with resource will auto invoke JsonGenerator.close, and close the writer, so marshallWithoutClose has no effect

**To Reproduce**
Steps to reproduce the bug

**Expected behavior**
A clear and concise description of what you expected to happen.

**System information:**
 - OS: Windows
 - Java Version: 17
 - Yasson Version: 3.0.4

**Additional context**
Add any other context about the problem here.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/647/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/649,https://api.github.com/repos/eclipse-ee4j/yasson/issues/649,yasson,2493014555,649,Custom serializers/deserializers and adapters ignored for Map keys (and values).,martinsteger,47448839,Martin Steger,martin@rtbrick.com,OPEN,2024-08-28T21:24:27Z,2024-08-28T21:28:30Z,"**Describe the bug**
Similar to issue #587, which has been fixed in v3.0.3, custom serializers/deserializers and adapters are also ignored for map keys and values. Consider a map with a custom key and an adapter that translates this custom key to a string, then the map should be serialized into a JSON object 

```
{
  ""key"":""value""
}

```

rather than an array of key/value objects.

```
[
  {
    ""key"":{""value"":""key""},
    ""value"":""value"",
  }
]
```

**To Reproduce**
The unit test below allows reproducing the issue.

```
package maps;

import static jakarta.json.bind.JsonbBuilder.create;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import jakarta.json.bind.Jsonb;
import jakarta.json.bind.adapter.JsonbAdapter;
import jakarta.json.bind.annotation.JsonbTypeAdapter;

public class MapTest {
	
	public static class CustomKeyAdapter implements JsonbAdapter<CustomKey, String> {

		@Override
		public String adaptToJson(CustomKey key) throws Exception {
			return key != null ? key.toString() : null;
		}

		@Override
		public CustomKey adaptFromJson(String s) throws Exception {
			return s != null && s.length() > 0 ? new CustomKey(s) : null;
		}
		
	}
	
        // A simple custom key that can be translated into a string.
	@JsonbTypeAdapter(CustomKeyAdapter.class)
	public static class CustomKey {
		
		private String value;
		
		public CustomKey(String value) {
			this.value = value;
		}
		
		public String getValue() {
			return value;
		}
		
	}
	
	@Test
	public void marshalMap() {
		Map<CustomKey,String> map = new HashMap<>();
		map.put(new CustomKey(""key""),""value"");
		
		Jsonb jsonb = create();
		
		String json = jsonb.toJson(map);
		assertEquals(""{\""key\"":\""value\""}"", json);
		
	}

}
```

The unit test fails with the following error message:

```
org.junit.ComparisonFailure: expected:<[{""key"":""value""}]> but was:<[[{""key"":{""value"":""key""},""value"":""value""}]]>
```


**Expected behavior**
Serialize maps into a JSON object if the custom key type can be adapted to a string.

**System information:**
 - OS: [Mac, Ubuntu]
 - Java Version: [19]
 - Yasson Version: [3.0.3]

**Additional context**
In a [comment in issue 587](https://github.com/eclipse-ee4j/yasson/issues/587#issuecomment-1673461840) it was already pointed out that the fix should be applied to maps and arrays too.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/649/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/650,https://api.github.com/repos/eclipse-ee4j/yasson/issues/650,yasson,2538583340,650,Recursive mapping issue (despite custom serializers),sdaschner,6815170,Sebastian Daschner,git@sebastian-daschner.de,OPEN,2024-09-20T11:31:20Z,2024-09-20T11:31:20Z,"**Describe the bug**
Class structures that contain a recursive reference can't be mapped to JSON, even though when one defines custom JSON-B serializers or type adapters. This doesn't really make sense, since serializing (back) references to, for example, scalar values stops the recursion.

**To Reproduce**

Reproducer here: https://github.com/sdaschner/quarkus-playground/releases/tag/jsonb-recursive-mapping

```
mvn quarkus:dev
curl localhost:8080/json-test
```

(or run `JsonIT` in the project)

This will cause an exception like:

```
Caused by: jakarta.json.bind.JsonbException: Unable to serialize property 'schedule' from com.sebastian_daschner.coffee.JsonTestResource.Item
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:43)
[...]
	at org.eclipse.yasson.internal.serializer.ObjectSerializer.lambda$serialize$0(ObjectSerializer.java:41)
	... 25 more
Caused by: jakarta.json.bind.JsonbException: Recursive reference has been found in class class com.sebastian_daschner.coffee.JsonTestResource$Schedule.
	at org.eclipse.yasson.internal.serializer.RecursionChecker.serialize(RecursionChecker.java:36)
[...]
```

As you can see in the code (`Schedule` -> `Item`), the back reference `Item#schedule` is annotated with `@JsonbTypeSerializer(ScheduleNameSerializer.class)`. Only if *also* the reference `Schedule#item` is annotated with a similar serializer, it works. Adding `@JsonbTransient` on the back reference also works.

**Expected behavior**

The following output would be expected from that test:

```json
{
  ""item"": {
    ""name"": ""Item"",
    ""schedule"": ""Name""
  },
  ""name"": ""Name""
}
```

**System information:**
 - Yasson Version: 3.0.3

**Additional context**
Originally submitted in https://github.com/quarkusio/quarkus/issues/42442
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/650/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/651,https://api.github.com/repos/eclipse-ee4j/yasson/issues/651,yasson,2581236597,651,Deserialization of record component with `@JsonbDateFormat(TIME_IN_MILLIS)` fails,jacopo-cavallarin,132676586,Jacopo Cavallarin,,OPEN,2024-10-11T12:12:39Z,2024-10-15T08:52:51Z,"**Describe the bug**
Using this record as example:
```java
record Example(@JsonbDateFormat(TIME_IN_MILLIS) Instant longInstant, Instant stringInstant) {}
```
and this JSON to deserialize:
```json
{ ""longInstant"": 1728574424000, ""stringInstant"": ""2024-10-11T13:28:22Z"" }
```
The deserialization fails with the following exception:
```
jakarta.json.bind.JsonbException: Internal error: Pattern includes reserved character: '#'
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:142)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)
	...
Caused by: java.lang.IllegalArgumentException: Pattern includes reserved character: '#'
	at java.base/java.time.format.DateTimeFormatterBuilder.parsePattern(DateTimeFormatterBuilder.java:2053)
	at java.base/java.time.format.DateTimeFormatterBuilder.appendPattern(DateTimeFormatterBuilder.java:1907)
	at java.base/java.time.format.DateTimeFormatter.ofPattern(DateTimeFormatter.java:593)
	at org.eclipse.yasson.internal.AnnotationIntrospector.lambda$getConstructorDateFormatter$9(AnnotationIntrospector.java:595)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getConstructorDateFormatter(AnnotationIntrospector.java:595)
	at org.eclipse.yasson.internal.model.CreatorModel.<init>(CreatorModel.java:55)
	at org.eclipse.yasson.internal.AnnotationIntrospector.createJsonbCreator(AnnotationIntrospector.java:212)
	at org.eclipse.yasson.internal.ClassMultiReleaseExtension.findCreator(ClassMultiReleaseExtension.java:55)
	at org.eclipse.yasson.internal.AnnotationIntrospector.getCreator(AnnotationIntrospector.java:189)
	at org.eclipse.yasson.internal.AnnotationIntrospector.introspectCustomization(AnnotationIntrospector.java:798)
	at org.eclipse.yasson.internal.MappingContext.lambda$createParseClassModelFunction$1(MappingContext.java:88)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1713)
	at org.eclipse.yasson.internal.MappingContext.getOrCreateClassModel(MappingContext.java:77)
	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:122)
	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:137)
	... 9 more
```

**To Reproduce**
Run the following Junit5 test:
```java
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.annotation.JsonbDateFormat;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.Instant;

import static jakarta.json.bind.annotation.JsonbDateFormat.TIME_IN_MILLIS;
import static java.time.temporal.ChronoUnit.MILLIS;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;

class TimeInMillisRecordDeserializationTest {
    public record Example(@JsonbDateFormat(TIME_IN_MILLIS) Instant longInstant, Instant stringInstant) {}

    Jsonb jsonb;

    @BeforeEach
    void setUp() {
        jsonb = JsonbBuilder.create();
    }

    @AfterEach
    void tearDown() throws Exception {
        jsonb.close();
    }

    @Test
    void shouldDeserialize() {
        var expected = new Example(Instant.now().truncatedTo(MILLIS), Instant.now());

        var json = ""{ \""longInstant\"": %d, \""stringInstant\"": \""%s\"" }""
                .formatted(expected.longInstant().toEpochMilli(), expected.stringInstant());

        var actual = assertDoesNotThrow(() -> jsonb.fromJson(json, Example.class));

        assertEquals(expected, actual);
    }
}
```
This test will fail with the exception mentioned above.

**Expected behavior**
The test passes successfully.

**System information:**
 - OS: macOS 15.0.1
 - Java Version: 23
 - Yasson Version: 3.0.4

**Additional context**
Using the annotation on the record level works fine, but forces all datetime components in the record to be deserialized from epoch millis:
```java
@JsonbDateFormat(TIME_IN_MILLIS)
record Example(Instant longInstant, Instant stringInstant) {}
```

Also, the annotation works fine on POJOs:
```java
class Example {
    @JsonbDateFormat(TIME_IN_MILLIS)
    final Instant longInstant;
    final Instant stringInstant;
    
    @JsonbCreator
    Example(Instant longInstant, Instant stringInstant) { /* ... */ }

    // getters,equals,hashCode...
}
```
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/651/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/652,https://api.github.com/repos/eclipse-ee4j/yasson/issues/652,yasson,2624622846,652,Yasson ignores @JsonbTypeAdapter on class level of object in Collection,mkarg,1701815,Markus KARG,markus@headcrashing.eu,OPEN,2024-10-30T16:16:08Z,2024-10-30T16:17:13Z,"**Describe the bug**

According to the JSON-B Specification v3 chapter 4.7.1...
>There are two ways how to register JsonbAdapter:
>* Using JsonbConfig::withAdapters method;
>* Annotating a class field with JsonbTypeAdapter annotation.

Yasson 3.0.4 inconsistently handles adapters for objects in collections:
* Using `JsonbConfig::withAdapters`, Yasson *correctly* respects the adapter for an object in a collection.
* Using `@JsonbTypeAdapter` on the class, Yasson *incorrectly* ignores the adapter for an object in a collection but serializes the object's public fields instead.

**To Reproduce**
```java
public class YassonBug {

  public static void main(String[] arguments) throws Exception {
    var c = new C();

    // Correctly applies @JsonbTypeAdapter in both cases
    try (var jsonb = JsonbBuilder.newBuilder().build()) {
      System.out.println(jsonb.toJson(c)); // correctly prints `""correct value""`
      System.out.println(jsonb.toJson(Set.of(c))); // correctly prints `[""correct value""]`
    }

    // Correctly applies config in both cases
    var config = new JsonbConfig().withAdapters(new CAdapter());
    try (var jsonb = JsonbBuilder.newBuilder().withConfig(config).build()) {
      System.out.println(jsonb.toJson(Set.of(c))); // correctly prints `[""correct value""]`
      System.out.println(jsonb.toJson(c)); // correctly prints `""correct value""`
    }

    // Incorrectly applies @JsonbTypeAdapter in the `List.of(c)` case (and remembers wrong decision in the `c` case)
    try (var jsonb = JsonbBuilder.newBuilder().build()) {
      System.out.println(jsonb.toJson(Set.of(c))); // incorrectly prints `[{""wrong"":""value""}]`, should be `[""correct value""]`
      System.out.println(jsonb.toJson(c)); // incorrectly prints `{""wrong"":""value""}`, should be `""correct value""`
    }
  }

  @JsonbTypeAdapter(CAdapter.class)
  public static class C {
    public String wrong = ""value""; 
  }

  public static class CAdapter implements JsonbAdapter<C, String> {

    @Override
    public String adaptToJson(C obj) throws Exception {
      return ""correct value"";
    }

    @Override
    public C adaptFromJson(String obj) throws Exception {
      throw new UnsupportedOperationException(""Unimplemented method 'adaptFromJson'"");
    }

  }

}
```

**Expected behavior**

Yasson should correctly respect adapter for object in collection registered using `@JsonbTypeAdapter` just in the same ways it already correctly respects adapters set using `::withAdapters`.

**System information:**

 - OS: Windows
 - Java Version: 19
 - Yasson Version: 3.0.4

**Additional context**

See also https://github.com/eclipse-ee4j/yasson/issues/603.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/652/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/653,https://api.github.com/repos/eclipse-ee4j/yasson/issues/653,yasson,2638657632,653,Default Serialization of java.util.Date does not generate ISO-8601 conform string,RobertK66,16986510,,,OPEN,2024-11-06T16:44:03Z,2024-11-07T12:44:14Z,"**Describe the bug**
Using out of box configuration. (jsonb-3.0 feature of Liberty server 24.0.0.9) for REST services delivering a JSON record gives the following string value for a java.util.Date field: 

**""2024-11-06T16:06:15.168Z[UTC]""**

This string having a ""[UTC]"" postfix showing (a assumed) UTC/+0 ZoneID in textual form is not ISO-8601 conform. It does raise exceptions when you try to deserialize this with current up to date dotnet JSON deserializer.

**To Reproduce**
use java.util.Date fields in REST response content without any annotations or configuration of the jsonb implementation.

**Expected behavior**
The serialized string should be ISO-8601 conform:

**""2024-11-06T16:06:15.168Z""**

**System information:**
 - OS: windows, IBM-I
 - Java Version: 15
 - Yasson Version: 3.0.? - could not pin down the exact version used by Liberty Server 24.0.0.9

**Additional context**
The javadoc of the used [DateTimeFormatter.ISO_DATE_TIME](  https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_DATE_TIME  ) states that it is only 'ISO-Like'. As described there, you can avoid to generate the non ISO standard square brackets by using a ""ZoneOffset"" instead of a ""zoneID"".

This would be an easy fix by changing the line 28 of the class DateSerializer.java from:

`private static final DateTimeFormatter DEFAULT_DATE_FORMATTER = DateTimeFormatter.ISO_DATE_TIME.withZone(UTC);`

to:

`private static final DateTimeFormatter DEFAULT_DATE_FORMATTER = DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC);`

This makes a difference here because the const UTC  in the current code is referencing a ZoneID by:

`static final ZoneId UTC = ZoneId.of(""UTC"");`



","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/653/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/653,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SwWFi,yasson,2462146914,653,NA,greek1979,6195437,Leonid,leonid.malikov@gmail.com,NA,2024-11-07T12:44:13Z,2024-11-07T12:44:13Z,"I've seen this issue before, too, and fully concur that a fix is needed...","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6SwWFi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/654,https://api.github.com/repos/eclipse-ee4j/yasson/issues/654,yasson,2658452772,654,@JsonbCreator with static factory method and generic type fails,f-wunderlich,183387735,,,OPEN,2024-11-14T11:00:41Z,2024-11-14T11:00:41Z,"Might be related to #599, but the symptoms are different and the proposed workaround does not work. Take the example posted there, but with a static factory method:
```
public class RuleResponse<T> {
    private T result;

    @JsonbCreator
    public static <T> RuleResponse<T> of(@JsonbProperty(""result"") T result) {
      final RuleRespone<T> response = new RuleRespone<T>();
      response.result = result;
      return response;
    }

    public T getResult() {
        return result;
    }
}
```

Then,
```
JsonbBuilder.create().fromJson(
  expectedJson, 
  new TypeLiteral<RuleResponse<Integer>>() {
    private static final long serialVersionUID = 1L;
  }
  .getType()
);
```
attempts to set `RuleResponse#result` to a `BigDecimal` instead of an `Integer`.

This is caused by `VariableTypeInheritanceSearch#searchRuntimeTypeArgument` due to this block:
```
        if (ReflectionUtils.getRawType(runtimeType) != typeVar.getGenericDeclaration()) {
            return null;
        }
```

`typeVar.getGenericDeclaration()` returns a `Method`, thus that test will always fail. It is unclear why this test is there. Simply removing it should result in correct resolution.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/654/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/655,https://api.github.com/repos/eclipse-ee4j/yasson/issues/655,yasson,2668440695,655, java.sql.Time throws java.lang.UnsupportedOperationException when serialized.,rogeriosorroche,29102679,,,OPEN,2024-11-18T12:50:38Z,2024-11-18T12:57:40Z,"**Describe the bug**
 java.sql.Time throws java.lang.UnsupportedOperationException when serialized because org.eclipse.yasson.internal.serializer.types.DateSerializer tries to convert the object to a java.time.Instant, using method java.sql.Time.toInstant(). For type java.sql.Date this issue was handled in the class org.eclipse.yasson.internal.serializer.types.SqlDateSerializer. The same aproach may be used to  java.sql.Time.

**To Reproduce**
Create a class with a java.sql.Time field:

```
public class MyBean {

     private java.sql.Time time;

    public java.sql.Time getTime() {
          return time;
    }

    public void setTime(java.sql.Time time) {
          this.time = time;
    }

}

// Try to serialize this bean.

MyBean value = new MyBean();
value.setTime(java.sql.Time.valueOf(""10:00:00""));

Jsonb jsonb = JsonbBuilder.newBuilder().build();
String str = jsonb.toJson(value);

```

**Expected behavior**
Must serialize correctly, but throws UnsupportedOperationException:

Caused by: java.lang.UnsupportedOperationException
	at java.sql/java.sql.Time.toInstant(Time.java:281)
	at org.eclipse.yasson@3.0.4/org.eclipse.yasson.internal.serializer.types.DateSerializer.toInstant(DateSerializer.java:36)
	at org.eclipse.yasson@3.0.4/org.eclipse.yasson.internal.serializer.types.SqlDateSerializer.toInstant(SqlDateSerializer.java:36)
	at org.eclipse.yasson@3.0.4/org.eclipse.yasson.internal.serializer.types.DateSerializer.formatDefault(DateSerializer.java:41)
	at org.eclipse.yasson@3.0.4/org.eclipse.yasson.internal.serializer.types.SqlDateSerializer.formatDefault(SqlDateSerializer.java:45)
	at org.eclipse.yasson@3.0.4/org.eclipse.yasson.internal.serializer.types.SqlDateSerializer.formatDefault(SqlDateSerializer.java:23)
....

**System information:**
 - OS: any
 - Java Version: >= 8
 - Yasson Version: 3.0.4

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/655/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/656,https://api.github.com/repos/eclipse-ee4j/yasson/issues/656,yasson,2705007514,656,Unexpected Serialization Behavior with Records Containing Lists in Java 21,mskacelik,124160830,Marek Skácelík,,OPEN,2024-11-29T12:40:03Z,2024-12-09T12:03:45Z,"I have come across a weird behavior after updating Java to version 21.

When having a record with a `List` field, the serialization of the object seems to behave differently.

I have made a reproducer using **JBang** for simplicity. For more info, see: https://www.jbang.dev/
```java
///usr/bin/env jbang ""$0"" ""$@"" ; exit $?
//DEPS org.eclipse:yasson:3.0.4

import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.annotation.JsonbCreator;
import java.util.List;

public class RecordsWithList {

    public static void main(String... args) {
        // print java version
        System.out.println(""java.version = "" + System.getProperty(""java.version""));
        Jsonb jsonb = JsonbBuilder.create();

        String jsonString = ""{\""s\"":\""testParentWithList\"",\""testRecords\"":[{\""needed\"":\""1\"",\""notNeeded\"":\""2\""},{\""needed\"":\""3\""}]}"";
        ParentRecordWithList result = jsonb.fromJson(jsonString, ParentRecordWithList.class);
        System.out.println(""TestRecords: "" + result);

    }

    public record ParentRecordWithList(String s,
            List<TestRecord> testRecords) {
        @JsonbCreator
        public ParentRecordWithList {
        }
    }

    public record TestRecord(String needed,
            String notNeeded) {
        @JsonbCreator
        public TestRecord {
        }
    }
}

```
output for Java 17:
```shell
>jbang --java 17 --fresh RecordsWithList.java
[jbang] Resolving dependencies...
[jbang]    org.eclipse:yasson:3.0.4
[jbang] Dependencies resolved
[jbang] Building jar...
java.version = 17.0.9
TestRecords: ParentRecordWithList[s=testParentWithList, testRecords=[TestRecord[needed=1, notNeeded=2], TestRecord[needed=3, notNeeded=null]]]
```

Output for Java 21:
```sh
>jbang --java 21 --fresh RecordsWithList.java
[jbang] Resolving dependencies...
[jbang]    org.eclipse:yasson:3.0.4
[jbang] Dependencies resolved
[jbang] Building jar...
java.version = 21.0.5
TestRecords: ParentRecordWithList[s=testParentWithList, testRecords=[{needed=1, notNeeded=2}, {needed=3}]]
```

For some reason, the elements of `testRecords` seem to have map instances in Java 21.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/656/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/656,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Wpt5X,yasson,2527518295,656,NA,realmarbro,46825085,,,NA,2024-12-09T10:25:51Z,2024-12-09T10:25:51Z,"I ran into this one as well when I upgraded to JDK 21, most likely this is related to the following bug in 21 https://bugs.openjdk.org/browse/JDK-8320575 . I tested it by using OpenJDK 23 and the problem was gone, so not a bug in Yasson, but a side effect of the bug in the JDK. It is also fixed in OpenJDK 21.0.6 recently, but I think not many vendors have released their distribution of that version yet.

Better to close this one, or keep it open for a while for those who search the issue list.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Wpt5X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-ee4j/yasson/issues/656,https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Wqh9w,yasson,2527731568,656,NA,mskacelik,124160830,Marek Skácelík,,NA,2024-12-09T12:03:43Z,2024-12-09T12:03:43Z,"Oh, thank you for the info, I was not aware of the bug 😅.","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/comments/IC_kwDOBGtCjs6Wqh9w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/657,https://api.github.com/repos/eclipse-ee4j/yasson/issues/657,yasson,2752942220,657,JsonArray serialisation seems really really slow,dannyb2018,39492136,,,OPEN,2024-12-20T15:18:52Z,2024-12-20T15:18:52Z,"I am using yasson via the standard jakarta api to write out json. Performance without arrays seems ok but once there is an array suddenly it is orders of magnitude slower.  I have included the code.  Basically it has value that is different for different groups and so the array is a list of names of the group and then the values for the group.  I have looked to see if anyone else had the same issue but apparently google search is basically useless now

        JsonObjectBuilder updateAJsonObjectBuilder = Json.createObjectBuilder();

        // get offset
        int updatedOffset = getUpdatedOffset(moneyness, triggerDelta, isCall);
        // get the collection of curves we are going to update
        // assume call
        Map<String, List<QPVolatilityPoint>> curveForSpreadGroups = callCurvesForSpreadGroups;
        // but if put use puts
        if(false == isCall)
        {
            curveForSpreadGroups = putCurvesForSpreadGroups;
        }

        // get update delta
        List<QPVolatilityPoint> fvCurve = curveForSpreadGroups.get(""FV"");
        QPVolatilityPoint volPointBeingUpdated = fvCurve.get(updatedOffset);

        // add moneyness
        updateAJsonObjectBuilder.add(""moneyness"", moneyness);

        // add update delta
        updateAJsonObjectBuilder.add(""update_delta"", volPointBeingUpdated.getDelta().getBigDecimal());

        // go through spread groups
        JsonArrayBuilder updatedVolPointsForSpreadGroupsAsJsonArray = Json.createArrayBuilder();
        Set<String> spreadGroupIdentifiers = curveForSpreadGroups.keySet();
        for(String currentSpreadGroupIdentifier : spreadGroupIdentifiers)
        {
            // get the current gorup
            QPPartyGroup currentSpreadCGroup = new QPPartyGroup();
            currentSpreadCGroup.parseIdentifier(currentSpreadGroupIdentifier);

            // create a record of the updated point
            JsonObjectBuilder updatedVolPointsForSpreadGroupAsJsonObjectBuilder = Json.createObjectBuilder();

            // add group name, name source and type
            updatedVolPointsForSpreadGroupAsJsonObjectBuilder.add(""spread_group_name"", currentSpreadCGroup.getName());
            updatedVolPointsForSpreadGroupAsJsonObjectBuilder.add(""spread_group_name_source"", currentSpreadCGroup.getNameSource());
            updatedVolPointsForSpreadGroupAsJsonObjectBuilder.add(""spread_group_type"", currentSpreadCGroup.getType());

            // add volume banded ivs
            JsonArrayBuilder volumeBandedIVsAsJsonArrayBuilder = Json.createArrayBuilder();
            // BUGBUGDB for now just zero bound ivs
            JsonObjectBuilder zeroBoundIVsAsJsonObjectBuilder = Json.createObjectBuilder();
            // add volume
            zeroBoundIVsAsJsonObjectBuilder.add(""minimum_volume"", 0);
            zeroBoundIVsAsJsonObjectBuilder.addNull(""maximum_volume"");
            // add iv
            // get the curve
            List<QPVolatilityPoint> curveForSpreadGroup = curveForSpreadGroups.get(currentSpreadGroupIdentifier);
            // get the vol point at that offset
            volPointBeingUpdated = curveForSpreadGroup.get(updatedOffset);
            // get iv and add it
            zeroBoundIVsAsJsonObjectBuilder.add(""iv"", volPointBeingUpdated.getImpliedVolatility().getBigDecimal());
            // add to volume bounded ivs
            volumeBandedIVsAsJsonArrayBuilder.add(zeroBoundIVsAsJsonObjectBuilder);

            // add to group update
            updatedVolPointsForSpreadGroupAsJsonObjectBuilder.add(""implied_volatilities_by_volume"", volumeBandedIVsAsJsonArrayBuilder);
            
            // add to list
            updatedVolPointsForSpreadGroupsAsJsonArray.add(updatedVolPointsForSpreadGroupAsJsonObjectBuilder);
        }
        // add array of updated ivs by spread group
        updateAJsonObjectBuilder.add(""spread_adjusted_implied_volatilities"", updatedVolPointsForSpreadGroupsAsJsonArray);

","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/657/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/658,https://api.github.com/repos/eclipse-ee4j/yasson/issues/658,yasson,2768918414,658,Yasson 3.0.4 - Wildfly 34 - Entity Json Serialize,gjsbe,26633549,,,OPEN,2025-01-04T16:42:00Z,2025-01-04T16:42:00Z,"**Is your feature request related to a problem? Please describe.**
When I try to serialize a jpa entity I receive 
jakarta.json.bind.JsonbException: Recursive reference has been found in class ....
I have just two references of the same object inside the serialized object (two join of the same record inside parent).

**Describe the solution you'd like**
Exclude recursive reference check, let me do it manually, add a parameter on jsonbconfig to disable it.

**Describe alternatives you've considered**
I am trying to patch the library and include it inside my ear (and excluding the default library provided by wildfly 34), even substitute the global default library inside modules, but is really a bad solution.

Thank you 
Regards","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/658/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/659,https://api.github.com/repos/eclipse-ee4j/yasson/issues/659,yasson,2775663502,659,TCK run fails with JDK 24,Verdent,4483705,David Král,david.k.kral@oracle.com,OPEN,2025-01-08T15:19:51Z,2025-01-08T15:19:55Z,"Run JSON-B TCKs with Yasson on JDK 24

It fails with the following error:
```
[ERROR] ee.jakarta.tck.json.bind.customizedmapping.numberformat.NumberFormatCustomizationTest.testNumberFormatField -- Time elapsed: 0.003 s <<< FAILURE!
java.lang.AssertionError: 
Failed to correctly customize number format during marshalling using JsonbNumberFormat annotation on field.
Expected: a string matching the pattern '\{\s*""instance""\s*:\s*""123\u00a0456,789""\s*\}'
     but: was ""{\""instance\"":\""123 456,789\""}""
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
        at ee.jakarta.tck.json.bind.customizedmapping.numberformat.NumberFormatCustomizationTest.testNumberFormatField(NumberFormatCustomizationTest.java:112)
```","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/659/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-ee4j/yasson/issues/660,https://api.github.com/repos/eclipse-ee4j/yasson/issues/660,yasson,2826884994,660,The example for jakarta.json.bind.annotation.JsonbSubtype is misleading,naxostech,10667774,naxostech,,OPEN,2025-02-03T09:14:01Z,2025-02-03T09:14:01Z,"Hello. I use Yasson 3.0.4 with OpenJDK (Temurin) 21.0.5 and Windows 11.

At first, the example for jakarta.json.bind.annotation.JsonbSubtype contains several trivial compile errors that should be fixed even though the purpose isn't to provide a fully working example:
- a comma is missing after the declaration of the first JsonbSubtype annotation
- isDog, isCat and isRat are wrongly declared as String whereas the rest of the source code expects to manipulate booleans

Secondly, the example demonstrates the serialization but not the deserialization.

Thirdly, the deserialization doesn't work as is when fixing the trivial compile errors mentioned earlier except if the interface and the classes are either saved into separate source files or declared static into the same source file:
jakarta.json.bind.JsonbException: Cannot create instance of a class: class Cat, No default constructor found.
 	at org.eclipse.yasson.internal.deserializer.DefaultObjectInstanceCreator.<init>(DefaultObjectInstanceCreator.java:44)
 	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.createObjectDeserializer(DeserializationModelCreator.java:251)
 	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChainInternal(DeserializationModelCreator.java:193)
 	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:135)
 	at org.eclipse.yasson.internal.deserializer.DeserializationModelCreator.deserializerChain(DeserializationModelCreator.java:123)
 	at org.eclipse.yasson.internal.deserializer.InheritanceInstanceCreator.deserialize(InheritanceInstanceCreator.java:71)
 	at org.eclipse.yasson.internal.deserializer.InheritanceInstanceCreator.deserialize(InheritanceInstanceCreator.java:31)
 	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:85)
 	at org.eclipse.yasson.internal.deserializer.PositionChecker.deserialize(PositionChecker.java:34)
 	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:46)
 	at org.eclipse.yasson.internal.deserializer.NullCheckDeserializer.deserialize(NullCheckDeserializer.java:26)
 	at org.eclipse.yasson.internal.DeserializationContextImpl.deserializeItem(DeserializationContextImpl.java:138)
 	at org.eclipse.yasson.internal.DeserializationContextImpl.deserialize(DeserializationContextImpl.java:127)
 	at org.eclipse.yasson.internal.JsonBinding.deserialize(JsonBinding.java:55)
 	at org.eclipse.yasson.internal.JsonBinding.fromJson(JsonBinding.java:62)

Please find below the minimal changes I suggest for the example:

```
// Example
// Animal.java
 @JsonbTypeInfo({
      @JsonbSubtype(alias = ""dog"", type = Dog.class),
      @JsonbSubtype(alias = ""cat"", type = Cat.class)
 })
 interface Animal {}

// Dog.java
 class Dog implements Animal {
     public boolean isDog = true;
 }
// Cat.java
 class Cat implements Animal {
     public boolean isCat = true;
 }
// Rat.java
 class Rat implements Animal {
     public boolean isRat = true;
 }

 jsonb.toJson(new Dog());// {""@type"":""dog"",""isDog"":true}
 jsonb.toJson(new Cat());// {""@type"":""cat"",""isCat"":true}
 jsonb.toJson(new Rat());// {""isRat"":true}
 jsonb.fromJson(""{\""@type\"":\""cat\"",\""isCat\"":true}"", Animal.class);// Cat@...
```



Please find below my fully working example:

```
public class Main {
    @JsonbTypeInfo({
        @JsonbSubtype(alias = ""dog"", type = Dog.class),
        @JsonbSubtype(alias = ""cat"", type = Cat.class)
    })
    public static interface Animal {
    }

    public static final class Dog implements Animal {

        public boolean isDog = true;
    }

    public static final class Cat implements Animal {

        public boolean isCat = true;
    }

    public static final class Rat implements Animal {

        public boolean isRat = true;
    }

    public static void main(final String[] args) throws Exception {
        try (final Jsonb jsonb = JsonbBuilder.create()) {
            System.out.println(jsonb.toJson(new Dog()));
            System.out.println(jsonb.toJson(new Cat()));
            System.out.println(jsonb.toJson(new Rat()));
            System.out.println(jsonb.fromJson(""{\""@type\"":\""cat\"",\""isCat\"":true}"", Animal.class));
        }
    }
}
```

Feel free to move this issue upstream if it makes sense for you.
","{""url"": ""https://api.github.com/repos/eclipse-ee4j/yasson/issues/660/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
