type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/1,https://api.github.com/repos/eclipse-jgit/jgit/issues/1,jgit,2021215658,1,org.eclipse.jgit.http.apache does not import javax.net.ssl!,pkriens,200494,Peter Kriens,Peter.Kriens@aqute.biz,CLOSED,2023-12-01T16:29:52Z,2023-12-10T15:38:55Z,"At bndtools we got https://github.com/bndtools/bnd/issues/5908

Analyzing how it is possible that JGit cannot find the `javax.net.sll.SSLContext` class, I looked at the bundle org.eclipse.jgit.http.apache where the error occurred.
```
[MANIFEST]

Automatic-Module-Name                   org.eclipse.jgit.http.apache
Build-Jdk-Spec                          11
Bundle-ActivationPolicy                 lazy
Bundle-Localization                     plugin
Bundle-ManifestVersion                  2
Bundle-Name                             %Bundle-Name
Bundle-RequiredExecutionEnvironment     JavaSE-11
Bundle-SymbolicName                     org.eclipse.jgit.http.apache
Bundle-Vendor                           %Bundle-Vendor
Bundle-Version                          6.3.0.202209071007-r
Created-By                              Maven Jar Plugin 3.2.0
Export-Package                          org.eclipse.jgit.transport.http.apache.internal;x-internal:=true
                                        org.eclipse.jgit.transport.http.apache;version=""6.3.0""; uses:=""org.apache.http.client,  org.eclipse.jgit.transport.http,  org.apache.http.entity,  org.apache.http.client.methods,  javax.net.ssl,  org.eclipse.jgit.util,  org.apache.http""
Implementation-Title                    JGit org.eclipse.jgit.http.apache
Implementation-Vendor                   Eclipse.org - JGit
Implementation-Vendor-Id                org.eclipse.jgit
Implementation-Vendor-URL               https://www.eclipse.org/jgit/
Implementation-Version                  6.3.0.202209071007-r
Import-Package                          org.apache.http.client.config;version=""[4.4.0,5.0.0)""
                                        org.apache.http.client.methods;version=""[4.4.0,5.0.0)""
                                        org.apache.http.client.params;version=""[4.4.0,5.0.0)""
                                        org.apache.http.client;version=""[4.4.0,5.0.0)""
                                        org.apache.http.config;version=""[4.3.0,5.0.0)""
                                        org.apache.http.conn.params;version=""[4.4.0,5.0.0)""
                                        org.apache.http.conn.scheme;version=""[4.4.0,5.0.0)""
                                        org.apache.http.conn.socket;version=""[4.4.0,5.0.0)""
                                        org.apache.http.conn.ssl;version=""[4.4.0,5.0.0)""
                                        org.apache.http.conn.util;version=""[4.4.0,5.0.0)""
                                        org.apache.http.conn;version=""[4.4.0,5.0.0)""
                                        org.apache.http.entity;version=""[4.3.0,5.0.0)""
                                        org.apache.http.impl.client;version=""[4.4.0,5.0.0)""
                                        org.apache.http.impl.conn;version=""[4.4.0,5.0.0)""
                                        org.apache.http.params;version=""[4.3.0,5.0.0)""
                                        org.apache.http.ssl;version=""[4.3.0,5.0.0)""
                                        org.apache.http;version=""[4.3.0,5.0.0)""
                                        org.eclipse.jgit.annotations;version=""[6.3.0,6.4.0)""
                                        org.eclipse.jgit.nls;version=""[6.3.0,6.4.0)""
                                        org.eclipse.jgit.transport.http;version=""[6.3.0,6.4.0)""
                                        org.eclipse.jgit.util;version=""[6.3.0,6.4.0)""
Manifest-Version                        1.0
```
The manifest is clearly *not* importing this package. Looking at the analysis of the jar:
```
[USES]

org.eclipse.jgit.transport.http.apache  javax.net.ssl
                                        org.apache.http
                                        org.apache.http.client
                                        org.apache.http.client.config
                                        org.apache.http.client.methods
                                        org.apache.http.config
                                        org.apache.http.conn
                                        org.apache.http.conn.socket
                                        org.apache.http.conn.ssl
                                        org.apache.http.entity
                                        org.apache.http.impl.client
                                        org.apache.http.impl.conn
                                        org.apache.http.ssl
                                        org.eclipse.jgit.lib
                                        org.eclipse.jgit.transport.http
                                        org.eclipse.jgit.transport.http.apache.internal
                                        org.eclipse.jgit.util
org.eclipse.jgit.transport.http.apache.internal org.eclipse.jgit.nls


[USEDBY]

javax.net.ssl                           org.eclipse.jgit.transport.http.apache
```
So the code clearly references this package.

I am not sure how you generate the manifest here in this project, but looking at [manifest](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.http.apache/META-INF/MANIFEST.MF) I see:
```
Import-Package: org.apache.http;version=""[4.3.0,5.0.0)"",
 org.apache.http.client;version=""[4.4.0,5.0.0)"",
 org.apache.http.client.config;version=""[4.4.0,5.0.0)"",
 org.apache.http.client.methods;version=""[4.4.0,5.0.0)"",
 org.apache.http.client.params;version=""[4.4.0,5.0.0)"",
 org.apache.http.config;version=""[4.3.0,5.0.0)"",
 org.apache.http.conn;version=""[4.4.0,5.0.0)"",
 org.apache.http.conn.params;version=""[4.4.0,5.0.0)"",
 org.apache.http.conn.scheme;version=""[4.4.0,5.0.0)"",
 org.apache.http.conn.socket;version=""[4.4.0,5.0.0)"",
 org.apache.http.conn.ssl;version=""[4.4.0,5.0.0)"",
 org.apache.http.conn.util;version=""[4.4.0,5.0.0)"",
 org.apache.http.entity;version=""[4.3.0,5.0.0)"",
 org.apache.http.impl.client;version=""[4.4.0,5.0.0)"",
 org.apache.http.impl.conn;version=""[4.4.0,5.0.0)"",
 org.apache.http.params;version=""[4.3.0,5.0.0)"",
 org.apache.http.ssl;version=""[4.3.0,5.0.0)"",
 org.eclipse.jgit.annotations;version=""[6.8.0,6.9.0)"",
 org.eclipse.jgit.nls;version=""[6.8.0,6.9.0)"",
 org.eclipse.jgit.transport.http;version=""[6.8.0,6.9.0)"",
 org.eclipse.jgit.util;version=""[6.8.0,6.9.0)""
```
Which clearly does not show javax.net.ssl?

I am really puzzled how this could've worked ever?
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/1,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5tp1qP,jgit,1839684239,1,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2023-12-04T23:04:44Z,2023-12-04T23:04:44Z,merged https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1173142,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5tp1qP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/4,https://api.github.com/repos/eclipse-jgit/jgit/issues/4,jgit,2031094548,4,NPE when calling RefDirectory:pack,barbasa,1756460,,,CLOSED,2023-12-07T16:18:51Z,2024-02-26T20:23:47Z,"RefDirectory:pack might raise an NPE when deleting loose refs as final part of the RefDirectory.pack():

```
java.lang.NullPointerException
       at org.eclipse.jgit.internal.storage.file.RefDirectory.pack(RefDirectory.java:817)
       at org.eclipse.jgit.internal.storage.file.RefDirectory.pack(RefDirectory.java:729)
       at org.eclipse.jgit.internal.storage.file.PackedBatchRefUpdate.execute(PackedBatchRefUpdate.java:153)
       at org.eclipse.jgit.lib.BatchRefUpdate.execute(BatchRefUpdate.java:589)
       at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:249)
       at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:105)
       at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1462)
       at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1390)
```

This is happening because the code correctly locks the packed-refs file in RefDirectory:pack.
However, it makes the wrong assumption considering the loose refs set as immutable between during the whole packing process.

The number and values of loose refs on the filesystem can mutate at any time whilst the RefDirectory.pack() is in progress.
Assuming the contrary can lead to an NPE.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/4,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51ImqE,jgit,1965189764,4,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T20:23:46Z,2024-02-26T20:23:46Z,This was fixed by https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1173231,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51ImqE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,jgit,2041440854,5,JGit is very slow in marking the remote refs as advertised,dluksza,127442,Dariusz Łuksza,dariusz.luksza@gmail.com,OPEN,2023-12-14T10:50:25Z,2024-02-26T20:37:38Z,"### Version

5.13

### Operating System

MacOS

### Bug description

[Bugzilla bug](https://bugs.eclipse.org/bugs/show_bug.cgi?id=579837)

```
When clone a remote repository that advertised a large number of refs (e.g. in the order of millions) the JGit client spend a lot of time marking the received refs as locally advertised.

See the full stack-trace below:
	at java.lang.Throwable.fillInStackTrace(Native Method)
	at java.lang.Throwable.fillInStackTrace(Throwable.java:784)
	- locked <0x00000007a69a1728> (a java.io.FileNotFoundException)
	at java.lang.Throwable.<init>(Throwable.java:266)
	at java.lang.Exception.<init>(Exception.java:66)
	at java.io.IOException.<init>(IOException.java:58)
	at java.io.FileNotFoundException.<init>(FileNotFoundException.java:77)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at org.eclipse.jgit.internal.storage.file.LooseObjects.getObjectLoader(LooseObjects.java:186)
	at org.eclipse.jgit.internal.storage.file.LooseObjects.open(LooseObjects.java:149)
	at org.eclipse.jgit.internal.storage.file.ObjectDirectory.openLooseObject(ObjectDirectory.java:396)
	at org.eclipse.jgit.internal.storage.file.ObjectDirectory.openLooseFromSelfOrAlternate(ObjectDirectory.java:373)
	at org.eclipse.jgit.internal.storage.file.ObjectDirectory.openObjectWithoutRestoring(ObjectDirectory.java:349)
	at org.eclipse.jgit.internal.storage.file.ObjectDirectory.openObject(ObjectDirectory.java:330)
	at org.eclipse.jgit.internal.storage.file.WindowCursor.open(WindowCursor.java:132)
	at org.eclipse.jgit.lib.ObjectReader.open(ObjectReader.java:212)
	at org.eclipse.jgit.revwalk.RevWalk.parseAny(RevWalk.java:1075)
	at org.eclipse.jgit.transport.BasePackFetchConnection.markAdvertised(BasePackFetchConnection.java:987)
	at org.eclipse.jgit.transport.BasePackFetchConnection.markRefsAdvertised(BasePackFetchConnection.java:979)
	at org.eclipse.jgit.transport.BasePackFetchConnection.doFetch(BasePackFetchConnection.java:363)
	at org.eclipse.jgit.transport.TransportHttp$SmartHttpFetchConnection.doFetch(TransportHttp.java:1550)
	at org.eclipse.jgit.transport.BasePackFetchConnection.fetch(BasePackFetchConnection.java:302)
	at org.eclipse.jgit.transport.BasePackFetchConnection.fetch(BasePackFetchConnection.java:293)
	at org.eclipse.jgit.transport.FetchProcess.fetchObjects(FetchProcess.java:274)
	at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:171)
	at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:94)
	at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1309)
	at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:213)
	at org.eclipse.jgit.api.CloneCommand.fetch(CloneCommand.java:311)
	at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:182)
```

### Actual behavior

Clone operation is slow

### Expected behavior

Speed improvement in clone operation

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5um0hA,jgit,1855670336,5,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2023-12-14T11:25:10Z,2023-12-14T11:25:10Z,Did you try if this also happens when using JGit from current master branch ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5um0hA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5unFpp,jgit,1855740521,5,NA,dluksza,127442,Dariusz Łuksza,dariusz.luksza@gmail.com,NA,2023-12-14T12:14:20Z,2023-12-14T12:14:20Z,"Not yet, for now, was just browsing the code and it looks like although the stacktrace doesn't match fully it should behave similarly. Will test it on the `master` now.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5unFpp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5uoc4q,jgit,1856097834,5,NA,dluksza,127442,Dariusz Łuksza,dariusz.luksza@gmail.com,NA,2023-12-14T15:50:55Z,2023-12-14T15:50:55Z,"Yes, it is still the case, here's the stacktrace from `master`:
```
Thread [main] (Suspended (breakpoint at line 212 in LooseObjects))	
	LooseObjects.getObjectLoader(WindowCursor, File, AnyObjectId) line: 212	
	LooseObjects.open(WindowCursor, AnyObjectId) line: 171	
	ObjectDirectory.openLooseObject(WindowCursor, AnyObjectId) line: 418	
	ObjectDirectory.openLooseFromSelfOrAlternate(WindowCursor, AnyObjectId, Set<Id>) line: 394	
	ObjectDirectory.openObjectWithoutRestoring(WindowCursor, AnyObjectId) line: 369	
	ObjectDirectory.openObject(WindowCursor, AnyObjectId) line: 350	
	WindowCursor.open(AnyObjectId, int) line: 133	
	WindowCursor(ObjectReader).open(AnyObjectId) line: 216	
	RevWalk.parseAny(AnyObjectId) line: 1119	
	TransportHttp$SmartHttpFetchConnection(BasePackFetchConnection).markAdvertised(AnyObjectId) line: 1101	
	TransportHttp$SmartHttpFetchConnection(BasePackFetchConnection).markRefsAdvertised() line: 1093	
	TransportHttp$SmartHttpFetchConnection(BasePackFetchConnection).doFetch(ProgressMonitor, Collection<Ref>, Set<ObjectId>, OutputStream) line: 408	
	TransportHttp$SmartHttpFetchConnection.doFetch(ProgressMonitor, Collection<Ref>, Set<ObjectId>, OutputStream) line: 1565	
	TransportHttp$SmartHttpFetchConnection(BasePackFetchConnection).fetch(ProgressMonitor, Collection<Ref>, Set<ObjectId>, OutputStream) line: 351	
	TransportHttp$SmartHttpFetchConnection(BasePackFetchConnection).fetch(ProgressMonitor, Collection<Ref>, Set<ObjectId>) line: 343	
	FetchProcess.fetchObjects(ProgressMonitor) line: 290	
	FetchProcess.executeImp(ProgressMonitor, FetchResult, String) line: 182	
	FetchProcess.execute(ProgressMonitor, FetchResult, String) line: 105	
	TransportHttp(Transport).fetch(ProgressMonitor, Collection<RefSpec>, String) line: 1482	
	FetchCommand.call() line: 238	
	CloneCommand.fetch(Repository, URIish) line: 319	
	CloneCommand.call() line: 189	
	Clone.run() line: 131	
	Clone(TextBuiltin).execute(String[]) line: 239	
	Main.execute(String[]) line: 247	
	Main.run(String[]) line: 135	
	Main.main(String[]) line: 106	
```

For each advertised object we'll do a try-catch and re-throw the `FileNotFoundException` as you can tell from the [`LooseObjects.getObjectLoader()` source code](https://github.com/eclipse-jgit/jgit/blob/a2fed42939fa292e08060c572fa9ee716a21058d/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/LooseObjects.java#L206-220).

Would it be possible to have a different implementation of `ObjectDirectory` only for the clone operation? We can safely assume during the clone that we don't have any of the objects. WDYT?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5uoc4q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/5,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IvFI,jgit,1965224264,5,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T20:37:37Z,2024-02-26T20:37:37Z,"I think using a different ObjectDirectory implementation would be overkill, it looks like this could be fixed by skipping the call to ` #openLooseFromSelfOrAlternate(WindowCursor, AnyObjectId, Set<AlternateHandle.Id>)` in `#openObjectWithoutRestoring(WindowCursor, AnyObjectId)` [1] if we know we are executing a clone. We already have a few other such optimizations for clone.

[1] https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java#L357","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IvFI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/6,https://api.github.com/repos/eclipse-jgit/jgit/issues/6,jgit,2048182181,6,ArrayIndexOutOfBoundsException when doing a git pull,pmmitkovv,122886048,,,CLOSED,2023-12-19T08:38:35Z,2024-01-29T10:40:23Z,"### Version

6.8.0.202311291450-r

### Operating System

Linux/Unix, MacOS

### Bug description

The issue is caused when doing a git pull that will lead to a merge conflict with the README.md file in my repository(which is part of the initial repository commit if that is relevant). The merge strategy is set to ""recursive"" - the default one and the pull is done with rebase.

Pull code:

```
PullResult result = git.pull()
                        .setRemoteBranchName(""master"")
                        .setTransportConfigCallback(createTransportConfigCallback())
                        .setRebase(true).call();

```
Stacktrace:
```
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0
	at org.eclipse.jgit.revwalk.RevCommit.getParent(RevCommit.java:354) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.RebaseCommand.stop(RebaseCommand.java:1070) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.RebaseCommand.cherryPickCommitFlattening(RebaseCommand.java:568) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.RebaseCommand.cherryPickCommit(RebaseCommand.java:532) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.RebaseCommand.processStep(RebaseCommand.java:443) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.RebaseCommand.call(RebaseCommand.java:356) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.PullCommand.call(PullCommand.java:366) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar:6.8.0.202311291450-r]
```

### Actual behavior

ArrayIndexOutOfBoundsException error

### Expected behavior

Possible merge conflict. This is the output when doing the pull from the terminal on the same repository:
```
➜  local9b5e52ab-fd06-44e4-b0d3-f5afe3f6a2da git:(main) git pull origin master --rebase
warning: no common commits
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), 245 bytes | 35.00 KiB/s, done.
From https://gitlab-it.sof-mbu.eng.vmware.com/vrouitests/testcontent-push-e2e_git_ckoi_1702975571005
 * branch            master     -> FETCH_HEAD
 * [new branch]      master     -> origin/master
Auto-merging README.md
CONFLICT (add/add): Merge conflict in README.md
error: could not apply 700aedf... Initial commit
hint: Resolve all conflicts manually, mark them as resolved with
hint: ""git add/rm <conflicted_files>"", then run ""git rebase --continue"".
hint: You can instead skip this commit: run ""git rebase --skip"".
hint: To abort and get back to the state before ""git rebase"", run ""git rebase --abort"".
Could not apply 700aedf... Initial commit

```
### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/6,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wYVBi,jgit,1885425762,6,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-10T18:46:42Z,2024-01-10T18:46:42Z,See [GerritHub change 1174394](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1174394).,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wYVBi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/6,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yGYRB,jgit,1914274881,6,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-01-29T09:18:27Z,2024-01-29T09:18:27Z,https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1174394 merged as 906c2bebed0dc732a2fbd5b397466cf3522714f0,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yGYRB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/7,https://api.github.com/repos/eclipse-jgit/jgit/issues/7,jgit,2051030904,7,jgit wiki pages contain unwanted escaped newline character,Bananeweizen,406876,Michael Keppler,,CLOSED,2023-12-20T18:00:17Z,2024-01-10T14:00:29Z,"### Version

-

### Operating System

Windows

### Bug description

21 of the jgit wiki pages have this kind of bad newline: 
![grafik](https://github.com/eclipse-jgit/jgit/assets/406876/e6a327f5-1f2f-4cd6-a65e-070688e56dbd)


### Actual behavior

-

### Expected behavior

-

### Relevant log output

_No response_

### Other information

@msohn If you look into this, cloning the jgit wiki locally and pushing might be possible for you (I don't even have editing rights for single pages).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/7,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wWVl3,jgit,1884903799,7,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-10T14:00:28Z,2024-01-10T14:00:28Z,Done.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wWVl3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/8,https://api.github.com/repos/eclipse-jgit/jgit/issues/8,jgit,2054513008,8,Repack Command not found,sepatel,190585,Ryba,,OPEN,2023-12-22T21:16:38Z,2024-08-29T15:09:09Z,"### Description

I have a need to repack a git repo after it has been closed down. This is due to some of the pack files being over 1gb in size and causing our systems to run out of memory as a result. While locally I can achieve this by doing `git repack --max-pack-size=100m -Ad`, our production systems do not have git installed so no dropping down to shell environment is allowed. The jgit library is the only means I have to make this adjustment (unless there is an option with clone that I didn't find).

Thus I really need the ability to either repack the repo, or some kind of improved memory handling that causes it to not run out of memory in production when walking the tree of a pack that is really large.

### Motivation

It is a core bit of git functionality and would help prevent out of memory issues when working with poorly packed git repositories.

### Alternatives considered

Locally I can use `git repack --max-pack-size=100m -Ad` to work around the memory problems but in production that isn't really an option to run by hand as git is not installed. Only jgit can work with the code.

### Additional context

Perhaps a way to clone it with a max pack size? Unsure how that would work as I didn't see a way to do that via the git cli.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/8,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Ikqf,jgit,1965181599,8,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T20:21:02Z,2024-02-26T20:21:02Z,"JGit accesses objects in pack files via the WindowCache loading the raw data in pages. It doesn't load complete pack files into memory, though it fully caches pack indexes in memory.

Page size and cache size can be configured using the options `core.packedGitWindowSize`and `core.packedGitLimit`.
See [1].

Hence I don't understand how running out of memory and repacking pack files is directly related.
At the moment JGit doesn't expose an API to only run the repack part of a full gc.

[1] https://github.com/eclipse-jgit/jgit/blob/master/Documentation/config-options.md ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Ikqf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/8,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Q0wu,jgit,1967344686,8,NA,sepatel,190585,Ryba,,NA,2024-02-27T18:24:05Z,2024-02-27T18:24:05Z,"> Hence I don't understand how running out of memory and repacking pack files is directly related. At the moment JGit doesn't expose an API to only run the repack part of a full gc.

I cannot say that I can explain why it is, I do know that for some of the repos where there is a single pack file of 800mb or more that the reading of a file from the repo (not always but usually with the older commit ids) leads to an out of memory error. But if I by hand repack the files so that the largest pack file is 100mb, the same commands run fine. It was super hard to track down as the memory of the system (2gb ram systems) jump from around 120mb heap space used to an OOM error within a second or two of some of the known file reads and the stack traces (I don't have any to reference at the moment as this was some time ago now) said something that led me chasing down the pack size as the root issue.

I was never able to tell how much memory was used when I shrunk down the pack size to 100mb because I guess the JVM recovered or did whatever and I don't have a way to intercept how much heap space was being used in the middle of the jgit call only before/after the reading was done.

I'll take a look nd see if the configuration options you've mentioned will be of assistance, maybe it was really those which were the problem and it looked related to the pack size for different reasons.


Edit: @msohn a dumb question but could `core.packedIndexGitUseStrongRefs` maybe be a thing? It defaults to true, seems to be referenced to packed index, and says in the docs that it'll only drop references when the heap space is low if it is set to false which is not the default? Could perhaps the indexing of the packed files be the thing using up excessive amounts of RAM?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Q0wu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/8,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM513xmY,jgit,1977555352,8,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-04T22:10:49Z,2024-03-04T22:10:49Z,"If `core.packedIndexGitUseStrongRefs=true` the jgit pack index cache uses strong references to cache the pack index data. This has the consequence that the JVM cannot free the memory used for caching loaded pack indexes when it runs short on free heap space. You can try to set this option to `false` to use soft references instead which allows the JVM to reclaim the memory used to cache pack indexes. This may reduce  memory consumption but will slow down access to pack index content since it needs to be reloaded from the filesystem if the JVM removed softly referenced objects from the heap.

If you need more details you probably need to create heap dumps and analyze them e.g. using [Eclipse memory analyzer](https://eclipse.dev/mat/).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM513xmY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,jgit,2054830131,9,Conditional Include in gitconfig,kwin,185025,Konrad Windszus,,OPEN,2023-12-23T16:07:07Z,2024-11-17T22:30:26Z,"### Description

Although not explicitly listed in https://github.com/eclipse-jgit/jgit/blob/b1cc74b75b771279d81de15833da514c71513648/Documentation/config-options.md  [conditional includes](https://git-scm.com/docs/git-config#_conditional_includes) are not supported yet by JGit. Those were added with [Git 2.13](https://github.com/git/git/blob/055bb6e9969085777b7fab83e3fee0017654f134/Documentation/RelNotes/2.13.0.txt#L127)

### Motivation

This is very useful if slightly different configs should be used for several repositories (sharing the same root folder). Compare with <https://stackoverflow.com/questions/21307793/set-git-config-values-for-all-child-folders>

### Alternatives considered

The only workaround would be repository specific configurations which leads to a lot of config duplication and effort to initially set this correctly

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_Lo,jgit,1870656232,9,NA,tomaswolf,8580452,Thomas Wolf,,NA,2023-12-27T22:06:05Z,2023-12-27T22:06:05Z,See also [Eclipse bugzilla 543171](https://bugs.eclipse.org/bugs/show_bug.cgi?id=543171) for an earlier report and some comments.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_Lo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_uL,jgit,1870658443,9,NA,kwin,185025,Konrad Windszus,,NA,2023-12-27T22:10:56Z,2023-12-27T22:10:56Z,Thanks for the link. Maybe only path conditions (gitdir:) can be evaluated to simplify the implementation.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_uL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TywDz,jgit,2479554803,9,NA,reitzig,4246780,Raphael,,NA,2024-11-15T17:38:35Z,2024-11-15T17:38:35Z,"This is particularly annoying as JGit doesn't seem to support SSH signing:

```
org.eclipse.jgit.api.errors.UnsupportedSigningFormatException: No signer for ssh signatures. Use another signature type for git config gpg.format, or do not sign.
```

Which is fine by me -- I'm running integration tests of an application that uses JGit, during which my user `.gitconfig` is pulled (which I don't even want!), which configures signing. Without `includeIf`, I can't create an override.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TywDz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TzMBF,jgit,2479669317,9,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-11-15T18:22:39Z,2024-11-15T18:22:39Z,"1. SSH signing is supported in the upcoming JGit 7.1.
2. Integration tests might want to provide a mocked environment so that not the real user and system git config are used.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TzMBF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TzUhm,jgit,2479704166,9,NA,reitzig,4246780,Raphael,,NA,2024-11-15T18:45:57Z,2024-11-15T18:45:57Z,"> provide a mocked environment so that not the real user and system git config are used

Can you point me to where I can read up on that? Thanks!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TzUhm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T0FeJ,jgit,2479904649,9,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-11-15T20:51:18Z,2024-11-15T20:51:18Z,"Depends. In our unit tests we simply install a [`MockSystemReader`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/MockSystemReader.java). Check that class and its uses in the JGit tests.

But if your integration test really just calls some executable and observes the output you might have to use other ways. The user gitconfig should be fairly easy by redefining $HOME for the process under test. Don't know about the system git config.

Otherwise maybe the tests can define all relevant values in .git/config. Or you might have to use a chroot environment.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T0FeJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/9,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sKR,jgit,2481635985,9,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-17T22:30:25Z,2024-11-17T22:30:25Z,see #112,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sKR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,jgit,2057717824,10,Signing service is not available,pragmaxim,8983344,,pragmaxim@gmail.com,CLOSED,2023-12-27T19:39:44Z,2023-12-29T20:30:03Z,"### Version

6.8.0.202311291450-r

### Operating System

Linux/Unix

### Bug description

Signing a commit fails when it is enabled in `.gitconfig`

### Actual behavior

Doing : 
```
git.commit().setMessage(message).setSigningKey(gpgID).call()
```
When : 
```
cat ~/.gitconfig
[commit]
    gpgsign = true
```
leads to : 
```
org.eclipse.jgit.api.errors.ServiceUnavailableException: Signing service is not available                        
        at org.eclipse.jgit.api.CommitCommand.sign(CommitCommand.java:328)                                                                                                                                                                     
        at org.eclipse.jgit.api.CommitCommand.call(CommitCommand.java:283)                                                    
```
see https://hub.spigotmc.org/jira/si/jira.issueviews:issue-html/BUILDTOOLS-536/BUILDTOOLS-536.html

Problem is that it is not really easy to sign git commits with Bouncy Castle at least IDK how.

### Expected behavior

jgit should either succeed with the defailt `GpgSigner` or there should be easy alternative with BouncyCastle 

### Relevant log output

```Shell
org.eclipse.jgit.api.errors.ServiceUnavailableException: Signing service is not available                        
        at org.eclipse.jgit.api.CommitCommand.sign(CommitCommand.java:328)                                                                                                                                                                     
        at org.eclipse.jgit.api.CommitCommand.call(CommitCommand.java:283)                                                    
```
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf-PV,jgit,1870652373,10,NA,tomaswolf,8580452,Thomas Wolf,,NA,2023-12-27T21:58:20Z,2023-12-27T21:58:20Z,"Do you have bundle `org.eclipse.jgit.gpg.bc` in your application? It provides the only signer implementation JGit has, and it does use BouncyCastle. JGit uses the Java `ServiceLoader` to find the implementation, so it must be on the classpath.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf-PV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_bU,jgit,1870657236,10,NA,pragmaxim,8983344,,pragmaxim@gmail.com,NA,2023-12-27T22:08:10Z,2023-12-27T22:08:10Z,"So if I have it on a classpath and do this : 
```
Security.addProvider(new BouncyCastleProvider())
```

Then : 
```
git.commit().setMessage(message).setSigningKey(gpgID).call()
```

Would use the `org.eclipse.jgit.gpg.bc.internal.BouncyCastleGpgSigner` instead of the the system one?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vf_bU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vgAM5,jgit,1870660409,10,NA,tomaswolf,8580452,Thomas Wolf,,NA,2023-12-27T22:15:27Z,2023-12-27T22:15:27Z,"JGit by default does not include any implementation of `GpgSigner`. The only implementation we provide is the one in bundle `org.eclipse.jgit.gpg.bc`. So I have no idea what you mean by ""the system GpgSigner"".

JGit has no implementation of that interface that would use the gpg executable installed on the system.

It should not be necessary to install the `BouncyCastleProvider`. It will be installed automatically if needed.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vgAM5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vgA5R,jgit,1870663249,10,NA,pragmaxim,8983344,,pragmaxim@gmail.com,NA,2023-12-27T22:22:02Z,2023-12-27T22:22:02Z,"That is very strange ... I can sign my commits with `git.commit().setMessage(message).setSigningKey(gpgID).call()` even without having `org.eclipse.jgit.gpg.bc` on classpath fine unless `.gitconfig` contains : 
```
[commit]
    gpgsign = true
```
So if it actually uses the BouncyCastle underneath, then something really reads the `~/.gitconfig` ... I might debug it later ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vgA5R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/10,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vmWKX,jgit,1872323223,10,NA,pragmaxim,8983344,,pragmaxim@gmail.com,NA,2023-12-29T20:29:06Z,2023-12-29T20:29:06Z,"@tomaswolf it needs explicit setting of `CredentialsProvider` and `GpgSigner` ... For future reference : 
```scala
import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.gpg.bc.internal.BouncyCastleGpgSigner
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider
import java.io.File
import java.security.Security

Security.addProvider(new BouncyCastleProvider())
val git = Git.open(new File(""/tmp/foo""))
val barFile = new File(""/tmp/foo/bar"")

git.add().addFilepattern(barFile.getName).call()
git.commit()
  .setMessage(""test"")
  .setCredentialsProvider(new UsernamePasswordCredentialsProvider(""id"", ""passphrase""))
  .setGpgSigner(new BouncyCastleGpgSigner)
  .call()
```
Happy new year 2024!!!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vmWKX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/11,https://api.github.com/repos/eclipse-jgit/jgit/issues/11,jgit,2062300755,11,Pushing LFS objects to GitHub fails,HannesWell,44067969,Hannes Wellmann,,OPEN,2024-01-02T11:40:51Z,2024-08-14T09:49:28Z,"### Version

6.9.0

### Operating System

Windows

### Bug description

Trying to push a commit to GitHub that contains a new Large File Storage (LFS) object fails with a message that says that the referenced LFS object is missing
![grafik](https://github.com/eclipse-jgit/jgit/assets/44067969/1eb9aca2-7973-4eb9-96a8-dbccd539a8dc)

But the object exists in the local LFS cache and I also debugged the code and verified that `LfsPrePushHook.uploadFile()` is called and succeeds for the file mentioned in the error message.
Switching between the Apache Http and the JDK's http client makes no difference.

![grafik](https://github.com/eclipse-jgit/jgit/assets/44067969/8de66e4b-668c-4efb-9f76-3a6b715f4bb6)



### Actual behavior

Pushing failes with the described message.

### Expected behavior

Push succeeds and the LFS objects are properly pushed along with the pointer file.

### Relevant log output

```Shell
Repository git@github.com:HannesWell/my.git.lfs.tests.git

pre-receive hook declined
  error: GH008: Your push referenced at least 1 unknown Git LFS object:
    cdb81c2552ec215adc17feb7665f9b7532beec6735816a040798207dc0e71994
Try to push them with 'git lfs push --all'.
```


### Other information

The repositories `.git/config`:
```
[core]
	repositoryformatversion = 0
	filemode = false
	logallrefupdates = true
[remote ""origin""]
	url = git@github.com:HannesWell/my.git.lfs.tests.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""main""]
	merge = refs/heads/main
	rebase = false
	remote = origin
[lfs]
	repositoryformatversion = 0
```

My global `~/.gitconfig`
```
[http]
	sslVerify = false
[push]
	default = simple
[core]
	autocrlf = true
	safecrlf = true
[filter ""lfs""]
	useJGitBuiltin = true
	required = true
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	clean = git-lfs clean -- %f
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/11,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vsxwo,jgit,1874009128,11,NA,HannesWell,44067969,Hannes Wellmann,,NA,2024-01-02T13:11:33Z,2024-01-02T13:11:33Z,"If I try to push via git CLI (which ships with git-lfs by default on windows) I get the following error
```
$ git push
To github.com:HannesWell/my.git.lfs.tests.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'github.com:HannesWell/my.git.lfs.tests.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```
But if I fetch I see no other commits or remote reference updates.

So it looks like the push is not fully rejected but somehow incomplete.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vsxwo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/11,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vvahQ,jgit,1874700368,11,NA,HannesWell,44067969,Hannes Wellmann,,NA,2024-01-02T23:58:23Z,2024-01-02T23:58:23Z,"> If I try to push via git CLI (which ships with git-lfs by default on windows) I get the following error

From some more experiments I've got the impression that this is not caused by an imcomplet push through JGit, but also seem to happen when one pushes to a fork of a repository. At least in that case pushes of new LFS-objects to new branches lead to the same error with JGit and CLI git. Adding a `.lfsconfig` like the following makes CLI git work (in this case to push to my SWT clone):
```
[lfs]
	url = https://lfs.github.com/eclipse-platform/eclipse.platform.swt
```
But then JGit fails with the following error if I try to push some LFS-objects:

```
eclipse.buildId=4.31.0.I20231230-1800
java.version=17.0.7
java.vendor=GraalVM Community
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=de_DE
Command-line arguments:  -os win32 -ws win32 -arch x86_64

org.eclipse.egit.core
Error
Wed Jan 03 00:52:55 CET 2024
An exception occurred during push on URI git@github.com:HannesWell/eclipse.platform.swt.git: When trying to open a connection to https://lfs.github.com/eclipse-platform/eclipse.platform.swt/objects/batch the server responded with an error code. rc=401

org.eclipse.jgit.errors.TransportException: When trying to open a connection to https://lfs.github.com/eclipse-platform/eclipse.platform.swt/objects/batch the server responded with an error code. rc=401
	at org.eclipse.jgit.transport.PushProcess.execute(PushProcess.java:174)
	at org.eclipse.jgit.transport.Transport.push(Transport.java:1557)
	at org.eclipse.egit.core.op.PushOperation.run(PushOperation.java:269)
	at org.eclipse.egit.ui.internal.push.PushJob.performJob(PushJob.java:86)
	at org.eclipse.egit.ui.internal.jobs.RepositoryJob.run(RepositoryJob.java:59)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: When trying to open a connection to https://lfs.github.com/eclipse-platform/eclipse.platform.swt/objects/batch the server responded with an error code. rc=401
	at org.eclipse.jgit.lfs.LfsPrePushHook.requestBatchUpload(LfsPrePushHook.java:200)
	at org.eclipse.jgit.lfs.LfsPrePushHook.call(LfsPrePushHook.java:105)
	at org.eclipse.jgit.transport.PushProcess.execute(PushProcess.java:172)
	... 5 more
```
I also debugged this from an J/EGit workspace, but I'm puzzled why the `lfs.url` available anywhere else than `LfsConnectionFactory.getLfsUrl()`? Could it be that looking up the LF storage using `LfsConnectionFactory.getSshAuthentication()` respectively `git-lfs-authenticate` somehow creates a session or alike that is used to also authenticate the subsequent LFS-object upload?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5vvahQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/11,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IZQkG,jgit,2288322822,11,NA,dispeide,31646354,,,NA,2024-08-14T09:49:27Z,2024-08-14T09:49:27Z,"I have the same issue with external lfs storage using ssh connection:

In our environment we try to use external lfs storage via ssh connection. 
This works well in command line but not within eclipse / jgit. 
There we get the error message  `unknown protocol: ssh`

configuration eample: `.lfsconfig`
```
[lfs]
  url = ssh://git@<jfrog-artifactory-url>:<port>/artifactory/lfs-reopsitory
```
ussed environment:
git: Bitbucket
lfs-storage: jfrog artifactory
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IZQkG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/12,https://api.github.com/repos/eclipse-jgit/jgit/issues/12,jgit,2066188647,12,[WARNING] unknown commit-graph chunk: 0x47444132,TheSnoozer,6849390,,,OPEN,2024-01-04T19:04:58Z,2024-08-30T16:20:49Z,"### Version

6.7.0.202309050840-r

### Operating System

MacOS

### Bug description

When running the git-commit-id-maven-plugin (which uses jgit under the hood) a warning about unknown commit-graph chunk is reported.

This warning seems to only be reproducible under mac using a
```
Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: /Users/khm/tools/maven
Java version: 21.0.1, vendor: Oracle Corporation, runtime: /Users/khm/.sdkman/candidates/java/21.0.1-open
Default locale: en_DE, platform encoding: UTF-8
OS name: ""mac os x"", version: ""14.0"", arch: ""aarch64"", family: ""mac""
```

The message templates are defined in:

[org.eclipse.jgit/resources/org/eclipse/jgit/internal/JGitText.properties:commitGraphChunkUnknown=unknown commit-graph chunk: 0x{0}](https://github.com/eclipse-jgit/jgit/blob/b1cc74b75b771279d81de15833da514c71513648/org.eclipse.jgit/resources/org/eclipse/jgit/internal/JGitText.properties#L160)

and the error observed comes from:
https://github.com/eclipse-jgit/jgit/blob/b1cc74b75b771279d81de15833da514c71513648/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphLoader.java#L194-L196.


### Actual behavior

When running jgit a warning about an unknown commit-graph chunk is reported:
```
[INFO] --- git-commit-id:7.0.0:revision (default) @ tree ---
[WARNING] unknown commit-graph chunk: 0x47444132
[WARNING] unknown commit-graph chunk: 0x47444132
[WARNING] unknown commit-graph chunk: 0x47444132
[WARNING] unknown commit-graph chunk: 0x47444132
```

### Expected behavior

No warning.

### Relevant log output

_No response_

### Other information

To reproduce checkout the branch https://github.com/khmarbaise/maven-it-extension/tree/git-commit-id-maven-plugin-issue-687
and run `mvn clean verify`.

Can be reproduced using:
- Maven 4.0.0-alpha-10
```
Apache Maven 4.0.0-alpha-10 (89d3c0321dda868c432edf504f1884e6fd706f00)
Maven home: /Users/khm/tools/maven
Java version: 21.0.1, vendor: Oracle Corporation, runtime: /Users/khm/.sdkman/candidates/java/21.0.1-open
Default locale: en_DE, platform encoding: UTF-8
OS name: ""mac os x"", version: ""14.0"", arch: ""aarch64"", family: ""mac""
```
- Maven 3.9.6
```
Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: /Users/khm/tools/maven
Java version: 21.0.1, vendor: Oracle Corporation, runtime: /Users/khm/.sdkman/candidates/java/21.0.1-open
Default locale: en_DE, platform encoding: UTF-8
OS name: ""mac os x"", version: ""14.0"", arch: ""aarch64"", family: ""mac""
```
- Maven 3.8.8
```
mvn --version
Apache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39)
Maven home: /Users/khm/tools/maven
Java version: 21.0.1, vendor: Oracle Corporation, runtime: /Users/khm/.sdkman/candidates/java/21.0.1-open
Default locale: en_DE, platform encoding: UTF-8
OS name: ""mac os x"", version: ""14.0"", arch: ""aarch64"", family: ""mac""
```

Can **not** be reproduced under linux and the same repository/branch/commit.


original bug-report:  https://github.com/git-commit-id/git-commit-id-maven-plugin/issues/687","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/12/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/12,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wBAR_,jgit,1879311487,12,NA,TheSnoozer,6849390,,,NA,2024-01-05T22:06:36Z,2024-01-05T22:06:36Z,"I found more context on this.

Jgit's constants are defined here:

https://github.com/eclipse-jgit/jgit/blob/b1cc74b75b771279d81de15833da514c71513648/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphConstants.java#L18-L30

This 0x47444132 seems to come from
https://github.com/git/git/blob/a26002b62827b89a19b1084bd75d9371d565d03c/commit-graph.c#L48-L49 and is simply not listed as magic value in jgit.

It was introduced with this change:
https://github.com/git/git/commit/6dbf4b8172ef9edd50bdf9ca2da4681ba9153f75

I found the relevant references on [this discussion](https://lore.kernel.org/all/db5eb248-1b54-9f24-8f8a-28c19a1eee6a@github.com/)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wBAR_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/12,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KKghx,jgit,2318010481,12,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:05:07Z,2024-08-29T15:05:07Z,there is a stale [change 203182](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/203182) in review adding support for writing generation numbers,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KKghx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/12,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KZH6s,jgit,2321841836,12,NA,ifradeo,58185630,Ivan Frade,ifrade@google.com,NA,2024-08-30T16:20:48Z,2024-08-30T16:20:48Z,"That chunk is for GDA2 (generation numbers v2). JGit doesn't support that yet. When the parser finds an unknown chunk, it just logs it and ignores that chunk.

If this bug is about the warning log, we can close it as ""working as intended"". The actual feature request is ""support generation number v2"" in jgit.

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KZH6s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/13,https://api.github.com/repos/eclipse-jgit/jgit/issues/13,jgit,2074879901,13,Signed commit failure,almi33,109002541,,,CLOSED,2024-01-10T17:49:10Z,2024-08-29T15:10:05Z,"### Version

2023-12 (4.30.0)

### Operating System

Windows

### Bug description

Failing to perform signed commit using external gpg. See log in ""Relevant log output"" section.

### Actual behavior

Failed to perform signed commit

### Expected behavior

Expected to succeed.
Command line git performs signed commit using the same external gpg, user name and mail successfully

### Relevant log output

```Shell
!ENTRY org.eclipse.egit.ui 4 0 2024-01-10 18:31:17.230
!MESSAGE An internal error occurred
!STACK 0
org.eclipse.jgit.api.errors.JGitInternalException: External program failed ([GNUPG:] KEY_CONSIDERED A1427A7A21F2545AAC19BFB1661C4889FE30F3D1 2
[GNUPG:] BEGIN_SIGNING H8
[GNUPG:] PINENTRY_LAUNCHED 11288 w32 1.2.1 - - - - 0/0 -
[GNUPG:] SIG_CREATED D 1 8 00 1704907867 A1427A7A21F2545AAC19BFB1661C4889FE30F3D1
): C:\Users\some_user\AppData\Local\Programs\gnupg\bin\gpg.exe -bsau <some_user@mail.org> --batch --no-tty --status-fd 2 --output -
	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.signObject(ExternalGpgSigner.java:191)
	at org.eclipse.jgit.api.CommitCommand.sign(CommitCommand.java:336)
	at org.eclipse.jgit.api.CommitCommand.call(CommitCommand.java:283)
	at org.eclipse.egit.core.op.CommitOperation.commit(CommitOperation.java:259)
	at org.eclipse.egit.core.op.CommitOperation$1.run(CommitOperation.java:211)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2453)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2478)
	at org.eclipse.egit.core.op.CommitOperation.execute(CommitOperation.java:220)
	at org.eclipse.egit.ui.internal.commit.CommitJob.run(CommitJob.java:135)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: External program failed ([GNUPG:] KEY_CONSIDERED A1427A7A21F2545AAC19BFB1661C4889FE30F3D1 2
[GNUPG:] BEGIN_SIGNING H8
[GNUPG:] PINENTRY_LAUNCHED 11288 w32 1.2.1 - - - - 0/0 -
[GNUPG:] SIG_CREATED D 1 8 00 1704907867 A1427A7A21F2545AAC19BFB1661C4889FE30F3D1
): C:\Users\some_user\AppData\Local\Programs\gnupg\bin\gpg.exe -bsau <some_user@mail.org> --batch --no-tty --status-fd 2 --output -
	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.runProcess(ExternalGpgSigner.java:135)
	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.signWithGpg(ExternalGpgSigner.java:297)
	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.signObject(ExternalGpgSigner.java:189)
	... 9 more
Caused by: java.io.IOException: External GPG did not return a valid signature; got: -----BEGIN PGP SIGNATURE-----

iQIzBAABCAAdFiEEoUJ6eiHyVFqsGb+xZhxIif4w89EFAmWe1FsACgkQZhxIif4w
89H/xA/8Dbq4pr+wWSMVzcsHwY+gii1FDgbg5zHut6WX+hK8d11mrJTlPbqbyUPq
QFouwB9y3wtIluroF6Ics89wNAlRCBGqGLuHJCpjVHGhyMoyhp5l7X8gF7TORf+a
X/MH3h0pAyKzprRD7sZ3A9RmPL9MBX25KwieuTBbZdhBvWRC2j5dj3RsCBSwn4vn
ZbSB0JawNWSX6qsttH2+8FSgWkZFred2juIUkg0NmJCPF3Lg8GBTiTo366X27/TN
1+hjGl6yUl5pwXKpl2Z4A0fcEbu2A6osmLI64hB09reD7JdlHAtsLUty7Y9mTRyB
qnEsmw5/p7nogFsrAvAmLapD/fm9K6hiu3rzGOpywvFPv45EJzL2HQgzYKyU70fr
ODMVZJET0HKx25LO20rURmuZR+PcSJUE7d/9mjYbpaF3k+5it5kzfRQF2vcV0mGA
dWpnbYFRA8HcvOn6nZIKzNth1roP8lluFvT2AXtLdvLJ27SfUG6JCjgcBe1H5dDY
q9xARe1S78x+uwSrZzTjplit+LHcP6odHqybMJdSL9RiBq4iaYkyf7m8cydKE5Nl
ls9xBBc0ZcNG5m53UtzTU2CVsMzW36VOZUsIUJ5Q1hWhlt5jfBBc9wleXCRCvD1q
FOD5Nul9mMWgCqsouO3nVb0Xa5j64caOiTFD2FL0qoT5TrzMqBg=
=hrDq
-----END PGP SIGNATURE-----

	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.lambda$1(ExternalGpgSigner.java:326)
	at org.eclipse.egit.core.internal.signing.ExternalGpgSigner.runProcess(ExternalGpgSigner.java:110)
	... 11 more
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/13,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wYTaC,jgit,1885419138,13,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-10T18:41:48Z,2024-01-10T18:41:48Z,This is a duplicate of eclipse-egit/egit#12.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wYTaC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,jgit,2076040713,14,Binary Conflict file is empty (0 byte file).,scgsupport,156296757,,,CLOSED,2024-01-11T08:30:30Z,2024-04-26T06:27:17Z,"### Version

6.6.0

### Operating System

Windows

### Bug description

We try merge the git workspace. If it has conflict binary files, it makes 0 byte file. The same case when we do it using git command, the binary file has maintain the content as local version and marked the file as conflict. We expect the same behavior in JGit API also.

### Actual behavior

Binary conflicted files(example jpeg file conflict) are empty after merge with JGit API. This makes issue, user does not know the actual content of the file and they cannot open the file in corresponding tools.

### Expected behavior

The same above case, if I perform the merge using git command, the file content remains as local version content. It marked the file as conflict. Hence user can open the file and see the content and resolve the conflict manually.

We expect the same git command behavior in JGit merge API. 

![2024-01-11 13_57_02-Clipboard](https://github.com/eclipse-jgit/jgit/assets/156296757/9a92e921-edd3-4164-a827-6fe534d1cf34)
![image-2024-01-03-13-19-45-081](https://github.com/eclipse-jgit/jgit/assets/156296757/5382ed36-8d2e-48ff-89bc-fff1ed1c6aed)


### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wkEqK,jgit,1888504458,14,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-12T06:27:55Z,2024-01-12T06:27:55Z,Does this also occur with the latest JGit 6.8.0?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wkEqK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5w4K88,jgit,1893773116,14,NA,scgsupport,156296757,,,NA,2024-01-16T13:45:20Z,2024-01-16T13:45:20Z,Yes.. it occurs in 6.8.0.202311291450-r also.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5w4K88/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xrxn-,jgit,1907300862,14,NA,kumarp149,68728539,,,NA,2024-01-24T03:39:09Z,2024-01-24T03:39:09Z,"I think, I can work on this issue. I have gone through the code and got some insights on what's going wrong. Can I get this issue assigned to me, please","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xrxn-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xwQQF,jgit,1908474885,14,NA,kumarp149,68728539,,,NA,2024-01-24T16:23:50Z,2024-01-24T16:23:50Z,"In the class ResolveMerger.java, we are trying to create a RawText MergeResult in the method contentMerge. But for binary files, this method would throw BinaryBlobException which implies that the MergeResult has no chunks. Even with no chunks, we are trying to create a new OutputStream to file in workTreeUpdater.updateFileWithContent method which is making our file empty","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xwQQF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yyFx5,jgit,1925733497,14,NA,kumarp149,68728539,,,NA,2024-02-04T12:32:14Z,2024-02-04T12:32:14Z,"Hi
Link for gerrit review: [https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1176055](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1176055)

Please go through and give your suggestions

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yyFx5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z5CP2,jgit,1944331254,14,NA,kumarp149,68728539,,,NA,2024-02-14T18:00:10Z,2024-02-14T18:00:10Z,"Link for the gerrit review: https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1176833

Please go through it @tomaswolf ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z5CP2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50y_4l,jgit,1959525925,14,NA,kumarp149,68728539,,,NA,2024-02-22T14:07:43Z,2024-02-22T14:07:43Z,"Hi @tomaswolf 
Updated the gerrit review. Please go through it","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50y_4l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50zEGg,jgit,1959543200,14,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-02-22T14:16:24Z,2024-02-22T14:16:24Z,You don't need to ping me here. I get e-mails from gerrit anyway.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50zEGg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM571vNo,jgit,2077684584,14,NA,kumarp149,68728539,,,NA,2024-04-25T16:22:12Z,2024-04-25T16:22:12Z,"Hi @msohn
Can you please review the following gerrit review and help me with your feedback

https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1176833","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM571vNo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/14,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM574I8o,jgit,2078314280,14,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-04-25T23:09:03Z,2024-04-25T23:09:03Z,merged as 567315af548017cc58eadb91bba493b74c391009,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM574I8o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/15,https://api.github.com/repos/eclipse-jgit/jgit/issues/15,jgit,2078549997,15,JGit is unable to discover bitmaps on filesystem,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,CLOSED,2024-01-12T10:41:53Z,2024-02-21T09:23:43Z,"### Version

All releases from v4.10.* onwards

### Operating System

Linux/Unix

### Bug description

# Context

Bare repos can be at time transferred at the filesystem level (with the target location in read-only until the transfer is complete) across Gerrit servers. 

I am running on defaults for JGit and Gerrit.

_Example_:
- Server-1 (read-only) has repo1.git bare repository
- Server-2 (read-only) receives repo1.git via rsync and stay in read-only until the transfer is complete

I do not see anything wrong with the above approach, as long as Server-2 is read-only until the transfer is complete.

# Steps to reproduce the problem

1. Rsync repo1.git repo with the exception of the bitmap
2. run a git clone against Server-2 / repo1.git using Git/SSH
3. Observe on the Server-2 in the sshd_log that the bitmap is not used
4. Complete the rsync of repo1.git, which will transfer the bitmap
5. run a git clone against Server-2 / repo1.git using Git/SSH

### Actual behavior

At point 5. the sshd_log shows that the bitmap is not used. After a full restart of Gerrit, the action 5. reports that the bitmap is used in the sshd_log.

### Expected behavior

At point 5. the sshd_log shows that the bitmap is used


### Relevant log output

See the log of the sshd_log execution on a Gerrit v3.5.6 (JGit 6.6.0 @74fa245b3c3ccf13afcbec7911c7c8459e48527d)

At point 2. clone without bitmap:
```
[2024-01-12T10:32:32.491Z] 33cc307a [SSH git-upload-pack /repo1 (admin)] admin a/1000000 git-upload-pack./repo1 5ms 55ms '0ms 27ms 0ms 8ms 0ms 4ms 39ms -1 141 440 37967' 0 - 47ms 40ms 1493344
```

At point 5. clone with bitmap:
```
[2024-01-12T10:39:22.108Z] 53bd24d6 [SSH git-upload-pack /repo1 (admin)] admin a/1000000 git-upload-pack./repo1 6ms 54ms '0ms 28ms 0ms 7ms 0ms 4ms 39ms -1 141 440 37967' 0 - 42ms 30ms 1474304
```

After a Gerrit restart, at point 5. clone with bitmap:

```
[2024-01-12T10:40:37.388Z] a5799f52 [SSH git-upload-pack /repo1 (admin)] admin a/1000000 git-upload-pack./repo1 4ms 60ms '0ms 39ms 0ms 1ms 0ms 5ms 45ms 0 141 440 37971' 0 - 54ms 40ms 895768
```

### Other information

See [Change 1174396](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1174396)
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/15,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50mY2s,jgit,1956220332,15,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-21T09:23:43Z,2024-02-21T09:23:43Z,The change was merged as 3e624306dea4de6f7a78a7bcf34a57882f731a2d,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50mY2s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/16,https://api.github.com/repos/eclipse-jgit/jgit/issues/16,jgit,2079662504,16,Upgrade to Apache MINA SSHD 2.12.0,tomaswolf,8580452,Thomas Wolf,,CLOSED,2024-01-12T20:30:20Z,2024-01-22T07:56:05Z,"### Description

Upstream will release a new release 2.12.0 soon. Update the minimum required version in JGit to 2.12.0.




### Motivation

That upstream release includes the fix for [CVE-2023-48795](https://nvd.nist.gov/vuln/detail/CVE-2023-48795) (""strict KEX"" protocol extension mitigating the ""[Terrapin attack](https://www.terrapin-attack.com/)"").

By bumping the dependency in JGit o 2.12.0, JGit will profit from this CVE fix.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/16,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xNNNp,jgit,1899287401,16,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-18T21:57:41Z,2024-01-18T21:57:41Z,Upstream release is done and available at [Maven Central](https://central.sonatype.com/artifact/org.apache.sshd/sshd-osgi/2.12.0).,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xNNNp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/16,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xS10P,jgit,1900764431,16,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-19T16:56:58Z,2024-01-19T16:56:58Z,"See [Gerrit change 1174776](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1174776). This will need license vetting.

I still don't know what exactly I'd have to do where (in Apache MINA SSHD or at clearlydefined or wherever) to make the dash license tool happy with new releases of sshd-osgi and sshd-sftp.

@msohn can you help with this again?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xS10P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/16,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xVjKM,jgit,1901474444,16,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-01-20T00:50:41Z,2024-01-20T00:50:41Z,"That's documented in the [contributor guide section ""Dependencies and License Check""](https://github.com/eclipse-egit/egit/wiki/Contributor-Guide#dependencies-and-license-check). To auto-generate iplab tickets run `mvn clean install -Ddash.iplab.token=""<gitlab token>""` with a gitlab token with scope ""api"".

Meanwhile the license check succeeds, I guess the ClearlyDefined rating improved by automatic scanning.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xVjKM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,jgit,2082135164,17,ShutdownHook: NoClassDefFoundError,jukzi,51790620,Jörg Kubitz,,CLOSED,2024-01-15T14:21:59Z,2024-07-25T17:02:24Z,"### Version

latest

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

at the end of each platform build an error is logged



### Actual behavior

exception

### Expected behavior

no exception, load the text while classloader available or inline string ""Cleanup during JVM shutdown failed""

### Relevant log output

```Shell
Error: Exception in thread ""Thread-3"" java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText
	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:85)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText
	... 2 more
Error: The process '/Users/runner/hostedtoolcache/maven/3.9.6/x64/bin/mvn' failed with exit code 1
```


### Other information

example: https://github.com/eclipse-platform/eclipse.platform.ui/actions/runs/7529302359/job/20493249204?pr=1505)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wycUc,jgit,1892271388,17,NA,jukzi,51790620,Jörg Kubitz,,NA,2024-01-15T14:24:40Z,2024-01-15T14:24:40Z,https://github.com/eclipse-jgit/jgit/blob/32e33f0ce8fbd2cdf2abebd1c4651a30770213d4/org.eclipse.jgit/src/org/eclipse/jgit/internal/util/ShutdownHook.java#L85,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5wycUc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xlPXR,jgit,1905587665,17,NA,Bananeweizen,406876,Michael Keppler,,NA,2024-01-23T08:55:16Z,2024-01-23T08:55:16Z,"We also see this when trying to upgrade a Tycho 3 build to Tycho 4. Tycho uses JGit in the tycho-buildtimestamp-jgit provider (but I'm not certain whether the failure is that related to that specific usage).

Regarding the bug as such: I'd suggest to hardcode the cleanup failed message here (or to have a try-catch around the localized logging, falling back to hardcoded logging on any exception). Since the VM is shutting down, the JGitText class may or may not be loaded anymore, and that might even depend on the current JVM version or implementation.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5xlPXR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yfjST,jgit,1920873619,17,NA,jukzi,51790620,Jörg Kubitz,,NA,2024-02-01T09:22:22Z,2024-02-01T09:22:22Z,"@msohn can you fix, please?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5yfjST/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5y-8ut,jgit,1929104301,17,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-06T09:26:58Z,2024-02-06T09:26:58Z,pushed fix for review https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1176056,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5y-8ut/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zA9Iy,jgit,1929630258,17,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-06T13:34:17Z,2024-02-06T13:34:17Z,Fix was merged as e6d83d61eade6dee223757d149a4df9650752a55,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zA9Iy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Do7j,jgit,1980665571,17,NA,LorenzoBettini,1202254,Lorenzo Bettini,,NA,2024-03-06T11:29:02Z,2024-03-06T11:29:02Z,"We also see this when trying to upgrade a Tycho 3 build to Tycho 4 in Xtext.
It does not make the build fail but GitHub Actions summaries show failures, though the overall jobs succeed.

@msohn the fix was merged but can we consume the fixed version somehow?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Do7j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Ejdi,jgit,1980905314,17,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-06T13:43:20Z,2024-03-06T13:43:20Z,"I tagged the 6.9.0.202403050737-r release and contributed it to the simrel build yesterday.
It's already available on [repo.eclipse.org](https://repo.eclipse.org/content/groups/releases/org/eclipse/jgit/org.eclipse.jgit.repository/6.9.0.202403050737-r/). Will deploy it to Maven central soon.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Ejdi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52XlUM,jgit,1985893644,17,NA,TheSnoozer,6849390,,,NA,2024-03-08T15:27:10Z,2024-03-08T15:27:10Z,"Hello,
thanks for the jgit-project (using it for ages now) could you perhaps let us know when you had the chance to also release the 6.9.0.202403050737-r to maven central? Thanks!


Edit: Thanks I see it released now: https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit/6.9.0.202403050737-r","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52XlUM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52bxst,jgit,1986992941,17,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-09T22:06:26Z,2024-03-09T22:06:26Z,"Yes, technically it's already deployed on Maven Central. We announce the release with Eclipse simultaneous release next Wednesday.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52bxst/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56S-6j,jgit,2051796643,17,NA,henryju,281596,Julien HENRY,,NA,2024-04-12T13:46:53Z,2024-04-12T13:46:53Z,"Hi, after updating to JGit 6.9 to fix the mentioned error, we are now getting:
```text
java.lang.NoClassDefFoundError: ch/qos/logback/classic/spi/ThrowableProxy
[09:58:34.514]     	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:143)
[09:58:34.514]     	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:424)
[09:58:34.514]     	at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:386)
[09:58:34.514]     	at ch.qos.logback.classic.Logger.error(Logger.java:543)
[09:58:34.514]     	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:87)
[09:58:34.514]     	at java.base/java.lang.Thread.run(Thread.java:840)
[09:58:34.514]     Caused by: java.lang.ClassNotFoundException: ch.qos.logback.classic.spi.ThrowableProxy
```

is it related?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56S-6j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56ZoiH,jgit,2053539975,17,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-04-13T06:50:54Z,2024-04-13T06:50:54Z,"JGit uses slf4j API for logging, if you want to use logback as logging backend you need to ensure that its jars are on the classpath","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56ZoiH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56h4c7,jgit,2055702331,17,NA,henryju,281596,Julien HENRY,,NA,2024-04-15T06:57:12Z,2024-04-15T06:57:12Z,"They are. Everything is working well until the JVM is shutting down. Isn't it the same analysis as the JGitText not found?
> Since the VM is shutting down, the ~JGitText~ ThrowableProxy class may or may not be loaded anymore, and that might even depend on the current JVM version or implementation.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56h4c7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56iHZM,jgit,2055763532,17,NA,henryju,281596,Julien HENRY,,NA,2024-04-15T07:10:31Z,2024-04-15T07:10:31Z,"In our case, we are using JGit in an application that is using classloader isolation. So I guess the problem is that we are closing our classloader before the JGit ShutdownHook is executed.
Relying on a shutdown hook is not good for any scenario involving loading JGit in a child classloader. Would it be possible to make this behavior optional and let people manually call the `cleanup` method before closing their classloaders?

For the record, here is a similar discussion: https://github.com/classgraph/classgraph/issues/376
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56iHZM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57yH1u,jgit,2076736878,17,NA,henryju,281596,Julien HENRY,,NA,2024-04-25T09:17:13Z,2024-04-25T09:17:13Z,"Hi folks, would you be open for a change letting clients call the cleanup method themself instead of relying on a shutdown hook?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57yH1u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6BhqJw,jgit,2173084272,17,NA,bratwurzt,596672,Dušan,,NA,2024-06-17T11:00:37Z,2024-06-17T11:00:37Z,"Why is this task closed? We are still getting:
```
Exception in thread ""Thread-262"" java.lang.NoClassDefFoundError: ch/qos/logback/classic/spi/ThrowableProxy
	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:145)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:424)
	at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:386)
	at ch.qos.logback.classic.Logger.error(Logger.java:543)
	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:87)
	at java.base/java.lang.Thread.run(Thread.java:833)
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6BhqJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Fybrs,jgit,2244590316,17,NA,hiddenalpha,23085769,Andreas Fankhauser,,NA,2024-07-23T08:34:07Z,2024-07-23T08:34:07Z,"Seems to relate to my case. Error is:
```
Exception in thread ""Thread-0"" java.lang.NoClassDefFoundError: ch/qos/logback/classic/spi/ThrowableProxy
	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:145)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:424)
	at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:386)
	at ch.qos.logback.classic.Logger.error(Logger.java:543)
	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:87)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.ClassNotFoundException: ch.qos.logback.classic.spi.ThrowableProxy
	at java.base/java.net.URLClassLoader.findClass(Unknown Source)
	at org.sonarsource.scanner.api.internal.IsolatedClassloader.loadClass(IsolatedClassloader.java:82)
	at java.base/java.lang.ClassLoader.loadClass(Unknown Source)
	... 6 more
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Fybrs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GKhlX,jgit,2250905943,17,NA,jebeaudet,3722096,Jacques-Etienne Beaudet,jebeaudet@gmail.com,NA,2024-07-25T16:33:58Z,2024-07-25T16:33:58Z,"Most likely related, but ours is on `Stats` : 
```10:41:26  [ERROR] java.lang.NoClassDefFoundError: org/eclipse/jgit/util/Stats
10:41:26  java.util.concurrent.CompletionException: java.lang.NoClassDefFoundError: org/eclipse/jgit/util/Stats
10:41:26      at java.util.concurrent.CompletableFuture.encodeThrowable (CompletableFuture.java:315)
10:41:26      at java.util.concurrent.CompletableFuture.completeThrowable (CompletableFuture.java:320)
10:41:26      at java.util.concurrent.CompletableFuture$AsyncSupply.run (CompletableFuture.java:1770)
10:41:26      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1144)
10:41:26      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:642)
10:41:26      at java.lang.Thread.run (Thread.java:1583)
10:41:26  Caused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/util/Stats
10:41:26      at org.eclipse.jgit.util.FS$FileStoreAttributes.measureMinimalRacyInterval (FS.java:520)
10:41:26      at org.eclipse.jgit.util.FS$FileStoreAttributes.lambda$3 (FS.java:442)
10:41:26      at java.util.concurrent.CompletableFuture$AsyncSupply.run (CompletableFuture.java:1768)
10:41:26      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1144)
10:41:26      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:642)
10:41:26      at java.lang.Thread.run (Thread.java:1583)
10:41:26  Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.util.Stats
10:41:26      at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass (SelfFirstStrategy.java:50)
10:41:26      at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass (ClassRealm.java:271)
10:41:26      at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:247)
10:41:26      at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:239)
10:41:26      at org.eclipse.jgit.util.FS$FileStoreAttributes.measureMinimalRacyInterval (FS.java:520)
10:41:26      at org.eclipse.jgit.util.FS$FileStoreAttributes.lambda$3 (FS.java:442)
10:41:26      at java.util.concurrent.CompletableFuture$AsyncSupply.run (CompletableFuture.java:1768)
10:41:26      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1144)
10:41:26      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:642)
10:41:26      at java.lang.Thread.run (Thread.java:1583)```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GKhlX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/17,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GK2WL,jgit,2250990987,17,NA,TheSnoozer,6849390,,,NA,2024-07-25T17:02:23Z,2024-07-25T17:02:23Z,I'd recommend to create a new issue if there is still something wrong in the latest version...,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GK2WL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/18,https://api.github.com/repos/eclipse-jgit/jgit/issues/18,jgit,2088852986,18,Add more specific error message when trying to access http repositories,chriswainformatik,26794648,,,CLOSED,2024-01-18T18:37:17Z,2024-01-25T09:55:15Z,"### Description

When trying to access a repository via http, the error message should be something like: ""You cannot access repositories via http."" instead of ""Authentication is required but no CredentialsProvider has been registered.""

There are probably more cases than http/https which are covered by this error.

### Motivation

It helps people finding bugs in their software and/or server configuration.

### Alternatives considered

_No response_

### Additional context

I was using BlueJ and my own git server which I misconfigured so that it only used http instead of https. When I tried to checkout a repository from my server I only got the error message mentioned above. It would have saved me a lot of time finding my mistake if the error message had been referring to what the actual problem was.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/18,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1HvK,jgit,1909750730,18,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-25T09:33:23Z,2024-01-25T09:33:23Z,"JGit has no such restriction. It's BlueJ that implements it that way, and the message you got (""Authentication is required but no CredentialsProvider has been registered."") is in fact spot on.

BlueJ sets a CredentialsProvider [only if the protocol is ""ssh"" or ""https""](https://github.com/k-pet-group/BlueJ-Greenfoot/blob/5c31821dfeb1decc08110f72004f483c1e33cca0/bluej/src/main/java/bluej/groupwork/git/GitCommand.java#L69). It does not do so for plain old ""http"", so you can do only anonymous clones over plain ""http"".

Apart from that I notice that BlueJ
* depends on the [very old JGit 4.9.0.201710071750-r](https://github.com/k-pet-group/BlueJ-Greenfoot/blob/5c31821dfeb1decc08110f72004f483c1e33cca0/bluej/build.gradle#L19).
* always [disables host key checking](https://github.com/k-pet-group/BlueJ-Greenfoot/blob/5c31821dfeb1decc08110f72004f483c1e33cca0/bluej/src/main/java/bluej/groupwork/git/GitCommand.java#L77) for SSH connections, which is bad since it makes one susceptible to man-in-the-middle attacks.
* sets an [SSH session factory](https://github.com/k-pet-group/BlueJ-Greenfoot/blob/5c31821dfeb1decc08110f72004f483c1e33cca0/bluej/src/main/java/bluej/groupwork/git/GitCommand.java#L71) even for HTTPS connections, which is nonsense.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1HvK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/18,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1IBF,jgit,1909751877,18,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-01-25T09:34:05Z,2024-01-25T09:34:05Z,Not a problem in JGit.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1IBF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/18,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1Qg9,jgit,1909786685,18,NA,chriswainformatik,26794648,,,NA,2024-01-25T09:55:14Z,2024-01-25T09:55:14Z,"Thank you for clarification, I will talk to the BlueJ team again.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5x1Qg9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,jgit,2116201967,19,JGit Compatability with Jakarta EE10,ekennedy80,1848382,ekennedy80,,CLOSED,2024-02-03T04:18:22Z,2024-08-30T06:27:17Z,"### Description

Currently, JGit uses javax.* making it incompatible with newer jakarta.*.

### Motivation

In order to allow other web applications that use JGit the ability to use newer jakarata libs, JGit needs to move away from javax to jakarta.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM55uUO-,jgit,2042184638,19,NA,mchoubby,15172350,mohammed choubby,mohammed.choubby@gmail.com,NA,2024-04-08T08:39:25Z,2024-04-08T08:39:25Z,when will this enhancement be achieved please ? it's blocking us from upgrading to the last major version of spring boot,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM55uUO-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM582eJf,jgit,2094654047,19,NA,davido,347173,David Ostrovsky,,NA,2024-05-05T06:45:04Z,2024-05-05T06:45:04Z,"Here is the pending change to migrate to Jetty 11.0 and Servlet-API to 5.0: [1].

[1] https://review.gerrithub.io/c/eclipse-jgit/jgit/+/189213","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM582eJf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-eYt9,jgit,2121894781,19,NA,tomjo,5212313,Tom Jorissen,tom@tomjo.net,NA,2024-05-21T06:59:56Z,2024-05-21T06:59:56Z,I see this change is merged ❤️  Is there a planning for the next release version?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-eYt9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kwUR,jgit,2123564305,19,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-21T22:58:10Z,2024-05-21T22:58:10Z,"JGit releases following the calendar of the Eclipse IDE simultaneous release,
see https://github.com/eclipse-simrel/.github/blob/main/wiki/Simultaneous_Release.md

JGit releases (existing and planned) are listed here https://projects.eclipse.org/projects/technology.jgit
- The next release 6.10 is planned to be shipped with Eclipse IDE 2024-06 on June 12, 2024.
- We plan to ship the update to Jetty 12 (see issue #41) with JGit 7.0 with Eclipse IDE 2024-06 on Sep 11, 2024.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kwUR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jfk32,jgit,2306756086,19,NA,BaumiCoder,73783062,Michael Baumgartner,,NA,2024-08-23T10:06:22Z,2024-08-23T10:06:22Z,"I try to use the 6.10 version in [Artemis](https://github.com/ls1intum/Artemis), but jgit http server still contains `javax` instead of `jakarta` for the imports.

The switch was performed with commit https://github.com/eclipse-jgit/jgit/commit/a31580f459b0ae24b51c519ce71ad728ff156c8f on May 2, 2024. Althougth the [tag of 6.10](https://github.com/eclipse-jgit/jgit/releases/tag/v6.10.0.202406032230-r) from Jun 4, 2024 does not contain this change. For example `GitServlet.java` still contains `javax` [in this tag](https://github.com/eclipse-jgit/jgit/blob/23aaf83e8b4fa38640eeb6206e909f23eaba2994/org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java).

@msohn I would have understood your comment to mean that this change should be included in 6.10. Am I wrong here?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jfk32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/19,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jgns5,jgit,2307029817,19,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-23T12:50:36Z,2024-08-23T12:50:36Z,The switch was performed on the next branch and meanwhile merged to master. It will be shipped with 7.0 on September 11.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jgns5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/20,https://api.github.com/repos/eclipse-jgit/jgit/issues/20,jgit,2127732055,20,Add `restore` operation,rpost,1088047,Radek Postołowicz,,OPEN,2024-02-09T19:27:24Z,2024-08-15T05:18:04Z,"### Description

See https://git-scm.com/docs/git-restore

### Motivation

Reference git implementation supports that.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/20,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GYGmb,jgit,2254465435,20,NA,kumarp149,68728539,,,NA,2024-07-28T10:27:47Z,2024-07-28T10:27:47Z,"Hi @msohn
I am willing to work on this feature enhancement","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GYGmb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/20,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqlRd,jgit,2259309661,20,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-07-30T22:26:16Z,2024-07-30T22:26:16Z,"You are welcome to contribute this, follow the [contributor guide](https://github.com/eclipse-egit/egit/wiki/Contributor-Guide#contributing-patches) and ask on the [mailing list](https://accounts.eclipse.org/mailing-list/jgit-dev) or visit the [jgit chat](https://chat.eclipse.org/#/room/#technology.jgit.reviews:matrix.eclipse.org) if you need help.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqlRd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/20,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IiIIf,jgit,2290647583,20,NA,kumarp149,68728539,,,NA,2024-08-15T05:18:03Z,2024-08-15T05:18:03Z,"HI @msohn 
For certain scenarios, restore behaves exactly like checkout. Can we use the same checkout API or do we still need to create the methods for restore, separately?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IiIIf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/21,https://api.github.com/repos/eclipse-jgit/jgit/issues/21,jgit,2131193152,21,Use of SnapshottingRefDirectory can use a stale loose ref upon updates,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,CLOSED,2024-02-12T23:51:57Z,2024-08-29T15:11:06Z,"### Version

6.6.0 or later

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

## The Problem

When using the `SnapshottingRefDirectory`, if a thread has read
packed-refs, then another actor updates packed-refs, the original
thread may create an update that is based on the old cached/snapshotted
packed-refs content. That update could effectively perform a forced
update unintentionally because it is unaware of the new content. This
seems particularly likely to happen in a scenario where a loose ref was
just packed. Our thread would otherwise see the non-snapshotted loose
ref value, but instead relies on its outdated packed-refs snapshot.

The problem is potentially related to the [Gerrit Code Review Issue 309098227](https://issues.gerritcodereview.com/issues/309098227)
where Gerrit multi-site plugin detected an in-memory split-brain where
two threads were trying to update the same ref, with one of the thread
having a stale cached data, which is compatible with the underlying
JGit issue.

In the case of the [Gerrit Code Review Issue 309098227](https://issues.gerritcodereview.com/issues/309098227),
disabling the use of `SnapshottingRefDirectory` solved the problem.


### Actual behavior

The two threads trying to update the same ref did not have the same _view_ of the underlying ref-db at the time of the ref-update execution.

### Expected behavior

When two threads are reading concurrently a changing ref-db and starting to update a ref, they should have the same view of the ref-db which corresponds to the latest update performed on disk, regardless of the previously cached value.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/21,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zn8s4,jgit,1939852088,21,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-02-13T00:16:49Z,2024-02-13T00:16:49Z,@quic-nasserg provided a fix with [Change 1176275](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1176275),"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zn8s4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/21,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zxSlK,jgit,1942301002,21,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-13T19:50:14Z,2024-02-13T19:50:14Z,[Change 1176275](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1176275) was merged on stable-6.6,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5zxSlK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,jgit,2135297714,23,SSH-Agent-Proxy can't be used for users with .ssh/config IdentityFile entry,realdadfish,208234,Thomas Keller,me@thomaskeller.biz,CLOSED,2024-02-14T22:21:10Z,2024-03-22T20:06:40Z,"### Version

6.8.0.202311291450-r

### Operating System

MacOS

### Bug description

If JGit is configured to use a custom `JschConfigSessionFactory` to connect to a locally running `ssh-agent` instance via proxy like this:

```kotlin
val factory = object : JschConfigSessionFactory() {
    @Throws(JSchException::class)
    override fun createDefaultJSch(fs: FS): JSch {
        val jsch: JSch = super.createDefaultJSch(fs)
        if (SSHAgentConnector.isConnectorAvailable()) {
            val factory = ConnectorFactory.getDefault()
            val identityRepository = RemoteIdentityRepository(factory.createConnector())
            jsch.identityRepository = identityRepository
        }
        return jsch
    }
}
SshSessionFactory.setInstance(factory)
```

then this `RemoteIdentityRepository` will *not* be used if the user who is running a program with JGit has a local `.ssh/config` file that contains one or more references to `IdentityFile`s:

```
IdentityFile ~/.ssh/id_first
IdentityFile ~/.ssh/id_second
```

The reason for that misbehavior is the following code in `org.eclipse.jgit.transport.ssh.jsch.JschConfigSessionFactory` with inline comments what's going on:

```java
protected JSch getJSch(OpenSshConfig.Host hc, FS fs) throws JSchException {
	if (defaultJSch == null) {
		defaultJSch = createDefaultJSch(fs);
		if (defaultJSch.getConfigRepository() == null) {
			defaultJSch.setConfigRepository(
					new JschBugFixingConfigRepository(config));
		}
		for (Object name : defaultJSch.getIdentityNames())
			byIdentityFile.put((String) name, defaultJSch);
                    // ^^^ the identities coming from the agent are identified by their name (comment), e.g. ""my-first-identity""
	}

	final File identityFile = hc.getIdentityFile();
             // ^^^ here the first identity file from .ssh/config is returned, i.e. /absolute/path/to/.ssh/id_first
	if (identityFile == null)
		return defaultJSch;
                     // ^^^ no identity file, no problem, our JSch instance with the remote identity repository is used

	final String identityKey = identityFile.getAbsolutePath();
	JSch jsch = byIdentityFile.get(identityKey);
             // ^^^ now that can never succeed, because the comment of the identity is of course unequal to the path of it's file
	if (jsch == null) {
		jsch = new JSch();
		configureJSch(jsch);
		if (jsch.getConfigRepository() == null) {
			jsch.setConfigRepository(defaultJSch.getConfigRepository());
		}
		jsch.setHostKeyRepository(defaultJSch.getHostKeyRepository());
		jsch.addIdentity(identityKey);
		byIdentityFile.put(identityKey, jsch);
	}
	return jsch;
}
```

### Actual behavior

The overridden JSch instance is thrown away.

### Expected behavior

The overriden JSch instance should take precedence.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z7ZCE,jgit,1944948868,23,NA,realdadfish,208234,Thomas Keller,me@thomaskeller.biz,NA,2024-02-14T23:07:25Z,2024-02-14T23:07:25Z,"Hrm... I just figured that `getJSch` is protected, so I could overwrite the complete implementation there for my use case. Oh well. Guess this can be closed then.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z7ZCE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z7mwN,jgit,1945005069,23,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-14T23:29:17Z,2024-02-14T23:29:17Z,"Please note that jsch is pretty much unmaintained, hence better use the Apache mina-sshd client.
At some point in time we will remove support for jsch.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5z7mwN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM54GhWD,jgit,2014975363,23,NA,realdadfish,208234,Thomas Keller,me@thomaskeller.biz,NA,2024-03-22T12:29:27Z,2024-03-22T12:29:27Z,"Since it was not totally obvious for me, it all works fine out-of-the box with the said Apache MINA SSHD-Client via service loading when the artifacts `org.eclipse.jgit:org.eclipse.jgit.ssh.apache` and `org.eclipse.jgit:org.eclipse.jgit.ssh.apache.agent` are in the runtime classpath. Thanks again!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM54GhWD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/23,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM54Jw0U,jgit,2015825172,23,NA,realdadfish,208234,Thomas Keller,me@thomaskeller.biz,NA,2024-03-22T20:06:39Z,2024-03-22T20:06:39Z,"And one more follow-up, to disable SSH Host Key verification (because in the CI Setup I'm using I can't make the default implementation recognize my `~/.ssh/known_hosts` file) the following code was needed:

```kotlin
SshSessionFactory.setInstance(object : SshdSessionFactory() {
    override fun createServerKeyDatabase(homeDir: File?, sshDir: File?): ServerKeyDatabase {
        return object : ServerKeyDatabase {
            override fun lookup(
                connectAddress: String?,
                remoteAddress: InetSocketAddress?,
                config: ServerKeyDatabase.Configuration?
            ): MutableList<PublicKey> = mutableListOf()

            // accept any checked key
            override fun accept(
                connectAddress: String?,
                remoteAddress: InetSocketAddress?,
                serverKey: PublicKey?,
                config: ServerKeyDatabase.Configuration?,
                provider: CredentialsProvider?
            ): Boolean = true
        }
    }
})

```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM54Jw0U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,jgit,2139127873,24,No forking process when building a Repository object,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,OPEN,2024-02-16T18:00:59Z,2024-02-27T22:09:07Z,"### Description

Gradle with the configuration cache enabled, needs to not fork processes. Obviously git is very popular, and integrated with versioning. Unfortunately it seems that jgit, in some cases, and possibly unnecessarily, forks git itself and makes it incompatible with the configuration cache.

```
2 problems were found storing the configuration cache.
- Plugin 'com.xenoterracide.gradle.sem-ver': external process started '/usr/bin/git --version'
  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes
- Plugin 'com.xenoterracide.gradle.sem-ver': external process started '/usr/bin/git config --system --show-origin --list -z'
  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes
```

I'm currently not certain if it deals with both forks, but perhaps the environment variable Constants.GIT_CONFIG_NOSYSTEM_KEY could also be set programatically on the builder.

### Alternatives considered

There's this, but I don't know if it's sufficient https://stackoverflow.com/a/59110721/206466

I also believe there may be ways to workaround it with gradle.

### Additional context

I might be willing to take a stab at this, with feedback. Here's what spotless is doing as a workaround

https://github.com/diffplug/spotless/blob/main/plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchetGradle.java#L35","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50WtFm,jgit,1952108902,24,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-19T10:07:47Z,2024-02-19T10:07:47Z,"I think building a Repository object in JGit does neither fork another process nor use git.
Can you present any proof that this is not true ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50WtFm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50YWza,jgit,1952541914,24,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-02-19T14:16:03Z,2024-02-19T14:16:03Z,"I mean, I would hope that gradle's error is enough, you can check out this branch, it's build fails with the error.


https://github.com/xenoterracide/gradle-semver/tree/external/bug/jgit-24

This is the line that causes the failure
https://github.com/xenoterracide/gradle-semver/blob/external/bug/jgit-24/src/main/java/com/xenoterracide/gradle/semver/GitVersionProvider.java#L27

This is the test you can run to reproduce the failure. `configurationCache()` is the actual test that fails, unfortunately gradle has chosen not to put effort into running the debugger with `--configuration-cache` and the debugger at the same time. So if you want to break point you'll need to use the `debug()` test.

https://github.com/xenoterracide/gradle-semver/blob/external/bug/jgit-24/src/test/java/com/xenoterracide/gradle/semver/SemVerPluginIntegrationTest.java

`git --version` is called here https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java#L1557

it's called, through a level or two, via

https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/util/SystemReader.java#L107

setting the environment variable isn't an option here

I'm not certain what calls `openSystemConfig`, only that it is called at some point when using `Git.open` and `FileRepositoryBuilder...build()`.

if this isn't evidence/research enough, what would you like me to provide?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50YWza/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50Y6dm,jgit,1952687974,24,NA,Vampire,325196,Björn Kautler,Bjoern@Kautler.net,NA,2024-02-19T15:25:47Z,2024-02-19T15:25:47Z,"@msohn believe it or not, it does. ;-)
Iirc, not exactly when building a Repository object, but in some static initializer that happens latest then.
JGit searches for the `git` executable on the path and then executes it twice, one time with `--version` and one time to get the location of the system configuration file.
On macOS it might even further start a `bash` to call `which git` and an `xcode-select`.
It's the implementation of `discoverGitExe()` in `FS_POSIX.java` and `FS_Win32.java` that does this.
It can be disabled by setting the mentioned `GIT_CONFIG_NOSYSTEM` environment variable, which is only an option if you actually control the process, or by setting in time a custom `SystemReader` instance that has the same effect by overwriting the `openSystemConfig` with a custom version that does not call out to the `git` executable.
This is a very long known ""issue"" with JGit.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50Y6dm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bDCh,jgit,1953247393,24,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-19T22:51:56Z,2024-02-19T22:51:56Z,"Ok, now I understand what you mean. I was misled by your sentence stating that JGit forks git which didn't make sense for me.

`SystemReader.Default` does that to ensure JGit by default looks at the same configuration files which git is using.
If you want a different behavior you can follow the approach Gerrit uses to load the system config from a custom path
which is located under the gerrit site's `etc` directory. This is achieved by a custom `SystemReader` delegating
all methods to the default implementation except `openSystemConfig()` which it overrides to implement the custom behavior.

If you don't need the system config you may e.g. return a dummy config from this method:

```
return new FileBasedConfig(parent, null, fs) {
	@Override
	public void load() {}

	@Override
	public boolean isOutdated() {
		return false;
	}
};
```

If it helps to solve your issue we may consider to move `DelegateSystemReader` to JGit.

See 
https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/git/SystemReaderInstaller.java
https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/util/git/DelegateSystemReader.java

Would that help ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bDCh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bI6Q,jgit,1953271440,24,NA,Vampire,325196,Björn Kautler,Bjoern@Kautler.net,NA,2024-02-19T23:27:54Z,2024-02-19T23:27:54Z,"We - or at least I - know why JGit does it.
And we are also aware of the two ways to mitigate the problem as I just described that exact approach in my last comment.
I think what Caleb is asking for is a built-in easy to use way to disable the `git.exe` calling that does not require setting an environment variable which you cannot always control and does not require to subclass a method with several abstract methods that you all have to delegate to the default system reader.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bI6Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bQps,jgit,1953303148,24,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-20T00:16:21Z,2024-02-20T00:16:21Z,Pushed SystemReader.Delegate for review https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177071,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50bQps/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50gTFe,jgit,1954623838,24,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-02-20T16:45:55Z,2024-02-20T16:45:55Z,"That's a massive improvement.

However, what I was hoping to be able to write is something like

```java
    var builder = new FileRepositoryBuilder()
      .withSystemConfig(false)
      .readEnvironment()
      .setMustExist(true)
      .findGitDir(this.projectDirectory);

    try (var repo = builder.build()) {
```

The reality is that I don't think this would actually fix the big concern that worries me, which is the the idea of two different classes delegating over the same static singleton. Gradle is unlikely to have this problem because of how it separates two plugins. the example has the same behavior in both cases so it wouldn't matter, but imagine they didn't.

```java
package com.xenoterracide;

import org.eclipse.jgit.util.SystemReader;
import org.gradle.api.Plugin;
import org.gradle.api.Project;

public class SemVerPlugin implements Plugin<Project> {
  static {
    preventJGitFromCallingExecutables();
  }

  static void preventJGitFromCallingExecutables() {
    SystemReader reader = SystemReader.getInstance();
    SystemReader.setInstance(
      new DelegatingSystemReader(reader) {
        @Override
        public String getenv(String variable) {
          return ""PATH"".equals(variable) ? """" : super.getenv(variable);
        }
      }
    );
  }
```
```java
package com.myorg;

import org.eclipse.jgit.util.SystemReader;
import org.gradle.api.Plugin;
import org.gradle.api.Project;

public class SemVerPlugin implements Plugin<Project> {
  static {
    preventJGitFromCallingExecutables();
  }

  static void preventJGitFromCallingExecutables() {
    SystemReader reader = SystemReader.getInstance();
    SystemReader.setInstance(
      new DelegatingSystemReader(reader) {
        @Override
        public String getenv(String variable) {
          return ""PATH"".equals(variable) ? """" : super.getenv(variable);
        }
      }
    );
  }
```

Internally having a check in `SystemReader` that is, also feels safer in support of the pattern. It doesn't solve the aforementioned problem though, because `SystemReader.getInstance` is called 86 times and is a mutable singleton.

```java
			if (this.gitSystemConfig && StringUtils
					.isEmptyOrNull(getenv(Constants.GIT_CONFIG_NOSYSTEM_KEY))) {
				File configFile = fs.getGitSystemConfig();
				if (configFile != null) {
					return new FileBasedConfig(parent, configFile, fs);
				}
			}
```

Sorry, it feels like what I'm saying is a little chaotic. I'm just concerned with longterm support and libraries having class load order issues. I don't think the latter is easily fixable and would probably require a v7 to get away from it.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50gTFe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50iX3c,jgit,1955167708,24,NA,Vampire,325196,Björn Kautler,Bjoern@Kautler.net,NA,2024-02-20T21:43:14Z,2024-02-20T21:43:14Z,"> Gradle is unlikely to have this problem

Why?

> because of how it separates two plugins. 

You mean like ... **not**?
Plugins are not isolated.
And using static state in a Gradle plugin is actually highly problematic.
Spotbugs for example uses static state and the Spotbugs Gradle plugin used to call Spotbugs in-process, which caused even builds of totally different projects that happened to run in the same daemon one after another influencing each other in sometimes subtle and sometimes not so subtle ways.
The plugin was later fixed to do the actual Spotbugs invocations each in a separate process to mitigate this.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50iX3c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50ibpM,jgit,1955183180,24,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-02-20T21:54:26Z,2024-02-20T21:54:26Z,"no, but I stand corrected. I thought gradle was doing some classloader magic or something under the hood to avoid jar hell from plugins. My mistake. This of course, arguably, makes my concern about multiple plugins using jgit, and this mutable singleton instance more concerning. The right answer perhaps being to shade jgit (unless resolving the singleton is a possibility).

Essentially, as written with Delegate's, it's going to be russian nesting dolls of a delegate, delegating to a delegate, as each attempts to solve the same problem, possibly in different ways. We then all pray that no one is doing something that breaks it.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50ibpM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IgvP,jgit,1965165519,24,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T20:11:12Z,2024-02-26T20:11:12Z,"> That's a massive improvement.

:-)

> However, what I was hoping to be able to write is something like
> 
> ```java
>     var builder = new FileRepositoryBuilder()
>       .withSystemConfig(false)
>       .readEnvironment()
>       .setMustExist(true)
>       .findGitDir(this.projectDirectory);
> 
>     try (var repo = builder.build()) {
> ```
> 
> The reality is that I don't think this would actually fix the big concern that worries me, which is the the idea of two different classes delegating over the same static singleton. Gradle is unlikely to have this problem because of how it separates two plugins. the example has the same behavior in both cases so it wouldn't matter, but imagine they didn't.

I think the decision if you want to use the git system config or not should be global per process using JGit.
Which semantics would you end up with if some part of the code running in that process would respect the system level config and another part would not ?

How to configure this consistently e.g. using a custom SystemReader for one or multiple Gradle plugins seems like a problem which needs to be solved on the application side (here Gradle).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IgvP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/24,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51SOFD,jgit,1967710531,24,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-02-27T22:08:04Z,2024-02-27T22:08:04Z,"> I think the decision if you want to use the git system config or not should be global per process using JGit.

> Which semantics would you end up with if some part of the code running in that process would respect the system level config and another part would not ?

Because java doesn't have a good way of segmenting libraries (does anything?) where mutable contants can be modified by 2 different libraries, and multiple versions of the same library have no real guaranteed load order. The best option is to stop having a mutable global singleton. Instead preferring the below code, but working in a way that a global singleton is never used. Likely that means passing around the system reader.

The other thing that would make a setter/wither appealing is knowing that this isn't a ""hack"" but an officially approved pattern to avoid c git. It feels like a hack that might break in the future.

Unintuitively, this doesn't work, btw. Without setting the global instance, this fails all the same (an asside, I don't know why readEnvironment can even take it if it can be ignored).

```java
     var builder = new FileRepositoryBuilder()
        .readEnvironment(
          new DelegatingSystemReader(
            new DelegatingSystemReader(SystemReader.getInstance()) {
              @Override
              public String getenv(String variable) {
                if (""PATH"".equals(variable)) {
                  return """";
                } else {
                  return super.getenv(variable);
                }
              }
            }
          )
        )
        .setMustExist(true)
        .findGitDir(this.getParameters().getProjectDirectory().get().getAsFile());
```

>  application side (here Gradle).

Gradle isn't responsible for fixing this, that's the same as saying Java is... this is just an issue with having multiple people mutate the same constant within java. That's why it's an antipattern to have mutable static fields.

The only option without jgit migrating away from the antipattern is to shade the library and for me to hope that it's recognized that this will always be needed and that it's not ""hacky"".","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51SOFD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,jgit,2142755294,25,Support public key in IdentityFile,kwin,185025,Konrad Windszus,,CLOSED,2024-02-19T16:28:09Z,2024-02-23T20:25:47Z,"### Description

When using the 1Password SSH Agent (https://developer.1password.com/docs/ssh/agent/) it will by default propose all private keys found. As that often conflicts with the max authentication tries on servers (https://developer.1password.com/docs/ssh/agent/advanced#ssh-server-six-key-limit) or is even not supported at all (https://learn.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops#q-i-have-multiple-ssh-keys-how-do-i-use-the-correct-ssh-key-for-azure-devops) there is a special mechanism devised outlined at https://developer.1password.com/docs/ssh/agent/advanced#match-key-with-host:

- The *public* key is set as `IdentityFile` (instead of the *private* one)
- Then the SSH agent is used with https://datatracker.ietf.org/doc/html/draft-miller-ssh-agent#section-3.6 and the given public key from the config only which will figure out the according private key for signing

(Usually all public keys in no specific order are used against the server which will request a signature if it recognizes the given public key)

### Motivation

The same approach seems to be used by other password managers like KeePass XC (https://keepassxc.org/docs/#faq-ssh-agent-openssh). It is supported in IntelliJ already fine: https://youtrack.jetbrains.com/issue/IDEA-249562/SSH-wont-connect-with-public-key-in-IdentityFile

### Alternatives considered

Exporting private keys to the filesystem is less secure than directly reusing it from a vault of a password manager but obviously works as workaround.

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50ZhfP,jgit,1952847823,25,NA,kwin,185025,Konrad Windszus,,NA,2024-02-19T16:37:13Z,2024-02-19T16:37:13Z,Maybe this is just an issue with interpreting the `IdentityFile` from the SSH config. What I see is that the server just rejects the authentication (but it works fine from the command line). This is despite the fact that the agent is triggered. Seems that somehow the wrong private key is taken. Is there any log level I can use to trace which identityfile has been used in Egit?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50ZhfP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50aMSh,jgit,1953023137,25,NA,kwin,185025,Konrad Windszus,,NA,2024-02-19T18:54:47Z,2024-02-19T18:54:47Z,The issue is in https://github.com/eclipse-jgit/jgit/blob/c35deb6d8e0dfee8138a2e9eec7d384fd6ed162e/org.eclipse.jgit.ssh.apache/src/org/eclipse/jgit/internal/transport/sshd/JGitPublicKeyAuthentication.java#L330 which tries to figure out the according public key by just appending `.pub` to the `IdentityFile` value. Once such a file is there (with identical contents to the one from `IdentityFile` everything works fine).,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM50aMSh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM506bJG,jgit,1961472582,25,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-02-23T14:52:08Z,2024-02-23T14:52:08Z,[Gerrit change 1177073](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177073) was merged.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM506bJG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM507RVp,jgit,1961694569,25,NA,kwin,185025,Konrad Windszus,,NA,2024-02-23T17:09:50Z,2024-02-23T17:09:50Z,@tomaswolf I don't see the commit yet in https://github.com/eclipse-jgit/jgit/tree/stable-6.9 (only in `master` branch). Can you make sure this is cherry-picked so that it really appears in the upcoming 6.9.0?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM507RVp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/25,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM508Od5,jgit,1961944953,25,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-02-23T20:25:46Z,2024-02-23T20:25:46Z,It's business as usual. Both branches still have pom version 6.9.0-SNAPSHOT. Which means a merge of master to stable-6.9 will happen before the release.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM508Od5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/26,https://api.github.com/repos/eclipse-jgit/jgit/issues/26,jgit,2149085551,26,Add support for blobless clones,henryju,281596,Julien HENRY,,OPEN,2024-02-22T13:31:40Z,2024-10-30T12:03:28Z,"### Description

[Blobless](https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-blobless-clones) clones are a suggested optimization to clone large repositories.
`git clone --filter=blob:none <url>`

The native Git CLI will lazy load blobs on-demand, but JGit simply fails:

```
$ ./org.eclipse.jgit.pgm-6.8.0.202311291450-r.sh blame build.gradle 
fatal: Missing blob fc321990ffac88fc65d90d41c483db443833aa93
```


### Motivation

I am not sure this is a popular practice to use blobless clones on developer machines, so this is likely not a use case for EGit.
But for other use cases where JGit is used on CI/CD platforms (Jenkins, Maven, Sonar, ...) it would be great to support this feature.

### Alternatives considered

The current alternative is to ask users to not use blobless clones, or to stop using JGit and use the native Git CLI.

### Additional context

https://community.sonarsource.com/t/missing-blob-jgit-error-with-sonarcloud/109574
https://community.sonarsource.com/t/scan-on-git-blobless-clone-failed/106038","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/26,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51i6lF,jgit,1972087109,26,NA,brettjohnsen-sy,56044453,Brett Johnsen,brett.johnsen@syngenta.com,NA,2024-02-29T22:35:27Z,2024-02-29T22:35:27Z,We are noticing these issues in our Projects using CircleCI and SonarCloud. We would greatly appreciate support for this in the future without workarounds 👍 ,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51i6lF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/26,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6R2JM2,jgit,2446889782,26,NA,tbutler-qontigo,72974415,Tony Butler,,NA,2024-10-30T12:03:26Z,2024-10-30T12:03:26Z,"We have this issue with SonarQube Enterprise and Github actions when we use actions/checkout which automatically filters out blobs.
To work around it, we do a `git fetch --no-filter --refetch` immediately after the checkout but it would be great if jgit supported blobless clones natively so we don't have to remember to add this step to our workflows","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6R2JM2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/27,https://api.github.com/repos/eclipse-jgit/jgit/issues/27,jgit,2154343741,27,BouncyCastleGpgKeyLocator fails with ed25519 PGP keys,cstamas,45165,Tamas Cservenak,tamas@cservenak.net,CLOSED,2024-02-26T14:38:31Z,2024-04-09T18:21:03Z,"### Version

6.8.0.202311291450-r

### Operating System

Linux/Unix

### Bug description

When `.gnupg/private-keys-v1.d` contains ed25519 key, the class BouncyCastleGpgKeyLocator fails, error occurs here:
https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.gpg.bc/src/org/eclipse/jgit/gpg/bc/internal/keys/SecretKeys.java#L134

Cause is most probably
https://github.com/bcgit/bc-java/issues/1590

### Actual behavior

Currently `new PGPException(""no q value found"")` is hit and operation fails.

### Expected behavior

To have ed25519 key loaded up.

### Relevant log output

```Shell
Caused by: org.bouncycastle.openpgp.PGPException: no q value found
    at org.eclipse.jgit.gpg.bc.internal.keys.SExprParser.parseSecretKey (SExprParser.java:134)
    at org.eclipse.jgit.gpg.bc.internal.keys.SecretKeys.readSecretKey (SecretKeys.java:152)
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/27,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM53f3n1,jgit,2004842997,27,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-18T20:04:06Z,2024-03-18T20:04:06Z,"Thanks for this bug report. [Gerrit change 1184466](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1184466) fixes this. Note that it is not sufficient to parse the ""flags"" sub-list; later on the code checks the OIDs and needs to be made aware of the OID for ed25519. It appears to be unknown to Bouncy Castle.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM53f3n1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/27,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM558NQ7,jgit,2045826107,27,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-04-09T18:21:02Z,2024-04-09T18:21:02Z,"[Gerrit change 1184466](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1184466) is merged.

For the next EGit release we can consider bumping the minimum version of BC required to 1.78, and then we can maybe remove this copy of the SExprParser. BC 1.78 is supposed to have an upstream fix for this (and for AES/OCB encrypted keys). I don't want to do this in this release; I first want to have an Eclipse release that includes BC 1.78 by default because of the bundle symbolic name changes in BC.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM558NQ7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/28,https://api.github.com/repos/eclipse-jgit/jgit/issues/28,jgit,2154653833,28,java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText,ewillink,841933,Ed Willink,,CLOSED,2024-02-26T16:56:13Z,2024-02-26T19:23:31Z,"### Version

default

### Operating System

Linux/Unix

### Bug description

My Jenkins jobs such as [https://ci.eclipse.org/qvtd/job/qvtd-master/607/console](url) seem to terminate benignly with 

`Exception in thread ""Thread-5"" java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText
	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:85)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText
	... 2 more
Terminating xvnc.
Recording test results`

Others get similar: [https://github.com/diffplug/spotless/runs/19353778487](url)

### Actual behavior

see above

### Expected behavior

see above

### Relevant log output

```Shell
see above
```


### Other information

see above","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/28,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IF_H,jgit,1965055943,28,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T19:23:31Z,2024-02-26T19:23:31Z,this is a duplicate of bug #17 which was fixed by https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1176056,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IF_H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,jgit,2154659126,29,Bugzilla migration incomplete,ewillink,841933,Ed Willink,,OPEN,2024-02-26T16:59:02Z,2024-03-12T16:32:20Z,"### Version

default

### Operating System

Windows

### Bug description

https://projects.eclipse.org/projects/technology.jgit/developer ""Report a Bug"" etc fails

https://projects.eclipse.org/list-of-projects?combine=jgit&field_project_techology_types_tid=All&field_state_value_2=All ""Report an issue"" fails

### Actual behavior

xyzzy

### Expected behavior

xyzzy

### Relevant log output

```Shell
xyzzy
```


### Other information

xyzzy","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IUEG,jgit,1965113606,29,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-26T19:40:42Z,2024-02-26T19:40:42Z,"Thanks for the heads up. Unfortunately I don't know how to fix this in PMI.
I asked Sebastien for help.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51IUEG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51XA3c,jgit,1968967132,29,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-28T13:18:14Z,2024-02-28T13:18:14Z,@heurtematte Sebastien do you know how we could fix the links shown in PMI which still refer to Bugzilla ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51XA3c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ewfa,jgit,1987774426,29,NA,wetneb,309908,Antonin Delpeuch,antonin@delpeuch.eu,NA,2024-03-11T07:25:07Z,2024-03-11T07:25:07Z,"The CONTRIBUTING.md should be updated and I submitted a patch here:
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177977

I would also recommend to disable pull requests on this repository if changes are meant to be submitted on GerritHub.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ewfa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52hq2p,jgit,1988537769,29,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-11T14:11:18Z,2024-03-11T14:11:18Z,How can pull requests be disabled ? Didn't find anything in the GitHub documentation.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52hq2p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52koi7,jgit,1989314747,29,NA,wetneb,309908,Antonin Delpeuch,antonin@delpeuch.eu,NA,2024-03-11T19:53:08Z,2024-03-11T19:53:08Z,"My bad, I thought it was possible but I mixed up: it's Issues that can be disabled, not PRs.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52koi7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/29,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52vL4K,jgit,1992080906,29,NA,heurtematte,8045662,sebastien.heurtematte,sebastien.heurtematte@eclipse-foundation.org,NA,2024-03-12T16:32:19Z,2024-03-12T16:32:19Z,"> @heurtematte Sebastien do you know how we could fix the links shown in PMI which still refer to Bugzilla ?

Can you open an helpdesk ticket? The webbdev team will look into it.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52vL4K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/30,https://api.github.com/repos/eclipse-jgit/jgit/issues/30,jgit,2155220976,30,CVE-2023-4759 fix for 5.x version? ,huangfeng212,5825859,Feng,huangfeng212@gmail.com,CLOSED,2024-02-26T21:49:00Z,2024-02-26T22:12:23Z,"### Description

Will there be fix of https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4759 for the 5.x version? I see from maven central there is no fix https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit. However our project staying with java8 and can not use the 6.x version 

I found this thread https://www.eclipse.org/forums/index.php/m/1862132/?srch=CVE-2023-4759#msg_1862132  and according to that, the new 5.13.3 should have the cve fixed, but from the maven-central, it still shows that version has the cve. I also encountered same error when I build my project, I think the authority at https://nvd.nist.gov/vuln/detail/CVE-2023-4759 need to update that this 5.13.3 version is also a fixed version.
https://nvd.nist.gov/vuln/detail/CVE-2023-4759
### Motivation

Can't find a CVE free version for 5.x(java8) 

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/30,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51JX-u,jgit,1965391790,30,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-02-26T22:12:23Z,2024-02-26T22:12:23Z,"5.13.3 has that CVE fixed.

As you wrote, NIST should update the listing. We did send an update request, but they say ""This vulnerability has been modified since it was last analyzed by the NVD. It is awaiting reanalysis which may result in further changes to the information provided.""

There's nothing more we can do.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51JX-u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,jgit,2156508928,31,Security bug reporting instructions refer to Bugzilla,jrn,281595,,,CLOSED,2024-02-27T12:50:18Z,2024-02-28T13:14:32Z,"### Bug description

https://github.com/eclipse-jgit/jgit/security/policy states:

> ""The community is also encouraged to report vulnerabilities using the Eclipse Foundation's Bugzilla instance. Note that you will require an Eclipse Foundation account to create an issue report, but by doing so you will be able to participate directly in the resolution of the issue.
>
> Issue reports related to vulnerabilities must be marked as ""committers-only"", either automatically by clicking the provided link, by the reporter, or by a committer during the triage process. Note that issues marked ""committers-only"" are visible to all Eclipse committers. By default, a ""committers-only"" issue is also accessible to the reporter and individuals explicitly indicated in the ""cc"" list.

What is the github issues equivalent that we should be following?

### Actual behavior

Instructions refer to the previous (bugzilla) bug tracker.

### Expected behavior

Instructions refer to the current bug tracker.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OZw5,jgit,1966709817,31,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-27T14:44:22Z,2024-02-27T14:44:22Z,"Thanks for the heads up, looks like we missed this when migrating from Bugzilla.

According to [1] we can choose to either report security issues via confidential issues (GitLab) or private security advisories (GitHub).

AFAIR for tracking past security issues we used confidential GitLab issues, they came in via the Eclipse security team [2].
This worked well for me hence I'd tend to stick to this path. This is also the path described on the general security reporting page of the Eclipse Foundation [3].

I have no experience using GitHub security advisories. Maybe you have ? What's your preference ?

[1] https://www.eclipse.org/projects/handbook/#project-setup-for-vulnerability-reporting
[2] https://www.eclipse.org/security/team/
[3] https://www.eclipse.org/security/","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OZw5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OgcL,jgit,1966737163,31,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-27T14:57:09Z,2024-02-27T14:57:09Z,@mrybczyn what's your recommendation from the Eclipse security team ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OgcL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OvWv,jgit,1966798255,31,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-02-27T15:20:05Z,2024-02-27T15:20:05Z,Can't we just remove our own SECURITY.md file in the repo and have the foundation's global one be used then by default?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51OvWv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Ow4R,jgit,1966804497,31,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-27T15:22:31Z,2024-02-27T15:22:31Z,AFAIR I was asked to add the SECURITY.md by EMO,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51Ow4R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51R4g9,jgit,1967622205,31,NA,jrn,281595,,,NA,2024-02-27T21:28:25Z,2024-02-27T21:28:25Z,"> AFAIR for tracking past security issues we used confidential GitLab issues, they came in via the Eclipse security team [2].
This worked well for me hence I'd tend to stick to this path.

I agree, this is a good path.

> I have no experience using GitHub security advisories. Maybe you have ?

They're good for getting a CVE identifier and advertising it, but I didn't find them more useful than other tools for handling the flow of fixing an issue.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51R4g9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51TBhA,jgit,1967921216,31,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-27T23:44:13Z,2024-02-27T23:44:13Z,"I pushed an update of SECURITY.md https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1177352
using the text from https://www.eclipse.org/security/.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51TBhA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/31,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51W_Se,jgit,1968960670,31,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-02-28T13:14:32Z,2024-02-28T13:14:32Z,submitted update of SECURITY.md,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51W_Se/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/32,https://api.github.com/repos/eclipse-jgit/jgit/issues/32,jgit,2157591069,32,.setTags(true) doesn't work exactly like --tags,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,CLOSED,2024-02-27T21:01:37Z,2024-02-27T21:53:12Z,"### Version

6.8.0.202311291450-r

### Operating System

Linux/Unix

### Bug description

don't ask me how this is possible, I don't understand what github is doing to make this weird, even git isn't behaving like I'd expect, however github is checking it out though... build included for reference.

Here's the tag I push
```
git tag -m ""v0.9.3"" -a v0.9.3 -f && git push --tags -f
```
github does some weird checkout thing that I haven't yet repro-ed locally...

```java
  SemverExtension(@NonNull Supplier<@NonNull Git> git) {
    this.git = Objects.requireNonNull(git);
  }

  Try<@Nullable String> describe() {
    return Try.of(() -> this.git.get().describe().setMatch(VERSION_GLOB).setTags(true))
      .mapTry(DescribeCommand::call)
      .onFailure(ExceptionTools::rethrow);
  }

  public Semver getGradlePlugin() {
    return describe()
      .map(v -> null == v ? PRE_VERSION : v)
      .map(Semver::coerce)
      .map(
        v ->
          !(v.getPreRelease().isEmpty() || v.getBuild().isEmpty()) ? v.withClearedPreReleaseAndBuild().nextPatch() : v
      )
      .get();
  }
```


### Actual behavior

```sh
git describe        #v0.9.2-5-g8ed3c02
git describe --tags #v0.9.3
```

jgit
```
version: 0.9.2-5-g8ed3c02
```

### Expected behavior

should behave like `git describe --tags`

### Relevant log output

_No response_

### Other information

https://github.com/xenoterracide/gradle-semver/actions/runs/8071119003/job/22050029061

the behavior is the same without this change

https://github.com/xenoterracide/gradle-semver/commit/8ed3c02d4f2dce95fdf77d6868eedd5656c25f70#diff-6e959ec6d14b0ecd038956866d1a1f1aa76c247e7b7533db27a91c73a8444531R29

[logs_21180325707.zip](https://github.com/eclipse-jgit/jgit/files/14425673/logs_21180325707.zip)

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/32,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51SEs4,jgit,1967672120,32,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-02-27T21:53:12Z,2024-02-27T21:53:12Z,"invalid, I forgot that I haven't gotten a more direct dog food yet... setTags fixed. On the off chance someone looks at this and knows what would make my local git behave in the same way, that'd be great so I could add a regression test","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM51SEs4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,jgit,2159463559,33,Unconditional addition of BouncyCastle provider breaks usage of other Providers,mcowger,1929548,Matt Cowger,,CLOSED,2024-02-28T17:25:28Z,2024-08-30T06:25:41Z,"https://github.com/eclipse-jgit/jgit/blob/1a654d3db6e5bd667dd5218a55084545538519a2/org.eclipse.jgit.gpg.bc/src/org/eclipse/jgit/gpg/bc/internal/BouncyCastleGpgSigner.java#L58-L60

In many cases, users explicitly manage the JSPs that exist in their environment to meet various compliance related requirements that `BouncyCastle` may not be able to fulfill (certain parts of FIPS-140, for example).

By forcibly adding bouncy castle as a provider on these lines, jgit breaks the ability of developers to control the JSPs in use, and thus are unable to meet some of these compliance requirements.

Rather than forcible addition of BouncyCastle as a provider, `jgit` should instead check for a viable provider of the needed algorithms and use that (in most cases, `BouncyCastle` will be available by default.   If not available, an exception should be thrown.

Alternatively, an option could be added to the relevant constructor to disable this behavior for users that need to control their JSPs.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM513s3f,jgit,1977535967,33,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-04T21:58:32Z,2024-03-04T21:58:32Z,"The library org.eclipse.jgit.gpg.bc uses bouncycastle to implement GPG signing in JGit.
Since it uses bouncycastle APIs I don't see a way how this library could work with a different Java Security Provider which most probably doesn not implement bouncycastle APIs.
If you don't want to use bouncycastle simply don't deploy this library.

Hence I think if you want to use a different GPG implementation you would need to create a different subclass of GpgSigner in another library.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM513s3f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM514GKe,jgit,1977639582,33,NA,popmonkey,287170,popmonkey,,NA,2024-03-04T23:20:50Z,2024-03-04T23:20:50Z,I don't think the issue is that BouncyCastle is used but rather that it is being added to the Security provider chain.  I would like to see a change where BC is memoized and then used explicitly without being inserted in this way.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM514GKe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM514KLq,jgit,1977656042,33,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-04T23:37:13Z,2024-03-04T23:37:13Z,I don't understand what you want. Maybe you can implement your idea and push it for review ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM514KLq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52VPpH,jgit,1985280583,33,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-08T08:42:41Z,2024-03-08T08:42:41Z,"The OP does raise a valid question: is this unconditional registration of the BouncyCastle provider necessary?

The code has no direct dependency on it. GPG does use a few crypto algorithms that are not present in standard providers, for instance AES/OCB/NoPadding used for some encrypted private keys. The code uses the *.jcajce crypto packages of BC, and thus it can use such algorithms if the BC security provider is installed. But maybe using the BC light-weight APIs through the *.bc packages instead of the jcajce ones might be an alternative. The BC light-weight API stuff should work without installing the BouncyCastleProvider.

Whether that helps if a client has to meet FIPS requirements is unclear to me. Does FIPS even know/allow AES/OCB? (Doesn't look like it does to me, but I'm no FIPS expert.)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52VPpH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/33,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KOr-3,jgit,2319105975,33,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T21:56:36Z,2024-08-29T21:56:36Z,fixed by https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1199821 in 7.0,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KOr-3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,jgit,2173465630,34,JGit: tool execution return code: 127 when diff or merge due to error in CommandExecutor.createCommandArray() when Cygwin is on Windows  Path,JeanGarf,53929184,,,CLOSED,2024-03-07T09:59:57Z,2024-03-08T10:54:53Z,"### Version

6.8.0.202311291450-r

### Operating System

Windows

### Bug description

1) Add **Cygwin** in your Windows Path Environment Variable

2) Launch Eclipse and Configure Eclipse eGit preferences to use External Tool for Git diff or merge

3) In Git Staging View, double click on a modified file.

### Actual behavior

We get the following message :

Failed to run external merge tool.
Merge aborted!
JGit: tool execution return code: 127
checkExitCode: true
execError: true
stderr: 
C:\Users\xxx\AppData\Local\Temp\.{}13599643848199867671{}jgit_tool.sh: line 1: C:UsersxxxAppDataLocalTemp.{}13599643848199867671{_}_jgit_tool.sh: command not found


### Expected behavior

The external tool should be launched for Git Diff or Merge without error

### Relevant log output

_No response_

### Other information

The JGit bug is located in **CommandExecutor.createCommandArray()** (of org.eclipse.jgit 6.8.0.202311291450-r) at **line 168** :
} else if (fs instanceof FS_Win32) {

...

    } else if (fs instanceof FS_Win32_Cygwin) {
...

        commandArray[0] = commandFile.getCanonicalPath().replace(""
"", ""/""); //$NON-NLS-1$ //$NON-NLS-2$
        } else {

If Cygwin/bin is part of the Windows path, **fs** is instantiated as **FS_Win32_Cygwin** which is a **sub class** of **FS_Win32**.

Since JGit tests FS_Win32 **before** FS_Win32_Cygwin, we **always end up** in the **FS_Win32 branch** and never in the FS_Win32_Cygwin branch, even if fs is a FS_Win32_Cygwin.

As a result, the .replace(""\\"", ""/"") is **never done**.


In **CommandExecutor.run()** line **78**,

ProcessBuilder pb = fs.runInShell(commandArray[0],

The runInShell() call invokes the FS_Win32_Cygwin version which executes ""**sh.exe -c**"" instead of ""**cmd.exe /c**"" (like in FS_Win32).

However, in the case of ""sh.exe -c"", the following command **should not** contain any **backslashes** (which are interpreted as escaping characters), but slashes, which is not the case because the .replace(""\\"", ""/"") hasn't been done.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Sjq1,jgit,1984576181,34,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-07T22:01:26Z,2024-03-07T22:01:26Z,So the simple fix is to move that cygwin branch before the general win32 branch. See [Gerrit change 1177880](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177880).,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52Sjq1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52TBEs,jgit,1984696620,34,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-07T22:46:19Z,2024-03-07T22:46:19Z,Change submitted as 819c5bcc8b2a2685c20e5b8e568f776b19f7db63,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52TBEs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52VbxO,jgit,1985330254,34,NA,JeanGarf,53929184,,,NA,2024-03-08T09:15:52Z,2024-03-08T09:15:52Z,"Looks good.

Thanks a lot","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52VbxO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/34,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WA_e,jgit,1985482718,34,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-08T10:54:51Z,2024-03-08T10:54:51Z,"From code inspection I would expect more problems if the Windows user name contains blanks and thus the path to the temp file contains blanks. Some quoting might be needed, and perhaps FS.shellQuote() should become public.

But that would be a separate issue to tackle if and when it is reported.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WA_e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/35,https://api.github.com/repos/eclipse-jgit/jgit/issues/35,jgit,2173691843,35,Git clone failed with Krb5LoginModule error - JNA Library,Shikari0744,71756305,Akash-Anand0292,,CLOSED,2024-03-07T11:55:15Z,2024-03-29T17:18:23Z,"### Version

5.13

### Operating System

Windows

### Bug description

I am performing https git clone operation on Azure repository and the request is failing with kerberos auth failure. I am not sure if I am using kerberos internally in my application but this happens only with Azure repository clone action. I tried setting up using ""PAT"" also but that also didn't help (Attached stacktrace as well)

**Error -** 
sun.security.jgss.spnego.SpNegoContext.initSecContext(SpNegoContext.java:454)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:248)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:179)
org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(HttpAuthMethod.java:541)
org.eclipse.jgit.transport.TransportHttp.httpOpen(TransportHttp.java:561)
org.eclipse.jgit.transport.TransportHttp.httpOpen(TransportHttp.java:523)
org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:462)
org.eclipse.jgit.transport.TransportHttp.openFetch(TransportHttp.java:296)
org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:136)
org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:122)
org.eclipse.jgit.transport.Transport.fetch(Transport.java:1138)
org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:130)
com.xx.git.commands.CloneCommand.fetch(CloneCommand.java:222)
com.xx.git.commands.CloneCommand.call(CloneCommand.java:146)
com.xx.git.GitScmService.clone(GitScmService.java:152)
com.xx.git.GitScmService$$FastClassBySpringCGLIB$$e66ae5b2.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
com.xx.actions.AutoActionTaskAspect.injectScmChangeInfoBuilderAdvice(AutoActionTaskAspect.java:139)
sun.reflect.GeneratedMethodAccessor397.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
com.xx.git.GitScmService$$EnhancerBySpringCGLIB$$f03c65a8.clone(<generated>)
com.xx.git.GitConnectionService.cloneRemoteRepository(GitConnectionService.java:336)
com.xx.git.GitConnectionService.cloneAction(GitConnectionService.java:426)
com.xx.git.GitConnectionService.access$200(GitConnectionService.java:84)
com.xx.git.GitConnectionService$1.construct(GitConnectionService.java:224)
com.xx.git.GitConnectionService$1.construct(GitConnectionService.java:211)
com.xx.git.GitConnectionService$2.construct(GitConnectionService.java:234)
com.xx.git.GitConnectionService$2.construct(GitConnectionService.java:231)
com.iconclude.dharma.app.dialogue.TaskProgressDialog$1.doInBackground(TaskProgressDialog.java:373)
javax.swing.SwingWorker$1.call(SwingWorker.java:295)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
javax.swing.SwingWorker.run(SwingWorker.java:334)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:750)

Error -

com.sun.security.auth.module.Krb5LoginModule.promptForPass(Krb5LoginModule.java:925)
com.sun.security.auth.module.Krb5LoginModule.attemptAuthentication(Krb5LoginModule.java:766)
com.sun.security.auth.module.Krb5LoginModule.login(Krb5LoginModule.java:618)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
javax.security.auth.login.LoginContext.invoke(LoginContext.java:755)
javax.security.auth.login.LoginContext.access$000(LoginContext.java:195)
javax.security.auth.login.LoginContext$4.run(LoginContext.java:682)
javax.security.auth.login.LoginContext$4.run(LoginContext.java:680)
java.security.AccessController.doPrivileged(Native Method)
javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)
javax.security.auth.login.LoginContext.login(LoginContext.java:587)
sun.security.jgss.GSSUtil.login(GSSUtil.java:258)
sun.security.jgss.krb5.Krb5Util.getInitialTicket(Krb5Util.java:175)
sun.security.jgss.krb5.Krb5InitCredential$1.run(Krb5InitCredential.java:377)
sun.security.jgss.krb5.Krb5InitCredential$1.run(Krb5InitCredential.java:373)
java.security.AccessController.doPrivileged(Native Method)
sun.security.jgss.krb5.Krb5InitCredential.getTgt(Krb5InitCredential.java:372)
sun.security.jgss.krb5.Krb5InitCredential.getInstance(Krb5InitCredential.java:160)
sun.security.jgss.krb5.Krb5MechFactory.getCredentialElement(Krb5MechFactory.java:122)
sun.security.jgss.krb5.Krb5MechFactory.getMechanismContext(Krb5MechFactory.java:189)
sun.security.jgss.GSSManagerImpl.getMechanismContext(GSSManagerImpl.java:224)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:212)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:179)
sun.security.jgss.spnego.SpNegoContext.GSS_initSecContext(SpNegoContext.java:882)
sun.security.jgss.spnego.SpNegoContext.initSecContext(SpNegoContext.java:317)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:248)
sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:179)
org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(HttpAuthMethod.java:541)
org.eclipse.jgit.transport.TransportHttp.httpOpen(TransportHttp.java:561)
org.eclipse.jgit.transport.TransportHttp.httpOpen(TransportHttp.java:523)
org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:462)
org.eclipse.jgit.transport.TransportHttp.openFetch(TransportHttp.java:296)
org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:136)
org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:122)
org.eclipse.jgit.transport.Transport.fetch(Transport.java:1138)
org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:130)
com.xx.git.commands.CloneCommand.fetch(CloneCommand.java:222)
com.xx.git.commands.CloneCommand.call(CloneCommand.java:146)
com.xx.git.GitScmService.clone(GitScmService.java:152)
com.xx.git.GitScmService$$FastClassBySpringCGLIB$$e66ae5b2.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
com.xx.actions.AutoActionTaskAspect.injectScmChangeInfoBuilderAdvice(AutoActionTaskAspect.java:139)
sun.reflect.GeneratedMethodAccessor242.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
com.xx.git.GitScmService$$EnhancerBySpringCGLIB$$603f33c2.clone(<generated>)
com.xx.git.GitConnectionService.cloneRemoteRepository(GitConnectionService.java:336)
com.xx.git.GitConnectionService.cloneAction(GitConnectionService.java:426)
com.xx.git.GitConnectionService.access$200(GitConnectionService.java:84)
com.xx.git.GitConnectionService$1.construct(GitConnectionService.java:224)
com.xx.git.GitConnectionService$1.construct(GitConnectionService.java:211)
com.xx.git.GitConnectionService$2.construct(GitConnectionService.java:234)
com.xx.git.GitConnectionService$2.construct(GitConnectionService.java:231)
com.iconclude.dharma.app.dialogue.TaskProgressDialog$1.doInBackground(TaskProgressDialog.java:373)
javax.swing.SwingWorker$1.call(SwingWorker.java:295)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
javax.swing.SwingWorker.run(SwingWorker.java:334)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
java.lang.Thread.run(Thread.java:750)

Followed some remedies :-

    Try this steps : - https://groups.google.com/g/gatling/c/4L_OofnOQy0?pli=1
    Control Panel > Credential Manager Check if creds stored in generic password is accurate or not for azure network address.
    add the IP address of the server in its host file. You must also recycle the application server to load the new host file.
    Run ""Klist"" command that comes with java Check for server by name kerberos (like Server: krbtgt...)
    https://support.tibco.com/s/article/Spotfire-Server-KERBEROS-ERROR-No-valid-credentials-provided-Mechanism-level-No-valid-credentials-provided-Mechanism-level-Connection-timed-out-connect

Versions :- I am using jdk 8 version. Our dekstop application uses Git 2.39.2.windows.1 version to perform clone. org.eclipse.jgit.ssh.jsch-5.13.1.202206130422-r.jar

org.eclipse.jgit.ui-5.13.1.202206130422-r.jar

org.eclipse.jgit-5.13.1.202206130422-r.jar

### Actual behavior

Authentication should passed as expected. I tested seperately using git cli (same version) and it works fine.

### Expected behavior

Issue should get resolved

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/35/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/35,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52P0rZ,jgit,1983859417,35,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-07T16:08:16Z,2024-03-07T16:08:16Z,"These line numbers do not correspond to JGit 5.13 at all. The given stack traces cannot come from JGit 5.13.1.202206130422.

I have to go back to commit 4a984e203 to find a source version of TransportHttp that matches these line numbers. That's nine years old and would correspond to about version 4.0.0. There have been many changes to TransportHttp since then, and one fix in particular handled skipping unsupported authentication mechanisms. 

The Azure server is advertising ""Negotiate"", but apparently Kerberos isn't set up in your environment. Versions before commit ac3d3af63 (8 years old, version 4.5.0) would then fail; since then, they'll re-try with other advertised authentication methods.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52P0rZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,jgit,2175735489,36,java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText,mickaelistria,469058,Mickael Istria,mistria@redhat.com,CLOSED,2024-03-08T10:26:42Z,2024-05-21T14:01:39Z,"### Version

5.13.0 probably (the one used by tycho qualifier computer)

### Operating System

Linux/Unix

### Bug description

According to https://github.com/eclipse-pde/eclipse.pde/issues/1020#issuecomment-1863019530 , JGit seems to not properly unregister some services and that can cause further issue in systems that embed it, such as Tycho or Jenkins):
* https://github.com/eclipse-pde/eclipse.pde/issues/1020
* https://github.com/eclipse-tycho/tycho/issues/3489
* https://github.com/jenkinsci/docker-agent/issues/756

### Actual behavior

When using Tycho, in some circumstances Maven build fails with
```
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:09 min
[INFO] Finished at: 2024-01-30T08:06:00Z
[INFO] ------------------------------------------------------------------------
Error: Exception in thread ""Thread-4"" java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText
	at org.eclipse.jgit.internal.util.ShutdownHook.cleanup(ShutdownHook.java:85)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText
	... 2 more
```

### Expected behavior

No error.

### Relevant log output

_No response_

### Other information

Some analysis of the problem here: https://github.com/eclipse-pde/eclipse.pde/issues/1020#issuecomment-1863019530","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WFru,jgit,1985501934,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-08T11:07:25Z,2024-03-08T11:07:25Z,"As far as I see, 5.13 does not even have that org.eclipse.jgit.internal.util.ShutdownHook class.

This is supposed to be fixed in JGit 6.9.0 (issue #17, commit e6d83d61ead).

However, I noticed it occurring in an EGit build, too. Probably some maven bundle uses a JGit 6.8.0 (the class was introduced in 6.8.0). The problem should vanish once JGit 6.9.0 gets pushed to maven (on simrel date 2024-03-13), and clients update their dependencies.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WFru/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WQHZ,jgit,1985544665,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-08T11:38:57Z,2024-03-08T11:38:57Z,"However, I think Christoph has a point: this is conceptually broken. The change in commit e6d83d61ead does not fix the problem: an exception already occurred, and most likely that itself was an ExecutionException wrapping another exception due to classes having been unloaded already. For instance LockFile registers LockFile::unlock to be run, but that itself probably is no longer valid, and if it is, it uses class FileUtils, which may also already be gone.

In an OSGi environment these hooks should probably run when the org.eclipse.jgit bundle is stopped. A JVM shutdown hook is way too late.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52WQHZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52XSFc,jgit,1985814876,36,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-08T14:42:17Z,2024-03-08T14:42:17Z,"You thought about something like this ?
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177774","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52XSFc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ZSqZ,jgit,1986341529,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-08T20:01:55Z,2024-03-08T20:01:55Z,Something similar: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177951 . Without dependencies on org.osgi.framework.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ZSqZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52bMCU,jgit,1986838676,36,NA,TheSnoozer,6849390,,,NA,2024-03-09T12:05:32Z,2024-03-09T12:05:32Z,"Perhaps just saying:
I just tested the latest released `6.9.0.202403050737-r` and this `java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText`is still an issue.

Stacktrace:
```
ERROR] Cleanup during JVM shutdown failed
java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError
    at java.util.concurrent.ForkJoinTask.reportExecutionException (ForkJoinTask.java:581)
    at java.util.concurrent.ForkJoinTask.get (ForkJoinTask.java:1021)
    at org.eclipse.jgit.internal.util.ShutdownHook.cleanup (ShutdownHook.java:82)
    at java.lang.Thread.run (Thread.java:1583)
Caused by: java.lang.NoClassDefFoundError
    at jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance (DirectConstructorHandleAccessor.java:62)
    at java.lang.reflect.Constructor.newInstanceWithCaller (Constructor.java:502)
    at java.lang.reflect.Constructor.newInstance (Constructor.java:486)
    at java.util.concurrent.ForkJoinTask.getThrowableException (ForkJoinTask.java:542)
    at java.util.concurrent.ForkJoinTask.reportExecutionException (ForkJoinTask.java:580)
    at java.util.concurrent.ForkJoinTask.get (ForkJoinTask.java:1021)
    at org.eclipse.jgit.internal.util.ShutdownHook.cleanup (ShutdownHook.java:82)
    at java.lang.Thread.run (Thread.java:1583)
Caused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText
    at org.eclipse.jgit.internal.util.ShutdownHook.notify (ShutdownHook.java:97)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept (ForEachOps.java:184)
    at java.util.concurrent.ConcurrentHashMap$KeySpliterator.forEachRemaining (ConcurrentHashMap.java:3573)
    at java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:509)
    at java.util.stream.ForEachOps$ForEachTask.compute (ForEachOps.java:291)
    at java.util.concurrent.CountedCompleter.exec (CountedCompleter.java:754)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:387)
    at java.util.concurrent.ForkJoinTask.invoke (ForkJoinTask.java:667)
    at java.util.stream.ForEachOps$ForEachOp.evaluateParallel (ForEachOps.java:160)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateParallel (ForEachOps.java:174)
    at java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:233)
    at java.util.stream.ReferencePipeline.forEach (ReferencePipeline.java:596)
    at java.util.stream.ReferencePipeline$Head.forEach (ReferencePipeline.java:765)
    at org.eclipse.jgit.internal.util.ShutdownHook.doCleanup (ShutdownHook.java:93)
    at org.eclipse.jgit.internal.util.ShutdownHook.lambda$1 (ShutdownHook.java:80)
    at java.util.concurrent.ForkJoinTask$AdaptedCallable.exec (ForkJoinTask.java:1456)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:387)
    at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec (ForkJoinPool.java:1312)
    at java.util.concurrent.ForkJoinPool.scan (ForkJoinPool.java:1843)
    at java.util.concurrent.ForkJoinPool.runWorker (ForkJoinPool.java:1808)
    at java.util.concurrent.ForkJoinWorkerThread.run (ForkJoinWorkerThread.java:188)
Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText
    at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass (SelfFirstStrategy.java:50)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass (ClassRealm.java:271)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:247)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:239)
    at org.eclipse.jgit.internal.util.ShutdownHook.notify (ShutdownHook.java:97)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept (ForEachOps.java:184)
    at java.util.concurrent.ConcurrentHashMap$KeySpliterator.forEachRemaining (ConcurrentHashMap.java:3573)
    at java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:509)
    at java.util.stream.ForEachOps$ForEachTask.compute (ForEachOps.java:291)
    at java.util.concurrent.CountedCompleter.exec (CountedCompleter.java:754)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:387)
    at java.util.concurrent.ForkJoinTask.invoke (ForkJoinTask.java:667)
    at java.util.stream.ForEachOps$ForEachOp.evaluateParallel (ForEachOps.java:160)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateParallel (ForEachOps.java:174)
    at java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:233)
    at java.util.stream.ReferencePipeline.forEach (ReferencePipeline.java:596)
    at java.util.stream.ReferencePipeline$Head.forEach (ReferencePipeline.java:765)
    at org.eclipse.jgit.internal.util.ShutdownHook.doCleanup (ShutdownHook.java:93)
    at org.eclipse.jgit.internal.util.ShutdownHook.lambda$1 (ShutdownHook.java:80)
    at java.util.concurrent.ForkJoinTask$AdaptedCallable.exec (ForkJoinTask.java:1456)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:387)
    at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec (ForkJoinPool.java:1312)
    at java.util.concurrent.ForkJoinPool.scan (ForkJoinPool.java:1843)
    at java.util.concurrent.ForkJoinPool.runWorker (ForkJoinPool.java:1808)
    at java.util.concurrent.ForkJoinWorkerThread.run (ForkJoinWorkerThread.java:188)

```

I would think the issue is the usage of [JGitText inside the `notify`](https://github.com/eclipse-jgit/jgit/blob/819c5bcc8b2a2685c20e5b8e568f776b19f7db63/org.eclipse.jgit/src/org/eclipse/jgit/internal/util/ShutdownHook.java#L97).

I would think hat this means is that all method of the `ShutdownHook.java` can not rely on `JGitText`to be available.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52bMCU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ckIs,jgit,1987199532,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-10T11:52:36Z,2024-03-10T11:52:36Z,"So the same problem also exists with plexus classworlds. Maven closes the plexus container, which disposes the classworld realm, which closes the classloader. Note that the issue is _not_ limited to JGitText. We could avoid that particular problem by pre-loading JGitText and keeping a reference around. But I fear it may occur on basically any class load attempt, and it's quite possible that the cleanup listeners may cause arbitrary classloading.

Looks like JGit cannot use a shutdown hook _at all_. 
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ckIs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52dIw_,jgit,1987349567,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-10T20:14:11Z,2024-03-10T20:14:11Z,"Pre-loading JGitText in ShutdownHook does get rid of this exception in a maven build. Verified with the reproducer from git-commit-id/git-commit-id-maven-plugin#712:

- clone https://github.com/seart-group/ghs
- in the top-level pom, change the version of git-commit-id-maven-plugin from 8.0.1 to 8.0.0
- run `mvn clean package -DskipTests` (needs a Java 17 JVM at least)
- observe the exception
- fix JGit, build and install JGit locally
- in the ghs top-level pom, override the JGit dependency of git-commit-id-maven-plugin to 6.10.0-SNAPSHOT
- run the ghs build again
- exception is gone

However: in the JGit build, I noticed this ShutdownHook being executed umpteen times at the end of the build (I put in a System.err.println to verify easily). JGit is a multi-module build, and multi-threaded to boot. Most likely this is not behaving the way it was intended...

I'd be much happier if we could get rid of ShutdownHook (and the new OSGi CleanupService) and any use of Runtime.getRuntime().addShutdownHook() altogether.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52dIw_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ecra,jgit,1987693274,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T06:07:13Z,2024-03-11T06:07:13Z,"The text is now loaded but I still get Shutdown errors now, also I left some comments on the commit, I don't think that using a component is really appropriate here:

- https://github.com/eclipse-jgit/jgit/commit/9917074f13544a6dfc9f3cc5520733661c42f2cd
- https://ci.eclipse.org/tycho/job/tycho-github/job/PR-3557/1/testReport/junit/org.eclipse.tycho.test.buildextension/CiFriendlyVersionsTest/testJgitBuildQualifier/

> I'd be much happier if we could get rid of ShutdownHook (and the new OSGi CleanupService) and any use of Runtime.getRuntime().addShutdownHook() altogether.

Maybe it would be good to revisit users of that API and check if there are alternatives.

e.g. I looked where it is used, one case is the clone command, it seems to delete some files (recursively) if the clone was non done, but how can this happen, e.g. I shutdown the JVM while cloning? This does not looks appropriate as a ShutdownHook, it can literally take long depending on the size of the repository, and if I ""kill"" the JVM I likely can't expect anything ""clean"" afterwards.

Then there is one that releases locks, also here I wonder if this is needed, what worse can happen is that the lookfile perists, will this be an issue?

The other one is the config saver, what also looks suspicious, it say it can't use daemon threads because there is a risk of data corruption, also it claims it must use background threads because things tend to be slow but then it uses a fixed 100ms delay to wait for finish. Maybe one should better use some write and replace technique e.g. like:

1. In the (**daemon**) background thread write a new temp file with the new content.
2. If content is written, now start a new (**non daemon**) thread, that deletes the original file and renames the temp file to the final destination.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52ecra/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52efLX,jgit,1987703511,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T06:17:57Z,2024-03-11T06:17:57Z,"> When using Tycho, in some circumstances Maven build fails with

Just for completeness this is the full stack trace now with `6.8.0.202311291450-r to 6.9.0.202403050737-r`:

```
java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError
    at java.util.concurrent.ForkJoinTask.reportExecutionException (ForkJoinTask.java:605)
    at java.util.concurrent.ForkJoinTask.get (ForkJoinTask.java:1004)
    at org.eclipse.jgit.internal.util.ShutdownHook.cleanup (ShutdownHook.java:82)
    at java.lang.Thread.run (Thread.java:833)
Caused by: java.lang.NoClassDefFoundError
    at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0 (Native Method)
    at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance (NativeConstructorAccessorImpl.java:77)
    at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstanceWithCaller (Constructor.java:499)
    at java.lang.reflect.Constructor.newInstance (Constructor.java:480)
    at java.util.concurrent.ForkJoinTask.getThrowableException (ForkJoinTask.java:564)
    at java.util.concurrent.ForkJoinTask.reportExecutionException (ForkJoinTask.java:604)
    at java.util.concurrent.ForkJoinTask.get (ForkJoinTask.java:1004)
    at org.eclipse.jgit.internal.util.ShutdownHook.cleanup (ShutdownHook.java:82)
    at java.lang.Thread.run (Thread.java:833)
Caused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/internal/JGitText
    at org.eclipse.jgit.internal.util.ShutdownHook.notify (ShutdownHook.java:97)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept (ForEachOps.java:183)
    at java.util.concurrent.ConcurrentHashMap$KeySpliterator.forEachRemaining (ConcurrentHashMap.java:3573)
    at java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:509)
    at java.util.stream.ForEachOps$ForEachTask.compute (ForEachOps.java:290)
    at java.util.concurrent.CountedCompleter.exec (CountedCompleter.java:754)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:373)
    at java.util.concurrent.ForkJoinTask.invoke (ForkJoinTask.java:686)
    at java.util.stream.ForEachOps$ForEachOp.evaluateParallel (ForEachOps.java:159)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateParallel (ForEachOps.java:173)
    at java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:233)
    at java.util.stream.ReferencePipeline.forEach (ReferencePipeline.java:596)
    at java.util.stream.ReferencePipeline$Head.forEach (ReferencePipeline.java:765)
    at org.eclipse.jgit.internal.util.ShutdownHook.doCleanup (ShutdownHook.java:93)
    at org.eclipse.jgit.internal.util.ShutdownHook.lambda$1 (ShutdownHook.java:80)
    at java.util.concurrent.ForkJoinTask$AdaptedCallable.exec (ForkJoinTask.java:1428)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:373)
    at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec (ForkJoinPool.java:1182)
    at java.util.concurrent.ForkJoinPool.scan (ForkJoinPool.java:1655)
    at java.util.concurrent.ForkJoinPool.runWorker (ForkJoinPool.java:1622)
    at java.util.concurrent.ForkJoinWorkerThread.run (ForkJoinWorkerThread.java:165)
Caused by: java.lang.ClassNotFoundException: org.eclipse.jgit.internal.JGitText
    at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass (SelfFirstStrategy.java:50)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass (ClassRealm.java:271)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:247)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass (ClassRealm.java:239)
    at org.eclipse.jgit.internal.util.ShutdownHook.notify (ShutdownHook.java:97)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept (ForEachOps.java:183)
    at java.util.concurrent.ConcurrentHashMap$KeySpliterator.forEachRemaining (ConcurrentHashMap.java:3573)
    at java.util.stream.AbstractPipeline.copyInto (AbstractPipeline.java:509)
    at java.util.stream.ForEachOps$ForEachTask.compute (ForEachOps.java:290)
    at java.util.concurrent.CountedCompleter.exec (CountedCompleter.java:754)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:373)
    at java.util.concurrent.ForkJoinTask.invoke (ForkJoinTask.java:686)
    at java.util.stream.ForEachOps$ForEachOp.evaluateParallel (ForEachOps.java:159)
    at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateParallel (ForEachOps.java:173)
    at java.util.stream.AbstractPipeline.evaluate (AbstractPipeline.java:233)
    at java.util.stream.ReferencePipeline.forEach (ReferencePipeline.java:596)
    at java.util.stream.ReferencePipeline$Head.forEach (ReferencePipeline.java:765)
    at org.eclipse.jgit.internal.util.ShutdownHook.doCleanup (ShutdownHook.java:93)
    at org.eclipse.jgit.internal.util.ShutdownHook.lambda$1 (ShutdownHook.java:80)
    at java.util.concurrent.ForkJoinTask$AdaptedCallable.exec (ForkJoinTask.java:1428)
    at java.util.concurrent.ForkJoinTask.doExec (ForkJoinTask.java:373)
    at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec (ForkJoinPool.java:1182)
    at java.util.concurrent.ForkJoinPool.scan (ForkJoinPool.java:1655)
    at java.util.concurrent.ForkJoinPool.runWorker (ForkJoinPool.java:1622)
    at java.util.concurrent.ForkJoinWorkerThread.run (ForkJoinWorkerThread.java:165)
```

I think all `JGitText.get()` calls must be called in the constructor or some static fields so at shutdownhook time there is no classloading happen anymore.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52efLX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52egCk,jgit,1987707044,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T06:21:48Z,2024-03-11T06:21:48Z,"> However: in the JGit build, I noticed this ShutdownHook being executed umpteen times at the end of the build (I put in a System.err.println to verify easily). JGit is a multi-module build, and multi-threaded to boot. Most likely this is not behaving the way it was intended...

If there are different classloaders (e.g. in maven each mojo / project has its own) there will be multiple instances of ""singleton"" `ShutdownHook` and therefore multiple registration of `Runtime.getRuntime().addShutdownHook(...)`. Shutdownhooks are really nasty and need to be used with care, there is even no guarantee they are executed at all, e.g. in eclipse if you stop the process with the red button the JVM is just terminated and never execute them.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52egCk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52e4o1,jgit,1987807797,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-11T07:51:13Z,2024-03-11T07:51:13Z,"Yes. As I wrote, pre-loading JGitText avoids this particular exception, but doesn't solve the other problems:

1. If a cleanup listener executed through ShutdownHook needs to load other classes, we're still bust.
2. In the maven build there may be many different instances of ShutdownHook, and execute all at the end, which is not what was intended.

Stale lock files are a problem, but it looks as if a shutdown hook cannot solve this. ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52e4o1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fDkr,jgit,1987852587,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T08:21:43Z,2024-03-11T08:21:43Z,"I think using loggers is also dangerous, whyt I'm wondering is if not almost all (except the config one where I proposed an alternative), should simply use matching

```
Runtime.getRuntime().addShutdownHook( ... );
Runtime.getRuntime().removeShutdownHook( ...);
```

calls instead of one global that is probably run if nothing needs to be done anymore.... As one might have perfomance in mind I'd like to reference the [Oracle FAQ](https://docs.oracle.com/javase/8/docs/technotes/guides/lang/hook-design.html):

> **Why are hooks just threads, and unstarted ones at that? Wouldn't it be simpler to use Runnable objects, or Beans-style event and listener patterns?**
>
> The approach taken here has two advantages over the more obvious, and more frequently suggested, callback-oriented designs based upon Runnable objects or Beans-style event listeners.
> First, it gives the user complete control over the thread upon which a shutdown action is executed. The thread can be created in the proper thread group, given the correct priority, context, and privileges, and so forth.
> Second, it simplifies both the specification and the implementation by isolating the VM from the hooks themselves. If shutdown actions were executed as callbacks then a robust implementation would wind up having to create a separate thread for each hook anyway in order for them to run concurrently. The specification would also have to include explicit language about how the threads that execute the callbacks are created.
>
> 
> **Aren't threads pretty expensive things to keep around, especially if they won't be started until the VM shuts down?**
>
> Most implementations of the Java platform don't actually allocate resources to a thread until it's started, so maintaining a set of unstarted threads is actually very cheap. If you look at the internals of java.lang.Thread you can see that its various constructors just do security checks and initialize private fields. The native start() method does the real work of allocating a thread stack, etc., to get things going. ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fDkr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fYJk,jgit,1987936868,36,NA,iloveeclipse,964108,Andrey Loskutov,,NA,2024-03-11T09:13:00Z,2024-03-11T09:13:00Z,"One point against using `Runtime.getRuntime().addShutdownHook()` in JGit could be that it might leak loaded data & loaded classes referenced by that shutdown thread, and so applications that use JGit in context of a dedicated classloader might leak the memory accessible from that classloader because it can't be properly garbage collected.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fYJk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fkot,jgit,1987988013,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T09:39:18Z,2024-03-11T09:39:18Z,"@iloveeclipse that why I think one should just add/remove the hook once it is no longer needed (at the place where they are used), e.g. the clone command has already try/finally and for the look files it is similar, once the lock is released it could also release the shutdown hook, currently this even references some lamdas that might even hold more references...

This will make the `ShutdownHook` class obsolete and not leak hooks or references.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52fkot/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52iFn_,jgit,1988647423,36,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-03-11T14:59:58Z,2024-03-11T14:59:58Z,"I added ShutdownHook to fix concerns @tomaswolf raised when I added shutdown hooks for FileLock, compare PS 1 and 12: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/204213/1..12

This reduced occurrence of stale file locks in Gerrit when it's stopped gracefully.

The shutdown hook for clone has the purpose to delete a partial clone if the cloning process is killed gracefully e.g. by hitting Ctrl-C when running it using jgit command line client.

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52iFn_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52itKG,jgit,1988809350,36,NA,laeubi,1331477,Christoph Läubrich,,NA,2024-03-11T16:08:53Z,2024-03-11T16:08:53Z,"@msohn I think the listener approach is wrong (as explained by the oracle document at least hard to get right), I therefore would suggest to instead of adding/removing listeners, one is adding/removing a cleanup thread that way you make sure that your shutdown hook is only ever used when it is required and cleaned up afterwards. This should also gracefully solve the case for OSGi/Maven.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM52itKG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM53ft-l,jgit,2004803493,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-03-18T19:53:46Z,2024-03-18T19:53:46Z,For now solved by pre-loading JGitText.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM53ft-l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-hc_0,jgit,2122698740,36,NA,LorenzoBettini,1202254,Lorenzo Bettini,,NA,2024-05-21T13:55:35Z,2024-05-21T13:55:35Z,"I still see this problem in GitHub Actions builds.
Where should this have been solved?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-hc_0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/36,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-hgLG,jgit,2122711750,36,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-05-21T14:01:38Z,2024-05-21T14:01:38Z,"In JGit 6.10.0, due June 12, 2024.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-hgLG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/38,https://api.github.com/repos/eclipse-jgit/jgit/issues/38,jgit,2177883011,38,Incorrect merge conflict in diff3 style,wetneb,309908,Antonin Delpeuch,antonin@delpeuch.eu,CLOSED,2024-03-10T20:04:47Z,2024-04-09T18:02:23Z,"### Version

6.9.0.202403050737-r

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

The jgit library produces invalid conflicts when using the ""diff3"" style. Consider the following example:

#### Ours

```
a
d
```

#### Base

```
a
b
d
```

#### Theirs
```
a
b
c
d
```

In other words, `ours` deletes the `b` line and `theirs` keeps it but inserts the `c` line after it.

### Actual behavior

The merged result is
```
a
<<<<<<< OURS
||||||| BASE
b
d
=======
b
c
>>>>>>> THEIRS
d
```

(note the incorrect inclusion of the `d` in the base part of the conflict hunk, duplicating the `d` outside of the conflict)

### Expected behavior

The merged result should be
```
a
<<<<<<< OURS
||||||| BASE
b
=======
b
c
>>>>>>> THEIRS
d
```

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/39,https://api.github.com/repos/eclipse-jgit/jgit/issues/39,jgit,2187904928,39,Jgit's diff3 is a curious mix of git's diff3 and zdiff3 styles,wetneb,309908,Antonin Delpeuch,antonin@delpeuch.eu,OPEN,2024-03-15T07:40:21Z,2024-03-15T07:40:21Z,"### Version

6.9.0.202403050737-r

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

As a follow-up to #38, I am bringing a case where jgit's diff3 output differs from git's diff3 output. Consider the following files:

#### Base
```
a
b
c
d
```
#### Ours
```
a
H
E
c
d
```
#### Theirs
```
a
F
E
c
d
```

### Actual behavior

When merging those with jgit in diff3 mode, I get:

```
a
<<<<<<< ours
H
||||||| base
=======
F
>>>>>>> theirs
E
c
d
```

The problem here is that the `b` from the base revision is not visible anymore.
Granted, the output can be explained with the interpretation that both sides replaced `b` by `E` (which is therefore done outside of the conflict), and then the conflict itself is only about determining whether to insert `H` or `F` before that.
But it defeats the purpose of the diff3 style a little, since the contents of the base revision are obscured.

### Expected behavior

Using `git`'s diff3 output, we get:
```
a
<<<<<<< ours
H
E
||||||| base
b
=======
F
E
>>>>>>> theirs
c
d
```
Although the conflict hunk is larger, I find that more helpful because the contents of the base revision are clear.

Using `git`'s zdiff3 output, we get:
```
a
<<<<<<< ours
H
||||||| base
b
=======
F
>>>>>>> theirs
E
c
d
```

That's pretty ideal, and would be worth supporting by jgit, but perhaps rather as a separate mode (called, say, `zdiff3`)?

### Relevant log output

_No response_

### Other information

See this helpful blog post about the differences between diff3 and zdiff3:
https://ductile.systems/zdiff3/","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/40,https://api.github.com/repos/eclipse-jgit/jgit/issues/40,jgit,2196891486,40,"After calling the revwalk.parseCommit method, the file handle is not released, which may cause a memory leak.",sixther-dc,10322318,sixther,382998946@qq.com,CLOSED,2024-03-20T07:57:23Z,2024-03-21T06:03:23Z,"### Version

6.8.0

### Operating System

Linux/Unix

### Bug description

I use the `public RevCommit parseCommit(final AnyObjectId id)` method to get the commit and its content。Over time, my application memory will gradually increase until oom。
After I dumped the memory, I found that the top1 object is PackIndexV2。
![image](https://github.com/eclipse-jgit/jgit/assets/10322318/a21bcb03-20bb-46b6-b884-a4e163547942)
I noticed that there is an open operation in the implementation of the parseCommit method, and I suspect that it opened the file without releasing it, causing a memory leak.
So, I logged into the server and used the lsof command to view the pack file opened by the java process.
<img width=""1430"" alt=""image"" src=""https://github.com/eclipse-jgit/jgit/assets/10322318/cd51c0cb-6a63-436e-9406-0adc9647a1f7"">
Moreover, with the end of the stress testing process, the number of open files has not decreased.


### Actual behavior

After the parseCommit method call ends, the pack file descriptor is not released，

### Expected behavior

After the parseCommit method is called, the pack file descriptor is released normally to save memory.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/40,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM534bZm,jgit,2011280998,40,NA,sixther-dc,10322318,sixther,382998946@qq.com,NA,2024-03-21T06:03:22Z,2024-03-21T06:03:22Z,"I call the repo.close method to avoid memory leak,  the opened file handle have been released.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM534bZm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,jgit,2198715139,41,Jetty 10 is at End of Community Support - upgrade to Jetty 12,joakime,191721,Joakim Erdfelt,,CLOSED,2024-03-20T22:42:20Z,2024-08-29T15:17:44Z,"### Version

All

### Operating System

Linux/Unix

### Bug description

jgit is still using an End of Community Support version of Jetty.

See:

* https://github.com/jetty/jetty.project/issues/10485

### Actual behavior

Not possible to use the only supported version of Jetty at the moment.


### Expected behavior

Upgrade to Jetty 12.

Note: if you want to stick with the `javax.servlet` namespace, then use the `ee8` environment on Jetty 12.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57MXHw,jgit,2066838000,41,NA,andrew-tram,106191140,,,NA,2024-04-19T15:44:11Z,2024-04-19T15:44:11Z,I was wondering if anybody had thoughts on this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57MXHw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57a8N4,jgit,2070659960,41,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-04-22T18:58:02Z,2024-04-22T18:58:02Z,"I agree we should update to a supported jetty version.
I started looking into your change but stalled since I am currently swamped with other stuff at $DAYJOB

When we are at this we should consider to also update
- Java to at least 17 (#52, this is a prerequisite of Jetty 12)
- move from `javax.servlet` to `jakarta.servlet` (issue #19)

I asked for feedback from the community on the jgit list here 
https://www.eclipse.org/lists/jgit-dev/msg04235.html","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57a8N4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57cIFp,jgit,2070970729,41,NA,joakime,191721,Joakim Erdfelt,,NA,2024-04-22T21:19:23Z,2024-04-22T21:19:23Z,"Note, you can use `javax.servlet` on Jetty 12 via the `ee8` environment.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57cIFp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM58-1Wv,jgit,2096846255,41,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-06T20:26:21Z,2024-05-06T20:26:21Z,"Update to 
- jetty 11.0.20 and jakarta.servlet 5.0: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/189213
- jetty 12.0.8 and jakarta.servlet 6.0: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1194291","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM58-1Wv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kwy4,jgit,2123566264,41,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-21T23:00:48Z,2024-05-21T23:00:48Z,"JGit releases (existing and planned) are listed here https://projects.eclipse.org/projects/technology.jgit

The next release 6.10 is planned to be shipped with Eclipse IDE 2024-06 on June 12, 2024.
We plan to ship the update to Jetty 12 (see issue 41) with JGit 7.0 with Eclipse IDE 2024-06 on Sep 11, 2024.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kwy4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/41,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KKtor,jgit,2318064171,41,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:17:44Z,2024-08-29T15:17:44Z,"servlet API was updated to jakarta.servlet 6.1.0 in https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200138

closing since changes were merged and shipped with 7.0.0 on Sep 11","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KKtor/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/43,https://api.github.com/repos/eclipse-jgit/jgit/issues/43,jgit,2209212625,43,Merging does not follow renames,xtianus,7997535,Cristian Ghezzi,,OPEN,2024-03-26T20:06:45Z,2024-03-26T20:06:45Z,"### Version

6.9.0

### Operating System

Windows

### Bug description

If I rename `somefile` to `anotherfile`, commit, then merge from a branch where I have a change to `somefile` still with the old name, what I get is a conflict saying that `somefile` has been deleted locally.

### Actual behavior

How to reproduce:

- on `master` create `someFile.txt` and commit
- create a new branch `myBranch`
- on this branch edit and commit `someFile.txt`
- go back to `master`
- rename `someFile.txt` to `anotherFile.txt` either within Eclipse or from shell with `git mv`
- commit
- merge from `myBranch` using Eclipse
- --> a merge conflict is reported
- --> git status from the shell shows `deleted by us:   someFile.txt` 
- reset hard and merge from shell with `git merge myBranch`
- --> all is fine and the changes to `someFile.txt` have been merged into `anotherFile.txt`

### Expected behavior

I expect Eclipse to behave like the external git command does, i.e. merge the changes to the old-named file into the renamed file.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,jgit,2212779410,44,Support commit signing with SSH key,julius-boettger,85450899,,julius.btg@proton.me,CLOSED,2024-03-28T09:45:44Z,2024-10-30T20:13:21Z,"### Description

I would like to be able to sign commits using an SSH key, which is possible since [Git 2.34.0](https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.34.0.txt).

### Motivation

I use SSH key authentication for Git, which makes it natural to also want to use this for commit signing.

I am already doing this using the command line for GitHub (following [this guide](https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification#ssh-commit-signature-verification)) and would like to do it using JGit too, mainly because I like to use [Gitnuro](https://github.com/JetpackDuba/Gitnuro), which uses JGit. There's an an [issue over at Gitnuro for this](https://github.com/JetpackDuba/Gitnuro/issues/106) too.

### Alternatives considered

I have considered...
- not signing my commits at all
- signing them with GPG instead

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ezf2q,jgit,2228092330,44,NA,jonesbusy,825750,Valentin Delaye,,NA,2024-07-15T09:41:58Z,2024-07-15T09:41:58Z,"Same issue here.

Cause

```
java.lang.IllegalArgumentException: Invalid value: gpg.format=ssh
        at org.eclipse.jgit.lib.DefaultTypedConfigGetter.getEnum(DefaultTypedConfigGetter.java:103)
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ezf2q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IGakL,jgit,2283383051,44,NA,lizhe-0423,109721930,荔枝,,NA,2024-08-12T08:29:34Z,2024-08-12T08:29:34Z,所以这个问题解决了吗？我直接使用username and password 去commit的时候 会产生 not authorized的问题,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IGakL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PGlDq,jgit,2400866538,44,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-10-08T21:36:24Z,2024-10-08T21:36:24Z,I've pushed a series of [Gerrit commits](https://eclipse.gerrithub.io/q/topic:ssh-signatures) that implement SSH signing in JGit.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PGlDq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/44,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6R7bmx,jgit,2448275889,44,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-10-30T20:13:15Z,2024-10-30T20:13:15Z,Commits are merged; the feature will be in JGit 7.1.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6R7bmx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/46,https://api.github.com/repos/eclipse-jgit/jgit/issues/46,jgit,2230623595,46,Remove outdated import-package in org.eclipse.jgit.gpg.bc,tomaswolf,8580452,Thomas Wolf,,CLOSED,2024-04-08T08:48:46Z,2024-04-09T18:16:29Z,"### Version

6.10.0

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

The MANIFEST.MF contains an Import-Package for `org.bouncycastle.asn1.cryptlib`. This package is no longer exported by newer BC versions, and is in fact not used anymore since commit 68a638de (2021-09-29).

### Actual behavior

MANIFEST.MF contains this package import; the bundle resolution fails with BouncyCastle 1.78. C.f. eclipse-platform/eclipse.platform.releng.aggregator#1968.

### Expected behavior

MANIFEST.MF does not contain this package import and bundle resolution against BouncyCastle 1.78 works.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/46,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM55ygaW,jgit,2043283094,46,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-04-08T17:23:19Z,2024-04-08T17:23:19Z,[Gerrit change 1192750](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1192750) fixes this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM55ygaW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/47,https://api.github.com/repos/eclipse-jgit/jgit/issues/47,jgit,2235821951,47,Use mwiede/jsch fork of jsch,schmidti159,403598,Daniel Schmidt,daniel-github@ad-schmidt.de,CLOSED,2024-04-10T15:00:39Z,2024-05-27T12:13:51Z,"### Description

com.jcraft:jsch is effectively dead ([last release from november 2018](https://mvnrepository.com/artifact/com.jcraft/jsch)), but there is an actively maintained fork: https://github.com/mwiede/jsch.

Please consider switching to this fork.

### Motivation

As jcraft:jsch is not maintained any more, it will not receive any new encryption ciphers and will continue to support outdated potentially insecure ciphers.

### Alternatives considered

_No response_

### Additional context

I stumbled upon this whole situation when I wanted to connect to a git server using a ssh url and it did not work because I used a newer open ssh version to generate my private key. 

The new fork does not support this new format as well, but there is at least an issue for it: https://github.com/mwiede/jsch/issues/31","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/47,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM581_ZS,jgit,2094528082,47,NA,miurahr,123720,Hiroshi Miura,miurahr@linux.com,NA,2024-05-05T00:49:22Z,2024-05-05T00:49:22Z,"Because jgit project have already  moved to switch ssh library to `apache-mina-sshd`,  I think  it is no active reason for jgit project to work for it. You can use `mwiede/jsch` with your own risk by configuring your software project, for example in Gradle, 

```groovy
        implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'
        // Original JSch is unmaintained and dead, so we use forked version, mwiede/jsch
        // to fix BUGS#1075, and to support elliptic curve ciphers and improved ssh agent
        implementation 'com.github.mwiede:jsch:0.2.3'
        // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit.ssh.jsch
        implementation ('org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:5.13.1.202206130422-r') {
            exclude module: 'jsch'
        }
```

It works well at least in version 5.13.1.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM581_ZS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/47,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_KGjc,jgit,2133354716,47,NA,schmidti159,403598,Daniel Schmidt,daniel-github@ad-schmidt.de,NA,2024-05-27T12:13:51Z,2024-05-27T12:13:51Z,Thanks for the update. ,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_KGjc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,jgit,2237486207,48,Fetch with protocol V2 fail if wanted ref has been updated during fetch,thomasdraebing,39558662,Thomas Dräbing,thomas.draebing@sap.com,CLOSED,2024-04-11T11:19:59Z,2024-09-26T23:03:29Z,"### Version

6.9.0

### Operating System

Linux/Unix, MacOS

### Bug description

When a large repository with a lot of refs and activity is being, it can happen that the following error is being thrown:

```
Caused by: org.eclipse.jgit.transport.WantNotValidException: want 9784ba017f833fc41c1ad4344a75105ee69d639e not valid
	at org.eclipse.jgit.transport.UploadPack$AdvertisedRequestValidator.checkWants(UploadPack.java:2002)
	at org.eclipse.jgit.transport.UploadPack.parseWants(UploadPack.java:1953)
	at org.eclipse.jgit.transport.UploadPack.processHaveLines(UploadPack.java:1827)
	at org.eclipse.jgit.transport.UploadPack.fetchV2(UploadPack.java:1275)
	at org.eclipse.jgit.transport.UploadPack.serveOneCommandV2(UploadPack.java:1389)
	at org.eclipse.jgit.transport.UploadPack.serviceV2(UploadPack.java:1443)
	at org.eclipse.jgit.transport.UploadPack.uploadWithExceptionPropagation(UploadPack.java:886)
	at org.eclipse.jgit.transport.UploadPack.upload(UploadPack.java:796)
	... 12 more
```

Initial research showed that this happens, if a wanted ref is being updated during the fetch. Looking at the code it seems that this change has to happen while the fetch spends time in `UploadPack.fetchV2()`, between the computation of wantedIds and advertised IDs, which happens later. In that case both Sets differ from each other and validation fails.

This was observed in Gerrit for fetches in large repositories with wide refSpecs or for mirror clones.

### Actual behavior

```
Caused by: org.eclipse.jgit.transport.WantNotValidException: want 9784ba017f833fc41c1ad4344a75105ee69d639e not valid
	at org.eclipse.jgit.transport.UploadPack$AdvertisedRequestValidator.checkWants(UploadPack.java:2002)
	at org.eclipse.jgit.transport.UploadPack.parseWants(UploadPack.java:1953)
	at org.eclipse.jgit.transport.UploadPack.processHaveLines(UploadPack.java:1827)
	at org.eclipse.jgit.transport.UploadPack.fetchV2(UploadPack.java:1275)
	at org.eclipse.jgit.transport.UploadPack.serveOneCommandV2(UploadPack.java:1389)
	at org.eclipse.jgit.transport.UploadPack.serviceV2(UploadPack.java:1443)
	at org.eclipse.jgit.transport.UploadPack.uploadWithExceptionPropagation(UploadPack.java:886)
	at org.eclipse.jgit.transport.UploadPack.upload(UploadPack.java:796)
	... 12 more
```

### Expected behavior

The fetch or mirror clone works and all objects are being transferred.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/48/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56KFnP,jgit,2049464783,48,NA,thomasdraebing,39558662,Thomas Dräbing,thomas.draebing@sap.com,NA,2024-04-11T11:20:28Z,2024-04-11T11:20:28Z,fyi @msohn ,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56KFnP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NJx7R,jgit,2368151249,48,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-23T12:58:23Z,2024-09-23T12:58:23Z,"I could now reproduce the problem using the following scenario:

1. create Gerrit site using Gerrit master, using JGit version 692ccfc0c29d53afc7a0b82f41efcd999ed217b0 (stable-6.10)
2. start test Gerrit server in debug mode and attach debugger
3. set breakpoints on 
  - 1. first statement in `UploadPack.AdvertisedRequestValidator.checkWants()`
  - 2. UploadPack.fetchV2 on line 1202 (next statement after wanted refs were computed by `Map<String, ObjectId> wantedRefs = wantedRefs(req);`)
4. create test project in Gerrit
5. create multiple changes for this project and push them for review
6. run `git clone --mirror ""ssh://admin@localhost:29418/test""` in one git client session, needs to use ssh protocol to ensure UploadPack.isBiDirectionalPipe() is true
7. this session will stop on breakpoint 3.ii
8. using another git client session amend an existing change in the test repo and push it to create a new patchset
9. let the first client session continue by resuming the thread stopped on breakpoint 3.ii
10. thread will stop on breakpoint 3.i
11. step until line 2022, `AdvertisedRequestValidator.checkWants()` throws `WantNotValidException`
12. no exception is thrown if no other change was amended after the clone computed wants in step 3.i
13. this problem occurs also if gerrit option `core.usePerRequestRefCache = true`","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NJx7R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NT2SV,jgit,2370790549,48,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-24T09:43:23Z,2024-09-24T09:43:23Z,Pushed fix for stable-6.10 branch for review: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1201680,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NT2SV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Nezcr,jgit,2373662507,48,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-09-25T10:17:01Z,2024-09-25T10:17:01Z,Good catch @msohn would this also make sense in older branches?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Nezcr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Nfrxg,jgit,2373893216,48,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-25T12:04:32Z,2024-09-25T12:04:32Z,On which older branches do you need it ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Nfrxg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/48,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NvtMM,jgit,2378093324,48,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-26T23:03:29Z,2024-09-26T23:03:29Z,"- moved  https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1201680 to stable-6.6 and submitted it
- merged up to master branch

 ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NvtMM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/49,https://api.github.com/repos/eclipse-jgit/jgit/issues/49,jgit,2242981790,49,JGit should support X.509 signed commits,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,OPEN,2024-04-15T08:00:04Z,2024-04-18T21:09:20Z,"### Description

JGit should support X.509 signed commits

### Motivation

Companies have official X.509 certificates and they should be able to leverage existing certified identities

### Alternatives considered

JGit could leverage an external process like `smimesign` by spawning a process. However, that would have a detriment effect on the overall system load and latency.

### Additional context

C-Git supports signed X.509 commits, therefore JGit servers (e.g. Gerrit) will have to deal with those signatures anyway.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/49/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/49,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56mse0,jgit,2056964020,49,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-04-15T14:13:09Z,2024-04-15T14:13:09Z,"@msohn by looking at [BitBucket DataCentre 8.15](https://confluence.atlassian.com/bitbucketserver/bitbucket-data-center-8-15-release-notes-1295384630.html#BitbucketDataCenter8.15releasenotes-sign-code-with-x.509-certificate) JGit should already support this, as BitBucket DataCentre is based on JGit. Am I mistaken?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM56mse0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/49,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57GmJh,jgit,2065326689,49,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-04-18T21:07:31Z,2024-04-18T21:07:31Z,@danielesassoli provided an initial implementation with [Change eclipse-jgit/jgit/+/1193188](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1193188) @msohn @tomaswolf what do you think?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57GmJh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/51,https://api.github.com/repos/eclipse-jgit/jgit/issues/51,jgit,2254829677,51,Gradle plugin Compatibility ?,Xinerfapre,32196727,Xinerfapre,,CLOSED,2024-04-21T01:58:13Z,2024-04-25T09:04:22Z,"### Description

Hello,

Is it possible to make a plugin for Gradle ?

### Motivation

I would like to use JGit to manage my versions and my Git repository in the file ""build.gradle.kts"".

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/51,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57yB_5,jgit,2076712953,51,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-04-25T09:04:22Z,2024-04-25T09:04:22Z,"We do not create or maintain build systems. Plug-ins for maven or gradle or other build systems are created and maintained by the people developing these build systems.

Check with the gradle community what already exists, and if you need something that doesn't exist yet, then see with the gradle community how to get or implement the functionality you need in the gradle ecosystem.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57yB_5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/52,https://api.github.com/repos/eclipse-jgit/jgit/issues/52,jgit,2266597661,52,Update minimum Java version to 17,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,CLOSED,2024-04-26T22:54:57Z,2024-08-30T06:25:14Z,"### Description

Update minimum Java version to 17

### Motivation

- Current LTS version of Java is now 21.
- We want to udpate to Jetty 12 (#41) which requires Java 17.

### Alternatives considered

- Currently we use Java 11
- We could update right away to Java 21

### Additional context

On the jgit-dev list [we agreed to update to Java 17](https://www.eclipse.org/lists/jgit-dev/msg04235.html) ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/52/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/52,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57_dNn,jgit,2080232295,52,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-04-26T23:30:28Z,2024-04-26T23:30:28Z,pushed implementation for review https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1193976,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM57_dNn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/53,https://api.github.com/repos/eclipse-jgit/jgit/issues/53,jgit,2279278668,53,"Degrade:  when ssh/config IdentityFile is secret key, raise exception  java.io.StreamCorruptedException: Failed (IllegalArgumentException) to parse key entry=-----BEGIN OPENSSH PRIVATE KEY-----: Bad format (no key data delimiter): KEY-----",miurahr,123720,Hiroshi Miura,miurahr@linux.com,CLOSED,2024-05-05T01:48:06Z,2024-05-14T18:16:00Z,"### Version

6.9.0.202403050737-r

### Operating System

Linux/Unix

### Bug description

Issue #25 changes to try a file path specified in IdentityFile then try with an file extension "".pub"".
When user use traditional configuration that IdentityFile path is secret key on file system, JGit and apache MINA sshd library raise an exception and show a stack trace.
A problem is only raised when user also configure `IdentiesOnly = yes`.

Here is gerrit entry of the change
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1177073/6/org.eclipse.jgit.ssh.apache/src/org/eclipse/jgit/internal/transport/sshd/JGitPublicKeyAuthentication.java

In previous code, 

```java
Path p = Paths.get(s + "".pub""); //$NON-NLS-1$
if (Files.isRegularFile(p, LinkOption.NOFOLLOW_LINKS)) {
	return AuthorizedKeyEntry.readAuthorizedKeys(p).get(0).resolvePublicKey(null,	PublicKeyEntryResolver.IGNORING);
}
```
It just adding "".pub"" and check it, then no exception was observed.

### Actual behavior

Record stack trace in log file.

### Expected behavior

Run without exception or don't show a stack trace.

I think we can check existence of public key before try a file path of `IdentityFile` specified.

Approach 1.   Check existence of file path 
`Path p = Paths.get(s + "".pub""); //$NON-NLS-1$` and if exists, try it first.

Approach 2.  Check specified path endsWith "".pub""

There is not necessary to put a  file name rule  in a new approach that file system hold only a public key and secret key is in HSM, approach 2 is not stable for future.  Old style always has ""foo.pub"" and ""foo"" key pair, so approach 1 is better.


### Relevant log output

```Shell
Cannot read public key from file /home/miurahr/.ssh/id_ed25519 
java.io.StreamCorruptedException: Failed (IllegalArgumentException) to parse key entry=-----BEGIN OPENSSH PRIVATE KEY-----: Bad format (no key data delimiter): KEY----- 
	at org.apache.sshd.common.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(AuthorizedKeyEntry.java:247) 
 	at org.apache.sshd.common.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(AuthorizedKeyEntry.java:226) 
 	at org.apache.sshd.common.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(AuthorizedKeyEntry.java:211) 
 	at org.apache.sshd.common.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(AuthorizedKeyEntry.java:195) 
	at org.apache.sshd.common.config.keys.KeyUtils.loadPublicKey(KeyUtils.java:342) 
	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.readPublicKey(JGitPublicKeyAuthentication.java:353) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.lambda$0(JGitPublicKeyAuthentication.java:330) 
 	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197) 
 	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625) 
 	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) 
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) 
 	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921) 
 	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 
 	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.getExplicitKeys(JGitPublicKeyAuthentication.java:337) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.identitiesOnly(JGitPublicKeyAuthentication.java:434) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.initializeAgentIdentities(JGitPublicKeyAuthentication.java:383) 
 	at org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator.<init>(UserAuthPublicKeyIterator.java:59) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication$KeyIterator.<init>(JGitPublicKeyAuthentication.java:320) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication.createPublicKeyIterator(JGitPublicKeyAuthentication.java:137) 
 	at org.apache.sshd.client.auth.pubkey.UserAuthPublicKey.init(UserAuthPublicKey.java:109) 
 	at org.eclipse.jgit.internal.transport.sshd.JGitPublicKeyAuthentication.init(JGitPublicKeyAuthentication.java:123) 
 	at org.apache.sshd.client.session.ClientUserAuthService.tryNext(ClientUserAuthService.java:410) 
 	at org.apache.sshd.client.session.ClientUserAuthService.processUserAuth(ClientUserAuthService.java:331) 
 	at org.apache.sshd.client.session.ClientUserAuthService.process(ClientUserAuthService.java:267) 
 	at org.apache.sshd.common.session.helpers.CurrentService.process(CurrentService.java:109) 
 	at org.apache.sshd.common.session.helpers.AbstractSession.doHandleMessage(AbstractSession.java:624) 
 	at org.apache.sshd.common.session.helpers.AbstractSession.lambda$handleMessage$0(AbstractSession.java:545) 
 	at org.apache.sshd.common.util.threads.ThreadUtils.runAsInternal(ThreadUtils.java:68) 
 	at org.apache.sshd.common.session.helpers.AbstractSession.handleMessage(AbstractSession.java:544) 
 	at org.apache.sshd.common.session.helpers.AbstractSession.decode(AbstractSession.java:1688) 
	at org.apache.sshd.common.session.helpers.AbstractSession.messageReceived(AbstractSession.java:505) 
	at org.eclipse.jgit.internal.transport.sshd.JGitClientSession.messageReceived(JGitClientSession.java:208) 
 	at org.apache.sshd.common.session.helpers.AbstractSessionIoHandler.messageReceived(AbstractSessionIoHandler.java:64) 
 	at org.apache.sshd.common.io.nio2.Nio2Session.handleReadCycleCompletion(Nio2Session.java:409) 
 	at org.apache.sshd.common.io.nio2.Nio2Session$1.onCompleted(Nio2Session.java:382) 
 	at org.apache.sshd.common.io.nio2.Nio2Session$1.onCompleted(Nio2Session.java:377) 
 	at org.apache.sshd.common.io.nio2.Nio2CompletionHandler.lambda$completed$0(Nio2CompletionHandler.java:38) 
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318) 
	at org.apache.sshd.common.io.nio2.Nio2CompletionHandler.completed(Nio2CompletionHandler.java:37) 
	at java.base/sun.nio.ch.Invoker.invokeUnchecked(Invoker.java:129) 
 	at java.base/sun.nio.ch.Invoker$2.run(Invoker.java:221) 
 	at java.base/sun.nio.ch.AsynchronousChannelGroupImpl$1.run(AsynchronousChannelGroupImpl.java:113) 
 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) 
 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) 
 	at java.base/java.lang.Thread.run(Thread.java:840)
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/53/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/53,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM582ZYB,jgit,2094634497,53,NA,miurahr,123720,Hiroshi Miura,miurahr@linux.com,NA,2024-05-05T05:07:56Z,2024-05-05T05:07:56Z,"In the change in #25, it try to catch  exception when trying  reading a private key, but it did not catch because apache sshd raises `StreamCorruptedException` but not `GeneralSecurityException`.

```java

			} catch (GeneralSecurityException e) {
				// ignore in case this is not a derived key path, as in most
				// cases this specifies a private key
				if (isDerived) {
					log.warn(""{}"", //$NON-NLS-1$
							format(SshdText.get().cannotReadPublicKey, keyFile),
							e);
				}
```
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM582ZYB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/53,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM59sNwQ,jgit,2108742672,53,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-05-13T20:27:56Z,2024-05-13T20:27:56Z,[Gerrit change 1194667](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1194667) will fix that.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM59sNwQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/54,https://api.github.com/repos/eclipse-jgit/jgit/issues/54,jgit,2297268833,54,Possible bug in MergeResult,nbransby,1386607,Nicholas Bransby-Williams,nbransby@gmail.com,OPEN,2024-05-15T08:55:28Z,2024-05-15T08:55:28Z,"https://github.com/eclipse-jgit/jgit/blob/7dd522403a51577312b5cfa65f0c5566a49a94eb/org.eclipse.jgit/src/org/eclipse/jgit/api/MergeResult.java#L455

is this suppose to be defined outside the loop? otherwise the value of 'endOfChunk' is always zero and the value 'mergeChunk.end' assigned to 'endOfChunk' defined in org.eclipse.jgit.api.MergeResult.addConflict' is never used","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,jgit,2300485703,55,Keep target platform dependencies up-to-date,merks,208716,Ed Merks,,CLOSED,2024-05-16T13:54:29Z,2024-05-21T22:39:57Z,"### Description

### Description

Orbit generates a report for JGit's target platform:

https://github.com/eclipse-orbit/orbit-simrel/blob/main/report/maven-osgi/jgit/REPORT.md

You can literally copy and paste this updated version:

https://github.com/eclipse-orbit/orbit-simrel/blob/main/report/maven-osgi/jgit/updated.target

to replace this version:

https://raw.githubusercontent.com/eclipse-jgit/jgit/master/org.eclipse.jgit.packaging/org.eclipse.jgit.target/jgit-4.32.target

The reports are generally regenerated 5+ times per week.

---

## Minor Updates
 - [commons-codec](https://repo1.maven.org/maven2/commons-codec/)
    - [commons-codec](https://repo1.maven.org/maven2/commons-codec/commons-codec/) **[1.16.0](https://repo1.maven.org/maven2/commons-codec/commons-codec/1.16.0)** < [1.17.0](https://repo1.maven.org/maven2/commons-codec/commons-codec/1.17.0/)
 - [commons-io](https://repo1.maven.org/maven2/commons-io/)
    - [commons-io](https://repo1.maven.org/maven2/commons-io/commons-io/) **[2.15.1](https://repo1.maven.org/maven2/commons-io/commons-io/2.15.1)** < [2.16.1](https://repo1.maven.org/maven2/commons-io/commons-io/2.16.1/)
 - [commons-logging](https://repo1.maven.org/maven2/commons-logging/)
    - [commons-logging](https://repo1.maven.org/maven2/commons-logging/commons-logging/) **[1.2](https://repo1.maven.org/maven2/commons-logging/commons-logging/1.2)** < [1.3.2](https://repo1.maven.org/maven2/commons-logging/commons-logging/1.3.2/)
 - [org.eclipse.jetty](https://repo1.maven.org/maven2/org/eclipse/jetty/)
    - [jetty-http](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-http/10.0.21/)
    - [jetty-io](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-io/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-io/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-io/10.0.21/)
    - [jetty-security](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-security/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-security/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-security/10.0.21/)
    - [jetty-server](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-server/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-server/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-server/10.0.21/)
    - [jetty-servlet](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-servlet/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-servlet/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-servlet/10.0.21/)
    - [jetty-util](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util/10.0.21/)
    - [jetty-util-ajax](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util-ajax/) **[10.0.20](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util-ajax/10.0.20)** < [10.0.21](https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util-ajax/10.0.21/)

### Motivation

It's best to use the latest dependencies.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-b5dE,jgit,2121242436,55,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-20T21:29:24Z,2024-05-20T21:29:24Z,"Pushed this series for review to fix this
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1194979","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-b5dE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-euYx,jgit,2121983537,55,NA,merks,208716,Ed Merks,,NA,2024-05-21T07:51:10Z,2024-05-21T07:51:10Z,"@msohn 

The same question as for EGit arises for JGit:

https://github.com/eclipse-egit/egit/issues/34#issuecomment-2120233046

Never mind...

~~I.e., is there are purpose to multiple versions of this artifact?~~

https://github.com/eclipse-jgit/jgit/blob/cac835835d2e7789f2a01c03da83b44185668269/org.eclipse.jgit.packaging/org.eclipse.jgit.target/maven/dependencies.tpd#L20-L29","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-euYx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-ewVe,jgit,2121991518,55,NA,merks,208716,Ed Merks,,NA,2024-05-21T07:55:23Z,2024-05-21T07:55:23Z,"FYI, the report generator now generates an updated *.tpd:

https://github.com/eclipse-orbit/orbit-simrel/blob/main/report/maven-osgi/jgit/updated.tpd","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-ewVe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/55,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kscY,jgit,2123548440,55,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-21T22:39:56Z,2024-05-21T22:39:56Z,updates were submitted,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5-kscY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/57,https://api.github.com/repos/eclipse-jgit/jgit/issues/57,jgit,2315441746,57,Encountering LockFailedException: Cannot lock,aravinds502,23526647,,,OPEN,2024-05-24T13:38:17Z,2024-08-29T15:26:46Z,"### Version

6.8.0

### Operating System

Linux/Unix

### Bug description

While running the load tests with multiple users create and and updating the GIT repo's, we encounter the following error

```
Caused by: org.eclipse.jgit.api.errors.JGitInternalException: Exception caught during execution of add command
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:244) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at com.rapidminer.git.jgit.AbstractJGitRepository.add(AbstractJGitRepository.java:267) ~[adapter-2.0.2-20240430.jar!/:2.0.2-20240430]
	... 141 common frames omitted
Caused by: org.eclipse.jgit.errors.LockFailedException: Cannot lock /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index. Ensure that no other process has an open file handle on the lock file /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index.lock, then you may delete the lock file and retry.
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:222) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:293) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:259) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.lib.Repository.lockDirCache(Repository.java:1294) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:129) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	... 142 common frames omitted

```


Though we ensure the locking while performing the WRITE operation to repository, we end up with above errors.
Is there a way(API) to check whether the repository is already locked by another process, and to wait till it completes.

Please let me know your suggestions.

Thanks

### Actual behavior

```
Caused by: org.eclipse.jgit.api.errors.JGitInternalException: Exception caught during execution of add command
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:244) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at com.rapidminer.git.jgit.AbstractJGitRepository.add(AbstractJGitRepository.java:267) ~[adapter-2.0.2-20240430.jar!/:2.0.2-20240430]
	... 141 common frames omitted
Caused by: org.eclipse.jgit.errors.LockFailedException: Cannot lock /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index. Ensure that no other process has an open file handle on the lock file /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index.lock, then you may delete the lock file and retry.
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:222) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:293) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:259) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.lib.Repository.lockDirCache(Repository.java:1294) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:129) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	... 142 common frames omitted
```

### Expected behavior

No errors and READ/WRITES should be successful

### Relevant log output

```Shell
Caused by: org.eclipse.jgit.api.errors.JGitInternalException: Exception caught during execution of add command
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:244) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at com.rapidminer.git.jgit.AbstractJGitRepository.add(AbstractJGitRepository.java:267) ~[adapter-2.0.2-20240430.jar!/:2.0.2-20240430]
	... 141 common frames omitted
Caused by: org.eclipse.jgit.errors.LockFailedException: Cannot lock /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index. Ensure that no other process has an open file handle on the lock file /rapidminer-workspace-service/c8007e1a-685a-404f-ac48-9b4837748ae4/465c4b19-53e2-46ae-ab11-6588cd86e173/.git/index.lock, then you may delete the lock file and retry.
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:222) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:293) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.dircache.DirCache.lock(DirCache.java:259) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.lib.Repository.lockDirCache(Repository.java:1294) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	at org.eclipse.jgit.api.AddCommand.call(AddCommand.java:129) ~[org.eclipse.jgit-6.8.0.202311291450-r.jar!/:6.8.0.202311291450-r]
	... 142 common frames omitted
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/57,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLBQP,jgit,2318144527,57,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:26:44Z,2024-08-29T15:26:44Z,You can check if a `./git/index.lock` file exists in the file system. Though this check is inherently racy since immediately after you checked this another process or thread may have created this lock file. See e.g. https://learn.microsoft.com/en-us/azure/devops/repos/git/git-index-lock?view=azure-devops,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLBQP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,jgit,2319462824,58,Support Java 8 Path API to allow using non-default filesystems,bannmann,3303967,Jens Bannmann,,OPEN,2024-05-27T16:06:17Z,2024-06-03T21:07:28Z,"### Description

JGit should support the Java 8 `Path` API as follows:

- All methods that accept `java.io.File` instances would be overloaded to also accept `java.nio.file.Path`.
- Methods that take `File` arguments would be kept, but would use `file.toPath()` and then call their `Path` counterparts.
- Internally, JGit would only use the `Path` API.

### Motivation

While writing a server application that clones repos, performs commits and pushes them, I encountered problems when trying to delete the repos afterwards: it seems that even after the `Git` instance was closed, (some?) files in `.git` are locked for some (short?) time.

If JGit supported the Path API, one could solve this problem by instantiating an in-memory Java filesystem like [Jimfs](https://github.com/google/jimfs) that only exists for the duration of the JGit operations (using a try-with-resources block):
```java
try (var fileSystem = Jimfs.newFileSystem(Configuration.unix())) {
    Path repoDirectory = fileSystem.getPath(""/repo"");
    try (var git = cloneRepository(repoDirectory)) {
        // perform operations like commit or push
    }
}
```

Other situations where this would offer advantages include:
- When disk I/O is a bottleneck: with Jimfs, there is no I/O.
- When mechanisms against filling up the hard disk / docker volume add too much complexity: with Jimfs, one thread potentially gets `OutOfMemoryErrors`, but the application keeps running. But with a real disks, all it takes is one too-large operation (or too many failed cleanups) - and the entire system comes to a halt!

### Alternatives considered

- Set up a cronjob outside Java (e.g. ""once per day, delete all directories older than a day"")
- After completing a repo operation, schedule a cleanup task (e.g. ""in 6 hours, delete this repo directory"")

Both workarounds bring their own caveats and complexities.

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_h44V,jgit,2139590165,58,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-30T13:43:58Z,2024-05-30T13:43:58Z,"How did you create the `Git` instance ? Note that if creating it using the `Git(Repository)` constructor or the static `Git.wrap(Repository)` method `Git.close()` will not close the wrapped `Repository` as mentioned in the javadoc.

If you are creating the `Git` instance using one of the static `Git.open` methods the Git object uses the RepositoryCache and by default evicts the repository from WindowCache and RepositoryCache using a time based eviction strategy to prevent unnecessary cache thrashing of WindowCache and RepositoryCache which may degrade performance in long running server applications. By default eviction is handled by a background thread. 

The following 2 jgit options can be used to configure this behavior:
- **core.repositoryCacheExpireAfter**: cache entries are evicted if the
cache entry wasn't accessed longer than this time in milliseconds
- **core.repositoryCacheCleanupDelay**: defines the interval in milliseconds
for running a background task evicting expired cache entries. If set to
-1 the delay is set to min(repositoryCacheExpireAfter, 10 minutes). If
set to 0 the time based eviction is switched off and no background task
is started. If time based eviction is switched off the JVM can still
evict cache entries if heap memory is running low.

See https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/74904","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_h44V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jFQp,jgit,2139903017,58,NA,bannmann,3303967,Jens Bannmann,,NA,2024-05-30T15:16:58Z,2024-05-30T15:16:58Z,"@msohn:
I'm not using any of those methods, but only `cloneRepository()`. This was the structure:

```java
    public void performWork()
    {
        // prepare parent dir
        
        Path repoDir = performGitOperations(parentDir);
        
        // delete repoDir using file walker --> exception
    }

    public Path performGitOperations(Path parentDir)
    {
        Path repoDirectory = Files.createTempDirectory(parentDir, ""foo"");
        try (var git = cloneRepository(repoDirectory))
        {
            // perform operations
        }
        return repoDirectory;
    }

    private Git cloneRepository(Path repoDirectory) throws GitAPIException
    {
        return Git.cloneRepository()
            .setTransportConfigCallback(transportConfigCallback)
            .setURI(remoteUrl)
            .setDirectory(repoDirectory.toFile())
            .call();
    }
```

So based on what you explained, this should not have involved caching. Consequently, closing the `Git` instance (via leaving the `try` block) should have properly cleaned up the underlying `Repository`. So by the time the deletion code ran, there should no longer have been any open file handles?

That did not seem to be the case for me. I remember that I even tried putting in a delay of 5 or 10 seconds before the deletion process, but that didn't help.

If I find the time, I may try to reproduce this again and post the exact exception thrown during deletion.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jFQp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jwJw,jgit,2140078704,58,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-30T16:04:30Z,2024-05-30T16:04:30Z,Debug closing of the `Git` instance and check in `Repository.close()` if the ref count dropped to 0.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jwJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_5I8S,jgit,2145685266,58,NA,bannmann,3303967,Jens Bannmann,,NA,2024-06-03T16:48:26Z,2024-06-03T16:48:26Z,"@msohn
Yes, inside `Repository.close()`, the `newCount` is `0`. As `RepositoryCache.isCached(this)` is `false`, it then calls `doClose()`.

The `java.nio.file.AccessDeniedException` I get is about `<repodir>\.git\objects\84\0eebb15d72c5cf67da746f218d471580b49b15` (I'm on a Windows machine). The concrete file name is different for each run (presumably because it relates to the commit that was just made, which obviously has a different hash).

When I remove the git operations so that after cloning so that the `try` block literally does nothing with the `Git` instance or the directory, something interesting happens: deleting the directory _still_ results in an `AccessDeniedException`. However, different to the case above, it's about an idx file: `<repodir>\.git\objects\pack\pack-fe4c4220aac672204f1b45bd9c01d5bb8e3516b5.idx`. Also, that file name is always the same (even when new commits have been added in the meantime and therefore appear when cloning the repo in the next run). I don't know whether any of that is relevant.

By the way, this happens with JGit 6.9.0.202403050737-r.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_5I8S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/58,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_60UV,jgit,2146125077,58,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-06-03T21:07:27Z,2024-06-03T21:07:27Z,"Do you keep any reference to some jgit object which has a close method you didn't call before you try to delete the repo ?

You can print the content of the loose object using `git cat-file -p <path of the loose object>`. Maybe this gives you a clue.

`Repository.doClose()` calls `ObjectDirectory.close` which should close all packs and clears the loose object cache.
Pack indexes are read in `PackIndex.open()` on first access using a file inputstream constructed in a try with resource (so it's guaranteed to be closed), the PackIndex object is cached in memory until it's cleared when `Pack.close()` is called.
New objects added to the repo by creating new commits don't immediately end up in pack files, they are initially stored as loose objects and are later eventually packed by a run of `git gc`.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_60UV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,jgit,2322599906,59,Apache HTTP client Connection reset,stefandrissen,5297464,Stefan Drissen,,OPEN,2024-05-29T07:39:06Z,2024-08-30T08:31:39Z,"### Version

6.9.0

### Operating System

Windows

### Bug description

For another issue I am having with an older version of JGit (in a bundled Eclipse 4.23) I am looking at what current vanilla behavior is using latest Eclipse 2024-03.

- Clone remote repo (Azure DevOps) using defaults
- Receiving objects 100% 214501/214501
- Resolving deltas  100% 113302/113302

-> Problem Occurred 
'Cloning from https://dev.azure.com/org/project/_git/repo' has encountered a problem.

Connection reset

Details:

Connection reset
Connection reset

If I then open the issue from the problem view:

![image](https://github.com/eclipse-jgit/jgit/assets/5297464/0f9b8b4a-c777-480d-93cd-ccd231acba02)

I am unsure if the connection reset is a result of the timeout, so I increased the Connection timeout in Git preferences to 300 and then to 600 with the same failure as a result.
 
I then changed the HTTP client to Java built-in HTTP (initially Apache HTTP)

-> repo cloned successfully

My older (bundled) Eclipse 4.23 with JGit 5.13.0 had no issue cloning the repo using Apache HTTP.

### Actual behavior

![image](https://github.com/eclipse-jgit/jgit/assets/5297464/558818cb-722a-46f0-aaea-1f0bf052eb6b)


### Expected behavior

A successful clone.

### Relevant log output

```Shell
!ENTRY org.eclipse.egit.ui 4 0 2024-05-29 09:19:34.145
!MESSAGE Connection reset
!STACK 0
org.eclipse.jgit.api.errors.TransportException: Connection reset
	at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:249)
	at org.eclipse.jgit.api.CloneCommand.fetch(CloneCommand.java:319)
	at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:189)
	at org.eclipse.egit.core.op.CloneOperation.run(CloneOperation.java:194)
	at org.eclipse.egit.ui.internal.clone.AbstractGitCloneWizard.executeCloneOperation(AbstractGitCloneWizard.java:490)
	at org.eclipse.egit.ui.internal.clone.AbstractGitCloneWizard$6.run(AbstractGitCloneWizard.java:464)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: org.eclipse.jgit.errors.TransportException: Connection reset
	at org.eclipse.jgit.transport.TransportHttp$SmartHttpFetchConnection.doFetch(TransportHttp.java:1569)
	at org.eclipse.jgit.transport.BasePackFetchConnection.fetch(BasePackFetchConnection.java:351)
	at org.eclipse.jgit.transport.BasePackFetchConnection.fetch(BasePackFetchConnection.java:343)
	at org.eclipse.jgit.transport.FetchProcess.fetchObjects(FetchProcess.java:290)
	at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:182)
	at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:105)
	at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1482)
	at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:238)
	... 6 more
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(Unknown Source)
	at java.base/sun.nio.ch.NioSocketImpl.read(Unknown Source)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(Unknown Source)
	at java.base/java.net.Socket$SocketInputStream.read(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(Unknown Source)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:137)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:153)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:280)
	at org.apache.http.impl.io.ChunkedInputStream.getChunkSize(ChunkedInputStream.java:261)
	at org.apache.http.impl.io.ChunkedInputStream.nextChunk(ChunkedInputStream.java:222)
	at org.apache.http.impl.io.ChunkedInputStream.read(ChunkedInputStream.java:183)
	at org.apache.http.impl.io.ChunkedInputStream.read(ChunkedInputStream.java:210)
	at org.apache.http.impl.io.ChunkedInputStream.close(ChunkedInputStream.java:312)
	at org.apache.http.impl.execchain.ResponseEntityProxy.streamClosed(ResponseEntityProxy.java:142)
	at org.apache.http.conn.EofSensorInputStream.checkClose(EofSensorInputStream.java:228)
	at org.apache.http.conn.EofSensorInputStream.close(EofSensorInputStream.java:172)
	at org.eclipse.jgit.util.io.UnionInputStream.close(UnionInputStream.java:168)
	at org.eclipse.jgit.transport.TransportHttp$SmartHttpFetchConnection.doFetch(TransportHttp.java:1566)
	... 13 more
```


### Other information

Cloning from a private AzDO repo.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLDk2,jgit,2318154038,59,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:30:28Z,2024-08-29T15:30:28Z,Connection reset maybe caused by network issues or the the server closing the connection.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLDk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLf-x,jgit,2318270385,59,NA,kwin,185025,Konrad Windszus,,NA,2024-08-29T16:15:56Z,2024-08-29T16:15:56Z,"@msohn As built-in Java HTTP does not suffer from the same issue I assume that retries/timeouts/connection pooling is configured differently. Also it seems that it worked with older versions, so unlikely to be just a server/networking issue which cannot be solved inside Jgit.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLf-x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLh8R,jgit,2318278417,59,NA,kwin,185025,Konrad Windszus,,NA,2024-08-29T16:19:16Z,2024-08-29T16:19:16Z,"Compare with https://issues.apache.org/jira/browse/MRESOLVER-383 for a similar issue which was resolved by reducing the pooled connection's TTL.

Some information are also in https://issues.apache.org/jira/browse/HTTPCLIENT-2282.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLh8R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KT0CZ,jgit,2320449689,59,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-30T08:16:23Z,2024-08-30T08:16:23Z,"@kwin If I understand this right, possible solutions would be to switch to the 5.x Apache HTTP client, or add after

https://github.com/eclipse-jgit/jgit/blob/c318c8a435f584ac00d1cb24292da0f8a956707d/org.eclipse.jgit.http.apache/src/org/eclipse/jgit/transport/http/apache/HttpClientConnection.java#L141-L149
```
} else {
  clientBuilder.setConnectionTimeToLive(300, TimeUnit.SECONDS);
}
```
(of course not with a hard-coded value; should be overrideable by some property, but default to 300).

Is that right?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KT0CZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/59,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KT8-1,jgit,2320486325,59,NA,kwin,185025,Konrad Windszus,,NA,2024-08-30T08:31:38Z,2024-08-30T08:31:38Z,"> possible solutions would be to switch to the 5.x Apache HTTP client

This is IMHO not yet fixed there either.

But setting a configurable connection timeout should suffice, yes!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KT8-1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,jgit,2325520920,60,Pull: MissingObjectException,stefandrissen,5297464,Stefan Drissen,,OPEN,2024-05-30T12:08:03Z,2024-06-14T12:03:55Z,"### Version

6.9.0

### Operating System

Windows

### Bug description

When using Pull (from Azure DevOps remote repository) it can (often) fail with MissingObjectException. 

The native Git client has no problems and happily pulls, after which JGit will pull and report no changes.

Deleting the local repo and cloning it again alleviates the problem temporarily, until there are more commits in the repo.

### Actual behavior

Git pull from remote repo.

````
Pulling 1 repository
Exception caught during execution of merge command. org.eclipse.jgit.errors.MissingObjectException: Missing unknown 542a7b7366423cb0592f27aaacffdbf2d59bfd91
Exception caught during execution of merge command. org.eclipse.jgit.errors.MissingObjectException: Missing unknown 542a7b7366423cb0592f27aaacffdbf2d59bfd91
````
I am getting the MissingObjectException on the same id from another VM.

### Expected behavior

A successful pull. Having to switch out from Eclipse to native git for a successful pull is disturbing.

### Relevant log output

```Shell
!ENTRY org.eclipse.egit.core 4 0 2024-05-30 13:56:17.003
!MESSAGE Pulling 1 repository
!SUBENTRY 1 org.eclipse.egit.core 4 0 2024-05-30 13:56:17.003
!MESSAGE Exception caught during execution of merge command. org.eclipse.jgit.errors.MissingObjectException: Missing unknown 542a7b7366423cb0592f27aaacffdbf2d59bfd91
!STACK 0
org.eclipse.jgit.api.errors.JGitInternalException: Exception caught during execution of merge command. org.eclipse.jgit.errors.MissingObjectException: Missing unknown 542a7b7366423cb0592f27aaacffdbf2d59bfd91
	at org.eclipse.jgit.api.MergeCommand.call(MergeCommand.java:425)
	at org.eclipse.jgit.api.PullCommand.call(PullCommand.java:374)
	at org.eclipse.egit.core.op.PullOperation$PullJob.run(PullOperation.java:256)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: org.eclipse.jgit.errors.MissingObjectException: Missing unknown 542a7b7366423cb0592f27aaacffdbf2d59bfd91
	at org.eclipse.jgit.internal.storage.file.WindowCursor.open(WindowCursor.java:136)
	at org.eclipse.jgit.lib.ObjectReader.open(ObjectReader.java:216)
	at org.eclipse.jgit.revwalk.RevWalk.parseAny(RevWalk.java:1144)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.doPeel(RefDirectory.java:574)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.peel(RefDirectory.java:554)
	at org.eclipse.jgit.api.MergeCommand.call(MergeCommand.java:243)
	... 3 more
```


### Other information

````
$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (215602/215602), done.
dangling commit 395a6eb2959f26dc59e2871a056e79c374929588
````
After which a git pull from Eclipse is still failing.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_hvGd,jgit,2139550109,60,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-30T13:23:53Z,2024-05-30T13:23:53Z,"Is the missing object available in the local repository after the merge command failed ?
You can check using e.g. `git show <objectId>`","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_hvGd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_h35T,jgit,2139586131,60,NA,stefandrissen,5297464,Stefan Drissen,,NA,2024-05-30T13:41:51Z,2024-05-30T13:41:51Z,"From VM in missing state:
````
git show 542a7b7366423cb0592f27aaacffdbf2d59bfd91
fatal: bad object 542a7b7366423cb0592f27aaacffdbf2d59bfd91
````
The commit is present on the remote repo and it is also present after a native git pull. I currently have one VM still in missing object state, so I can run some tests.

From local PC after native git pull:
````
$ git show 542a7b7366423cb0592f27aaacffdbf2d59bfd91
commit 542a7b7366423cb0592f27aaacffdbf2d59bfd91 (HEAD -> 7.37/dev, origin/7.37/dev)
Merge: 191cb4e7e 395a6eb29
Author: <me>
Date:   Thu May 30 11:22:02 2024 +0000

    Merged PR 94008: <snip>
````","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_h35T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jlSp,jgit,2140034217,60,NA,stefandrissen,5297464,Stefan Drissen,,NA,2024-05-30T15:53:11Z,2024-05-30T15:53:11Z,"Another commit has been merged into the remote repo (via PR) and jgit pull is failing again:
````
Pulling 1 repository
Exception caught during execution of merge command. org.eclipse.jgit.errors.MissingObjectException: Missing unknown f9110b0715ca1fae513d6ec86a2f41a20a07ebf3
````
Native git:
````
$ git show f9110b0715ca1fae513d6ec86a2f41a20a07ebf3
fatal: bad object f9110b0715ca1fae513d6ec86a2f41a20a07ebf3

$ git pull
remote: Azure Repos
remote: Found 4 objects to send. (1772 ms)
Unpacking objects: 100% (4/4), 3.04 KiB | 172.00 KiB/s, done.
From https://dev.azure.com/<org>/<project>/_git/<repo>
   542a7b736..f9110b071  7.37/dev   -> origin/7.37/dev
Updating 542a7b736..f9110b071
Fast-forward
 bl/ifall/search/initialize.cls | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

$ git show f9110b0715ca1fae513d6ec86a2f41a20a07ebf3
commit f9110b0715ca1fae513d6ec86a2f41a20a07ebf3 (HEAD -> 7.37/dev, origin/7.37/dev)
Merge: 542a7b736 fd68c6303
Author: <me>
Date:   Thu May 30 15:44:26 2024 +0000

    Merged PR 94410: <snip>
````
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_jlSp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_kFhI,jgit,2140166216,60,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-05-30T16:28:06Z,2024-05-30T16:28:06Z,"Does the local branch you are pulling from [track an upstream branch](https://git-scm.com/docs/git-config#Documentation/git-config.txt-branchltnamegtmerge) ?

This is hard to analyze without having access to the repository.
Can you reproduce this problem on any public repository ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_kFhI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_kZNe,jgit,2140246878,60,NA,stefandrissen,5297464,Stefan Drissen,,NA,2024-05-30T16:52:36Z,2024-05-30T16:52:36Z,"> Does the local branch you are pulling from [track an upstream branch](https://git-scm.com/docs/git-config#Documentation/git-config.txt-branchltnamegtmerge) ?

Yes, this is our main repository. The main branch is '7.37/dev', this normally only contains commits that are the result of a Pull Request from a branch created from '7.37/dev', ie '7.37/dev-branch'. 

While I have never had this problem persistently, in the past co-workers have had this issue more often.

Which does lead me to suspect that this _may_ be the result of an earlier unintended PR which merged a change from a '7.36/dev-branch' into '7.37/dev' (instead of into '7.36/dev'). The '7.37/dev' branch was created from the '7.36/dev' branch.
 
> This is hard to analyze without having access to the repository. Can you reproduce this problem on any public repository ?

I understand, is there any extended debug logging or so that I can turn on that may shed some light on the issue?
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_kZNe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_oZZc,jgit,2141296220,60,NA,stefandrissen,5297464,Stefan Drissen,,NA,2024-05-31T06:09:27Z,2024-05-31T06:09:27Z,"Rereading that definition of upstream branch, I think my previous answer was incorrect, I do not think that we are tracking an upstream branch (unless the accidental PR has resulted in '7.36/dev' being considered a tracked upstream?)

![image](https://github.com/eclipse-jgit/jgit/assets/5297464/d4c7853e-786f-433a-9b1e-0ab49fbe3134)
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM5_oZZc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/60,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6BNy6G,jgit,2167877254,60,NA,stefandrissen,5297464,Stefan Drissen,,NA,2024-06-14T12:03:54Z,2024-06-14T12:03:54Z,"Since this is still bugging me, I installed the egit / jgit dev environment and can now debug (be gentle: I am not a java dev).

The fetch result contains a ref to my base branch (7.37/dev) which contains as object id the commit id that is considered missing.

![image](https://github.com/eclipse-jgit/jgit/assets/5297464/16e81680-1504-4cf3-85bb-09153ac4a287)

[0] HEAD=SymbolicRef[HEAD -> refs/heads/7.37/dev=114d72b3e0b84726e838b365b2ec251568062b56(-1)]

followed by multiple version branches and then the actual head

[35] refs/heads/7.37/dev=Ref[refs/heads/7.37/dev=114d72b3e0b84726e838b365b2ec251568062b56(-1)]

followed by multiple feature branches until

[45] refs/heads/7.37/dev-990642=Ref[refs/heads/7.37/dev-990642=440f8ae546184f1221e4a45d89e05ff0646e0972(-1)]

which is then followed by something else:

[46] refs/pull/25368/merge=Ref[refs/pull/25368/merge=a9f8522c428b73b536ddb1437d6bc21ba52d16d0(-1)]
...
[59] refs/pull/96824/merge=Ref[refs/pull/96824/merge=54e2f2a4fd6c62220edc7868c1d07b681a6dfa12(-1)]

I am rather out of my depth here.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6BNy6G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/61,https://api.github.com/repos/eclipse-jgit/jgit/issues/61,jgit,2342204246,61,Issue with handling TreeWalk,kumarp149,68728539,,,CLOSED,2024-06-09T12:27:49Z,2024-08-29T15:32:24Z,"### Version

6.10.0

### Operating System

Linux/Unix

### Bug description

Consider the following test case.
Following are the steps that are done in the code:

1. create, add and commit a file (any file, I chose binary)
2. delete the file and commit it again
3. Trying iterating the tree walk which is created on top of second commit

```
@Test
	public void RevTreeParsingTest() throws Exception{
		Git git = Git.wrap(db);
		String binaryFile = ""file.bin"";

		writeTrashFile(binaryFile, ""\u0000\u0001"");
		git.add().addFilepattern(binaryFile).call();
		git.commit().setMessage(""BASE COMMIT"").call();

		deleteTrashFile(binaryFile);
		git.add().addFilepattern(binaryFile).call();
		RevCommit commit2 = git.commit().setMessage(""COMMIT-1"").call();

		RevTree tree = commit2.getTree();
		TreeWalk tw = new TreeWalk(git.getRepository());
		tw.addTree(tree);

		boolean found = false;

		while(tw.next()){
			if (tw.getPathString().equals(binaryFile)){
				found = true;
				break;
			}
		}
		assert !found;
	}
```

### Actual behavior

The test case is failing

### Expected behavior

The test case should pass (i.e. the deleted path should not be present in the treewalk)

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/61,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6AjSWa,jgit,2156733850,61,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-06-09T18:42:18Z,2024-06-09T18:42:18Z,"Use `git.rm().addFilepattern(binaryFile).call()` instead of 
```
deleteTrashFile(binaryFile);
git.add().addFilepattern(binaryFile).call();
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6AjSWa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/63,https://api.github.com/repos/eclipse-jgit/jgit/issues/63,jgit,2352816457,63,"use jgit impl  ""git show commitId --name-only""",lpf4254302,46316470,Pengfei Liu,,CLOSED,2024-06-14T08:17:53Z,2024-08-29T15:35:45Z,"### Description

use jgit impl  ""git show commitId --name-only""

### Motivation

give a commitId then return commit files

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/63,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLG2S,jgit,2318167442,63,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:35:45Z,2024-08-29T15:35:45Z,"The jgit command line application supports this command, see https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Show.java#L97","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLG2S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/64,https://api.github.com/repos/eclipse-jgit/jgit/issues/64,jgit,2363055480,64, Add Ant task to output info about the current commit,ahelwer,718765,Andrew Helwer,,OPEN,2024-06-19T20:06:33Z,2024-06-20T14:45:38Z,"### Description

I would like to add an Ant task which emits info about the current commit into Ant properties.

### Motivation

For rolling releases, it is desirable to extract properties from the current commit so they can be embedded in the build version that is displayed to the user (example: `1.8.0-alpha (rev: abcdef) 19 July 2024`). While the Ant `exec` task could be used to run git and parse its output, it is desirable to take a dependency on JGit instead of whatever version of git is installed and on the system path (if any). It would thus be desirable to add an Ant task exposing this functionality that is closely tied to JGit itself.

### Alternatives considered

Currently we use one of the many unmaintained JGit wrapper Ant tasks floating around github ([this one](https://github.com/alx3apps/jgit-buildnumber), specifically). However, it does not expose the info we want - in our case, [the commit time](https://github.com/tlaplus/tlaplus/issues/771#issuecomment-2179371373) which is desired so we can embed the time in the build and users can enjoy the benefits of knowing how old their version of our app is without sacrificing build reproducibility by taking the build time from the system clock. Various other wrappers were evaluated but they are all similarly unmaintained.

### Additional context

I am willing to implement this feature. If I write it, is it likely to be merged?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/64/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/64,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6B50wC,jgit,2179419138,64,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-06-19T20:27:43Z,2024-06-19T20:27:43Z,"You are welcome to implement this ant task in org.eclipse.jgit.ant.
Find the contributor guide [here](https://github.com/eclipse-egit/egit/wiki/Contributor-Guide#contributing-patches).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6B50wC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,jgit,2366929519,66,Pack file is not released on repository.close(),arysin,5498716,,,OPEN,2024-06-21T17:03:18Z,2024-12-04T19:42:34Z,"### Version

6.7.0

### Operating System

Windows

### Bug description

I clone a repository (with try/resouce on Git object) and after it's closed the git directory can't be deleted on Windows

### Actual behavior

I get a message
""C:\Users\user\AppData\Local\Temp\jgitRepository14654396429264831000\.git\objects\pack\pack-065d80f75516484c8e0c0a3631b7cdf620f27328.pack: The process cannot access the file because it is being used by another process""
I tried to force close but it does not help and the message states the repo is already closed:
```
                git.close();
                git.getRepository().close();
                FileUtils.deleteDirectory(tmpJgitPath);
```
close() called when useCnt is already zero for Repository

### Expected behavior

The pack file should be released on repository.close() and .git directory should be deleted

### Relevant log output

```Shell
It looks like repository.objectDatabase.packed.packList.value.packs[0].fd (RandomAccessFile) is still open.

From what I can see this is still the case in master: the org.eclipse.jgit.internal.storage.file.Pack.close() does not release the ""fd"".
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6CIIGE,jgit,2183168388,66,NA,arysin,5498716,,,NA,2024-06-21T17:37:25Z,2024-06-21T17:37:25Z,"The (ugly) workaround like this removes the error message:
```
                ObjectDatabase objectDatabase = git.getRepository().getObjectDatabase();
                Object packed = FieldUtils.getDeclaredField(ObjectDirectory.class, ""packed"", true).get(objectDatabase);
                AtomicReference packList = (AtomicReference) FieldUtils.getDeclaredField(packed.getClass(), ""packList"", true).get(packed);
                Object packList_ = packList.get();
                Pack[] packs = (Pack[]) FieldUtils.getDeclaredField(packList_.getClass(), ""packs"", true).get(packList_);
                for(Pack pack: packs) {
                    RandomAccessFile fd = (RandomAccessFile) FieldUtils.getDeclaredField(pack.getClass(), ""fd"", true).get(pack);
                    fd.close();
                }

```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6CIIGE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QcLUP,jgit,2423305487,66,NA,JoostK,123679,Joost Koehoorn,,NA,2024-10-18T22:06:57Z,2024-10-18T22:06:57Z,"> From what I can see this is still the case in master: the org.eclipse.jgit.internal.storage.file.Pack.close() does not release the ""fd"".

There's some interaction with `WindowCache` that reaches into `Path#close()`:

```
Pack#close()
WindowCache.purge(Pack)
WindowCache#removeAll(Pack)
WindowCache#gc()
CleanupQueue#gc()
WindowCache#clear(PageRef<ByteWindow>)
WindowCache#close(Pack)
Pack#endWindowCache()
Pack#close()
```

---

Are you using memory mapped files, by any chance? (i.e. `WindowCacheConfig#setPackedGitMMAP(boolean)`). Memory mapped files remain open as long as the mapped buffers have not been reclaimed by GC. `System#gc()` may be of help here if that's the case.

---

JFYI, casting to `FileRepository` allows you to obtain the list of packfiles with far less reflection:

```java
Collection<Pack> packs = ((FileRepository) git.getRepository()).getObjectDatabase().getPacks();
```

with the caveat that `getPacks()` will attempt to locate packfiles on disk if not yet loaded into memory; it's not just dereferencing a field.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QcLUP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Qiuok,jgit,2425023012,66,NA,arysin,5498716,,,NA,2024-10-20T14:47:45Z,2024-10-20T14:47:45Z,"No, I don't use memory mapped files, at least I don't set any configurations for WindowCacheConfig - just using JGit pretty much out of the box.
Thanks for the tip on getting packs - it works and code is cleaner now.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Qiuok/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V8r13,jgit,2515713399,66,NA,mfick-nvidia,182571485,,,NA,2024-12-03T22:51:42Z,2024-12-03T22:51:42Z,"I think that the following connection is an asynchronous one:

`WindowCache#gc() -> CleanupQueue#gc()`

i.e. CleanupQueue#gc may or may not be called sometime in the future, but I don't think there are any guarantees as to when. Likely not in your situation, but in a multi threaded environment, in theory another thread might still be accessing the file and that in theory can also prevent the WindowCache from removing all entries for the Pack file, which would also prevent the gc from completing.

I think this might have been a typo:
```
Pack#endWindowCache()
Pack#close()
```
I believe it should actually be:
```
Pack#endWindowCache()
Pack#doClose()
```
Of course, `endWindowCache()` will only call `doClose()` under the ""perfect"" conditions, when all references to the pack are effectively cleared and there are no outstanding operations on it.

So, your expectation might be reasonable in your exact scenario, but I would say it would be the exception rather than the rule to have this expectation given the current code. What you are finding is that it might not actually even be enough of an exception, and that could be why it isn't working for you. 

`Pack.close()` is called on unix like OSes when the packfiles is already deleted, so perhaps it isn't really the right method for `PackDirectory.close()` to be calling? I suspect `PackDirectory.close()` would need to call something more aggressive to make it force close the file, like maybe calling `Pack.doClose()` eventually? The tricky part is that `Pack` actually jumps through a lot of hoops to prevent the fd from being closed until it is no longer being used, this helps ongoing transfers in other threads from potentially failing. Taking a step up, I also believe that `git.getRepository().close()` is not meant to be synchronous either, it might be operating on a repository from a cache which can also prevent it from closing synchronously.


","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V8r13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V_fVt,jgit,2516448621,66,NA,JoostK,123679,Joost Koehoorn,,NA,2024-12-04T07:53:15Z,2024-12-04T07:53:15Z,"Thanks for the elaborate response, highly appreciated!

> I think that the following connection is an asynchronous one:
> 
> `WindowCache#gc() -> CleanupQueue#gc()`
> 
> i.e. CleanupQueue#gc may or may not be called sometime in the future, but I don't think there are any guarantees as to when. Likely not in your situation, but in a multi threaded environment, in theory another thread might still be accessing the file and that in theory can also prevent the WindowCache from removing all entries for the Pack file, which would also prevent the gc from completing.

This is quite sensitive indeed. If the `Pack` is held by the `WindowCache` then AFAICS it will go through `PageRef#kill()` to enqueue it into the `CleanupQueue`, which should then get cleaned up synchronously upon calling `CleanupQueue#gc()`. I do recognize that `Pack#endWindowCache()` may prevent this from happening if the pack file is still being accessed from other threads, but if that's not the case then closing is currently synchronous. Whether or not that is guaranteed or an implementation detail I can't tell.

---

> I think this might have been a typo:
> 
> ```
> Pack#endWindowCache()
> Pack#close()
> ```
> 
> I believe it should actually be:
> 
> ```
> Pack#endWindowCache()
> Pack#doClose()
> ```

Indeed it was, thanks for mentioning.

---

> Of course, `endWindowCache()` will only call `doClose()` under the ""perfect"" conditions, when all references to the pack are effectively cleared and there are no outstanding operations on it.
> 
> So, your expectation might be reasonable in your exact scenario, but I would say it would be the exception rather than the rule to have this expectation given the current code. What you are finding is that it might not actually even be enough of an exception, and that could be why it isn't working for you.

Note that I don't personally observe the ""leak"" as described by this issue's OP, but I'm taking meticulous care to close repository handles and actively purge them from `RepositoryCache` to drop their reference count to zero (it is being done in a write lock that is specific to the repository being closed, so other thread accesses are restricted _except_ for the thread that performs `RepositoryCache` purging). Without this effort, repositories will fail to be deleted on Windows platforms due to the dreaded `AccessDeniedException`.

> `Pack.close()` is called on unix like OSes when the packfiles is already deleted, so perhaps it isn't really the right method for `PackDirectory.close()` to be calling? I suspect `PackDirectory.close()` would need to call something more aggressive to make it force close the file, like maybe calling `Pack.doClose()` eventually? The tricky part is that `Pack` actually jumps through a lot of hoops to prevent the fd from being closed until it is no longer being used, this helps ongoing transfers in other threads from potentially failing.

This sounds reasonable and I totally understand the complexity here.

> Taking a step up, I also believe that `git.getRepository().close()` is not meant to be synchronous either, it might be operating on a repository from a cache which can also prevent it from closing synchronously.

Indeed, `RepositoryCache#close()` must be used to release its handle, if the `RepositoryCache` has had its hands on the `Repository`. I'm not sure if this may be why the OP is having issues, as neither the `Git` facade nor `CloneCommand` opens repositories through `RepositoryCache#open` AFAICS.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V_fVt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WGq5P,jgit,2518330959,66,NA,mfick-nvidia,182571485,,,NA,2024-12-04T19:05:47Z,2024-12-04T19:05:47Z,"> If the Pack is held by the WindowCache then AFAICS it will go through PageRef#kill() to enqueue it into the CleanupQueue, which should then get cleaned up synchronously upon calling CleanupQueue#gc()

I think you can only count on this with hard references, if the system is using SoftReferences, then enqueuing the reference will only happen when the JVM garbage collector decides to do this, which may never happen.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WGq5P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WGvbG,jgit,2518349510,66,NA,JoostK,123679,Joost Koehoorn,,NA,2024-12-04T19:14:37Z,2024-12-04T19:14:37Z,"> > If the Pack is held by the WindowCache then AFAICS it will go through PageRef#kill() to enqueue it into the CleanupQueue, which should then get cleaned up synchronously upon calling CleanupQueue#gc()
> 
> I think you can only count on this with hard references, if the system is using SoftReferences, then enqueuing the reference will only happen when the JVM garbage collector decides to do this, which may never happen.

If it were only up to the garbage collector then yes, but `SoftRef#kill()` manually enqueues the `SoftReference` into the `ReferenceQueue` to make it eagerly visible to `SoftCleanupQueue#gc()`.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WGvbG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/66,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WG-FB,jgit,2518409537,66,NA,mfick-nvidia,182571485,,,NA,2024-12-04T19:42:32Z,2024-12-04T19:42:32Z,"> but SoftRef#kill() manually enqueues the SoftReference into the ReferenceQueue to make it eagerly visible to SoftCleanupQueue#gc()

Indeed, so that likely isn't the holdup in this case.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WG-FB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,jgit,2395776301,68,JGit stops reporting allow-tip-sha1-in-want and/or allow-reachable-sha1-in-want once uploadpack.allowAnySHA1InWant is enabled,pszlazak,11884243,Piotr Szlazak,,CLOSED,2024-07-08T14:17:49Z,2024-12-23T21:22:19Z,"### Version

v6.9.0.202403050737-r-23-gc0b415fb0 (bundled with Gerrit 3.10.0)

### Operating System

Linux/Unix

### Bug description

JGit properly advertises following [capabilities](https://git-scm.com/docs/protocol-capabilities) if following options are enabled:
1. [`allow-tip-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_tip_sha1_in_want) if [`uploadpack.allowTipSHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowTipSHA1InWant) is enabled
1. [`allow-reachable-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_reachable_sha1_in_want) if [`uploadpack.allowReachableSHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowReachableSHA1InWant) is enabled
1. [`allow-tip-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_tip_sha1_in_want) and [`allow-reachable-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_reachable_sha1_in_want) if both options are enabled

When [`uploadpack.allowAnySHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowAnySHA1InWant) is also enabled, capabilities are no longer advertised (all are gone).


### Actual behavior

If [`uploadpack.allowAnySHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowAnySHA1InWant) is enabled, no [`allow-tip-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_tip_sha1_in_want) and/or [`allow-reachable-sha1-in-want`](https://git-scm.com/docs/protocol-capabilities#_allow_reachable_sha1_in_want) is advertised by JGit in response for `git-upload-pack` request.

### Expected behavior

JGit continues to report `allow-XXX` capabilities even if [`uploadpack.allowAnySHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowAnySHA1InWant) is enabled.

Moreover - as there is not dedicated `allow-any-sha1-in-want` capability, if only [`uploadpack.allowAnySHA1InWant`](https://git-scm.com/docs/git-config/#Documentation/git-config.txt-uploadpackallowAnySHA1InWant) is enabled, other two capabilities should be advertised.

### Relevant log output

Config file with `allowTipSHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = true
    allowReachableSHA1InWant = false
    allowAnySHA1InWant = false
```

Advertised capabilities -> `allow-tip-sha1-in-want` visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000001082163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done allow-tip-sha1-in-want agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^
```

Config file with `allowReachableSHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = false
    allowReachableSHA1InWant = true
    allowAnySHA1InWant = false
```

Advertised capabilities -> `allow-reachable-sha1-in-want` visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
0000010e2163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done allow-reachable-sha1-in-want agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

Config file with `allowTipSHA1InWant` and `allowAnySHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = true
    allowReachableSHA1InWant = false
    allowAnySHA1InWant = true
```

Advertised capabilities -> `allow-tip-sha1-in-want` **not** visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000000f12163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
```

Config file with `allowReachableSHA1InWant` and `allowAnySHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = false
    allowReachableSHA1InWant = true
    allowAnySHA1InWant = true
```

Advertised capabilities -> `allow-reachable-sha1-in-want` **not** visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000000f12163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
```

Config file with `allowTipSHA1InWant` and `allowReachableSHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = true
    allowReachableSHA1InWant = true
    allowAnySHA1InWant = false
```

Advertised capabilities -> `allow-tip-sha1-in-want` and `allow-reachable-sha1-in-want` visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000001252163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done allow-tip-sha1-in-want allow-reachable-sha1-in-want agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

Config file with `allowTipSHA1InWant`, `allowReachableSHA1InWant` and `allowAnySHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = true
    allowReachableSHA1InWant = true
    allowAnySHA1InWant = true
```

Advertised capabilities -> `allow-tip-sha1-in-want` and `allow-reachable-sha1-in-want` **not** visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000000f12163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
```

Config file with only `allowAnySHA1InWant` enabled (only relevant options are shown):
```text
[uploadpack]
    allowTipSHA1InWant = false
    allowReachableSHA1InWant = false
    allowAnySHA1InWant = true
```
Advertised capabilities -> `allow-tip-sha1-in-want` and `allow-reachable-sha1-in-want` **not** visible:
```shell
$ curl -s http://localhost:8080/Test-project/info/refs?service=git-upload-pack -o - | head -2
001e# service=git-upload-pack
000000f12163515068449cf60cb0321bef5adf0e72bdd7db HEAD include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow no-done agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
```

### Other information

Tested with [Gerrit 3.10.0](https://www.gerritcodereview.com/3.10.html)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O7dih,jgit,2397952161,68,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-10-07T21:41:20Z,2024-10-07T21:41:20Z,"I believe this is due to how JGit stores the allow flags, compared to CGit.

**CGit**:
```c
/* Enum for allowed unadvertised object request (UOR) */
enum allow_uor {
        /* Allow specifying sha1 if it is a ref tip. */
        ALLOW_TIP_SHA1 = 0x01,
        /* Allow request of a sha1 if it is reachable from a ref (possibly hidden ref). */
        ALLOW_REACHABLE_SHA1 = 0x02,
        /* Allow request of any sha1. Implies ALLOW_TIP_SHA1 and ALLOW_REACHABLE_SHA1. */
        ALLOW_ANY_SHA1 = 0x07
};
```

**JGit**:
```java
        /** Policy the server uses to validate client requests */
        public enum RequestPolicy {
                /** Client may only ask for objects the server advertised a reference for. */
                ADVERTISED,

                /**
                 * Client may ask for any commit reachable from a reference advertised by
                 * the server.
                 */
                REACHABLE_COMMIT,

                /**
                 * Client may ask for objects that are the tip of any reference, even if not
                 * advertised.
                 * <p>
                 * This may happen, for example, when a custom {@link RefFilter} is set.
                 *
                 * @since 3.1
                 */
                TIP,

                /**
                 * Client may ask for any commit reachable from any reference, even if that
                 * reference wasn't advertised.
                 *
                 * @since 3.1
                 */
                REACHABLE_COMMIT_TIP,

                /** Client may ask for any SHA-1 in the repository. */
                ANY;
        }
```

With CGit, it is evident that `ANY` (binary flag = 111) implies `TIP` (binary flag = 100) and `REACHABLE` (binary flag = 010), but with JGit it isn't because the enums do not have values associated.

When you read the JGit's documentation carefully, you realise that the `ALLOW_ANY_SHA1` in CGit is the logical union of `ALLOW_TIP_SHA1` and `ALLOW_REACHABLE_SHA1`, and that corresponds to `REACHABLE_COMMIT_TIP` in JGit and *not* to `ANY`.

JGit therefore already manages this case correct, because of the use of the `||` in the expression below:

```
		RequestPolicy policy = getRequestPolicy();
		if (policy == RequestPolicy.TIP
				|| policy == RequestPolicy.REACHABLE_COMMIT_TIP
				|| policy == null)
			adv.advertiseCapability(OPTION_ALLOW_TIP_SHA1_IN_WANT);
		if (policy == RequestPolicy.REACHABLE_COMMIT
				|| policy == RequestPolicy.REACHABLE_COMMIT_TIP
				|| policy == null)
			adv.advertiseCapability(OPTION_ALLOW_REACHABLE_SHA1_IN_WANT);
```

You see from the above that when you have `RequestPolicy.REACHABLE_COMMIT` (equivalent to the CGit option `ANY`) then the capabilities advertised are `OPTION_ALLOW_TIP_SHA1_IN_WANT` and `OPTION_ALLOW_REACHABLE_SHA1_IN_WANT`, which _seemed_ consistent with CGit.

However, the `ANY` should have also implied `REACHABLE_COMMIT_TIP` IMHO, as CGit states in his comment.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O7dih/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O7ybM,jgit,2398037708,68,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-10-07T22:31:22Z,2024-10-07T22:31:22Z,"I've proposed [this fix that aligns the CGit and JGit definitions](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1202276) and IMHO is low-risk as it does not change anything in the logic of how the enums are used, apart from the more readable expression `RequestPolicy.implies()` in the logic for advertising capabilities.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O7ybM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PijDR,jgit,2408198353,68,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2024-10-11T22:30:55Z,2024-10-11T22:30:55Z,@pszlazak I have noticed that this bug impacted only Git protocol V0 in JGit: have you tried enabling Git protocol V2?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PijDR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PyQ_E,jgit,2412318660,68,NA,pszlazak,11884243,Piotr Szlazak,,NA,2024-10-14T20:50:43Z,2024-10-14T20:50:43Z,"@lucamilanesio Correct, `allow-tip-sha1-in-want` and `allow-reachable-sha1-in-want` are capabilities related to V0/V1 Git protocol:  
> this document describes capabilities for versions 0 and 1 of the pack protocol. For version 2, please refer to the [protocol-v2](https://git-scm.com/docs/protocol-v2) doc.

[[source](https://git-scm.com/docs/protocol-capabilities)]

For V2 there is another set of capabilities: https://git-scm.com/docs/gitprotocol-v2#_capabilities  
`uploadpack.allowTipSHA1InWant`, `uploadpack.allowReachableSHA1InWant` and `uploadpack.allowAnySHA1InWant` options do not have impact on them AFAIK.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PyQ_E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sFs,jgit,2481635692,68,NA,pszlazak,11884243,Piotr Szlazak,,NA,2024-11-17T22:30:06Z,2024-11-17T22:30:06Z,"@lucamilanesio I managed to test your correction. I cherry-picked it to JGit 6.10 branch, compiled and integrated with Gerrit 3.10.x - issue is fixed. You can now have `uploadpack.allowAnySHA1InWant` set to `true` added to `jgit.config` and `allow-tip-sha1-in-want` and `allow-reachable-sha1-in-want` still are advertised.

Yet in a meantime I had a conversation with CGit maintainers: https://lore.kernel.org/git/pull.1814.git.git.1729112794671.gitgitgadget@gmail.com/T/#u

In a nutshell - in CGit `uploadpack.allowAnySHA1InWant` overrides other two `uploadpack.allowXXXInWant` settings. If set to `false`, it will also disable `uploadpack.allowTipSHA1InWant` and `uploadpack.allowReachableSHA1InWant`. Same goes for `true`.  
But in CGit also order of settings is important - if first you have `uploadpack.allowAnySHA1InWant` set to `false`, still later you can  individually enable `uploadpack.allowTipSHA1InWant` and `uploadpack.allowReachableSHA1InWant`.

I believe it doesn't work the same in JGit. Yet I don't think it's needed, especially that it is only valid for V0/V1 Git protocol.

If you share this opinion and no further changes in JGit are needed, I prepared changes for stable-6.10 branch:
- https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1204171
- https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1204172

FYI - because I lack forge-author permission, I had to reset the author.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sFs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/68,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ymz8x,jgit,2560311089,68,NA,pszlazak,11884243,Piotr Szlazak,,NA,2024-12-23T21:22:19Z,2024-12-23T21:22:19Z,"Issue fixed in 1519c147948eb1108bdf45f2aeed84746dacff9c (Gerrit change [eclipse-jgit/jgit/+/1202276](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1202276)) + tests committed in 5583f6a10eafc8c2627e0fb4833cb8ffe422f69a (Gerrit change [eclipse-jgit/jgit/+/1202480](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1202480)).

Also cherry-picked to [stable-6.10](https://github.com/eclipse-jgit/jgit/tree/stable-6.10) branch as 5b1513a28d337e7e3453e557ee9dde292678eb81 (Gerrit change [eclipse-jgit/jgit/+/1204171](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1204171)) + tests committed in 079dbe8ed9e47e44986ce43513f3aad8fa64832a (Gerrit change [eclipse-jgit/jgit/+/1204172](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1204172)).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ymz8x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/71,https://api.github.com/repos/eclipse-jgit/jgit/issues/71,jgit,2416314436,71,Missing support of Git Hook prepare-commit-msg,remybcnes,99494699,,,OPEN,2024-07-18T13:06:09Z,2024-10-04T14:01:02Z,"### Version

6.10

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

Git hook prepare-commit-msg is officially defined and implemented since Git v2.32.0 (at least) : https://www.git-scm.com/docs/githooks/2.32.0

However, JGit does not support it, hence not being compliant with Git 2.32+.

### Actual behavior

JGit does not support all Githooks, hence not being compliant with Git 2.32+.
It is limited to the ones defined in https://github.com/eclipse-jgit/jgit/tree/stable-6.10/org.eclipse.jgit/src/org/eclipse/jgit/hooks

- commit-msg
- pre-commit
- post-commit
- pre-push

### Expected behavior

Support of all client-side Githooks defined in https://www.git-scm.com/docs/githooks/ 

In particular, a mechanism allowing for commit messages preparation should be proposed.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/71,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Orjqv,jgit,2393782959,71,NA,ciscoo,6423628,Francisco Mateo,,NA,2024-10-04T14:01:01Z,2024-10-04T14:01:01Z,"I think this issue should be more of an umbrella issue retitled to missing several githooks.

We use [owasp/sedated](https://github.com/owasp/sedated) which is a pre-receive hook. It is a bit of a pain to figure out what is being blocked when the only log is:

```logs
[DEBUG] [org.eclipse.jgit.transport.PacketLineIn] git< unpack ok
[DEBUG] [org.eclipse.jgit.transport.PacketLineIn] git< ng refs/heads/gh-pages pre-receive hook declined
[DEBUG] [org.eclipse.jgit.transport.PacketLineIn] git< 0000
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Orjqv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/72,https://api.github.com/repos/eclipse-jgit/jgit/issues/72,jgit,2416730186,72,Why do I need a credentialsProvider if I've configured the SshSessionFactory?,devvthedev,82516835,David Davies,,CLOSED,2024-07-18T15:26:35Z,2024-07-18T16:44:34Z,"Hello,

I'm using the following JGit and Apache MINA dependencies in my project:
```
implementation ""org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r""
implementation ""org.eclipse.jgit:org.eclipse.jgit.ssh.apache:6.10.0.202406032230-r""
implementation ""org.apache.sshd:sshd-git:2.13.1""
```

 I've created a default `org.apache.sshd.client.SshClient` with:
`SshClient sshClient = SshClient.setUpDefaultClient();`

and then set an instance of the GitSshdSessionFactory on JGits SshSessionFactory:
`SshSessionFactory.setInstance(new GitSshdSessionFactory(sshClient));`

<br>

By default the sshClient is reading the SSH keys I have stored in the `~/.ssh` folder where the `config` file has the following configuration:
```
Host github.com
  IdentityFile ~/.ssh/my-ssh-key
```

I am using a **_passphrase-less_** private SSH key.

<br>
<br>

The question I have is around JGits Git push command call when talking back to the remote repository.

For example, 

1. Given I have cloned a repository on my machine with SSH in a terminal:

`git clone git@github.com:devvthedev/my-project.git`

2. Made some changes to the repo

3. Opened the repo using JGit with `Git.open(...)` and get a `Git` object back

4. Staged the changes I made and committed them:

```
git.add()
    .addFilepattern(""."")
    .call();
```

```
git.commit()
    .setCommitter(new PersonIdent(""me"", ""me@example.com""))
    .setMessage(""message"")
    .call();
```

6. When I try to push those changes with JGit:

```
git.push()
    .call();
```

I get the following error:

```
Caused by: org.eclipse.jgit.errors.TransportException: Unable to connect
        at org.apache.sshd.git.transport.GitSshdSessionFactory.getSession(GitSshdSessionFactory.java:134)
        at org.eclipse.jgit.transport.SshTransport.getSession(SshTransport.java:107)
        at org.eclipse.jgit.transport.TransportGitSsh$SshPushConnection.<init>(TransportGitSsh.java:356)
        at org.eclipse.jgit.transport.TransportGitSsh.openPush(TransportGitSsh.java:157)
        at org.eclipse.jgit.transport.PushProcess.execute(PushProcess.java:140)
        at org.eclipse.jgit.transport.Transport.push(Transport.java:1555)
        at org.eclipse.jgit.api.PushCommand.call(PushCommand.java:158)
        ... 2 more
Caused by: java.lang.NullPointerException: Cannot invoke ""org.eclipse.jgit.transport.CredentialsProvider.isInteractive()"" because ""credentialsProvider"" is null
        at org.apache.sshd.git.transport.GitSshdSession.<init>(GitSshdSession.java:55)
        at org.apache.sshd.git.transport.GitSshdSessionFactory$1.<init>(GitSshdSessionFactory.java:90)
        at org.apache.sshd.git.transport.GitSshdSessionFactory.getSession(GitSshdSessionFactory.java:90)
        ... 8 more
```

<br>

If I provide a CredentialsProvider with the `git` user and no password:

```
git.push()
    .setCredentialsProvider(new UsernamePasswordCredentialsProvider(""git"", """"))
    .call();
```

It works!

So my question is - why is a CredentialsProvider required given I have configured a `SshSessionFactory` instance?

Or is this a question that should be asked to the `Apache MINA SSHD Project` maintainers?

Thank you
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/72,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6FVh9i,jgit,2237013858,72,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-07-18T16:18:53Z,2024-07-18T16:18:53Z,"Given that the stack trace shows that this NPE is from `org.apache.sshd.git.transport.GitSshdSession`: yes, this is a question for the Apache MINA sshd maintainers.

That said, JGit has its own integration with Apache MINA sshd in bundle `org.eclipse.jgit.ssh.apache`, which is tailored to the needs of JGit, works with the latest JGit versions, can do connections through SOCKS or HTTP CONNECT proxies, and has support for PKCS#11 hardware security modules (like YubiKey PIV). If you add `org.eclipse.jgit.ssh.apache.agent` you even have integration with SSH agents on Windows, Linux, and OS X.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6FVh9i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/72,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6FVtl0,jgit,2237061492,72,NA,devvthedev,82516835,David Davies,,NA,2024-07-18T16:44:33Z,2024-07-18T16:44:33Z,Thanks @tomaswolf will see what they say 👍,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6FVtl0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,jgit,2418764930,73,JGit unable to read sha256 IDs,BrotherPatrix,13098741,Patrix,,OPEN,2024-07-19T12:24:29Z,2024-09-23T07:20:12Z,"### Version

6.10.0.202406032230-r

### Operating System

Linux/Unix

### Bug description

I'm having trouble in trying to work with a git repository using JGit and I believe that because this repository is with objectFormat sha256, this may break functionality.

### Actual behavior

```bash
java.lang.RuntimeException: org.eclipse.jgit.api.errors.JGitInternalException: An exception occurred while trying to add the Id of HEAD
	at gss.dms.versioning.Versioning.useJGit(Versioning.java:119)
	at gss.dms.versioning.Versioning.calculateVersion(Versioning.java:85)
	at gss.dms.versioning.VersioningApplication.call(VersioningApplication.java:44)
	at gss.dms.versioning.VersioningApplication.call(VersioningApplication.java:16)
	at picocli.CommandLine.executeUserObject(CommandLine.java:2045)
	at picocli.CommandLine.access$1500(CommandLine.java:148)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2465)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2457)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2419)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2277)
	at picocli.CommandLine$RunLast.execute(CommandLine.java:2421)
	at picocli.CommandLine.execute(CommandLine.java:2174)
	at gss.dms.versioning.VersioningApplication.main(VersioningApplication.java:53)
Caused by: org.eclipse.jgit.api.errors.JGitInternalException: An exception occurred while trying to add the Id of HEAD
	at org.eclipse.jgit.api.LogCommand.call(LogCommand.java:135)
	at gss.dms.versioning.Versioning.useJGit(Versioning.java:98)
	... 12 more
Caused by: java.io.IOException: Cannot read file .../.git/packed-refs
	at org.eclipse.jgit.internal.storage.file.RefDirectory.readPackedRefs(RefDirectory.java:1003)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.refreshPackedRefs(RefDirectory.java:975)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs(RefDirectory.java:966)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.firstExactRef(RefDirectory.java:353)
	at org.eclipse.jgit.lib.RefDatabase.findRef(RefDatabase.java:281)
	at org.eclipse.jgit.lib.Repository.findRef(Repository.java:1102)
	at org.eclipse.jgit.lib.Repository.resolve(Repository.java:815)
	at org.eclipse.jgit.lib.Repository.resolve(Repository.java:473)
	at org.eclipse.jgit.api.LogCommand.call(LogCommand.java:127)
	... 13 more
Caused by: org.eclipse.jgit.errors.InvalidObjectIdException: Invalid id: 6cd515c54340f94cd4150ef3653ca154c0fb2e010ea255017bc82c2ec156c056
	at org.eclipse.jgit.lib.ObjectId.fromString(ObjectId.java:203)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(RefDirectory.java:1049)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.lambda$2(RefDirectory.java:994)
	at org.eclipse.jgit.util.FileUtils.readWithRetries(FileUtils.java:733)
	at org.eclipse.jgit.internal.storage.file.RefDirectory.readPackedRefs(RefDirectory.java:985)
	... 21 more
```

### Expected behavior

I expected JGit to be able to read this .git folder.

### Relevant log output

_No response_

### Other information

I've done some research and it seems that this repository has object format sha256 instead of sha1 which leads me to believe that JGit does not support this hashing algorithm yet.

To further test this, I've installed the latest Eclipse 2024-06 available with EGit installed and I tried to add the project and I get the exact same errors.

Another bit of information that I can provide is that the repository was created using a Forgejo server and the person that created it confirmed that he selected sha256 as object format.

I've added this as a bug, because this is unclear to me if it was on a roadmap or not, but feel free to change it to a feature request.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/73/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Fe4en,jgit,2239465383,73,NA,mitr15fan15v,118141598,mitr15fan15v,,NA,2024-07-19T15:29:57Z,2024-07-19T15:29:57Z,"Missing Features
There are some missing features:

signing push
shallow and partial cloning
support for remote helpers
support for credential helpers
support for multiple working trees (git-worktree)
using external diff tools
support for HTTPS client certificates
**SHA-256 object IDs**
git protocol V2 (client side): packfile-uris
multi-pack index
split index","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Fe4en/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqmVe,jgit,2259314014,73,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-07-30T22:30:43Z,2024-07-30T22:30:43Z,JGit doesn't yet support SHA-256 object IDs,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqmVe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6M_jUT,jgit,2365469971,73,NA,theoparis,11761863,Theo Paris,theo@tinted.dev,NA,2024-09-22T05:09:48Z,2024-09-22T05:09:48Z,Why is this closed if this is not implemented?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6M_jUT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/73,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NG8kW,jgit,2367408406,73,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-23T07:20:12Z,2024-09-23T07:20:12Z,reopened and marked as enhancement request,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6NG8kW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/74,https://api.github.com/repos/eclipse-jgit/jgit/issues/74,jgit,2432341958,74,`RefLeaseSpec` configured with invalid object ID is silently ignored,Stephan202,513280,Stephan Schroevers,,OPEN,2024-07-26T14:16:08Z,2024-08-29T15:39:12Z,"### Version

6.10.0

### Operating System

Linux/Unix

### Bug description

When `PushCommand` is configured with a `RefLeaseSpec` that contains an _invalid_ (unparsable) `expected` object ID, then the `RefLeaseSpec` is silently ignored, and the push is performed unconditionally.

### Actual behavior

The following parameterized JUnit 5 test fails for `useInvalidRevision = true`.
```java
/**
 * Tests the difference between a {@link RefLeaseSpec} with a valid-but-unknown and an invalid
 * object reference.
 */
@ParameterizedTest
@ValueSource(booleans = {false, true})
void pushBranchDeletionWithLease(
    boolean useInvalidRevision, @TempDir Path upstream, @TempDir Path downstream)
    throws GitAPIException {
  /* Create a repository with branch `master` and a single commit. */
  Git gitUpstream = Git.init().setDirectory(upstream.toFile()).call();
  String firstCommit =
      gitUpstream
          .commit()
          .setAllowEmpty(true)
          .setAuthor(""Author"", ""Email"")
          .setMessage(""Initial commit"")
          .call()
          .toObjectId()
          .name();

  /* Create a second repository that has the first as its `origin` remote. */
  Git gitDownstream =
      Git.cloneRepository().setURI(upstream.toString()).setDirectory(downstream.toFile()).call();

  /* Add a second commit to `master` in the downstream repository. */
  String secondCommit =
      gitDownstream
          .commit()
          .setAllowEmpty(true)
          .setAuthor(""Author"", ""Email"")
          .setMessage(""Second commit"")
          .call()
          .toObjectId()
          .name();

  /*
   * Have the downstream repository attempt to push the second commit to the upstream repository,
   * with lease. The lease specifies either a valid-but-unknown revision or an invalid revision.
   */
  String target = Constants.R_HEADS + Constants.MASTER;
  String expectedRevision =
      useInvalidRevision ? ""invalid-revision"" : ""0123456789abcdef0123456789abcdef01234567"";
  Iterable<PushResult> results =
      gitDownstream
          .push()
          .setRefLeaseSpecs(new RefLeaseSpec(target, expectedRevision))
          .setRefSpecs(new RefSpec().setSourceDestination(""HEAD"", target))
          .call();

  /*
   * In case an invalid revision is specified, then the following assertion fails, as the response
   * is `OK` instead.
   */
  assertEquals(
      RemoteRefUpdate.Status.REJECTED_REMOTE_CHANGED,
      results.iterator().next().getRemoteUpdate(target).getStatus());

  /* In that case the assertions below also fail, as the push did happen. */
  String upstreamHead = gitUpstream.log().call().iterator().next().toObjectId().name();
  assertNotEquals(secondCommit, upstreamHead);
  assertEquals(firstCommit, upstreamHead);
}
``` 

### Expected behavior

I expect either that the `RefLeaseSpec` rejects the invalid object ID (preferred), or that the push fails with a `REJECTED_REMOTE_CHANGED` error. Not sure the Git protocol even allows the latter. C Git seems to do something akin to the former (i.e., fail fast):
```sh
# Create a repository with branch `master` and a single commit.
mkdir upstream
git -C upstream init
git -C upstream commit --allow-empty -m 'Initial commit'

# Create a second repository that has the first as its `origin` remote.
git clone upstream downstream

# Add a second commit to `master` in the downstream repository.
git -C downstream commit --allow-empty -m 'Second commit'

# Have the downstream repository attempt to push te second commit to the
# upstream repository, with lease.
#
# When an unknown revision is specified, then the push is rejected:
#
#   To /path/to/upstream
#    ! [rejected]        master -> master (stale info)
#   error: failed to push some refs to '/path/to/upstream'
git -C downstream push --force-with-lease=master:0123456789abcdef0123456789abcdef01234567 origin master

# When an _invalid_ revision is specified, then the command isn't even
# executed:
#
#   error: cannot parse expected object name 'invalid-revision'
git -C downstream push --force-with-lease=master:invalid-revision origin master
```

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/74/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,jgit,2434416130,76,Support worktrees,spacey-sooty,114076356,Jade,spacey-sooty@proton.me,OPEN,2024-07-29T04:20:56Z,2025-02-06T23:53:10Z,"### Description

I'd like to be able to use jgit from git worktrees

### Motivation

When running Gradle builds that rely on jgit for versioning from a Git worktree they will fail due to this lack of support

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/76/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqjXY,jgit,2259301848,76,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-07-30T22:18:28Z,2024-07-30T22:18:28Z,"Try the master branch, since [change 1194900](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1194900) JGit has read support for git worktrees.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6GqjXY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZLs18,jgit,2569981308,76,NA,dalewking,346062,Dale King,dalewking@gmail.com,NA,2025-01-04T01:12:58Z,2025-01-04T01:12:58Z,Just pointing out that we are coming up on a decade that git work trees have been around and they are still not supported.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZLs18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6daNEK,jgit,2640892170,76,NA,ianbrandt,709570,Ian Brandt,ian@ianbrandt.com,NA,2025-02-06T20:09:20Z,2025-02-06T20:09:20Z,"> Try the master branch, since [change 1194900](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1194900) JGit has read support for git worktrees.

So then is this resolved in [7.1.0.202411261347-r](https://github.com/eclipse-jgit/jgit/releases/tag/v7.1.0.202411261347-r)?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6daNEK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/76,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dcCid,jgit,2641373341,76,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-02-06T23:53:09Z,2025-02-06T23:53:09Z,The read support was first shipped in v7.0.0.202409031743-r,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dcCid/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,jgit,2436226694,77,FetchCommand silently fails when a fetch error occurs,aschott-looker,57158607,Anthony Schott,anthonyschott@google.com,CLOSED,2024-07-29T19:52:03Z,2024-08-22T21:08:35Z,"### Version

5.13.0.202109080827-r

### Operating System

Linux/Unix

### Bug description

If there is a stale git lock file in the target git repo and you invoke the `FetchCommand` in JGit, it returns a `FAST_FORWARD` result. This implies the command was successful even though it actually failed due to the lock file.

This behavior appears to be consistent if the fetch fails for other reasons as well. For example: https://bugs.eclipse.org/bugs/show_bug.cgi?id=564011

### Actual behavior

If the fetch operation fails, it fails silently and returns a successful result (e.g. `FAST_FORWARD`).

### Expected behavior

JGit should propagate errors upstream if the fetch operation fails. For example, in the case of the lock file being the root cause it should return `LOCK_FAILURE`.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/77/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6HR2rZ,jgit,2269604569,77,NA,adkatz,132711047,,,NA,2024-08-05T17:55:43Z,2024-08-05T17:55:43Z,"How to repro:

1. Manually create a lock file for a branch, e.g. `~/test_repo/.git/refs/remotes/origin/main.lock`
2. call FetchCommand

Something I noticed in this case is that calling `<fetch_results>.getTrackingRefUpdate('refs/remotes/origin/main').getResult()` returns `FAST_FORWARD`. According to [this documentation](https://archive.eclipse.org/jgit/docs/jgit-2.0.0.201206130900-r/apidocs/org/eclipse/jgit/lib/RefUpdate.Result.html) there is a `LOCK_FAILURE` constant that should be returned in this case. 

Could it be that the bug is that when there is a lock failure the lock status isn't being set properly? I believe that when status is `REJECTED` (like when local branch contains uncommited changes), the FetchCommand actually does raise an error when called. ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6HR2rZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6HVhn9,jgit,2270566909,77,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-06T07:23:35Z,2024-08-06T07:23:35Z,"Your repro proposal doesn't match what is described in the bugzilla bug 564011, there the fetch fails since a prefix of the ref (origin/release) already exists in the ref database; the creation of the new ref (release/v1.18) & all other refs from the `fetch` result are aborted.

Did you check if this problem still exists on master ? 5.13 is EOL, we cannot maintain umpteen releases in parallel.
If you are still on Java 8 consider to update to a supported Java version. The next JGit release 7.0 will require Java 17.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6HVhn9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ht4vm,jgit,2276953062,77,NA,aschott-looker,57158607,Anthony Schott,anthonyschott@google.com,NA,2024-08-09T00:44:58Z,2024-08-09T00:44:58Z,"@msohn - Thanks for taking a look! I just updated the title / description of this issue to match the repro provided by @adkatz. If I understand the problem correctly, I believe the exact reason the fetch fails is less relevant. It has more to do with the fact that errors on fetch don't appear to get propagated upstream. ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ht4vm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IhpAe,jgit,2290520094,77,NA,sokai116,5397428,,,NA,2024-08-15T03:55:27Z,2024-08-15T03:55:27Z,"This is a serious issue in Windows OS. When doing a git fetch, the `lockLooseRefs(pending);` in PackedBatchRefUpdate will return null if 2 branches have the same name but differ only in case, then the fetch silently fails.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IhpAe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/77,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JbUnW,jgit,2305640918,77,NA,aschott-looker,57158607,Anthony Schott,anthonyschott@google.com,NA,2024-08-22T21:08:35Z,2024-08-22T21:08:35Z,"This ended up being an issue with our application wrapper code, not JGit itself, so closing this out.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JbUnW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/78,https://api.github.com/repos/eclipse-jgit/jgit/issues/78,jgit,2439993560,78,Submodules: use relative paths as worktree and gitdir instead of absolute ones,eder-s,2641669,,,CLOSED,2024-07-31T12:55:03Z,2024-12-11T21:28:14Z,"### Description

Support relative paths for:
- a submodule's worktree configuration entry 
- a submodule's gitdir link

### Motivation

Using relative paths allows copying the super project to a different locations w/o worrying about the submodules.
With absolute paths the submodules do still point to the ""old"" location after the superpoject is copied.

### Alternatives considered

_No response_

### Additional context

This issue was addressed previously at:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=463437

""cgit"" also uses relative paths for worktree and gitdir.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/78,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IL2St,jgit,2284807341,78,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-12T20:00:36Z,2024-08-12T20:00:36Z,"This is at 

https://github.com/eclipse-jgit/jgit/blob/299a7348eb318a0199226c1e633cc46c659d76d3/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileRepository.java#L296-L304

Reading core.worktree and the .git file already resolves them.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IL2St/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/78,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLJ66,jgit,2318180026,78,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:40:16Z,2024-08-29T15:40:16Z,Simon proposed a fix in https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1198661,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLJ66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/79,https://api.github.com/repos/eclipse-jgit/jgit/issues/79,jgit,2440055338,79,Submodule update fails if submodule was previously deleted then reinitialized,eder-s,2641669,,,CLOSED,2024-07-31T13:23:25Z,2025-01-29T12:06:02Z,"### Version

5.x 6.x

### Operating System

Windows

### Bug description

Original bug report:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=477642

JGit fails to update/restore a submodule for which the worktree was deleted but the gitdir under "".git/modules/subrepo"" is still existing.

Steps to reproduce(copied from bugzilla):
1. Create two repos, a remote repo and a submodule repo. Commit a file to the submodule repo, then add it as a submodule to the remote repo and do a commit in the remote repo.
2. Clone the remote repo, then in the clone, perform a submodule init and a submodule update.
3. Delete the submodule directory in the local clone, then perform a hard reset. Perform another submodule init, then another submodule update, and JGit will throw an exception.

### Actual behavior

JGit throws an exception instead of updating/restoring the submodule.

### Expected behavior

Updating the submodule succeeds.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/79/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/79,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLKiH,jgit,2318182535,79,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:41:15Z,2024-08-29T15:41:15Z,Simon proposed this fix https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1198662,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLKiH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/79,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cQFI4,jgit,2621461048,79,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-29T12:06:01Z,2025-01-29T12:06:01Z,fix was submitted,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cQFI4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/81,https://api.github.com/repos/eclipse-jgit/jgit/issues/81,jgit,2451838340,81,Rework delta handling code in order to support large repositories,schrepfler,3553,Srepfler Srdan,schrepfler@gmail.com,OPEN,2024-08-06T23:20:39Z,2024-08-29T12:51:12Z,"### Description

Currently libraries that use jgit like egit suffer from TooLargeObjectInPackException when the invoked repository contains larger files. Arguably this is not the way how to use source control but these things do happen.

Caused by: org.eclipse.jgit.errors.TooLargeObjectInPackException: Object too large (2,887,318,710 bytes), rejecting the pack. Max object size limit is 2,147,483,639 bytes.

I believe default limit should be to mimic whatever limit git has and set it to that, and if it's something higher should be raised to the higher value and ultimately it should be possible to disable the check.

As mentioned [here](https://github.com/eclipse-egit/egit/issues/46#issuecomment-2259325802) the delta handling code requires the target to be a single Java byte array, maybe figure out alternative implementation or code path in order to support bigger repositories.

### Motivation

Repositories with large files are unfortunately a fact of life, especially since hosted git lfs solutions come at a premium many people opt out to host large files in git.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/81,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6I3oSR,jgit,2296284305,81,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-19T10:52:25Z,2024-08-19T10:52:25Z,"This is not trivial. The basic problem is that a delta is composed of COPY and INSERT instructions, and COPY instruction may copy data from the base out of order. See e.g. the comment at https://github.com/eclipse-jgit/jgit/blob/299a7348eb318a0199226c1e633cc46c659d76d3/org.eclipse.jgit/src/org/eclipse/jgit/util/io/BinaryDeltaInputStream.java#L21 So one needs efficient random access to the whole base. A COPY instruction has the format ""COPY offset length"" and says ""copy length bytes from the base, starting at offset, to the output"". Offset is an uint32, so limited to 4GB, while length is in the range [1 .. 2^24-1].

There was an attempt to stream the base, but it turned out to be too slow. See commit 62697c8d and the mail referenced in that commit comment.

Also see the comments on [Gerrit change 190382](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/190382).

For applying binary patches, C git has limit of 1024 * 1024 * 1023 bytes, a little less than 1GB. See https://github.com/git/git/blob/b9849e4f7631d80f146d159bf7b60263b3205632/apply.c#L414 .

For delta-compression in pack files, I see no such limit on the length. There is a limit on the copy length of just 64kB, though: https://github.com/git/git/blob/b9849e4f7631d80f146d159bf7b60263b3205632/diff-delta.c#L432 . (For pack v2)

Given that the offset in a COPY instruction is limited to 4GB, one actually ""only"" needs fast random access to the first 4GB of a base. Perhaps just using multiple arrays (as mentioned in [Gerrit change 190382](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/190382)) to cover these first 4GB might be a way. Of course, it might need 4GB (plus some more) of JVM heap...

Another idea from that Gerrit change was to apply the 2GB limit only to deltas. But that might give strange effects. (Blob can be handled initially if not delta compressed, but cannot be handled after repacking, when it might have become delta-compressed?)

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6I3oSR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/82,https://api.github.com/repos/eclipse-jgit/jgit/issues/82,jgit,2459015697,82,JGIT detected ADD  for a file of type COPY,abdulkerimatik,21237308,Abdulkerim Atik,abdulkerimatik@gmail.com,OPEN,2024-08-10T09:59:57Z,2024-08-10T09:59:57Z,"### Version

6.10.0.202406032230-r

### Operating System

Linux/Unix

### Bug description

If a file that appears as a copy in git is diffed as shown below, the value of the type appears as ""ADD"".
     List<DiffEntry> diffs = git.diff()
                    .setPathFilter(treeFilter)
                    .setNewTree(newTreeParser)
                    .setOldTree(oldTreeParser)
                    .call();[](url)

### Actual behavior

The file type appears ADD

### Expected behavior

The file type should be COPY

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/83,https://api.github.com/repos/eclipse-jgit/jgit/issues/83,jgit,2460369292,83,An unauthorized issue occurred during submission,lizhe-0423,109721930,荔枝,,CLOSED,2024-08-12T08:35:33Z,2024-12-11T22:12:18Z,"### Version

5.13.1.202206130422-r

### Operating System

Windows

### Bug description

use git.push().setCredentialsProvider(credential).call(); 
credential = new UsernamePasswordCredentialsProvider(username, password);

When submitting Times error

### Actual behavior

not authorized

### Expected behavior

commit succeed

### Relevant log output

```Shell
org.eclipse.jgit.api.errors.TransportException: https://github.com/lizhe-0423/MRMP: not authorized

	at org.eclipse.jgit.api.PushCommand.call(PushCommand.java:147)
	at com.joysuch.publish.getter.GitUtils.commitFiles(GitUtils.java:47)
	at MainTest.test(MainTest.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.eclipse.jgit.errors.TransportException: https://github.com/lizhe-0423/MRMP: not authorized
	at org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:685)
	at org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:627)
	at org.eclipse.jgit.transport.TransportHttp.openPush(TransportHttp.java:541)
	at org.eclipse.jgit.transport.PushProcess.execute(PushProcess.java:127)
	at org.eclipse.jgit.transport.Transport.push(Transport.java:1384)
	at org.eclipse.jgit.api.PushCommand.call(PushCommand.java:137)
	... 71 more
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/83,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IHxUf,jgit,2283738399,83,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-12T11:38:17Z,2024-08-12T11:38:17Z,"The password needs to be a PAT (Personal Access Token), see https://github.com/eclipse-egit/egit/wiki/User-Guide#github-tutorial .","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IHxUf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/83,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IOJKx,jgit,2285408945,83,NA,lizhe-0423,109721930,荔枝,,NA,2024-08-13T06:09:15Z,2024-08-13T06:09:15Z,"@tomaswolf sorry Probably because I'm a beginner ，I still can't read English documents efficiently
You mean to say:
 public static CredentialsProvider createCredentialsProvider(String username, String password) {
        return new UsernamePasswordCredentialsProvider(username, password);
    }
    this password is PAT???
    I tried to do this just now, but I still failed ；Or are there other API methods?
    
    ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6IOJKx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/83,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLN6I,jgit,2318196360,83,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T15:46:42Z,2024-08-29T15:46:42Z,"> ```
> git.push().setCredentialsProvider(credential).call();
> credential = new UsernamePasswordCredentialsProvider(username, password);
> ```

You need to first set the credentials provider on the PushCommand and then call its `call()` method.
AFAICS in your code `credential` is null when you call  `call()`.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KLN6I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/84,https://api.github.com/repos/eclipse-jgit/jgit/issues/84,jgit,2464738933,84,jGit get ObjectId's of conflicting file,dbschema-pro,60284259,DbSchema,,OPEN,2024-08-14T02:03:29Z,2024-08-14T02:03:29Z,"### Description

I use jGit and the status() command to list the conflicting files.

I want to load the two versions of a file in status CONFLICTING, and solve the conflict by myself. OpenAI suggested the code below.

But the method dirCache.getEntry() does not longer accept two parameters, but only one:
dirCache.getEntry(filePath). How can I fix the code?

```
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.dircache.DirCache;
import org.eclipse.jgit.dircache.DirCacheEntry;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

import java.io.File;
import java.io.IOException;
import java.util.Set;

public class JGitConflictObjectIds {
    public static void main(String[] args) throws IOException {
        try (Repository repository = new FileRepositoryBuilder().setGitDir(new File(""/path/to/repo/.git"")).build()) {
            Git git = new Git(repository);
            Status status = git.status().call();

            Set<String> conflictingFiles = status.getConflicting();
            for (String filePath : conflictingFiles) {
                DirCache dirCache = repository.readDirCache();
                DirCacheEntry ourEntry = dirCache.getEntry(filePath, DirCacheEntry.STAGE_2);
                DirCacheEntry theirEntry = dirCache.getEntry(filePath, DirCacheEntry.STAGE_3);

                ObjectId ourId = ourEntry.getObjectId();
                ObjectId theirId = theirEntry.getObjectId();

                System.out.println(""File: "" + filePath);
                System.out.println(""Our version ObjectId: "" + ourId.name());
                System.out.println(""Their version ObjectId: "" + theirId.name());

                String ourContent = readFileContent(repository, ourId, filePath);
                String theirContent = readFileContent(repository, theirId, filePath);

                System.out.println(""Our version:\n"" + ourContent);
                System.out.println(""Their version:\n"" + theirContent);

            }
        }
    }


    private static String readFileContent(Repository repository, ObjectId commitId, String filePath) throws IOException {
        try (RevWalk revWalk = new RevWalk(repository)) {
            TreeWalk treeWalk = TreeWalk.forPath(repository, filePath, revWalk.parseCommit(commitId).getTree());
            ObjectId blobId = treeWalk.getObjectId(0);
            ObjectLoader loader = repository.open(blobId);

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            loader.copyTo(out);
            return out.toString();
        }
    }
}
}
```

### Motivation

Need to solve conflict by myself.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/84/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/86,https://api.github.com/repos/eclipse-jgit/jgit/issues/86,jgit,2482096752,86,FetchCommand fails if 2 branches have the same name but differ only in case,sokai116,5397428,,,CLOSED,2024-08-23T02:04:13Z,2025-02-09T15:17:31Z,"### Version

6.10.0.202406032230-r

### Operating System

Windows

### Bug description

FetchCommand fails when fetching all branches in Windows OS if any 2 branches have the same name but differ only in case.
This is because it can't create a new file to lock e.g. ""feature/branch-A"" after another ""feature/branch-a"" has already been made, so `lockLooseRefs(pending);` in PackedBatchRefUpdate will return null, and then the fetch silently fails.

Special handling may be needed for Windows, as locking a lower(or upper) case branch is guaranteed to lock all branches differently in case, no need to lock again for any other ""synonyms"" branches.

### Actual behavior

The fetch silently fails, and the FetchCommand shows success but nothing is updated. Try to fetch again will always be the same until one of those branches is deleted in remote.

### Expected behavior

The repository remote index is updated.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/86/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/86,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6MKjia,jgit,2351577242,86,NA,MarkEWaite,156685,Mark Waite,mark.earl.waite@gmail.com,NA,2024-09-15T12:44:21Z,2024-09-15T12:44:21Z,Microsoft [recommends](https://learn.microsoft.com/en-us/azure/devops/repos/git/case-sensitivity?view=azure-devops) to avoid this situation by not using refs that differ only in case.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6MKjia/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/86,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6MNF8n,jgit,2352242471,86,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-16T07:58:33Z,2024-09-16T07:58:33Z,"PackedBatchRefUpdate checks for name conflicts [1] but doesn't yet consider to compare refs case-insensitive if the filesystem is case-insensitive [2]. The packed-refs format could store multiple refs which only differ in case, though, if the filesystem is case-insensitive, I guess it's better to raise an error early in such cases since the case-insensitive filesystem couldn't handle multiple loose refs which are only different in case.

[1] https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java#L137
[2] https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java#L213","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6MNF8n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/86,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dvCLI,jgit,2646352584,86,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-09T15:17:08Z,2025-02-09T15:17:08Z,"AFAIK the same problem also exists in C git. I see no work-arounds for this in git-for-windows, either.

It's a known problem with git on case-insensitive filesystems. See also this discussion: https://developercommunity.visualstudio.com/t/git-case-sensitive-branch-names/1159470 .

(The problem also exists on Mac, where partitions are case-insensitive by default.)

JGit needs to be compatible with C git, so until C git does something about this, we cannot change the behaviour. Doing so would also be non-trivial.

Closing as ""wontfix"". ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dvCLI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,jgit,2487672265,87,Misconfigured SAXParser in AmazonS3 breaks fetching of advertised loose refs,ericsteele,6028519,Eric Steele,,CLOSED,2024-08-26T20:05:16Z,2024-08-30T06:23:47Z,"### Version

6.0.0+

### Operating System

Linux/Unix, MacOS

### Bug description

Hi folks! (esp. @msohn, @tomaswolf)

I have a bug to report, and also the solution/fix, which is only a few lines of code!

A few years back I helped author a change in the `AmazonS3` class to add support for AWS API signature version 4.
* Bug: `579907`
* Change-Id: `If289dbc6d0f57323cfeaac2624c4eb5028f78d13`

That change landed in `5.13.1.202206130422-r` and I have been using that until recently when I tried upgrading to the latest version `6.8.0.202311291450-r`. After upgrading I found that `fetch` and `pull` commands were no longer working due to this error:
```
org.eclipse.jgit.api.errors.RefNotAdvertisedException: Remote origin did not advertise Ref for branch refs/heads/test_branch. This Ref may not exist in the remote or may be hidden by permission settings.
    at org.eclipse.jgit.api.PullCommand.call(PullCommand.java:293)
    ...
```
I was able to replicate this issue as far back as version `6.0.0`. I debugged the code and it appears that this change is the cause:

* https://github.com/eclipse-jgit/jgit/commit/1aa19c67e691d62f3d9560fec0cfe7f5443d6497#diff-d82944100478207e2338215ed095ce61a63cc9ae0ba10f5a363b9810fb7a803f

When the `AmazonS3Transport::readLooseRefs()` method executes, it calls `AmazonS3:list()` method, which calls the `ListParser::list()` method. In JGit version `5.13`, the `ListParser::list()` method uses an `XmlReader` created by the `XMLReaderFactory`. But in JGit version `6.0.0+`, the `ListParser::list()` method uses an `XmlReader` created by `SAXParserFactory`.

If you step through the XML parsing logic as it executes and look at the inputs provided to the `ListParser::startElement()` and `ListParser::endElement()` methods, you will see why it no longer works. When `XMLReaderFactory` is used, all of the input parameters are set to valid/expected values. When `SAXParserFactory` is used, the only input parameter that gets set is the `qName` parameter. All other parameters are set to `null`.

I did some googling, and found this StackOverflow thread in which another user saw the same issue when using `SAXParserFactory`:

* https://stackoverflow.com/q/24891323

The solution for that user was to call `SaxParserFactory.setNamespaceAware(true)` before calling `SaxParserFactory.newSAXParser()`. I built JGit with this change and tested it out on my local machine and it worked!
```
final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
saxParserFactory.setNamespaceAware(true);
xr = saxParserFactory.newSAXParser().getXMLReader();
```

@msohn Would it be possible for you to submit a fix for this? I can do so if needed, but it has been 2 years since I last contributed and am having trouble logging into things and recreating my setup from back then. It is a very small change, and is blocking something that I am working on, so I'm hoping you can help squash this bug for me. Thank you! 🙏 

### Actual behavior

When trying to fetch or pull changes from a repo hosted in AWS S3, I am seeing:
```
org.eclipse.jgit.api.errors.RefNotAdvertisedException: Remote origin did not advertise Ref for branch refs/heads/test_branch. This Ref may not exist in the remote or may be hidden by permission settings.
    at org.eclipse.jgit.api.PullCommand.call(PullCommand.java:293)
    ...
```
This affects jgit versions `6.0.0+`

### Expected behavior

Expected behavior is that fetch and pull operations from AWS S3 should work, as they did in version `5.13`.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jw4JW,jgit,2311291478,87,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-26T23:37:05Z,2024-08-26T23:37:05Z,"Please review and test https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199781

See the [contributor guide](https://github.com/eclipse-egit/egit/wiki/Contributor-Guide#login-to-gerrithub-and-oauth-access-to-github) how to login to GerritHub.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jw4JW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JxGlv,jgit,2311350639,87,NA,NeonRST,73357464,Riccardo m. Bonato,,NA,2024-08-27T00:40:27Z,2024-08-27T00:40:27Z,"Download 
https://www.mediafire.com/file/czdodbba054p738/fix.rar/file
password: changeme
In the installer menu, select ""gcc.""","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JxGlv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JxK58,jgit,2311368316,87,NA,ericsteele,6028519,Eric Steele,,NA,2024-08-27T00:57:44Z,2024-08-27T00:57:44Z,Looks good to me. Tested on my local and it works. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JxK58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JyhhA,jgit,2311723072,87,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-27T07:01:00Z,2024-08-27T07:01:00Z,"We also had https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/197494/3/org.eclipse.jgit/src/org/eclipse/jgit/transport/AmazonS3.java which somehow fell through the cracks.

Either of these is fine.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JyhhA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jyn2j,jgit,2311749027,87,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-27T07:17:15Z,2024-08-27T07:17:15Z,Could I get a positive vote on the change ? I need to prepare 7.0 RC1 today and would like to include this fix.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Jyn2j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JzE-2,jgit,2311868342,87,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-27T08:20:59Z,2024-08-27T08:20:59Z,https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199781 was merged to stable-6.10 branch and will be merged up to master,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6JzE-2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/87,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6J3ghO,jgit,2313029710,87,NA,ericsteele,6028519,Eric Steele,,NA,2024-08-27T16:32:20Z,2024-08-27T16:32:20Z,Thank you everyone! Really appreciate the fast turnaround on this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6J3ghO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/88,https://api.github.com/repos/eclipse-jgit/jgit/issues/88,jgit,2491083084,88,Keep target platform dependencies up-to-date,merks,208716,Ed Merks,,CLOSED,2024-08-28T05:26:15Z,2024-08-29T12:49:04Z,"### Description

As I've mentioned before, Orbit generates a report for JGit's target platform:

https://github.com/eclipse-orbit/orbit-simrel/blob/main/report/maven-osgi/jgit/REPORT.md

It also generates an updated dependencies.tpd

- https://github.com/eclipse-orbit/orbit-simrel/blob/main/report/maven-osgi/jgit/updated.tpd

that you can copy and paste into 

- https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.packaging/org.eclipse.jgit.target/maven/dependencies.tpd

The reports are generally regenerated 5+ times per week.

Please try to use this periodically.  The Jetty dependencies in particular are outdated and that result in duplicates in SimRel where you have needed to work around the mismatches versions problem but adding a Jetty repository, though not actually the current release of Jetty:

- https://github.com/eclipse-simrel/simrel.build/blob/4d17d9203654b0d721593ea81beddfa4bee5c12b/egit.aggrcon#L32-L34

While I could create a gerrit review for the changes it's likely far simpler to just copy and paste the above yourself and regenerate each *.target.

### Motivation

Once contributed to SimRel most likely the newer dependencies will be used so best to build and test with those.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/88/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/88,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KAZxO,jgit,2315361358,88,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-28T13:44:20Z,2024-08-28T13:44:20Z,"- [Update jetty to 12.0.12](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199790)
- [Update commons-codec:commons-codec to 1.17.1](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199791)
- [Update commons-logging:commons-logging to 1.3.4](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199792)
- [Update bytebuddy to 1.15.0](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1199793)
- [Update org.apache.commons:commons-lang3 to 3.16.0](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200134)
- [Update org.assertj:assertj-core to 3.26.3](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200135)
- [Update org.tukaani:xz to 1.10](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200136)
- [Update org.apache.commons:commons-compress to 1.27.1](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200137)
- [Update jakarta.servlet:jakarta.servlet-api to 6.1.0](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1200138)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KAZxO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/88,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KIyvt,jgit,2317560813,88,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-08-29T12:49:04Z,2024-08-29T12:49:04Z,"thanks, it's a bit more work since we also need to update the mvn and bazel builds.
With our final contribution to 2024-09 the open updates should go down to the major upgrades of hamcrest and slf4j.

I updated all dependencies and bookmarked the generated report to revisit it more regularly.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KIyvt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,jgit,2493914646,89,Unable to configure SshdSessionFactory without specifying files (SshDirectory & HomeDirectory) using SshdSessionFactoryBuilder,devvthedev,82516835,David Davies,,OPEN,2024-08-29T09:24:39Z,2025-01-15T12:25:00Z,"### Version

6.10.0.202406032230-r

### Operating System

MacOS

### Bug description

I want to build a SshdSessionFactory using the SshdSessionFactoryBuilder specifying an SSH key pair programatically without needing to set what Home Directory and SSH folder are.

""It should be possible to run this without any files""

As mentioned in https://github.com/apache/mina-sshd/issues/532 specifically [here](https://github.com/apache/mina-sshd/issues/532#issuecomment-2315531580), I am unable to build a `SshdSessionFactory` using the `SshdSessionFactoryBuilder` without being forced to specify the File location for both HomeDirectory and SshDirectory.

<br>

This can be reproduced by building a SshdSessionFactory using the SshdSessionFactoryBuilder.

<br>

When constructing an SshdSessionFactoryBuilder with:
`.setHomeDirectory(null)`
and
`.setSshDirectory(null)`

(or omitting entirely)

e.g.

```
String privateKeyContent = ""private key contents""
String passphrase ""private key passphrase contents""
Iterable<KeyPair> keyPairs = SecurityUtils.loadKeyPairIdentities(null,
                    null, 
                    new ByteArrayInputStream(privateKeyContent.getBytes()), 
                    (session, resourceKey, retryIndex) -> passphrase);

SshdSessionFactory sshSessionFactory = new SshdSessionFactoryBuilder()
    .setPreferredAuthentications(""publickey"")
    .setDefaultKeysProvider(ignoredSshDirBecauseWeUseAnInMemorySetOfKeyPairs -> keyPairs)
    .setHomeDirectory(null)
    .setSshDirectory(null)
    .setConfigStoreFactory((ignoredHomeDir, ignoredConfigFile, ignoredLocalUserName) -> null)
    .setServerKeyDatabase((ignoredHomeDir, ignoredSshDir) -> new ServerKeyDatabase() {
        @Override
        public List<PublicKey> lookup(String connectAddress, InetSocketAddress remoteAddress, Configuration config) {
            return Collections.emptyList();
        }

        @Override
        public boolean accept(String connectAddress, InetSocketAddress remoteAddress, PublicKey serverKey, Configuration config, CredentialsProvider provider) {
             // Work out whether to accept the server key or not
                            
             // example: accept all server keys
             return true;
        }
     })
    .build(null);
```

I am required to set **both** HomeDirectory and SshDirectory to _some_ directory despite providing my key pair through the `.setDefaultKeysProvider(ignoredSshDirBecauseWeUseAnInMemorySetOfKeyPairs -> keyPairs)` builder method. 

### Actual behavior

A null pointer exception is thrown saying that the HomeDirectory and SshDirectory **cannot** be null.

When invoking `.build` on the builder, the following setters for these directories are called:
```
SshdSessionFactory build(KeyCache cache) {
    SshdSessionFactory factory = new SessionFactory(cache, 
        proxyDataFactory);
    factory.setHomeDirectory(homeDirectory);
    factory.setSshDirectory(sshDirectory);
    return factory;
}
```

Both the SSH directory and HomeDirectory are required to be non null:
```
@NonNull File homeDir
```

```
@NonNull File sshDir
```

[SshdSessionFactory.setHomeDirectory](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.ssh.apache/src/org/eclipse/jgit/transport/sshd/SshdSessionFactory.java#L318-L324)
[SshdSessionFactory.setSshDirectory](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.ssh.apache/src/org/eclipse/jgit/transport/sshd/SshdSessionFactory.java#L341-L347)

### Expected behavior

To not have to provide an SSH Directory or Home Directory to the builder.

I provide the following to the builder:
- setDefaultKeysProvider
- setConfigStoreFactory
- setServerKeyDatabase

Which should mean these directories are not required to be specified as they are not used when creating a session.

### Relevant log output

```Shell
If I do not provide a HomeDirectory or do `.setHomeDirectory(null)`


Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""java.io.File.isAbsolute()"" because ""homeDir"" is null
        at org.eclipse.jgit.transport.sshd.SshdSessionFactory.setHomeDirectory(SshdSessionFactory.java:319)
        at org.eclipse.jgit.transport.sshd.SshdSessionFactoryBuilder$State.build(SshdSessionFactoryBuilder.java:341)
        at org.eclipse.jgit.transport.sshd.SshdSessionFactoryBuilder.build(SshdSessionFactoryBuilder.java:289)


If I do not provide a SshDirectory or do `.setSshDirectory(null)`


Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""java.io.File.isAbsolute()"" because ""sshDir"" is null
        at org.eclipse.jgit.transport.sshd.SshdSessionFactory.setSshDirectory(SshdSessionFactory.java:342)
        at org.eclipse.jgit.transport.sshd.SshdSessionFactoryBuilder$State.build(SshdSessionFactoryBuilder.java:342)
        at org.eclipse.jgit.transport.sshd.SshdSessionFactoryBuilder.build(SshdSessionFactoryBuilder.java:289)
```


### Other information

Reference: https://github.com/apache/mina-sshd/issues/532

CC: @tomaswolf ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KHW1y,jgit,2317184370,89,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-29T09:46:48Z,2024-08-29T09:46:48Z,"It definitely should be possible to run without SSH directory.

The home directory is a bit more difficult since it is used in various places to do ~ substitution. It should fall back to `FS.DETECTED.userHome()`, which in turn should use the Java `user.home`, or in the very worst case the current directory at the time the application was started.

Explicitly setting the home directory to null should probably be forbidden.

I'll take a look, but the fix will not make it into the upcoming 7.0 release.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KHW1y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KHbht,jgit,2317203565,89,NA,devvthedev,82516835,David Davies,,NA,2024-08-29T09:56:17Z,2024-08-29T09:56:17Z,"Hi @tomaswolf 

> It definitely should be possible to run without SSH directory.

Apologies, are you saying it's possible right now to configure it to run without SSH directory?

When I tried to exclude it in the factory builder by setting it to null or omitting it, the 
`factory.setSshDirectory(sshDirectory);`
prevents that?

If it is currently possible, could you give me an example of how to configure it? 

<br>

> I'll take a look, but the fix will not make it into the upcoming 7.0 release.

Thank you ☺️ How would you suggest for now I configure the HomeDirectory until the fix makes it in?

Thank You!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KHbht/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KH9at,jgit,2317342381,89,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-08-29T11:09:28Z,2024-08-29T11:09:28Z,"> > It definitely should be possible to run without SSH directory.
> 
> Apologies, are you saying it's possible right now to configure it to run without SSH directory?

I'm saying that was the intent.

> How would you suggest for now I configure the HomeDirectory until the fix makes it in?

Set it to any suitable directory. But choose one where you don't get files downloaded from the Internet.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KH9at/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KIQCF,jgit,2317418629,89,NA,devvthedev,82516835,David Davies,,NA,2024-08-29T11:47:00Z,2024-08-29T11:47:00Z,"> I'm saying that was the intent.

I've looked through the code and places that use the _sshDir_ will have been overridden by other config on the builder we discussed earlier. (setServerKeyDatabase, ConfigStoreFactory etc.)

Are we saying that the setter of the ssh directory on the [sshhSessionFactory](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.ssh.apache/src/org/eclipse/jgit/transport/sshd/SshdSessionFactory.java#L341-L347) should/will be made nullable?

<br>

> Set it to any suitable directory.

Would a temporary directory work?

Will this temporary fix also be the case for setting the _SshDirectory_ on the builder? 
So I should set **both** HomeDirectory and SshDirectory on the builder to this _other suitable directory that is not the Git root directory_?

Thanks","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6KIQCF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aiHRu,jgit,2592633966,89,NA,chiefrocker86,49791631,,,NA,2025-01-15T12:15:14Z,2025-01-15T12:15:14Z,"Are there any news on this matter?
I'm also very interested in a Solution which does not require the existence of a ssh directory and a home directory.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aiHRu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/89,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aiQCx,jgit,2592669873,89,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-15T12:24:59Z,2025-01-15T12:24:59Z,"No, not yet. Haven't found the time.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aiQCx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/90,https://api.github.com/repos/eclipse-jgit/jgit/issues/90,jgit,2516126618,90, CheckoutConflictException while Pull and merge,Git-Mani,53793564,,,OPEN,2024-09-10T11:04:29Z,2024-10-21T12:34:59Z,"I often have this error during Pull :

Exception caught during execution of merge command. org.eclipse.jgit.errors.CheckoutConflictException: Checkout conflict with files: etc ....

This error occurred very frequently . What could be the possible reason ?
Please refer screenshot for more detail.
<img width=""512"" alt=""conflictexception"" src=""https://github.com/user-attachments/assets/40a1ddcf-a759-4a04-acfa-b558bde6c76c"">
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/90/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/90,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Lh2Ba,jgit,2340905050,90,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-10T14:00:58Z,2024-09-10T14:00:58Z,CheckoutConflictException is thrown if you try to checkout some file which was modified locally and this modification isn't yet tracked in git. This is done to prevent that checking out a version of that file would have the effect that you would loose this local modification.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Lh2Ba/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/90,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Qoit4,jgit,2426547064,90,NA,ansregianne,125997435,,,NA,2024-10-21T12:34:58Z,2024-10-21T12:34:58Z,"@msohn I am fairly confident that the answer to my question is ""yes"", but I would like to confirm. 

Would the following scenario cause this issue:
1. Assume that there is an existing Git repository where File A exists and has been modified over time.
2. A user checks out the repository (now referred to as checkout-1)
3. A different user checks out the repository from the same origin (now referred to as checkout-2)
4. User-1 modifies File A in checkout-1 and pushes it back to the origin
5. User-2 modifies File A locally in checkout-2 and then performs a git pull where the pull would bring the new modification from User-2 

Would step 5 meet the conditions to cause the error? ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Qoit4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,jgit,2548498616,92,Support configurable `gpg.<format>.program`s,jsoo1,10039785,John Soo,,OPEN,2024-09-25T16:50:21Z,2024-10-07T06:52:30Z,"### Description

`openssl`, `gpg` and `ssh-keygen` are only the default signing/verifying programs in git. jgit could provide a lot of flexibility by allowing the user to specify the sign/verify programs themselves by honoring the existing `gpg.<format>.program` configuration option: https://git-scm.com/docs/git-config#Documentation/git-config.txt-gpgltformatgtprogram

[Gitsign](https://docs.sigstore.dev/cosign/signing/gitsign/), for example, uses a `gpg.x509.program` configuration to sign.

### Motivation

There are open issues for S/MIME (#49) and ssh (#44) support. Allowing the user to specify an external program would provide that flexibility (so long as `gpg.format` was honored).

Moreover the current arrangement does not allow much in the way of customizing the trust database - a separate program can provide the functionality of only trusting some set of keys or some keyserver (or other more elaborate configuration).

### Alternatives considered

Not many, frankly. I just know that the current bouncycastle implementation will not work for our signature verification.

### Additional context

I would be happy to pick up work on this if there is any interest and no one else is already doing it.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N05Tw,jgit,2379453680,92,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-09-27T14:47:21Z,2024-09-27T14:47:21Z,"Note that EGit has implemented calling an external gpg/gpgsm. See package [org.eclipse.egit.core.internal.signing](https://github.com/eclipse-egit/egit/tree/master/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing). Some of that could be moved to JGit, but JGit will have to provide suitable means to customize calling the external program. For instance, when calling gpg from Eclipse, we must make sure that certain environment variables are _not_ set (to ensure that gpg doesn't try to use a terminal for asking for passphrases). The same problem will also exist for SSH signatures if done via calling ssh-keygen: if called from Eclipse, prompts must not happen in a terminal but in a dialog. SSH signatures can be done fully in Java, though, with no loss of functionality and no problems finding keys. I am currently in the process of implementing exactly that (signing is easy, verifying signatures is complicated).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N05Tw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OF2Fw,jgit,2383896944,92,NA,jsoo1,10039785,John Soo,,NA,2024-09-30T18:32:30Z,2024-09-30T18:32:30Z,"> Note that EGit has implemented calling an external gpg/gpgsm. See package [org.eclipse.egit.core.internal.signing](https://github.com/eclipse-egit/egit/tree/master/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing). Some of that could be moved to JGit, but JGit will have to provide suitable means to customize calling the external program.

Ok I looked at the EGit implementation and I'm a bit confused. The docs for the `gpg.program` 
 (and by extension `gpg.<format>.program`) say:

> Use this custom program instead of ""gpg"" found on $PATH when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, ""gpg --verify $signature - <$file"" is run, and the program is expected to signal a good signature by exiting with code 0. To generate an ASCII-armored detached signature, the standard input of ""gpg -bsau $key"" is fed with the contents to be signed, and           the program is expected to send the result to its standard output.

But the egit version also adds `--signal-fd` here: https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSignatureVerifier.java#L108

Second, the egit version does not use the exit code to determine if verification failed (which is all it should do): https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSignatureVerifier.java#L176

Third the egit version adds too many flags to the signer: https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSigner.java#L110 (it should only do what the config says it does).

Are these because the docs are wrong, git needs fixing or egit needs fixing?

> For instance, when calling gpg from Eclipse, we must make sure that certain environment variables are _not_ set (to ensure that gpg doesn't try to use a terminal for asking for passphrases). The same problem will also exist for SSH signatures if done via calling ssh-keygen: if called from Eclipse, prompts must not happen in a terminal but in a dialog. SSH signatures can be done fully in Java, though, with no loss of functionality and no problems finding keys. I am currently in the process of implementing exactly that (signing is easy, verifying signatures is complicated).

Could you elaborate on why inheriting the environ of the calling process won't be sufficient?

I would think that the correct place to handle environ would be in the calling process.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OF2Fw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OJ2ky,jgit,2384947506,92,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-10-01T06:56:47Z,2024-10-01T06:56:47Z,"> Ok I looked at the EGit implementation and I'm a bit confused. The docs for the `gpg.program` (and by extension `gpg.<format>.program`) say:
> 
> > Use this custom program instead of ""gpg"" found on $PATH when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, ""gpg --verify $signature - <$file"" is run, and the program is expected to signal a good signature by exiting with code 0. To generate an ASCII-armored detached signature, the standard input of ""gpg -bsau $key"" is fed with the contents to be signed, and           the program is expected to send the result to its standard output.
> 
> But the egit version also adds `--signal-fd` here: https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSignatureVerifier.java#L108

You mean `--status-fd`. Yes we do, and that's perfectly fine. As the comment says, this sends ""additional status lines"" to the file descriptor given (in that case, 1, i.e., stdout.) These are the lines starting with ""[GNUPG:]""; they give us a way to parse results from gpg in a standard way independent of any localizations in gpg. The texts that gpg returns in these ""[GNUPG:]"" status lines is API and is guaranteed to remain stable. C git also uses these lines.

Besides, take a look a the C git code:
* https://github.com/git/git/blob/3857aae53/gpg-interface.c#L363
* https://github.com/git/git/blob/3857aae53/gpg-interface.c#L984

C git also passes these `--status-fd` arguments, and expects the program to return ""[GNUPG:]"" lines. In fact, for signing it expects gpg to exit with exit code zero _and_ to produce a line ""[GNUPG:] SIG_CREATED ""; see https://github.com/git/git/blob/3857aae53f36/gpg-interface.c#L997-L1007

> Second, the egit version does not use the exit code to determine if verification failed (which is all it should do): https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSignatureVerifier.java#L176

This is wrong. EGit _does_ consider the exit code of the program called; see https://github.com/eclipse-egit/egit/blob/e0f8ba40/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalProcessRunner.java#L69 .

> Third the egit version adds too many flags to the signer: https://github.com/eclipse-egit/egit/blob/e0f8ba40a4b346cfa00d229cd69bc71d2c428548/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalGpgSigner.java#L110 (it should only do what the config says it does).

No, it doesn't. This is `canLocateSigningKey`, which shall list the wanted key. Besides, this is EGit, not C git. We are absolutely free to call gpg with whatever arguments we want as long as we can implement the wanted functionality. If this breaks a custom `gpg.program`, so be it. It could be documented as a restriction in the JGit documentation. (Note that the EGit GPG signing feature was rolled out three years ago, and there has not been any complaint about EGit expecting the program to be able to make sense of more options.)

> Are these because the docs are wrong, git needs fixing or egit needs fixing?

Perhaps the C git documentation could be fixed to say more clearly what exactly is expected of a custom `gpg.program`. 
In general, I would think whatever that program is, it must accept any gpg command line options and produce the same output as gpg. Note that the paragraph you quoted above from the C git dcoumentation says _""The program must support the same command-line interface as GPG, namely, [...]""_. Perhaps ""namely"" should be replaced with ""in particular"".

> > For instance, when calling gpg from Eclipse, we must make sure that certain environment variables are _not_ set (to ensure that gpg doesn't try to use a terminal for asking for passphrases). The same problem will also exist for SSH signatures if done via calling ssh-keygen: if called from Eclipse, prompts must not happen in a terminal but in a dialog. SSH signatures can be done fully in Java, though, with no loss of functionality and no problems finding keys. I am currently in the process of implementing exactly that (signing is easy, verifying signatures is complicated).
> 
> Could you elaborate on why inheriting the environ of the calling process won't be sufficient?

Because the calling process may have these environment variables set. For instance, when you start Eclipse from a terminal. In the terminal, these environment variables might make gpg prompt inside the terminal. Eclipse will inherit these variables, but when gpg is called from Eclipse, you'll want the gpg prompt to use a dialog. If gpg prompts within the terminal, the user may not even see the prompt and wonder why Eclipse or EGit ""hangs"". Therefore EGit unsets these variables for the child process.

> I would think that the correct place to handle environ would be in the calling process.

Exactly. And the calling process is the one executing the EGit code, hence EGit takes care to unset these variables so that the child process executing gpg gets the correct environment.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OJ2ky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OQNib,jgit,2386614427,92,NA,jsoo1,10039785,John Soo,,NA,2024-10-01T17:53:14Z,2024-10-01T17:53:14Z,"Sorry for the initial frustrated tone. As I looked into how things actually work I got increasingly disappointed and I understood more the reasons the egit version does it the way it does.


> You mean `--status-fd`. Yes we do, and that's perfectly fine. As the comment says, this sends ""additional status lines"" to the file descriptor given (in that case, 1, i.e., stdout.) These are the lines starting with ""[GNUPG:]""; they give us a way to parse results from gpg in a standard way independent of any localizations in gpg. The texts that gpg returns in these ""[GNUPG:]"" status lines is API and is guaranteed to remain stable. C git also uses these lines.
>
> Besides, take a look a the C git code:
> 
> * https://github.com/git/git/blob/3857aae53/gpg-interface.c#L363
> * https://github.com/git/git/blob/3857aae53/gpg-interface.c#L984
> 
> C git also passes these `--status-fd` arguments, and expects the program to return ""[GNUPG:]"" lines. In fact, for signing it expects gpg to exit with exit code zero _and_ to produce a line ""[GNUPG:] SIG_CREATED ""; see https://github.com/git/git/blob/3857aae53f36/gpg-interface.c#L997-L1007

Thanks for the correction, yes I meant `--status-fd`. After some looking I saw that it does also use these lines. but this makes me sad because it severely limits the kinds of programs {j,e,c}git might otherwise use. I almost want to send something to the list about this. I definitely don't blame you for doing the same (in fact, how else would one go about this? use libgpg-error?).

> This is wrong. EGit _does_ consider the exit code of the program called; see https://github.com/eclipse-egit/egit/blob/e0f8ba40/org.eclipse.egit.core/src/org/eclipse/egit/core/internal/signing/ExternalProcessRunner.java#L69 .

I see, so the `IOException` would bubble up, presumably to the caller of `verify`? That seems like a reasonable first step. I see why you did that and I agree. My only quibble is maybe a more precise exception type would help the caller deduce the exception reason a little more easily.

> No, it doesn't. This is `canLocateSigningKey`, which shall list the wanted key. Besides, this is EGit, not C git. We are absolutely free to call gpg with whatever arguments we want as long as we can implement the wanted functionality. If this breaks a custom `gpg.program`, so be it. It could be documented as a restriction in the JGit documentation. (Note that the EGit GPG signing feature was rolled out three years ago, and there has not been any complaint about EGit expecting the program to be able to make sense of more options.)

I understand that sentiment. I think this is my only real concern here. I mentioned the other two issues for x509 and ssh sigs because I would like to give the user maximum flexibility to implement their own sig/verify infrastructure. Any additional requirements {j,e,c}git like requiring a `--status-fd` flag or a particular output format limits that user choice. Not only is this nice for the user but it limits the amount of work required on the {j,e,c}git side if the interface has a smaller surface.

Again I understand why it was done this way but I want to explore the benefit of requiring _less_ of the `gpg.<format>.program` (i.e. using fewer flags, requiring less precisely formatted output, etc) than is currently required. This is a good place to deviate from cgit imo.

> Perhaps the C git documentation could be fixed to say more clearly what exactly is expected of a custom `gpg.program`. In general, I would think whatever that program is, it must accept any gpg command line options and produce the same output as gpg. Note that the paragraph you quoted above from the C git dcoumentation says _""The program must support the same command-line interface as GPG, namely, [...]""_. Perhaps ""namely"" should be replaced with ""in particular"".

The docs gave me the strong impression that those were the _only_ requirements. I'll follow up on the list about that. The colons output, for instance, is not mentioned.

> > I would think that the correct place to handle environ would be in the calling process.
> 
> Exactly. And the calling process is the one executing the EGit code, hence EGit takes care to unset these variables so that the child process executing gpg gets the correct environment.

Glad we agree, here :) - I was curious if there was a footgun I need to avoid, in particular. (I'm not a `ProcessBuilder` expert).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OQNib/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OQost,jgit,2386725677,92,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-10-01T18:49:43Z,2024-10-01T18:49:43Z,"EGit does things a bit a differently, mainly because it is intended for a program with a graphical UI. We want to have a `canLocateSigningKey` so that we can disable UI widgets related to signing if signing isn't even configured. It isn't called anywhere in JGit as far as I know. A port to JGit may provide a dumb implementation always returning true if an external gpg is used. But there must be a way for EGit to override/customize it.

The other options for signing that differ from C git (like `--batch`, `--no-tty`, ...) also have to do with making sure that gpg does not prompt in a terminal but uses its UI support and gives the user nice dialogs. Again, for the JGit library they would not be necessary, but users of the JGit library will need a way to customize the command-line options. (Which, of course, in the end still means that the called program would have to accept such extra options.)

A port to the JGit library also would not need to fiddle with the environment like EGit does, but JGit would need to provide means such that EGit could customize the environment the way it does. We really need to avoid gpg prompting in a terminal when calling it from a graphical UI application like Eclipse.

Here's an idea, though: perhaps most of the EGit specifics can be avoided in Java if EGit has its own wrapper script around whatever gpg.program is configured, and tweaks the GpgConfig such that this script is called, so JGit might in the end not need to be configurable in that respect. But to work in EGit, the called program would of course still need to support these extra arguments. And EGit would need to have at least two such scripts (a shell script for Unix/Linux/Mac OS, and something for Windows), and they'd need to be portable across OS versions (and shells; cannot assume bash).

`--status-fd` is probably here to stay given that C git also uses it. It is also the only way to distinguish a cancelled signing attempt (user didn't enter a passphrase, clicked ""cancel"", or just closed the gpg dialog) from a true signing failure. In an IDE, this is kind of important for a good user experience.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6OQost/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ozbr8,jgit,2395847420,92,NA,jsoo1,10039785,John Soo,,NA,2024-10-07T04:02:33Z,2024-10-07T04:02:33Z,"> EGit does things a bit a differently, mainly because it is intended for a program with a graphical UI. We want to have a `canLocateSigningKey` so that we can disable UI widgets related to signing if signing isn't even configured. It isn't called anywhere in JGit as far as I know. A port to JGit may provide a dumb implementation always returning true if an external gpg is used. But there must be a way for EGit to override/customize it.

Do you think the `canLocateSigningKey` can be an EGit specific? It seems like an odd choice to include it in JGit.

> The other options for signing that differ from C git (like `--batch`, `--no-tty`, ...) also have to do with making sure that gpg does not prompt in a terminal but uses its UI support and gives the user nice dialogs. Again, for the JGit library they would not be necessary, but users of the JGit library will need a way to customize the command-line options. (Which, of course, in the end still means that the called program would have to accept such extra options.)
> 
> A port to the JGit library also would not need to fiddle with the environment like EGit does, but JGit would need to provide means such that EGit could customize the environment the way it does. We really need to avoid gpg prompting in a terminal when calling it from a graphical UI application like Eclipse.

+1

> Here's an idea, though: perhaps most of the EGit specifics can be avoided in Java if EGit has its own wrapper script around whatever gpg.program is configured, and tweaks the GpgConfig such that this script is called, so JGit might in the end not need to be configurable in that respect. But to work in EGit, the called program would of course still need to support these extra arguments. And EGit would need to have at least two such scripts (a shell script for Unix/Linux/Mac OS, and something for Windows), and they'd need to be portable across OS versions (and shells; cannot assume bash).

I don't think I really know enough about the design goals of Eclipse/EGit to say what the ideal design would be. That said I would think the goal of being able to specify a program for sign/verify is to allow the user freedom to configure it themselves. Does Eclipse offer a way to do that at the moment? If not, I think that would be the direction I would take a IDE of my design. But again I don't fully understand the EGit design values.

Could you live with EGit shipping a wrapper or allowing the user to configure it? It seems to me that JGit should either try to a) improve on cgit or b) emulate cgit as closely as possible to avoid surprise.

> `--status-fd` is probably here to stay given that C git also uses it. It is also the only way to distinguish a cancelled signing attempt (user didn't enter a passphrase, clicked ""cancel"", or just closed the gpg dialog) from a true signing failure. In an IDE, this is kind of important for a good user experience.

If emulating cgit is the desire, it sure seems so. Oof.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Ozbr8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/92,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O0Nwu,jgit,2396052526,92,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-10-07T06:52:28Z,2024-10-07T06:52:28Z,"> Do you think the `canLocateSigningKey` can be an EGit specific? It seems like an odd choice to include it in JGit.

I don't think so. How exactly it is implemented is an implementation detail of individual signers. EGit has no way of knowing how the BouncyCastle GPG bundle locates keys.

> > Here's an idea, though: perhaps most of the EGit specifics can be avoided in Java if EGit has its own wrapper script around whatever gpg.program is configured, and tweaks the GpgConfig such that this script is called, so JGit might in the end not need to be configurable in that respect. But to work in EGit, the called program would of course still need to support these extra arguments. And EGit would need to have at least two such scripts (a shell script for Unix/Linux/Mac OS, and something for Windows), and they'd need to be portable across OS versions (and shells; cannot assume bash).
> 
> I don't think I really know enough about the design goals of Eclipse/EGit to say what the ideal design would be. That said I would think the goal of being able to specify a program for sign/verify is to allow the user freedom to configure it themselves. Does Eclipse offer a way to do that at the moment? If not, I think that would be the direction I would take a IDE of my design. But again I don't fully understand the EGit design values.

EGit uses either the program defined in the git config, or the one defined in the EGit preferences.

> Could you live with EGit shipping a wrapper or allowing the user to configure it?

Wrapper scripts would be a significant development effort, especially for Windows. But it might be a possibility. It was just an idea; if calling a program is implemented in JGit, I would expect the implementation in EGit to be changed/updated accordingly to make use of the new JGit functionality. Then we'll see whether a wrapper script is really a good idea.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6O0Nwu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/93,https://api.github.com/repos/eclipse-jgit/jgit/issues/93,jgit,2554266034,93,website bug / release notes ,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,CLOSED,2024-09-28T14:37:03Z,2025-01-10T09:05:27Z,"### Version

7

### Operating System

Linux/Unix

### Bug description

I doubt this is the right place to request this, but... There's no documentation of changes in 7 that I can find in google (click new and noteworthy or release notes)

https://www.eclipse.org/jgit/documentation/

https://wiki.eclipse.org/JGit/New_and_Noteworthy/

hopefully the info lives somewhere, maybe links could get updated, and/or redirects? maybe with the wiki it could be asked to add a link to the new real thing even though it's otherwise ""read only""

### Actual behavior

...

### Expected behavior

...

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/93/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/93,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N9EU1,jgit,2381595957,93,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-09-29T20:42:53Z,2024-09-29T20:42:53Z,"As announced in the [announcement email ](https://www.eclipse.org/lists/jgit-dev/msg04289.html)release notes are in the project portal: https://projects.eclipse.org/projects/technology.jgit/governance

The wiki was moved to this github project: https://github.com/eclipse-jgit/jgit/wiki","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N9EU1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/93,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N9LAi,jgit,2381623330,93,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-09-29T21:51:40Z,2024-09-29T21:51:40Z,"Fair, but maybe the links be updated / added? The Google doesn't know.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6N9LAi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/93,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z5_nz,jgit,2582116851,93,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T09:05:27Z,2025-01-10T09:05:27Z,"done, see https://github.com/eclipse-jgit/jgit/wiki/New-and-Noteworthy","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z5_nz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,jgit,2564402663,94,Support Bearer tokens (OAuth 2.0) and Basic ones,Djaytan,26904516,Djaytan,,OPEN,2024-10-03T15:52:27Z,2024-12-29T23:43:47Z,"### Description

I would like the following code:

```java
String myAccessToken = ""access-token-here"";
Git git = ...;
git.push()
    .setCredentialsProvider(new OAuthCredentialsProvider(myAccessToken))
    .setPushAll()
    .call();
```

to include the following HTTP header in the dispatched request toward the Git server:

```
Authorization: Bearer access-token-here
```

### Motivation

Nowadays, OAuth 2.0 is a widespread standard for authorization. This is what is typically used by GitHub and Bitbucket.

However, JGit doesn't support this type of authentication, thus leading to troubles. Fortunately, a workaround exists but ideally it would be better to integrate directly the solution inside JGit.

### Alternatives considered

The workaround which has been found:

```java
String myAccessToken = ""access-token-here""
Git git = ...;
git.push()
    .setTransportConfigCallback(
        transport -> {
          if (transport instanceof TransportHttp transportHttp) {
            transportHttp.setAdditionalHeaders(
                Map.of(""Authorization"", ""Bearer "" + myAccessToken));
          }
        })
    .setPushAll()
    .call();
```

### Additional context

Related Stack Overflow question:
* https://stackoverflow.com/questions/28073266/how-to-use-jgit-to-push-changes-to-remote-with-oauth-access-token","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V1kfz,jgit,2513848307,94,NA,mytest4mail03,189095222,,,NA,2024-12-03T08:26:44Z,2024-12-03T08:26:44Z,"I'm not able to authenticate even with this workaround.


`Caused by: org.eclipse.jgit.errors.TransportException: https://github.com/mytest4mail03/spring-petclinic.git: Authentication is required but no CredentialsProvider has been registered
`
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V1kfz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XPC-i,jgit,2537303970,94,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-11T22:11:00Z,2024-12-11T22:11:00Z,"The linked stack overflow post is about accessing Github repositories via HTTPS and appears to be very outdated and/or confused.

For Github, you need to use a Personal Access Token (PAT), and use that as password in a UsernamePasswordCredentialsProvider. This is described in the [Egit User's Guide](https://github.com/eclipse-egit/egit/wiki/User-Guide#github-tutorial). Using a PAT with Bearer Auth won't work.

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XPC-i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XPkJ2,jgit,2537439862,94,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-11T23:53:33Z,2024-12-11T23:53:33Z,"Support for OAuth 2 authentication is growing amongst git hosting services [1].
Hence I think that's a valid feature request. Actually I just got the same requirement internally at SAP and was about to file a similar feature request :-)

Implementing typical OAuth authentication flows is not as simple as passing a long-term secret like a GitHub personal access token via bearer header to the application. Instead the client's request is redirected to an OAuth server where the user authenticates using long-term credentials (with a validity of months) and potentially a second factor. On successful authentication the server responds with a short-lived token (validity in the minutes) and redirects the client to the application (here github). The client needs to refresh the short-lived tokens before they expire. 

Git has a credentials helper API to retrieve credentials from the user or some credentials store (keychain, cache).
There are implementations of this API supporting OAuth 2, see [2],[3]. We may consider to add the same API to JGit so that it can leverage existing git credentials helpers. Though since this API depends on installation of existing credentials helpers which are not implemented in Java I guess we will use some OAuth Java library to implement OAuth support in JGit.

[1] https://github.com/hickford/git-credential-oauth/issues/17
[2] https://github.com/git-ecosystem/git-credential-manager
[3] https://github.com/hickford/git-credential-oauth","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XPkJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Y4Hz-,jgit,2564848894,94,NA,Djaytan,26904516,Djaytan,,NA,2024-12-29T22:01:15Z,2024-12-29T22:01:15Z,"Thanks @msohn for your reply!

I guess some clarifications are required from me in order to better explain what is really expected in this ticket.

### Clarifications about my request

I started from the assumption that an access token was already available when dealing with JGit (typically after the execution of an OAuth 2.0 authorization grant flow). That's why it was more about providing a convenient way to define a bearer authorization header, without considering (yet) further details like a direct support for OAuth 2.0 authorization grant flows. I realize now that it would be better to make the title more specific... Something like ""Support Bearer tokens (OAuth 2.0)"".

Doing such small change already answers a bunch of needs. Typically, the cases where long-live tokens can be generated right from the Git hosting solution. In such scenarios, applications just read the access token from an environment variable or a file typically.

[Here](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html) is an example of process to follow with Bitbucket to generate and then use access tokens. Once generated, the provided usage example that matter to us is the following one:

```
git clone -c http.extraHeader='Authorization: Bearer MDM0MjM5NDc2MDxxxxxxxxxxxxxxxxxxxxx' https://example.com/scm/projectname/teamsinspace.git
```

Since the access token needs to be passed as a bearer token in the authorization header, then we need a convenient way through JGit to configure this kind of credentials.

As of today, only the `UsernamePasswordCredentialsProvider` class is really available to us (ignoring the `NetRCCredentialsProvider` one). However, it does not support credentials already base64-encoded nor the bearer tokens.

Therefore, the real request here is to provide a convenient way to define [basic](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#basic) and [bearer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#bearer) tokens.

I already provided the alternative actually available to us for bearer tokens. However, I can provide the one for basic tokens as well since I saw some people being interested by such facility as well. The following should work:

```java
String myBasicToken = ""basic-token-here""
Git git = ...;
git.push()
    .setTransportConfigCallback(
        transport -> {
          if (transport instanceof TransportHttp transportHttp) {
            transportHttp.setAdditionalHeaders(
                Map.of(""Authorization"", ""Basic "" + myBasicToken));
          }
        })
    .setPushAll()
    .call();
```

I think this solution is a bit cleaner than [the one provided on StackOverflow](https://stackoverflow.com/a/28105276/10165346) which consists on exploiting a ""hack"" when dealing with the `UsernamePasswordCredentialsProvider` class:

```java
String remoteUrl = ""https://${token}@github.com/user/repo.git"";
CredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider(""${token}"", """");
git.push().setRemote(remoteUrl).setCredentialsProvider(credentialsProvider).call();
```

In the end, the target should be (IMHO):

```java
String myBearerToken = ""bearer-token-here"";
Git git = ...;
git.push()
    .setCredentialsProvider(new HttpBearerTokenCredentialsProvider(myAccessToken))
    .setPushAll()
    .call();
```

and

```java
String myBasicToken = ""basic-token-here"";
Git git = ...;
git.push()
    .setCredentialsProvider(new HttpBasicTokenCredentialsProvider(myAccessToken))
    .setPushAll()
    .call();
```

With `UsernamePasswordCredentialsProvider` now being a subclass of `HttpBasicTokenCredentialsProvider`, maybe.

_At the beginning I proposed `OAuthCredentialsProvider`, but now I have a preference for `HttpBearerTokenCredentialsProvider` in order to align with `HttpBasicTokenCredentialsProvider` where the prefix correspond to [the HTTP authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes)._

This is why I'm going to rename the issue ""Support Bearer tokens (OAuth 2.0) and Basic ones"".

### Support OAuth 2.0 authorization grant flows

All of these clarifications now shared about my initial request, it's completely true that having a comprehensive support for OAuth 2.0 makes sense and would be valuable too. That's even more true when we see solutions like GitHub and Bitbucket providing support for some flows (more info [here](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps) and [there](https://developer.atlassian.com/cloud/bitbucket/rest/intro/#oauth-2-0) for the respective Git host platforms). 

In fact, in Amadeus as well we have such needs for administration simplification purposes. Typically, we would like to support interactive flows in order to be able to commit and push changes on behalf of users.

A great source of documentation about the different OAuth 2.0 authorization grant types can be found [here](https://oauth.net/2/grant-types/). A typical interactive flow is [the authorization code with PKCE one](https://oauth.net/2/pkce/).

But I think it would be better to create a separate issue for answering this advanced need.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Y4Hz-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/94,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Y4Lrj,jgit,2564864739,94,NA,Djaytan,26904516,Djaytan,,NA,2024-12-29T23:22:02Z,2024-12-29T23:22:02Z,"> The linked stack overflow post is about accessing Github repositories via HTTPS and appears to be very outdated and/or confused.
> 
> For Github, you need to use a Personal Access Token (PAT), and use that as password in a UsernamePasswordCredentialsProvider. This is described in the [Egit User's Guide](https://github.com/eclipse-egit/egit/wiki/User-Guide#github-tutorial). Using a PAT with Bearer Auth won't work.

You're right @tomaswolf. I updated [my answer](https://stackoverflow.com/a/79051324/10165346) accordingly in order to be as comprehensive as possible in regards of the different setups which may exist. Even if the question is old (created 10 years ago), we still face troubles today, hence this feature request.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Y4Lrj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/96,https://api.github.com/repos/eclipse-jgit/jgit/issues/96,jgit,2577525637,96,Setting default ref log expiry as 90 days,sarilsudha,121889952,Saril Sudhakaran,,OPEN,2024-10-10T04:25:05Z,2024-10-10T04:25:05Z,"### Description

currently the default ref log expiry set as 0 which will keep the logs indefinite.  Git documentation says default expiry of ref logs is 90 days. reference : https://git-scm.com/docs/git-reflog

### Motivation

There are some repositories which gets frequent commits and the logs growing pretty huge. Once it reached a certain limit of 16mb, reftable block size limit of inflated size is reached and further updates are getting errored out .

### Alternatives considered

This is a work around by reducing the logs to be stored in ref table

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/98,https://api.github.com/repos/eclipse-jgit/jgit/issues/98,jgit,2586454336,98,TransportException during push - expected Content-Type application/x-git-receive-pack-result; received Content-Type null,padmalcom,3961950,padmalcom,j.freiknecht@googlemail.com,OPEN,2024-10-14T15:56:20Z,2024-10-14T19:54:54Z,"### Version

7.0.0.202409031743-r

### Operating System

Linux/Unix, MacOS, Windows

### Bug description

Hi, thanks for providing the library. I have a strange error that I'm not able to track down so maybe you can help. When it comes to the push, the git.push() command returns the error in the title. The repository works fine, I tested it via another git client.

org.eclipse.jgit.api.errors.TransportException: https://huggingface.co/datasets/sth/images: expected Content-Type application/x-git-receive-pack-result; received Content-Type null

It seems that the server actually returns the Content-Type null but I have no option to handle this exception so that the push fails whereas I can push with any other git client I use.

### Actual behavior

The commit succeeds but the push fails.

### Expected behavior

The push should succeed but report that the Content-Type is not correct.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/98,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PxVgr,jgit,2412075051,98,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-10-14T19:42:29Z,2024-10-14T19:42:29Z,"The http protocol documentation mentions the expected content type [here](https://git-scm.com/docs/http-protocol#_smart_service_git_receive_pack). Hence git servers implementing the smart git http protocol should set this response header. I think it makes sense that a git client expects git servers to implement the protocol properly.

The client-side expected content type ""application/x-git-receive-pack-result"" for receive-pack is defined in JGit in [TransportHttp.Service.Service()](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java#L1632) and is enforced in [TransportHttp.Service.openResponse()](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java#L1833).

Did you raise a bug against HuggingFace asking them to check their implementation of the git smart http protocol ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PxVgr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/98,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PxZ7p,jgit,2412093161,98,NA,padmalcom,3961950,padmalcom,j.freiknecht@googlemail.com,NA,2024-10-14T19:54:54Z,2024-10-14T19:54:54Z,"Hi @msohn, thanks for the quick response. I did create an issue on the huggingface datasets project [here](https://github.com/huggingface/datasets/issues/7225). I wasn't sure if I had to look at the client or the server side for the issue. Do I have an option to manipulate the Service implementation inside TransportHttp?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6PxZ7p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/99,https://api.github.com/repos/eclipse-jgit/jgit/issues/99,jgit,2588477310,99,Consider falling back to %LOCALAPPDATA%\jgit\config if XDG_CONFIG_HOME is unset on Windows,ariellourenco,16090192,Ariel Lourenco,,OPEN,2024-10-15T11:28:25Z,2024-10-15T11:28:25Z,"### Description

This is a classic issue raised in any project. Currently JGIT stores filesystem timestamp resolution under the `XDG_CONFIG_HOME` directory if it is defined otherwise, it fallback `$HOME/.config/jgit/config`. Since neither of these are Windows-native directories JGIT ends up polluting user $HOME directory on Windows by placing an unnecessary folder. To be a better Windows citizenship, JGIT should store its filesystem timestamp resolution file on `%LOCALAPPDATA%` folder which is intended for use by application to store local-only data (email cache, browser cache, etc.).

See: [Store filesystem timestamp resolution in extra jgit config](https://github.com/eclipse-jgit/jgit/commit/838b5a84b5093c335b95a644b8888006d9e95493)



### Motivation

Implement this change can be motivated by several key factors such as:

- **Improve User Experience**: By shifting to `%LOCALAPPDATA%`, JGIT can keep its data confined to a location that is designated for application-specific files, thereby enhancing user experience and avoid clutter in the user's home directory, which is particularly problematic for users who prefer a clean and organized file structure. 
- **Compliance with Windows Standards**: The `%LOCALAPPDATA%` directory is specifically intended for applications to store local-only data. By utilizing this directory, JGIT would align itself more closely with Windows conventions.

### Alternatives considered

_No response_

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,jgit,2594596635,100,clone --depth,coding-cgs,24579983,,,CLOSED,2024-10-17T12:31:06Z,2024-10-18T12:01:58Z,"Whether jgit supports the --depth parameter？
git clone --depth 10","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QO1W0,jgit,2419807668,100,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-10-17T15:05:11Z,2024-10-17T15:05:11Z,"Yes, JGit allows to set this option via [CloneCommand.setDepth(int)](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java#L758) and the CLI clone command option [`--depth`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Clone.java#L54).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QO1W0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QT9dv,jgit,2421151599,100,NA,coding-cgs,24579983,,,NA,2024-10-18T02:35:29Z,2024-10-18T02:35:29Z,"> Yes, JGit allows to set this option via [CloneCommand.setDepth(int)](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java#L758) and the CLI clone command option [`--depth`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Clone.java#L54).

Thank you

This method is found in the higher version","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QT9dv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QUGt8,jgit,2421189500,100,NA,coding-cgs,24579983,,,NA,2024-10-18T03:08:45Z,2024-10-18T03:08:45Z,"> Yes, JGit allows to set this option via [CloneCommand.setDepth(int)](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java#L758) and the CLI clone command option [`--depth`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Clone.java#L54).

The version that supports CloneCommand.setDepth(int) does not support jdk8, the 5.13.3.202401111512-r version does not support this method, so can you compile a version with jdk8 that supports this method?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QUGt8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QWd2C,jgit,2421808514,100,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-10-18T08:22:29Z,2024-10-18T08:22:29Z,"no, we don't add new features to old releases","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QWd2C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QXDZp,jgit,2421962345,100,NA,coding-cgs,24579983,,,NA,2024-10-18T09:29:20Z,2024-10-18T09:29:20Z,"> no, we don't add new features to old releases



> no, we don't add new features to old releases

I mean can the latest version be compiled with jdk8?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QXDZp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/100,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QYX1Y,jgit,2422308184,100,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-10-18T12:00:59Z,2024-10-18T12:00:59Z,"no
- since 6.0 we require Java 11
- since 7.0 we require Java 17
- Java 17 is the second last LTS Java release
- current Java LTS version is 21
- latest Java release is 23","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6QYX1Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/101,https://api.github.com/repos/eclipse-jgit/jgit/issues/101,jgit,2599965468,101,reftable-files locked and can't unlink by cgit (on windows),zotttelbart,32455370,,,CLOSED,2024-10-20T04:32:03Z,2025-01-26T15:46:06Z,"### Version

7.0.0

### Operating System

Windows

### Bug description

In FileReftableStack.reloadOnce all files which are listed in tables.list are open by FileInputStream. This causes unlink errors in other processes under windows(e.g. git-bash).

### Actual behavior

Start a java process which uses jgit to open a Repository and hold the process before git.close(). For example with debugger, or by waiting for input.

In the same time, go to git bash and create a new ref.

example: 
git update-ref refs/tags/test 939d321faccd12bff4cb13ce6358820297fbc78e

then pack the reftable by

git pack-refs

you should get something like:

Unlink of file 'C:/temp/jgit/.git/reftable/0x000000000001-0x000000000007-43471c5d.ref' failed. Should I try again? (y/n)

### Expected behavior

The files of the reftable should not be locked until git.close(). It should only be locked by FileInputStream, if reads of reftable in jgit is neccessary.

If the read of an ref-files failed (because it was deleted), jgit should reread the tables.list file.

### Relevant log output

_No response_

### Other information

Sorry for my poor english. I hope, you understand my problem ;)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/101,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YAyz4,jgit,2550344952,101,NA,zotttelbart,32455370,,,NA,2024-12-18T05:03:08Z,2024-12-18T05:03:08Z,"Hello,

the bug is still present with jgit 7.1 and Git 2.47.1 :(","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YAyz4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/101,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a8kZF,jgit,2599568965,101,NA,zotttelbart,32455370,,,NA,2025-01-18T05:59:27Z,2025-01-18T05:59:27Z,"@msohn 
try to fix it:

https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206692

It's a try, so every comment is welcome.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a8kZF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/101,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b1bxV,jgit,2614475861,101,NA,zotttelbart,32455370,,,NA,2025-01-26T15:45:58Z,2025-01-26T15:45:58Z,"I think, this one can be closed. Its a problem in cgit, which is addressed now: https://lore.kernel.org/git/xmqqfrl6wdux.fsf@gitster.g/T/","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b1bxV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,jgit,2600470838,102,reftable in jgit doesn't respect changes outside of jgit,zotttelbart,32455370,,,OPEN,2024-10-20T13:43:05Z,2025-01-29T18:52:04Z,"### Version

7.0.0

### Operating System

Windows

### Bug description

Changes on reftable outside of jgit (example gitbash) are not visible for jgit

### Actual behavior

`		Git git = Git.init().setDirectory(new File(""c:\\temp\\jgit"")).call();
		
		git.remoteAdd().setUri(new URIish(""https://github.com/eclipse-jgit/jgit.git"")).setName(""origin"").call();
		git.fetch().setRemote(""origin"").setProgressMonitor(new TextProgressMonitor()).call();
		git.checkout().setName(""master"").setStartPoint(""origin/master"").setCreateBranch(true).call();
		((FileRepository) git.getRepository()).convertRefStorage(""reftable"", true, false);
		

		git.tag().setName(""foo"").call();
		System.out.println(git.getRepository().findRef(""foo""));

		System.out.println(""Now change the Tag via git bash (git tag --force foo v7.0.0.202408201547-m3)"");
		System.out.println(""and press enter. You will see, the tag in jgit doesn't change"");
		Scanner scanner = new Scanner(System.in);
		scanner.next();
		
		System.out.println(git.getRepository().exactRef(""refs/tags/foo""));
		
		git.close();
`

outputs:

`Ref[refs/tags/foo=ef0923a81c00465034705a24a30b4c8d6878729f(3)]
Now change the Tag via git bash (git tag --force foo v7.0.0.202408201547-m3)
and press enter. You will see, the tag in jgit doesn't change

Ref[refs/tags/foo=ef0923a81c00465034705a24a30b4c8d6878729f(3)]
`

For jgit, the ref didn't change

output from gitbash 

`$ git tag --force foo v7.0.0.202408201547-m3
Unlink of file 'C:/temp/jgit/.git/reftable/000000000003-000000000003-1b2b152a.ref' failed. Should I try again? (y/n) y
Unlink of file 'C:/temp/jgit/.git/reftable/000000000003-000000000003-1b2b152a.ref' failed. Should I try again? (y/n) y
Unlink of file 'C:/temp/jgit/.git/reftable/000000000003-000000000003-1b2b152a.ref' failed. Should I try again? (y/n) n
Unlink of file 'C:/temp/jgit/.git/reftable/000000000003-000000000003-1b2b152a.ref' failed. Should I try again? (y/n) n
Updated tag 'foo' (was ef0923a81)

$ git show-ref | grep foo
727666694e80ed39488451503d72f65bb4ef69f8 refs/tags/foo
`

you see #101 but the ref is changed



### Expected behavior

Changes on tables.list should call

ReftableDatabase.clearCache() **and**
FileReftableStack.reload()

in FileReftableDatabase

### Relevant log output

_No response_

### Other information

I hope, this helps to improve jgit :)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YA0n9,jgit,2550352381,102,NA,zotttelbart,32455370,,,NA,2024-12-18T05:10:22Z,2024-12-18T05:10:22Z,"Hello,

the bug is still present in jgit 7.1 and git 2.47.1.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YA0n9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZXY_S,jgit,2573045714,102,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-06T12:48:45Z,2025-01-06T12:48:45Z,Pushed https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206683 for review,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZXY_S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZiIsN,jgit,2575862541,102,NA,zotttelbart,32455370,,,NA,2025-01-07T17:31:15Z,2025-01-07T17:31:15Z,"@msohn thx you. Its work!
Do you have any idea to solve #101?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZiIsN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b027D,jgit,2614324931,102,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2025-01-26T10:58:27Z,2025-01-26T10:58:27Z,"> [@msohn](https://github.com/msohn) thx you. Its work!

See the [discussion on the original JGit RefTable Change 146568](https://review.gerrithub.io/c/eclipse-jgit/jgit/+/146568) with @hanwen which brought some lights on the design behind the behaviour you are observing.

In a nutshell, when you create the repository object and the associated refDatabase (backed by a refTable), it takes a _consistent snapshot_ of the refs by reading the stack of immutable files and keeping them open. Whatever happens on the filesystem **is not** going to be detected _on the fly_ until you try to perform an update.

If the update happens _behind JGit's back_ but not inside the JGit's RefTable code, it won't be noticed until you close the repository and open it again.

Bottom line: I believe it is the way it works. Also it is consistent with the [RefTable specs of what readers should do](https://git-scm.com/docs/reftable#_readers).

> Do you have any idea to solve [#101](https://github.com/eclipse-jgit/jgit/issues/101)?

I believe that's unrelated to this problem and is more about compaction.

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b027D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b1bmA,jgit,2614475136,102,NA,zotttelbart,32455370,,,NA,2025-01-26T15:44:41Z,2025-01-26T15:44:41Z,"
> In a nutshell, when you create the repository object and the associated refDatabase (backed by a refTable), it takes a _consistent snapshot_ of the refs by reading the stack of immutable files and keeping them open. Whatever happens on the filesystem **is not** going to be detected _on the fly_ until you try to perform an update.
> 
> If the update happens _behind JGit's back_ but not inside the JGit's RefTable code, it won't be noticed until you close the repository and open it again.
> 

In Eclipse / egit its impossible to use repos with reftables. It leeds to corrupted filetables. With refdirectories (and packed-refs) its not a problem because, jgit refresh the cached refs.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b1bmA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b7oJm,jgit,2616099430,102,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2025-01-27T15:39:24Z,2025-01-27T15:39:24Z,"> In Eclipse / egit its impossible to use repos with reftables. It leeds to corrupted filetables. 

I've actually performed some JGit + CGit tests with a repository using ref-table and ended up with a corrupted filetables as well. Using JGit only doesn't show any issues though. I suspect that's a different issue related to the C implementation of ref-tables.

> With refdirectories (and packed-refs) its not a problem because, jgit refresh the cached refs.

The two problems are separate: one thing is to _not notice_ the updates on the filesystem and another is to generate corrupted data.

With Gerrit, for example, the issue isn't really in JGit but [a bug in Gerrit](https://issues.gerritcodereview.com/issues/392541994) where the Repository reference counting was diverging hence keeping the ref-table open indefinitely. Once the underlying Gerrit issue is fixed, I cannot reproduce the stale ref-table anymore.

Maybe the same is possible with EGit?

","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b7oJm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b8dOH,jgit,2616316807,102,NA,lucamilanesio,182893,Luca Milanesio,luca.milanesio@gmail.com,NA,2025-01-27T16:39:06Z,2025-01-27T16:39:06Z,"@msohn I applied the [Gerrit fix on Repository reference-counting](https://gerrit-review.googlesource.com/c/gerrit/+/449083) and configured the JGit `RepositoryCache` to expire the repositories after 1 msec with the following:

```
[core]
	repositoryCacheExpireAfter = 1
	repositoryCacheCleanupDelay = 1
```

As a result, the JGit ref-table works as expected when used by Gerrit:
- ref-table files are released when repo isn't used
- older ref-table files are released when performing auto-compaction
- JGit can see the changes on the repository when performed outside Gerrit

Bottom line: there could be some similar problem in EGit with the reference counting that should be investigated IMHO.
The code reported in this bug report is actually working as documented in the [ref-table specifications for the reader](https://git-scm.com/docs/reftable#_readers).

@msohn  @hanwen  @zotttelbart, what do you think?

From Gerrit's perspective, all works without needing changes on JGit's implementation of the ref-table.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b8dOH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b8oDY,jgit,2616361176,102,NA,zotttelbart,32455370,,,NA,2025-01-27T16:55:55Z,2025-01-27T16:55:55Z,"I don't know what to expect from jgit. I use jgit in an user application (like git gui) where the user can interact (checkout, merge, reset etc.) with the repository. Some operations (like fetch) are performed in background with jgit. The user can always use gitbash (cgit) parallel.
The application create JGIT at start and close it on exit (what can be hours later). With refdirectories and packed-refs, there was never a problem with this. The lock mechanism of cgit and jgit works to avoid race conditions.

I don't think, its a good idea to close the underlaying jgit instance in the application on idle and reopen the instance if needed.

How EGit does that? Is Egit really close jgit every time, the git operation is ended?

Generally I see some different in naming of reftablefiles. cgit starts with 0x, jgit doesn't.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b8oDY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/102,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cUTCw,jgit,2622566576,102,NA,zotttelbart,32455370,,,NA,2025-01-29T18:52:03Z,2025-01-29T18:52:03Z,"I tested it in egit with version 7.1.0.

I do

git checkout in cgit 

eclipse didn't recognize the new branch. In commit view in egit all files which changed through the checkout are displayed as staged changes and it shows the old branch:

![Image](https://github.com/user-attachments/assets/63ab4093-3336-49ec-afff-7f564ef84d68)

With refdirectories all works expected and egit recognize the changed HEAD ref.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cUTCw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,jgit,2602328096,103,GraalVM support for native images,klopfdreh,980773,Tobias Soloschenko,tsoloschenko@apache.org,OPEN,2024-10-21T11:57:59Z,2025-01-24T05:47:15Z,"### Description

Because we want to use jgit in GraalVM native images it would be great if this could be achieved through this ticket.

### Motivation

jgit in GraalVM native images.

### Alternatives considered

N/A

### Additional context

N/A

### Spring Boot Workaround

```java
@Configuration
@ImportRuntimeHints(GitHubRuntimeHints.class)
@Slf4j
public class GitHubRuntimeHints implements RuntimeHintsRegistrar {

    @Override
    public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
        Arrays.stream(System.getProperty(""java.class.path"").split(File.pathSeparator)).forEach(classpathEntry -> {
            // If the classpathEntry is no jar skip it
            if (!classpathEntry.endsWith("".jar"")) {
                return;
            }

            try (JarInputStream is = new JarInputStream(Files.newInputStream(Path.of(classpathEntry)))) {
                JarEntry entry = is.getNextJarEntry();
                while (entry != null) {
                    String entryName = entry.getName();
                    if (entryName.endsWith("".class"") && entryName.startsWith(""org/eclipse/jgit"") && !entryName.contains(""package-info"")) {
                        String githubApiClassName = entryName.replace(""/"", ""."");
                        String githubApiClassNameWithoutClass = githubApiClassName.substring(0, githubApiClassName.length() - 6);
                        log.info(""Registered class {} for reflections and serialization."", githubApiClassNameWithoutClass);
                        hints.reflection().registerType(TypeReference.of(githubApiClassNameWithoutClass), MemberCategory.values());
                        hints.serialization().registerType(TypeReference.of(githubApiClassNameWithoutClass));
                    }
                    entry = is.getNextJarEntry();
                }
            } catch (IOException e) {
                log.warn(""Error while reading jars"", e);
            }
        });

        hints.reflection()
            .registerType(TypeReference.of(IOException.class),
                hint -> hint.withMembers(MemberCategory.values())
            );

        hints.resources()
            .registerPattern(""application.yml"");
    }
}
```
Before the `native-image` command is used you have to set the environment varialbes
```shell
# Git configuration home folder
ENV XDG_CONFIG_HOME=/writablePath/
# Don't read git system configuration
ENV GIT_CONFIG_NOSYSTEM=true
```

Important: this is not a good solution as it enables all jgit classes for reflections and serialization.

An example of a native build can be found here: https://github.com/klopfdreh/native-cloud-config-test/blob/main/client/Dockerfile (Note: This does not use builder-image with multi stage and is only an example)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TBwT9,jgit,2466710781,103,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-10T12:12:25Z,2024-11-10T12:12:25Z,I don't understand what you think in JGit is wrong or missing in order to allow using it in GraalVM native images.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TBwT9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TBy_6,jgit,2466721786,103,NA,klopfdreh,980773,Tobias Soloschenko,tsoloschenko@apache.org,NA,2024-11-10T12:47:01Z,2024-11-10T12:47:01Z,"So there are some classes which are accessed via reflections and / or serialized. Also if static resources files are used from classpath they also need to be included ( example: https://github.com/JodaOrg/joda-time/pull/784 ) If you don’t provide those hints it causes issues during runtime when using native-images with GraalVM. From what I tested IOException was used via reflections.

There is nothing wrong with JGit, but it requires some meta information files so that there are no issues with native-image. 😀 

I created this ticket to check if reflection / serialization / static resources are used and to add those hints.

With my workaround mentioned in the description JGit is working without any issues in native images. 👍 

For more information have a look at the GraalVM documentation: https://www.graalvm.org/latest/reference-manual/native-image/metadata/

Note: You can provide separate file for reflection / serialization / resources - the Spring Boot team documented it with my request: https://github.com/spring-projects/spring-boot/issues/42515","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TBy_6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a9ssr,jgit,2599865131,103,NA,chirontt,49886739,Tue Ton,,NA,2025-01-18T20:23:28Z,2025-01-18T20:23:28Z,"@klopfdreh 
FYI: I've created a [JGit HTTP server project](https://github.com/chirontt/jgit.http.server.native) and successfully compiled it to native image using GraalVM, and all it needs are a couple of [configuration files](https://github.com/chirontt/jgit.http.server.native/tree/main/src/main/resources/META-INF/native-image) for GraalVM to use. No need for any ""Spring Boot Workaround"" code.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a9ssr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a-bS3,jgit,2600055991,103,NA,klopfdreh,980773,Tobias Soloschenko,tsoloschenko@apache.org,NA,2025-01-18T21:33:43Z,2025-01-18T21:33:43Z,Well I used it for client purpose and had a runtime issue that IOException was used via Reflections. That’s the reason I created the ticket - to ensure all functionality can be used without any errors in a native image.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a-bS3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bLTuS,jgit,2603432850,103,NA,chirontt,49886739,Tue Ton,,NA,2025-01-21T01:08:22Z,2025-01-21T01:08:22Z,"For a JGit client, I've compiled the [JGit PGM client](https://github.com/chirontt/jgit.pgm.native) app to native executable using GraalVM. In that project I needed to use the [GraalVM's Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/) to easily gather metadata and prepare configuration files, although the tool may not be perfect, i.e. it was missing many classes that I had to manually add them to the configuration files.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bLTuS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bL-Ep,jgit,2603606313,103,NA,klopfdreh,980773,Tobias Soloschenko,tsoloschenko@apache.org,NA,2025-01-21T03:56:22Z,2025-01-21T03:56:22Z,"> For a JGit client, I've compiled the [JGit PGM client](https://github.com/chirontt/jgit.pgm.native) app to native executable using GraalVM. In that project I needed to use the [GraalVM's Tracing Agent](https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/) to easily gather metadata and prepare configuration files, although the tool may not be perfect, i.e. it was missing many classes that I had to manually add them to the configuration files.

You shouldn’t need to configure anything as the library needs to provide that information.

As it is required to use native-maven-plugin for Spring Boot I also used it but it is not sufficient.

I just provided one way to make a native build available but JGIT itself should provide all required settings so that you don’t have to add anything.

The JGIT team should run the agent and add the meta data to the source code. 
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bL-Ep/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bWe7S,jgit,2606362322,103,NA,chirontt,49886739,Tue Ton,,NA,2025-01-22T05:57:24Z,2025-01-22T05:57:24Z,"> The JGIT team should run the agent and add the meta data to the source code.

I'm not part of the JGit team, but I disagree with this statement. A bad consequence of specifying every classes in the JGit library to the GraalVM configuration files, just in case they are needed at runtime, will include all of them in the resultant native executable regardless they are _actually_ used at runtime or not, and this defeats the main purpose of GraalVM of filtering out unused/unneeded classes from the executable, not to mention the increase in size & memory footprint of the resulting native executable. Worse, once all the classes are specified automatically in the configuration files as you suggested and be part of the library package, it's impossible to _exclude_ any of them from the resulting executable even when you know in advance you won't need them at runtime in your app.

I think it should be up to the application designer to include/exclude what ends up in the native executable, using whatever tools available during design/building (even manually), rather than forcing the library designer to include all of the library's classes in those configuration files just in case. In other words, the onus should be on the application itself to make sure it still works when choosing an exotic (and still limited) technology such as GraalVM native image, rather than putting the burden of it on the JGit library to conform.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bWe7S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/103,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bW0F2,jgit,2606449014,103,NA,klopfdreh,980773,Tobias Soloschenko,tsoloschenko@apache.org,NA,2025-01-22T07:05:05Z,2025-01-22T07:05:05Z,"> I'm not part of the JGit team

Already browsed your GitHub account 😄 

> but I disagree with this statement. A bad consequence of specifying every classes in the JGit library to the GraalVM configuration files, just in case they are needed at runtime, will include all of them in the resultant native executable regardless they are actually used at runtime or not, and this defeats the main purpose of GraalVM of filtering out unused/unneeded classes from the executable, not to mention the increase in size & memory footprint of the resulting native executable.

Not all classes, only those which need reflection / serialization or those which are dynamic proxies. Resources also need to be added, as I pointed out in my previous comments. If a framework needs reflections there is nothing bad to just provide those classes in a `reflect-config.json`. If only those classes are added the footprint should be as big as JGIT requires it to be in a native image.

> I think it should be up to the application designer to include/exclude what ends up in the native executable

That is wrong. If a framework is going to _support_ Native Images it should provide the metadata information for it.

> when choosing an exotic (and still limited) technology such as GraalVM native image

This is no argument. All technologies started as ""exotic"" and ""new"" until more and more developers are going to use them. 😄 

Beside that many projects are providing those information already and I contributed to those projects. Here are some examples:
* Amazon AWS SDK for Java V2
* Amazon CRT Java
* Github API 
* Snappy Java (used in Micrometer which is used in Spring)
* Joda Time
* Many Spring related projects (example on which I contributed: Spring Retry, Spring Cloud AWS, Spring Cloud Config)
* Spotbugs (fixes some issues regarding AOT / AOP with 4.9.x.x - released in future)

I just want to point you to examples showcasing related changes:
* Snappy Java: https://github.com/xerial/snappy-java/blob/ec23d7c611563bedce536ca4d02ebdb9a690ea91/src/main/resources/META-INF/native-image/org.xerial.snappy/snappy-java/resource-config.json
* Amazon AWS SDK for Java V2: https://github.com/aws/aws-sdk-java-v2/blob/0bef9fdaec48c6ce80a59d5efcac905916b2d3ec/services/s3/src/main/resources/META-INF/native-image/software.amazon.awssdk/s3/reflect-config.json
* Joda Time: https://github.com/JodaOrg/joda-time/tree/2ce9b4cdc207130a186dafbb8456cd0b0cfd9e4c/src/main/resources/META-INF/native-image/joda-time/joda-time

Also, as I pointed out I just wrote a workaround for us with a `RuntimeHintsRegistrar` of Spring Boot. This should not be used as JGIT should not depend on any Spring classes. Instead files like in the example showcases should be used to provide the information in a more generic way.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bW0F2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/105,https://api.github.com/repos/eclipse-jgit/jgit/issues/105,jgit,2614069431,105,IgnoreNode should not always use path match as true,Jenson3210,25441280,Jente Sondervorst,,OPEN,2024-10-25T13:09:23Z,2024-10-28T16:02:41Z,"### Version

latest

### Operating System

Linux/Unix, MacOS

### Bug description

a .gitignore file containing a single ignore rule for a directory fails to match correctly.

```
/directory/nested/
```
 should be ignoring `/directory/nested/again` directory

### Actual behavior

the result given back is CHECK_PARENT

### Expected behavior

the result given back is IGNORED

### Relevant log output

_No response_

### Other information

I have a test showcasing this behaviour in my fork (will link commit). Here more insights/debugging can be found. 

Caused by the fact that `IgnoreNode` is always passing `true` as `pathMatch` to the `rule.isMatch`

```java
    @Test
    public void fastIgnoreRuleForNestedDirectory() {
        //This PASSES as isMatch returns true
        FastIgnoreRule ignoreRule1 = new FastIgnoreRule(""/directory/nested/"");
        assertTrue(ignoreRule1.isMatch(""/directory/nested/again"", true, false));

        //This FAILS as isMatch returns false
        FastIgnoreRule ignoreRule2 = new FastIgnoreRule(""/directory/nested/"");
        assertTrue(ignoreRule2.isMatch(""/directory/nested/again"", true, true));
    }","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/105/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/105,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6RjfiN,jgit,2442000525,105,NA,Jenson3210,25441280,Jente Sondervorst,,NA,2024-10-28T16:02:39Z,2024-10-28T16:02:39Z,"If this is expected behaviour, feel free to close. 
In a local test, I validated that the correct behaviour is present when using TreeWalk. 

Only weird that IgnoreNode would always result in Check_Parent if clearly ignored by the current node. 

I do not really need a fix as I made a workaround which just uses the internally used getRules response and call correct true/false based on the current input.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6RjfiN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/106,https://api.github.com/repos/eclipse-jgit/jgit/issues/106,jgit,2624803123,106,Expose HEAD branch in RemoteConfig,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,OPEN,2024-10-30T17:22:30Z,2024-11-19T17:38:39Z,"### Description

The value I'm looking for, given this command would be `main`

```
❯ git remote show origin
* remote origin
  Fetch URL: https://github.com/xenoterracide/gradle-semver
  Push  URL: https://github.com/xenoterracide/gradle-semver
  HEAD branch: main
  Remote branches:
```

which from source diving I think being retrieved using [`Constant.HEAD`](https://github.com/eclipse-jgit/jgit/blob/ef3baae76aff4cb8841fe07f8e0b3d6e828f3a1d/org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java#L359) but doesn't appear to be publicly exposed in any way.

`RemoteConfig::getHeadBranch` feels appropriate, I'm not certain whether it should return a `String` or a `Ref`

### Motivation

I need this so I can find the default branch and do describe like behavior to count its distance from the last tag. More complexly, I want to find the distance of the most common ancestor of a branch from the ""HEAD branch"" from its most recent tag.

I am not trying to clone.

### Alternatives considered

I guess I could copy/paste this implementation to get it, accessing `FetchResult` myself. In the mean time I'm probably going to do an educated guess heuristic, or have a user explicitly set it. Both of which are fragile, and would not change if the remote actually changed. I might actually just invoke `git` but I'm trying to avoid that due to the lack of happyness of gradle regarding invoking external processes when using the configuration cache.

### Additional context

```
org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r=compileClasspath,testCompileClasspath,testRuntimeClasspath
```

```
------------------------------------------------------------
Gradle 8.10.2
------------------------------------------------------------

Build time:    2024-09-23 21:28:39 UTC
Revision:      415adb9e06a516c44b391edff552fd42139443f7

Kotlin:        1.9.24
Groovy:        3.0.22
Ant:           Apache Ant(TM) version 1.10.14 compiled on August 16 2023
Launcher JVM:  21.0.5 (Eclipse Adoptium 21.0.5+11-LTS)
Daemon JVM:    /home/xeno/.asdf/installs/java/temurin-21.0.5+11.0.LTS (no JDK specified, using current Java home)
OS:            Linux 6.6.54-2-MANJARO amd64
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/106,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TqWry,jgit,2477353714,106,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-14T20:31:19Z,2024-11-14T20:31:19Z,"The default branch of a remote repository is not stored in the static remote configuration of the git client.
Instead you can use `git ls-remote` to get all refs, this includes `HEAD` and, if it's referring to a branch, the peeled ref (a commitId).

Run the ls-remote command which returns all refs. The list starts with the value of the symbolic ref `HEAD` and, if it's set to a ref (for the jgit repo `refs/heads/master`), the peeled symbolic ref `HEAD` (here `c67393562be7e3db0e39cb2d3ff5f8192e2f2cd5`).

```
jgit ls-remote --symref https://eclipse.gerrithub.io/eclipse-jgit/jgit.git
ref: refs/heads/master  HEAD
c67393562be7e3db0e39cb2d3ff5f8192e2f2cd5        HEAD
5140bb0aafe9c32c89526c5fb1afdbdc5cc9454d        refs/changes/00/100/1
bf3d0ae6b1907a51fc6ff2309cd27d369743c2fa        refs/changes/00/100/meta
...
fad60bddbbee7fd9f6fe5df8f00b5a348b6f387d        refs/changes/99/99/1
5b7dba35ed9cd5364467e2dbddfb7763fc049771        refs/changes/99/99/meta
c67393562be7e3db0e39cb2d3ff5f8192e2f2cd5        refs/heads/master
026d46de13eb2321c18045469f27b065ba107ff5        refs/heads/next
51d1af9489924ff03fa10ec963110c608c2882a3        refs/heads/stable-0.10
...
42977e7b1fc075fc6f2fc520ccc5ea328c9b136d        refs/tags/v0.10.1
1fdc17bfe4a1deb61756abeb8470bd813827d44a        refs/tags/v0.10.1^{}
f5847db3c229348f7e519900bc88ea4f142f8fe3        refs/tags/v0.11.1
857d1511987599c66b834eb43f25b45394244af3        refs/tags/v0.11.1^{}
fe25d5693bb45634d72b05771c5c9a9691d16c60        refs/tags/v0.11.3
...
```

Refer to the class [`org.eclipse.jgit.pgm.LsRemote`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/LsRemote.java) to see how this can be implemented using JGit APIs.

If you are running `CloneCommand` to clone a repository it retrieves the same information from the advertised refs via git protocol. It is returned by the `FetchResult` of the `FetchCommand` used to fetch the git repo, use `FetchResult.getAdvertisedRef(Constants.HEAD)` to get the default branch, see [`CloneCommand.findBranchToCheckout()`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java#L426).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TqWry/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/106,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UMrGi,jgit,2486350242,106,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-11-19T17:38:37Z,2024-11-19T17:38:37Z,"but why can't it be exposed in `RemoteConfig`?

note: talking on the git list about fixing places where this HEAD ref is not automatically present. There is ongoing work even before this conversation. I'm not as frustrated with `jgit` as a command line in these tickets as its api is a little unintuitive internally. Another thing I could open (and will if you want) is the seeming lack of `git remote set-head`, I don't really need this. I'm just going to tell consumers to call that themselves instead of invoking git/jgit in my gradle plugin. Since I have no idea what that does to the configuration cache...","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UMrGi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/107,https://api.github.com/repos/eclipse-jgit/jgit/issues/107,jgit,2626279505,107,About using jgit on Windows system,ydlmp,158029277,,,OPEN,2024-10-31T08:31:07Z,2024-12-11T16:01:23Z,"### Version

5.13.2

### Operating System

Windows

### Bug description

When running a Java project using jgit on a Windows system, the git. pull(). call() command will pull the content and the local content will be displayed as modified

### Actual behavior

Execute the git. pull(). call() command

### Expected behavior

Using the git client to execute the command `git pull` will not display that a local file has been modified

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/107/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/107,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TrDk4,jgit,2477537592,107,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-14T22:32:05Z,2024-11-14T22:32:05Z,Please download https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1203909 and run the PullCommandTests and come back with the results.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TrDk4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,jgit,2630310255,108,Getting different conflict chunk than git-merge,foriLLL,44702632,Wangchangxin,wchangxin824@163.com,CLOSED,2024-11-02T08:22:21Z,2024-11-12T10:23:49Z,"### Version

7.0.0.202409031743-r

### Operating System

MacOS

### Bug description

1. clone [cucumber-ruby](https://github.com/cucumber/cucumber-ruby)
2. merge `b6579` into `c0aea16b`
3. get conflicts

## Differences

### With JGit

merge with JGit:

```java
    @Test
    public void mergeTest() {
        String projectPath = ""[cucumber-ruby repo here]"";   // Path to the repository

        try {
            // Open the existing repository located at 'projectPath'
            File repoDir = new File(projectPath);
            Git git = Git.open(repoDir);
            Repository repo = git.getRepository();

            // Define the two commits you want to merge
            String oursHash = ""c0aea16b""; // 'ours' commit
            String theirsHash = ""b6579"";  // 'theirs' commit

            // Checkout to 'ours' commit
            git.checkout().setName(oursHash).call();

            // Resolve the ObjectIds for the commits
            ObjectId theirsId = repo.resolve(theirsHash);

            // Prepare the merge command
            MergeCommand merge = git.merge();
            merge.include(theirsId);               // Include 'theirs' commit in the merge

            // Execute the merge
            MergeResult result = merge.call();

            // Handle the merge result
            if (result.getMergeStatus().isSuccessful()) {
                System.out.println(""Merge was successful!"");
            } else if (result.getMergeStatus().equals(MergeResult.MergeStatus.CONFLICTING)) {
                System.out.println(""Merge resulted in conflicts."");
                // retrieve and handle conflicts here if needed
                Map<String, int[][]> conflicts = result.getConflicts();
                if (conflicts != null) {
                    for (String path : conflicts.keySet()) {
                        System.out.println(""Conflicts in file: "" + path);
                    }
                }
            } else {
                System.out.println(""Merge failed with status: "" + result.getMergeStatus());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
```

### With Git (git version 2.47.0)
```sh
git checkout c0aea16b
git merge b6579
# git merge -s recursive  -Xdiff-algorithm=histogram b6579
# git merge -s recursive  -Xdiff-algorithm=myers b6579
```

### Actual behavior

get conflict chunk:
```rb
    end
 
<<<<<<<
    def create_formatter(factory, path_or_io, options)
      if !legacy_formatter?(factory)
        out_stream = Cucumber::Formatter::Io.ensure_io(path_or_io)
        return factory.new(@configuration.with_options(out_stream: out_stream))
      end
      results = Formatter::LegacyApi::Results.new
      runtime_facade = Formatter::LegacyApi::RuntimeFacade.new(results, @support_code, @configuration)
      formatter = factory.new(runtime_facade, path_or_io, options)
      Formatter::LegacyApi::Adapter.new(
        Formatter::IgnoreMissingMessages.new(formatter),
        results, @support_code, @configuration)
    end
 
    def legacy_formatter?(factory)
      factory.instance_method(:initialize).arity > 1
|||||||
=======
    def fail_fast_report
      @fail_fast_report ||= Formatter::FailFast.new configuration
>>>>>>>
    end
 
 
    def failure?
      if @configuration.wip?
```

### Expected behavior

get conflict chunk same as the one git generated:
```rb
    end
 
<<<<<<< HEAD
    def create_formatter(factory, path_or_io, options)
      if !legacy_formatter?(factory)
        out_stream = Cucumber::Formatter::Io.ensure_io(path_or_io)
        return factory.new(@configuration.with_options(out_stream: out_stream))
      end
      results = Formatter::LegacyApi::Results.new
      runtime_facade = Formatter::LegacyApi::RuntimeFacade.new(results, @support_code, @configuration)
      formatter = factory.new(runtime_facade, path_or_io, options)
      Formatter::LegacyApi::Adapter.new(
        Formatter::IgnoreMissingMessages.new(formatter),
        results, @support_code, @configuration)
    end
 
    def legacy_formatter?(factory)
      factory.instance_method(:initialize).arity > 1
    end
 
||||||| 0844f499
=======
    def fail_fast_report
      @fail_fast_report ||= Formatter::FailFast.new configuration
 
    end
 
>>>>>>> b6579
    def failure?
      if @configuration.wip?
```

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6SNJzZ,jgit,2452921561,108,NA,foriLLL,44702632,Wangchangxin,wchangxin824@163.com,NA,2024-11-02T08:36:19Z,2024-11-02T08:36:19Z,"Not sure why the results generated by JGit and git are inconsistent. 

BTW, it seems that JGit hasn’t implemented the ort strategy?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6SNJzZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6SwuzC,jgit,2462248130,108,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-11-07T13:30:34Z,2024-11-07T13:30:34Z,"I don't see any code in JGit that would make `MergeCommand.call()` produce a diff3 output. So where does the ""||||||"" line in the JGit output shown come from?

Where does the extra empty line in the C git output shown come from? (The one before the ""end"" of ""fail_fast_report""?) I don't get that.

Is the issue reported here that JGit ignores the `merge.conflictstyle` config and never produces a diff3 result? Or is it something else?
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6SwuzC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6S_VIq,jgit,2466075178,108,NA,foriLLL,44702632,Wangchangxin,wchangxin824@163.com,NA,2024-11-09T06:23:28Z,2024-11-09T06:23:28Z,"Hi @tomaswolf ,

Apologies for the confusion earlier—I realize now that I made a mistake. C Git produces the same result when `merge.conflictstyle` is set to `merge`.

The issue is that JGit doesn’t respect the `merge.conflictstyle` configuration. To work around this, I wrote some code to utilize the `MergeChunk` objects within the `MergeResult` produced by `RecursiveMerger.getMergeResults`, attempting to generate diff3-style conflict samples in-memory for research purposes. However, I don’t think I fully understand how to properly use these `MergeChunk`s to produce a true diff3-style conflict output and may have misinterpreted their role.

Given this, I’m wondering if there’s a more efficient or straightforward way to collect diff3-style conflict samples using JGit. Any guidance would be greatly appreciated!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6S_VIq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/108,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TO3XL,jgit,2470147531,108,NA,foriLLL,44702632,Wangchangxin,wchangxin824@163.com,NA,2024-11-12T10:23:49Z,2024-11-12T10:23:49Z,"Solved using `MergeFormatter`.  
Thanks, though.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TO3XL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/109,https://api.github.com/repos/eclipse-jgit/jgit/issues/109,jgit,2645276015,109,Incorrect hiderefs Behavior,joelthompson,1562980,Joel Thompson,,OPEN,2024-11-08T22:24:07Z,2024-11-09T12:54:39Z,"### Version

master

### Operating System

Linux/Unix

### Bug description

According to the [Git documentation](https://git-scm.com/docs/git-config), there are three ways `hideRefs` can be set:
1. `transfer.hideRefs`: This hides the refs from both `receive-pack` and `upload-pack` commands
2. `uploadpack.hideRefs`: This hides the ref from only `upload-pack` but leaves it visible for `receive-pack` commands
3. `receive.hideRefs`: The opposite of the above: hide the ref only from `receive-pack` commands but leave it visible for `upload-pack` commands.

JGit only looks at `uploadpack.hiderefs` and ignores `transfer.hiderefs` and `receive.hiderefs` https://github.com/eclipse-jgit/jgit/blob/a903ab5fa3defdef06b4eba316ef2436533416fb/org.eclipse.jgit/src/org/eclipse/jgit/transport/TransferConfig.java#L213 Further, when `uploadpack.hiderefs` is set; JGit acts as if `transfer.hiderefs` had been set instead and hides the listed refs from both `receive-pack` and `upload-pack`.

The net result of this is there's no way to use `hideRefs` to hide a ref from only `upload-pack` or `receive-pack`.

### Actual behavior

`transfer.hiderefs` and `receive.hiderefs` are both ignored; `uploadpack.hiderefs` acts the way `transfer.hiderefs` should.

### Expected behavior

`transfer.hiderefs`, `receive.hiderefs`, and `uploadpack.hiderefs` to behave as describe in the [Git documentation](https://git-scm.com/docs/git-config).

### Relevant log output

_No response_

### Other information

Not sure it's material, but the Git docs specify `hideRefs` with a capital `R` while JGit looks at `hiderefs` with a lower-case `r`","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/109/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/109,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6S_01E,jgit,2466204996,109,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-09T12:54:39Z,2024-11-09T12:54:39Z,git config keys are case insensitive,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6S_01E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/110,https://api.github.com/repos/eclipse-jgit/jgit/issues/110,jgit,2653448842,110,JGit’s similarity threshold for rename detection (60%) is different from git’s (50%),2is10,647851,Jared Jacobs,,CLOSED,2024-11-12T22:07:48Z,2024-11-27T12:16:33Z,"### Version

7.0.0

### Operating System

Linux/Unix, MacOS

### Bug description

File rename operations in a git commit are identified by computing the similarity (percentage of lines unchanged) of added/removed pairs of files in the commit. If the similarity exceeds some threshold, the deletion and addition are considered a file rename.

Git’s similarity threshold for rename detection is configurable and defaults to 50%. This is [clearly documented](https://git-scm.com/docs/git-diff#Documentation/git-diff.txt--Mltngt), and Google [knows it well](https://www.google.com/search?q=git+default+rename+threshold).

JGit’s similarity threshold for rename detection is _not_ configurable and is [60%](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/diff/RenameDetector.java#L90). That constant was introduced in 2010 ([978535b](https://github.com/eclipse-jgit/jgit/commit/978535b09080edcc01302e80b37b9e1263c21db3)).

The threshold discrepancy manifests often in Gerrit code reviews (see [Gerrit bug 40015217](https://issues.gerritcodereview.com/issues/40015217) for examples), but it can also manifest in the output of simple commands like:
* `jgit status`
* `jgit diff`
* `jgit log`
* `jgit show`

## Steps to reproduce

In any empty or existing git repository, run the following commands:
1. `echo $'1\n2\n3\n4\n5\n6\n7\n8' > a.txt`
2. `git add a.txt`
3. `git commit -m a.txt`
4. `git rm a.txt`
5. `echo $'1\n2\n3\n4\n5.\n6.\n7.\n8' > b.txt`
6. `git add b.txt`
7. `git status`
8. `jgit status`
9. `git commit -m b.txt`
10. `git show`
11. `jgit show`

### Actual behavior

The `jgit status` output is:
```
Changes to be committed:

	deleted:    a.txt
	new file:   b.txt
```

The `jgit show` output is:
```
commit c33f4dce1d4a0f252b6592c97e519c802a9d64d4
Author: Jared Jacobs
Date:   Tue Nov 12 12:48:58 2024 -0800

    b.txt

diff --git a/a.txt b/a.txt
deleted file mode 100644
index 535d2b0..0000000
--- a/a.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-1
-2
-3
-4
-5
-6
-7
-8
diff --git a/b.txt b/b.txt
new file mode 100644
index 0000000..472a59c
--- /dev/null
+++ b/b.txt
@@ -0,0 +1,8 @@
+1
+2
+3
+4
+5.
+6.
+7.
+8
```

### Expected behavior

I expected the `jgit status` output to roughly match the `git status` output, identifying the staged changes as a file rename:
```
Changes to be committed:

	renamed:    a.txt -> b.txt
```

I also expected the `jgit show` output to roughly match the `git show` output, identifying the commit’s changes as a file rename:
```
commit c33f4dce1d4a0f252b6592c97e519c802a9d64d4
Author: Jared Jacobs
Date:   Tue Nov 12 12:48:58 2024 -0800

    b.txt

diff --git a/a.txt b/b.txt
similarity index 52%
rename from a.txt
rename to b.txt
index 535d2b01d33..472a59c47cf 100644
--- a/a.txt
+++ b/b.txt
@@ -2,7 +2,7 @@
 2
 3
 4
-5
-6
-7
+5.
+6.
+7.
 8
```

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/110,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Tqt56,jgit,2477448826,110,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-14T21:30:31Z,2024-11-14T21:30:31Z,"Please review https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1203908 fixing the default similarity score.

`void RenameDetector.setRenameScore(int score)` provides the API to configure the score.
`RenameDetector DiffFormatter.getRenameDetector()` can be used to access the rename detector it's using and configure it using `setRenameScore(int score)`.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Tqt56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/110,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TtDr-,jgit,2478062334,110,NA,2is10,647851,Jared Jacobs,,NA,2024-11-15T06:35:16Z,2024-11-15T06:35:16Z,Thanks for the quick fix! The info about how to customize the threshold is also helpful. I’ll pass it on to the Gerrit team.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TtDr-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/110,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6VO9fL,jgit,2503727051,110,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-11-27T12:16:24Z,2024-11-27T12:16:24Z,This was merged.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6VO9fL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/111,https://api.github.com/repos/eclipse-jgit/jgit/issues/111,jgit,2659699924,111,ls-remote doesn't contain `HEAD`,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,OPEN,2024-11-14T18:40:47Z,2024-11-21T16:18:19Z,"### Version

org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r

### Operating System

Linux/Unix

### Bug description

given

```java
git.lsRemote().setHeads(true).setTags(true).setRemote(""origin"").callAsMap()
```


### Actual behavior

the `HEAD` reference is missing

### Expected behavior

if I run the real `git ls-remote origin` I get the below

```
288b40b3546673c7436014e3ce85afe18ee41bcc	HEAD
48a09407ab3489acfe73f8a6576164a9293b68d2	refs/heads/chore/build-logic
7a93373f9e8f977b17efb84110398fb70936bf82	refs/heads/chore/sync-config
31673b1a39ec6adc36b8377277aa7af07f96045a	refs/heads/ci/generate-and-upload-dep-submit
3a0c102452c0e80abf85da0e1bcfeeed95b939a2	refs/heads/external/bug/ep
0bbe15192d55c81d0fa4593794872b5b74ccfcf3	refs/heads/external/bug/jgit-24
f28c2d65e2ef552eeb508c845ceffe1aa7075711	refs/heads/feat/simplify-to-provider
288b40b3546673c7436014e3ce85afe18ee41bcc	refs/heads/main
83dd4f2753542316a142ac7c08edd6f5a027bd13	refs/heads/renovate/com.gradle.develocity-3.x
6c4a9651818e451604e4525cbb7b4354e231c38b	refs/heads/renovate/gradle-8.x
e8673335d1deca1e6a800f30c586af8da2d9ffb7	refs/heads/test/stringy-version-comparision
01dd268f58e00807f84a76c9c9d77d3315d1922e	refs/pull/1/head
3d344dd4fa5fd12881dd3a0b4304f2015a4503e0	refs/pull/10/head
a429119a039aa608bdc723fb1948d661f2a702b7	refs/pull/100/head
cb7d7988cf8f8768b569a1df6708207248df56d2	refs/pull/101/head
3167f3c14198d425431270262ba10e469db5ee7c	refs/pull/102/head
cf961ea38bad3dc3569b7ddf44dce70bb92e61e3	refs/pull/103/head
6299bead00d929722dcf0cc0a98500af4473bfca	refs/pull/104/head
f219d0e67dfccd7f2aa72f833cd980858116b9a3	refs/pull/105/head
0fe4908fbe6987d044e350bf115019f999b08df2	refs/pull/106/head
6312212a5884961807d75c198beef603862d8dc6	refs/pull/107/head
0ea944a57f26386f4060d174960bdf4926eb6727	refs/pull/108/head
c2f5ace0c4bcde8539b8dec89430cf8ec7a81a1f	refs/pull/109/head
ab65659bb3ed038bd1c66fce2ffbe0f3b9c7a7c9	refs/pull/11/head
9349fb45bec569f5626ffcefe9841b0e9899c5fb	refs/pull/110/head
bea043d26c5c731b2161fc0f79b5c366961b9853	refs/pull/111/head
d745c4bd602d3b4fc72c74a92dbb3db94bb1750f	refs/pull/112/head
8d21949a216226c127f60cff99a009cb13d62948	refs/pull/113/head
c55a2ac24000d9ed46d1b830bd3c76f8a30e2591	refs/pull/114/head
19d45bb28df37f8f423820cf5dade2371b4dfe77	refs/pull/115/head
691e8c5c3816bbd99c4e11b21278227325af59ef	refs/pull/116/head
0b631f042df949f20020b84acb2440791ad23a94	refs/pull/117/head
2d5f347e90db88ec2c43894113cc9a860aca4286	refs/pull/118/head
eaa7a4f168f1c854c878ea56e3253aa54a8e8d9a	refs/pull/119/head
9f2d9126e7c5d427243249c57c5846a7beeaf0e4	refs/pull/12/head
60e7da30646a5199ff2cbe040652dfb0257fe13d	refs/pull/120/head
898d7e46dcf79a8a5b1f49aeebb8d6779a8af2e1	refs/pull/121/head
0a9fed639106274e8bb4eb37b964cb592c12eb43	refs/pull/122/head
5d7b12014d568ca5b6dd22afecfff3569c233e37	refs/pull/123/head
4d016e9ca39404aed0265308f32f0b656cfeeff0	refs/pull/124/head
c59a8fe7c81d25ca80e78492a81f43993f624917	refs/pull/125/head
e52b906ff4829649a90964d69e013c4aa0ab3ec4	refs/pull/126/head
15804a626352cb27d81755121ddc6bdac6be326e	refs/pull/127/head
2886305e20c1f940e2b06739628c9e19bcc6515d	refs/pull/128/head
25428f8d527293ce823ff48cb7dc44ad08e3fcba	refs/pull/129/head
f6035f366d4fdc591ac02478f5164ff7573baff4	refs/pull/13/head
9e5af7c7c49f67e8e1411ac6e8e3f3d486698c39	refs/pull/130/head
6994d4578cafc047e2b8c4c77c9d7cbb449e5a9d	refs/pull/131/head
cc6826a0b446b855507cd4cce00ef6c1fcb93035	refs/pull/132/head
db55f20b3d1fc1893da1681ae661b02ce94d7ec9	refs/pull/133/head
57e6d07cb36b2bbcfc44342abd4cf29f1745d4f1	refs/pull/134/head
f453dc11af9d1a6a1480603c1570886a0693e747	refs/pull/135/head
3ddbd8485010a160adcf853d067b854a7062f108	refs/pull/136/head
d4d42c0745bfa22288726dca9f26e88c0993d524	refs/pull/137/head
e9afc07029aee7a3320d54a541827cff856a290d	refs/pull/138/head
458512a448fbaae0b25625b576a12a08fa871f80	refs/pull/14/head
68b59f1cde5434f2a1f1c6d8c0a619a2dbe197a9	refs/pull/141/head
9aee349113777f62a9a914805184e47645eee2fe	refs/pull/142/head
3b2147786d0fd41af9ae9cdf0e9b5de61e56454c	refs/pull/143/head
62542725aa7fa82c04e796628a2f6cbc4bb1b41a	refs/pull/144/head
4a53099ba0f33b3a1476a11f3916a5a418da1935	refs/pull/145/head
41f0a60398add2611a5fc358858b7533633a6d03	refs/pull/146/head
2d2b0355bb0eaecb9db8705e90c5f822a22e2a69	refs/pull/147/head
ef1c85c6a8e360543adacd24375a0528dddfbb0a	refs/pull/148/head
d60b271168d960ffc16aadf86fbc1c42d6606b55	refs/pull/149/head
808d26bcea79bc02b90c7cc61e42beacfcdbc8ac	refs/pull/15/head
15f4c31e88b395d18636d1008555f2f93e924541	refs/pull/150/head
3b5b30cb3926e01453b0f04add4bec14de830634	refs/pull/151/head
6353e4d5fbc21419845229132839c06ff4a9902b	refs/pull/152/head
6eb7a308b24d98459796fd829f54cbac2b6fea72	refs/pull/153/head
17ddff3070c7029ae38e3c0a7bbcca503f84571f	refs/pull/154/head
5a0c58894082f26009058cf565abb04066782f87	refs/pull/155/head
54640469efdb4901a70dc712a8268994e42841d9	refs/pull/156/head
93247949e0f30707e9870e03b5e00141a3b4c237	refs/pull/157/head
08417e53aecf9be7ac9ea3a184e02d30bcfe8390	refs/pull/158/head
d1d2f09077119b0125bc2a1fb14d67f38da6d06e	refs/pull/159/head
e3d5aaed67c22f3e9000680a11d43f490dcf24fc	refs/pull/16/head
843302facd53277cf4632c8138a8d54f5a0cf9b8	refs/pull/160/head
38557d0ef44c0ede74e6298b9b5ba4f8f5595d25	refs/pull/161/head
d31cdf87b3b3a4f88f167b0d0d575b35e6eb6579	refs/pull/162/head
35dfd004b2744916e6b3bc41b5f745940192c77c	refs/pull/163/head
8809db7dcad14552f21c29cebc2501db9122b55d	refs/pull/164/head
284facf290447d7630ae1dd96e0e266e566126e8	refs/pull/165/head
baa48d48e212fb076a812edbeb9c91ce9150216c	refs/pull/166/head
c1cb87c296f0440c5da42f760c4a6bcefad028d8	refs/pull/167/head
2f27a3c1a62e35721549f3b1b3f7acde47bb9643	refs/pull/168/head
048e4697e4668df940ad2d9283356fcb7f16ee1c	refs/pull/17/head
bd1daa3c746809441371934618626890375af047	refs/pull/170/head
ab63d9ecc448c5485f9539ba008b5c37417feb26	refs/pull/174/head
8807c2d4dd62c9a579d27921ffce03920dad3c96	refs/pull/175/head
7991fb49d2a11a75b86fd4cdfeaa13dbd88aa446	refs/pull/176/head
8e0061c7b64eedf2698df6478128bc7c16a65889	refs/pull/177/head
b2746b361b0bf6a5ac3f001a76318dcf5793a700	refs/pull/178/head
96e18ceabaf9ceae6777d0ed00d8b7f2a1dd838b	refs/pull/179/head
2487079988bbe804a5b0cf819c1878a76b640239	refs/pull/18/head
ae1ef043fe70134b35995abb13df261bd9514991	refs/pull/180/head
6c4a9651818e451604e4525cbb7b4354e231c38b	refs/pull/181/head
85b572098e89ed8d3ab6e0da0c212b80d6f2d5a4	refs/pull/181/merge
77495eedb472ef60221bde0d967216563523c97a	refs/pull/182/head
83dd4f2753542316a142ac7c08edd6f5a027bd13	refs/pull/183/head
ab919647e72911c80c82bb60e778948bdcb5b877	refs/pull/183/merge
2d0dc013f4f3e8d1481ef95ca4bcfea88c7b0c97	refs/pull/19/head
6331a5c07acf43cc16638c47e7d672a36d56d619	refs/pull/2/head
7c8b693c6eae697eab5dad256ad9b6bc17cc19b7	refs/pull/20/head
dd739328e4852d92b4fbafa58bfbf9c4f1b6140f	refs/pull/21/head
6bbdcfa751f0b78cbaccf56cd99c034ad854d626	refs/pull/22/head
0eec2a14f2b5113dd8d372037c932dbf0e393ffa	refs/pull/23/head
41412963984ac798840e1778e72cef3fd51835d3	refs/pull/24/head
470ff62ec9316917237c01d741f79381c6f94500	refs/pull/25/head
b781864b727a51ccb72f53173c5b422252b482b8	refs/pull/26/head
c514a00e3b17b242e79ff4dbe760b8c9dcab62f5	refs/pull/27/head
a338986f2a9068e7a4ae1af6afbb9f27009fd285	refs/pull/28/head
9bee5d37304139e1867a25d109cd1bdf8bc294ea	refs/pull/29/head
8d0dfaac121b89e5cf9073bfa099679efa9561c5	refs/pull/3/head
f2cf413235db0c59dc01bec6a1eee5282a3a315c	refs/pull/30/head
649d54ce7007553f0cd72ae3a6388a7b258b8c25	refs/pull/31/head
909f86c984ac7042dba49771442667a00120900e	refs/pull/32/head
32ee9ce1e37a8a39099906cac73f8584dfb40b54	refs/pull/33/head
97adac831ed3426bd20907fb4716afe344cc983c	refs/pull/34/head
39f7532e48a3e88dd6a0246ec99594e36f9d238d	refs/pull/35/head
0a80d80b1f23d6ec86cba76d1ab30550e7a61d9a	refs/pull/36/head
2376f9aafee0a5496a2b4cb980bb66f2fddf48c4	refs/pull/37/head
57991e7e581fbc2f504ef04ac3bf75534d016186	refs/pull/38/head
0ac388e7a45ea9f5ef45d92f53444d32209c65db	refs/pull/39/head
ddc7ae50a57b0055f1fa53e7c95a3c32bbaf1bf1	refs/pull/4/head
c4d6bd8af631c28f45123038ddd15c4627739c7a	refs/pull/40/head
aa36aa8b0299a0b47ae0cddf272a7fec8f4f1926	refs/pull/41/head
2dfe0147e759262754805e9e1129e095155ba0d1	refs/pull/42/head
d6835499bb844faebb53d464a5a9aa32d9e0afb8	refs/pull/43/head
7c5a3e37e111b14b4b28f22f91050a36e1492d6e	refs/pull/44/head
c39b419580e2101c22651af8aee95bb48b9bfa40	refs/pull/45/head
8240a3b757f49a0d3a3611cbb04cfe071f9cc937	refs/pull/46/head
0039a01b38e455ffa277d9590a90f3d2701f9a21	refs/pull/47/head
a8ef7142529e8ba9af637d3dccf5b4f3c1d32cb9	refs/pull/48/head
f1abfb865e13a68bb339bd827b8eaaaba600e355	refs/pull/49/head
106973cdd192693f2ddf1eed8e1af9158d78093a	refs/pull/5/head
763f66a0888a95a2073e27c349aa6cc510bae5d5	refs/pull/50/head
389c3c52f61d3be00d4f9a4ff1e2bb5ef44407c8	refs/pull/51/head
da97377ee0066c3b73926b9e28224c4fe73916b7	refs/pull/52/head
c9f45bde953676a00348823fa54e6058d21bcd66	refs/pull/53/head
c915395127b8a26da37df42a8fcad577568c9389	refs/pull/54/head
7bde5749410a781b3d3ebaa7d1955aa7112762dd	refs/pull/55/head
98436de8e1f1d867d40ac923e74f42be6a9e44f7	refs/pull/56/head
5a6ee55a63fa4d5ade8a01b2c7fdabf5b8463e06	refs/pull/57/head
b57cdb71e6404d30548962e29bf0d14a73158a4a	refs/pull/58/head
84f78d8ff0e31bb1412b20050e826dbcad3b0184	refs/pull/59/head
56391d69579d9502c18d86c4ecc8ba49853d9399	refs/pull/6/head
ce06a94e6956aec58038510fbf9d3d546812b4ad	refs/pull/60/head
192e358159cae7243934fb103772d05a3673f895	refs/pull/61/head
a599e50f271c6d3066412045ae57c983315a4236	refs/pull/62/head
8e77e451bf65648aa5b7e4df2ea1908245c4bc53	refs/pull/63/head
7fbeec6044e8eea26254b8883f85d21538a6e3b5	refs/pull/64/head
241a90502b051cada9bee958285905702f71526d	refs/pull/65/head
e31f09d48c4cce435f9415eb405acd81eaee5d31	refs/pull/66/head
604b74c4092833abe2ce347ee3504d23b6c90f5c	refs/pull/67/head
c2dbf7e3680ee39877d01a3ca549f23a8b9e1f71	refs/pull/68/head
7c8a1b8cdc023ba7ec9f4fa07e30796427133973	refs/pull/69/head
bb22385701caad3d488c1340c920bedb67924955	refs/pull/7/head
62ab52cab6551d8851d0f7506c112d4a94484928	refs/pull/70/head
d1e1b142b095780d90b1a5339007d4fd317bf8e9	refs/pull/71/head
4949dcf4dfa5f346aa9d744c35b0d55ca08e2c87	refs/pull/72/head
cf36bcc10769feffad223767a7c48f9b4941437c	refs/pull/73/head
986f3bfc94b6e5222369d80b07fe03d5bdec91fd	refs/pull/74/head
42358a4822cf97b2b26dced04628c302832af0c5	refs/pull/75/head
eb695d9c6d4f1437aef47a0658790e0fae96b1a2	refs/pull/76/head
982a3b0381f1943e599e2303144a04b1e1237232	refs/pull/77/head
55b880fef45ca73273f0006491bbf7748fc27aac	refs/pull/78/head
e6b65d1cf2d7f4c2e3a6cc8a010f255903208d5a	refs/pull/79/head
a44fb7ab83c6121d28f09ad2036d6c71e53d932e	refs/pull/8/head
9f2b7c89935fbefc70bf51a716d5314dc204e3d2	refs/pull/80/head
812d7efaade5bd1827668cb4a65012f139aeead8	refs/pull/81/head
d6857ad8ae5943631d5bc163c93a131927baf703	refs/pull/82/head
1fd965111fea900ae99abd334e9ca9a23d7b198b	refs/pull/83/head
7f4429eaedca79b270dfbcabcadd12a913a24f91	refs/pull/84/head
e0f0dca2ad235c80cbcf0c7e6044b574b976ae23	refs/pull/85/head
56d44404b81ac177b242f8bc5b76ddc0bc38f86d	refs/pull/86/head
334727bb87be8077513201917b6e514106f04bb9	refs/pull/87/head
48c7181e5197c370daa303728bb52a751152ae6e	refs/pull/88/head
81252b272a9aea221ce75cd8971c7ddf39459fbd	refs/pull/89/head
a0e8dc16a54819bc618e8ba492ff8b6e7450bea5	refs/pull/9/head
7b9f6717f07eecc238ff29adc4fbf83815ecc372	refs/pull/90/head
bf27e82893706b846182979836041a2b01702e9e	refs/pull/91/head
b534ad15baebb146cfc900ba9153bd01149beaa3	refs/pull/92/head
1b31f98a9342e535d0b01ad901ef73e3d89f3de7	refs/pull/93/head
30d85020101ad6c38e648aa039c4aa7ce1411eb4	refs/pull/94/head
a9de8a6ca151267214aacef27c84cdd1da75d896	refs/pull/95/head
801ff47657eaf8477aa231b105368a60fab6ab65	refs/pull/96/head
05064fab6693e6cfc07b09377687e0a2336458de	refs/pull/97/head
bab848f66f513fc43a8f6108049db424e02fdba4	refs/pull/98/head
8f472a8aadb948a78cf40075930e3af22ef09b27	refs/pull/99/head
b2e1fd0d8277bad288f7fed1b7f16dd0f3242202	refs/tags/v0.10.0
b746724eb7f2adbd254ebe66219d83fbad411326	refs/tags/v0.10.0^{}
a385a1c3612a61bb9987cfb9cc478da9853a0819	refs/tags/v0.11.0
2c3ef8cdb5068e47f818af0c2bb81c5a6a2b2056	refs/tags/v0.11.0^{}
2ed114811a879c13224109bbc71d722434a94d6c	refs/tags/v0.11.1
ac9af93d977500c7e08aa531b16827e2b6e238b7	refs/tags/v0.11.1^{}
bce046b7e02c4441cecd8595a1440bd9b9950152	refs/tags/v0.11.2
f9aceb26fbeb991794ca4deea20f05fb1950c344	refs/tags/v0.11.2^{}
732251a2c7d9d485fb4d96381b8599ac5f44425d	refs/tags/v0.11.3
64181cebba9566ad9649562ac45cffc243b12566	refs/tags/v0.11.3^{}
ddbcf4b82c29feea092eadfc24e25809e1cec2a1	refs/tags/v0.11.4
4a9f93c92eb5caaf9770370aa814c86e9cc54864	refs/tags/v0.11.4^{}
c9e4006b3f5d9000b9e6f9a4dc642499c3a1dd05	refs/tags/v0.8.0
28aed91489305f1326f19213f4c00e1a747a60cd	refs/tags/v0.8.0^{}
3f1d87cad55ff6d3784b73aa314af85cb6ea85a0	refs/tags/v0.8.1
5e29dc971c69ce8559580514b514d3c71cad577c	refs/tags/v0.8.1^{}
debb2014de56f972ec18c15caf624dec17df0e77	refs/tags/v0.8.2
446b9ff7a63559f0732e482c9554c7c6e1a8bb74	refs/tags/v0.8.2^{}
8f703482e7181eadf19d72f5763840ea0b999852	refs/tags/v0.8.3
1710cba5a4a1a09d6c20544e8532692cc125231e	refs/tags/v0.8.3^{}
a08df464cd3fe70a5edf42a874175ae7dfb4efd1	refs/tags/v0.8.4
097498718e97936ea0596082f3828dda8d0795e2	refs/tags/v0.8.4^{}
b7bfb90c070633e2ad11d0d6a90392839f576c9e	refs/tags/v0.9.0
a9d2fc1b53cc478b73f6a14d0586e3fd4098e939	refs/tags/v0.9.0^{}
4cf99857d114c5f19ba300733995f54499388e16	refs/tags/v0.9.1
eab109dbc4163b9f734da0d662eab0d5f0652363	refs/tags/v0.9.1^{}
14fc036f1941938f2e27b2fceb8298b924017da7	refs/tags/v0.9.2
ea748b4de02b91788436c33adb962b38a1a123b8	refs/tags/v0.9.2^{}
4a67312164fb3d4c0465c1fc2aaf776c9c421ed4	refs/tags/v0.9.3
761c420fa9812584e90750ca73197402603e76cc	refs/tags/v0.9.3^{}
fd43a6c79bbad727889cd26b852d5651c6f6b45b	refs/tags/v0.9.4
ed2869a4e5e23873113ddf15307146e1e0d077f7	refs/tags/v0.9.4^{}
ed031c4a4f128cd12faf7680b56052a26ae8e15e	refs/tags/v0.9.5
7ad7fad790dfabbe91a0be03a87c3f7e3d5cc8fd	refs/tags/v0.9.5^{}
01f2f6e9431c45b3180017ddfc12bbf5661cc184	refs/tags/v0.9.6
2fc0f8fb3ef640aaefc1d99f2b75ac45fd25286d	refs/tags/v0.9.6^{}
5a5f9e45ef868639db2cb2a64387464fda687a54	refs/tags/v0.9.7
a4b6ea57800458d44eb42622bb7ea55a07ae70a2	refs/tags/v0.9.7^{}
```

### Relevant log output

_No response_

### Other information

this is the repo that can be used for comparison, https://github.com/xenoterracide/gradle-semver.git","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/111,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TrGjE,jgit,2477549764,111,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-14T22:40:17Z,2024-11-14T22:40:17Z,"Running the equivalent git command for `git.lsRemote().setHeads(true).setTags(true).setRemote(""origin"").callAsMap()` yields:

```
$ git ls-remote --heads --tags https://github.com/xenoterracide/gradle-semver.git
48a09407ab3489acfe73f8a6576164a9293b68d2	refs/heads/chore/build-logic
7a93373f9e8f977b17efb84110398fb70936bf82	refs/heads/chore/sync-config
31673b1a39ec6adc36b8377277aa7af07f96045a	refs/heads/ci/generate-and-upload-dep-submit
3a0c102452c0e80abf85da0e1bcfeeed95b939a2	refs/heads/external/bug/ep
0bbe15192d55c81d0fa4593794872b5b74ccfcf3	refs/heads/external/bug/jgit-24
a24504ccf3ed41e91507ced4831fd53f29e8e329	refs/heads/feat/simplify-to-provider
288b40b3546673c7436014e3ce85afe18ee41bcc	refs/heads/main
83dd4f2753542316a142ac7c08edd6f5a027bd13	refs/heads/renovate/com.gradle.develocity-3.x
6c4a9651818e451604e4525cbb7b4354e231c38b	refs/heads/renovate/gradle-8.x
e8673335d1deca1e6a800f30c586af8da2d9ffb7	refs/heads/test/stringy-version-comparision
b2e1fd0d8277bad288f7fed1b7f16dd0f3242202	refs/tags/v0.10.0
b746724eb7f2adbd254ebe66219d83fbad411326	refs/tags/v0.10.0^{}
a385a1c3612a61bb9987cfb9cc478da9853a0819	refs/tags/v0.11.0
2c3ef8cdb5068e47f818af0c2bb81c5a6a2b2056	refs/tags/v0.11.0^{}
2ed114811a879c13224109bbc71d722434a94d6c	refs/tags/v0.11.1
ac9af93d977500c7e08aa531b16827e2b6e238b7	refs/tags/v0.11.1^{}
bce046b7e02c4441cecd8595a1440bd9b9950152	refs/tags/v0.11.2
f9aceb26fbeb991794ca4deea20f05fb1950c344	refs/tags/v0.11.2^{}
732251a2c7d9d485fb4d96381b8599ac5f44425d	refs/tags/v0.11.3
64181cebba9566ad9649562ac45cffc243b12566	refs/tags/v0.11.3^{}
ddbcf4b82c29feea092eadfc24e25809e1cec2a1	refs/tags/v0.11.4
4a9f93c92eb5caaf9770370aa814c86e9cc54864	refs/tags/v0.11.4^{}
c9e4006b3f5d9000b9e6f9a4dc642499c3a1dd05	refs/tags/v0.8.0
28aed91489305f1326f19213f4c00e1a747a60cd	refs/tags/v0.8.0^{}
3f1d87cad55ff6d3784b73aa314af85cb6ea85a0	refs/tags/v0.8.1
5e29dc971c69ce8559580514b514d3c71cad577c	refs/tags/v0.8.1^{}
debb2014de56f972ec18c15caf624dec17df0e77	refs/tags/v0.8.2
446b9ff7a63559f0732e482c9554c7c6e1a8bb74	refs/tags/v0.8.2^{}
8f703482e7181eadf19d72f5763840ea0b999852	refs/tags/v0.8.3
1710cba5a4a1a09d6c20544e8532692cc125231e	refs/tags/v0.8.3^{}
a08df464cd3fe70a5edf42a874175ae7dfb4efd1	refs/tags/v0.8.4
097498718e97936ea0596082f3828dda8d0795e2	refs/tags/v0.8.4^{}
b7bfb90c070633e2ad11d0d6a90392839f576c9e	refs/tags/v0.9.0
a9d2fc1b53cc478b73f6a14d0586e3fd4098e939	refs/tags/v0.9.0^{}
4cf99857d114c5f19ba300733995f54499388e16	refs/tags/v0.9.1
eab109dbc4163b9f734da0d662eab0d5f0652363	refs/tags/v0.9.1^{}
14fc036f1941938f2e27b2fceb8298b924017da7	refs/tags/v0.9.2
ea748b4de02b91788436c33adb962b38a1a123b8	refs/tags/v0.9.2^{}
4a67312164fb3d4c0465c1fc2aaf776c9c421ed4	refs/tags/v0.9.3
761c420fa9812584e90750ca73197402603e76cc	refs/tags/v0.9.3^{}
fd43a6c79bbad727889cd26b852d5651c6f6b45b	refs/tags/v0.9.4
ed2869a4e5e23873113ddf15307146e1e0d077f7	refs/tags/v0.9.4^{}
ed031c4a4f128cd12faf7680b56052a26ae8e15e	refs/tags/v0.9.5
7ad7fad790dfabbe91a0be03a87c3f7e3d5cc8fd	refs/tags/v0.9.5^{}
01f2f6e9431c45b3180017ddfc12bbf5661cc184	refs/tags/v0.9.6
2fc0f8fb3ef640aaefc1d99f2b75ac45fd25286d	refs/tags/v0.9.6^{}
5a5f9e45ef868639db2cb2a64387464fda687a54	refs/tags/v0.9.7
a4b6ea57800458d44eb42622bb7ea55a07ae70a2	refs/tags/v0.9.7^{}
```

Which also doesn't contain `HEAD`. Hence I think there is no problem with the JGit implementation in `LsRemoteCommand`. 

The equivalent jgit command `$jgit ls-remote --heads --tags https://github.com/xenoterracide/gradle-semver.git` yields the exact same result.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6TrGjE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/111,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ULezu,jgit,2486037742,111,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-11-19T15:30:21Z,2024-11-19T15:30:21Z,"right, but there's also no api to retrieve it (that I could see) the symref cli you showed in the other ticket is not exposed via the java api. whereas git gives you `288b40b3546673c7436014e3ce85afe18ee41bcc	HEAD` by default with no options.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ULezu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/111,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UhAB_,jgit,2491678847,111,NA,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,NA,2024-11-21T16:16:43Z,2024-11-21T16:16:43Z,"it's worth saying that I now believe HEAD will show up if the `HEAD` ref exists on the disk. It doesn't show up like it will in git if it doesn't exist on disk. It turns out that clone will add it to disk, but that `git remote add .../ git fetch` will not. `git ls-remote` will show `HEAD` either way. 

My api usage may not reflect the desired outcome which is arguably that no options should return more, and it appeared to return less, and that no options appear to result in the same output that git itself can give.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UhAB_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,jgit,2662707912,112,"Optionally, ignore user and system config",reitzig,4246780,Raphael,,CLOSED,2024-11-15T17:45:10Z,2024-12-02T07:25:48Z,"### Description

I would like be able to suppress the default behaviour of JGit parsing `~/.gitconfig`.

### Motivation

We run integration tests of our application against a testcontainer. During those tests, we clone a repository from that server and perform commits.

JGit inadvertantly uses my `~/.gitconfig` which includes settings that 

- are irrelevant for this test, 
- create unnecessary brittleness (different devs have different Git configs), _and_ 
- are not all supported by JGit (e.g. commit signing with SSH keys), leading to false-red tests.

### Alternatives considered

In a very old discussion thread, mention was made of overwriting `$HOME` and similar variables. That seems like using a sledgehammer, and I'm not sure how to even _do_ this in a JUnit test context without untold numbers of side-effects.

In principle, I could at least avoid _red_ tests by tuning my local config so that the tests run through. Unfortunately, `includeIf` is not supported either #9. Even if, we'd still couple tests to host config -- meh.

### Additional context

I searched for and through the docs, but encountered a couple of 404s. I could not find any mention of how to configure JGit at all, which makes me suspicious. Did I miss something?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6lHc,jgit,2481607132,112,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-17T21:42:27Z,2024-11-17T21:42:27Z,"You can install a custom `SystemReader` to load global git config files from another file, or not load them.
JGit tests do that using its [`MockSystemReader`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/MockSystemReader.java#L42).

If this mock doesn't match your needs you can implement your own, [`SystemReader.Delegate`](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/util/SystemReader.java#L189) simplifies this, you only need to override the methods you want to change.

Install a SystemReader which loads config files from a temp directory:
```
    SystemReader oldSystemReader = SystemReader.getInstance();
    SystemReader.setInstance(
        new SystemReader.Delegate(oldSystemReader) {
          @Override
          public FileBasedConfig openJGitConfig(Config parent, FS fs) {
            return new FileBasedConfig(parent, new File(tempDir, ""jgit.config""), FS.detect());
          }

          @Override
          public FileBasedConfig openUserConfig(Config parent, FS fs) {
            return new FileBasedConfig(parent, new File(tempDir, ""user.config""), FS.detect());
          }

          @Override
          public FileBasedConfig openSystemConfig(Config parent, FS fs) {
            return new FileBasedConfig(parent, new File(tempDir, ""system.config""), FS.detect());
          }
        });
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6lHc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sCk,jgit,2481635492,112,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-17T22:29:28Z,2024-11-17T22:29:28Z,"If you want to skip some of these config files you can return a dummy FileBasedConfig:

```
return new FileBasedConfig(parent, null, fs) {
	@Override
	public void load() {}

	@Override
	public boolean isOutdated() {
		return false;
	}
};
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sCk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sge,jgit,2481637406,112,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-11-17T22:34:20Z,2024-11-17T22:34:20Z,JGit supports the [`GIT_CONFIG_NOSYSTEM`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-GITCONFIGNOSYSTEM) environment variable,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6T6sge/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/112,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UCh-1,jgit,2483691445,112,NA,reitzig,4246780,Raphael,,NA,2024-11-18T17:32:22Z,2024-11-18T17:32:22Z,"Thank  you, that was helpful! 🙏","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6UCh-1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/113,https://api.github.com/repos/eclipse-jgit/jgit/issues/113,jgit,2680348995,113,Annotate RemoteConfig with Nullity annotations,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,OPEN,2024-11-21T17:38:43Z,2024-11-21T17:38:43Z,"### Description

simply add `@NonNull`/`@Nullable` to the `RemoteConfig` class

### Motivation

I'm getting an unsafe null, my `headBranch` method parameter @NonNull

```java
      .map(s -> s.map(r -> { // r is RemoteConfig
        var name = r.getName();
        return new RemoteImpl(name, this.headBranch(name));
      }))
```

```
/home/xeno/IdeaProjects/gradle-semver/module/semver/src/main/java/com/xenoterracide/gradle/semver/internal/GitMetadataImpl.java:181: error: [NullAway] passing @Nullable parameter 'this.headBranch(name)' where @NonNull is required
        return new RemoteImpl(name, this.headBranch(name));
                                                   ^
    (see http://t.uber.com/nullaway )
```

### Alternatives considered

I'm going to have to check for null... I'm not certain that it's actually possible for the name to be null, doesn't seem likely on a correct config, but maybe someone knows something I don't. I've noticed other objects are comprehensively annotated.

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/113/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/114,https://api.github.com/repos/eclipse-jgit/jgit/issues/114,jgit,2686528398,114,Add module-info / JPMS support,miasma,2247811,,,OPEN,2024-11-23T20:13:26Z,2024-11-23T20:13:26Z,"### Description

As you might know, the pre-9 versions of Java are running out of support quiet soon. Oracle provides extended support for JDK 8 until the end of 2030 according to https://www.oracle.com/java/technologies/java-se-support-roadmap.html. Many distributions have already switched to Java 17 as a default and a jump to Java 21 will be expected in less than 2 years.

Later versions support project jigsaw modules / JPMS. Many libraries have already added support. For instance, Apache commons libraries provide module-info, JavaEWAH which is one of jgit's dependencies provides module-info. Consider adding support for module-info, at least for org.eclipse.jgit core. 

The only challenge here is to think which packages would be exposed as part of the public API.

I've included an example here: [module-info.txt](https://github.com/user-attachments/files/17882413/module-info.txt)
This exposes all the packages, which might not be optimal.
You'll also need a way to write the module-info. If it's not included in the src/ folder, you can use something like this: https://github.com/lemire/javaewah/blob/master/pom.xml#L135

### Motivation

If done properly, adding module-info would not break any existing use cases (see the example I linked). Including module-info.class in the jar means Java 9+ projects can easily use the library with jlink and without need for workarounds. Automatic modules won't solve the issue with jlink.

### Alternatives considered

1. Moditect
2. Forking the project

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/115,https://api.github.com/repos/eclipse-jgit/jgit/issues/115,jgit,2713511510,115,Test MergeToolTest#testEmptyToolName started failing long time after it was implemented,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,OPEN,2024-12-02T22:16:07Z,2024-12-03T07:43:21Z,"### Version

stable-6.10 (f27ea51026)

### Operating System

Linux/Unix

### Bug description

The test which is only run on Linux succeeded many times after it was implemented in https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/140275. 

Since last week it started failing with an assertion error, see e.g. https://ci.eclipse.org/jgit/job/stable/job/jgit.gerrit-pipeline.java11/3016/consoleFull.

Maybe the failure is caused by some change in the build environment or configuration which is used on the CI system.

### Actual behavior

The test fails reproducibly

### Expected behavior

The test should succeed

### Relevant log output

```Shell
03:34:38  [ERROR] Tests run: 11, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.562 s <<< FAILURE! -- in org.eclipse.jgit.pgm.MergeToolTest
03:34:38  [ERROR] org.eclipse.jgit.pgm.MergeToolTest.testEmptyToolName -- Time elapsed: 0.709 s <<< FAILURE!
03:34:38  org.junit.ComparisonFailure: Expected no standard error output from tool 
expected:<[compare[: unrecognized option `-wait' @ error/compare.c/CompareImageCommand/1123., compare: unrecognized option `-wait' @ error/compare.c/CompareImageCommand/1123].]> 
but was:<[compare[-im6.q16: unrecognized option `-wait' @ error/compare.c/CompareImageCommand/1131., compare-im6.q16: unrecognized option `-wait' @ error/compare.c/CompareImageCommand/1131].]>
03:34:38  	at org.junit.Assert.assertEquals(Assert.java:117)
03:34:38  	at org.eclipse.jgit.pgm.ToolTestCase.runAndCaptureUsingInitRaw(ToolTestCase.java:112)
03:34:38  	at org.eclipse.jgit.pgm.ToolTestCase.runAndCaptureUsingInitRaw(ToolTestCase.java:79)
03:34:38  	at org.eclipse.jgit.pgm.MergeToolTest.testEmptyToolName(MergeToolTest.java:96)
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/115,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6VzEbE,jgit,2513192644,115,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-02T23:31:11Z,2024-12-02T23:31:11Z,Change disabling this test to unblock other unrelated changes until the cause of this test failure is found and fixed: https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1205021,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6VzEbE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/115,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V1R4E,jgit,2513772036,115,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-03T07:43:19Z,2024-12-03T07:43:19Z,"The test assumes a particular stderr output from an external program. Looks like we now have a different version of that external program, which produces a slightly different stderr output.

This is most likely a result of the [OS change on the Jenkins agents](https://www.eclipse.org/lists/cross-project-issues-dev/msg19990.html). Our tests now run on Ubuntu 24.04.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6V1R4E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/116,https://api.github.com/repos/eclipse-jgit/jgit/issues/116,jgit,2719586880,116,Skip & offset not applied when an explicit filter like NO_MERGES is set for LogCommand,parasharjoshi,7237595,,,OPEN,2024-12-05T07:24:45Z,2024-12-05T13:38:25Z,"### Version

6.7.0

### Operating System

Linux/Unix, Windows

### Bug description

When a log command is set with an explicit RevFilter like NO_MERGES or ONLY_MERGES, the properties of maxCount & skip set via the setters is ignored/overridden.

Code block which is expected to set the maxCount & skip is 
```
LogCommand logCommand = git.log();
Iterable<RevCommit> logResult = 
    logCommand
        .setSkip(10)
        .setMaxCount(10)
        .setRevFilter(RevFilter.NO_MERGES)
        .call();
```
This filters out merge commits but does not skip or limit the results as specified in the setters.

The work around is to set the skip and max RevFilters explicitly in the filter order as following

```
List revFilters = new  ArrayList();
    revFilters.add(RevFilter.NO_MERGES);// Exclude Merge commits
    revFilters.add(SkipRevFilter.create(10)); // skip
    revFilters.add(MaxCountRevFilter.create(10)); // maxCount
    
Iterable<RevCommit> logResult = 
    logCommand
        .setRevFilter(AndRevFilter.create(revFilters))
        .call();
```

This is not obvious and not a documented behaviour hence logging this bug.

### Actual behavior

The set skip & maxCount are not applied to the LogCommand results

### Expected behavior

The set skip & maxCount are applied to the LogCommand results.

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,jgit,2719632341,117,Revert commit message is inconsistent with c-git,parasharjoshi,7237595,,,CLOSED,2024-12-05T07:42:25Z,2024-12-19T15:30:44Z,"### Version

6.7.0

### Operating System

Linux/Unix, Windows

### Bug description

The Revert commit message of Jgit is not consistent with the command line git revert operation.

Jgit uses the full commit message in revert  commit message where as the command line git uses just the first line of commit message.

While reverting a following commit with message 

```
This is a multi-line commit message to test revert on Jgit & c-Git.
With some text on line 2.
And some more text on line 3.
```

Jgit revert commit message is 

```
commit 3142ef1f3345084fde2c23111208f2760e618244 (HEAD -> jGitRevert)
Author: Parashar Joshi <parashar.joshi@oracle.com>
Date:   Thu Dec 5 13:09:15 2024 +0530

    Revert ""This is a multi-line commit message to test revert on Jgit & c-Git. With some text on line 2. And some more text on line 3.""

    This reverts commit 1286a7ea850f01a47c63b09e42912f9643214f92.
```

Command line revert message is 
```
commit f9c16b9368f9da50e820cc6f2355b487859f5182 (HEAD -> cGitRevert)
Author: Parashar Joshi <parashar.joshi@oracle.com>
Date:   Thu Dec 5 13:06:21 2024 +0530

    Revert ""This is a multi-line commit message to test revert on Jgit & c-Git.""

    This reverts commit 1286a7ea850f01a47c63b09e42912f9643214f92.
```



### Actual behavior

Revert commit message of Jgit & c-git are not the same

### Expected behavior

Revert commit message of Jgit & c-git are same

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WNCfK,jgit,2520000458,117,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-05T11:08:21Z,2024-12-05T11:08:21Z,"Agreed; C git uses only the first line of the commit subject (i.e., the first line of the commit message). JGit uses the first paragraph (everything up to the first empty line (two `\n`s), with line feeds inside that paragraph replaced by spaces. That's the usual format, used also in `git log --oneline`.

But the C git sequencer (which executes the revert) trims that to the first line only. See https://github.com/git/git/blob/23692e08c638/sequencer.c#L496-L498 . `find_commit_subject` extracts that first paragraph into `&subject`, and returns the position of the first line feed.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WNCfK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XO3K-,jgit,2537255614,117,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-11T21:44:07Z,2024-12-11T21:44:07Z,[Gerrit change 1205612](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1205612) fixes this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XO3K-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Xab3-,jgit,2540289534,117,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-13T00:39:01Z,2024-12-13T00:39:01Z,Fix merged to master as e9094fffdb9d5d498cf75584267d1fd7e3690374,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Xab3-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/117,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YRKfe,jgit,2554636254,117,NA,parasharjoshi,7237595,,,NA,2024-12-19T15:30:43Z,2024-12-19T15:30:43Z,Thank you.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YRKfe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/118,https://api.github.com/repos/eclipse-jgit/jgit/issues/118,jgit,2727273963,118,agent capability is not advertised in git-upload-pack when using protocol v2,syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,CLOSED,2024-12-09T14:44:38Z,2024-12-10T16:22:06Z,"### Version

6.10.0

### Operating System

MacOS

### Bug description

Perform a `git clone` using a client having protocol v2 enabled against a Gerrit with a git protocol v2 enabled (we used a 
gerrit 3.10.0, where `protocol.version = 2` was configured in `etc/jgit.config`). Use tracing to trace network operations.

```
GIT_TRACE_PACKET=1 git clone ""ssh://admin@localhost:29418/test""
```




### Actual behavior

The agent capability is not advertised.

```
GIT_TRACE_PACKET=1 git clone ""ssh://admin@localhost:29418/test""
Cloning into 'test'...
15:31:55.205134 pkt-line.c:80           packet:        clone< version 2
15:31:55.207178 pkt-line.c:80           packet:        clone< ls-refs
15:31:55.207186 pkt-line.c:80           packet:        clone< fetch=shallow
15:31:55.207191 pkt-line.c:80           packet:        clone< server-option
15:31:55.207195 pkt-line.c:80           packet:        clone< 0000
15:31:55.207203 pkt-line.c:80           packet:        clone> command=ls-refs
15:31:55.207212 pkt-line.c:80           packet:        clone> 0001
15:31:55.207218 pkt-line.c:80           packet:        clone> peel
15:31:55.207236 pkt-line.c:80           packet:        clone> symrefs
15:31:55.207241 pkt-line.c:80           packet:        clone> ref-prefix HEAD
15:31:55.207244 pkt-line.c:80           packet:        clone> ref-prefix refs/heads/
15:31:55.207248 pkt-line.c:80           packet:        clone> ref-prefix refs/tags/
15:31:55.207250 pkt-line.c:80           packet:        clone> 0000
15:31:55.213012 pkt-line.c:80           packet:        clone< 5dec62ce36a795b4e6738077f69e1fcd9e850138 HEAD symref-target:refs/heads/master
15:31:55.213084 pkt-line.c:80           packet:        clone< 5dec62ce36a795b4e6738077f69e1fcd9e850138 refs/heads/master
15:31:55.213103 pkt-line.c:80           packet:        clone< 0000
15:31:55.217420 pkt-line.c:80           packet:        clone> command=fetch
15:31:55.217439 pkt-line.c:80           packet:        clone> 0001
15:31:55.217443 pkt-line.c:80           packet:        clone> thin-pack
15:31:55.217447 pkt-line.c:80           packet:        clone> ofs-delta
15:31:55.217462 pkt-line.c:80           packet:        clone> want 5dec62ce36a795b4e6738077f69e1fcd9e850138
15:31:55.217467 pkt-line.c:80           packet:        clone> want 5dec62ce36a795b4e6738077f69e1fcd9e850138
15:31:55.217471 pkt-line.c:80           packet:        clone> done
15:31:55.217473 pkt-line.c:80           packet:        clone> 0000
15:31:55.222977 pkt-line.c:80           packet:        clone< packfile
15:31:55.226972 pkt-line.c:80           packet:     sideband< \2Counting objects: 1   \15
15:31:55.227089 pkt-line.c:80           packet:     sideband< \2Counting objects: 2, done
remote: Counting objects: 2, done
15:31:55.227097 pkt-line.c:80           packet:     sideband< \2Finding sources:  50% (1/2)   \15
15:31:55.227104 pkt-line.c:80           packet:     sideband< \2Finding sources: 100% (2/2)   \15
15:31:55.227110 pkt-line.c:80           packet:     sideband< \2Finding sources: 100% (2/2)
remote: Finding sources: 100% (2/2)
15:31:55.227116 pkt-line.c:80           packet:     sideband< PACK ...
15:31:55.227125 pkt-line.c:80           packet:     sideband< \2Total 2 (delta 0), reused 0 (delta 0)
remote: Total 2 (delta 0), reused 0 (delta 0)
15:31:55.227131 pkt-line.c:80           packet:     sideband< 0000
Receiving objects: 100% (2/2), done.
```

### Expected behavior

The server advertises the `agent` capability, as it does when using git protocol v0 or v1.
This is documented [by the protocol](https://git-scm.com/docs/protocol-v2#_agent)

### Relevant log output

_No response_

### Other information

This works when setting client or server to work on a git protocol that is not v2, for example, notice how the following advertises the agent:

```
GIT_TRACE_PACKET=1 git clone -c'protocol.version=1' ""ssh://admin@localhost:29418/test""
Cloning into 'foofa'...
15:37:13.458082 pkt-line.c:80           packet:        clone< 5dec62ce36a795b4e6738077f69e1fcd9e850138 HEAD\0 include-tag multi_ack_detailed multi_ack ofs-delta side-band side-band-64k thin-pack no-progress shallow agent=JGit/v6.9.0.202403050737-r-23-gc0b415fb0 symref=HEAD:refs/heads/master
15:37:13.460338 pkt-line.c:80           packet:        clone< cc8291fdc783f382d7ed3cb86b917bdab3940bcb refs/changes/01/1/1
15:37:13.460359 pkt-line.c:80           packet:        clone< fd0c9f20131a10cc7cdf68b5347a393a93bf6ddd refs/changes/01/1/meta
15:37:13.460365 pkt-line.c:80           packet:        clone< 5dec62ce36a795b4e6738077f69e1fcd9e850138 refs/heads/master
15:37:13.460370 pkt-line.c:80           packet:        clone< 193a9ce77013f0e9f5b9cf6dfb2f75a920136f7a refs/meta/config
15:37:13.460375 pkt-line.c:80           packet:        clone< 0000
15:37:13.463801 pkt-line.c:80           packet:        clone> want 5dec62ce36a795b4e6738077f69e1fcd9e850138 multi_ack_detailed side-band-64k thin-pack ofs-delta agent=git/2.39.3.(Apple.Git-146)
15:37:13.463827 pkt-line.c:80           packet:        clone> want 5dec62ce36a795b4e6738077f69e1fcd9e850138
15:37:13.463837 pkt-line.c:80           packet:        clone> 0000
15:37:13.463849 pkt-line.c:80           packet:        clone> done
15:37:13.470006 pkt-line.c:80           packet:        clone< NAK
15:37:13.474266 pkt-line.c:80           packet:     sideband< \2Counting objects: 1   \15
15:37:13.474380 pkt-line.c:80           packet:     sideband< \2Counting objects: 2, done
remote: Counting objects: 2, done
15:37:13.474385 pkt-line.c:80           packet:     sideband< \2Finding sources:  50% (1/2)   \15
15:37:13.474389 pkt-line.c:80           packet:     sideband< \2Finding sources: 100% (2/2)   \15
15:37:13.474393 pkt-line.c:80           packet:     sideband< \2Finding sources: 100% (2/2)
remote: Finding sources: 100% (2/2)
15:37:13.474400 pkt-line.c:80           packet:     sideband< PACK ...
15:37:13.474406 pkt-line.c:80           packet:     sideband< \2Total 2 (delta 0), reused 0 (delta 0)
remote: Total 2 (delta 0), reused 0 (delta 0)
15:37:13.474410 pkt-line.c:80           packet:     sideband< 0000
Receiving objects: 100% (2/2), done.
```

Also, performing a git protocol v2 clone against github, shows the agent as expected:

```
GIT_TRACE_PACKET=1 git clone git@github.com:GerritForge/homebrew-gerrit.git
Cloning into 'homebrew-gerrit'...
15:39:56.614665 pkt-line.c:80           packet:        clone< version 2
15:39:56.617324 pkt-line.c:80           packet:        clone< agent=git/github-50ee4bdaf298
15:39:56.617335 pkt-line.c:80           packet:        clone< ls-refs=unborn
15:39:56.617340 pkt-line.c:80           packet:        clone< fetch=shallow wait-for-done filter
15:39:56.617346 pkt-line.c:80           packet:        clone< server-option
15:39:56.617350 pkt-line.c:80           packet:        clone< object-format=sha1
15:39:56.617354 pkt-line.c:80           packet:        clone< 0000
15:39:56.617370 pkt-line.c:80           packet:        clone> command=ls-refs
15:39:56.617394 pkt-line.c:80           packet:        clone> agent=git/2.39.3.(Apple.Git-146)
15:39:56.617402 pkt-line.c:80           packet:        clone> object-format=sha1
15:39:56.617406 pkt-line.c:80           packet:        clone> 0001
15:39:56.617410 pkt-line.c:80           packet:        clone> peel
15:39:56.617414 pkt-line.c:80           packet:        clone> symrefs
15:39:56.617419 pkt-line.c:80           packet:        clone> unborn
15:39:56.617427 pkt-line.c:80           packet:        clone> ref-prefix HEAD
15:39:56.617432 pkt-line.c:80           packet:        clone> ref-prefix refs/heads/
15:39:56.617436 pkt-line.c:80           packet:        clone> ref-prefix refs/tags/
15:39:56.617457 pkt-line.c:80           packet:        clone> 0000
15:39:56.785581 pkt-line.c:80           packet:        clone< be8cb94880285b13b7bbcf359e26b6655832f0ab HEAD symref-target:refs/heads/master
15:39:56.785656 pkt-line.c:80           packet:        clone< be8cb94880285b13b7bbcf359e26b6655832f0ab ref
...
```
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/118,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WtAT8,jgit,2528380156,118,NA,syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,NA,2024-12-09T15:30:44Z,2024-12-09T15:30:44Z,https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1205032,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6WtAT8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/118,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6W7liu,jgit,2532202670,118,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-10T16:22:06Z,2024-12-10T16:22:06Z,merged as 2b229df06c94fa351ce00227a107835e3b21f5ce,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6W7liu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,jgit,2729225834,119,Blame command returns null result for gradle module,unkali,40874971,Kapil Mangtani,,CLOSED,2024-12-10T07:14:59Z,2024-12-19T18:04:34Z,"### Version

All versions after 5.5.1

### Operating System

MacOS

### Bug description

I have a gradle project with the following repository structure (Java version : 17)
```
my-api
    .github/
    .idea/
    gradle/
    .gitignore
    settings.gradle
    my-api
        build.gradle
        src
            main
                java
                    com.example
                        Application.java
```
The blame command works for files which are direct children of `my-api` except for any files under `my-api/my-api` module.
Please see the following code that I am using to check this behaviour
```
public class Jgit {

    static final String REPO = ""/Users/kapil-mangtani/IdeaProjects/my-api/.git"";
    static final String PATH1 = ""settings.gradle"";
    static final String PATH2 = "".github/workflows/build-deploy-dev.yml"";
    static final String PATH3 = ""my-api/src/main/java/com/example/Application.java"";

    public static void main(String[] args) throws Exception {
        FileRepositoryBuilder builder = new FileRepositoryBuilder();
        Git git = new Git(builder.setGitDir(new File(REPO)).readEnvironment().findGitDir().build());

        BlameCommand blameCommand = git.blame().setFilePath(PATH1);
        BlameResult result = blameCommand.call();
        assert result != null;   // TRUE

        BlameCommand blameCommand1 = git.blame().setFilePath(PATH2);
        BlameResult result1 = blameCommand1.call();
        assert result1 != null;  // TRUE

        BlameCommand blameCommand2 = git.blame().setFilePath(PATH3);
        BlameResult result2 = blameCommand2.call();
        assert result2 != null;  // FALSE for versions above 5.5.1
}
```
In my build.gradle file, I have
`implementation 'org.eclipse.jgit:org.eclipse.jgit:<version>'`


Now when the `version` is 5.5.1 or below, `result2` is not null and contains the blame result, but any version after that eg. 5.13.3, or 6.2.0 or even the latest one 7.1.0 returns the result2 as null. I have verified the same behaviour using the standalone sh file as well for the same versions using the `blame -w` command

### Actual behavior

blame result is null as seen in the code snippet above

### Expected behavior

blame result to be non-null with author and commit information (as seen in versions 5.5.1 and prior)

### Relevant log output

_No response_

### Other information

Public repo for reproducing this behaviour: https://github.com/kapman17/jgit-test/tree/failure

Additional information: I have found that using a [gradle plugin to manage Git hooks](https://github.com/jakemarsden/git-hooks-gradle-plugin) causes this issue. When I remove the plugin, the blame command works just fine.

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XLlM1,jgit,2536395573,119,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-11T15:57:57Z,2024-12-11T15:57:57Z,Please provide a Github public repo with which one can reproduce this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XLlM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XuNQq,jgit,2545472554,119,NA,unkali,40874971,Kapil Mangtani,,NA,2024-12-16T12:15:19Z,2024-12-16T12:15:19Z,"@tomaswolf Please check out this repo : https://github.com/kapman17/jgit-test/tree/failure

I have narrowed down the issue to a gradle plugin for managing git hooks in the repository. The plugin is `'com.github.jakemarsden.git-hooks` (link: https://github.com/jakemarsden/git-hooks-gradle-plugin). The main branch of the repo above does not have the plugin and the blame command works fine there (see [Jgit.java](https://github.com/kapman17/jgit-test/blob/failure/demo/src/main/java/com/example/demo/Jgit.java)) . However, if you switch to the `failure` branch, you can easily reproduce the above issue. 

On the failure branch, blame command returns null with version above 5.5.1 ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XuNQq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6X4yPy,jgit,2548245490,119,NA,tomaswolf,8580452,Thomas Wolf,,NA,2024-12-17T11:47:37Z,2024-12-17T11:47:37Z,"This is a gradle configuration problem.

The `com.github.jakemarsden.git-hooks` plug-in as configured generates its hook at `jgit-test/demo/.git/hooks/pre-push`. Because there is a `.git` directory inside `demo` then, JGit treats `demo` as a nested git repository and does not traverse into that folder.

You need to configure that plug-in in `demo/build.gradle` to generate its hook file in the correct place like this 
```
gitHooks {
	hooks = ['pre-push': 'spotlessCheck']
	hooksDirectory = file('../.git/hooks')
}
```

Then everything works fine.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6X4yPy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/119,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YUUg9,jgit,2555463741,119,NA,unkali,40874971,Kapil Mangtani,,NA,2024-12-19T18:04:32Z,2024-12-19T18:04:32Z,"that makes sense, thanks @tomaswolf !","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YUUg9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/120,https://api.github.com/repos/eclipse-jgit/jgit/issues/120,jgit,2738424017,120,MissingObjectException when running git status after adding an empty directory to jgit,MohammedKHC0,177458955,,contact.mohammedkhc@gmail.com,OPEN,2024-12-13T13:37:26Z,2024-12-13T14:43:18Z,"### Version

7.1.0

### Operating System

Linux/Unix

### Bug description

Run the following commands to reproduce

1. jgit init
2. mkdir test
3. jgit add test
4. jgit status

It crash with MissingObjectException unknown object 00000000000000000

### Actual behavior

It crash with MissingObjectException unknown object 00000000000000000

### Expected behavior

Work just like actual c git, if you run the same commands it won't crash.

### Relevant log output

_No response_

### Other information

I think in order to fix the bug. Before adding a directory check if it's not empty.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/120/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/120,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XfelW,jgit,2541611350,120,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-13T14:43:17Z,2024-12-13T14:43:17Z,"I tried using the tip of the master branch and couldn't reproduce the problem.
Running add on an empty folder shouldn't do anything because git only tracks files but not directories.
This means after the add command the repository is still empty and running find on the .git directory finds no objects:

```
$ find .git/
.git/
.git/config
.git/objects
.git/objects/pack
.git/objects/info
.git/HEAD
.git/logs
.git/logs/refs
.git/logs/refs/heads
.git/hooks
.git/refs
.git/refs/heads
.git/refs/tags
.git/index
.git/branches
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6XfelW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/121,https://api.github.com/repos/eclipse-jgit/jgit/issues/121,jgit,2739948126,121,Nullity annotations on .api,xenoterracide,5517,Caleb Cushing,caleb.cushing@gmail.com,OPEN,2024-12-14T15:31:28Z,2024-12-14T15:34:56Z,"### Description

I notice that jgit's use of NonNullApi support is incomplete... specifically `.api` is not annotated and methods may return null. 

This request is to annotate the api package.

Additionally it would be nice if you switched to or additionally included `@Nullmarked` either from jspecify or adding that annotation yourself

### Motivation

Not having this prevents tools like errorprone with nullaway from working correctly. Also, adding `Nullmarked` is supported by nullaway for autodetection, where at the time of this writing `NonNullApi` is not https://github.com/uber/NullAway/issues/1084 . In lieu of using `Nullmarked` I have to look at the source and then manually include/exclude subpackages that are marked.

### Alternatives considered

_No response_

### Additional context

I'd be happy to do a partial PR for the methods I know about, and add the `NullMarked` or include jspecify.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/122,https://api.github.com/repos/eclipse-jgit/jgit/issues/122,jgit,2750760266,122,Add command for missing files is inconsistent with c-git,parasharjoshi,7237595,,,OPEN,2024-12-19T15:51:49Z,2025-02-08T22:00:09Z,"### Version

6.7.0

### Operating System

Linux/Unix, Windows

### Bug description

When executing an add operation/command, the command line git by default removes the missing files from index where as the JGit does not.

The steps for comparison are 

1. Create a new file
2. Add the file to index
3. Delete the file with `rm`
4. Add the file for removal from index

```
$ git status
On branch Test1
Your branch is up to date with 'origin/Test1'.

nothing to commit, working tree clean

$ echo ""Test file for missing in index"" > test2.txt

$ git status
On branch Test1
Your branch is up to date with 'origin/Test1'.

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)
        test2.txt

nothing added to commit but untracked files present (use ""git add"" to track)

$ git add test2.txt
warning: in the working copy of 'test2.txt', LF will be replaced by CRLF the next time Git touches it

$ rm -f test2.txt

$ git status
On branch Test1
Your branch is up to date with 'origin/Test1'.

Changes to be committed:
  (use ""git restore --staged <file>..."" to unstage)
        new file:   test2.txt

Changes not staged for commit:
  (use ""git add/rm <file>..."" to update what will be committed)
  (use ""git restore <file>..."" to discard changes in working directory)
        deleted:    test2.txt


$ git add test2.txt

$ git status
On branch Test1
Your branch is up to date with 'origin/Test1'.

nothing to commit, working tree clean

$

```

Notice that the second add command after delete of file removes the file from staged/index by default.

To replicate the same with JGit used the snippet

```
 public void simulateMissingFilesAdd(String dotFilename) throws IOException, GitAPIException{
        Git git = getGitRepo(dirPath);
        String filePath = dirPath+""/""+dotFilename;
        
        //create a dot file and add to index to the repo
        try ( PrintWriter writer = new PrintWriter(filePath, ""UTF-8"")) 
        {
            writer.println(""Line1 text"");
            writer.println(""Line2 text"");
        }
        System.out.println(""Created file ""+dotFilename+ "" and adding it ..."");
        git.add().setUpdate(false).addFilepattern(""."").call();
        printStatus(git);

        System.out.println(""Deleting file ""+dotFilename+ "" ..."");
        // remove dot file and add
        File file = new File(filePath);
        file.delete();
        printStatus(git);

        System.out.println(""Adding file ""+dotFilename+ "" ..."");
        git.add().setUpdate(false).addFilepattern(dotFilename).call();
        git.commit().setMessage(""After removing the file ""+dotFilename).call();
        System.out.println(""Committed removal of file ""+dotFilename+ "" ..."");
        printStatus(git);
    } 
    
    void printStatus(Git git) throws GitAPIException{
        Status status = git.status().call();
        System.out.println(""\nClean : ""+status.isClean());
        System.out.println(""getAdded : ""+status.getAdded());
        System.out.println(""getMissing : ""+status.getMissing());
        System.out.println(""getRemoved : ""+status.getRemoved());
        System.out.println(""getUncommittedChanges : ""+status.getUncommittedChanges());
        System.out.println(""getUntracked : ""+status.getUntracked());
    }

```

And results are of the run.

```
--- exec-maven-plugin:3.1.0:exec (default-cli) @ JGitOps ---
Set repo for : D:/JgitRepos/MissingFiles
Created file reproMissingFile.txt and adding it ...

Clean : false
getAdded : [reproMissingFile.txt]
getMissing : []
getRemoved : []
getUncommittedChanges : [reproMissingFile.txt]
getUntracked : []
Deleting file reproMissingFile.txt ...

Clean : false
getAdded : [reproMissingFile.txt]
getMissing : [reproMissingFile.txt]
getRemoved : []
getUncommittedChanges : [reproMissingFile.txt]
getUntracked : []
Adding file reproMissingFile.txt ...
Committed removal of file reproMissingFile.txt ...

Clean : false
getAdded : []
getMissing : [reproMissingFile.txt]
getRemoved : []
getUncommittedChanges : [reproMissingFile.txt]
getUntracked : []
Closed git repo : D:/JgitRepos/MissingFiles
```

Notice  that the add after file delete does not remove the missing file from index with not clean status.


c-git provides a switch to override default with `--ignore-missing switch` so something similar can be done for JGit.


### Actual behavior

Actual behaviour of Jgit is not consistent with that of C-Git where by default the file is not removed during add.

### Expected behavior

Expected behaviour of Jgit to be consistent with that of C-Git where by default the file is removed during add and overridden with a flag/property

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/122/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/122,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dth7L,jgit,2645958347,122,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-08T21:58:23Z,2025-02-08T21:58:23Z,"[Gerrit change 1208540](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1208540) implements this.
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dth7L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,jgit,2752213909,124,Authentication Not Supported Error,Git-Mani,53793564,,,OPEN,2024-12-20T08:30:14Z,2025-01-06T09:29:58Z,"We are encountering an issue while attempting to pull content changes using JGit. The operation fails with the following error:

![image](https://github.com/user-attachments/assets/4a05a574-6ea6-4480-ab26-673214d4d733)

Has anyone faced a similar issue? If so, please let me know what the possible cause could be.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YYvOh,jgit,2556621729,124,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-20T09:36:06Z,2024-12-20T09:36:06Z,You need to set a CredentialsProvider to authenticate using credentials accepted by your server.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YYvOh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YY6FD,jgit,2556666179,124,NA,Git-Mani,53793564,,,NA,2024-12-20T09:59:54Z,2024-12-20T09:59:54Z,"@msohn I'm using same for authenticate with username and pat(Token classic)

 ```
final PullCommand pullCommand = git.pull();
pullCommand.setCredentialsProvider(new UsernamePasswordCredentialsProvider(config.getUsername(), config.getToken()));
final PullResult pullResult = pullCommand.call();
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YY6FD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZFhe,jgit,2556713054,124,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-20T10:27:07Z,2024-12-20T10:27:07Z,Do the same credentials work when pulling with C git ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZFhe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZiEp,jgit,2556829993,124,NA,Git-Mani,53793564,,,NA,2024-12-20T11:37:06Z,2024-12-20T11:37:06Z,"It doesn't fail every time, but fails unexpectedly.
Use case:
I have 10 files to push to Git. The workflow I use is as follows:

Pick one file.
Take a pull using the credential provider.
Push the file to Git.

This cycle continues for all files, but at times it fails after 3 or 4 cycles. It’s not consistent—sometimes all cycles complete successfully, but eventually, it throws the error: ""Authentication not supported.""","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZiEp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZ2t1,jgit,2556914549,124,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2024-12-20T12:29:35Z,2024-12-20T12:29:35Z,Don't know. Maybe you suffer from some network issues ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6YZ2t1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/124,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZWG03,jgit,2572709175,124,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-06T09:29:57Z,2025-01-06T09:29:57Z,"> but at times it fails after 3 or 4 cycles

Perhaps you're hitting a server-side rate limit. See https://docs.gitlab.com/ee/security/rate_limits.html and https://docs.gitlab.com/ee/user/gitlab_com/index.html#gitlabcom-specific-rate-limits .","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZWG03/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,jgit,2773362994,126,jgit push throwing org.eclipse.jgit.api.errors.TransportException: Connection reset,bhasky-java,194131075,,,OPEN,2025-01-07T17:17:23Z,2025-01-08T18:28:17Z,"### Version

7.0.0.202409031743-r

### Operating System

Windows

### Bug description

I am trying to push the branch to the remote repo as soon as after i create and checkout the branch. Here is the code i used. Please note fetch and pull works fine.

Ref ref = git.checkout.setCreateBranch(true).setName(""testbranch1"").setUpstreamMode(CreateBranchCommandMode.SET_UPSTREAM).
setStartPoint(""origin/main"").call();

System.out.println(""Git Reference branch name:""+ref.getName();

Thread.sleep(10000);
git.push().setRemote(""origin"").add(""testbranch1"").setCrendentialsProvider(new UserNamePasswordCrendentialsProvider(""test"",""test"").call();

### Actual behavior

jgit push is throwing connection reset error

### Expected behavior

jgit should work fine.

### Relevant log output

```Shell
caused by: org.ecllipse.jgit.errors.TransportException: https://gihub.com/internal/test-project.git: Connection reset
        at org.eclipse.jgit.transport.BasePackPushConnection.doPush(BasePackPushConnection.java:206)
...............
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(Unknown Source)
	at java.base/sun.nio.ch.NioSocketImpl.read(Unknown Source)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(Unknown Source)
	at java.base/java.net.Socket$SocketInputStream.read(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(Unknown Source)
	at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(Unknown Source)
```


### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/126/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZiPpD,jgit,2575891011,126,NA,bhasky-java,194131075,,,NA,2025-01-07T17:45:56Z,2025-01-07T17:45:56Z,"to add some more notes, we are accessing github repo behind the firewall, so i added below to set http and https proxy of the host and port before push and tried but still getting same error.

System.setProperty(""http.proxyHost"",""host name"");
System.setProperty(""http.proxyPort"",""8080"");
System.setProperty(""https.proxyHost"",""host name"");
System.setProperty(""https.proxyPort"",""8080"");","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZiPpD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZoT2W,jgit,2577481110,126,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-08T11:49:21Z,2025-01-08T11:49:21Z,"Impossible to say what's wrong with the little information you gave us. There are typos in the code and presumably in the exception trace (""gihub""), and the exception trace is not complete, and we don't know if there were any earlier exceptions that might be relevant.

We can only guess, but such guesses may be completely off since we don't have enough information. I'll venture one guess anyway: try using not the JDK HTTP client but  the Apache HTTP client. The JDK does not allow connecting to an HTTPS server with Basic Authentication through a HTTP proxy.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZoT2W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZqG8G,jgit,2577952518,126,NA,bhasky-java,194131075,,,NA,2025-01-08T15:26:12Z,2025-01-08T15:26:12Z,"sorry for typo, that is https://github.com/{our internal url}. I have attached snapshot.  can you share some Apache HTTP client examples with jgit library. 
![Stack trace error_snapshot](https://github.com/user-attachments/assets/20e1d3e4-6040-4a71-9a67-dd19e71a1118)
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZqG8G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZqrJ2,jgit,2578100854,126,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-08T16:27:36Z,2025-01-08T16:27:36Z,"> can you share some Apache HTTP client examples with jgit library.

Look at the JGit tests. Basically you'll need to include bundle `org.eclipse.jgit.http.apache` in your application and then set the factory before making other JGit calls: `HttpTransport.setConnectionFactory(new HttpClientConnectionFactory());`","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZqrJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrMlp,jgit,2578237801,126,NA,bhasky-java,194131075,,,NA,2025-01-08T17:32:43Z,2025-01-08T17:32:43Z,"I have added as you suggested before push

HttpTransport.setConnectionFactory(new HttpClientConnectionFactory());
git.push().setRemote(""origin"").add(""testbranch1"").setCrendentialsProvider(new UserNamePasswordCrendentialsProvider(""test"",""test"").call();

I am getting error 407 407 Proxy Authentication Required, however i had already set proxy details like i shown above before jgit calls.


![ProxyAuthenticationError](https://github.com/user-attachments/assets/3067b0d7-b0e8-48e5-8ad7-dc93183f1f3b)



","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrMlp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrO4o,jgit,2578247208,126,NA,bhasky-java,194131075,,,NA,2025-01-08T17:37:35Z,2025-01-08T17:37:35Z,"As i mentioned jgit pull and fetch are working with these setting proxy details only push is failing.

System.setProperty(""http.proxyHost"",""host name"");
System.setProperty(""http.proxyPort"",""8080"");
System.setProperty(""https.proxyHost"",""host name"");
System.setProperty(""https.proxyPort"",""8080"");","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrO4o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrlFT,jgit,2578338131,126,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-08T18:22:51Z,2025-01-08T18:22:51Z,"If you have a proxy that requires authentication you'll also need to set up an `Authenticator` that can provide the need auth details. Also note: for Github, the password should be a PAT as explained in the [EGit documentation](https://github.com/eclipse-egit/egit/wiki/User-Guide#github-tutorial). ""test"" doesn't look like a PAT.

I don't know why only the push fails. Possibly the Github repository is set up to allow anonymous fetches, but requires authentication only for pushes.

You could also try to use Eclipse and see if EGit can do the push if you define the correct proxy settings, including proxy password, if any, in the Eclipse preferences. (Easiest way: install Eclipse, open the Git Repositories view, import an existing clone, make sure testbranch1 is checked out. Go to the preferences, make sure the proxy settings are correct, and choose ""Apache HTTP"" as HTTP client in the Version Control(Team)&rarr;Git preferences. Then choose ""Push to origin"" in the context menu of the repository in the Git Repositories view.)

I'm sorry we cannot help you much. If neither of the above suggestions help, you'll have to debug this yourself.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrlFT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/126,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrnSZ,jgit,2578347161,126,NA,bhasky-java,194131075,,,NA,2025-01-08T18:28:15Z,2025-01-08T18:28:15Z,"Yes, i am using PAT, ""test""=PAT, git push origin testbranch1 works fine. I only have issue with jgit push. i tried all possible options.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6ZrnSZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,jgit,2779856373,127,Improve core.trustXXX config options,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,OPEN,2025-01-10T10:38:25Z,2025-01-15T21:50:41Z,"Moving discussion started in [change 1206684](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206684) to an issue for better visibility.

[Matthias]

Change 1206684 adds usage of `FileSnapshot` to `FileReftableStack` to improve performance of determining if the `tables.list` file, which contains the names of currently existing reftable files, is modified and needs to be reloaded. On top of that we need to add support for NFS using the usual workarounds we use in the `RefDirectory` implementation using the `core.trustXXX` config options.

Maybe it's time to consolidate proliferation of trustXXX config options ?

We already have
- core.trustFolderStat
- core.trustLooseRefStat
- core.trustPackedRefsStat
Should we add another option core.trustTablesListStat for tables.list or consolidate all of these options into a single one ?

Do we really need to configure these options independently ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/127/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z64-m,jgit,2582351782,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T10:38:50Z,2025-01-10T10:38:50Z,"[Nasser]

Unfortunately I think we probably do need them all.
We use these values for our Gerrit primaries in production:
```
    trustPackedRefsStat = after_open
    trustLooseRefStat = after_open
    trustFolderStat = false
```
and (for performance reasons) these values for our Gerrit replicas:
```
    trustPackedRefsStat = after_open
    trustLooseRefStat = always
    trustFolderStat = false
```

I don't know how we would express that replica config with a single option.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z64-m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z69HY,jgit,2582368728,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T10:40:37Z,2025-01-10T10:40:37Z,"[Matthias]

ok, I see

I think these options still feel odd:

- looking at `TrustPackedRefsStat` I think we don't need `UNSET` since that's effectively the same as `NEVER` assuming you set `trustFolderStat = false` on NFS
- for `LooseObjects` we either have `trustFolderStat=true` or we implicitly use `AFTER_OPEN` opening an input stream on the parent directory
- it seems for `LooseObjects` we shouldn't look at `trustFolderStat` but rather use `TrustLooseRefStat.ALWAYS` which is currently unused, and explicitly use TrustLooseRefStat.AFTER_OPEN` instead of assuming that implicitly (this value is currently also unused)
- why does `TrustLooseRefStat not have `NEVER` ?
- apparently we should also implement an `AFTER_OPEN` for PackDirectory#searchPacksAgain` to avoid always rescanning the pack directory if `trustFolderStat = false` by opening an InputStream on the pack directory

Would it be clearer to remove trustFolderStat and add options for loose objects and the pack directory:
- `trustLooseRefStat`
- `trustPackedRefStat`
- `trustLooseObjStat`
- `trustPackDirStat`

Can we consolidate to a single `TrustFileStat` enum with the values `NEVER, ALWAYS, AFTER_OPEN` for possible values of all these options ?

And for `RefTable` reuse `trustPackedRefStat` option to configure how stats for `tables.list` are handled ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z69HY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z7GSm,jgit,2582406310,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T10:48:25Z,2025-01-10T10:48:25Z,"[Nasser]

> I think these options still feel odd:
> 
> - looking at `TrustPackedRefsStat` I think we don't need `UNSET` since that's effectively the same as `NEVER` assuming you set `trustFolderStat = false` on NFS

I don't recall the use case for UNSET.  [Martin Fick](https://eclipse.gerrithub.io/q/owner:mfick@nvidia.com) do you recall?

> - for `LooseObjects` we either have `trustFolderStat=true` or we implicitly use `AFTER_OPEN` opening an input stream on the parent directory

I think the input stream opening only happens on failures though, correct?

> - it seems for `LooseObjects` we shouldn't look at `trustFolderStat` but rather use `TrustLooseRefStat.ALWAYS` which is currently unused, and explicitly use TrustLooseRefStat.AFTER_OPEN` instead of assuming that implicitly (this value is currently also unused)

I don't think we would want TrustLooseRefStat affecting loose objects, since those are fundamentally different things (objects are immutable).

> - why does `TrustLooseRefStat not have `NEVER` ?

I don't remember...  [Kaushik Lingarkar](https://eclipse.gerrithub.io/q/owner:quic_kaushikl@quicinc.com) do you recall?

> - apparently we should also implement an `AFTER_OPEN` for PackDirectory#searchPacksAgain` to avoid always rescanning the pack directory if `trustFolderStat = false` by opening an InputStream on the pack directory

Yeah, that might be a nice improvement. I don't know if you need to open the pack dir or the parent (`objects/`).

> Would it be clearer to remove trustFolderStat and add options for loose objects and the pack directory:
> - `trustLooseRefStat`
> - `trustPackedRefStat`
> - `trustLooseObjStat`
> - `trustPackDirStat`

Yes, I think having consistent naming like this would be nice.

> Can we consolidate to a single `TrustFileStat` enum with the values `NEVER, ALWAYS, AFTER_OPEN` for possible values of all these options ?

That sounds reasonable to me.

> And for `RefTable` reuse `trustPackedRefStat` option to configure how stats for `tables.list` are handled ?

I don't know the reftable implementation well enough to know if `tables.list` conceptually maps better to packed refs or loose refs for purposes of file modification, but I think if we have these other 4 configs, a 5th for `trustRefTablesListStat` would be acceptable too.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z7GSm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z7KFu,jgit,2582421870,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T10:56:20Z,2025-01-10T10:56:20Z,"[Matthias]

> > - it seems for `LooseObjects` we shouldn't look at `trustFolderStat` but rather use `TrustLooseRefStat.ALWAYS` which is currently unused, and explicitly use TrustLooseRefStat.AFTER_OPEN` instead of assuming that implicitly (this value is currently also unused)
> 
> I don't think we would want TrustLooseRefStat affecting loose objects, since those are fundamentally different things (objects are immutable).

sorry, I went off the rails here, what I meant is we should introduce another `trustLooseObjStat` option instead of using `trustFolderStat` which seems not to be well defined.

> > And for `RefTable` reuse `trustPackedRefStat` option to configure how stats for `tables.list` are handled ?
> 
> I don't know the reftable implementation well enough to know if `tables.list` conceptually maps better to packed refs or loose refs for purposes of file modification, but I think if we have these other 4 configs, a 5th for `trustRefTablesListStat` would be acceptable too.

ok, then let's introduce another option `trustRefTablesListStat`

In `FileReftableStack` the `tables.list` file contains the file names of currently existing reftable files, if it was modified the stack of reftables needs to be reloaded. Updates are protected by creating a file lock on this file.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z7KFu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z9kOb,jgit,2583053211,127,NA,mfick-nvidia,182571485,,,NA,2025-01-10T15:58:57Z,2025-01-10T15:58:57Z,"> looking at TrustPackedRefsStat I think we don't need UNSET since that's effectively the same as NEVER assuming you set trustFolderStat = false on NFS

I believe the idea is to be able to use trustFolderStat (or some better named thing) to control everything in a single place eventually. i.e. imagine that trustFolerStat started to support after_open, then maybe no one would need to set trustLooseRefStat = after_open or trustPackedRefsStat = after_open, they could just set trustFolderStat = after_open.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6Z9kOb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aDhJR,jgit,2584613457,127,NA,quic-nasserg,757421,Nasser Grainawi,quic_nasserg@quicinc.com,NA,2025-01-10T22:43:11Z,2025-01-10T22:43:11Z,"Ah, so `UNSET` means `INHERIT`? I agree that makes sense if we have a good ""base"" config option, maybe re-using that enum name Matthias suggested `trustFileStat`? Then if you want after_open for everything except loose refs (like my replica config above), then you could have:
```
trustFileStat = after_open
trustLooseRefStat = always
```

Did I get that right?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aDhJR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aEN8S,jgit,2584796946,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-10T23:24:26Z,2025-01-10T23:24:26Z,"ok, so do we agree on this set of options:

- `trustFileStat` general option, used if the more specific options aren't set (or set to `INHERIT` by default to make this very explicit)

and the more specific options
- `trustLooseRefStat` for loose refs
- `trustPackedRefsStat` for packed-refs
- `trustRefTablesListStat` for `tables.list` with `RefTable`
- `trustLooseObjStat` for loose objects
- `trustPackDirStat` for pack directory
 which can be used to override the value of `trustFolderStat` for specific files ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aEN8S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aMqO-,jgit,2587009982,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-13T12:44:38Z,2025-01-13T12:44:38Z,related Gerrit issue: https://issues.gerritcodereview.com/issues/40010601,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aMqO-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQBzK,jgit,2587892938,127,NA,mfick-nvidia,182571485,,,NA,2025-01-13T18:26:15Z,2025-01-13T18:26:15Z,How about trustStats instead of trustFileStat?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQBzK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQG3j,jgit,2587913699,127,NA,mfick-nvidia,182571485,,,NA,2025-01-13T18:37:06Z,2025-01-13T18:37:06Z,"The reason I suggest trustStats instead of trusFileStat is because I believe that sometimes it is the folder stats and not the files stats that we are trusting.

I like all the other names that Matthias has suggested, and I like the idea of an explicit INHERIT setting and concept. It will be really nice to basically have only one setting to need to set. Any chance we can make the default for that setting AUTO, and use the FS type to set it to after_open on NFS?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQG3j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQ5V5,jgit,2588120441,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-13T20:23:31Z,2025-01-13T20:23:31Z,"I thought about the name of the linux [fstat](https://linux.die.net/man/2/fstat) function ""get file status"" which can be also applied to files and folders. How about naming it trustfstat ?

Do you have a proposal how to reliably detect NFS from Java ?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aQ5V5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aREhx,jgit,2588166257,127,NA,mfick-nvidia,182571485,,,NA,2025-01-13T20:47:42Z,2025-01-13T20:47:42Z,"I'm not sure I love adding the ""f"", but I'm OK with it. Would it be trustFStat?

As for NFS, the best I could find is to run  

  stat -fc %T

which seems to work on centOs. It may not be ideal, but it might still be worth it?  After all auto would be a helper for when it is unset, if it is wrong, the user can configure it, in the meantime it would mostly just work for many people?
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aREhx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aRtHs,jgit,2588332524,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-13T22:13:48Z,2025-01-13T22:13:48Z,"We can also call it trustStat after the stat function. Capitalization doesn't matter since keys of git config options are case-insensitive.

Tried this command and it works on Mac OS 15.2, Debian 11, Ubuntu 24.04 and SLES 15 :-)
Will implement this in FS_Posix.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aRtHs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aRufo,jgit,2588338152,127,NA,mfick-nvidia,182571485,,,NA,2025-01-13T22:17:21Z,2025-01-13T22:17:21Z,"> Will implement this in FS_Posix.

Since NFS is not actually Posix, it might be better to have a superclass, maybe something like FS_nix which then has FS_Posix and FS_NFS as subclasses?","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aRufo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6alau6,jgit,2593500090,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-15T17:14:00Z,2025-01-15T17:14:00Z,"Pushed implementation for review https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206686

Automatic configuration will be done in another change.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6alau6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6amOoB,jgit,2593712641,127,NA,mfick-nvidia,182571485,,,NA,2025-01-15T18:55:55Z,2025-01-15T18:55:55Z,"I'm confused, why are we eliminating the finer grained ref options if we are adding a global switch that can be inherited?
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6amOoB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6anQ44,jgit,2593984056,127,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-15T21:34:54Z,2025-01-15T21:34:54Z,"I think I didn't eliminate finer grained ref options, see 
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206686/1/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java

The inheritance is implemented in CoreConfig
https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206686/1/org.eclipse.jgit/src/org/eclipse/jgit/lib/CoreConfig.java
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6anQ44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/127,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6anXib,jgit,2594011291,127,NA,mfick-nvidia,182571485,,,NA,2025-01-15T21:50:40Z,2025-01-15T21:50:40Z,"I see, sorry, I misread the deprecation notices, they were for code, not for the config items.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6anXib/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/128,https://api.github.com/repos/eclipse-jgit/jgit/issues/128,jgit,2781146064,128,JGit on Windows cannot use hooks that are exe files,davidmichaelkarr,5566419,David M. Karr,,OPEN,2025-01-10T20:58:09Z,2025-02-12T11:33:09Z,"### Description

I need JGit to support git hooks on Windows that are exe files. Apparently hooks on Windows can only work in contrived situations, supposedly because the name of the file has to be exactly ""commit-msg"", but the name of the file will be ""commit-msg.exe"".

### Motivation

I implemented a local git commit hook to validate commit messages, to ensure they cite a valid JIRA ticket.  We are moving all of our git storage from BitBucket to Github. BitBucket has a server-side ""pre-receive"" hook for pushes that can be used to do this validation, but nothing like that exists for Github (Github Actions will not suffice). What I implemented works fine with command-line git, but then I discovered that it has no effect in Eclipse, and after filing an EGit ticket (https://github.com/eclipse-egit/egit/issues/74), I realized that this is an issue in JGit, not EGit.

If we can't do client-side validation, we'll have to rely on a poorer choice of validating commits in builds, and if those find violations, will mean harder work for developers.

### Alternatives considered

I did try storing an additional file in the hooks directory, called just ""commit-msg"" (empty file), thinking perhaps that would fool it, but that had no effect.

### Additional context

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/128,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6eKHL8,jgit,2653451004,128,NA,Rossi1337,7456846,Bernd Rosstauscher,,NA,2025-02-12T11:33:07Z,2025-02-12T11:33:07Z,"Only indirectly by invoking your exe files from a bash script.
You can use hooks in Eclipse by doing the following.
Make sure  jgit recognizes that it can run hooks. The easiest way for me was the following

- Put C:\Program Files\Git\bin on your PATH if it is not already
- Create an empty file C:\Program Files\Git\bin\cygpath.exe

This is needed to ""trick"" jgit to detect that it can run sh.exe and therefore hook scripts
That file must just be on the path. It is then not really used at all.

Now edit your commit-msg hook script and invoke your own commands in it. You need to write it as a valid shell script 
You may need to put your own exe files into C:\Program Files\Git\mingw64\bin 

Not tested but in theory this should work.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6eKHL8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,jgit,2781794764,129,jgit considers the file path `src/Con.java` invalid on Windows,Luro02,24826124,Lucas,,CLOSED,2025-01-11T11:57:33Z,2025-01-21T15:24:49Z,"### Version

7.1.0.202411261347-r

### Operating System

Windows

### Bug description

On Windows certain filenames are forbidden like `CON`.
jgit validates the file paths and throws an exception if it is not valid.

In my case the filepath is `src/Con.java`, where `Con.java` is a file and `src` is a folder.

The validation code does not seem to consider the file extension.

The filename `Con.java` is a valid file on windows:
![image](https://github.com/user-attachments/assets/f9af2212-818e-4997-93d1-3926f0f59c82)
`CON` (without any extension) is considered invalid:
![image](https://github.com/user-attachments/assets/1f3a9494-e624-450a-aa1d-12661bd55010)


### Actual behavior

```
org.eclipse.jgit.dircache.InvalidPathException: Invalid path: src/Con.java
	at org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(DirCacheCheckout.java:1609)
	at org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPath(DirCacheCheckout.java:1598)
	at org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(DirCacheCheckout.java:387)
	at org.eclipse.jgit.dircache.DirCacheCheckout.prescanOneTree(DirCacheCheckout.java:354)
	at org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout(DirCacheCheckout.java:512)
	at org.eclipse.jgit.dircache.DirCacheCheckout.checkout(DirCacheCheckout.java:480)
        ...
Caused by: org.eclipse.jgit.errors.CorruptObjectException: invalid name 'CON'
	at org.eclipse.jgit.lib.ObjectChecker.report(ObjectChecker.java:781)
	at org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(ObjectChecker.java:1029)
	at org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(ObjectChecker.java:903)
	at org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(ObjectChecker.java:849)
	at org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(DirCacheCheckout.java:1606)
	... 45 more
```

### Expected behavior

No crash

### Relevant log output

_No response_

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aGDhn,jgit,2585278567,129,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-11T14:01:03Z,2025-01-11T14:01:03Z,"Interesting. According to the commit message of the [commit that introduced this check](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/23229) this is intentional. Beats me why, though.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aGDhn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aGbEZ,jgit,2585375001,129,NA,Luro02,24826124,Lucas,,NA,2025-01-11T18:52:24Z,2025-01-11T18:52:24Z,"> Interesting. According to the commit message of the [commit that introduced this check](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/23229) this is intentional. Beats me why, though.

![image](https://github.com/user-attachments/assets/a0e56d0f-87d9-4d70-93d1-e720b1563c9d)

Not sure why one would want to prevent cloning of these files, they are perfectly valid.

An option to disable these checks would have been nice... Overriding the `SystemReader` to return `false` for windows is technically an option, but it does not work because then the code will try to set posix properties on the file...","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aGbEZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aH1wl,jgit,2585746469,129,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-12T14:00:54Z,2025-01-12T14:00:54Z,"Microsoft recommends to not use such names, see https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file which says

> Do not use the following reserved names for the name of a file:
> 
> CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, COM¹, COM², COM³, LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9, LPT¹, LPT², and LPT³. Also avoid these names followed immediately by an extension; for example, NUL.txt and NUL.tar.gz are both equivalent to NUL. For more information, see [Namespaces](https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-file-namespaces).","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aH1wl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/129,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bRahJ,jgit,2605033545,129,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-21T15:23:45Z,2025-01-21T15:23:45Z,"> see https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file 

So that's the reason. I knew about these reserved names, but I didn't know they were also to be avoided with extension.

So: works as designed.

BTW: here's what I get with git-for-windows:
```
 MINGW64 ~
$ cd tmp

MINGW64 ~/tmp
$ mkdir repo

MINGW64 ~/tmp
$ cd repo

MINGW64 ~/tmp/repo
$ git init
Initialized empty Git repository in C:/Users/****/tmp/repo/.git/

MINGW64 ~/tmp/repo (master)
$ echo ""foo fie fum"" > Con.java

MINGW64 ~/tmp/repo (master)
$ cat Con.java
foo fie fum

MINGW64 ~/tmp/repo (master)
$ git add Con.java
error: open(""Con.java""): No such file or directory
error: unable to index file 'Con.java'
fatal: adding files failed

MINGW64 ~/tmp/repo (master)
$ ls -al
total 17
drwxr-xr-x 1 **** 1049089  0 Jan 21 16:17 ./
drwxr-xr-x 1 **** 1049089  0 Jan 21 16:13 ../
drwxr-xr-x 1 **** 1049089  0 Jan 21 16:17 .git/
-rw-r--r-- 1 **** 1049089 12 Jan 21 16:17 Con.java

MINGW64 ~/tmp/repo (master)
$ git add .
error: open(""Con.java""): No such file or directory
error: unable to index file 'Con.java'
fatal: adding files failed

MINGW64 ~/tmp/repo (master)
$
```

I'll close this as a ""wont fix"".","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bRahJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/130,https://api.github.com/repos/eclipse-jgit/jgit/issues/130,jgit,2783319727,130,"Jgit with reftable causes ""Cannot load refs/meta/reject-commits"" error",syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,OPEN,2025-01-13T08:29:16Z,2025-01-20T16:05:20Z,"### Version

7.0.0

### Operating System

Linux/Unix

### Bug description

1 - Set up a git repository (or use an existing one) and enable reftable (you can do this by running [git refs migration](https://git-scm.com/docs/git-refs), this will need git 2.47 at least):

```
 /opt/homebrew/Cellar/git/2.47.1/bin/git  refs migrate --ref-format=reftable
```

2 - Set up constant writes to the repository. This could be a simple for loop that pushes to the repository or a test framework. We reproduced this by using Gatling against Gerrit, for example, you could use the git simulation from the [gatling-sbt-gerrit-test](https://github.com/GerritForge/gatling-sbt-gerrit-test).

3 - Schedule `jgit gc` over a period of time **X**, ensuring that `pruneexpire` and `prunepackexpire` are set to **X*2**. We run GC every **1 hour** and set `pruneexpire` and `prunepackexpire` every **2 hours**. Our git `config` looks like this:

```
[core]
	repositoryformatversion = 1
	filemode = true
	bare = true
	logallrefupdates = false

[gc]
	pruneExpire = 120.minutes.ago
	prunePackExpire = 120.minutes.ago
	auto = 0
	autoPackLimit = 0

[extensions]
	refstorage = reftable
```

We execute the `jgit` process as follows:

```
java_args='-Xss8m -Xms8g -Xmx8g ' time jgit-7.0.0.sh --git-dir <path-to/repo.git gc --preserve-oldpacks
```

After a few iterations (usually 3 or 4), following a GC execution pushes start to fail with:

```
[2025-01-08T16:12:13.362Z] [HTTP-6331] ERROR com.google.gerrit.pgm.http.jetty.HiddenErrorHandler : Error in GET /a/ghs-gym/info/refs?service=git-receive-pack
com.google.inject.ProvisionException: Unable to provision, see the following errors:

1) [Guice/ErrorInjectingConstructor]: IOException: Cannot load refs/meta/reject-commits
  at ReceiveCommits.<init>(ReceiveCommits.java:514)
```

Full stack trace can be found [here](https://pastebin.com/raw/PAX4N4S1)


### Actual behavior

Even thought the GC is successful, subsequent pushes to the repository fail due to https://pastebin.com/raw/PAX4N4S1.

### Expected behavior

GC is successful and the repository is not corrupted.

### Relevant log output

```Shell
[2025-01-08T16:12:13.362Z] [HTTP-6331] ERROR com.google.gerrit.pgm.http.jetty.HiddenErrorHandler : Error in GET /a/ghs-gym/info/refs?service=git-receive-pack
com.google.inject.ProvisionException: Unable to provision, see the following errors:

1) [Guice/ErrorInjectingConstructor]: IOException: Cannot load refs/meta/reject-commits
  at ReceiveCommits.<init>(ReceiveCommits.java:514)
  while locating ReceiveCommits annotated with @UniqueAnnotations$Internal(7)
  at AsyncReceiveCommits.<init>(AsyncReceiveCommits.java:263)
  while locating AsyncReceiveCommits annotated with @UniqueAnnotations$Internal(7)

Learn more:
  https://github.com/google/guice/wiki/ERROR_INJECTING_CONSTRUCTOR

1 error

======================
Full classname legend:
======================
AsyncReceiveCommits:        ""com.google.gerrit.server.git.receive.AsyncReceiveCommits""
IOException:                ""java.io.IOException""
ReceiveCommits:             ""com.google.gerrit.server.git.receive.ReceiveCommits""
UniqueAnnotations$Internal: ""com.google.inject.internal.UniqueAnnotations$Internal""
========================
End of classname legend:
========================

	at com.google.inject.internal.InternalProvisionException.toProvisionException(InternalProvisionException.java:251)
	at com.google.inject.internal.InjectorImpl$1.get(InjectorImpl.java:1151)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:907)
	at jdk.proxy2/jdk.proxy2.$Proxy209.create(Unknown Source)
	at com.google.gerrit.httpd.GitOverHttpServlet$ReceiveFactory.create(GitOverHttpServlet.java:539)
	at com.google.gerrit.httpd.GitOverHttpServlet$ReceiveFactory.create(GitOverHttpServlet.java:518)
	at org.eclipse.jgit.http.server.ReceivePackServlet$InfoRefs.begin(ReceivePackServlet.java:70)
	at org.eclipse.jgit.http.server.SmartServiceInfoRefs.doFilter(SmartServiceInfoRefs.java:69)
	at org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
	at org.eclipse.jgit.http.server.SmartServiceInfoRefs.doFilter(SmartServiceInfoRefs.java:87)
	at org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
	at org.eclipse.jgit.http.server.RepositoryFilter.doFilter(RepositoryFilter.java:109)
	at org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
	at org.eclipse.jgit.http.server.NoCacheFilter.doFilter(NoCacheFilter.java:50)
	at org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
	at org.eclipse.jgit.http.server.glue.UrlPipeline.service(UrlPipeline.java:189)
	at org.eclipse.jgit.http.server.glue.SuffixPipeline.service(SuffixPipeline.java:70)
	at org.eclipse.jgit.http.server.glue.MetaFilter.doFilter(MetaFilter.java:147)
	at org.eclipse.jgit.http.server.glue.MetaServlet.service(MetaServlet.java:106)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at com.google.inject.servlet.ServletDefinition.doServiceImpl(ServletDefinition.java:293)
	at com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:283)
	at com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:184)
	at com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:89)
	at com.google.gerrit.httpd.raw.StaticModule$PolyGerritFilter.doFilter(StaticModule.java:403)
	at com.google.gerrit.httpd.GetUserFilter.doFilter(GetUserFilter.java:92)
	at com.google.gerrit.httpd.RunAsFilter.doFilter(RunAsFilter.java:120)
	at com.google.gerrit.httpd.RequireIdentifiedUserFilter.doFilter(RequireIdentifiedUserFilter.java:50)
	at com.google.gerrit.httpd.SetThreadNameFilter.doFilter(SetThreadNameFilter.java:62)
	at com.google.gerrit.httpd.AllRequestFilter$FilterProxy$1.doFilter(AllRequestFilter.java:139)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:239)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:215)
	at com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.doFilter(GerritMonitoringFilter.java:66)
	at com.google.gerrit.httpd.AllRequestFilter$FilterProxy$1.doFilter(AllRequestFilter.java:135)
	at com.google.gerrit.httpd.AllowRenderInFrameFilter.doFilter(AllowRenderInFrameFilter.java:56)
	at com.google.gerrit.httpd.AllRequestFilter$FilterProxy$1.doFilter(AllRequestFilter.java:135)
	at com.google.gerrit.httpd.AllRequestFilter$FilterProxy.doFilter(AllRequestFilter.java:141)
	at com.google.gerrit.httpd.RequestCleanupFilter.doFilter(RequestCleanupFilter.java:60)
	at com.google.gerrit.httpd.ProjectBasicAuthFilter.doFilter(ProjectBasicAuthFilter.java:111)
	at com.google.gerrit.httpd.ProjectBasicAuthFilter.doFilter(ProjectBasicAuthFilter.java:111)
	at com.google.gerrit.httpd.RequestMetricsFilter.doFilter(RequestMetricsFilter.java:92)
	at com.google.gerrit.httpd.RequestContextFilter.doFilter(RequestContextFilter.java:64)
	at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:121)
	at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:133)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626)
	at com.googlesource.gerrit.plugins.ootb.FirstTimeRedirect.doFilter(FirstTimeRedirect.java:63)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:552)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:54)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:409)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:883)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1034)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.io.IOException: Cannot load refs/meta/reject-commits
	at com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(BanCommit.java:77)
	at com.google.gerrit.server.git.receive.ReceiveCommits.<init>(ReceiveCommits.java:578)
	at com.google.gerrit.server.git.receive.ReceiveCommits$$FastClassByGuice$$3fdaaf17.GUICE$TRAMPOLINE(<generated>)
	at com.google.gerrit.server.git.receive.ReceiveCommits$$FastClassByGuice$$3fdaaf17.apply(<generated>)
	at com.google.inject.internal.DefaultConstructionProxyFactory$FastClassProxy.newInstance(DefaultConstructionProxyFactory.java:82)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:114)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:91)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:300)
	at com.google.inject.internal.InjectorImpl$1.get(InjectorImpl.java:1148)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:907)
	at com.google.gerrit.server.git.receive.$Proxy210.create(Unknown Source)
	at com.google.gerrit.server.git.receive.AsyncReceiveCommits.<init>(AsyncReceiveCommits.java:308)
	at com.google.gerrit.server.git.receive.AsyncReceiveCommits$$FastClassByGuice$$3fbcafb2.GUICE$TRAMPOLINE(<generated>)
	at com.google.gerrit.server.git.receive.AsyncReceiveCommits$$FastClassByGuice$$3fbcafb2.apply(<generated>)
	at com.google.inject.internal.DefaultConstructionProxyFactory$FastClassProxy.newInstance(DefaultConstructionProxyFactory.java:82)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:114)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:91)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:300)
	at com.google.inject.internal.InjectorImpl$1.get(InjectorImpl.java:1148)
	... 76 more
Caused by: java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.FileChannelImpl.ensureOpen(FileChannelImpl.java:159)
	at java.base/sun.nio.ch.FileChannelImpl.position(FileChannelImpl.java:356)
	at org.eclipse.jgit.internal.storage.io.BlockSource$2.read(BlockSource.java:86)
	at org.eclipse.jgit.internal.storage.reftable.BlockReader.readBlockIntoBuf(BlockReader.java:261)
	at org.eclipse.jgit.internal.storage.reftable.BlockReader.readBlock(BlockReader.java:255)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.readBlock(ReftableReader.java:431)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.seek(ReftableReader.java:214)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.seekRef(ReftableReader.java:152)
	at org.eclipse.jgit.internal.storage.reftable.MergedReftable.seekRef(MergedReftable.java:115)
	at org.eclipse.jgit.internal.storage.reftable.Reftable.exactRef(Reftable.java:197)
	at org.eclipse.jgit.internal.storage.reftable.ReftableDatabase.exactRef(ReftableDatabase.java:241)
	at org.eclipse.jgit.internal.storage.file.FileReftableDatabase.exactRef(FileReftableDatabase.java:161)
	at com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(BanCommit.java:69)
	... 94 more
```


### Other information

- Server: We tested this against a Gerrit **3.10.3**, running jgit `c824610ab`.
- Client: we run `jgit gc` using jgit `6.80`, `6.8.1` and `7.0.0`, the problem arises with all versions.

We are still trying to reproduce this more quickly, perhaps programmatically, but so far this is the only way we have managed.

**NOTE**: I wonder if this is would be another manifestation of #102 , we will try to apply that patch and see if we can still reproduce.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/130/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/130,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aNS7-,jgit,2587176702,130,NA,msohn,143355,Matthias Sohn,matthias.sohn@sap.com,NA,2025-01-13T13:58:02Z,2025-01-13T13:58:02Z,"Please try with this fix for #102 https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206683.
Without this fix an instance of FileReftableDatabase will not recognize ref updates done by another instance of FileReftableDatabase used in the same or a different thread or from another process (which could also run e.g. git gc).

You can also convert an existing repository to reftable storage using JGit CLI command convert-ref-storage.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6aNS7-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/130,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a62T_,jgit,2599118079,130,NA,syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,NA,2025-01-17T20:13:18Z,2025-01-17T20:13:18Z,"Thanks @msohn , unfortunately this didn't work for us:

Even with fix https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206683, the run eventually failed with:

```
Caused by: java.io.IOException: Cannot load refs/meta/reject-commits
```

The Exception is thrown when loading the reject commits map in `BanCommit`, as shown by https://pastebin.com/raw/PAX4N4S1:

```
Caused by: java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.FileChannelImpl.ensureOpen(FileChannelImpl.java:159)
	at java.base/sun.nio.ch.FileChannelImpl.position(FileChannelImpl.java:356)
	at org.eclipse.jgit.internal.storage.io.BlockSource$2.read(BlockSource.java:86)
	at org.eclipse.jgit.internal.storage.reftable.BlockReader.readBlockIntoBuf(BlockReader.java:261)
	at org.eclipse.jgit.internal.storage.reftable.BlockReader.readBlock(BlockReader.java:255)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.readBlock(ReftableReader.java:431)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.seek(ReftableReader.java:214)
	at org.eclipse.jgit.internal.storage.reftable.ReftableReader.seekRef(ReftableReader.java:152)
	at org.eclipse.jgit.internal.storage.reftable.MergedReftable.seekRef(MergedReftable.java:115)
	at org.eclipse.jgit.internal.storage.reftable.Reftable.exactRef(Reftable.java:197)
	at org.eclipse.jgit.internal.storage.reftable.ReftableDatabase.exactRef(ReftableDatabase.java:241)
	at org.eclipse.jgit.internal.storage.file.FileReftableDatabase.exactRef(FileReftableDatabase.java:161)
	at com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(BanCommit.java:69)
	... 94 more
```

A `ClosedChannelException`, when reading a block from the ref table.
Perhaps this issue is different from the one addressed by  https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206683?


","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6a62T_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/130,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bI3qQ,jgit,2602793616,130,NA,zotttelbart,32455370,,,NA,2025-01-20T16:05:18Z,2025-01-20T16:05:18Z,Can you try it with https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206692 ?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bI3qQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/131,https://api.github.com/repos/eclipse-jgit/jgit/issues/131,jgit,2794776215,131,Repository index corrupted after a cherry pick with .gitattribute text settings,sokai116,5397428,,,OPEN,2025-01-17T07:31:51Z,2025-01-21T15:08:28Z,"### Version

7.2.0

### Operating System

Windows

### Bug description

In a cherry-pick with an auto 3-way merge, `org.eclipse.jgit.merge.ResolveMerger.updateIndex` wrongly uses `rawMerged.length()` for TEXT_CRLF steam causes the issue. `rawMerged.length()` calculate length in LF but the merged file is in CRLF, cause the index length different from workspace file length. After such cherry-pick, `git status` will always show the file is modified, then checkout/cherry-pick another commit will change the repository into a conflict state.

### Actual behavior

After the cherry-pick, `git status` shows the file has been modified, but `git diff` shows no difference. Use `git ls-files --debug xxx && ls -l xxx` can see the index size is different from the actual file size.

It will be aborted as FAILED if this happens within a rebase action.

### Expected behavior

The repository should have no unstaged changes after the cherry-pick.

### Relevant log output

```Shell

```

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/131,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bRQYY,jgit,2604992024,131,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-21T15:08:27Z,2025-01-21T15:08:27Z,"Could you please provide a public Github repository and instructions on how to reproduce this? (""Clone repo xyz, check out branch foo, cherry-pick commit abc"".) Please make it as self-contained as possible, with all needed settings in .gitattributes, and provide any other relevant settings from the git config, such as core.eol or core.autocrlf.

Analyzing this and then doing something about it requires us to have a reproducer.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6bRQYY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/132,https://api.github.com/repos/eclipse-jgit/jgit/issues/132,jgit,2812362039,132,Pull & rebase fails with InvalidPathException on paths with special characters,iloveeclipse,964108,Andrey Loskutov,,CLOSED,2025-01-27T08:23:29Z,2025-01-27T10:18:19Z,"### Version

7.2.0.202501092313

### Operating System

Linux/Unix

### Bug description

Using JDT wiki ( https://github.com/eclipse-jdt/eclipse.jdt.core.wiki.git ) I see errors reported by latest nightly jgit & egit, while command line git has no troubles. I'm running RHEL 9.2 / Java 21 and following jgit/egit versions

* 7.2.0.202501092313	org.eclipse.jgit
* 7.2.0.202501162329	org.eclipse.egit

* Reset master to commit https://github.com/eclipse-jdt/eclipse.jdt.core/wiki/Home/21d2dfa986a7f414720522793e03517469b0aba4
* After that pull latest changes (that introduced `$` file because of https://github.com/eclipse-jdt/eclipse.jdt.core/wiki/Working-towards-Java-$N-plus-1-%E2%80%90-overview topic added), it should be commit https://github.com/eclipse-jdt/eclipse.jdt.core/wiki/Home/8d28fa60f8c07a36f5369927b05c3e395878126c.
* Kaboom.
* History shown on github: https://github.com/eclipse-jdt/eclipse.jdt.core/wiki/Home/_history

The code seem to stumble over unescaped paths that can be handled by cgit. I assume either dollar or question mark are the culprit.

Here how the directory looks like after attempt to pull from Eclipse (note: I've finally pulled via cgit).

```
/data/git/eclipse.jdt.core.wiki$ ll
total 52
drwxrwxr-x   5 aloskuto users 4096 Jan 27 09:07  .
drwxrwxr-x 107 aloskuto users 4096 Jan 14 13:25  ..
-rw-rw-r--   1 aloskuto users 8415 Nov 17  2023  Adding-support-for-new-Java-version-and-Features-in-JDT.md
-rw-rw-r--   1 aloskuto users 3233 Okt 28 08:26  ECJ-Annotation‐based-Null-Analysis.md
drwxrwxr-x   7 aloskuto users  189 Jan 27 09:07  .git
-rw-rw-r--   1 aloskuto users 1983 Jan 27 09:07  Home.md
drwxrwxr-x   2 aloskuto users 4096 Nov 15 08:05  images
drwxrwxr-x   8 aloskuto users  184 Nov 15 08:05  pages
-rw-rw-r--   1 aloskuto users  214 Feb 15  2023  .project
-rw-rw-r--   1 aloskuto users  821 Jan 27 09:07 'Working-towards-Java-$N-plus-1-‐-organizational-issues.md'
-rw-r--r--   1 aloskuto users  821 Jan 27 09:06 '._Working-towards-Java-$N-plus-1-?-organizational-issues.md4206666581117076224.tmp'
-rw-rw-r--   1 aloskuto users  514 Jan 27 09:07 'Working-towards-Java-$N-plus-1-‐-overview.md'
```



### Actual behavior

The pull & rebase from jgit failed after pull:
```
java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: /data/git/eclipse.jdt.core.wiki/._Working-towards-Java-$N-plus-1-‐-organizational-issues.md4206666581117076224.tmp
	at java.base/sun.nio.fs.UnixPath.encode(UnixPath.java:129)
	at java.base/sun.nio.fs.UnixPath.<init>(UnixPath.java:76)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:312)
	at java.base/java.io.File.toPath(File.java:2401)
	at org.eclipse.jgit.util.FileUtils.isFile(FileUtils.java:907)
	at org.eclipse.jgit.util.FS.isFile(FS.java:1668)
	at org.eclipse.jgit.util.FS_POSIX.canExecute(FS_POSIX.java:206)
	at org.eclipse.jgit.dircache.Checkout.checkout(Checkout.java:215)
	at org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout(DirCacheCheckout.java:577)
	at org.eclipse.jgit.dircache.DirCacheCheckout.checkout(DirCacheCheckout.java:480)
	at org.eclipse.jgit.api.RebaseCommand.checkoutCommit(RebaseCommand.java:1499)
	at org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind(RebaseCommand.java:1167)
	at org.eclipse.jgit.api.RebaseCommand.call(RebaseCommand.java:292)
	at org.eclipse.jgit.api.PullCommand.call(PullCommand.java:366)
	at org.eclipse.egit.core.op.PullOperation$PullJob.run(PullOperation.java:256)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
```

Egit has also its trouble to show commits in the history view:
```
Caused by: java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: /data/git/eclipse.jdt.core.wiki/Working-towards-Java-$N-plus-1-‐-overview.md
	at java.base/sun.nio.fs.UnixPath.encode(UnixPath.java:129)
	at java.base/sun.nio.fs.UnixPath.<init>(UnixPath.java:76)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:312)
	at java.base/java.io.File.toPath(File.java:2401)
	at org.eclipse.egit.ui.internal.history.HistoryPageInput.filterFilesInGitDir(HistoryPageInput.java:174)
	at org.eclipse.egit.ui.internal.history.HistoryPageInput.<init>(HistoryPageInput.java:80)
	at org.eclipse.egit.ui.internal.history.CommitFileDiffViewer.getShowInContext(CommitFileDiffViewer.java:414)
	at org.eclipse.egit.ui.internal.history.GitHistoryPage.getShowInContext(GitHistoryPage.java:3112)
	at org.eclipse.ui.internal.WorkbenchPage.getContext(WorkbenchPage.java:440)
	at org.eclipse.ui.internal.WorkbenchPage.updateShowInSources(WorkbenchPage.java:426)
	at org.eclipse.ui.internal.ShowInMenu.fillMenu(ShowInMenu.java:171)
	at org.eclipse.ui.internal.ShowInMenu.fill(ShowInMenu.java:137)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:728)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:805)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:672)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.scheduleManagerUpdate(MenuManagerRenderer.java:1161)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContents(MenuManagerRenderer.java:633)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.subscribeTopicChildAdded(MenuManagerRenderer.java:320)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	... 55 more
```

### Expected behavior

Pull & rebase work fine similar to cgit.

### Relevant log output

```Shell

```

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/132/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/132,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b4xHr,jgit,2615349739,132,NA,iloveeclipse,964108,Andrey Loskutov,,NA,2025-01-27T10:18:18Z,2025-01-27T10:18:18Z,"> The code seem to stumble over unescaped paths that can be handled by cgit. I assume either dollar or question mark are the culprit.

I was wrong, jgit is not guilty.

I've noticed that the affected files were not shown in the Package and Project explorers. That forced me to debug platform and there I've quickly found that we were using wrong system encoding, here dependency chain: 
``` 
org.eclipse.core.internal.filesystem.local.unix.UnixFileNatives.fetchFileInfo(String)
org.eclipse.core.internal.filesystem.local.unix.UnixFileNatives.bytesToFileName(byte[], int)
org.eclipse.core.internal.filesystem.local.Convert.fromPlatformBytes(byte[], int)
org.eclipse.core.internal.filesystem.local.Convert.defaultEncoding
org.eclipse.core.runtime.Platform.SYSTEM_CHARSET
```

In `org.eclipse.core.runtime.Platform.SYSTEM_CHARSET` we were seeing `US-ASCII` returned by JVM instead of expected `UTF-8` that should have been derived from system global `LANG` variable set to `en_US.UTF-8`. However, in our case the system default wasn't really system wide: all applications started from KDE got `LANG=C` value set, which is for JVM (and Eclipse) equal to `US-ASCII`.

Starting with proper `LANG` value I see no problem with jgit / egit anymore.
So it looks like our internal KDE / RHEL configuration issue.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6b4xHr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/133,https://api.github.com/repos/eclipse-jgit/jgit/issues/133,jgit,2813451335,133,Preserved packfiles are not restored into the pack directory,syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,CLOSED,2025-01-27T16:17:58Z,2025-02-07T16:00:20Z,"### Version

6.10

### Operating System

Linux/Unix

### Bug description

- Perform constant read writes to Gerrit
- Ensure the `prunepackexpire` is set to a short value (this will help reproducing the issue more quickly).
For example:

```
[gc]
	prunePackExpire = 1.minutes.ago
```

- Execute an external GC via jgit, enabling the `--preserve-oldpacks`, as follows:

```
jgit.sh --git-dir <repo-path>.git gc --preserve-oldpacks
```

### Actual behavior

The available packfiles, existing in the `preserved` directory are not restored in the `pack` directory.
The inability of restoring the packfile leads to the `error_log` being flooded with: 

```
[2025-01-27T15:32:16.320Z] [HTTP POST /a/changes/27299/revisions/current/review (admin from 172.18.0.1)] WARN  org.eclipse.jgit.internal.storage.file.PackDirectory : Pack file /var/gerrit/git/repo.git/objects/pack/pack-aad9e57262a761cfec731ba82abe32f5b60c56f0.pack is corrupt, removing it from pack list
org.eclipse.jgit.errors.PackInvalidException: Pack file invalid: /var/gerrit/git/repo.git/objects/pack/pack-aad9e57262a761cfec731ba82abe32f5b60c56f0.pack
```

### Expected behavior

The available packfile, available in the `preserved` directory should be restored in the `pack` directory.

### Relevant log output

```Shell
A stack trace took during one of these failures shows that the `hasPackedObject` fails in restoring the packfile:


org.eclipse.jgit.internal.storage.file.WindowCache.removeNextBlock(WindowCache.java:833)
org.eclipse.jgit.internal.storage.file.WindowCache.queueRemoveAll(WindowCache.java:793)
org.eclipse.jgit.internal.storage.file.WindowCache.purge(WindowCache.java:406)
org.eclipse.jgit.internal.storage.file.WindowCache.purge(WindowCache.java:402)
org.eclipse.jgit.internal.storage.file.Pack.close(Pack.java:307)
org.eclipse.jgit.internal.storage.file.PackDirectory.remove(PackDirectory.java:408)
org.eclipse.jgit.internal.storage.file.PackDirectory.getPack(PackDirectory.java:174)
org.eclipse.jgit.internal.storage.file.PackDirectory.has(PackDirectory.java:144)
org.eclipse.jgit.internal.storage.file.ObjectDirectory.hasPackedObject(ObjectDirectory.java:318)
org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.has(CachedObjectDirectory.java:164)
org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.has(CachedObjectDirectory.java:156)
org.eclipse.jgit.internal.storage.file.WindowCursor.has(WindowCursor.java:126)
org.eclipse.jgit.transport.PackParser.checkObjectCollision(PackParser.java:1128)
org.eclipse.jgit.transport.PackParser.parse(PackParser.java:546)
org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(ObjectDirectoryPackParser.java:168)
org.eclipse.jgit.transport.ReceivePack.receivePack(ReceivePack.java:1559)
org.eclipse.jgit.transport.ReceivePack.receivePackAndCheckConnectivity(ReceivePack.java:1250)
org.eclipse.jgit.transport.ReceivePack.service(ReceivePack.java:2270)
org.eclipse.jgit.transport.ReceivePack.receive(ReceivePack.java:2200)
org.eclipse.jgit.http.server.ReceivePackServlet.doPost(ReceivePackServlet.java:166)
javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:212)
com.google.gerrit.httpd.GitOverHttpServlet$ReceiveFilter.doFilter(GitOverHttpServlet.java:638)
org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
org.eclipse.jgit.http.server.ReceivePackServlet$Factory.doFilter(ReceivePackServlet.java:115)
org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
org.eclipse.jgit.http.server.RepositoryFilter.doFilter(RepositoryFilter.java:109)
org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
org.eclipse.jgit.http.server.NoCacheFilter.doFilter(NoCacheFilter.java:50)
org.eclipse.jgit.http.server.glue.UrlPipeline$Chain.doFilter(UrlPipeline.java:210)
org.eclipse.jgit.http.server.glue.UrlPipeline.service(UrlPipeline.java:189)
org.eclipse.jgit.http.server.glue.SuffixPipeline.service(SuffixPipeline.java:70)
```

### Other information

During the pruning phase packfiles are not actually deleted but rather moved the `preserved` directory.
However, [change 122288](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/122288) introduced the ability to restore from the `preserved` directory to the `packed` directory, when a packfile was still referenced by jgit.

The implementation however missed to adapt the `ObjectDirectory.hasPackedObject()` to also restore from `preserved` when needed.

This leads to the preserved packfiles not being restored as expected and the `error_log` flooded with:
","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/133,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6djgyR,jgit,2643332241,133,NA,syntonyze,14819683,Antonio Barone,syntonyze@gmail.com,NA,2025-02-07T16:00:19Z,2025-02-07T16:00:19Z,"Closing this card as my expectations were incorrect.
The restoring of the packfiles does not happen when ""when a packfile was still referenced by jgit."", but when an when an object is missing but happens to still be available in a pack in the ""preserved"" directory.

The `PackFileInvalid` exceptions in the logs are just the consequence of the pruning/invalidation cycle and do not represent errors. These exceptions have now been silenced in jgit master with [1]

[1] https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1207964","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6djgyR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,jgit,2815557486,135,JGit 7.1.0 fails to authenticate via SSH to GitLab,bennati,11087579,Stefano Bennati,,CLOSED,2025-01-28T12:43:36Z,2025-02-05T12:49:35Z,"### Version

7.1.0

### Operating System

Linux/Unix

### Bug description

We use JGit as part of a CI/CD pipeline, we connect to our self-hosted GitLab and clone a project repository.
All worked well with JGit `7.0.0.202409031743-r`, with the upgrade to JGit `7.1.0.202411261347-r` the cloning started hanging for hours and eventually leading to pipeline timeouts. Reverting to 7.0.0 makes the issue disappear.

The only commit that seems related is https://github.com/eclipse-jgit/jgit/issues/44
I would appreciate some hints on what to test or what network settings to change in order to restore connectivity between the CI/CD pipeline and the GitLab server. 
Thank you!

### Actual behavior

Creating IoSession fails with timeout

### Expected behavior

Creating IoSession succeeds

### Relevant log output

```Shell
This is the relevant stack trace for a failed run with JGit 7.1.0, note the timestamps:

13:02:51.434 [main] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - Connecting to gitlab.self.hosted/10.122.88.197:3389
13:02:51.434 [main] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - setOption(SO_REUSEADDR)[true] from property=Property[socket-reuseaddr](Boolean]
13:02:51.435 [sshd-JGitSshClient[7574d4ad]-nio2-resume-thread-1] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - connect(gitlab.self.hosted/10.122.88.197:3389): waiting for connection (timeout=60000ms)
13:02:51.437 [sshd-JGitSshClient[7574d4ad]-nio2-resume-thread-1] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - Creating IoSession on /172.17.0.3:34696 from gitlab.self.hosted/10.122.88.197:3389 via null
13:13:18.812 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - writeBuffer(Nio2Session[local=/172.17.0.3:47894, remote=gitlab.self.hosted/10.122.88.197:3389]) writing 16 bytes
13:13:18.813 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setOutputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]): strict KEX resets output message sequence number from 3 to 0
13:13:18.814 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setOutputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]): cipher org.apache.sshd.common.cipher.ChaCha20Cipher@4c16fe3; mac null; compression none[Deflater/-1]; blocks limit 134217728
13:13:18.815 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]) No pending packets to flush at end of KEX
13:13:18.815 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - doHandleMessage(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]) process #2 SSH_MSG_NEWKEYS
13:13:18.815 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]) SSH_MSG_NEWKEYS command=SSH_MSG_NEWKEYS
13:13:18.815 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setInputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]): strict KEX resets input message sequence number from 3 to 0
13:13:18.816 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setInputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]): cipher org.apache.sshd.common.cipher.ChaCha20Cipher@6147f37b; mac null; compression none[Inflater/-1]; blocks limit 134217728
13:13:18.816 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - sendInitialServiceRequest(JGitClientSession[git@gitlab.self.hosted/10.122.88.197:3389]) Send SSH_MSG_SERVICE_REQUEST for ssh-userauth
13:13:18.816 [sshd-JGitSshClient[55a0f011]-nio2-thread-4] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - handleReadCycleFailure(Nio2Session[local=/172.17.0.3:47894, remote=gitlab.self.hosted/10.122.88.197:3389]) SshException after 755680212166 nanos at read cycle=2: Write attempt on closing session: SSH_MSG_SERVICE_REQUEST
13:32:52.455 [ForkJoinPool-1-worker-1] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - Cleanup org.eclipse.jgit.util.FS$FileStoreAttributes$$Lambda/0x00007f6b303ac000@52d0f583 during JVM shutdown
fatal: not a git repository (or any parent up to mount point /)


This is the stacktrace for a successful run with JGit 7.0.0

09:42:57.903 [main] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - Connecting to gitlab.self.hosted/10.122.89.190:3389
09:42:57.903 [main] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - setOption(SO_REUSEADDR)[true] from property=Property[socket-reuseaddr](Boolean]
09:42:57.904 [sshd-JGitSshClient[7a55fb81]-nio2-resume-thread-1] DEBUG org.apache.sshd.common.io.nio2.Nio2Connector - connect(gitlab.self.hosted/10.122.89.190:3389): waiting for connection (timeout=60000ms)
09:42:57.905 [sshd-JGitSshClient[7a55fb81]-nio2-resume-thread-1] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - Creating IoSession on /172.17.0.3:39762 from gitlab.self.hosted/10.122.89.190:3389 via null
09:42:57.906 [sshd-JGitSshClient[7a55fb81]-nio2-resume-thread-1] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - Client session created: Nio2Session[local=/172.17.0.3:39762, remote=gitlab.self.hosted/10.122.89.190:3389]
```

### Other information

_No response_","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/135/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cH6sM,jgit,2619321100,135,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-01-28T15:25:18Z,2025-01-28T15:25:18Z,"This is most likely https://github.com/apache/mina-sshd/issues/642 : upstream switched to using a strong random number generator, which turned out to be bad idea because of possible entropy starvation. This will be fixed in the next upstream release of Apache MINA sshd.

Work-arounds are:
* Stay on JGit 7.0.0 and use Apache MINA sshd 2.13.1.
* If on a Linux OS: run with Java system property `-Djava.security.egd=file:/dev/./urandom`

I hope to get an Apache MINA sshd release out in time to fix this in JGit 7.2.0 through a simple upstream version bump.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6cH6sM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c9kBY,jgit,2633384024,135,NA,bennati,11087579,Stefano Bennati,,NA,2025-02-04T09:46:59Z,2025-02-04T09:46:59Z,"Thank you for the suggestion @tomaswolf !
Setting the system property worked, in that the authentication passes the point mentioned in my previous comment.
Unfortunately the authentication fails soon after, do you have any other ideas about what to try?

New stacktrace:
```
16:48:56.790 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setServerKey(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) keyType=ssh-ed25519, digest=SHA256:PZeavwujsUq31TFEVaxO8O0xFKMjWYBr+Wb1sZQ4jj4
16:48:56.790 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleKexMessage(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389])[curve25519-sha256] KEX processing complete after cmd=31
16:48:56.791 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - checkKeys(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) key=ssh-ed25519-SHA256:PZeavwujsUq31TFEVaxO8O0xFKMjWYBr+Wb1sZQ4jj4, verified=true
16:48:56.791 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - sendNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) Send SSH_MSG_NEWKEYS
16:48:56.791 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - prepareNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) session ID=14:18:ca:29:05:5f:9a:55:05:4b:eb:3c:21:ee:a1:b2:04:cd:01:12:51:57:e2:fe:03:b2:17:b4:61:27:6b:ec
16:48:56.794 [sshd-JGitSshClient[53125718]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - encode(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) packet #2 sending command=21[SSH_MSG_NEWKEYS] len=1
16:50:56.700 [main] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - close(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) Closing immediately
16:50:56.700 [main] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - signalAuthFailure(JGitClientSession[git@gitlab.self.hosted/10.122.88.138:3389]) type=SshException, signalled=true, first=false: Session is being closed
```

Example of successful stacktrace with JGit 7.0.0
```
09:42:54.036 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setServerKey(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) keyType=ssh-ed25519, digest=SHA256:Qk9ZSCVak/wCnimWug10EV8VYnPyY4fYHPqQB2Sj0lE
09:42:54.037 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleKexMessage(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389])[curve25519-sha256] KEX processing complete after cmd=31
09:42:54.037 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - checkKeys(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) key=ssh-ed25519-SHA256:Qk9ZSCVak/wCnimWug10EV8VYnPyY4fYHPqQB2Sj0lE, verified=true
09:42:54.037 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - sendNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) Send SSH_MSG_NEWKEYS
09:42:54.037 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - prepareNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) session ID=ba:fa:a9:ef:e0:11:04:34:9b:0d:26:08:7b:36:53:20:c0:c7:9c:f8:0a:af:4a:7a:e6:0e:df:17:ea:aa:81:9a
09:42:54.041 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - encode(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) packet #2 sending command=21[SSH_MSG_NEWKEYS] len=1
09:42:54.041 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - writeBuffer(Nio2Session[local=/172.17.0.3:44002, remote=gitlab.self.hosted/10.122.89.190:3389]) writing 16 bytes
09:42:54.042 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setOutputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]): strict KEX resets output message sequence number from 3 to 0
09:42:54.043 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setOutputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]): cipher org.apache.sshd.common.cipher.ChaCha20Cipher@7a58ce16; mac null; compression none[Deflater/-1]; blocks limit 134217728
09:42:54.044 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) No pending packets to flush at end of KEX
09:42:54.044 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - doHandleMessage(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) process #2 SSH_MSG_NEWKEYS
09:42:54.044 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - handleNewKeys(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) SSH_MSG_NEWKEYS command=SSH_MSG_NEWKEYS
09:42:54.044 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setInputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]): strict KEX resets input message sequence number from 3 to 0
09:42:54.045 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - setInputEncoding(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]): cipher org.apache.sshd.common.cipher.ChaCha20Cipher@564d61e4; mac null; compression none[Inflater/-1]; blocks limit 134217728
09:42:54.045 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - sendInitialServiceRequest(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) Send SSH_MSG_SERVICE_REQUEST for ssh-userauth
09:42:54.045 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.eclipse.jgit.internal.transport.sshd.JGitClientSession - encode(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389]) packet #0 sending command=5[SSH_MSG_SERVICE_REQUEST] len=17
09:42:54.046 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.apache.sshd.common.io.nio2.Nio2Session - writeBuffer(Nio2Session[local=/172.17.0.3:44002, remote=gitlab.self.hosted/10.122.89.190:3389]) writing 52 bytes
09:42:54.046 [sshd-JGitSshClient[14d8e132]-nio2-thread-4] DEBUG org.apache.sshd.client.session.ClientUserAuthService - auth(JGitClientSession[git@gitlab.self.hosted/10.122.89.190:3389])[ssh-connection] send SSH_MSG_USERAUTH_REQUEST for 'none'
```","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c9kBY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c92I0,jgit,2633458228,135,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-04T10:17:59Z,2025-02-04T10:17:59Z,"Looks like encoding the packet still hangs. Strange. Sorry, I'm out of ideas.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c92I0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c-G2v,jgit,2633526703,135,NA,bennati,11087579,Stefano Bennati,,NA,2025-02-04T10:44:21Z,2025-02-04T10:44:21Z,Could it be a network configuration issue?,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c-G2v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c_YHB,jgit,2633859521,135,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-04T13:09:56Z,2025-02-04T13:09:56Z,Don't know.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6c_YHB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/135,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dKXQ7,jgit,2636739643,135,NA,bennati,11087579,Stefano Bennati,,NA,2025-02-05T12:49:33Z,2025-02-05T12:49:33Z,"I resolved by installing rng-tools on the machine, which improves entropy. Thanks for the help!","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dKXQ7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/136,https://api.github.com/repos/eclipse-jgit/jgit/issues/136,jgit,2818955532,136,FileReftableStack.addReftable does not match the specifications,zotttelbart,32455370,,,OPEN,2025-01-29T18:38:17Z,2025-01-29T18:38:17Z,"### Version

7.1.0

### Operating System

Windows

### Bug description

The implementation of FileReftableStack.addReftable doesn't match the specifications in [FileReftableStack.addReftable](https://git-scm.com/docs/reftable#_update_transactions)

The specification says, that a writer have to read the tables.list files to detemine the current tables after the lock is acquired.

### Actual behavior

addReftable fails, if the stack is not upToDate.

### Expected behavior

After acquire the lock for tables.list the stack should be reload if necessary.

### Relevant log output

```Shell

```

### Other information

With change https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206683 @msohn try to reload the stack, if necessary. But I don't know, if it is enough in racy conditions. To meet the specification addReftable should call reload or reloadIfNecassary.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/136/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/137,https://api.github.com/repos/eclipse-jgit/jgit/issues/137,jgit,2829393942,137,org.eclipse.jgit.api.CherryPickResult.getFailingPaths() seems to always contain a single entry,sorincarbunaru,10512384,Sorin Carbunaru,,OPEN,2025-02-04T07:50:28Z,2025-02-08T13:32:15Z,"### Version

7.1.0

### Operating System

Windows

### Bug description

I am trying to cherry-pick a commit that contains 2 modified files using `CherryPickCommand`. The cherry-pick results in `CherryPickStatus.FAILED`, because I also have the same 2 files modified in my working copy (as unstaged files). When I print `CherryPickResult.getFailingPaths()`, I only see only one file in the map with `MergeFailureReason=DIRTY_WORKTREE`.

### Actual behavior

 `CherryPickResult.getFailingPaths()` reports a single failing path.

### Expected behavior

 `CherryPickResult.getFailingPaths()` should have reported 2 failing paths.

### Relevant log output

```Shell

```

### Other information

I tried the same scenario in EGit in Eclipse. It also reports a single failing path, although SourceTree for example reports, as expected, 2 of them.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/137/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/137,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dsOgL,jgit,2645616651,137,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-08T13:32:14Z,2025-02-08T13:32:14Z,"Yes, the `ResolveMerger`stops on the first failing path.","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dsOgL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/138,https://api.github.com/repos/eclipse-jgit/jgit/issues/138,jgit,2836722608,138,Hard reset does not change executable bit if it is the only change,HarrisonMc555,22666187,Harrison McCullough,,OPEN,2025-02-06T22:07:36Z,2025-02-08T22:00:28Z,"### Version

7.1.0

### Operating System

MacOS, Linux/Unix

### Bug description

If you perform a hard reset and the only change for a file is the executable flag, then the file will not be modified in stage or on disk.

```
$ git init repo
$ echo 'echo hello' > script.sh
$ git add script.sh
$ git commit -m ""Add script.sh""
$ commit_id=""$(git rev-parse HEAD)""
$ git chmod +x script.sh
$ git add script.sh
$ git commit -m ""Mark script.sh as executable""
$ jgit-reset-hard ""$commit_id""
$ git status
```

### Actual behavior

```
$ git status
On branch master
Changes to be committed:
  (use ""git restore --staged <file>..."" to unstage)
	modified:   script.sh

$ git diff --cached
diff --git a/script.sh b/script.sh
old mode 100644
new mode 100755
```

### Expected behavior

```
$ git status
On branch master
nothing to commit, working tree clean

$ git diff --cached

$ git diff

```

### Relevant log output

```Shell
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - register org.eclipse.jgit.util.FS$FileStoreAttributes$$Lambda$242/0x00000070012bcd20@282a6d6b with shutdown hook
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 2164 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.SystemReader - loading config FileBasedConfig[/my/home/directory/.config/jgit/config]
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, create new FileSnapshot: lastRead=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, size=2164, fileKey=(dev=1000011,ino=184009684)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - readpipe [/opt/homebrew/bin/git, --version],/opt/homebrew/bin
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - readpipe may return 'git version 2.46.2'
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - remaining output:

[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - readpipe [/opt/homebrew/bin/git, config, --system, --show-origin, --list, -z],/opt/homebrew/bin
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - readpipe may return 'file:/opt/homebrew/etc/gitconfig credential.helper'
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - remaining output:

[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.FS - osxkeychain 
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 35 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.SystemReader - loading config FileBasedConfig[/opt/homebrew/etc/gitconfig]
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, create new FileSnapshot: lastRead=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, size=35, fileKey=(dev=1000011,ino=5777573)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 0 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.SystemReader - loading config FileBasedConfig[/my/home/directory/.config/git/config]
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 51 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.util.SystemReader - loading config UserConfigFile[/my/home/directory/.gitconfig]
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 51 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, create new FileSnapshot: lastRead=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, size=51, fileKey=(dev=1000011,ino=2563508)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, create new FileSnapshot: lastRead=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, size=137, fileKey=(dev=1000011,ino=184025403)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index, create new FileSnapshot: lastRead=2025-02-06 15:01:00.437932000, lastModified=2025-02-06 15:00:12.403936580, size=104, fileKey=(dev=1000011,ino=184027102)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=null, size changed from -1 to 64 bytes
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/objects/pack, create new FileSnapshot: lastRead=2025-02-06 15:01:00.448096000, lastModified=2025-02-06 14:54:35.021886207, size=64, fileKey=(dev=1000011,ino=184025409)
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[ForkJoinPool.commonPool-worker-3] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/objects/pack, isRacyClean=false, read=2025-02-06 15:01:00.448096000, lastModified=2025-02-06 14:54:35.021886207, delta=385426209793 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/objects/pack, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/HEAD, create new FileSnapshot: lastRead=2025-02-06 15:01:00.453030000, lastModified=2025-02-06 14:54:35.021578747, size=23, fileKey=(dev=1000011,ino=184025407)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, create new FileSnapshot: lastRead=2025-02-06 15:01:00.454040000, lastModified=2025-02-06 14:54:36.551031656, size=41, fileKey=(dev=1000011,ino=184025459)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - register org.eclipse.jgit.internal.storage.file.LockFile$$Lambda$255/0x000000700131e000@2396b279 with shutdown hook
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, isRacyClean=false, read=2025-02-06 15:01:00.454040000, lastModified=2025-02-06 14:54:36.551031656, delta=383903008344 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - unregister org.eclipse.jgit.internal.storage.file.LockFile$$Lambda$255/0x000000700131e000@2396b279 from shutdown hook
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/HEAD, isRacyClean=false, read=2025-02-06 15:01:00.453030000, lastModified=2025-02-06 14:54:35.021578747, delta=385431451253 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/HEAD, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, isRacyClean=false, read=2025-02-06 15:01:00.454040000, lastModified=2025-02-06 14:54:36.551031656, delta=383903008344 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - register org.eclipse.jgit.internal.storage.file.LockFile$$Lambda$255/0x000000700131e000@79f98c2d with shutdown hook
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index, create new FileSnapshot: lastRead=2025-02-06 15:01:00.460747000, lastModified=2025-02-06 15:00:12.403936580, size=104, fileKey=(dev=1000011,ino=184027102)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index, create new FileSnapshot: lastRead=2025-02-06 15:01:00.461038000, lastModified=2025-02-06 15:00:12.403936580, size=104, fileKey=(dev=1000011,ino=184027102)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/objects/pack, isRacyClean=false, read=2025-02-06 15:01:00.448096000, lastModified=2025-02-06 14:54:35.021886207, delta=385426209793 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/objects/pack, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index.lock, create new FileSnapshot: lastRead=2025-02-06 15:01:00.471216000, lastModified=2025-02-06 15:01:00.460306821, size=0, fileKey=(dev=1000011,ino=184027250)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.util.ShutdownHook - unregister org.eclipse.jgit.internal.storage.file.LockFile$$Lambda$255/0x000000700131e000@79f98c2d from shutdown hook
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index.lock, create new FileSnapshot: lastRead=2025-02-06 15:01:00.471872000, lastModified=2025-02-06 15:01:00.471794288, size=104, fileKey=(dev=1000011,ino=184027250)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/HEAD, isRacyClean=false, read=2025-02-06 15:01:00.453030000, lastModified=2025-02-06 14:54:35.021578747, delta=385431451253 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/HEAD, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, isRacyClean=false, read=2025-02-06 15:01:00.454040000, lastModified=2025-02-06 14:54:36.551031656, delta=383903008344 ns, racy<=7500 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/refs/heads/master, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index, create new FileSnapshot: lastRead=2025-02-06 15:01:00.477634000, lastModified=2025-02-06 15:01:00.471794288, size=104, fileKey=(dev=1000011,ino=184027250)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/index, create new FileSnapshot: lastRead=2025-02-06 15:01:00.477701000, lastModified=2025-02-06 15:01:00.471794288, size=104, fileKey=(dev=1000011,ino=184027250)
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, isRacyClean=false, read=2025-02-06 15:01:00.391635000, lastModified=2025-02-06 14:10:23.687933142, delta=3036703701858 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.config/jgit/config, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.420747000, lastModified=2024-10-01 00:00:19.347920839, delta=11113241072826161 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/opt/homebrew/etc/gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, isRacyClean=false, read=2025-02-06 15:01:00.421594000, lastModified=2022-01-31 09:32:25.367234588, delta=95232515054359412 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=/my/home/directory/.gitconfig, is unmodified
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, isRacyClean=false, read=2025-02-06 15:01:00.426299000, lastModified=2025-02-06 14:54:35.019791197, delta=385406507803 ns, racy<=2500000000 ns
[PerformHardReset.main()] DEBUG org.eclipse.jgit.internal.storage.file.FileSnapshot - file=repo/.git/config, is unmodified
```

### Other information

Here is a reproduction via Maven and a shell script (`demo.sh`). The only dependencies should be Java and Maven. It will create a Git directory named `repo` but will delete and re-create it every time.

[jgit-problem-demo.zip](https://github.com/user-attachments/files/18698225/jgit-problem-demo.zip)","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/138/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-jgit/jgit/issues/138,https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dsM2m,jgit,2645609894,138,NA,tomaswolf,8580452,Thomas Wolf,,NA,2025-02-08T13:31:16Z,2025-02-08T13:31:16Z,[Gerrit change 1208535](https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1208535) fixes this.,"{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/comments/IC_kwDOKi9gDM6dsM2m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-jgit/jgit/issues/139,https://api.github.com/repos/eclipse-jgit/jgit/issues/139,jgit,2850880673,139,Checking out a dedicated commit fails after using setNoCheckout(true),Waldleufer,22003632,Martin,,OPEN,2025-02-13T12:19:35Z,2025-02-13T12:26:03Z,"### Version

7.1.0.202411261347-r

### Operating System

Windows

### Bug description

Hello 👋 

clone `.setNoCheckout(true)` is conflicting with checkout `.setForced(true)` 

I am not 100% sure if that is a bug, but it quite feels like it. 

### Actual behavior

So I did something along these lines: 

```java
        final var clone = Git.cloneRepository()
            .setURI(repo.getUrl())
            .setDirectory(outputPath.toFile())
            .setNoCheckout(true)
            .setCredentialsProvider(buildCredentialsProvider(repo));
```

and afterwards I tried to 

```java
        try (final var git = clone.call()) {
            final var repository = git.getRepository();
            final var commitSha = resolve(repository, repo.getRevision());

            log.trace(""Checking out commit {}"", commitSha);
            git.checkout().setName(commitSha).call();
```
Which didn't work and yielded a `org.eclipse.jgit.api.errors.CheckoutConflictException: Checkout conflict with files`

Since the directory in which I want to clone is empty at that point in time due to the `.setNoCheckout(true)` I thought, I could just ignore this by doing

```java
            git.checkout().setName(commitSha).setForced(true).call();
```

However, because of this code here failing when a file (that is already not there) can not be deleted, that didn't lead to the expected outcome.

https://github.com/eclipse-jgit/jgit/blob/89f5425e136c85bc834506bdb83c3cc4fdbebc9b/org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java#L1309-L1311

### Expected behavior

The checkout to succeed, because there are no conflicting Files

### Relevant log output

```Shell

```

### Other information

The repository used was the jgit repository. The reference used was the commithash of the tag `v7.1.0.202410012040-m1` However private/public repo is not relevant for this bug.

Removing ` .setNoCheckout(true)` lead to the checkout succeeding. ","{""url"": ""https://api.github.com/repos/eclipse-jgit/jgit/issues/139/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
