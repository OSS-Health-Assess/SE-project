type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/apache/incubator-annotator/issues/7,https://api.github.com/repos/apache/incubator-annotator/issues/7,incubator-annotator,244325933,7,Make the purpose of this tool clear(er),miclill,4736527,,,CLOSED,2017-07-20T11:10:33Z,2017-08-23T12:55:22Z,I can't find a good description of the problem this is trying to solve.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/7,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDA0MTY0Nw==,incubator-annotator,324041647,7,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-08-22T14:21:05Z,2017-08-22T14:21:05Z,"Sorry for the delayed response!

I'm guessing that http://annotator.apache.org/ was insufficient? 😃 

We're focused first on building browser libraries for working with [Web Annotation Data Model](https://www.w3.org/TR/annotation-model/) documents. We're also aggregating community members and code for [Web Annotation Protocol](https://www.w3.org/TR/annotation-protocol/) and model validation tooling.

Our primary objective is to provide *developers* with a set of ""front to back"" libraries for working with Web Annotation.

Does that summarize it all a bit better? If not, I'd love to hear more!

Thanks!
🎩 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDA0MTY0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/7,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI2MjkxNA==,incubator-annotator,324262914,7,NA,miclill,4736527,,,NA,2017-08-23T08:43:08Z,2017-08-23T08:43:08Z,@BigBlueHat thank you for your answer. I understand better now. May I suggest to add an example to http://annotator.apache.org/? I think a lot of people are like me and really like examples.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI2MjkxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/7,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDMyMDgwNg==,incubator-annotator,324320806,7,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-08-23T12:55:22Z,2017-08-23T12:55:22Z,"@miclill glad that was helpful. 😄  We've got a demo in this repo now, and I do plan to get it added to the web site--along with more docs/info soon.

Appreciate the interest! Be sure to say ""hi"" on the mailing list: http://annotator.apache.org/#mailing-lists","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDMyMDgwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/8,https://api.github.com/repos/apache/incubator-annotator/issues/8,incubator-annotator,248303631,8,Add composer.json to let PHP developers to keep track of annotator.js on packagist.org,fabiomontefuscolo,162023,Fabio Montefuscolo,fabio.montefuscolo@gmail.com,CLOSED,2017-08-07T04:16:37Z,2017-08-14T19:01:45Z,"Hello!

I would like to propose the composer.json file and ask you to add you library on packagist.org. It will be easy to PHP developer keep track of your updates and refer your library as project dependency. I bet many CMS and blogs developers would take advantage of this facility.

Unfortunately, all I can do is propose this file. If you agree, you have more 3 steps:

i) create packagist.org account;
ii) submit your package and
iii) wire github webhooks in packagist

I would love to have your library on packagist.org","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/8,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjAxNDU4Nw==,incubator-annotator,322014587,8,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-08-13T00:43:17Z,2017-08-13T00:43:17Z,This is not the annotator.js project and we are not ready for anyone to consume it yet.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjAxNDU4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/8,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjA5NzA4NQ==,incubator-annotator,322097085,8,NA,marclaporte,1004261,Marc Laporte,,NA,2017-08-14T04:22:25Z,2017-08-14T04:22:25Z,"Hi Randall,

FYI, it was also submitted here:
https://github.com/openannotation/annotator/pull/661

Context: We added annotator.js v1.2 to Tiki 17.0: https://doc.tiki.org/Tiki17#Annotations and we want to get everything from Packagist to make our lives easier and to increase mindshare.

And now, we are wondering what we should do for Tiki 18.x and beyond. Should we plan to upgrade to v2? ( but it's alpha and I see no plan for an official release ). Will there be a migration path to Apache Annotator?, etc. Realistically, what timeline are we looking at?  I really don't want this to be perceived as pressure. Just looking for best possible information so we can plan what will be in our next releases.
https://tiki.org/Versions

Thanks!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjA5NzA4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/8,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjI3OTA4OQ==,incubator-annotator,322279089,8,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-08-14T19:01:44Z,2017-08-14T19:01:44Z,"You are more than welcome to publish whatever you like to composer, but I have no experience with it and no desire to make an account or maintain and commit to publishing there. The first focus here is on making an official release of any kind at all. At that point, I imagine we'd publish bundled .js that you could vendor, just as you're vendoring other libraries, or you could push it to composer if you prefer to consume it from there.

If publishing this to composer is something you feel very strongly about we could make a packaging repository and add you as a committer to maintain things there. I don't think it makes sense to clog up this repo with packaging boilerplate for every package repository that someone wants to get annotator from.

As for what to do with Tiki and annotator.js, I can't say yet. I don't have time to work on this and annotator.js right now. I have thought about rebooting Annotator.js as an application built on the Apache Annotator libraries, but we're not there yet and Annotator.js probably needs new maintainers for this to happen.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjI3OTA4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/11,https://api.github.com/repos/apache/incubator-annotator/issues/11,incubator-annotator,252313158,11,Requirements?,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2017-08-23T14:56:24Z,2017-08-28T02:00:58Z,"I just successfully ran the demo with node 7.10.0 and npm 4.2.0

However, I've not yet attempted the hot-reload stuff.

@tilgovi are there specific things that node 8 and npm 5 enable that I'm missing?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/11,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDUxODA1Mg==,incubator-annotator,324518052,11,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-08-24T02:50:18Z,2017-08-24T02:50:18Z,"I just didn't want to moderate my use of ES2017. The only script is `bin/start.mjs`, though, which is pretty simple.

I'll address this issue as soon as I can. Probably, I should re-introduce babel into the pipeline and formalize the build targets and developer runtime requirements.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDUxODA1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/13,https://api.github.com/repos/apache/incubator-annotator/issues/13,incubator-annotator,265543530,13,Fragment identifier license chore,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2017-10-15T03:50:55Z,2018-03-13T04:14:38Z,A small script should replace the pegjs invocation in the fragement-identifier prepublish step. This script would programmatically invoke pegjs and prepend the project license header.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/13,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzQ0MQ==,incubator-annotator,343777441,13,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-12T23:23:42Z,2017-11-12T23:23:42Z,pegjs/pegjs#491,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzQ0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/13,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjA2NTY5NA==,incubator-annotator,356065694,13,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-01-08T19:12:49Z,2018-01-08T19:12:49Z,"Also, need to fix the license header in the fragment.pegjs file. I inappropriately added a comment at the top. I think, instead, that the full text of the W3C license needs to appear in LICENSE and a small notice in NOTICE, but nothing should be added to third-party code.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjA2NTY5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/14,incubator-annotator,268237663,14,How to keep selection range when DOM change for unchangeable article?,webbery,5257853,webberg,,CLOSED,2017-10-25T01:25:24Z,2017-11-12T23:21:13Z,"Hi, this may be an enchancement. Because I have no idea how to impliment it. 
I have selected a range while other annotated part of my selection. If I used websocket to show these DOM changes, can I keep my selection?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTIwMDMzMw==,incubator-annotator,339200333,14,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-10-25T03:07:45Z,2017-10-25T03:07:45Z,"Thanks for raising this issue.

Right now there is very little in this repository other than some sample / demo code and a package for parsing and serializing selector fragments.

Are you looking for help with Annotator.js, perhaps?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTIwMDMzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUxNzk1Mw==,incubator-annotator,339517953,14,NA,webbery,5257853,webberg,,NA,2017-10-26T00:59:29Z,2017-10-26T00:59:29Z,"I use annotator.js of open annotator. But I do not update annotation simultaneously. If selection save as a node before update, it may be separated to two parts which can only select one of them in chrome.

Because of that, it is still an idea I'm not implimented.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUxNzk1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUyMDE5NQ==,incubator-annotator,339520195,14,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-10-26T01:13:25Z,2017-10-26T01:13:25Z,You are looking for a different repository: https://github.com/openannotation/annotator,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUyMDE5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUyNDMwNw==,incubator-annotator,339524307,14,NA,webbery,5257853,webberg,,NA,2017-10-26T01:41:25Z,2017-10-26T01:41:25Z,"Yes, I have used that repository in my nodejs project. And I'm not sure that my new idea can be implemented or not. Because this repository doesn't update for a long time. W3C create a new annotation standard. 

This incubator will be better than openannotation. So I think it may have some way to keeping selection? :)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTUyNDMwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/14,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzI2NA==,incubator-annotator,343777264,14,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-12T23:21:13Z,2017-11-12T23:21:13Z,"@webbery thank you again for bringing up your needs here. I'm going to close this issue because there is not a concrete action to take. This repository is very new but it's being designed with this kind of use case in mind.

When we get close to our first release I'll go back through these issues and make sure to comment so that you and anyone else who is waiting to test the new packages can check that it addresses your needs.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzI2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/16,incubator-annotator,269985132,16,Firefox selection weirdness in the demo,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2017-10-31T14:43:23Z,2017-11-14T18:51:09Z,"When I select content in the left-hand box in the demo, the selection jumps outside of the box and sometimes leaves earlier selections in place. Double clicking a word works fine, however.

Also, if I double click near the `,` or `.` in the sentence the highlighting happens within the scope of the whole page--not just within the right-hand side box.

Chrome does seem to have these issues.

This trouble is in Firefox Dev Edition 57.0b12 (64-bit).","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzUzNw==,incubator-annotator,343777537,16,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-12T23:25:16Z,2017-11-12T23:25:16Z,"I can't reproduce this in the same environment.

I'll close this for now, but am happy to work this out with you if it continues to be a problem.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Mzc3NzUzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI2ODA4OQ==,incubator-annotator,344268089,16,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-14T14:02:47Z,2017-11-14T14:02:47Z,"Here's what it looks like for me after double-clicking the first `,` in the selection area. You'll note in this case it *does* properly highlight the matching `, ` (the space gets added by the browser's handling of double-clicking text) in the display box, but then it also selects the `, ` in the content below (see the gray highlight after ""In the second paragraph"").

![screenshot-2017-11-14 apache annotator incubating demo](https://user-images.githubusercontent.com/43209/32783664-88fa74b8-c91a-11e7-87c4-7ee71e2a5dcd.png)
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI2ODA4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI2ODgyMg==,incubator-annotator,344268822,16,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-14T14:05:21Z,2017-11-14T14:05:21Z,"Double clicking the `.` at the end of the sentence shows the same situation--the highlight appearing in the content below the demo boxes. However, it does not display in the `#corpus` (right hand side display box) because on the left the text contains a `\n` but on the right that `\n` gets stripped (afaict) by the use of `innerText` when rendering the display.

![screenshot-2017-11-14 apache annotator incubating demo 1](https://user-images.githubusercontent.com/43209/32783754-d8b85b46-c91a-11e7-8e0c-5e9ec2bd5c2c.png)

The whitespace thing should be relatively trivial to fix, but the selecting outside of the intended area is probably a bug.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI2ODgyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI3ODM0MA==,incubator-annotator,344278340,16,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2017-11-14T14:38:09Z,2017-11-14T14:38:09Z,"@BigBlueHat: just to check, might you have the [Precise links](https://addons.mozilla.org/en-US/firefox/addon/precise-links/) extension enabled? That could surely cause the out-of-box selection (it reacts to the fragment identifier, and applies it to the page as a whole).","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDI3ODM0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/16,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDM1OTEwMQ==,incubator-annotator,344359101,16,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-14T18:51:09Z,2017-11-14T18:51:09Z,"@Treora I did indeed (at least in Firefox). Thank you!

That was indeed the cause, as disabling it removed the ""bug.""

Thanks, Gerben!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDM1OTEwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/18,https://api.github.com/repos/apache/incubator-annotator/issues/18,incubator-annotator,273805183,18,Adding the demo to the site,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2017-11-14T14:09:50Z,2018-06-13T18:37:51Z,"Right now the demo in this repo is as much a dev environment as it is a demo--which is great! 😸 

However, I'd also like to package up the demo code (occasionally) and add it to the [apache/incubator-annotator-website](https://github.com/apache/incubator-annotator-website) repo.

I'm new to webpack, so untangling the dev/build environment bits is what I need guidance in.

Thanks!
🎩 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/18,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5MjM0NA==,incubator-annotator,395992344,18,NA,JakeHartnell,521978,Jake Hartnell,,NA,2018-06-09T19:19:24Z,2018-06-09T19:19:24Z,Working on it!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5MjM0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/18,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxNDA3MQ==,incubator-annotator,396014071,18,NA,JakeHartnell,521978,Jake Hartnell,,NA,2018-06-10T02:12:48Z,2018-06-10T02:12:48Z,"I added a webpack build to the incubator-annotator-website. It includes the demo from here, but styles it with Semantic UI. Going to be working on adding code examples to the demo page as that would be the most helpful for people getting started.

PR here: https://github.com/apache/incubator-annotator-website/pull/3","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxNDA3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/18,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzAzMzUzMQ==,incubator-annotator,397033531,18,NA,JakeHartnell,521978,Jake Hartnell,,NA,2018-06-13T18:10:10Z,2018-06-13T18:10:10Z,"Perhaps this should be closed after this PR: https://github.com/apache/incubator-annotator-website/pull/4

There are still more improvements to be made. For example, it would be nice if there were code examples next to the demos. Maybe we should create a separate issue for code examples?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzAzMzUzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/18,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA0MjI5NQ==,incubator-annotator,397042295,18,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-13T18:37:51Z,2018-06-13T18:37:51Z,@JakeHartnell a code example focused issue would be grand! Would also serve as some basic docs/tests. Great idea.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA0MjI5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/19,https://api.github.com/repos/apache/incubator-annotator/issues/19,incubator-annotator,277762427,19,[incubator-annotator] capitalization error in imported module name asyncGenerator ,uskudarli,1347035,,,CLOSED,2017-11-29T13:54:02Z,2017-12-02T22:17:02Z,"
After installation of [incubator-annotator](https://github.com/apache/incubator-annotator)

when the demo is started
> yarn start
the error:
ERROR in ./node_modules/@babel/runtime/helpers/builtin/es6/wrapAsyncGenerator.js
Module not found: Error: Can't resolve './AsyncGenerator' 
is encountered.

Fixing the capitalization (from A to a) resolves the issue (import AsyncGenerator from ""./asyncGenerator"")

","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/19,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjkwOA==,incubator-annotator,348292908,19,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-30T19:21:56Z,2017-11-30T19:21:56Z,Look like @bjonnh diagnosed this is #20. I'm going to close this so we can track it in one place. Thanks so much!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjkwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/19,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcyNDIwNQ==,incubator-annotator,348724205,19,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-12-02T22:17:02Z,2017-12-02T22:17:02Z,This should be fixed now!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcyNDIwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/20,https://api.github.com/repos/apache/incubator-annotator/issues/20,incubator-annotator,278157888,20,Upstream bug in babel?,bjonnh,521867,Jonathan Bisson,,CLOSED,2017-11-30T15:18:58Z,2017-12-02T22:16:53Z,"I had to edit node_modules/\@babel/runtime/helpers/builtin/es6/wrapAsyncGenerator.js
and change the AsyncGenerator.js include to asyncGenerator.js

I couldn't find that in the original babel code, they seem to use a generator.

Filed a bug upstream: https://github.com/babel/babel/issues/6938

I ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/20,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjM4Nw==,incubator-annotator,348292387,20,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-30T19:20:12Z,2017-11-30T19:20:12Z,Thank you! That does look like an upstream bug.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjM4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/20,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjYyNg==,incubator-annotator,348292626,20,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-30T19:20:58Z,2017-11-30T19:20:58Z,"I think I might disable the runtime transformation for now. I'm having some other issues with it, too.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5MjYyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/20,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyODgzNQ==,incubator-annotator,348328835,20,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-30T21:37:33Z,2017-11-30T21:37:33Z,Cool. I'll close this as needing to be upstreamed. @bjonnh you up for doing that? 😄 ,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyODgzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/20,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcyNDE5MQ==,incubator-annotator,348724191,20,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-12-02T22:16:53Z,2017-12-02T22:16:53Z,This should be fixed now!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcyNDE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/21,https://api.github.com/repos/apache/incubator-annotator/issues/21,incubator-annotator,278159945,21,Ability to use multiple layers of annotation.,bjonnh,521867,Jonathan Bisson,,CLOSED,2017-11-30T15:24:15Z,2020-07-24T11:25:12Z,"This kind of thing cannot be represented in a DOM easily, unless we have a tree and a way for each tree to just represent the index of the annotations in it.

Working in a DOM:
<annotation type=""important_sentence"">The <annotation type=""animal"">cat</annotation> is on the <annotation type=""place"">roof</annotation></annotation> 

Not working in a DOM:
 <anno1>.....<anno2>.....</anno1>.....</anno2>   

I was envisionning something similar to (not following any W3C recommendation here, just an idea)
<text>
Something is here
<annotations>
<annotation_layer><annotation type=""verb"" start_index=""9"" end_index=""11"">is</annotation></annotation_layer>
<annotation_layer><annotation type=""sentence"" start_index=""0"" end_index=""-1"">Something is here</annotation></annotation_layer>
<annotation_layer><annotation type=""beginning"" start_index=""0"" end_index=""11"">Something is</annotation></annotation_layer>
<annotation_layer><annotation type=""end"" start_index=""9"" end_index=""15"">is here</annotation></annotation_layer>
</annotations>
</text>

But copying the text over and over is probably not a good idea…
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/21,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODIyNDc5NQ==,incubator-annotator,348224795,21,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-30T15:36:34Z,2017-11-30T15:36:34Z,"The way this has been done in the past (afaik) is to keep references to the groups of DOM nodes that represent a single annotation--and juggle all the interleaved DOM nodes if/when anything changes. It's beyond inefficient, but it's what happens when you cram to trees together...

So, from your example, you'd end up with something like this (pseudo code here also):
```html
<p><mark data-anno-id=""3"">Something </mark><mark data-anno-id=""1""><mark data-anno-id=""3""><mark data-anno-id=""2"">is</mark></mark><mark data-anno-id=""3""> here</mark></mark></p>

<p><mark data-anno-id=""345"">And there's more text</mark> down here</p>
```

Lovely, right? 😉 The text in each selection would be:
1. ""is""
2. ""is here""
3. ""Something is here And there's more text""

Presented as a tree this looks like:
```html
<p>
  <mark data-anno-id=""3"">Something </mark>
  <mark data-anno-id=""1"">
    <mark data-anno-id=""3"">
      <mark data-anno-id=""2"">is</mark>
    </mark>
    <mark data-anno-id=""3""> here</mark>
  </mark>
</p>

<p>
  <mark data-anno-id=""345"">And there's more text</mark>
  down here
</p>
```

The DOM will think of (and treat) several of these `<mark>` tags as parents or children of other `<mark>` tags. The annotation software, however, would treat them as unrelated and remove/add/change their occurrences wherever they're found. Finding them is one thing (`document.querySelectorAll('[data-anno-id=3]`) creating them interleaved inside other stuff is entirely another...","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODIyNDc5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/21,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5NDI5NQ==,incubator-annotator,348294295,21,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-11-30T19:27:06Z,2017-11-30T19:27:06Z,"This is helpful context for whomever wants to implement a highlighter, but we haven't got one yet. The demo adds `mark` do documents as an example of what could be done with the result of selection, but there's no exposed highlighter API yet.

Where does that leave us with this issue? Is there more to discuss here right now? Would it be helpful for me to leave it open?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODI5NDI5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/21,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyODU2Ng==,incubator-annotator,348328566,21,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-30T21:36:27Z,2017-11-30T21:36:27Z,"I think let's leave it open and begin planning/coding a highlighter. It's a super hard piece of this puzzle, and having that done will mean more annotation tools (built on Apache Annotator ta boot!). 😉 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyODU2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/21,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzQ5MjcxMw==,incubator-annotator,663492713,21,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-07-24T11:23:48Z,2020-07-24T11:23:48Z,"We do have a simple highlighter now, using the `<mark>`-based approach, which could be used for overlapping annotations as described [above](https://github.com/apache/incubator-annotator/issues/21#issuecomment-348224795).

Unless I overlook a relevant nuance, this issue and #47 (“Interleaving selections within the DOM”) seem pretty much the same topic; closing this one.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzQ5MjcxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/22,incubator-annotator,278278971,22,Build a highlighter,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2017-11-30T21:39:22Z,2020-04-16T15:50:22Z,"This does eek into the realm of UX, so I want to proceed cautiously here. However, juggling the ""mixed tree"" environment discussed in #21 is likely to be a near everyday occurrence for folks building annotation tools.

If we can collectively solve that issue well, we'll all win. 😁 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyOTM3MA==,incubator-annotator,348329370,22,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2017-11-30T21:39:31Z,2017-11-30T21:39:31Z,"Additionally, this might help inform things the browsers need to change/tweak/add about how the DOM itself works and interacts.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODMyOTM3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM0NDQ3OQ==,incubator-annotator,348344479,22,NA,Laurian,21679,Laurian Gridinoc,,NA,2017-11-30T22:40:34Z,2017-11-30T22:40:34Z,"Many years ago, there was http://xpointerlib.mozdev.org a Firefox add-on used for Annotea, that would insert into DOM elements to highlight annotations, while marking those nodes to be ignored in further operations, such that multiple annotations would still more or less anchor. 

See `function isMarkedIgnore(element)` in https://www.mozdev.org/source/browse/xpointerlib/src/components/nsXPointerService.js?rev=1.21;content-type=text%2Fplain

","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM0NDQ3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MjAwNg==,incubator-annotator,348372006,22,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-12-01T01:10:43Z,2017-12-01T01:10:43Z,Worth taking inspiration from https://github.com/nickstenning/marks too,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MjAwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MjA4OA==,incubator-annotator,348372088,22,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-12-01T01:11:12Z,2017-12-01T01:11:12Z,Nice part about inserting `mark` tags is that it's super boring and the browser styles it.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MjA4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MzAyNg==,incubator-annotator,348373026,22,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2017-12-01T01:16:54Z,2017-12-01T01:16:54Z,"I take that back. I would rather not commit to any tag choice at all right now and just spend some time mulling over what problem(s) really need solving.

Here are some more formed thoughts that have come up for me in the past:

Q: How to denote things added by the annotation layer
A: TDB, but also maybe just doesn't matter to some selectors

Q: How to visualize style / modify the DOM
A: TDB, but generally requires iterating over the text nodes for text use cases

Q: How do we iterate over all the text nodes?
A: `NodeIterator`, which I even built a polyfill for: https://github.com/tilgovi/dom-node-iterator

I think we need to sketch a couple highlighter implementations and play with them.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODM3MzAyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/22,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNDczNjMzNQ==,incubator-annotator,614736335,22,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-04-16T15:50:21Z,2020-04-16T15:50:21Z,Done in PR 59: <https://github.com/apache/incubator-annotator/pull/59>,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNDczNjMzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/23,https://api.github.com/repos/apache/incubator-annotator/issues/23,incubator-annotator,286853505,23,Build infrastructure,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2018-01-08T19:11:57Z,2018-01-10T18:21:21Z,Set up build infrastructure for outputting ESM and CJS builds for the supported node/browser platforms.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/23,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjA2NjQyOQ==,incubator-annotator,356066429,23,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-01-08T19:15:04Z,2018-01-08T19:15:04Z,I have WIP on this. Working locally. I'm just working out the last kinks.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjA2NjQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/23,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjY5MDcwNg==,incubator-annotator,356690706,23,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-01-10T18:21:21Z,2018-01-10T18:21:21Z,Closed by 4f7d0ec6b3e9567f6d38f573cf3e5ade98c3965b,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NjY5MDcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/24,incubator-annotator,286854434,24,LICENSE and NOTICE in packages,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2018-01-08T19:14:47Z,2018-03-28T18:23:35Z,"If packages are to be published to NPM, I think they should each have their own copy of LICENSE and NOTICE. It's possible we should concatenate all the NOTICE files into the root NOTICE file when preparing the ""official"" Apache release, or maintain such an aggregation by hand, but I think we want both.

- When we publish to NPM, I want individual packages to have licenses and notices for their constituent code.

- When we publish a source release of the whole repo, I want a LICENSE and NOTICE file that conforms to ASF expectations.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjU0MjAxMw==,incubator-annotator,372542013,24,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-03-13T04:17:49Z,2018-03-13T04:17:49Z,"@BigBlueHat how do you think we should handle this? Do we want to treat the packages as sub-projects and put LICENSE + NOTICE in each one? Or treat it all as one big project with a single LICENSE + NOTICE at the root, but then what do we do about npm packages (nothing, maybe, and assume the license and URL in the package.json is enough to find the source)?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjU0MjAxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjY5NTA1OQ==,incubator-annotator,372695059,24,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-13T14:57:59Z,2018-03-13T14:57:59Z,"Given that npm distribution is still source code distribution, the LICENSE + NOTICE in each sub-project is likely the most correct.

Another advantage that has is that NOTICE file contents are subsequently more correct.

However, if we go that route, we'll also want a script (probably) that aggregates all the NOTICE files into one big one for the main project.

Does that sound sensible?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjY5NTA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjY5NTEwNg==,incubator-annotator,372695106,24,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-13T14:58:07Z,2018-03-13T14:58:07Z,@Humbedooh @jimjag is there someone we should reach out to within the ASF who could better answer this question?,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjY5NTEwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mjc2NTEyMA==,incubator-annotator,372765120,24,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-03-13T18:11:53Z,2018-03-13T18:11:53Z,"That sounds right to me. Even the Babel-transipled source is source to me and I got help from a Babel maintainer yesterday to preserve license headers in transpiled files, even though I don't expect those will be in an Apache release and only distributed through npm.

I think we should proceed that way and I'll figure out something reasonable for aggregating them, although maybe in the short term it's easy enough to do by hand. Probably not where we should spend coding time right now.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mjc2NTEyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDM4MDIwNQ==,incubator-annotator,374380205,24,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-19T21:14:59Z,2018-03-19T21:14:59Z,"Here's the official ASF stuff:
https://apache.org/dev/licensing-howto.html#assembling-license-and-notice

Pretty easy to copy/paste. 😁 I'll try and tackle this one soon.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDM4MDIwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk1OTI2Mw==,incubator-annotator,376959263,24,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-28T16:57:43Z,2018-03-28T16:57:43Z,"@tilgovi @apache/annotator-committers I've added LICENSE to all packages and NOTICE to just (for now) `packages/fragment-identifier` based on my understanding of what's needed.

Do we need NOTICE in all of the packages even if there's no additional code used (directly in our code; aka not merely a `dependency` in packages) from other projects? or is that file only present if we have used/modified code which we've also added to our project's repo?

Once we know those answers, this issue MAY be close-able.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk1OTI2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/24,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk4NTIzOA==,incubator-annotator,376985238,24,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-03-28T18:17:14Z,2018-03-28T18:17:14Z,"My read is that we should have a NOTICE file even if it contains nothing but our header. Per the ASL, the content of that NOTICE file would then be reproduced downstream if other consumers embed Annotator, and serves as a notice that the software includes Apache Annotator components.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk4NTIzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/25,incubator-annotator,289128864,25,error: context not equal to range's container,blahah,836040,Rik Smith-Unna,,CLOSED,2018-01-17T03:10:32Z,2019-06-22T23:27:57Z,"Hi, I'm trying to use annotator to allow generating an annotation from any arbitrary selection in a web page.

I'm having an issue with `describeTextQuoteByRange` from `@annotator/dom`.

If I modify the demo so that the `context` passed to `describeTextQuoteByRange` is anything other than the original value (`selectable`), it fails with the error:

```
Uncaught (in promise) Error: Context not equal to range's container; not implemented.
    at quote.js:48
    at Generator.next (<anonymous>)
    at step (asyncToGenerator.js:10)
    at _next (asyncToGenerator.js:25)
    at asyncToGenerator.js:32
    at new Promise (<anonymous>)
    at asyncToGenerator.js:5
    at describeTextQuoteByRange (quote.js:21)
    at HTMLDocument.onSelectionChange (mount.js:26)
```

I copied the approach used in the demo - I create a range using `var selectableRange = document.createRange()`, then add a node using `selectableRange.selectNodeContents(el)`.

I tried using `document.body` as `el`, and various other elements larger than `selectable`, but they all give the same error. I also tried leaving out the `context` key from the options object, same result.

Can you provide any insight into how this should be done?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODI4NjI3Ng==,incubator-annotator,358286276,25,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2018-01-17T12:12:04Z,2018-01-17T12:12:04Z,"As you may be aware, annotator's code is still very immature, and the most relevant part of the error message is the 'not implemented'. So in any case the solution should be to develop this function further, not to change the way you invoke it. I see I put a bit more info in the [source code](https://github.com/apache/incubator-annotator/blob/f7e7daab30949dccbf990105c08bfe887b1b6db9/packages/dom/src/text/quote.mjs#L38-L40):
```
  // FIXME We should get range index relative to context. Look at
  // dom-anchor-text-position? For now, we implement the easy case where the
  // ranges are within the same container.
```

Would be good to sit down some time and develop this to a more usable state.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODI4NjI3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODMzMjQyMw==,incubator-annotator,358332423,25,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-01-17T15:05:42Z,2018-01-17T15:05:42Z,"I did some digging and it seems like the demo code limits which nodes can be used in a way the underlying library code does not:
https://github.com/apache/incubator-annotator/blob/master/demo/index.js#L57-L59

I'm not sure if this `isWithinNode()` method is solely for the demo's selection box, or if something like that is always needed when using the underlying library.

This sounds like a job for @tilgovi! 😉 I'm happy to hack into it more, but some basic guidance would help me not make a mess. 😁 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODMzMjQyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQxMjU3NQ==,incubator-annotator,358412575,25,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2018-01-17T19:18:46Z,2018-01-17T19:18:46Z,"> I'm not sure if this isWithinNode() method is solely for the demo's selection box, or if something like that is always needed when using the underlying library.

It is needed in the demo, because the (content of) the `#selectable` text box is regarded as the 'document' we are annotating (and the `#corpus` box next to it is the document the annotation is reapplied to). Passing a range that falls outside the document you are working in seems generally invalid. So the `isWithinNode` check is done because we pass the contents of `#selectable` as the `context` to `describeRange`.

The actual issue here is more or less the other way around: if the context/'document' is larger than a single text node, e.g. the whole `document.body`, things should of course work fine, but that (most usual) situation not yet implemented.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQxMjU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQyMDczMg==,incubator-annotator,358420732,25,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-01-17T19:44:00Z,2018-01-17T19:44:00Z,"Now that the build is in place, I'm comfortable importing dom-anchor-* libraries. I'll do that ASAP and then ping back this issue.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODQyMDczMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA0Mjk0MA==,incubator-annotator,397042940,25,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-13T18:39:53Z,2018-06-13T18:39:53Z,"I'm curious how our recent work might have effected the status of this issue.

@tilgovi let's track that importing task in a new issue.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA0Mjk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/25,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwNTc3Nw==,incubator-annotator,504705777,25,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-06-22T23:27:57Z,2019-06-22T23:27:57Z,Fixed in c7e98eeac3e07e45b14b94e2aec2add8f137aea9.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwNTc3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/26,https://api.github.com/repos/apache/incubator-annotator/issues/26,incubator-annotator,306391950,26,Documentation link error,kination,1720209,K.I. (Dennis) Jung,inylove82@gmail.com,CLOSED,2018-03-19T09:45:09Z,2018-03-28T16:47:05Z,"Hello,
The link `development documentation` README file seems not connected. Could you look on?

Also, is there any document which describes this project more clearly?

Thanks","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/26,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk1NTY0Mg==,incubator-annotator,376955642,26,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-28T16:47:05Z,2018-03-28T16:47:05Z,"@djKooks I updated the README to clarify that the ""development documentation"" is a `localhost` only resource atm. Hopefully that makes things clearer!

Thanks for posting the issue!
🎩 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk1NTY0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/27,https://api.github.com/repos/apache/incubator-annotator/issues/27,incubator-annotator,306471877,27,yarn install errors on a clean checkout,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-03-19T13:53:42Z,2019-09-24T01:59:38Z,"I just did a clean checkout, and when I run `yarn` (or `yarn install`), I get this:
```
yarn install v1.2.1
error An unexpected error occurred: ""patterns.map is not a function"".
info If you think this is a bug, please open a bug report with the information provided in ""C:\\Users\\user-name\\dev\\annotator\\incubator-annotator\\yarn-error.log"".
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
```

Yarn version:  1.2.1
Node version:  8.8.1
Platform:  win32 x64
```
Trace:
  TypeError: patterns.map is not a function
      at C:\Program Files (x86)\Yarn\lib\cli.js:53963:78
      at Generator.next (<anonymous>)
      at step (C:\Program Files (x86)\Yarn\lib\cli.js:92:30)
      at C:\Program Files (x86)\Yarn\lib\cli.js:110:14
      at new Promise (<anonymous>)
      at new F (C:\Program Files (x86)\Yarn\lib\cli.js:29382:28)
      at C:\Program Files (x86)\Yarn\lib\cli.js:89:12
      at Config.resolveWorkspaces (C:\Program Files (x86)\Yarn\lib\cli.js:53999:7)
      at C:\Program Files (x86)\Yarn\lib\cli.js:22025:49
      at Generator.next (<anonymous>)
```","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/27,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDIyMDEyNA==,incubator-annotator,374220124,27,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-03-19T13:56:46Z,2018-03-19T13:56:46Z,"**/me** reads the README and upgrades to yarn 1.5.1

...which, of course, fixes the problem...","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDIyMDEyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/27,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDM1NDgwOQ==,incubator-annotator,534354809,27,NA,mengxu2018,20497420,mengxu2018,xuhang1128@gmail.com,NA,2019-09-24T01:59:38Z,2019-09-24T01:59:38Z,thanks. Upgrading works,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDM1NDgwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/28,https://api.github.com/repos/apache/incubator-annotator/issues/28,incubator-annotator,309480738,28,Failing during `yarn start`,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-03-28T18:31:02Z,2018-06-08T23:28:21Z,"The tests reference a `../lib` directory which is absent (perhaps auto-generated at runtime or something?) and it causes the following errors:
```
ERROR in ./packages/selector/test/index.mjs
Module not found: Error: Can't resolve '../lib' in 'C:\Users\byoung2\dev\annotator\annotator\p
ackages\selector\test'
 @ ./packages/selector/test/index.mjs 1:0-35 4:21-29
 @ ./node_modules/multi-entry-loader?include=./packages/*/test/**/*.mjs
 @ ./node_modules/mocha-loader!./node_modules/multi-entry-loader?include=./packages/*/test/**/
*.mjs
 @ multi chai/register-assert mocha-loader!multi-entry-loader?include=./packages/*/test/**/*.m
js

ERROR in ./packages/range/test/cartesian.mjs
Module not found: Error: Can't resolve '../lib/cartesian.mjs' in 'C:\Users\byoung2\dev\annotat
or\annotator\packages\range\test'
 @ ./packages/range/test/cartesian.mjs 5:0-47 48:19-26
 @ ./node_modules/multi-entry-loader?include=./packages/*/test/**/*.mjs
 @ ./node_modules/mocha-loader!./node_modules/multi-entry-loader?include=./packages/*/test/**/
*.mjs
 @ multi chai/register-assert mocha-loader!multi-entry-loader?include=./packages/*/test/**/*.m
js
i ｢wdm｣: Failed to compile.
```

Full log (containing the above) is below:
```bash
$ yarn start
yarn run v1.5.1
$ webpack-serve
i ｢hot｣: webpack: Compiling...
i ｢hot｣: WebSocket Server Listening at localhost:8081
i ｢serve｣: Project is running at http://localhost:8080
i ｢serve｣: Server URI copied to clipboard
i ｢hot｣: webpack: Compiling Done
× ｢wdm｣: Hash: 48894b03e48351b3f485
Version: webpack 4.1.1
Time: 13734ms
Built at: 2018-3-28 14:25:09
  Asset      Size  Chunks                    Chunk Names
demo.js   949 KiB    demo  [emitted]  [big]  demo
test.js  2.48 MiB    test  [emitted]  [big]  test
Entrypoint demo [big] = demo.js
Entrypoint test [big] = test.js
[./demo/index.js] 5.17 KiB {demo} [built]
[./demo/mark.js] 804 bytes {demo} [built]
[./node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator.js] 709 bytes {test} {demo
} [built]
[./node_modules/chai/index.js] 40 bytes {test} [built]
[./node_modules/chai/register-assert.js] 38 bytes {test} [built]
[./node_modules/mocha-loader/index.js!./node_modules/multi-entry-loader/index.js?include=./pac
kages/*/test/**/*.mjs!./] ./node_modules/mocha-loader!./node_modules/multi-entry-loader?includ
e=./packages/*/test/**/*.mjs 776 bytes {test} [built]
[./node_modules/webpack-hot-client/client/index.js?69a6d200-876a-4461-8380-b5c66ef55c63] (webp
ack)-hot-client/client?69a6d200-876a-4461-8380-b5c66ef55c63 1.78 KiB {test} {demo} [built]
[./node_modules/webpack-hot-client/client/socket.js] (webpack)-hot-client/client/socket.js 1.3
7 KiB {test} {demo} [built]
[./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {test} {demo}
 [built]
[./packages/dom/src/index.mjs] 1.74 KiB {demo} [built]
[./packages/fragment-identifier/src/index.mjs] 1.31 KiB {demo} [built]
   [0] multi ./demo/index.js 28 bytes {demo} [built]
   [1] multi chai/register-assert mocha-loader!multi-entry-loader?include=./packages/*/test/**
/*.mjs 40 bytes {test} [built]
   [2] multi webpack-hot-client/client?69a6d200-876a-4461-8380-b5c66ef55c63 ./demo/index.js 40
 bytes {demo} [built]
   [3] multi webpack-hot-client/client?69a6d200-876a-4461-8380-b5c66ef55c63 chai/register-asse
rt mocha-loader!multi-entry-loader?include=./packages/*/test/**/*.mjs 52 bytes {test} [built]
    + 209 hidden modules

ERROR in ./packages/selector/test/index.mjs
Module not found: Error: Can't resolve '../lib' in 'C:\Users\byoung2\dev\annotator\annotator\p
ackages\selector\test'
 @ ./packages/selector/test/index.mjs 1:0-35 4:21-29
 @ ./node_modules/multi-entry-loader?include=./packages/*/test/**/*.mjs
 @ ./node_modules/mocha-loader!./node_modules/multi-entry-loader?include=./packages/*/test/**/
*.mjs
 @ multi chai/register-assert mocha-loader!multi-entry-loader?include=./packages/*/test/**/*.m
js

ERROR in ./packages/range/test/cartesian.mjs
Module not found: Error: Can't resolve '../lib/cartesian.mjs' in 'C:\Users\byoung2\dev\annotat
or\annotator\packages\range\test'
 @ ./packages/range/test/cartesian.mjs 5:0-47 48:19-26
 @ ./node_modules/multi-entry-loader?include=./packages/*/test/**/*.mjs
 @ ./node_modules/mocha-loader!./node_modules/multi-entry-loader?include=./packages/*/test/**/
*.mjs
 @ multi chai/register-assert mocha-loader!multi-entry-loader?include=./packages/*/test/**/*.m
js
i ｢wdm｣: Failed to compile.
```

I changed the `../lib` references to `../src` in that case...but it happened again in another test. I'm not sure (yet) if this was a path change that got missed in the code, or if there's something not running at runtime that should be run. 🏃‍ ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/28,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk5MDE4NA==,incubator-annotator,376990184,28,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-03-28T18:32:37Z,2018-03-28T18:32:37Z,"I just noticed this, too. I've got some WIP to address it. I'll assign myself.

For the moment, you can always run build and then test and they should pass.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk5MDE4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/28,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk5MDI0MQ==,incubator-annotator,376990241,28,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-03-28T18:32:48Z,2018-03-28T18:32:48Z,"Although, that won't work in the webpack tests, I think.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Njk5MDI0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/28,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTkxODU0MA==,incubator-annotator,395918540,28,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-06-08T23:28:21Z,2018-06-08T23:28:21Z,Closed in c1f7fa1dfd84c27537cc20d244cfd48eb65462cd,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTkxODU0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/29,https://api.github.com/repos/apache/incubator-annotator/issues/29,incubator-annotator,309874309,29,Extract NOTICE related content from LICENSE file in fragment-identifier,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-03-29T19:23:14Z,2018-06-09T19:16:43Z,Because https://github.com/apache/incubator-annotator/commit/4766340e970815c3cb39d2b5a2e05bd56783e4c9#commitcomment-28336927,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/31,incubator-annotator,330911237,31,Incorporate Web Annotation testing tools,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-06-09T18:57:31Z,2018-06-12T14:34:03Z,"This will ease testing (by us or others) of the Web Annotation JSON documents that we (and others) pass to the client libraries we're currently building.

There are several repos which contain code we can use:

#### Web Annotation Data Model
* https://github.com/w3c/web-annotation-tests - The JSON Schema's built by the Web Annotation WG
* https://github.com/web-platform-tests/wpt/tree/master/annotation-model - The JSON Schema's also exist in the Web Platform Tests tooling (identical to the above, but surrounding tools have changed a bit)

#### Web Annotation Protocol
* https://github.com/web-platform-tests/wpt/tree/master/annotation-protocol - contains...
  * https://github.com/web-platform-tests/wpt/blob/master/annotation-protocol/server/server-manual.html - client-side tests run against a configurable protocol server endpoint
  * https://github.com/web-platform-tests/wpt/blob/master/annotation-protocol/tools/protocol-server.py - Python 2 / wptserve-based reference implementation
  * https://github.com/web-platform-tests/wpt/tree/master/annotation-protocol/files - files served by the reference implementation
* https://github.com/BigBlueHat/web-annotation-protocol-server - the original source for the reference implementation
* https://github.com/BigBlueHat/web-annotation-protocol-tester - command line protocol (and contained format) testing tool--*incomplete*

#### Web Annotation Vocab
* https://github.com/web-platform-tests/wpt/tree/master/annotation-vocab - vocabulary (non-serialization-specific) testing of the output graphs and term usage

All of these are licensed such that we can incorporate them into this code. The command line protocol tester (which uses mocha.js) is probably the thing of most interest for us--especially if we expand it to use the JSON Schema's which are used for W3C validation.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5MzY5Ng==,incubator-annotator,395993696,31,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-09T19:40:35Z,2018-06-09T19:40:35Z,"Plan confirmed with @tilgovi to create a validation tool in `scripts/` as a command line tool (using mocha.js) built from https://github.com/BigBlueHat/web-annotation-protocol-tester + the JSON Schema's from https://github.com/w3c/web-annotation-tests

End game will be a script that validates local JSON or JSON from a URL against the Web Annotation Data Model JSON Schemas.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5MzY5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5NzEwNg==,incubator-annotator,395997106,31,NA,jccr,5132652,Juan Carlos Corona Romero,c@rlos.email,NA,2018-06-09T20:40:22Z,2018-06-09T20:40:22Z,I can work on this.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5NzEwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5NzgwMA==,incubator-annotator,395997800,31,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-09T20:49:03Z,2018-06-09T20:49:03Z,"@JCCR awesome! Would love your help. I'm getting the basics in today, I hope, but let's chat! Find me in `#annotator` on Freednode if you're available today. Otherwise, let's work here async. 😸 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NTk5NzgwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxMzkwMw==,incubator-annotator,396013903,31,NA,jccr,5132652,Juan Carlos Corona Romero,c@rlos.email,NA,2018-06-10T02:08:47Z,2018-06-10T02:08:47Z,"@BigBlueHat
Can do asynchronously!
Would have liked to jump in and chat but I'm AFK today.

On Sat, Jun 9, 2018, 1:49 PM BigBlueHat, <notifications@github.com> wrote:

> @JCCR <https://github.com/JCCR> awesome! Would love your help. I'm
> getting the basics in today, I hope, but let's chat! Find me in #annotator
> on Freednode if you're available today. Otherwise, let's work here async.
> 😸
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/apache/incubator-annotator/issues/31#issuecomment-395997800>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AE5RbIQ3f4U6rSB-SWo6nWXrUzwEp1zyks5t7DTAgaJpZM4Uhcn6>
> .
>
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxMzkwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxNTM2OQ==,incubator-annotator,396015369,31,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-10T02:42:04Z,2018-06-10T02:42:04Z,"@JCCR PR #32 will *technically* close this issue, however, there's much more room here for improving this code.

It currently only works on files (despite the `--url` name of the parameter), it needs more of the available schemas incorporated, it might be nice to have it work on a folder (or Collection!) of annotations. Etc. 😃 

Feel free to bring your inspiration and ideas to any of this work!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAxNTM2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/31,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjA3ODk0OQ==,incubator-annotator,396078949,31,NA,tcole3,7622978,Tim Cole,t-cole3@illinois.edu,NA,2018-06-10T20:18:16Z,2018-06-10T20:18:16Z,"The schemas at https://github.com/w3c/web-annotation-tests conform to draft-04 of json schema. draft-07 (http://json-schema.org/specification.html) is the current version. Schemas were developed almost 2 years ago using then current versions of node.js and ajv  (another json validator - https://www.npmjs.com/package/ajv). Updating to newer version of json schema will allow some simplifications (avoid, for example, double negatives when checking arrays). 

Please note the reliance on 'referenced' schemas, i.e., the actual schema confirming that an annotation meets a requirement of the Web Annotation Data Model typically relies on 2 or 3 referenced schemas which live in different file(s) and are shared across multiple schemas (https://github.com/w3c/web-annotation-tests/tree/master/definitions). Ajv makes it easy to load referenced schemas asynchronously (https://www.npmjs.com/package/ajv#asynchronous-schema-compilation). 

Also, there are known to be mistakes in 2 or 3 of the schemas (will pass an incorrect annotation or fail a correct annotation), but these only show up in truly edge cases of the data model and will be easy to fix at a later time. 

I'm not currently a committer on annotator-incubator, but happy to help if any questions about the schemas themselves or if there's anything else I can help with. Happy also to take another run at my management to get approvals necessary to be added as a committer for the incubator. 

@BigBlueHat sounds like Saturday hack work went well. Sorry I couldn't stick around for it.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjA3ODk0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/33,https://api.github.com/repos/apache/incubator-annotator/issues/33,incubator-annotator,331616729,33,Make test `--url` parameter work with remote URLs (not just local files),BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-06-12T14:37:19Z,2018-10-12T16:19:27Z,"Maybe use [requests](https://www.npmjs.com/package/requests) or [axios](https://www.npmjs.com/package/axios) or Node's [http](https://nodejs.org/api/http.html#http_http).

Preference?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/33,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2NTU3MQ==,incubator-annotator,398465571,33,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-19T16:41:11Z,2018-06-19T16:41:11Z,@JCCR you're welcome to snag this one if you'd like! 😁 ,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2NTU3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/33,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNzA2MTc1Nw==,incubator-annotator,427061757,33,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-10-04T15:25:40Z,2018-10-04T15:25:40Z,@jccr still interested in tackling this one?,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNzA2MTc1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/33,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNzEwNzU3MA==,incubator-annotator,427107570,33,NA,jccr,5132652,Juan Carlos Corona Romero,c@rlos.email,NA,2018-10-04T17:41:28Z,2018-10-04T17:41:28Z,"@BigBlueHat 
Yes. I've been meaning to contribute to the project, but I needed this reminder. Give me a week and if you don't hear back from me by then.. I don't want to stop someone else from contributing.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNzEwNzU3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/34,https://api.github.com/repos/apache/incubator-annotator/issues/34,incubator-annotator,333701120,34,Multiple packages have conflicting node version dependency,salus-sage,6399323,Bhanu,,CLOSED,2018-06-19T14:36:42Z,2018-10-02T20:14:09Z,"i was unable to proceed further than yarn install, i'm interested to contribute to the project but unable to setup the environment. i tried on node version @6.11.5 and yarn @1.5.1
```
error @shellscape/koa-static@4.0.4: The engine ""node"" is incompatible with this module. Expected version "">= 7.6.0"".
error An unexpected error occurred: ""Found incompatible module"".
```
And when i try with node 7.6.0, i get below error,
![screenshot 25](https://user-images.githubusercontent.com/6399323/41587611-3c173394-73cd-11e8-8ad2-7ef9066d800d.png)


","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/34,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2NTEwMw==,incubator-annotator,398465103,34,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-19T16:39:42Z,2018-06-19T16:39:42Z,"It looks like Yarn skipped the node 7.x series of releases (for reasons I don't know...). The [Yarn site](https://yarnpkg.com/en/) states that same list of semver ranges:
>  Node: ^4.8.0 || ^5.7.0 || ^6.2.2 || >=8.0.0

Consequently, if you move to 8.x, things should ""just work.""

Modules we depend on (such as `koa-static`...apparently) will all declare their own minimum node version, but yarn won't run unless it's one of those four.

Given that `koa-static` needs > 7.x (which may be a new dependency... @tilgovi ? @Treora ?), we may need to bump our requirements up to 8.x (rather than 6.x as stated here):
https://github.com/apache/incubator-annotator#requirements

Regardless, moving to node 8.x (if you can) should fix that current situation.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2NTEwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/34,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2Nzc3OQ==,incubator-annotator,398467779,34,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-06-19T16:48:07Z,2018-06-19T16:48:07Z,"I'll double check in a bit, but I'm almost positive this is only a development dependency, which means we should not change our requirements. We may need to document the development requirement, though.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ2Nzc3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/34,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ3MjA3MQ==,incubator-annotator,398472071,34,NA,salus-sage,6399323,Bhanu,,NA,2018-06-19T17:01:29Z,2018-06-19T17:01:29Z,"Thanks for the swift response,
worked for node @ 8.1.0
failed for node @ 8.0.0, ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODQ3MjA3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/36,https://api.github.com/repos/apache/incubator-annotator/issues/36,incubator-annotator,333818095,36,Continuous Integration,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-06-19T20:02:32Z,2018-10-02T20:14:09Z,"I've started a basic [travis-ci.org](https://travis-ci.org/) setup via [a personal fork](https://travis-ci.org/BigBlueHat/incubator-annotator).

This has raised a few questions:
 - do we want to use travis-ci?
   - I've no preference; Infra's set it up for others before...but also may not care in practice
 - @tilgovi mentioned that the top-level package needs node 8+ whereas the `packages/` need node 6+
   - however...I've not been able to sort configuring travis in such away as to accommodate that...

Here's what I've got so far:
 - GitHub branch: https://github.com/BigBlueHat/incubator-annotator/tree/travis-ci
 - Latest Travis run: https://travis-ci.org/BigBlueHat/incubator-annotator

My last attempt includes using `node` as the `node_js` version via `.travis.yml` and attempting to use `.nvmrc` files for local `packages/` folders. Turns out Travis doesn't check all those...

There's also the question of narrowing the test runs to just each individual package.

Anyhow. It's doable, but there's a lot more to do...","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/36,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODUyNjk4Mg==,incubator-annotator,398526982,36,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-06-19T20:03:24Z,2018-06-19T20:03:24Z,"Oh, and regardless of the Continuous Integration situation, @apache/annotator-committers let me know if y'all are 👍 on me bringing over these `engines` configs, etc. Those probably have value regardless.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODUyNjk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/36,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjM4MTE2OA==,incubator-annotator,426381168,36,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-10-02T18:26:58Z,2018-10-02T18:26:58Z,#37 has the goods to close this issue.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjM4MTE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/38,https://api.github.com/repos/apache/incubator-annotator/issues/38,incubator-annotator,366024969,38,Import @tilgovi's dom-anchor-* libraries,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-10-02T18:31:55Z,2020-07-16T16:52:36Z,"This has been part of the plan since day one (or earlier 😉).

Now that we've got our [npm org](https://www.npmjs.com/org/annotator) up and running, let's close this loop.

@tilgovi are you still able to make this happen?

See https://github.com/apache/incubator-annotator/issues/25#issuecomment-358420732","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/38,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjM4MzI4Nw==,incubator-annotator,426383287,38,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-10-02T18:33:23Z,2018-10-02T18:33:23Z,Definitely.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjM4MzI4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/38,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDkzNTY5OQ==,incubator-annotator,494935699,38,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-05-22T19:27:52Z,2019-05-22T19:27:52Z,I propose we bump this out of the first release. Let's just get the basics. I'm not yet sure whether those packages have the right API for us.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDkzNTY5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/38,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjQ5Mjg3Ng==,incubator-annotator,506492876,38,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2019-06-27T20:11:49Z,2019-06-27T20:11:49Z,"Relatedly, as I just wrote on the [dev mailing list](https://mail-archives.apache.org/mod_mbox/annotator-dev/201906.mbox/browser):

> Do you have, or else shall we perhaps create, an overview of the modules we want to create, and how they relate to each other? That way we would have a clear reason why we have and maintain each module. In the attached graph, I sketched the relations between the mentioned modules (as I understand them), while already adding two hypothetical candidates in grey.

But as the dev mailing list appears not to support attaching images, I hope it helps if I post the graph here:

![modules-overview](https://user-images.githubusercontent.com/4191409/60297298-2b8e5300-9928-11e9-906d-aba867b05d6d.png)
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjQ5Mjg3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/38,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTUzODYyMQ==,incubator-annotator,659538621,38,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-07-16T16:52:36Z,2020-07-16T16:52:36Z,"Just discussed in the weekly call: rather than importing these modules as such, we better just get at (and beyond) feature parity and thereby make them obsolete.

For the missing functionalities see their relevant issues:
- dom-anchor-text-position: see #75 
- dom-anchor-text-quote: we lack fuzzy matching, see #83 
- dom-anchor-fragment: does anybody actually use this? Open an issue if so. :) (it seems Hypothes.is [dropped](https://github.com/hypothesis/client/commit/f8784b2c8837f67b82866c63b74215bc90739653) it)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTUzODYyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/39,https://api.github.com/repos/apache/incubator-annotator/issues/39,incubator-annotator,366061538,39,Ask infra to setup Travis-CI for this repo,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-10-02T20:14:28Z,2018-10-03T14:10:57Z,,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/39,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjY0MjM1NA==,incubator-annotator,426642354,39,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-10-03T13:43:37Z,2018-10-03T13:43:37Z,Ask made https://issues.apache.org/jira/browse/INFRA-17091,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjY0MjM1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/39,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjY1MjEyMA==,incubator-annotator,426652120,39,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-10-03T14:10:57Z,2018-10-03T14:10:57Z,"And...they're done!
https://travis-ci.org/apache/incubator-annotator","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjY1MjEyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/44,https://api.github.com/repos/apache/incubator-annotator/issues/44,incubator-annotator,371225129,44,RFC: Use standard-version,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2018-10-17T19:07:00Z,2019-05-23T14:22:32Z,https://github.com/conventional-changelog/standard-version,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/44,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3OTg5Njk4Mw==,incubator-annotator,479896983,44,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2019-04-04T13:28:55Z,2019-04-04T13:28:55Z,"As long as this doesn't further slow our coding on our actual project, I'm all in. 😉 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3OTg5Njk4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/44,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDkzNTM5Nw==,incubator-annotator,494935397,44,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-05-22T19:27:00Z,2019-05-22T19:27:00Z,I changed my mind. I propose we close this issue an not worry so much about automating every little thing until we actually make releases often enough that we feel that pain.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDkzNTM5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/44,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTI0MDIwNQ==,incubator-annotator,495240205,44,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2019-05-23T14:22:32Z,2019-05-23T14:22:32Z,Agreed. This one can wait.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTI0MDIwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/45,https://api.github.com/repos/apache/incubator-annotator/issues/45,incubator-annotator,374295494,45,Generate accessible annotations,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-10-26T09:15:48Z,2020-06-18T17:34:42Z,"It's being explored here:
https://github.com/w3c/aria/issues/749

We can help by implementing the markup generation, etc.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/45,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM5OTYwNg==,incubator-annotator,433399606,45,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-10-26T13:01:46Z,2018-10-26T13:01:46Z,"There's recent discussion here for those who want to follow along there and/or sign-up for that list:
https://lists.w3.org/Archives/Public/public-aria/2018Oct/0016.html","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMzM5OTYwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/45,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNjA2Nw==,incubator-annotator,646206067,45,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T17:34:41Z,2020-06-18T17:34:41Z,"Superseded by #53? Closing. (also, I added this topic to the new [Tech Radar](https://github.com/apache/incubator-annotator/wiki/Tech-Radar) page on the wiki)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNjA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/47,incubator-annotator,381627104,47,Interleaving selections within the DOM,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,OPEN,2018-11-16T14:42:52Z,2020-07-24T12:16:54Z,"Finding selections within the DOM and even wrapping them in an element is easy enough, and most developers just ""roll their own"" highlighter/selector for things like that--hence, they don't ""shop"" for tools like Apache Annotator for that.

However, juggling interleaved selections in the DOM is tricky and not standardized.

The DOM is a tree. Selections point at regions all over that tree, often intermixed.

We should build tooling to handle that interleaving to manage the display, removal, eventing, etc, for such selections.

See also #45 and #22.

Example:
```html
<div>
<mark id=""a1"">Call me <mark id=""a2"">Ishmael</mark></mark>. Some years ago—never mind how long precisely—<mark id=""a3"">having little or <mark id=""a4"">no money in my purse</mark></mark><mark id=""a4"">, and nothing particular to interest me on shore</mark>, I thought I would sail about a little and see the watery part of the world.
</div>
```
* a2 is within a1 and so will have eventing and display related trickiness
* a4 is made up of 2 marks, but is currently invalid as they share an `id`--which conceptually ""relates"" them as a unit, but the DOM doesn't work that way.
  * both sets of `<mark/>` elements would need shared events, display, removal, etc.
* a3 also includes 1 part of a4, but not all of it, so weird eventing and display issues again

Solving this (or even just exploring it) *is* something developers know they need, so likely it should be near the top of our list to solve. 😄 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQxNTUwNA==,incubator-annotator,439415504,47,NA,ajs6f,110994,A. Soroka,,NA,2018-11-16T14:47:39Z,2018-11-16T14:47:39Z,"@BigBlueHat You're thinking here about sections that can be described by element boundaries, but not arbitrary indexing (character-by-character) into texts, right?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTQxNTUwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MDQxMzkyNw==,incubator-annotator,440413927,47,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2018-11-20T20:12:26Z,2018-11-20T20:12:26Z,@ajs6f arbitrary indexing.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MDQxMzkyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTY2MzQxMQ==,incubator-annotator,441663411,47,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2018-11-26T14:46:32Z,2018-11-26T14:46:32Z,@ajs6f mainly selections that traverse multiple element boundaries--i.e. selecting part of A and part of B. Trees don't do that so good.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MTY2MzQxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDk4NTI0Ng==,incubator-annotator,450985246,47,NA,ajs6f,110994,A. Soroka,,NA,2019-01-02T21:07:32Z,2019-01-02T21:07:32Z,"This seems pretty challenging. I did [some work in a similar area ](https://www.balisage.net/Proceedings/vol5/html/Cayless01/BalisageVol5-Cayless01.html) years ago but it was simple and text-only, and it wasn't completely trivial. Is this really meant for text (or text-y) documents, or anything that could be addressed by the DOM (SVG, other things like that)?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDk4NTI0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk0NjcxNQ==,incubator-annotator,638946715,47,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-06-04T15:55:33Z,2020-06-04T15:55:33Z,"Originally posted this as a separate issue in #78 (but closing and moving here to keep @Treora sane 😉):
> https://www.w3.org/TR/intersection-observer/
>
> Might help with highlighter and other anchoring implementations in the DOM.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk0NjcxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/47,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzUxMDMzNA==,incubator-annotator,663510334,47,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-07-24T12:16:54Z,2020-07-24T12:16:54Z,"Since recently we have a simple highlighter, which wraps text nodes in `<mark>` elements, and ignores any existing `<mark>`s to allow for nested use. I just created some simple tests (see PR #84), including ones inspired by the examples above, that deal with situations like this: `'<b>lorem ipsum <mark>dolor <mark2>am</mark2></mark><mark2>et yada</mark2> yada</b>'`.

Note there is a difficulty with how a Range behaves when the DOM is modified: running highlight with our current highlighter can mess up other Range objects that point at the same text nodes. So this can cause trouble:

```
range1 = anchor(annotation1);
range2 = anchor(annotation2);
highlight(range1); // this may mess up range2
highlight(range2); // highlights some unintended target.
```

A solution is to anchor&highlight as a single action: considering the Range a ephemeral pointer:

```
range1 = anchor(annotation1);
highlight(range1);
range2 = anchor(annotation2);
highlight(range2);
```

Our generator-based approach to anchoring should help to do this right, but still it is a pitfall that I’m not very happy with. Some ideas for avoiding this problem:
- Using a highlighter that does not modify the document content; some highlighter approaches add an (svg) element to the end of the `<body>` and display it on the right spot using absolute positioning. While solving this issue, it does create others (e.g. need to reposition the element when text reflows).
- Stop using Range for our ‘hydrated’ selector, i.e. as our way to point at a part of the DOM. We could e.g. try implement a ‘RobustRange’ that updates its start-&endContainer&-Offset as needed in one way or another.

For the time being, or if we decide not to fix this, we should probably warn users in any documentation and examples that Ranges are perishable.

Note that the behaviour of Range actually differs between the current jsdom and web browsers, so it is important to run relevant tests in a browser (use our `yarn start` command) to ensure the tests pass there too.

On the bright side, I added [tests](https://github.com/apache/incubator-annotator/blob/d4d933c61bb559221b5dd896fde399fc53adedba/packages/dom/test/highlight-range/highlight-range.test.ts#L172-L198) to check if one can remove highlights in arbitrary order, and that seems to work as intended. This should give the freedom to ignore the tree structure and treat highlights as being independent from each other. Please suggest/write other scenarios that we should include in our tests.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzUxMDMzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/49,https://api.github.com/repos/apache/incubator-annotator/issues/49,incubator-annotator,390805534,49,Explore WorkerDOM,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2018-12-13T18:32:43Z,2020-06-18T17:32:29Z,"[WorkerDOM](https://github.com/ampproject/worker-dom#workerdom) is part of the growing list of [AMP Project](https://github.com/ampproject/) open source and potentially standardized outputs.

This one in particular could be useful for highlighting implementations:
> Use Cases:
> 1.    Embedded content from a third party living side by side with first party code.
> 2.    Mitigation of expensive rendering for content not requiring synchronous updates to user actions.
> 3.    Retaining main thread availablity for high priority updates by async updating elsewhere in a document.
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/49/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/49,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNDExNw==,incubator-annotator,646204117,49,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T17:32:29Z,2020-06-18T17:32:29Z,"I added this to the new [Tech Radar](https://github.com/apache/incubator-annotator/wiki/Tech-Radar) page on the wiki; updates can be added there, and discussion may also continue in this issue; but I will close it as there is no current activity on this and no particular action to take.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNDExNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/50,https://api.github.com/repos/apache/incubator-annotator/issues/50,incubator-annotator,399030696,50,Document Identity Determination?,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,OPEN,2019-01-14T19:06:50Z,2020-07-16T17:03:29Z,"Curious to get thoughts from everyone on whether having document identification determination code would be useful for this project.

By ""document identification determination"" I mean the process of sorting out which one (or more!) identifiers should be stored as the target.

For instance:
```http
GET /?utm_source=twitter&utm_medium=social
Host: http://example.com/
```

```html
<html>
<head>
  <base href=""http://cdn.example.com/"">
  <link rel=""canonical"" href=""http://www.example.com/"">
  <link rel=""latest-version"" href=""index.html"">
  <link rel=""working-copy"" href=""newer.html"">
  <link rel=""ogp:url"" href=""https://www.example.com/"">
  <link rel=""schema:url"" href=""https://www.example.com/index.html"">
</head>
```

The `?utm_` prefixed query param are typical marketing-bot tracking thingies.
The `canonical` rel is from https://tools.ietf.org/html/rfc6596
The `latest-version` and `working-copy` rel's are from https://tools.ietf.org/html/rfc5829
The `ogp:url` is from http://ogp.me/
The `schema:url` is from http://schema.org/

At some level all (or most) of these are the same (presumably 😉). However, determining their ""sameness"" is outside of the scope of an annotation tool (I'd reckon), but storing the right one (or more) is mandatory for the annotation to make sense.

What I'm wondering is if we should provide a basic retrieval mechanism for determining the existence and *potential* value of them to the annotation. At the very least it would be handy to get back a list of all stated identifiers for the current document.

Real world scenario (which I just tripped over) is W3C Editorial Draft specs with GitHub URLs (or hosted locally) have their future Technical Recommendation (TR) URLs set as the `rel=""canonical""` (which is injected by ReSpec post-page loading). Consequently, annotating the [Verifiable Claims Data Model](https://w3c.github.io/vc-data-model/) is hampered if *only* the `canonical` URL is stored (because it's not yet hit TR).

It's that ""other"" part of annotation creation that's so fun. 😁 

💭's?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/50/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/50,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwODA2Ng==,incubator-annotator,504708066,50,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-06-23T00:20:24Z,2019-06-23T00:20:24Z,I have long thought that mozilla/fathom would be an interesting tool to use for such things.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwODA2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/51,https://api.github.com/repos/apache/incubator-annotator/issues/51,incubator-annotator,448254904,51,Range Normalization,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2019-05-24T16:28:07Z,2020-08-16T23:41:55Z,"We're currently using the `range-normalize` in the `describeTextQuoteByRange` function. This package is useful, but I once submitted a complete rewrite that has no external dependencies: https://github.com/webmodules/range-normalize/pull/2

I would like to pull that into tree.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/51,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTg0NjMxNA==,incubator-annotator,501846314,51,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2019-06-13T19:27:23Z,2019-06-13T19:27:23Z,@tilgovi please do bring in this rewrite. We can make it available as it's own module for others to use as well.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTg0NjMxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/51,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTg1ODExOQ==,incubator-annotator,501858119,51,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-06-13T20:02:45Z,2019-06-13T20:02:45Z,Will do.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTg1ODExOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/51,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwNzkxOA==,incubator-annotator,504707918,51,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-06-23T00:17:33Z,2019-06-23T00:17:33Z,"As this dependency was removed in c7e98eeac3e07e45b14b94e2aec2add8f137aea9, I am going to defer this decision for a while.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNDcwNzkxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/51,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU5MzYzOA==,incubator-annotator,674593638,51,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-08-16T23:41:54Z,2020-08-16T23:41:54Z,"I'll close this for now, as it seems like we may not need this at the moment.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU5MzYzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/52,https://api.github.com/repos/apache/incubator-annotator/issues/52,incubator-annotator,452447074,52,Are there any ready implementation (demo) for this library?,ardakshalkar,575710,Ardak Shalkarbayuly,ardak.shalkar@gmail.com,CLOSED,2019-06-05T11:19:52Z,2019-06-09T05:56:07Z,,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/52/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/52,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDE4NzI4MQ==,incubator-annotator,500187281,52,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-06-09T05:56:04Z,2019-06-09T05:56:04Z,"There is a runnable demo included if you check out the repository, with which you can play around and get familiar with the code.

It is also live on the website here: http://annotator.apache.org/demo/","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDE4NzI4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/53,https://api.github.com/repos/apache/incubator-annotator/issues/53,incubator-annotator,480190244,53,Add support for ARIA Annotations output,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,OPEN,2019-08-13T14:29:55Z,2020-07-16T17:04:43Z,"I'm contributing to a draft of a spec called [ARIA Annotations](https://w3c.github.io/annotation-aria/). It will be going up for review within the ARIA WG fairly soon. I also wanted to surface it here because implementing it could help a wide range of folks.

The core (if you're familiar with ARIA) leans on the `aria-details` property and then provides some clarifying roles (which mostly have Web Annotation Data Model analogues) to differentiate annotations from each other (for easier find-ability, potentially adding additional UX affordances, etc).

Here's an example:
```html
<p><mark aria-details=""comment-123"">The proposal</mark> contains...</p>
...
<div id=""comment-123"" role=""annotation-commentary"">This proposal is great!</div>
```

It should be fairly simple for us to make annotations (which have annotation bodies) be expressible this way. There's also a bonus value (for us) when managing interleaving highlights--we can use a single `aria-details` value across multiple DOM nodes which can help use curate (edit/remove) annotations which cross DOM boundaries as if they were a single whole (see #47 for explanation of that issue).

So, an annotation crossing DOM boundaries might look like this:
```html
<p><mark aria-details=""comment-123"">The</mark> sort of OK <mark aria-details=""comment-123"">proposal</mark> contains...</p>
...
<div id=""comment-123"" role=""annotation-commentary"">I think it's more than OK! I think the proposal is great!</div>
```

Now, the two `<mark>` tags could be conceptual (and technically by Apache Annotator) as a single whole. The overhead, though, is that using `aria-details` requires a DOM element to point at (i.e. the annotation body), so it doesn't cover simple highlighting usage (because those have no annotation body...).

Would love thoughts and ideas for implementing this (noting, though, that we don't yet have an ""annotation body"" API...). 😃 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/53/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/53,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNzE4NzIzNw==,incubator-annotator,617187237,53,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-04-21T13:41:07Z,2020-04-21T13:41:07Z,"ARIA Annotations are headed to be a core part of ARIA 1.3 and implemented in Firefox 75 (at least):
https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Annotations

It'd be super handy to help folks add Web Annotations to a web page with properly accessible HTML.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNzE4NzIzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/54,https://api.github.com/repos/apache/incubator-annotator/issues/54,incubator-annotator,493857542,54,Highlight API explainer,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2019-09-16T05:45:47Z,2020-06-18T17:36:15Z,"Proposed API explainer from the Edge team:
https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/highlight/explainer.md

This would make a huge difference for building out any highlight/selection-representation system--especially because it handles the ""hard stuff"" mentioned in #22.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/54,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNzQ1NQ==,incubator-annotator,646207455,54,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T17:36:15Z,2020-06-18T17:36:15Z,"Current home seems to be: https://drafts.csswg.org/css-highlight-api-1/

I added this topic to the new [Tech Radar](https://github.com/apache/incubator-annotator/wiki/Tech-Radar) page on the wiki; updates can be added there, and discussion may also continue in this issue; but I will close it as there is no current activity on this and no particular action to take.

","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNzQ1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/55,https://api.github.com/repos/apache/incubator-annotator/issues/55,incubator-annotator,504208784,55,Consider exploring Intl.Segmenter (and current polyfill) for word-based selection,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2019-10-08T18:36:09Z,2020-06-18T17:36:52Z,"This proposal (and its current polyfill) attempt to standardize Unicode word segmentation: 
https://github.com/tc39/proposal-intl-segmenter

As I recall this was something both the Web Annotation WG and Hypothes.is (at least) struggled with determining the best method of handling due to JavaScript's sub-par Unicode support ""back then."" This, perhaps, will improve that situation at least in terms of segmentation.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/55,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTY1NTk3MA==,incubator-annotator,539655970,55,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2019-10-08T19:02:28Z,2019-10-08T19:02:28Z,See also WICG/ScrollToTextFragment#42,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTY1NTk3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/55,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNzk4Ng==,incubator-annotator,646207986,55,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T17:36:52Z,2020-06-18T17:36:52Z,"I added this topic to the new [Tech Radar](https://github.com/apache/incubator-annotator/wiki/Tech-Radar) page on the wiki; updates can be added there, and discussion may also continue in this issue; but I will close it as there is no current activity on this and no particular action to take.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwNzk4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/60,https://api.github.com/repos/apache/incubator-annotator/issues/60,incubator-annotator,572372039,60,Implement Chromium/WICG’s Text Fragment specification,tilgovi,20818,Randall Leeds,randall@bleeds.info,OPEN,2020-02-27T21:31:17Z,2020-11-05T21:39:10Z,Spec: https://wicg.github.io/ScrollToTextFragment/#parsing-the-fragment-directive,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/60,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MjE4NzA4Nw==,incubator-annotator,592187087,60,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-02-27T21:32:34Z,2020-02-27T21:32:34Z,We might also polyfill just the `window.location.fragmentDirective` as a building block for this: https://wicg.github.io/ScrollToTextFragment/#feature-detectability,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MjE4NzA4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/60,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwOTcyNQ==,incubator-annotator,646209725,60,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T17:39:52Z,2020-06-18T17:39:52Z,"Is this still a plan? We have ditched our other fragment identifier effort (see PR #71).

Besides making a parser for the fragment identifier syntax itself, I suppose we would want to implement the algorithm for resolving it. May well be worthwhile if others are not already doing this!

Also, I added this topic to the new [Tech Radar](https://github.com/apache/incubator-annotator/wiki/Tech-Radar) page on the wiki.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjIwOTcyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/60,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NjY1MTg1Ng==,incubator-annotator,686651856,60,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-09-03T17:50:45Z,2020-09-03T17:50:45Z,"> Besides making a parser for the fragment identifier syntax itself, I suppose we would want to implement the algorithm for resolving it. May well be worthwhile if others are not already doing this!

Update: last month, I decided to take a stab at this and implemented the algorithm in TypeScript: <https://code.treora.com/gerben/text-fragments-ts>

See also: <https://github.com/WICG/scroll-to-text-fragment/issues/135>

Perhaps it could some day be considered adopting this implementation in Annotator, but I suppose it is a bit early as the spec is still in flux, and so far my impression is that few people (want to) adopt it.

I expect that a significant disadvantage for many annotation-ish tools would be that, as it is currently defined, the expressivity of the text fragment identifier is limited by only being able to point at whole words. See my [issue #37](https://github.com/WICG/scroll-to-text-fragment/issues/137) on the spec’s repo.

To use the fragment syntax as a standard for use within, and exchange between, annotation softwares, one could of course choose to interpret it differently (except when activating a ‘browser compat mode’), e.g. as a WA RangeSelector containing two TextQuoteSelectors. But that might lead to a misleading situation of half-interoperability which seems better to avoid.

Nevertheless, for the goal of making annotations (ex)portable from annotation tools, it could be valuable to have a tool that helps convert (where possible) annotation targets to browser-compatible text-fragment URLs. And vice versa to import them.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NjY1MTg1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/60,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMjY1OTc5OA==,incubator-annotator,722659798,60,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-11-05T21:36:06Z,2020-11-05T21:36:06Z,"We shortly discussed this topic in today’s call while looking over the open issues. We agreed that just parsing the syntax is not much use, as it comes together with a specific algorithm for finding the target text, which differs from the Web Annotation model.

A quick overview of things we could provide:

- anchoring of a fragment directive: I implemented the essence of this already (see above comment); we could provide a function that simply wraps my implementation. (we even discussed the option of importing my whole implementation into this repo, though to me it feels cleaner to keep these as separate projects)

- describing a selection (a Range or perhaps a list of Ranges) as a fragment directive: this would need a custom adaptation of `describeTextQuote`, modified to ensure that the total quote (including prefix&suffix) ends at word boundaries (note that at least this is possible now, since a recent [change][] in the spec). Also, it should use a `textStart,textEnd` pair (again to be cut at word boundaries) instead of an exact quote when the selection crosses block elements. And perhaps there are more hurdles.

- convert fragment directive ⇒ Selector: If the document is available, we could simply anchor it and describe it in the other format. Without the document at hand, we could also convert it, although with a (hopefully small) risk that the differences in specifications will make it fail to anchor or (worse) point at something else. I think the conversion could, after syntax parsing, be done with more or less this simple code:

  ```
    ({ prefix, textStart, textEnd, suffix }) => textEnd
        ? {
            type: 'RangeSelector',
            start: { type: 'TextQuoteSelector', prefix, exact: textStart },
            end: { type: 'TextQuoteSelector', prefix: textEnd, exact: '', suffix }
        }
        : { type: 'TextQuoteSelector', prefix, exact: textStart, suffix }
    ```
    (note the little hack of using `prefix: textEnd, exact: ''` because RangeSelector’s end is exclusive and `textEnd` should nevertheless be included in the target)

- convert Selector ⇒ fragment directive: the reverse of the above. Again, if the document is available, we could simply anchor it and describe it in the other format. But in case the document is not available, conversion in this direction would only possible if the selector is of the type/shape shown in the above example code.

I suppose it is mainly a matter of demand and priority whether we’ll implement any of these. I might actually try tackle some of these points soon, as I would like to use these features myself.

[change]: https://github.com/WICG/scroll-to-text-fragment/pull/148","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMjY1OTc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/63,https://api.github.com/repos/apache/incubator-annotator/issues/63,incubator-annotator,584567497,63,Sort out LICENSE and NOTICE issues from v0.1.0-rc.2,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-03-19T17:11:42Z,2020-05-07T15:20:48Z,"Vote thread for context: https://lists.apache.org/thread.html/r537b1189041fcd063e44859607e1ed5a5ed0f569cda4fcbee03fc5ed%40%3Cgeneral.incubator.apache.org%3E

If the things mentioned in our NOTICE file are actually included in our code, it sounds like we should move the full licenses to our LICENSE file. If not, we should remove them from our NOTICE file. A double check on ASF policies around what goes where is in order.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/63,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMwNzE2OA==,incubator-annotator,601307168,63,NA,jccr,5132652,Juan Carlos Corona Romero,c@rlos.email,NA,2020-03-19T17:16:07Z,2020-03-19T17:16:07Z,Is there a convention/policy within Apache's to allow for a `LICENSE-3RD-PARTY` file? Would that help with the separation of dependency licenses from the main project's license?,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMwNzE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/63,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMwNzY4OA==,incubator-annotator,601307688,63,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-03-19T17:17:05Z,2020-03-19T17:17:05Z,I think the process is to append it to LICENSE. Here's the documentation: http://www.apache.org/dev/licensing-howto.html,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMwNzY4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/63,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMxMzIwMQ==,incubator-annotator,601313201,63,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-03-19T17:27:27Z,2020-03-19T17:27:27Z,Getting this in order now. I'd been using https://github.com/apache/couchdb/blob/master/NOTICE for reference...not realizing that https://github.com/apache/couchdb/blob/master/LICENSE also had more... It's becoming clearer...with time. 😃 ,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMTMxMzIwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/63,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTMyMDgxMg==,incubator-annotator,625320812,63,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-05-07T15:20:48Z,2020-05-07T15:20:48Z,"Not sure why this didn't auto-close, but this is completed in #66.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNTMyMDgxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/64,https://api.github.com/repos/apache/incubator-annotator/issues/64,incubator-annotator,584567764,64,Document release process and release testing process,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-03-19T17:12:12Z,2020-06-18T16:41:39Z,"Write down, in the GitHub project wiki, the steps for making a release and testing a release, to ease release management and voting.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/64/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/64,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjE1NjMyNA==,incubator-annotator,646156324,64,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T16:41:38Z,2020-06-18T16:41:38Z,I suppose this is finished. On the wiki: [Creating a Release](https://github.com/apache/incubator-annotator/wiki/Creating-a-Release) and [Testing a Source Release](https://github.com/apache/incubator-annotator/wiki/Testing-a-Source-Release).,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjE1NjMyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/69,https://api.github.com/repos/apache/incubator-annotator/issues/69,incubator-annotator,592734504,69,Convert codebase to TypeScript,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-04-02T15:47:10Z,2020-06-18T15:43:22Z,TypeScript offers some developer benefits to the project as well as downstream consumers.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/69/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/70,incubator-annotator,592743783,70,Web Annotation Protocol Server,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,OPEN,2020-04-02T16:00:07Z,2022-11-16T10:43:00Z,"This has come up a few times, but I'd like us to discuss building a [Web Annotation Protocol](https://www.w3.org/TR/annotation-protocol/) server implementation as part of this project.

It was part of the original [project proposal](https://github.com/apache/incubator-annotator/wiki/Proposal).

The application mention in the Proposal was [MangoServer](https://github.com/azaroth42/MangoServer) which is JavaScript-based (required MongoDB), but hasn't really been maintained since 2017--not a blocker, per se, but something to consider.

The Web Annotation Protocol, based on the [Linked Data Platform (LDP)](https://www.w3.org/TR/ldp-primer/) is fairly lightweight and ostensibly could be built upon existing LDP code.

A handful of LDP implementations exist in and around Apache land:

 * https://www.trellisldp.org/
   * active and probably the most up-to-date LDP and @ajs6f (a community member) is committer
 * http://marmotta.apache.org/
   * Apache Marmotta is an Apache project, but looks like it's gone a bit quite in recent years

It would also be *very* possible to build an implementation that uses a JSON document database (like Apache CouchDB).

If we ignore authentication--pushing that to a different layer of the application--then creating this server code should be fairly minimal work, and complete our ""stack"" for those wanting to do front-to-back annotation stuff.

Anyone interested? 😁 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNzkzODE3Nw==,incubator-annotator,607938177,70,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-04-02T16:05:06Z,2020-04-02T16:05:06Z,I removed a couple original suggestions. [Calimachus](https://github.com/3-Round-Stones/callimachus) looks abandoned (sadly) and [Virtuoso](http://vos.openlinksw.com/owiki/wiki/VOS/VirtLDP) is a GPLv2 project--so harder for us (as an Apache project) to contribute to directly.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNzkzODE3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczNzY2NzM5Nw==,incubator-annotator,737667397,70,NA,vrish88,36475,Michael Lavrisha,,NA,2020-12-03T05:03:00Z,2020-12-03T05:03:00Z,"Hello! I've been lurking here a while, so now to pop in! I came across [elucidate](https://github.com/dlcs/elucidate-server) via the [w3c's implementation test results](https://w3c.github.io/test-results/annotation-protocol/all.html). It could be a short to medium term storage solution. Not sure how it would play out in the long run.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczNzY2NzM5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczODAyMDcxNQ==,incubator-annotator,738020715,70,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-12-03T14:15:57Z,2020-12-03T14:15:57Z,"> Hello! I've been lurking here a while, so now to pop in!

Welcome! If you are interested in getting involved in some way, or just curious, feel free to join the [mailing list][] and/or a [weekly call][] (next one is in ~2 hours!).

[mailing list]: https://lists.apache.org/list.html?dev@annotator.apache.org
[weekly call]: https://lists.apache.org/thread.html/r5338cf41bcbc919675e48b0168f9fde21b9584b727114cd2d894f244%40%3Cdev.annotator.apache.org%3E



>  I came across [elucidate](https://github.com/dlcs/elucidate-server) via the [w3c's implementation test results](https://w3c.github.io/test-results/annotation-protocol/all.html). It could be a short to medium term storage solution. Not sure how it would play out in the long run.

Thanks for the pointer! As you may realise, we have so far been focussed on the front-end technicalities of annotation selectors, but this is certainly worth looking into.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczODAyMDcxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczODM0MjMyMg==,incubator-annotator,738342322,70,NA,vrish88,36475,Michael Lavrisha,,NA,2020-12-03T21:53:49Z,2020-12-03T21:53:49Z,"@Treora Actually, I may take you up on that. I've got a side project that I'm really looking to use the whole annotation ecosystem for and I've got some time off work now. I'll plan on attending the one next week!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDczODM0MjMyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/70,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OfIvk,incubator-annotator,1316785124,70,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-11-16T10:42:59Z,2022-11-16T10:42:59Z,"I recently looked what’s around, and found this [simple-annotation-server](https://github.com/jankaszel/simple-annotation-server) look possibily useful for a start, by virtue of being simple. We may however want something more LDP-savvy, to open the way to support different serialisations and use other powers of linked data (signatures, notifications, …).

I made a fork of it (converting it to TypeScript and using Express instead of hapi) for the [web-annotation-discovery-server](https://code.treora.com/gerben/web-annotation-discovery-server).

I added both of these to our [Other Web Annotation Projects](https://github.com/apache/incubator-annotator/wiki/Other-Web-Annotation-Projects) wiki page.

Perhaps something of/like this could be included in Apache Annotator; but it would be quite a separate project from what we are currently making, and that already is getting too little love. So, while this situation continues, to me it feels wiser to keep focus and do one thing well.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OfIvk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/72,https://api.github.com/repos/apache/incubator-annotator/issues/72,incubator-annotator,593032065,72,Do not install husky git hooks when building a release tarball,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-04-03T02:26:01Z,2020-05-08T16:13:01Z,"I just discovered that husky will install its git hooks at the nearest git repository. I keep my dotfiles in git and was surprised to find husky hooks in my `~/.git/hooks` directory, from when I was testing an Annotator release.

Here's my comment on a husky issue:

> I'd like to use husky in a project that will be distributed as a tarball. I don't want husky to install hooks when users build the project.
>
> Would it be possible to default to the old behavior of assuming that the git directory is at the same level as package.json, install no hooks if it's not found, and add a configuration switch for setting an explicit root? That would make the default safer while allowing those with different layouts the ability to still use husky.

https://github.com/typicode/husky/issues/36#issuecomment-608192841

I think we need to resolve this before release because I really don't want to install hooks into unknowable locations on users' machines.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/75,https://api.github.com/repos/apache/incubator-annotator/issues/75,incubator-annotator,611457103,75,Support TextPositionSelector (in the dom package),Treora,4191409,Gerben,gerben@treora.com,CLOSED,2020-05-03T16:54:23Z,2020-12-24T17:41:17Z,"Following its [specification](https://www.w3.org/TR/2017/REC-annotation-model-20170223/#text-position-selector).

Altough it looks simple, there may be challenges in ensuring we count characters correctly. From the spec (in the TextQuoteSelector section, but that is then referred to by the TextPositionSelector section):

> The selection of the text MUST be in terms of unicode code points (the ""character number""), not in terms of code units (that number expressed using a selected data type). Selections SHOULD NOT start or end in the middle of a grapheme cluster. The selection MUST be based on the logical order of the text, rather than the visual order, especially for bidirectional text. For more information about the character model of text used on the web, see charmod.
> 
> The text MUST be normalized before recording in the Annotation. Thus HTML/XML tags SHOULD be removed, and character entities SHOULD be replaced with the character that they encode.

The referenced ‘charmod’ (Character Model for the WWW) has [a section](https://www.w3.org/TR/charmod/#sec-stringIndexing) on string indexing that may be relevant.

What still confuses me a little is what constitutes the exact text of a DOM. Given that normalisation should (why not *must*?) remove html tags, I suppose this assumes we deal with the source html.

What then to do with comments: are those text, or are their `<!--` and `-->` parts to be removed? In the latter case, would the document’s total text equal the [textContent](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) of all children of the Document? (one may think `document.documentElement.textContent`, but that excludes whitespace and comments outside the `<html>` element)

Possibly more problematic, can one even access the source html accurately enough through the DOM? Might a source parser have modified whitespace, thus leading to miscounts? I am not even talking about executed scripts that may modify the DOM too, I suppose we have to disregard that scenario.

Of course there are implementations already whose approach and behaviour we could copy, but it may be good to do the exercise of implementing based on the spec to ensure that it matches up, also to help detect discrepancies between implementations and spots where the spec may need to be improved/updated.

Any differences in implementations would likely result in misanchored annotations, so doing this imprecisely seems of little value; unless the use is explicitly limited to only apply to e.g. selector refinement within text nodes, which could be a strategy to take.

@tilgovi (or others): what are your thoughts about this, and about the implementation as it is done in [dom-anchor-text-position](https://github.com/tilgovi/dom-anchor-text-position/), in Hypothesis, or elsewhere?
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/75,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4Njk2Mw==,incubator-annotator,674586963,75,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-08-16T22:40:23Z,2020-08-16T22:40:23Z,"> The text MUST be normalized before recording the annotation. Thus HTML/XML tags SHOULD be removed and character entities SHOULD be replaced with the character that they encode.

As long as we stick to `textContent` or `innerText`, we are covered here. The tags are not part of this and entities are already replaced.

> Possibly more problematic, can one even access the source html accurately enough through the DOM? Might a source parser have modified whitespace, thus leading to miscounts? I am not even talking about executed scripts that may modify the DOM too, I suppose we have to disregard that scenario.

We should be fine, at least for text nodes. The CSS white space properties make it important that parsers preserve the text nodes as is.

I think the spec is still somewhat vague and open to interpretation. I am partial to using `innerText` because it's the closest to the actual presentation. Regardless of what we choose, we have some work that supports any decision and helps us handle characters with multiple code units.

Iterating over a string in JavaScript yields strings representing the code points (each iteration may yield a string with more than one code units). As a result, one can also do `[...string]` and get an array of the code points. If we write a generic text position selector in terms of iteration over code points then we can compose it with anything that generates such an iterator from any other source, like generating `innerText` from a DOM Node or Range. The simplest thing is to call it with `[...string]`.

However, I think we should consider going a step further and writing a text selector that consumes an iterator that yields _chunks_ rather than receiving a full text with the initial call. This interface would be useful for streaming scenarios where the whole text may not be available or may be extremely large. The chunks themselves could be arrays or strings, and if we decide that they are strings we may wish to iterate over their code points.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4Njk2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/75,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTgzNDY0Mg==,incubator-annotator,705834642,75,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-10-08T21:31:04Z,2020-10-08T21:31:04Z,"I started implementing this in the `text-position` branch. I started by simply copying the code and tests from text quote selection, and adapting them as needed.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTgzNDY0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/75,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDkzMzgxMQ==,incubator-annotator,750933811,75,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-12-24T17:41:16Z,2020-12-24T17:41:16Z,Implemented in #98.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDkzMzgxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/77,https://api.github.com/repos/apache/incubator-annotator/issues/77,incubator-annotator,614890423,77,Create tests for dom package,Treora,4191409,Gerben,gerben@treora.com,CLOSED,2020-05-08T17:53:51Z,2020-06-18T16:38:56Z,"I made a first small step in the [dom-tests](https://github.com/apache/incubator-annotator/tree/dom-tests) branch. Not yet sure what approach to take, but I thought to just start with some tests for text quote anchoring on small, artificial html documents, to test for various kinds of edge cases.

A technical hurdle is that to test things in Node, we would need to run the code inside e.g. jsdom; does anybody know a simple way to do this? Something like [jsdom-global](https://github.com/rstacruz/jsdom-global) seems convenient, but that module looks outdated. [jest](https://github.com/facebook/jest) provides a jsdom environment by default, but we’d have to switch everything from mocha to jest.

Currently I run tests in the browser (using `yarn start`), which works but I wonder how to get more useful output messages (it would not give me [`inlineDiffs`](https://mochajs.org/#diffs)). Help welcome.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/77/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/77,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYyOTM4NDczNw==,incubator-annotator,629384737,77,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-05-15T17:27:57Z,2020-05-15T17:27:57Z,"In the call yesterday we discussed moving to jest as a possible solution. [Karma](https://github.com/karma-runner/karma) was suggested as a way to run automated tests in actual browsers, not just jsdom; this seems a good thing to do anyway, @tilgovi volunteered to set this up soon.

Also [global-jsdom](https://github.com/modosc/global-jsdom) was suggested, which is a recent reincarnation of [jsdom-global](https://github.com/rstacruz/jsdom-global) that is too outdated for us to use (likewise for [browser-env](https://github.com/lukechilds/browser-env/), etc; forking is the new maintaining). This seems to be usable for the time being, unblocking me right now!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYyOTM4NDczNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/77,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjE1Mzc1Mg==,incubator-annotator,646153752,77,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-06-18T16:38:55Z,2020-06-18T16:38:55Z,"First tests merged in #79, more can be developed as we go. Closing this issue.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NjE1Mzc1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/78,https://api.github.com/repos/apache/incubator-annotator/issues/78,incubator-annotator,616776952,78,Consider/monitor the new IntersectionObserver spec/work,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,CLOSED,2020-05-12T16:04:35Z,2020-06-04T15:56:02Z,"https://www.w3.org/TR/intersection-observer/

Might help with highlighter and other anchoring implementations in the DOM.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/78,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk0NzAzMQ==,incubator-annotator,638947031,78,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2020-06-04T15:56:02Z,2020-06-04T15:56:02Z,Closing in favor of #78.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODk0NzAzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/80,incubator-annotator,626538624,80,"highlight range: ""not a perfect undo: split text nodes are not merged again""",danielweck,625201,Daniel Weck,daniel.weck@gmail.com,CLOSED,2020-05-28T14:08:23Z,2020-08-17T20:09:30Z,"Source code reference:
https://github.com/apache/incubator-annotator/blob/ac3b5bd4b2793b8f01a12bcd328b6beb947069fc/packages/dom/src/highlight-range.js#L23-L24

https://github.com/apache/incubator-annotator/blob/ac3b5bd4b2793b8f01a12bcd328b6beb947069fc/packages/dom/src/highlight-range.js#L121-L140

(also see https://github.com/Treora/dom-highlight-range/blob/master/highlight-range.js )

Could `Node.normalize()` be used on `highlightElement.parentNode`?

https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize

See MarkJS usage:

https://github.com/julmot/mark.js/blob/9b0efaf07b869b45cfc4815faad167940143016b/src/lib/mark.js#L675-L687","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/80/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTM4MDI3MA==,incubator-annotator,635380270,80,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-05-28T14:21:09Z,2020-05-28T14:21:09Z,"> Could `Node.normalize()` be used on `highlightElement.parentNode`?

Indeed! That idea popped up recently too, and is what we started doing in the demo [1][]. I was not sure yet whether we would want to do it in the `removeHighlight` function. However it would not be a perfect undo function either, as it would also merge nodes that were already split beforehand (for some reason).

But might there be occasions where the user may *not* want their text nodes to be normalised? So far I have not come up with any such situation, so it may be a good idea to just run `parentNode.normalize()` indeed.

[1]: https://github.com/apache/incubator-annotator/blob/ac3b5bd4b2793b8f01a12bcd328b6beb947069fc/web/demo/index.js#L91","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTM4MDI3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTQyODQyMw==,incubator-annotator,635428423,80,NA,danielweck,625201,Daniel Weck,daniel.weck@gmail.com,NA,2020-05-28T15:41:50Z,2020-05-28T15:41:50Z,"> However it would not be a perfect undo function either, as it would also merge nodes that were already split beforehand (for some reason).

My thoughts exactly. Even if non-normalized empty / adjacent text nodes is a ""weird"" edge-case to start with, the assertion that the DOM will be restored to its exact original form is not 100% bullet proof, which can be problematic in usage scenarios where the DOM must be a source of truth for further selections / annotations. A pragmatic workaround for this is to reload the document from scratch instead of walking the tree in order to revert each individual DOM mutation, but this may not be a practical solution in usage scenarios where some context must persist.

As always, there are pros/cons, and interspersing DOM elements in order to ""mark"" text ranges no doubt has its merits. However, there are evident computational costs in ""wrapping"" + ""unwrapping"" DOM mutations, possibly also triggering prohibitive web browser's render/layout. In my experience though, performance degradation only becomes perceivable in stress-tested cases, for example when highlighting many thousands of search results inside a large document. I realize that the vast majority of use-cases probably do not require such level of scrutiny.

Just a bit of background to explain why I am paying attention to Apache Annotator, Hypothesis, etc.:

I work on a Readium project where document ""annotations"" are rendered using pixel-perfect overlays (i.e. shape ""drawings"" made with SVG or HTML elements + CSS), which are displayed above text characters using CSS mix blend mode 'multiply' in order to preserve text contrast, and with a translucent background color to ""paint"" the actual highlighting shape.

DOM mutations are batched and inserted at the end of the original document (using DocumentFragments), which is a more efficient technique than tree-walking and interspersing individual mutations. The primary computational cost is therefore the calculation of ""client rectangles"" (i.e. 2D shape coordinates at the character level), but this is relatively cheap if no re-renders are triggered in the web browser engine. The arithmetics needed to optimize the bounding shapes are cheap too (i.e. elimination of duplicates, overlapping regions, thin areas, etc.)

Bundling DOM ""annotations"" together at the end of the original DOM makes it easy to blacklist ""foreign"" document artefacts when calculating / matching references to the unadulterated HTML (simply speaking, we can just ignore whole subtrees when computing CSS selectors or when resolving DOM Ranges, for example). 

We use pointer-events 'none' so that annotation overlays are effectively ""transparent"" to user interactions with the underlying document, which in turn makes it possible to create overlapping text selections / highlights. That being said, annotation overlays remain ""tactile"" in the sense that we simulate direct interaction using event delegation, for example to implement hit-testing with the mouse cursor, for hover and click actions at the level of each individual highlight.

As a final note, I will say that out-of-band overlays (versus inline / interspersed DOM mutations)  introduced non-trivial implementation challenges related to the different display modes our application supports. This is in the EPUB context, so we have the traditional vertical ""webby"" scrolling view, a paginated mode (using CSS Columns), and fixed-layout (i.e. document root scaled with a zoom factor to fit entirely into the visible viewport). Once the idiosyncrasies of the CSS box model with `position` `absolute` vs. `fixed` in these different rendering contexts were figured-out ... we were good to go :)

Sorry to bombard you with slightly-unrelated information, I hope this is a useful exchange nonetheless. Keep up the good work in Apache Annotator and related projects (CC @tilgovi too).

PS: our project will at some point visit the problem space of creating interoperable annotations, likely relying on the W3C standard(s)...so I will continue to watch your projects.

","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTQyODQyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTg5NDA0Mw==,incubator-annotator,635894043,80,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-05-29T10:15:23Z,2020-05-29T10:15:23Z,"Thanks for the elaboration, this sounds like great work. A highlighter that overlays on the dom seems preferable in many situations. Is/will your implementation be available as a module?

Note that we are not at all attached to our current highlighter implementation. We mainly included it in this repository in an attempt to be helpful to users that just want *some* way to visualise a range of text. But highlighting, and UI stuff in general, seems like something that has so many trade-offs (and entanglements with UI frameworks) that we better remain mostly unopinionated about it, and instead we could make it easy for users to mix and match our modules with any third party modules that fit their needs — including perhaps yours?

It would be great to learn more about your application and ways in which our work could become of use to you; be welcome on our mailing list, IRC, and/or weekly video calls.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTg5NDA0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTkwMjc4OQ==,incubator-annotator,635902789,80,NA,danielweck,625201,Daniel Weck,daniel.weck@gmail.com,NA,2020-05-29T10:37:37Z,2020-05-29T10:37:37Z,"> Is/will your implementation be available as a module?

It's all open-source (TypeScript), but at this stage there is some tight-coupling with our internal layout/rendering logic, and the relevant pieces of code are not easily extractable from our codebase.

However, the intent is indeed to open-source this work ""properly"", i.e. a standalone (NPM) package, maintained in its own (GitHub) repository (with some documentation for both the public API and the internals).","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTkwMjc4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTkwMzcxMw==,incubator-annotator,635903713,80,NA,danielweck,625201,Daniel Weck,daniel.weck@gmail.com,NA,2020-05-29T10:40:00Z,2020-05-29T10:40:00Z,"> It would be great to learn more about your application and ways in which our work could become of use to you; be welcome on our mailing list, IRC, and/or weekly video calls.

Thanks. I will get back to you when our work stabilizes.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNTkwMzcxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4NDgzNg==,incubator-annotator,674584836,80,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-08-16T22:17:31Z,2020-08-16T22:17:31Z,"Is there any action here, or are we okay to leave the nodes split?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4NDgzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/80,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgwMzc0NQ==,incubator-annotator,674803745,80,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-08-17T10:36:45Z,2020-08-17T10:36:45Z,"> Is there any action here, or are we okay to leave the nodes split?

I ended up thinking that running e.g. `range.commonAncestorContainer.normalize()` in the cleanup would be a bit much; I’d rather not merge nodes we did not touch. We only split the start node and/or end node, and could change the implementation to just merge those nodes we split. This change simply did not seem a priority yet.

I just added a comment for now to suggest running `range.commonAncestorContainer.normalize()`.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgwMzc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/81,https://api.github.com/repos/apache/incubator-annotator/issues/81,incubator-annotator,627189196,81,sync vs async API,Treora,4191409,Gerben,gerben@treora.com,CLOSED,2020-05-29T11:10:07Z,2021-02-04T04:36:46Z,"As discussed in the call yesterday, I open this issue to park thoughts about whether/how to provide synchronous APIs, mainly future consideration.

So far, we have been using async iterables/generators as the system for returning a selector’s matches to the caller. The intention of this approach is to not block the thread for too long when dealing with e.g. a fuzzy text search (once that’s implemented) in a large document:
- Using an *iterable* instead of returning all matches in an array allows the user to get the first results before the search has completed, and also pause or abort the continuation of the search if desired — this is great, no need to question this I think.
- Using an *async* iterable allows such a search implementation to e.g. break up work in small chunks.

In our planned modular system, with support for different selector types and different implementations for anchoring them, some implementations may want to use the asynchronous approach, while others are quick enough to run synchronously. So far, our code only uses synchronous implementations, but it exposes them as asynchronous functions so that in the future one could swap out an implementation for an async one, and we can pass functions around without needing to distinguish between sync and async ones. Unfortunately, as Javascript [lacks](https://stackoverflow.com/a/30564128) a way to turn a resolved promise into its value synchronously, a sync implementation with an async API cannot be wrapped to make it sync again.

Now a question may be whether, for situations where the implementations are synchronous anyway, it is a burden for users to have to use the asynchronous API when it is not needed. If so, one option would be to provide a sync *and* and async API, much like NodeJS does for many of its functions. It may require some reorganisation/duplication in our code and documentation, but we could consider this if the async approach is a show-stopper for some (potential) users; do leave a reply if that is the case for you.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/81,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4NDY3MQ==,incubator-annotator,674584671,81,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-08-16T22:15:36Z,2020-08-16T22:15:36Z,"I propose we start by making some attempt to have core pieces of our reusable code allow for synchronous iterators, but keep the asynchronous consumer API.

I started experimenting with something like this, that we could use in our definitions for cartesian product or our matcher functions.

``` typescript
type AbstractIterable<T> = AsyncIterable<T> | Iterable<T>;

export function isAsyncIterable<T>(
  iterable: AbstractIterable<T>,
): iterable is AsyncIterable<T> {
  return typeof iterable[Symbol.asyncIterator] === 'function';
}

export function makeAsync<T>(iterable: AbstractIterable<T>): AsyncIterable<T> {
  if (isAsyncIterable<T>(iterable)) {
    return iterable;
  }

  return {
    [Symbol.asyncIterator]() {
      const iter = iterable[Symbol.iterator]();
      return {
        next() {
          return Promise.resolve(iter.next());
        },
      };
    },
  };
}
```","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDU4NDY3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/81,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgwNzE3Mg==,incubator-annotator,674807172,81,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-08-17T10:44:47Z,2020-08-17T10:44:47Z,"Looks good. I’d be fine with adopting this approach, but equally fine with just keeping it in mind for when we have a need/requests for synchronous use.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgwNzE3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/81,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzAyMjA2Ng==,incubator-annotator,773022066,81,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-02-04T04:36:45Z,2021-02-04T04:36:45Z,"Closing this. Sounds like we've got ideas for supporting synchronous APIs, but we don't have any urgency around it.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MzAyMjA2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/82,https://api.github.com/repos/apache/incubator-annotator/issues/82,incubator-annotator,653173823,82,update version of npm packages,mokipedia,11502273,Valentin Moser,,CLOSED,2020-07-08T10:18:11Z,2020-07-12T06:55:32Z,"Hi,
the npm releases seem to be a little behind the releases marked here in github.
Is there a new release planned?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/82,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NTY5NzIyMw==,incubator-annotator,655697223,82,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-07-08T18:57:46Z,2020-07-08T18:57:46Z,"We have stopped publishing pre-release versions for the moment, as we are getting our release process in order. The first official release is v0.1.0, which was tagged less than 24 hours ago. I am waiting 24 hours for the tarball to propagate to appear on Apache mirrors before I send a release announcement and publish to npm.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NTY5NzIyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/82,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzE4MzM5Mg==,incubator-annotator,657183392,82,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-07-12T06:55:32Z,2020-07-12T06:55:32Z,"The release is now live. Thank you for your patience!

There is no formal documentation at the moment, so please dig into the code and raise questions on the mailing list or in GitHub issues. We are very interested in getting feedback and helping people get started working with the project and contributing.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzE4MzM5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/83,https://api.github.com/repos/apache/incubator-annotator/issues/83,incubator-annotator,658363926,83,Fuzzy text quote matching,Treora,4191409,Gerben,gerben@treora.com,OPEN,2020-07-16T16:38:55Z,2020-12-24T22:32:42Z,"Many annotation tools want to match a quote also when it has been modified slightly, but we have yet to implement this.

Enabling approximate/fuzzy string matching could be an option to our existing implementation (perhaps a parameter that tells how fuzzy the match should be, where 0 means exact matching); alternatively it could be exposed as a separate implementation.

A second question is whether the matcher should return information about the quality of the match, and if so, how the API would look. I suppose a match object could have an extra attribute expressing the ‘match quality’; though in case of refined/range selectors we should figure out how to propagate this information.

Prior art we could borrow from:
- https://github.com/tilgovi/dom-anchor-text-quote (uses diff-match-patch)
- https://github.com/robertknight/approx-string-match-js/
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/83,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDk0MzE1Mw==,incubator-annotator,750943153,83,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-12-24T18:39:23Z,2020-12-24T18:39:23Z,"> Prior art we could borrow from:
> 
> * https://github.com/tilgovi/dom-anchor-text-quote (uses diff-match-patch)
> * https://github.com/robertknight/approx-string-match-js/

Update: @judell kindly informed us that Hypothesis now switched from the former to the latter. See https://github.com/hypothesis/client/pull/2814 and https://github.com/hypothesis/client/pull/2779

I’d be eager to see how they compare (at least it’s supposed to be much faster now!), what could still be improved, etc.

Some observations from looking at how exactly approx-string-match-js is being used in H:

- A nifty choice is that its new implementation [gives a score using weights][1] such that it is fuzzier when matching the prefix and suffix than when it matches the exact quote.
- Also it allows giving a hint at which position in the text the quote is expected, giving a penalty to matches that are further away from that position; this elegantly enables combining the information from a TextQuoteSelector and TextPositionSelector.
- The score for each matched string (before weighting) seems to be [calculated][2] as 1 minus the number of errors (i.e. its levenshtein distance) normalised by the string’s length. This makes sense, though I wonder if it might cause e.g. a one-character prefix to have an unfairly heavy influence on the match score (perhaps not significant, but dropping this thought here for later).

CC @robertknight (happy to hear if you have more research notes, experimental results or other relevant tips from your experience developing this!)

[1]: https://github.com/hypothesis/client/blob/0c2871ab98e6cf0a2bbfdb4d0aba439a3ba9039a/src/annotator/anchoring/match-quote.js#L109-L145
[2]: https://github.com/hypothesis/client/blob/0c2871ab98e6cf0a2bbfdb4d0aba439a3ba9039a/src/annotator/anchoring/match-quote.js#L55-L64","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MDk0MzE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/83,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTEyNTU4Mg==,incubator-annotator,751125582,83,NA,robertknight,2458,Robert Knight,robertknight@gmail.com,NA,2020-12-24T22:30:56Z,2020-12-24T22:30:56Z,"> CC @robertknight (happy to hear if you have more research notes, experimental results or other relevant tips from your experience developing this!)

Aside from taking ideas from Hypothesis's technical implementation, which you've already posted pointers to, the other resource I would suggest to make use of from Hypothesis are datasets of annotations in the ""Public"" channel. Here are some I found useful for testing quote matching performance and accuracy:

- The American Yawp project: http://www.americanyawp.com. In particular, the early chapters have a lot of public annotations
- Annotations on Wikipedia: `https://hypothes.is/search?q=url%3Ahttps%3A%2F%2Fen.wikipedia.org%2F*`. In particular, check out articles which have many annotations made on older versions (say from 2018 or earlier) and have had many edits since then

The new quote matching implementation in Hypothesis has a couple of areas where we've noticed matching quality can be improved:

1. It can find spurious matches for short quotes (in particular, those of one or two words). In [the PR](https://github.com/hypothesis/client/pull/2779) I mention a couple of examples.
2. In the case where the match is not exact, alignment can be sub-optimal in some cases. Looking at public Hypothesis annotations on http://www.americanyawp.com/text/01-the-new-world/ for example you can find cases where the Hypothesis client draws highlights that start or end in unlikely places (eg. middle of a word).

Related to point (1), one of the goals of the new implementation was to try to make it easier for other Hypothesis developers and staff to understand how exactly the ""fuzzy"" aspect of ""fuzzy matching"" works. The thinking is that if it is imperfect, then there is value in at least being predictable.

In terms of performance, the new implementation is indeed a lot faster in the worst case where there are many selectors that either do not match at all or match with significant edits. The actual approximate string matching code is pretty well optimized at this point. The next lowest-hanging fruit is optimizing the extraction of text from the document and mapping between text positions and DOM (node, offset) points. If we find that we need to make significant improvements from the current implementation in future then we'd likely need to do some offline processing of the document text before searching for matches.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MTEyNTU4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/85,https://api.github.com/repos/apache/incubator-annotator/issues/85,incubator-annotator,680162188,85,‘Chunking’ abstraction,Treora,4191409,Gerben,gerben@treora.com,CLOSED,2020-08-17T11:28:18Z,2020-12-24T17:39:54Z,"In recent calls we (especially @tilgovi — so feel free to improve my description) have discussed an approach to allow text selector matching/describing implementations on other ‘document models’ than the DOM. A typical use case would be a (web) application that uses some framework (ProseMirror, React, …) to display documents, and therefore would not want the result of anchoring an annotation to be a Range object, but rather something that matches their internal representation of the document.

A discussed requirement is also that the document can be provided piecemeal and asynchronously, so that an application can try anchor selectors on documents that are not fully available yet (or just not fully converted to text yet, think e.g. PDF.js). We have been calling such pieces of text ‘chunks’ for now.

Currently, our text quote anchoring function (in the dom package) is hard-coded to search for text quote using Range, NodeIterator, TreeWalker. When using the chunk approach, this functionality should be composed of two parts: one generic text quote anchoring function that takes a stream of Chunks of text; and one dom-to-chunk converter that uses TreeWalkers and such to present the DOM as a stream of text Chunks.

I am creating this issue to discuss what exactly a Chunk would be (a string?), and what a stream of chunks would be (an `AsyncIterable<Chunk>`?), and how our generalised anchoring functions interact with chunk providers (e.g. do we need an equivalent of Range, how do we pass back string offsets, …?). And also to discuss the assumptions and requirements (are we on the right track?).","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/85,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgzNjU2Nw==,incubator-annotator,674836567,85,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-08-17T11:54:07Z,2020-08-17T11:54:07Z,"@tilgovi alluded to this chunking idea in #75:

> However, I think we should consider going a step further and writing a text selector that consumes an iterator that yields chunks rather than receiving a full text with the initial call. This interface would be useful for streaming scenarios where the whole text may not be available or may be extremely large. The chunks themselves could be arrays or strings, and if we decide that they are strings we may wish to iterate over their code points.

Just one idea this raised: would it go too far to just ask for a stream of characters, that we permit to be nested? A simple experiment:

```
function isCharacter(charOrStream) {
  return typeof charOrStream === 'string' && [...charOrStream].length === 1;
}

function printCharacters(iterable) {
  for (charOrStream of iterable) {
    if (!isCharacter(charOrStream)) {
      printCharacters(charOrStream);
    } else {
      console.log(charOrStream);
    }
  }
}

printCharacters('bla. ');
printCharacters(['two', ' chunks. '])
printCharacters(['chunks', [' could', ' nest.', '', ]]);
```

I suppose such an approach may be elegant for a specification or reference implementation, but perhaps making a stricter structure could help increase performance (iterating through a string’s individual characters might anyhow be required when anchoring a TextPositionSelector, but for a TextQuoteSelector it could be superfluous?)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDgzNjU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/85,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzU2OTMxMw==,incubator-annotator,693569313,85,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-09-16T18:03:25Z,2020-09-16T18:03:25Z,"> Currently, our text quote anchoring function (in the dom package) is hard-coded to search for text quote using Range, NodeIterator, TreeWalker. When using the chunk approach, this functionality should be composed of two parts: one generic text quote anchoring function that takes a stream of Chunks of text; and one dom-to-chunk converter that uses TreeWalkers and such to present the DOM as a stream of text Chunks.

I started playing with this idea in the branch [chunking](https://github.com/apache/incubator-annotator/compare/chunking).

In this first attempt a Chunk is anything that has a toString() method: 

```
export interface Chunk {
  toString(): string;
}
```

And we can point at a part of the text using a straightforward generalisation of `Range`:

```
export interface ChunkRange<TChunk extends Chunk> {
  startChunk: TChunk;
  startIndex: number;
  endChunk: TChunk;
  endIndex: number;
}
```

I made an abstracted version of the text quote matcher that accepts as its scope an `AsyncIterable<TChunk>`:

```
export function abstractTextQuoteSelectorMatcher(
  selector: TextQuoteSelector,
): <TChunk extends Chunk>(textChunks: AsyncIterable<TChunk>) => AsyncIterable<ChunkRange<TChunk>> {
```

So one can throw any type of `TChunk` in, and get ranges using the same type back. For the concrete implementation, I actually used `Range`s as the `TChunk` type, with each `Range` wrapping a single text node. (we can’t just throw in text nodes themselves, both because their `toString()` method does not return the text content, and because the first and the last node might be only partially part of the scope).

For the text quote matching this works fine (all tests pass). For describing a text quote however, it would be helpful to have more freedom to navigate the text, instead of only walking through it in a single pass (especially to find prefixes). I suppose our scope should have an API that is more like a TreeWalker than like a NodeIterator: jump to any spot, and then walk in either direction.

@tilgovi: Any thoughts about the approach to try, before I go further down this rabbit hole?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzU2OTMxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/89,https://api.github.com/repos/apache/incubator-annotator/issues/89,incubator-annotator,701408129,89,Add README files for each sub-package,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-09-14T20:36:05Z,2020-09-20T04:37:21Z,This can be as simple as a stub that describes the package as part of Apache Annotator (incubating) and links to the main project.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/89,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTcxMjU0OQ==,incubator-annotator,695712549,89,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-20T04:37:21Z,2020-09-20T04:37:21Z,Closed by bb78bd5.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTcxMjU0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/90,https://api.github.com/repos/apache/incubator-annotator/issues/90,incubator-annotator,701409368,90,Add apache-annotator meta-package,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-09-14T20:38:15Z,2020-09-20T01:11:40Z,"In order to follow suggestions for releasing npm packages as `apache-<project>` without violating the spirit of producing convenience packages from released source code, I copied, unmodified, the two packages (selector and dom) into subdirectories of a new `apache-annotator` package and published that to GitHub with an abridged README.

If we complete #89, I think it should be safe to publish the individual packages to the annotator scope on npm because the individual packages will all make clear that they belong to apache-annotator. However, even leaving aside policy motivations it is a great convenience to users if we have a meta-package, I think, especially while we are still experimenting with our internal code organization.

Let's check in an apache-annotator meta-package with a clear README and have it depend on the other packages. That will get us in a place to publish directly and simply with lerna for the next release.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/90/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/90,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDkzMDA1Mg==,incubator-annotator,694930052,90,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-09-18T15:20:08Z,2020-09-18T15:20:08Z,"What exactly would a meta-package provide? Should it be just like the current apache-annotator that you published to npm, and the issue is simply to automate its publishing process?

The current meta-package would be used as: `import { … } from 'apache-annotator/dom';`. Shall we keep it like that, or would you prefer to change it to `import { dom } from 'apache-annotator';`? Or something else?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDkzMDA1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/90,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTQxOTM1MA==,incubator-annotator,695419350,90,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-20T01:11:39Z,2020-09-20T01:11:39Z,Closed by #94.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTQxOTM1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/91,https://api.github.com/repos/apache/incubator-annotator/issues/91,incubator-annotator,701411071,91,Provide a fast method to describe text quotes,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-09-14T20:41:03Z,2020-09-18T19:06:24Z,"The existing function to describe text quotes can lock up the runtime if given a very small quote with a lot of matches to disambiguate between. The absolutely worst case scenario is to give it an empty range, which causes the implementation to compare the context to the context around every single other position within the text!

For most use cases, it's probably not important to find a minimal solution. Let's provide some function to get a context more simply.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/91/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/92,incubator-annotator,703693406,92,Make it possible for developers to install unreleased versions,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-09-17T15:31:45Z,2021-04-04T01:38:19Z,"It would be helpful for everyone following along with the bleeding edge here to be able to consume packages from npm. We could publish continually, we just need to make it clear that these are developer convenience builds and not link to them from anywhere that suggests they are releases.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA1OTMyNw==,incubator-annotator,695059327,92,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-09-18T20:01:44Z,2020-09-18T20:01:44Z,"I suppose we could continue using the `dev` tag that we once used? E.g. [`@annotator/dom`](https://www.npmjs.com/package/@annotator/dom) has a release `0.1.0-dev.9d100c0f`. As discussed in the last call, we could try set up a hook to automatically build and publish it on npm whenever the master branch has changed, while generating a version number from the commit number.

On the other hand, I started wondering if we even want every development version to be pushed to the npm central registry. We discussed before that ideally people could just depend on the repository directly, using [a Git URL as dependency](https://docs.npmjs.com/files/package.json#git-urls-as-dependencies); e.g. writing `npm install https://github.com/apache/incubator-annotator#master`. The only problem we found was that our repo contains multiple packages. But perhaps we could still try make this work by making the top-level package the meta-package discussed in #90?

If we want to publish pre-built packages, we could also create a branch (or branches, or a separate repo) that contains those, e.g. using [`publish-to-git`](https://github.com/Rush/publish-to-git/) to automate this. Or we can just publish the latest tarball on the website: e.g. `npm install https://annotator.apache.org/packages/dom/0.2.0-dev.tar.gz` would be nice? While it would be good to make our packages readily available in the npm *ecosystem*, this need not mean they have to be on the npm *central registry*.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA1OTMyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2MDE4OQ==,incubator-annotator,695060189,92,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-18T20:03:56Z,2020-09-18T20:03:56Z,"> While it would be good to make our packages readily available in the npm ecosystem, this need not mean they have to be on the npm central registry.

That's well said. Let me change the issue title to better reflect the goal.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2MDE4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2MzMxMw==,incubator-annotator,695063313,92,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-18T20:11:08Z,2020-09-18T20:11:08Z,"> But perhaps we could still try make this work by making the top-level package the meta-package discussed in #90?

That won't work because I think lerna and/or yarn enforces that the top-level package must be private and won't publish it.

It might be possible to work _without_ lerna or yarn workspaces and just configure typescript and babel to know how to resolve everything, but we'd have to automate running yarn install separately for each package, they would all have their own yarn.lock, there would be no hoisting, and we might have to add all the development dependencies to each package.

I think we are better off not trying to publish the root, if we can find any way make the packages consumable otherwise.

Maybe GitHub Actions exist for this.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2MzMxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2NDMwOA==,incubator-annotator,695064308,92,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-18T20:13:23Z,2020-09-18T20:13:23Z,"We could maybe use the GitHub package registry, too, if that's at all easier to integrate for whatever reason.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA2NDMwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMjY2Njg4Ng==,incubator-annotator,722666886,92,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2020-11-05T21:52:02Z,2020-11-05T21:52:02Z,"Note from today’s call: supposedly yarn 2 should be able to install packages from within a monorepo, so we could start with accepting that nightly users have to use yarn 2, and hopefully npm and other clients follow. The remaining tasks would be to test if this indeed works in yarn 2, and if so add a sentence about it to the readme.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMjY2Njg4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NDcwMTMxNA==,incubator-annotator,754701314,92,NA,vrish88,36475,Michael Lavrisha,,NA,2021-01-05T15:20:01Z,2021-01-05T15:20:01Z,"Hey all! Sorry I haven't been able to make the subsequent meetings. 

I'd be interested in using some of these non-versioned releases. Are there any constraints around publishing a ""latest"" build? Would you be open to a pr that does it in GH actions?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NDcwMTMxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NDczNzc3Nw==,incubator-annotator,754737777,92,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-01-05T16:17:11Z,2021-01-05T16:17:11Z,"> I'd be interested in using some of these non-versioned releases. Are there any constraints around publishing a ""latest"" build? Would you be open to a pr that does it in GH actions?

I was just looking yesterday at the status of yarn 2, to see if I could use that to directly depend on this git repository (as explained above, our monorepo/multi-package structure makes it impossible to depend on using yarn 1 or npm). I don’t know if @tilgovi has gotten further with this?

In any case, even though directly depending on the git repo seems more elegant, it might take a while for us to move to yarn 2 (or not?), and it would force people to use yarn 2 until (if) monorepo dependencies are supported more widely. So to be pragmatic I think we should just auto-publish on npm indeed. I’d tag it `dev` instead of `latest`, to be clear it is not the latest release.

PRs would probably be very welcome! It depends on @tilgovi who was looking into this, but I don’t think we had anything set up yet.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NDczNzc3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/92,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk1NDU1MA==,incubator-annotator,812954550,92,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-04-04T01:38:19Z,2021-04-04T01:38:19Z,"After a long adventure and much confusion, I finally resolved this and the packages are publishing. The major hurdle was just that lerna had undocumented issues with using automation tokens and I had to use the beta v2 publishing providers from Travis.

In the process, I started running tests only against a current Node.js. That seems fine for now. We have linting and tooling designed to manage the compatibility, but let's keep the CI setup simple and snappy until we have a stronger need to guarantee stability.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk1NDU1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/96,https://api.github.com/repos/apache/incubator-annotator/issues/96,incubator-annotator,709852641,96,`tsc --build` fails sometimes ,ysndr,7040031,Yannik Sander,,CLOSED,2020-09-28T00:35:44Z,2020-09-28T21:01:11Z,"Hej
I'm currently packaging this library for the nix ecosystem under the NGI0 project.
I have a weird issue I can't really tell for where it comes from.

When running `yarn build` the typescript compile step might fail, if it fails then only `yarn clean` helps.
Outside of the nix build process i cannot reproduce the issue reliably.

The error I get is:
```
build:lib:types] packages/dom/src/css.ts(21,43): error TS7016: Could not find a declaration file for module '@annotator/selector'. '/Volumes/projects/git/apache-annotator/lib/incubator-annotator/node_modules/@annotator/selector/lib/index.js' implicitly has an 'any' type.
[build:lib:types]   Try `npm install @types/annotator__selector` if it exists or add a new declaration (.d.ts) file containing `declare module '@annotator/selector';`
[build:lib:types] packages/dom/src/css.ts(27,35): error TS7006: Parameter 'scope' implicitly has an 'any' type.
[build:lib:types] packages/dom/src/range/match.ts(21,55): error TS7016: Could not find a declaration file for module '@annotator/selector'. '/Volumes/projects/git/apache-annotator/lib/incubator-annotator/node_modules/@annotator/selector/lib/index.js' implicitly has an 'any' type.
[build:lib:types]   Try `npm install @types/annotator__selector` if it exists or add a new declaration (.d.ts) file containing `declare module '@annotator/selector';`
[build:lib:types] packages/dom/src/range/match.ts(32,37): error TS7006: Parameter 'scope' implicitly has an 'any' type.
[build:lib:types] packages/dom/src/range/match.ts(41,25): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(41,47): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(42,23): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(42,43): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/text-quote/describe.ts(22,40): error TS7016: Could not find a declaration file for module '@annotator/selector'. '/Volumes/projects/git/apache-annotator/lib/incubator-annotator/node_modules/@annotator/selector/lib/index.js' implicitly has an 'any' type.
[build:lib:types]   Try `npm install @types/annotator__selector` if it exists or add a new declaration (.d.ts) file containing `declare module '@annotator/selector';`
[build:lib:types] packages/dom/src/text-quote/match.ts(22,49): error TS7016: Could not find a declaration file for module '@annotator/selector'. '/Volumes/projects/git/apache-annotator/lib/incubator-annotator/node_modules/@annotator/selector/lib/index.js' implicitly has an 'any' type.
[build:lib:types]   Try `npm install @types/annotator__selector` if it exists or add a new declaration (.d.ts) file containing `declare module '@annotator/selector';`
[build:lib:types] packages/dom/src/text-quote/match.ts(28,35): error TS7006: Parameter 'scope' implicitly has an 'any' type.
``` 

In nix its a bit shorter but essentially the same error:

```
[build:lib:types] packages/dom/src/css.ts(21,43): error TS2307: Cannot find module '@annotator/selector' or its corresponding type declarations.
[build:lib:types] packages/dom/src/css.ts(27,35): error TS7006: Parameter 'scope' implicitly has an 'any' type.
[build:lib:types] packages/dom/src/range/match.ts(21,55): error TS2307: Cannot find module '@annotator/selector' or its corresponding type declarations.
[build:lib:types] packages/dom/src/range/match.ts(32,37): error TS7006: Parameter 'scope' implicitly has an 'any' type.
[build:lib:types] packages/dom/src/range/match.ts(41,25): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(41,47): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(42,23): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/range/match.ts(42,43): error TS2571: Object is of type 'unknown'.
[build:lib:types] packages/dom/src/text-quote/describe.ts(22,40): error TS2307: Cannot find module '@annotator/selector' or its corresponding type declarations.
[build:lib:types] packages/dom/src/text-quote/match.ts(22,49): error TS2307: Cannot find module '@annotator/selector' or its corresponding type declarations.
[build:lib:types] packages/dom/src/text-quote/match.ts(28,35): error TS7006: Parameter 'scope' implicitly has an 'any' type.
[build:lib:types] error Command failed with exit code 2.
```

Is there something I am missing?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/96,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5OTc0ODA2NQ==,incubator-annotator,699748065,96,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-28T03:23:22Z,2020-09-28T03:23:22Z,"The types build process is designed with a solution style, where each package has is its own TypeScript build that emits declaration files. This error looks like what happens when one project tries to compile its declaration files before a dependency has built successfully.

What version of TypeScript is being used? I would think that most invocations would result in the local TypeScript declared by package.json being used. Just in case some global TypeScript version is used instead, I think 3.9 is a minimum required version.

I might be able to help debug if you can give me a way to reproduce, like a containerized build or something. I have no experience with nix packaging, but I'll gladly help look into it.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDY5OTc0ODA2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/96,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDAxNTU1MQ==,incubator-annotator,700015551,96,NA,ysndr,7040031,Yannik Sander,,NA,2020-09-28T13:43:19Z,2020-09-28T13:43:19Z,Thanks I guess I found part of the error. The subpackages' src were not included in the node_modules (issue related to nix yarn toolset). So apparently not an issue with the project :),"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDAxNTU1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/96,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDI3OTA0OA==,incubator-annotator,700279048,96,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2020-09-28T21:01:11Z,2020-09-28T21:01:11Z,@ysndr great! Let us know if anything else come sup.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDI3OTA0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/97,https://api.github.com/repos/apache/incubator-annotator/issues/97,incubator-annotator,737114191,97,Generate TypeScript API documentation,tilgovi,20818,Randall Leeds,randall@bleeds.info,CLOSED,2020-11-05T17:11:02Z,2021-04-04T04:47:06Z,"Using tools from the microsoft/tsdoc ecosystem, create scripts to generate TypeScript API documentation.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/97,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjQ1Mjg4Mw==,incubator-annotator,756452883,97,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-01-07T23:39:38Z,2021-01-07T23:39:38Z,"@tilgovi Could you share/describe your attempt with tsdoc so far? I am curious what you used if not `api-documenter`, because it [looks like][1] `@microsoft/tsdoc` is not made for direct consumption:

> By itself, the @microsoft/tsdoc package is not a documentation solution you can use directly. It is an engine component used by other tools such as API Extractor. The NPM dependency report is an easy way to find tools that implement TSDoc.

Upon quick inspection I don’t see anything listed that look more mature than the api-documenter I tried in #101, but would be glad to find something nicer (it gets the job done though)

[1]: https://tsdoc.org/pages/intro/using_tsdoc/
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjQ1Mjg4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/97,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjQ1NTQxOQ==,incubator-annotator,756455419,97,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-01-07T23:47:26Z,2021-01-07T23:47:26Z,"Oh wait, there’s tsdoc.org and there is typedoc.org; please excuse my confusion. :) I suppose that’s what you tried; I’d be glad to try both and compare. It may still be helpful to see your setup, if you could push that as a branch.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NjQ1NTQxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/104,https://api.github.com/repos/apache/incubator-annotator/issues/104,incubator-annotator,817027550,104,Won't Start as Expected on Windows,krismeister,1367719,Kris Meister,,CLOSED,2021-02-26T04:23:25Z,2021-04-04T05:42:27Z,"On a windows machine the webpack module resolver does not respect the slashes as expected.

## Example:

```
yarn start 
......
ERROR in ./demo/index.js
Module not found: Error: Can't resolve 'C:\Users\username\projects\incubator-annotator-master\incubator-annotator-master\packagesdom\src\index.ts' in 'C:\Users\username\projects\incubator-annotator-master\incubator-annotator-master\web\demo'
 @ ./demo/index.js 27:0-288 91:23-53 92:26-59 93:19-49 186:30-44 232:19-39 241:19-36
 @ multi ./demo/index.html ./demo/index.js
```


## Expected Fix:
The project can build on windows the same as other platforms.

Here is the recommended fix I could find:
https://github.com/tleunen/babel-plugin-module-resolver/issues/242#issuecomment-350488615
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/104/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/104,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk3NzU2MA==,incubator-annotator,812977560,104,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-04-04T05:42:27Z,2021-04-04T05:42:27Z,Closed by #105.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk3NzU2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/106,https://api.github.com/repos/apache/incubator-annotator/issues/106,incubator-annotator,832563346,106, Can you please clarify me the License Conditions in practical terms?,raphael10-collab,70313067,,,CLOSED,2021-03-16T08:52:44Z,2021-04-12T09:54:44Z,"It's not clear to me the license: 

Here: https://github.com/apache/incubator-annotator/blob/master/LICENSE

![image](https://user-images.githubusercontent.com/70313067/111280943-b2271e80-863c-11eb-9056-7cb7e7f17f8d.png)

I read that it's an Apache License 2.0, with all related implications. 

I thought that the permissions of the Apache License 2.0 were clear and evident enough: Commercial Use, Modification,Distribution,Patent Use, and Private Use, with Limitations: Trademark Use, Liability, Warranty, and its Conditions: State Changes, License and Copyright notice.

But here : https://www.npmjs.com/package/apache-annotator#disclaimer

I read : ""If you are planning to incorporate this work into your product/project, please be aware that you will need to conduct a thorough licensing review to determine the overall implications of including this work."".
What does this mean in practical terms?

I've read also this thread: https://github.com/apache/incubator-annotator/issues/63 
but it didn't clarify me much.

Can you please clarify me? 
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/106,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgwMzQ2MzQ4Ng==,incubator-annotator,803463486,106,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-03-20T21:08:55Z,2021-03-20T21:08:55Z,"The disclaimer must be provided by Apache projects during incubation because some Apache projects may have code that was not licensed as Apache License 2.0 at the time the project moved to Apache. Those projects may need to go through a process of re-licensing components or appending the project notifications to their license files and notice files. The intention of the disclaimer is to allow incubating projects to make releases without necessarily having identified and resolved all such issues.

Annotator has no outside work that would be under any other license, but we are required to provide the disclaimer during the incubation process. The disclaimer is there so that you know that the Apache Software Foundation does not guarantee that our license is complete and accurate and that you may wish to inspect the code to make your own determination as to whether the LICENSE and NOTICE files completely describe the correct status of the work.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgwMzQ2MzQ4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/106,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgwMzQ2MzgwMg==,incubator-annotator,803463802,106,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-03-20T21:11:45Z,2021-03-20T21:11:45Z,"For example, the Apache Annotator was originally considered to be a potential home for the older Annotator.js project, but all the contributors have instead determined to implement things from scratch, with inspiration (but not code) from the Annotator.js project.

Therefore, it is my belief that all of our code is properly under the Apache License 2.0, but the foundation has not done a thorough review as part of a process whereby the project would graduate from incubation to full project of the foundation.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgwMzQ2MzgwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/106,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk1MzgxMA==,incubator-annotator,812953810,106,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-04-04T01:29:36Z,2021-04-04T01:29:36Z,"@raphael10-collab I'm going to close this, but please follow up if you have further questions!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk1MzgxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/106,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzY2ODE0NA==,incubator-annotator,817668144,106,NA,raphael10-collab,70313067,,,NA,2021-04-12T09:54:44Z,2021-04-12T09:54:44Z,Thank you for your kind explanation,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzY2ODE0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/109,https://api.github.com/repos/apache/incubator-annotator/issues/109,incubator-annotator,911678402,109,Don’t force scopes to be Range,Treora,4191409,Gerben,gerben@treora.com,CLOSED,2021-06-04T16:42:00Z,2021-06-05T16:37:50Z,"I suggest we reverse this change: https://github.com/apache/incubator-annotator/pull/88

> Define the DOM match functions in terms of Range and place the burden on
> the caller to pass a Range. Remove the scope helper functions.
> 
> This change simplifies the code at the possible cost of developer
> experience, but understanding the tradeoff will require some experience
> and feedback.

In this trade-off, I think we should prioritise experience of our users (i.e. developers using our modules). Especially as we’d first still have to ‘acquire’ our users, we may not get much feedback, but simply lose potential users.

This is a nice guideline: https://www.w3.org/TR/html-design-principles/#priority-of-constituencies

> Priority of Constituencies
> 
> In case of conflict, consider users over authors over implementors over specifiers over theoretical purity. ”

I think we should stop insisting on requiring a Range as scopes and targets, for two reasons:

- Common cases should be easy. E.g. for matching a textQuoteSelector on a whole page, we now need this:
  ```
  const scope = document.createRange();
  scope.selectNodeContents(document);
  const matches = createTextQuoteSelectorMatcher(textQuoteSelector)(scope);
  ```

- While for text selectors a range makes sense, for e.g. CssSelector an element is a more logical unit to represent the target.

I think that the purpose of using Ranges everywhere was to make refinement easier, and to easily swap between different selector types. But I think we can also achieve this by simply accepting either a Range or a Node/Element for every function, and converting one to the other as needed.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/109/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/109,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NTI2NDE5NQ==,incubator-annotator,855264195,109,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-06-05T16:37:47Z,2021-06-05T16:37:47Z,Fixed by #110.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NTI2NDE5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/111,incubator-annotator,929703530,111,range.startContainer is undefined,ziodave,11438,David Riccitelli,david@wordlift.io,CLOSED,2021-06-25T00:00:42Z,2021-07-09T13:22:19Z,"It looks that this change [1] is raising an exception that `range.startContainer is undefined`:

![image](https://user-images.githubusercontent.com/11438/123346537-d908c100-d558-11eb-8fd8-0f0af859799e.png)

Because `range` is not a `Range` but an `Element`.

This is the call stack:

![image](https://user-images.githubusercontent.com/11438/123346584-f2117200-d558-11eb-80df-51d9f05594b4.png)

This is my test code:

```
async function highlightMatcher(matcher: any) {
  const matches = matcher(
    // @ts-ignore
    document.body
  );
  for await (const match of matches) {
    highlightRange(match);
  }
}

highlightMatcher(
  createCssSelectorMatcher({
    value: ""#my-div"",
    type: ""CssSelector"",
  })
);
```

[1] https://github.com/apache/incubator-annotator/commit/7f9461da824297947196a34ac5c3af7e52e2caf7#diff-1a23dff7a2e2636f389f030fcf64a2a1f6b4f8c278a0c2b231a910906b4454a3R67","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODA4NDk2Mg==,incubator-annotator,868084962,111,NA,ziodave,11438,David Riccitelli,david@wordlift.io,NA,2021-06-25T00:04:35Z,2021-06-25T00:04:35Z,If I revert https://github.com/apache/incubator-annotator/commit/7f9461da824297947196a34ac5c3af7e52e2caf7#diff-1a23dff7a2e2636f389f030fcf64a2a1f6b4f8c278a0c2b231a910906b4454a3R67 to return a `Range` it works.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODA4NDk2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODMyODIwOA==,incubator-annotator,868328208,111,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-06-25T08:41:51Z,2021-06-25T08:41:51Z,"Hi David, this indeed happens because we recently changed the API for CssSelectors. My reasoning was that the target of a CssSelector will always be an Element (or multiple), so returning that element may be more natural, and more practical especially for people that only use the CssSelector and not others.

On the other hand, it makes that not every matcher function returns the same type of match. The change went together with making every matcher function accept either a Range or an Element for their `scope` argument (instead of just a Range), so that you can still e.g. refine a CssSelector with a TextQuoteSelector (i.e. the CssSelector’s matching element(s) is the scope within which the quote will be searched). You make me realise that we should then also change `highlightRange` to accept an Element too (and rename it accordingly).

Your thoughts on these API changes are very welcome; we need more user feedback to learn what works for people. Perhaps we could make more breaking changes to elicit such responses. ;)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODMyODIwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODM3NTExMA==,incubator-annotator,868375110,111,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-06-25T09:42:27Z,2021-06-25T09:42:27Z,"I renamed `highlightRange` to `highlightText` (seems a better name in any case!), and made it accept either a Node or Range (internally we just use a function `toRange` to convert it to a range, easy enough). Your example code should work now, if you pull the latest commit and update the import to reflect the renaming.

By the way, you could let TypeScript help you find errors like this by giving the `matcher` argument a type (instead of `any`). In your case it could be `Matcher<Element, Element | Range>`: the `TScope` type parameter only needs to be `Element`, because you always pass it `document.body`, and all Matcher functions in the dom package yield either `Range`s or `Element`s. Or, if you want to make it more generic, I think the type could be `Matcher<Node | Range, Node | Range>`: you can pass any `Node` or `Range` to any of the matchers, and every Element is a Node so if you like symmetry the `TMatch` type parameter could also be made `Node | Range` (as `highlightText` now accepts this too).","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODM3NTExMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODM4MDcwNg==,incubator-annotator,868380706,111,NA,ziodave,11438,David Riccitelli,david@wordlift.io,NA,2021-06-25T09:51:35Z,2021-06-25T09:51:35Z,"> Your thoughts on these API changes are very welcome; we need more user feedback to learn what works for people. Perhaps we could make more breaking changes to elicit such responses. ;)

I am trying to build a prototype using this project, I'll share my feedback as much as possible of course.

Do you also have on- or off-line events, community chat or similar where we can get to know each other and share more knowledge about the project and how to use it?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODM4MDcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/111,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzE4MzkzNQ==,incubator-annotator,877183935,111,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-07-09T13:22:19Z,2021-07-09T13:22:19Z,"> Do you also have on- or off-line events, community chat or similar where we can get to know each other and share more knowledge about the project and how to use it?

Apologies for the lack of response to this. You are more than welcome to join our IRC channel and mailing list (details on our [homepage](https://annotator.apache.org), and join our community call (usually Thursdays 15:00 UTC on [jitsi](https://meet.jit.si/apache-annotator) — but best to always check on IRC if people are available that week). Or just reach out to have a chat anytime.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzE4MzkzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/112,https://api.github.com/repos/apache/incubator-annotator/issues/112,incubator-annotator,929729941,112,TextQuoteSelector selector yielding an infinite number of matches,ziodave,11438,David Riccitelli,david@wordlift.io,OPEN,2021-06-25T00:57:31Z,2021-07-15T15:41:01Z,"Hello,

Can you help me out, I tried to understand what's going on here: I created the following, which indeed works, i.e. the text is highlighted in DOM.

However it enters an infinite loop in `for await (const match of matches)` and I couldn't understand the cause:

```
async function highlightMatcher(matcher) {
  const matches = matcher(document.body);
  for await (const match of matches) {
    highlightRange(match); //    <----- this is called an infinite number of times
  }
}

const createMatcher = makeRefinable((selector) => {
  const innerCreateMatcher = {
    TextQuoteSelector: createTextQuoteSelectorMatcher,
    TextPositionSelector: createTextPositionSelectorMatcher,
    CssSelector: createCssSelectorMatcher,
    RangeSelector: makeCreateRangeSelectorMatcher(createMatcher)
  }[selector.type];
  if (!innerCreateMatcher) {
    throw new Error(`Unsupported selector type: ${selector.type}`);
  }
  return innerCreateMatcher(selector);
});

highlightMatcher(createMatcher({
  value: ""#my-div"",
  type: ""CssSelector"",
  refinedBy: {
    type: ""TextQuoteSelector"",
    exact: ""My Text""
  }
}));
```","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/112,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODQ0MzA3Mg==,incubator-annotator,868443072,112,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-06-25T11:49:03Z,2021-06-25T11:49:03Z,"Can reproduce. The issue is that if the DOM is changed (by `highlightRange`/`highlightText`) while the TextQuoteSelector is being matched, it can end up finding the quote again and again. (note that the `refinedBy` part is not relevant here, the TextQuoteSelector could be passed to `createMatcher` directly)

I would like our text matching to be resistant to DOM changes that do not modify the text content. I am not sure how easy or hard this may be to achieve. If we cannot fix this, it seems unhelpful to return an (async) iterable, and we’d better just return an array with the matches.

For now, best is to avoid changing the DOM while running the matcher, and first collect the matches in an array. For example, we do this in the demo:

```
  const matchAll = createMatcher(selector);
  const ranges = [];

  for await (const range of matchAll(target)) {
    ranges.push(range);
  }

  for (const range of ranges) {
    const removeHighlight = highlightText(range);
    moduleState.cleanupFunctions.push(removeHighlight);
  }
```

I see now that I gave the simpler but broken example in the [getting started](https://annotator.apache.org/docs/getting-started/) page. I will add update and a note!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODQ0MzA3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/112,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzI4OTA0MQ==,incubator-annotator,877289041,112,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-07-09T16:00:18Z,2021-07-09T16:00:18Z,"For now, I just added warnings to the documentation. Longer term, I’d really like to fix this, but it is not trivial to deal with search in a changing DOM. However, while robustness to arbitrary DOM changes may be hard, it gets easier if we limit ourselves to limited changes. In any case, it seems fair to limit our effort to DOM changes that keep the scope’s `textContent` unchanged. Within these changes, we could consider:

1. changes that split text nodes (as done by `highlightText`)
2. changes that merge text nodes
3. changes that wrap text nodes in elements, or unwrap them (also done in highlightText; but I suppose this is not a problem for us anyway, as we simply iterate through text nodes)
4. changes that replace a node with another that has the same text content.

Besides these kinds of changes, we could distinguish between changes on the nodes where the search is currently looking, changes before it, and changes ahead of it. Perhaps changes before and after it need not be a problem either, but we’d probably more often deal with changes at the nodes that are currently searched in (for highlighting and such).

I would probably start with changing the approach of the abstract [text quote matcher implementation](https://github.com/apache/incubator-annotator/blob/main/packages/selector/src/text/match-text-quote.ts). Currently, it manually walks through chunks, but I think it could be simpler by using a TextSeeker to do this. Then, perhaps we can create robustness to split nodes/chunks in there, by e.g. always checking if `this.offsetInChunk < chunk.length` at the start of any function, and walking to the correct chunk if not. Perhaps there will be more problems though.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzI4OTA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/113,incubator-annotator,934773817,113,Can't use after installing via npm (without webpack or similar),DellCliff,14116124,,,CLOSED,2021-07-01T12:07:49Z,2021-12-05T01:52:42Z,"The project can't be used in the browser after installing it via npm because the files reference

import _Object$keys from ""@babel/runtime-corejs3/core-js/object/keys"";
import _sliceInstanceProperty from ""@babel/runtime-corejs3/core-js/instance/slice"";
import _Array$from from ""@babel/runtime-corejs3/core-js/array/from"";
import _Symbol from ""@babel/runtime-corejs3/core-js/symbol"";
import _getIteratorMethod from ""@babel/runtime-corejs3/core-js/get-iterator-method"";
import _getIterator from ""@babel/runtime-corejs3/core-js/get-iterator"";

causing

Uncaught TypeError: Error resolving module specifier “@babel/runtime-corejs3/core-js/object/keys”. Relative module specifiers must start with “./”, “../” or “/”.

Solution:

Publish truly pre-compiled artifacts (e.g. annotator.min.js) on npm that can be used in the browser without webpack.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/113/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzIxODcyNg==,incubator-annotator,877218726,113,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-07-09T14:11:43Z,2021-07-09T14:11:43Z,"Correct, the package is currently not pre-bundled for use in the browser, as the [getting started](https://annotator.apache.org/docs/getting-started/) page says: *“Currently we only support installation through NPM packages. You will need to use a bundler (such as webpack) to use the modules in a web browser.”*

If there is demand for it, and apparently there is, this would be a nice thing to provide, either in the npm packages, or we could distribute bundled/browser-compatible packages separately.

@tilgovi do you have ideas about this? What approaches we could take?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzIxODcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTM0NDczMQ==,incubator-annotator,879344731,113,NA,DellCliff,14116124,,,NA,2021-07-13T19:30:57Z,2021-07-13T19:30:57Z,"It could run in the browser, if imports like these (ES6 imports instead of node imports) were generated:

```
import _Object$keys from ""../@babel/runtime-corejs3/core-js/object/keys"";
import _sliceInstanceProperty from ""../@babel/runtime-corejs3/core-js/instance/slice"";
import _Array$from from ""../@babel/runtime-corejs3/core-js/array/from"";
import _Symbol from ""../@babel/runtime-corejs3/core-js/symbol"";
import _getIteratorMethod from ""../@babel/runtime-corejs3/core-js/get-iterator-method"";
import _getIterator from ""../@babel/runtime-corejs3/core-js/get-iterator"";
```

`../` here would walk up to the `node_modules` folder.

This presumes that those babel imports also generate ES6 style module files.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTM0NDczMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTM0NTI1Mw==,incubator-annotator,879345253,113,NA,DellCliff,14116124,,,NA,2021-07-13T19:31:49Z,2021-07-13T19:31:49Z,Maybe there is also a way to tell TypeScript (or which ever compiler is responsible) to generate ES6 module imports instead of node imports.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTM0NTI1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840oum3,incubator-annotator,883091895,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-07-20T05:58:47Z,2021-07-20T05:58:47Z,"We are generating ES6 imports/exports. We don't actually ship CommonJS at all right now. But npm package imports are not valid in the browser because the browser only allows imports from URLs (relative or absolute).

I would have expected some of the CDNs that support bundling to work, like importing `import dom from 'https://cdn.skypack.dev/@apache-annotator/dom@dev'`. It looks like the `optimal-select` package declares a its `src/index.js` as its `module` entrypoint, though, but doesn't ship the `src` directory in its npm package, so that breaks.

We can try to fix that, and we should absolutely consider more ways to package and ship, so we appreciate hearing what would be helpful and even more appreciate any help updating the packaging!
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840oum3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840ov8y,incubator-annotator,883097394,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-07-20T06:05:35Z,2021-07-20T06:05:35Z,"Looks like that problem has been reported here: https://github.com/autarc/optimal-select/issues/70

We could drop the ""describe"" support for Element -> CSS selector conversion, or try to find another package for that, or roll our own basic one. That package hasn't been updated since 2017.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840ov8y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842aBHL,incubator-annotator,912789963,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-09-03T20:22:36Z,2021-09-03T20:22:36Z,"I propose we switch to [@medv/finder](https://github.com/antonmedv/finder). It is actively maintained (for now), written in TypeScript, seems properly packaged, has no dependencies, and has an MIT license.

We could still consider shipping browser bundles, but at least this change should make it possible to load a browser bundle through a CDN like snowpack.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842aBHL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842aBWk,incubator-annotator,912790948,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-09-03T20:24:37Z,2021-09-03T20:24:37Z,"There's a project that compares some of these CSS selector generation libraries, and it seems to find this one favorable, too: https://github.com/fczbkk/css-selector-generator-benchmark

I checked out the code and it also looks like it support passing a document in explicitly—so it doesn't have any dependencies on globals—and passing in a root element—great for generating refining selectors.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842aBWk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842dyI9,incubator-annotator,913777213,113,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-09-06T17:10:10Z,2021-09-06T17:10:10Z,"Regarding replacing the `optimal-select` dependency, I described my earlier research in commit message c8ef340e34b1:

    I tried a few css selector generators, listed here:
    <https://github.com/fczbkk/css-selector-generator-benchmark>
    
    - css-selector-generator failed when a root (= scope) is passed; see
      issue <https://github.com/fczbkk/css-selector-generator/issues/65>.
    
    - using @mdev/finder instead gave syntax errors due to ‘export’ token.
      (perhaps because we don’t transpile dependencies; worth considering?)
    
    - optimal-select seemed to work; whatever works is good enough for now.
 

","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842dyI9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842d1vg,incubator-annotator,913791968,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-09-06T17:54:49Z,2021-09-06T17:54:49Z,"Ah, I see. It shouldn't be a problem that `@mdef/finder` is ESM-only, since we only support versions of Node that have stable ESM support. However, it looks like the landscape of TypeScript -> ESM -> Mocha is very fresh right now.

It's easy to stop transforming the module syntax by changing our Babel configuration, but Mocha still won't recognize the `.ts` files as ESM. The `@babel/register` package doesn't support ESM, because ESM loader support in Node.js is still experimental. There are packages like `babel-register-esm` and `ts-node` that try to use this, and we would be able to use this with the `loader` option in newer versions of Mocha, but this all seems like a bleeding edge minefield right now.

Alternatively, we might compile our dependencies, or at least that one, which is a change we could make in our Babel config.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842d1vg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/113,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842d2Gr,incubator-annotator,913793451,113,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-09-06T17:59:53Z,2021-09-06T17:59:53Z,"Actually, even compiling the dependencies won't work, because `@mdev/finder` specifies `""type"": ""module""` in its `package.json`, which means Node will try to load it as ESM anyway, even if it is compiled to no longer uses the `export` syntax.

I'll continue to work on this.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r842d2Gr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/114,incubator-annotator,942406594,114,Can't build on windows,DellCliff,14116124,,,CLOSED,2021-07-12T20:10:56Z,2022-11-16T09:52:22Z,"```

> build
> concurrently yarn:build:*

yarn run v1.22.10
yarn run v1.22.10
yarn run v1.22.10
$ tsc --build
$ lerna exec --parallel -- cp ../../DISCLAIMER-WIP ../../LICENSE ../../NOTICE ../../README.md .
$ lerna exec --parallel -- babel -d lib -s -x .ts --env-name production --root-mode upward src
[build:misc] lerna notice cli v3.20.2
[build:js] lerna notice cli v3.20.2
[build:misc] lerna info Executing command in 3 packages: ""cp ../../DISCLAIMER-WIP ../../LICENSE ../../NOTICE ../../README.md .""
[build:js] lerna info Executing command in 3 packages: ""babel -d lib -s -x .ts --env-name production --root-mode upward src""
[build:misc] apache-annotator: 'cp' is not recognized as an internal or external command,
[build:misc] apache-annotator: operable program or batch file.
[build:misc] lerna ERR! cp ../../DISCLAIMER-WIP ../../LICENSE ../../NOTICE ../../README.md . exited 2 in 'apache-annotator'
[build:misc] lerna ERR! cp ../../DISCLAIMER-WIP ../../LICENSE ../../NOTICE ../../README.md . stderr:
[build:misc] 'cp' is not recognized as an internal or external command,
[build:misc] operable program or batch file.
[build:misc]
[build:misc] lerna ERR! cp ../../DISCLAIMER-WIP ../../LICENSE ../../NOTICE ../../README.md . exited 2 in 'apache-annotator'
[build:misc] lerna WARN complete Waiting for 2 child processes to exit. CTRL-C to exit immediately.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
error Command failed with exit code 2.
[build:misc] yarn run build:misc exited with code 2
[build:js] apache-annotator: Successfully compiled 2 files with Babel (2140ms).
[build:types] packages/apache-annotator/src/dom.ts(32,15): error TS7016: Could not find a declaration file for module '@apache-annotator/dom'. 'xxxxx/packages/dom/lib/index.js' implicitly has an 'any' type.
[build:types]   Try `npm i --save-dev @types/apache-annotator__dom` if it exists or add a new declaration (.d.ts) file containing `declare module '@apache-annotator/dom';`
[build:types] packages/dom/test/utils.ts(22,31): error TS6305: Output file 'xxxxx/packages/dom/lib/owner-document.d.ts' has not been built from source file 'xxxxx/packages/dom/src/owner-document.ts'.
[build:types] packages/dom/test/css/describe.test.ts(22,29): error TS6305: Output file 'xxxxx/packages/dom/lib/css.d.ts' has 
not been built from source file 'xxxxx/packages/dom/src/css.ts'.
[build:types] packages/dom/test/css/match.test.ts(23,42): error TS6305: Output file 'xxxxxx/packages/dom/lib/css.d.ts' has not been built from source file 'xxxxxx/packages/dom/src/css.ts'.
[build:types] packages/dom/test/highlight-text/highlight-text.test.ts(22,31): error TS6305: Output file 'xxxxxx/packages/dom/lib/highlight-text.d.ts' has not been built from source file 'xxxxxx/packages/dom/src/highlight-text.ts'.
[build:types] packages/dom/test/range/cartesian.test.ts(22,27): error TS6305: Output file 'xxxxxx/packages/dom/lib/range/cartesian.d.ts' has not been built from source file 'xxxxxx/packages/dom/src/range/cartesian.ts'.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
error Command failed with exit code 2.
[build:types] yarn run build:types exited with code 2
[build:js] @apache-annotator/selector: Successfully compiled 10 files with Babel (4244ms).
[build:js] @apache-annotator/dom: Successfully compiled 16 files with Babel (4440ms).
[build:js] lerna success exec Executed command in 3 packages: ""babel -d lib -s -x .ts --env-name production --root-mode upward src""
Done in 6.79s.
[build:js] yarn run build:js exited with code 0

```","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDc5NzU4OA==,incubator-annotator,880797588,114,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2021-07-15T15:35:16Z,2021-07-15T15:35:16Z,@DellCliff what shell are you using? PowerShell? CMD? Bash for Windows (which typically installs with `git`)?,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDc5NzU4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDg2MDAwMw==,incubator-annotator,880860003,114,NA,DellCliff,14116124,,,NA,2021-07-15T16:53:25Z,2021-07-15T16:53:25Z,@BigBlueHat CMD and PowerShell. Same error in both.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDg2MDAwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OWuzt,incubator-annotator,1314581741,114,NA,PermissionError,27805472,Ray Ma,,NA,2022-11-15T00:17:39Z,2022-11-15T00:17:39Z,"Hi, I have submitted #132 to solve ` 'cp' is not recognized as an internal or external command,`.

However, on my Windows system, I still get the following error after that small fix:

`Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only URLs with a scheme in: file, data are supported by the default ESM loader. On Windows, absolute paths must be valid file:// URLs. Received protocol 'd:'`

This looks like an issue with `babel-register-esm` and how Windows file paths are structured with the drive letter. AFAICT this loader is only used for the Mocha tests - so I'm currently investigating how I can mitigate these build issues further on Windows.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OWuzt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OW_0p,incubator-annotator,1314651433,114,NA,PermissionError,27805472,Ray Ma,,NA,2022-11-15T01:58:08Z,2022-11-15T01:58:08Z,I've submitted a potential fix to the ESM loader at giltayar/babel-register-esm#3.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85OW_0p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/114,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Oe233,incubator-annotator,1316711927,114,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-11-16T09:52:22Z,2022-11-16T09:52:22Z,Thanks for investigating! Once (if) the remaining issue is fixed upstream be welcome to make a PR with the dependency upgrade.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Oe233/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/115,incubator-annotator,947008656,115,Turn AsyncGenerators into Generators,DellCliff,14116124,,,OPEN,2021-07-18T11:08:08Z,2023-10-03T13:05:09Z,"What is the reason behind matchers producing AsyncGenerators. They don't do IO or wait on callbacks as far as I can see. Having an async function which doesn't need to be one has serious disadvantages, like async-infection up the call-chain, race conditions and so on.

A simple modification of `packages/selector/src/text/match-text-position.ts` removes the unnecessary async.

```
export function textPositionSelectorMatcher(
  selector: TextPositionSelector,
): <TChunk extends Chunk<any>>(
  scope: Chunker<TChunk>,
) => AsyncGenerator<ChunkRange<TChunk>, void, void> {
  const { start, end } = selector;

  return async function* matchAll<TChunk extends Chunk<string>>(
    textChunks: Chunker<TChunk>,
  ) {
    const codeUnitSeeker = new TextSeeker(textChunks);
    const codePointSeeker = new CodePointSeeker(codeUnitSeeker);

    codePointSeeker.seekTo(start);
    const startChunk = codeUnitSeeker.currentChunk;
    const startIndex = codeUnitSeeker.offsetInChunk;
    codePointSeeker.seekTo(end);
    const endChunk = codeUnitSeeker.currentChunk;
    const endIndex = codeUnitSeeker.offsetInChunk;

    yield { startChunk, startIndex, endChunk, endIndex };
  };
}
```

```
export function textPositionSelectorMatcher(
  selector: TextPositionSelector,
): <TChunk extends Chunk<any>>(
  scope: Chunker<TChunk>,
) => Generator<ChunkRange<TChunk>, void, void> {
  const { start, end } = selector;

  return function* matchAll<TChunk extends Chunk<string>>(
    textChunks: Chunker<TChunk>,
  ) {
    const codeUnitSeeker = new TextSeeker(textChunks);
    const codePointSeeker = new CodePointSeeker(codeUnitSeeker);

    codePointSeeker.seekTo(start);
    const startChunk = codeUnitSeeker.currentChunk;
    const startIndex = codeUnitSeeker.offsetInChunk;
    codePointSeeker.seekTo(end);
    const endChunk = codeUnitSeeker.currentChunk;
    const endIndex = codeUnitSeeker.offsetInChunk;

    yield { startChunk, startIndex, endChunk, endIndex };
  };
}
```","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840mi9z,incubator-annotator,882519923,115,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2021-07-19T12:49:22Z,2021-07-19T12:49:22Z,"You are completely correct that there is no need for the current functions to be async. The reason they are async is to make it easier to do async stuff in the future, without needing to change the API. For example, fuzzy text search may be computationally expensive, and could be offloaded to a worker thread.

Note that e.g. a `TextPositionSelector` can never produce multiple results, so besides not needing to be async its matcher would not even have be a generator. However, the idea is to have a coherency in the function signatures, and making all matchers return async generators seemed the most flexible option, allowing for easy composition of matchers; that is, to have a single function able to handle various types of Selectors, dispatching them to the appropriate functions, as we do [in the demo](https://github.com/apache/incubator-annotator/blob/a352fff9b9abda66d4627d4644ea5a2e2218d7c4/web/index.js#L101-L113).

We are aware that this choice of generality does impose constraints on the users of the functions, who need to await each result, and whose functions thus have to become async themselves; ‘async infection’ as you call it. We have been thinking about a practical way to provide a synchronous API in addition to an asynchronous API. See the discussion in #81; suggestions are welcome!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840mi9z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840nrTL,incubator-annotator,882816203,115,NA,DellCliff,14116124,,,NA,2021-07-19T19:54:31Z,2021-07-19T19:54:31Z,"This kinda smells like speculative generality. IMO I would make those matchers not adhere to some common interface and let them have their own signature. A user can then pick and choose. Maybe supply helper functions which take a matcher and produce one with the desired signature, or offer both sync and async out of the box or fuzzy/non-fuzzy. One can always make a sync function into async one, but not the other way around.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840nrTL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840osPg,incubator-annotator,883082208,115,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-07-20T05:45:52Z,2021-07-20T05:45:52Z,"> One can always make a sync function into async one, but not the other way around.

Yes, that's the reason for making everything async now. If we compose higher level pipelines with sync interfaces then we won't be ample to incorporate async building blocks, but if all the composition is asynchronous then it admits synchronous or asynchronous building blocks.

I hear the concern about speculative generality, but it's not baseless speculative. I had use cases like streaming corpuses in mind as we designed this.

Initial designs had an interface that allowed selector implementations to implement synchronous or asynchronous functions (or both), but I dropped that to make the surface area smaller.

In any case, feedback is appreciated and I'm open to changing this but I don't want to jump to conclusions. If you find you're really working with the APIs a lot and async is really proving cumbersome, I'd love to see examples of the kinds of code that feels hard to modify to be asynchronous.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840osPg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840pU4s,incubator-annotator,883248684,115,NA,DellCliff,14116124,,,NA,2021-07-20T09:34:26Z,2021-07-20T09:34:26Z,"One of my use cases is a Vue.js component. The only way I get it to work with async is using a cache (called ""computed"" in Vue.js) since Vue.js needs functions to return the actual value (string) and not Promise<string>. The function now has to check the cache on each call, return the computed value if it already exists or return an empty string and trigger the async computation. It adds another layer of complexity on the side of the user of the library, of what could have been 3 lines of sync code.

I understand the pipeline idea, but I'd rather keep the function signatures true and minimal to what they actually need and handle pipelines through composition through helper functions. That way users can opt-in. Right now, there is no way for them to opt-out.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r840pU4s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/115,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r841uE13,incubator-annotator,901270903,115,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2021-08-18T16:51:25Z,2021-08-18T16:51:25Z,"I've been thinking more about this and I think we should try to tackle it for the next release.

One option would be to just make sure that our API allows context to be passed in that makes it possible to process things (synchronously) in chunks, so that higher level, async APIs could limit the amount of work they do before returning to the event loop.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r841uE13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/118,incubator-annotator,1175921621,118,Monthly calls,jaime-rivas,19812916,Jaime Rivas,,OPEN,2022-03-21T20:45:06Z,2022-04-19T02:03:38Z,"Hi everyone,

First of all, thanks for the effort and work to put together this project. We'd like to join the community and hopefully help to move this forward. 

@tilgovi I saw in the mailing list that you were planning to organize regular calls. Please keep us posted when you restart those check-ins again.

@BigBlueHat you mentioned that you ""miss the ""connection"" with app builders"". We've been using the annotatorjs library but would be very happy to integrate apache annotator (web annotation, pdf in pdfjs, and more) and share our experience and feedback going forward.

Thank you all!

 ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BFigp,incubator-annotator,1091971113,118,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-04-07T16:43:30Z,2022-04-07T16:43:30Z,"Hi Jaime, sorry for the silence from our side. I hope I can answer on behalf of the other two too. :)

As for calls, you may have just noticed it on the mailing list: we’ll have a call again tomorrow 14:30 UTC (in ±22 hours from now). Find more timezones here: https://everytimezone.com/s/a9dec85f Hope you can make it! We’ll use our usual spot: https://meet.jit.si/apache-annotator

Apache Annotator is very much designed to be modular and portable to other documents and scenarios. We’d love to help you get it adapted for use on e.g. PDFs!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BFigp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BIyR4,incubator-annotator,1092822136,118,NA,jaime-rivas,19812916,Jaime Rivas,,NA,2022-04-08T12:45:37Z,2022-04-08T12:45:37Z,Thank you @Treora!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BIyR4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BI0kR,incubator-annotator,1092831505,118,NA,xavicn,953812,Xavier Campillo,xavicn@me.com,NA,2022-04-08T12:56:53Z,2022-04-08T12:56:53Z,"Hello @Treora, nice to meet you! I'm Xavi from Synergy, I will also join the meeting along with my teammate @F-Fontinha.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BI0kR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BKVeU,incubator-annotator,1093228436,118,NA,BigBlueHat,43209,BigBlueHat,byoung@bigbluehat.com,NA,2022-04-08T18:50:20Z,2022-04-08T18:50:20Z,"> @BigBlueHat you mentioned that you ""miss the ""connection"" with app builders"". We've been using the annotatorjs library but would be very happy to integrate apache annotator (web annotation, pdf in pdfjs, and more) and share our experience and feedback going forward.

Really sorry for the delay here! I need better ways to track all the activity all the scattered places. 😝 

Now that you've found us, it might be good for us to do some sort of ""guest Q&A"" (maybe) and post it to the site (and/or a blog we can make for such purposes)--or at least hear about things via the mailing list!

Any/all of that would show signs of life/interest that would go along way to revitalizing our little (still fledgling) project--and would be greatly appreciated! ❤️ ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BKVeU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/118,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BrfUC,incubator-annotator,1101919490,118,NA,jaime-rivas,19812916,Jaime Rivas,,NA,2022-04-19T02:03:38Z,2022-04-19T02:03:38Z,We would love to participate in a guest Q&A! Please let us know for the next call and @xavicn @F-Fontinha and I would be very happy to share our use cases and experiences. Thank you!,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85BrfUC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/120,https://api.github.com/repos/apache/incubator-annotator/issues/120,incubator-annotator,1184844642,120,Accumulation of mark elements because text nodes not cleaned up,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,OPEN,2022-03-29T13:07:11Z,2023-10-03T13:05:32Z,"It appears that when adding/removing a highlight, empty text nodes may be added to the DOM. This again may cause subsequent highlighting operations to add additional highlight elements around the empty text nodes. The more highlight there are and the more often they added/removed/re-rendered, the more highlight elements get added to the DOM every time.

Calling `normalize()` on the root element to which the annotators is applied after removing highlights seems to fix this problem. It would be nice maybe though if Annotator was smart enough to clean up empty text nodes itself without having user code to worry about it.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/120/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/120,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Alpfn,incubator-annotator,1083611111,120,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-03-30T20:48:17Z,2022-03-30T20:48:17Z,"In which situation are empty text nodes added? That sounds like a potential bug. Only the start and/or end node should be splitted, and only if it is partially selected by the range. See [these lines](https://github.com/apache/incubator-annotator/blob/0821e0640a811d87f111023ee406469c0dd47deb/packages/dom/src/highlight-text.ts#L75-L90):

```
  // If the start or end node is a text node and only partly in the range, split it.
  if (isTextNode(range.startContainer) && range.startOffset > 0) {
    const endOffset = range.endOffset; // (this may get lost when the splitting the node)
    const createdNode = range.startContainer.splitText(range.startOffset);
    if (range.endContainer === range.startContainer) {
      // If the end was in the same container, it will now be in the newly created node.
      range.setEnd(createdNode, endOffset - range.startOffset);
    }
    range.setStart(createdNode, 0);
  }
  if (
    isTextNode(range.endContainer) &&
    range.endOffset < range.endContainer.length
  ) {
    range.endContainer.splitText(range.endOffset);
  }
```

As discussed in issue #80, the highlighter does not run `.normalize()`, simply to not touch dom nodes when it’s not necessary. However, as written there, I’d be happy to add a few lines that undo the splitting of the start and end nodes, if any splitting happened, so that removing the highlight becomes a “perfect undo”.

But again, empty text nodes should not appear due to our highlighter, so I’d be glad if you have an example case to help debugging this!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Alpfn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/120,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Alq9Q,incubator-annotator,1083617104,120,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2022-03-30T20:55:41Z,2022-03-30T20:55:41Z,"It seems to happen in particular with overlapping/nesting highlights like e.g. `<mark><mark>foo</mark> bar</mark>` - the more overlap/nesting, the more it seems to happen.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Alq9Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/120,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85AlrRo,incubator-annotator,1083618408,120,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2022-03-30T20:57:18Z,2022-03-30T20:57:18Z,"Also consider cases like `<mark data-id=""1"">foo<mark data-id=""2""><mark data-id=""1"">bar</mark></mark><mark data-id=""2"">blah</mark>`","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85AlrRo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/125,https://api.github.com/repos/apache/incubator-annotator/issues/125,incubator-annotator,1275026395,125,Fragment selector for PDFs + PDF.js integration,jaime-rivas,19812916,Jaime Rivas,,OPEN,2022-06-17T13:22:38Z,2023-10-03T13:04:41Z,"Hi everyone,

I recently found out that PDF.js is adding full annotation editing support to the library, which can be tracked here: [PDF.js editing](https://github.com/mozilla/pdf.js/projects/9#card-83265227). I think this could be a great opportunity to push forward the fragment selector for PDFs to try to integrate it with PDF.js.

I also opened an [issue in PDF.js](https://github.com/mozilla/pdf.js/issues/15055) to ask if it would be possible to save annotations outside the PDF in JSON format following the [Web Annotation Data Model](https://www.w3.org/TR/annotation-model/), in addition to the native PDF annotation format inside the PDF.

Hopefully both projects can collaborate on this to move forward Web Annotation Data Model and enable interoperable annotation tools. Fingers crossed! 

Thank you! ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/128,https://api.github.com/repos/apache/incubator-annotator/issues/128,incubator-annotator,1353373277,128,I'm not getting the text position,raphael10-collab,70313067,,,CLOSED,2022-08-28T14:37:54Z,2022-09-15T12:12:38Z,"The text is highlighted but I do not get the text position, needed for further annotating

![image](https://user-images.githubusercontent.com/70313067/187079466-224a78d1-8b7c-4787-9057-5e8934e5262f.png)

![image](https://user-images.githubusercontent.com/70313067/187079636-ba6c4013-b6d6-439f-a4d5-6fcae28459fc.png)


This is the code I'm using:

    // https://annotator.apache.org/docs/getting-started/
    
    import { describeTextQuote } from '@apache-annotator/dom'
    import { createTextQuoteSelectorMatcher, highlightText } from '@apache-annotator/dom';
    
    async function describeCurrentSelection() {
      const userSelection = window.getSelection()?.getRangeAt(0);
    
      console.log(""view-preload.ts-userSelection: "", userSelection)
    
      if (!userSelection || userSelection.isCollapsed) return;
    
      console.log(""view-preloads-describeTextQuote(userSelection): "", describeTextQuote(userSelection))
    
      return describeTextQuote(userSelection);
    }
    
    async function highlightSelectorTarget(textQuoteSelector) {
      const matches = createTextQuoteSelectorMatcher(textQuoteSelector)(document.body);
    
      console.log(""view-preload.ts-highlighSelectorTarger-matches: "", matches)
    
      // Modifying the DOM while searching can mess up; see issue #112.
      // Therefore, we first collect all matches before highlighting them.
      const matchList = [];
      for await (const match of matches) matchList.push(match);
    
      for (const match of matchList) highlightText(match);
    }
    
    
    document.addEventListener('mouseup', async () => {
    
      const selector = await describeCurrentSelection();
      const existingSelectors = JSON.parse(localStorage[document.URL] || '[]');
      localStorage[document.URL] = JSON.stringify([...existingSelectors, selector]);
      await highlightSelectorTarget(selector);
    })
    
    // Highlight the last selection that was stored, if any.
    async function highlightStoredSelectors() {
      if (localStorage[document.URL]) {
        const selectors = JSON.parse(localStorage[document.URL]);
        for (const selector of selectors) {
          console.log(""view-preload.ts-highlightStoredSelectors-selector: "", selector)
          await highlightSelectorTarget(selector);
        }
      }
    }
    highlightStoredSelectors()
    
    
    window.addEventListener('mouseup', (e) => {
      if (e.button === 3) {
        e.preventDefault();
        goBack();
      } else if (e.button === 4) {
        e.preventDefault();
        goForward();
      }
    });","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/128,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85KYyw1,incubator-annotator,1248013365,128,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-09-15T12:07:02Z,2022-09-15T12:07:02Z,"A quick response, as I (nor others, it seems) get around to look further at your issue. From your description it’s not clear to me what you mean. If you mean to create a TextPositionSelector, see the [describeTextPosition](https://annotator.apache.org/docs/api/modules/dom.html#describetextposition). Best to get the position of the selection before highlighting it (if you do both), because the highlighter will modify the dom and thereby the selection.
If you mean position as in coordinates on the page, you can get those from the browser’s APIs, e.g. [`Range.getBoundingClientRect`](https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect). I hope that helps.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85KYyw1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/129,https://api.github.com/repos/apache/incubator-annotator/issues/129,incubator-annotator,1353378604,129,"For some webpages when highlighting a text, the text is splitted",raphael10-collab,70313067,,,OPEN,2022-08-28T14:58:17Z,2023-10-03T13:05:33Z,"For some webpages I'm getting this strange behavior : 


![image](https://user-images.githubusercontent.com/70313067/187080435-2d1b993d-4830-4a25-99a9-46ea59af90fa.png)

for example (above) when trying to highlight the word ""negligible"", I split it in two parts: negl + igible


This is the code I'm using:

    // https://annotator.apache.org/docs/getting-started/
    
    import { describeTextQuote } from '@apache-annotator/dom'
    import { createTextQuoteSelectorMatcher, highlightText } from '@apache-annotator/dom';
    
    async function describeCurrentSelection() {
      const userSelection = window.getSelection()?.getRangeAt(0);
    
      console.log(""view-preload.ts-userSelection: "", userSelection)
    
      if (!userSelection || userSelection.isCollapsed) return;
    
      console.log(""view-preloads-describeTextQuote(userSelection): "", describeTextQuote(userSelection))
    
      return describeTextQuote(userSelection);
    }
    
    async function highlightSelectorTarget(textQuoteSelector) {
      const matches = createTextQuoteSelectorMatcher(textQuoteSelector)(document.body);
    
      console.log(""view-preload.ts-highlighSelectorTarger-matches: "", matches)
    
      // Modifying the DOM while searching can mess up; see issue #112.
      // Therefore, we first collect all matches before highlighting them.
      const matchList = [];
      for await (const match of matches) matchList.push(match);
    
      for (const match of matchList) highlightText(match);
    }
    
    
    document.addEventListener('mouseup', async () => {
    
      const selector = await describeCurrentSelection();
      const existingSelectors = JSON.parse(localStorage[document.URL] || '[]');
      localStorage[document.URL] = JSON.stringify([...existingSelectors, selector]);
      await highlightSelectorTarget(selector);
    })
    
    // Highlight the last selection that was stored, if any.
    async function highlightStoredSelectors() {
      if (localStorage[document.URL]) {
        const selectors = JSON.parse(localStorage[document.URL]);
        for (const selector of selectors) {
          console.log(""view-preload.ts-highlightStoredSelectors-selector: "", selector)
          await highlightSelectorTarget(selector);
        }
      }
    }
    highlightStoredSelectors()
    
    
    window.addEventListener('mouseup', (e) => {
      if (e.button === 3) {
        e.preventDefault();
        goBack();
      } else if (e.button === 4) {
        e.preventDefault();
        goForward();
      }
    });


Why does this happen?  ","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/129,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JSPVz,incubator-annotator,1229518195,129,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2022-08-28T17:49:59Z,2022-08-28T17:49:59Z,Try looking at the HTML code of the page at that location after you have selected the word - what does it look like? Does it make sense?,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JSPVz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/129,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JyAE3,incubator-annotator,1237844279,129,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-09-06T08:43:39Z,2022-09-06T08:43:39Z,"A quick look at that website ([link](https://intelligencequarterly.com/energy/crude-oil-inventories-week-ending-19-august-2022/)) reveals it has a css rule for `<mark>` element:
![image](https://user-images.githubusercontent.com/4191409/188588338-c3e83a9a-0626-40d4-bb63-794431a60385.png)
Bootstrap styles it with padding, hence if you have two mark elements right besides each other (e.g. because you first highlight one part, then another), it will create the result you saw with padding between the elements.

We should fix most occurrences of this issue by normalising consecutive text nodes, to avoid multiple mark elements when we only need one. (I forgot what the state of this is, did we perhaps fix it already but is it not released yet? #80  )

Also it would be nice if the webpage’s CSS does not apply to your annotation tool’s highlights. Perhaps the mark elements can be given a rule `all: revert !important;`?
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JyAE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/129,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JyC67,incubator-annotator,1237855931,129,NA,raphael10-collab,70313067,,,NA,2022-09-06T08:53:00Z,2022-09-06T08:53:00Z,@Treora Interesting. Thank you very much . I do hope it will be fixed soon,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85JyC67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/131,https://api.github.com/repos/apache/incubator-annotator/issues/131,incubator-annotator,1374387731,131,Don’t find/highlight text inside <textarea> elements (or other invalid parents for a <mark>).,Treora,4191409,Gerben,gerben@treora.com,OPEN,2022-09-15T11:37:08Z,2023-10-03T13:05:33Z,"Highlighting (using `<mark>` elements, as we do) text inside a `<textarea>` will make that text disappear. The higlighter should either fail or modify the given range if parts of it are within a textarea.

This could be generalised to any element where a `<mark>` element would not be permitted as a child.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/131,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85KYsqP,incubator-annotator,1247988367,131,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2022-09-15T11:41:58Z,2022-09-15T11:41:58Z,Another case could be mathml sections or SVGs.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85KYsqP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/131,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Rf2-U,incubator-annotator,1367306132,131,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-12-29T13:05:50Z,2022-12-29T13:05:50Z,Yet another issue in this theme: table layout can be messed up by the added `<mark>` elements.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Rf2-U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/133,https://api.github.com/repos/apache/incubator-annotator/issues/133,incubator-annotator,1451729716,133,Data Model validation as API,PermissionError,27805472,Ray Ma,,OPEN,2022-11-16T14:41:39Z,2023-10-03T13:05:10Z,"Currently `yarn validate --url <url>` can be used to validate JSON documents against the Web Annotation Data Model schema. This is achieved through executing `test/data-model.test.ts`. I'm wondering if this should/could be included as API somewhere? An example use case would be where a server may wish to validate uploaded annotation data against the schema. I am aware that this probably doesn't fall into either the `dom` or `selector` package, but since the code is already there, it seems like a waste to not to include it in a more developer-friendly form. Perhaps in a new `util` package? It should be relatively trivial, and I could take that on.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/133,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85PBPBn,incubator-annotator,1325723751,133,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-11-23T22:21:51Z,2022-11-23T22:21:51Z,"Generally “since the code is already there” seems a weak argument to do more work on that code (if it is of little use, it might better be dropped altogether). In this case, there may indeed be some value, and combined with other utilities around the WA data model it could be material for a separate package indeed.

Coincidentally, I was recently thinking to suggest creating such a package (I thought to call it `@apache-annotator/annotation`), to incorporate some code from [this module](https://code.treora.com/gerben/web-annotation-utils) that I had made to satisfy my own needs. I don’t know if I’ll get back to it soon, so I just pushed some my work-in-progress, see #137.

If we end up adding this package, that would be a good home for the validation test too. We should also ensure that the TypeScript type I introduce there corresponds to the validation tests. (ideally we would deduplicate things and generate both the type and validator at once from a specification..)
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85PBPBn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/142,https://api.github.com/repos/apache/incubator-annotator/issues/142,incubator-annotator,1499480213,142,@apache-annotator/dom not updated on NPM,pkspyder007,19896788,Praveen Kumar,pkspyder007@gmail.com,CLOSED,2022-12-16T02:52:16Z,2023-10-03T14:51:58Z,"The current version of @apache-annotator/dom v0.2.0 still uses optimal-select which was fixed in PR #117 
Is this project still active or one using it should seek forking it or alternatives?","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/142,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Qth9N,incubator-annotator,1354112845,142,NA,pkspyder007,19896788,Praveen Kumar,pkspyder007@gmail.com,NA,2022-12-16T02:55:35Z,2022-12-16T02:55:35Z,I'll be happy to work on the project to fix stuff and learn more about it.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Qth9N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/142,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Rf0gv,incubator-annotator,1367296047,142,NA,Treora,4191409,Gerben,gerben@treora.com,NA,2022-12-29T12:47:52Z,2022-12-29T12:47:52Z,"Hi!

The numbered versions on npm indeed lag far behind the main branch. As an incubating Apache project, each official release needs to be verified and upvoted by three team members (’committers’), and also by project mentors. We’ve had too few actively involved people to smoothly publish releases..

You may want to try the `dev` tag on npm instead; it corresponds directly to the main branch. See https://annotator.apache.org/docs/getting-started/

> Is this project still active or one using it should seek forking it or alternatives?

It’s active in the sense that it is not abandoned, but us core developers have hardly gotten around to work on it lately. We’d be happy if others join the effort, or continue with it in other ways if they prefer.

> I'll be happy to work on the project to fix stuff and learn more about it.

Feel free!","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85Rf0gv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/142,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85oBMl-,incubator-annotator,1745144190,142,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2023-10-03T14:51:58Z,2023-10-03T14:51:58Z,"Once a new release is done, it will be published to npmjs. Meanwhile, there is nothing to be done here.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85oBMl-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/144,https://api.github.com/repos/apache/incubator-annotator/issues/144,incubator-annotator,1698793887,144,Betterlogzmax,Tialisa,132419738,,,CLOSED,2023-05-06T22:04:57Z,2023-05-21T00:22:17Z,The future is betterlogzmax....,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/146,https://api.github.com/repos/apache/incubator-annotator/issues/146,incubator-annotator,1920906045,146,Update dependencies (0.3.0),reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,CLOSED,2023-10-01T18:32:39Z,2023-10-03T11:07:01Z,Update dependencies.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/149,https://api.github.com/repos/apache/incubator-annotator/issues/149,incubator-annotator,1920913724,149,Set up automated build using GitHub actions,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,CLOSED,2023-10-01T18:49:06Z,2023-10-01T18:53:24Z,Set up automated build using GitHub actions since it appears that the Travis build is defunct.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/150,https://api.github.com/repos/apache/incubator-annotator/issues/150,incubator-annotator,1923911241,150,Include info on how to build in the README,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,CLOSED,2023-10-03T11:23:32Z,2023-10-03T11:46:17Z,"As a potential contributor, I have no idea what I can do with the repo after checking it out. It would be helpful if the README had a few pointers for getting me started, e.g. what development requirements I need to install and how to build and test.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/152,https://api.github.com/repos/apache/incubator-annotator/issues/152,incubator-annotator,1923969374,152,Provide template files for GitHub issues and PRs,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,CLOSED,2023-10-03T11:57:48Z,2023-10-03T13:04:09Z,Provide template files for GitHub issues and PRs to improve documentation and communication.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/154,https://api.github.com/repos/apache/incubator-annotator/issues/154,incubator-annotator,1924272363,154,Drop yarn in favor of npm,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,CLOSED,2023-10-03T14:26:55Z,2023-12-11T22:31:59Z,"**Describe the refactoring action**
Drop yarn (and possibly lerna) in favor of just using npm.

**Expected benefit**
Simplify the build and maintenance. One tool less that a developer needs to install before they can build the project.
","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/161,incubator-annotator,2036689396,161,Drop the entanglement of dependency fetching as part of the build,mrcolbyrussell,126744954,Colby,mr@colbyrussell.com,CLOSED,2023-12-11T23:09:26Z,2023-12-18T19:52:10Z,"**Describe the refactoring action**

Pull request #157 closed issue #154 to simplify the build process by using npm instead of yarn for fetching dependencies.

The current state of the project is described in the README ""dependencies are automatically installed as part of the build[...] `npm run build` -- builds the project"".

Not requiring a separate step to fetch dependencies isn't a bad affordance for people who want to be able to get annotator built with a single command after cloning, but it is inconvenient wrt other scenarios in the fact that getting all the code is itself not a single step—you fetch part of the code when you clone the repo and then the rest of it (i.e. the dependencies) right before build.  This is not unusual for npm-based projects, but it is inconvenient all the same (and unnecessary).

Rather than requiring folks who are merely building annotator fetch dependencies on top, we can dictate that maintainers be responsible for fetching them (at the same time they're that they're affirming, after a package has been changed upstream, that its newest release releases does in fact comprise part of a platform on which annotator can be built).

**Expected benefit**

Being able to build offline—as long as you've already cloned the repo, then you have what you need to build the project (common expectation up until ~10 years ago, when people started making build scripts hit the network to dynamically fetch other pieces).

Reproducible builds—under the status quo, a developer may successfully build and deploy annotator and then at some later point another developer (or the same person, even) might check out the exact same tag/branch/commit and not be able to successfully complete the build because a dependency has changed upstream.  (package-lock.json tries to solve this, but it doesn't, and it's just one big attempt to work around the fact that `npm install` and similar workflows are designed to keep people from being able to get dependencies at the same time that they're getting the application code.)

See also:

* ""Dependencies belong in version control.""  <https://www.forrestthewoods.com/blog/dependencies-belong-in-version-control/>
* ""I hate npm so much."" <https://social.lol/@bw/111293266036805485>","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/161/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uWy28,incubator-annotator,1851469244,161,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2023-12-12T07:54:43Z,2023-12-12T07:54:43Z,"Just my 10ct on this...

I'd opt for sticking with installing dependencies when required and keeping them out of the repo - using the `package.lock` to avoid undesired changes of dependencies through people attacking upstream.

Artifact repositories like pypy, npmjs or maven central are quite reliable and under normal circumstances, once something has been published there, it does not go away. Use of smaller upstream repositories that may not be as reliable, or direct dependencies on even GitHub repositories as npm allows them should imho be avoided. 

Unnecessary dependencies should also be avoided.

I believe most of annotator's dependencies are pursuant to its build tooling. IMHO it makes no sense to keep that in the repo. But for a fully autark build that would be necessary, and then also for different platforms, etc. It is a rabbit hole.

Also, having dependencies in the repo gives incentive to not upgrading them regularly, leading to dependency rot.

Better update dependencies with every release (as applicable and sensible) and release regularly.

If there are no releases, there is no maintenance. If there is no maintenance, a library should not be used downstream anymore. If there are no users, a reproducible build is moot.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uWy28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZuXf,incubator-annotator,1852237279,161,NA,mrcolbyrussell,126744954,Colby,mr@colbyrussell.com,NA,2023-12-12T15:14:10Z,2023-12-12T15:14:10Z,"> dependencies when required and keeping them out of the repo - using the `package.lock`

What's `package.lock`

> Artifact repositories like pypy, npmjs or maven central

This is not a Python or JVM project, nor is it a broad philosophical discussion.  This is about apache/incubator-annotator.

> having dependencies in the repo gives incentive to not upgrading them regularly, leading to dependency rot

...

> Better update dependencies with every release

That doesn't describe what's happening now.  Dependencies can change from build to build; today, Developer A can clone the repo at 10:01 AM and run the build while Developer B clones the repo at 10:13 AM and runs the build and they get different results because the build script is not a really a build script—it's entangled with dynamically fetching missing pieces of the source tree, which change upstream from time to time.  (Again, this isn't unusual for NPM-based projects, but it being the [norm](https://en.wikipedia.org/wiki/Normalization_of_deviance) is not a substitute for an argument on its own merits.)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZuXf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZvq7,incubator-annotator,1852242619,161,NA,mrcolbyrussell,126744954,Colby,mr@colbyrussell.com,NA,2023-12-12T15:17:42Z,2023-12-12T15:17:42Z,"> update dependencies with every release

(This is, in fact, what I'm asking for—and which isn't currently happening.)","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZvq7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZ0MW,incubator-annotator,1852261142,161,NA,reckart,1410238,Richard Eckart de Castilho,richard.eckart@gmail.com,NA,2023-12-12T15:25:14Z,2023-12-12T15:25:14Z,"By `package.lock` I mean `package-lock.json`.

Correct me if I am wrong: If `package-lock.json` is present and the npm build is using `npm ci` instead of `npm install` to install the dependencies, the packages are installed exactly as prescribed by the `package-lock.json` every time.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZ0MW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZ6Si,incubator-annotator,1852286114,161,NA,mrcolbyrussell,126744954,Colby,mr@colbyrussell.com,NA,2023-12-12T15:38:04Z,2023-12-12T15:38:04Z,"I'm not going to say whether that's correct or incorrect because it's off-topic (a red herring).

PR #157 simplified the build process because Yarn was basically boondoggle.  It was an unnecessary requirement.

Here's a simple exercise; think about the answers to the following questions: what problem does `package-lock.json` solve?  Why does that problem exist?  (As in, ""Where does it come from?"")

<https://www.teamten.com/lawrence/programming/dont-invent-unnecessary-requirements.html>","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85uZ6Si/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85udYoZ,incubator-annotator,1853196825,161,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2023-12-13T03:08:31Z,2023-12-13T03:08:31Z,"The last paragraph of your first comment started with a call for reproducible builds. Whether or not package-lock.json totally provides that is, as you say, maybe off topic, but it certainly aims to make the build *more* reproducible.

So which is it, a requirement you have or an unnecessary requirement?

Do you have a use case? Are you packaging annotator somewhere where you'd like to do an offline build?

Are you engaging in good faith? I'm not yet able to see why you've opened this issue, except perhaps to rail against package managers in an inappropriate venue.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85udYoZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85udeYw,incubator-annotator,1853220400,161,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2023-12-13T03:45:36Z,2023-12-13T03:45:36Z,"> Yarn was basically boondoggle

Ironically, yarn actually has support for checking in all the archives of dependencies and having no install step.","{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85udeYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/incubator-annotator/issues/161,https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85u88G2,incubator-annotator,1861468598,161,NA,tilgovi,20818,Randall Leeds,randall@bleeds.info,NA,2023-12-18T19:52:09Z,2023-12-18T19:52:09Z,Closing because the current behavior is intentional. Please open a separate issue if you have a real packaging need we can assist you with and we'll try our best to help.,"{""url"": ""https://api.github.com/repos/apache/incubator-annotator/issues/comments/IC_kwDOBIM4r85u88G2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
