type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/1,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/1,epsilon,1416221879,1,Add support for varargs,kolovos,3584136,Dimitris Kolovos,,CLOSED,2022-10-20T08:50:08Z,2023-11-28T16:19:56Z,"As reported in [this forum post](https://www.eclipse.org/forums/index.php/t/1111822/), the following code fails as `Files.copy(...)` defines a varargs parameter, and `ReflectionUtil.searchMethodsFor(...)` doesn't support varargs.

```
var a = new Native(""java.io.File"")(""a"").toPath();
var b = new Native(""java.io.File"")(""b"").toPath();
var Files = Native(""java.nio.file.Files"");
Files.copy(a,b);
```

The error message produced in such cases is quite confusing:

```
Invalid number (or types) of arguments for operation 'copy': expected 'java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]' but got 'org.eclipse.epsilon.eol.dom.NameExpression, org.eclipse.epsilon.eol.dom.NameExpression'
	at (/Users/dk135/Dev/Eclipse/eclipse-2020-06/runtime-EclipseXtext/native-test/native-test.eol@4:0-4:16)
	at (/Users/dk135/Dev/Eclipse/eclipse-2020-06/runtime-EclipseXtext/native-test/native-test.eol@4:0-4:16)
	at (/Users/dk135/Dev/Eclipse/eclipse-2020-06/runtime-EclipseXtext/native-test/native-test.eol@1:0-4:16)
	at (/Users/dk135/Dev/Eclipse/eclipse-2020-06/runtime-EclipseXtext/native-test/native-test.eol@1:0-4:16)
```

This is because, if everything else fails, we end up in `DynamicOperation.execute(...)`, while we shouldn't in this case. 

Copying @SMadani as the original developer of `DynamicOperation`.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/1,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5MrZUI,epsilon,1286444296,1,NA,jgsuess,782737,Jörn Guy Süß,,NA,2022-10-21T04:28:44Z,2022-10-21T04:28:44Z,"Please consider reusing [`Statement.execute()`](https://docs.oracle.com/javase/7/docs/api/java/beans/Statement.html#execute()), as its
> implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11)

which is probably the intended behaviour. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5MrZUI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/1,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Mxuhp,epsilon,1288104041,1,NA,SMadani,20537621,Sina Madani,sina.madani@vonage.com,NA,2022-10-23T12:41:00Z,2022-10-23T12:41:00Z,This should now be fixed in the latest interim version. Feel free to reopen this issue if you spot any cases where it doesn't work as expected :),"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Mxuhp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,epsilon,1435693686,2,Cached EMF resources not disposed correctly,kolovos,3584136,Dimitris Kolovos,,OPEN,2022-11-04T07:55:55Z,2023-08-21T07:29:15Z,"After the following ANT build file

```xml
<project default=""main"">
	<target name=""main"">
		<epsilon.emf.loadModel name=""M1"" modelfile=""m1.ecore"" metamodeluri=""http://www.eclipse.org/emf/2002/Ecore"" read=""true"" store=""false""/>
		<epsilon.emf.loadModel name=""M2"" modelfile=""m2.ecore"" metamodeluri=""http://www.eclipse.org/emf/2002/Ecore"" read=""true"" store=""false""/>

		<epsilon.eol>
			M1!EClass.all.first().eSuperTypes.println();
			M2!EClass.all.first().eSuperTypes.println();
			<model ref=""M1""/>
			<model ref=""M2""/>
		</epsilon.eol>

	</target>
</project>
```

is executed against the following models `m1.ecore` and `m2.ecore` that reference each other, the models are not disposed properly. As a result, if we re-execute the same build file in the same JVM, the contents of `m2.ecore` are not loaded from disk the second time.

```xml
<?xml version=""1.0"" encoding=""ASCII""?>
<ecore:EClass xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" xmi:id=""_rnSosFwLEe2eQLwPX_T8WQ"" name=""C11"">
  <eSuperTypes href=""m2.ecore#/""/>
</ecore:EClass>
```

```xml
<?xml version=""1.0"" encoding=""ASCII""?>
<ecore:EClass xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" xmi:id=""_sBzacFwLEe2eQLwPX_T8WQ"" name=""C221"">
  <eSuperTypes href=""m1.ecore#/""/>
</ecore:EClass>
```

A workaround for this is to add the following JavaScript task to the build file to clear the EMF driver's resource cache.

```xml
<script language=""javascript"">
with(new JavaImporter(org.eclipse.epsilon.emc.emf)){
  CachedResourceSet.getCache().clear();
}
</script>
```
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kTt98,epsilon,1682890620,2,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2023-08-17T19:56:27Z,2023-08-17T19:56:27Z,"This also seems to happen from within Eclipse using a RunConfiguration. I am running an ETL transformation and the output Ecore model is not ""unloaded"" resulting in duplicate elements each time I run the transformation. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kTt98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kci7H,epsilon,1685204679,2,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-08-20T06:58:30Z,2023-08-20T06:58:30Z,"Until this gets properly fixed, a workaround would be to manually dispose of the problematic models using the `Model Cache` view.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kci7H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kczT-,epsilon,1685271806,2,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2023-08-20T12:25:46Z,2023-08-20T12:25:46Z,If you point me to some suspects I could take a look. So far I have not been able to identify any static field or 'registry' implementations that might be causing it.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kczT-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/2,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kezpz,epsilon,1685797491,2,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-08-21T07:29:15Z,2023-08-21T07:29:15Z,"The culprit seems to be `org.eclipse.epsilon.emc.emf.CachedResourceSet` which is a global cache for EMF resources. The rationale behind this class is that if you load the same model file twice as an `EmfModel`, the two models will be underpinned by the same resource and therefore their EObjects will be identical.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5kezpz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/3,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/3,epsilon,1435706800,3,Circular references in Flexmi,kolovos,3584136,Dimitris Kolovos,,CLOSED,2022-11-04T08:10:10Z,2023-11-28T16:21:08Z,"The following Flexmi models `m1.flexmi` and `m2.flexmi` 

```xml
<?nsuri http://www.eclipse.org/emf/2002/Ecore?>
<?import m2.flexmi?>
<class name=""C1"" supertypes=""C2""/>
```

```xml
<?nsuri http://www.eclipse.org/emf/2002/Ecore?>
<?import m1.flexmi?>
<class name=""C2"" supertypes=""C1""/>
```

that refer to each other don't resolve references correctly and as a result the following ANT build file

```xml
<project default=""main"">
  <target name=""main"">
    <epsilon.emf.loadModel name=""M1"" modelfile=""m1.flexmi"" metamodeluri=""http://www.eclipse.org/emf/2002/Ecore"" read=""true"" store=""false""/>
    <epsilon.emf.loadModel name=""M2"" modelfile=""m2.flexmi"" metamodeluri=""http://www.eclipse.org/emf/2002/Ecore"" read=""true"" store=""false""/>
		
    <epsilon.eol>
      M2!EClass.all.first().eSuperTypes.name.println();

      <model ref=""M1""/>
      <model ref=""M2""/>
    </epsilon.eol>
  </target>
</project>
```

prints `Sequence{}` instead of `Sequence{C1}`.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/3,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Nwfpf,epsilon,1304558175,3,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-11-05T14:34:45Z,2022-11-05T14:34:45Z,Fixed in https://github.com/eclipse/epsilon/commit/26cde22481b14aefcf6a9336e0144317ed769b50.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Nwfpf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/4,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/4,epsilon,1448005649,4,EplModuleParallelPatterns doesn't produce stack traces on failure,kolovos,3584136,Dimitris Kolovos,,OPEN,2022-11-14T12:52:18Z,2022-12-23T16:39:03Z,"Running [this code](https://www.eclipse.org/epsilon/playground/?a10deb23) with `EplModule` produces a complete stack trace as shown below:

```
Type 'Person1' not found
	at (unknown@4:10-4:17)
	at (unknown@3:0-8:1)
	at (unknown@4:10-4:17)
	at (unknown@3:0-8:1)
```

Running the same code with `EplModuleParallelPatterns` only produces the first line:

```
Type 'Person1' not found
```

Tentatively assigning to @SMadani as the original developer of `EplModuleParallelPatterns`.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/4,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RTo5H,epsilon,1364102727,4,NA,SMadani,20537621,Sina Madani,sina.madani@vonage.com,NA,2022-12-23T16:35:52Z,2022-12-23T16:35:52Z,"I've added a test to reproduce this (see #26).
The stack trace is there, just a bit further down. I can't see an easy way to make this appear higher up without some massively hacky workarounds though.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RTo5H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/5,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/5,epsilon,1448517971,5,PlainXML driver can't access tag information,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2022-11-14T18:09:58Z,2023-11-28T16:18:36Z,"The [recommended way](https://www.eclipse.org/epsilon/doc/articles/plain-xml/#how-do-i-get-child-elements-with-a-specific-tag-name) to get the tag name of an XML element is to use the 'tagName' property, e.g.
```
var authors = b.children.select(a|a.tagName = ""author"");
```
When using java 11+,  this will result in an exception:
```
Unable to make public java.lang.String com.sun.org.apache.xerces.internal.dom.ElementImpl.getTagName() accessible: module java.xml does not ""exports com.sun.org.apache.xerces.internal.dom"" to unnamed module @6f7b7657
```
This happens when the PlainXmlPropertyGetter delegates to the JavaPropertyGetter to resolve the `Element#getTagName` method, which eventually gets to ReflectionUtil#executeMethod which tries to make the getTagName() method accesible (failing do to the actual type of the element being ""internal"").

For this I suggest adding an additional 'if' condition to the PlainXmlPropertyGetter#invoke that catches access to the 'tagName' property and invokes the corresponding method directly on the element. 


","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/7,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/7,epsilon,1453094030,7,Add <?root ...?> processing instruction to Flexmi,kolovos,3584136,Dimitris Kolovos,,OPEN,2022-11-17T10:27:10Z,2022-11-17T10:28:09Z,Similar to `%!TEX root` in LaTeX.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/8,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/8,epsilon,1455841693,8,PlainXML Model - dom.Element method implementations are internal,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2022-11-18T21:34:10Z,2023-11-28T16:18:36Z,"As mentioned in the XML EMC [page](https://www.eclipse.org/epsilon/doc/articles/plain-xml/), all methods of the [org.w3c.dom.Element](https://docs.oracle.com/javase/7/docs/api/org/w3c/dom/Element.html) should be available to elements of the PlainXML model.

However, in latest versions of Java, the `ElementImpl'  class that is under `com.sun.org.apache.xerces.internal.dom` is no longer accesible via reflection. Thus, calls to any of the Element interface methods fails. The first case of this was reported in #5 (access to getTagName()), but further use has reveal the same issues when accessing `appendChild()`.  We imagine any other method calls will result in the same issue.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/8,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PJpJ8,epsilon,1327927932,8,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-11-25T23:22:56Z,2022-11-25T23:22:56Z,I've pushed a [tweaked version](https://github.com/eclipse/epsilon/commit/14d2a3eb9f8424794cd897efb6c00e5d500e895d) of the content in the pull request to maintain compatibility with Java 8. All XML-related tests now pass with Java 17 without the `--add-exports` flag.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PJpJ8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/8,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5POnb2,epsilon,1329231606,8,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2022-11-28T14:46:32Z,2022-11-28T14:46:32Z,Works as expected! Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5POnb2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/13,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/13,epsilon,1465235789,13,Variable leakage in EPL,kolovos,3584136,Dimitris Kolovos,,OPEN,2022-11-26T19:21:33Z,2022-11-26T19:21:47Z,"In [this example](https://www.eclipse.org/epsilon/playground/?911e91b8), referring to `p1` in the `TaskLeader` pattern should throw an exception but it doesn't because presumable the variable leaks from the `Collaborators` pattern.

```
// Find pairs of people that work
// on at least one common task
pattern Collaborators
	p1, p2 : Person {

	match: Task.all.exists(t|t.effort.person.
		includesAll(Sequence{p1, p2}))
}

// Pair tasks with their leaders
pattern TaskLeader 
	t : Task,
	p : Person from: t.effort.person {

	match: t.effort.sortBy(e|-e.percentage).
		first()?.person = p1 
}
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/14,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/14,epsilon,1467259795,14,Embedding non-XML views in Picto,kolovos,3584136,Dimitris Kolovos,,CLOSED,2022-11-29T00:12:34Z,2023-11-28T16:18:05Z,"Trying to embed views which are not valid XML in other Picto views fails at the moment as reported in this [forum post](https://www.eclipse.org/forums/index.php/t/1112039/). A minimal example with a standalone Picto file and two custom HTML views follows.

```xml
<!--example.picto-->
<?nsuri picto?>
<picto standalone=""true"">
	<view path=""Root, View1"" format=""html"" source=""view1.html""/>
	<view path=""Root, View2"" format=""html"" source=""view2.html""/>
</picto>
```

```html
<!--view1.html-->
View 1
```

```html
<!--view2.html-->
<html>
<h1>View 2</h1>
<picto-view path=""Root, View1""/>
</html>
```

Trying to render `Root/View2` produces a `Content is not allowed in prolog.` error message in Picto because `view1.html` is not valid XML.

To fix this we could try to parse the content of the view to embed as XML and if this fails, put it in an `iframe` instead.

It would also be nice to support a custom `iframe` attribute in `<picto-view>` elements to allow the user to force an iframe (e.g. if the other view is XHTML but the user doesn’t want its CSS/JavaScript to mess up the host page’s style/functionality).

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/14,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PTRO4,epsilon,1330451384,14,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2022-11-29T11:01:12Z,2022-11-29T11:01:12Z,"I have found a solution that also solves an extra problem with iframes: detecting the proper height and width of the contents.

Using the [iFrame Resizer](https://davidjbradshaw.github.io/iframe-resizer/) library, it's possible to fix iframe weight at 100% and then determine the height of the contents after rendering ([example](https://davidjbradshaw.com/iframe-resizer/example/)).

This library requires adding a js file to the upper html, and another js file to the inner one (i.e. the one contained in the iframe). Would this last part be much of a hussle?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PTRO4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/16,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/16,epsilon,1468919760,16,Bug: workflow ForTask will execute children one time even if there are no matching files,Arkaedan,29588649,Sam Harris,,CLOSED,2022-11-30T01:29:20Z,2023-11-28T16:17:26Z,"### Bug
The `epsilon.for` Ant task will execute once with the `it` property set to empty string when the fileset has no matching files. 
### Desired behaviour
The `epsilon.for` Ant task should not execute if the fileset has no matching files
### Cause
If the fileset has no matching files, the task's `getFiles()` method returns a string array with one element, an empty string, instead of return an empty array","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/16,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Pb2le,epsilon,1332701534,16,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-11-30T20:28:50Z,2022-11-30T20:28:50Z,Thanks for taking the time to report this issue and submit a PR! Fixed in https://github.com/eclipse/epsilon/commit/68f9570fd9a400e54ba6aa98e6fbe6392be01e40.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Pb2le/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/19,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/19,epsilon,1471380839,19,Add EMG Ant task,kolovos,3584136,Dimitris Kolovos,,CLOSED,2022-12-01T14:06:39Z,2023-11-28T16:19:22Z,"As reported in this [forum post](), there's no way to run EMG from Ant. We need to add an `EmgTask` that extends `EplTask` [here](https://github.com/eclipse/epsilon/tree/main/plugins/org.eclipse.epsilon.workflow/ant/org/eclipse/epsilon/workflow/tasks).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/19,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PlFDF,epsilon,1335120069,19,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-12-02T11:42:45Z,2022-12-02T11:42:45Z,I've pushed a new `epsilon.emg` task and [added some documentation](https://github.com/eclipse/epsilon-website/commit/baa326be8d8aee46bd1943b78e6afff19b67f0d1) to the website.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PlFDF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/20,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/20,epsilon,1472551032,20,Flock default copy - Enums moved to resource,kolovos,3584136,Dimitris Kolovos,,CLOSED,2022-12-02T09:15:45Z,2023-11-28T16:19:11Z,"Migrating an Ecore metamodel using an empty Flock transformation does not copy enumeration literals correctly as reported in [this forum post](https://www.eclipse.org/forums/index.php/t/1112056/). A minimal example that demonstrates this behaviour is attached.
[flock-enum-bug.zip](https://github.com/eclipse/epsilon/files/10139674/flock-enum-bug.zip)

@louismrose Fancy having a look into this?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/20,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5R6r2y,epsilon,1374338482,20,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-01-07T01:38:17Z,2023-01-07T01:38:17Z,Fixed in https://github.com/eclipse/epsilon/commit/bb0cb4e25d228cc1000f415e1e98dcbbc8c150b8,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5R6r2y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/21,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/21,epsilon,1476719862,21,Making Flexmi YAML flavour more natural,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2022-12-05T14:39:37Z,2023-01-13T13:56:52Z,"I tried writing some Flexmi files in YAML format today, using this custom metamodel:

[queryset-metamodel.zip](https://github.com/eclipse/epsilon/files/10155016/queryset-metamodel.zip)

I tried writing this bit:

```yaml
?nsuri: https://eclipse.org/hawk/sqlite/queries
queryset:
  name: NonTimeawareQueries
  queries:
    - name: ""nodeIDsByLabel""
      sql: ""SELECT rowid FROM nodes WHERE label = ?;""
      parameters:
        - name: label
          type: String
    - name: ""nodeCountByLabelStatement""
      sql: ""SELECT COUNT(1) FROM nodes WHERE label = ?;""
      parameters:
        - name: label
          type: String
```

I expected to see one QuerySet with its proper name and two queries, each with their own name and parameters. This is in line with typical use of YAML, which supports three types of nodes: maps (essentially, objects), sequences (lists), and scalar values. I had expected to see maps turned into objects, sequences turned into ELists, and scalar values to be used to set attributes / references.

Unfortunately, I got something rather odd instead:

![image](https://user-images.githubusercontent.com/46504/205663319-9b703dd6-b884-4ddb-bde3-d0cb79bdcbfe.png)

I had one Query with two parameters, for some reason.

I had to change the YAML file to this, which is cumbersome to type with all the `-`s, and it's also not natural YAML:

```yaml
?nsuri: https://eclipse.org/hawk/sqlite/queries
queryset:
  - name: NonTimeawareQueries
  - query:
    - name: ""nodeIDsByLabel""
    - sql: ""SELECT rowid FROM nodes WHERE label = ?;""
    - parameters:
        - name: label
        - type: String
  - query:
    - name: ""nodeCountByLabelStatement""
    - sql: ""SELECT COUNT(1) FROM nodes WHERE label = ?;""
    - parameters:
        - name: label
        - type: String
```

That produced the expected outline:

![image](https://user-images.githubusercontent.com/46504/205664058-5fc4824d-f6f5-44d0-9cd7-c2f5ab4addf1.png)

From a semantic point of view, it doesn't make sense to have `queryset` need to contain a list with its first element being a map whose key is `name` just to set the name of that queryset. Same goes for specifying its child objects.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/21,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PuKA8,epsilon,1337499708,21,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2022-12-05T14:42:21Z,2022-12-05T14:42:21Z,"To clarify, what I mean is that it's much more natural YAML to do:

```yaml
queryset:
  name: foo
```

Than to do this:

```yaml
queryset:
  - name: foo
```

The first option says ""name is a property of the queryset, which is equal to 'foo'"".

The second option says ""queryset contains an element whose name is 'foo'"".","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PuKA8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/21,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PuNEn,epsilon,1337512231,21,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2022-12-05T14:47:57Z,2022-12-05T14:47:57Z,"For comparison, I changed this to Flexmi XML just now:

```xml
<?nsuri https://eclipse.org/hawk/sqlite/queries?>
<queryset name=""NonTimeawareQueries"">
  <query name=""nodeIDsByLabel"" sql=""SELECT rowid FROM nodes WHERE label = ?;"">
    <param name=""label"" type=""String""/>
  </query>
  <query name=""nodeCountByLabelStatement"" sql=""SELECT COUNT(1) FROM nodes WHERE label = ?;"">
    <param name=""label"" type=""String""/>
  </query>
 </queryset>
```

From a semantic point of view, this matches my first attempt with YAML more closely than the second version I had to write to get it to work.

That produces the expected result:

![image](https://user-images.githubusercontent.com/46504/205666319-e68d48c1-02f9-4e65-9442-d8d3e5a1ed71.png)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5PuNEn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/22,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/22,epsilon,1477183140,22,Specify EGL formatters from EGX,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2022-12-05T18:40:14Z,2023-11-28T16:14:42Z,"EGL supports defining ""formatter"" classes that post-process the generated code, ensuring it's more presentable:

https://www.eclipse.org/epsilon/doc/egl/#using-a-formatter

I cannot find any way to specify that a given EGX rule should use a certain formatter. I'll see if I can send a PR for this. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,epsilon,1504892268,25,Metamodel Schizophrenia,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2022-12-20T16:55:25Z,2025-01-03T08:40:25Z,"I am suffering what Ed Willink labelled ""metamodel schizophrenia"" using the ANT tasks (but it also happens with the run configurations). 
In the mwe, I have a small ETL that ""lifts"" a model to a metamodel. Thus the rules are of the form:
```
rule A2Class
    transform n : M!A
    to c : T!EClass { 
    ...
```
I also want to save the trace of the transformation using an ECore model. For this, I have created a metamodel that mimics the rules (this metamodel references the source metamodel):
```
class A2CLass extends Link {
    ref A source;
}
abstract class Link {
    ref EClass target;
}
```
To save the trace I add post processing in the ETL:
```
post {
	// Save trace
	var trace : new Trace!Trace;
	for (t in transTrace.transformations) {
		var link;
		switch(t.getRule().name) {
			case ""A2Class"":
				link = new Trace!A2Class;
			case ""B2Class"":
				link = new Trace!B2Class;
		}
		link.source = t.source;
		link.target = t.targets.first();
		trace.links.add(link);
	}
}
```
When running the transformation I get:
```

 The value of type 'org.eclipse.emf.ecore.impl.EClassImpl@a4d872b (name: A) (instanceClassName: null) (abstract: false, interface: false)' must be of type 'org.eclipse.emf.ecore.impl.EClassImpl@251e298c (name: A) (instanceClassName: null) (abstract: false, interface: false)'
```
which translates that the source metamodel is loaded twice as separate resources (once for the source model and once for the trace model). 
I suspect this has to do with how each EMF model uses its own ResourceSet, but have not taken the time yet to dig deeper into the issue. 
I have attached the MWE, with the ANT script that runs the ETL.
[mwe.zip](https://github.com/eclipse/epsilon/files/10270495/mwe.zip)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5REJhl,epsilon,1360042085,25,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-12-20T19:14:48Z,2022-12-20T19:14:48Z,Loading models using `metamodelFile` is bound to cause such issues. My recommendation would be to register your metamodels using `epsilon.emf.register` once and to load models using `metamodelUri` instead. This also applies to `Trace.ecore`: it should refer to the `Meta1` metamodel through its URI (`http://example.org/meta1`) instead of its filename.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5REJhl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5REb54,epsilon,1360117368,25,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2022-12-20T20:18:34Z,2022-12-20T20:18:34Z,In my actual project the meta1 metamodel is referenced by URI. I tried modifying the build to use registred uris instead with the same result.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5REb54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RE6cc,epsilon,1360242460,25,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-12-20T21:05:33Z,2022-12-20T21:05:33Z,Could you please update all metamodel references to use URIs instead of file paths in the MWE and if the problem persists I'll have a look asap.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RE6cc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFBeX,epsilon,1360271255,25,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2022-12-20T21:17:14Z,2022-12-20T21:17:14Z,"Uploaded the mwe with the changes, also modified the source model to remove the xsd:schemaLocation

[mwe.zip](https://github.com/eclipse/epsilon/files/10272710/mwe.zip)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFBeX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFEET,epsilon,1360281875,25,NA,kolovos,3584136,Dimitris Kolovos,,NA,2022-12-20T21:21:35Z,2022-12-20T21:21:35Z,"In the revised version, `Trace.ecore` still refers to the `Meta1` metamodel by filename:

```
<eStructuralFeatures xsi:type=""ecore:EReference"" name=""source"" eType=""ecore:EClass Meta1.ecore#//A""/>
```

Could you please make these references by URI too?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFEET/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/25,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFbmp,epsilon,1360378281,25,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2022-12-20T22:01:56Z,2022-12-20T22:01:56Z,That seem to have done the trick! ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RFbmp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,epsilon,1517313029,28,Eclipse installer option to clone Epsilon pulls it from git.eclipse.org,alfonsodelavega,6605332,Alfonso de la Vega,,OPEN,2023-01-03T12:17:13Z,2024-06-05T08:35:17Z,"When using the Eclipse installer, an option to locally clone repositories is shown at some point. If Epsilon is selected, the used urls are from ""git.eclipse.org"" instead of the new GitHub location.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RrcUM,epsilon,1370342668,28,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-01-03T23:59:52Z,2023-01-03T23:59:52Z,"You're right, this needs fixing and the generator that produces the example project wizards under `plugins/org.eclipse.epsilon.common.dt.examples/src-gen/org/eclipse/epsilon/common/dt/examples` also needs updating to point to the GitHub repo.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5RrcUM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WtADX,epsilon,1454637271,28,NA,ShivangMishra,35092323,,,NA,2023-03-04T07:33:00Z,2023-03-04T07:33:00Z,@kolovos I want to fix this issue. Any suggestions on where I should start ? ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WtADX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKmie,epsilon,1898604702,28,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-18T14:38:41Z,2024-01-18T14:38:41Z,The Eclipse Oomph setup has been fixed as of #70. The example project wizard would still need to be fixed.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKmie/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/28,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5yPAUo,epsilon,1916536104,28,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-30T10:27:36Z,2024-01-30T10:27:36Z,"> You're right, this needs fixing and the generator that produces the example project wizards under `plugins/org.eclipse.epsilon.common.dt.examples/src-gen/org/eclipse/epsilon/common/dt/examples` also needs updating to point to the GitHub repo.

It's not just the generator - it seems like the way that files are imported into the newly created project would have to change. It looks like the current version navigates through the Gerrit directory listings to fetch the files, and I'm not sure how much we'd have to change things to make it work with Github directory listings.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5yPAUo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,epsilon,1525175493,29,Outdated PlantUML version in target platform / Orbits,alfonsodelavega,6605332,Alfonso de la Vega,,CLOSED,2023-01-09T08:58:27Z,2023-11-28T16:13:26Z,"The PlantUML version available in Eclipse Orbits is outdated (1.2019) and lacks the recent improvements in PlantUML rendering included by the maintainers (e.g. see [this](https://plantuml.com/class-diagram)). The same PlantUML version is maintained in more recent Orbits than the one we have in the target platform (such as the latest [2022-12](https://download.eclipse.org/tools/orbit/downloads/drops/R20221123021534/) one)

Does anyone know what is the proper way to upgrade the Orbit version? I'm currently using the [update site](https://github.com/hallvard/plantuml) PlantUML authors provide for their Eclipse plugins in a local target platform, and so far it works fine.

I think this relates to Epsilon because we're probably the only ones using that feature (seems that @SMadani added it).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5R_9aB,epsilon,1375721089,29,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2023-01-09T14:38:27Z,2023-01-09T14:38:27Z,"You have to become an Orbit committer (since you are already an Epsilon it should be ez), download the repo, make the change and create a PR. Since PlantUML is already in Orbit its much easier :)","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5R_9aB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SE-RN,epsilon,1377035341,29,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-01-10T10:23:57Z,2023-01-10T10:23:57Z,"Shouldn't it go through some type of IP check? I know IPZilla is no more, but it might not be as easy as just pushing the change.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SE-RN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SFNP4,epsilon,1377096696,29,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-01-10T11:13:47Z,2023-01-10T11:13:47Z,"I see that @SMadani submitted an [IP check request](https://dev.eclipse.org/ipzilla/show_bug.cgi?id=24189) for plantuml-1.2022.6, which was approved in late November. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SFNP4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SF9vT,epsilon,1377295315,29,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2023-01-10T13:36:32Z,2023-01-10T13:36:32Z,"I meant the technical part. Yes, the PR has to come with an IP check.

On Tue, 10 Jan 2023, 05:13 Dimitris Kolovos, ***@***.***>
wrote:

> I see that @SMadani <https://github.com/SMadani> submitted an IP check
> request <https://dev.eclipse.org/ipzilla/show_bug.cgi?id=24189> for
> plantuml-1.2022.6, which was approved in late November.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/epsilon/issues/29#issuecomment-1377096696>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAQOU3MSJP7A6J672MW5SW3WRU77PANCNFSM6AAAAAATVFOSVA>
> .
> You are receiving this because you commented.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5SF9vT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/29,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pZwTM,epsilon,1768359116,29,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2023-10-18T12:35:04Z,2023-10-18T12:35:04Z,PlantUML version updated to 1.2023.11.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pZwTM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30,epsilon,1601250663,30,IEclContext object does not keep the reference to the EclModule after execute `getContext();`,jameswpm,10038328,James Miranda,jameswpm@gmail.com,CLOSED,2023-02-27T14:03:54Z,2023-11-28T16:12:51Z,"I'm embedding Epsilon code into my application, and I found this strange behavior.

Following is a simplified version of my code that is meant to basically get the rules and execute them with a custom function:

```java
public void executeRules(File rulesFile, Resource inputModel) {

	// Prepare the ECL Module
	module = new EclModule();

	module.parse(f);

	module.getContext().setOperationFactory(new EclOperationFactory());
	module.getContext().getModelRepository().addModel(inputModel);

	//perform other operations...

	// Find the rule
	Optional<MatchRule> ruleOpt = module.getMatchRules().stream()
  	.filter(r -> ruleName.equals(r.getName())).findFirst();

	MatchRule rule = ruleOpt.get();

	IEclContext context = module.getContext();

	MatchRule rule = ruleOpt.get();
	Lambda compiledRule = compiledRules.get(ruleName);
	Parameter otherParam = (Parameter) rule.getChildren().get(otherParamIndex);
	
	List<Object> other = rule.getAllInstances(otherParam, context, false)

	// THE PROBLEM IS HERE - It throws an exception indicating that the context’s module is null

	//more code to compile the rules with the lambda function

```

The current solution for this problem is after `IEclContext context = module.getContext();`, execute immediately `context.setModule(module);`. It solves the problem but looks like a workaround, not a solid solution.

Below is an example .ecl file that is used as input for this function as `rulesFile`

```ecl
rule ruleName
match s : a!A
with t : b!B
{
    compare
    {
         return s.title = t.eContainer().title and s.name = t.eContainer().extraName;
    }
}

```

This same code (without the mentioned workaround, of course) was working before the update to Epsilon 2.4, so that is something new.

If it’s not a bug and it is indeed expected that the IEclContext object does not keep the reference to the EclModule after `module.getContext();` it should be documented somewhere.

**Eclipse version**: Eclipse Modeling Tools Version: 2022-12 (4.26.0)
**Epsilon**: 2.4.0
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WPJXF,epsilon,1446811077,30,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-02-27T18:09:36Z,2023-02-27T18:09:36Z,Thanks for reporting this. Could you please attach a [minimal example](https://stackoverflow.com/help/minimal-reproducible-example) we can use to reproduce this locally? To avoid starting the MRE from scratch you could download a copy of the [EML example](https://www.eclipse.org/epsilon/playground/?eml) on the Playground (Download -> Java (Maven)) and modify the code of `Example.java`.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WPJXF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WtsjN,epsilon,1454819533,30,NA,jameswpm,10038328,James Miranda,jameswpm@gmail.com,NA,2023-03-04T17:48:21Z,2023-03-04T17:48:21Z,"Indeed, the first example needed to be more straightforward and reproducible. Following your instructions, I adapted the Example code from the playground. I hope this example shows exactly what the problem is and whether it is a problem.

Below is the complete adapted code. I included a custom function to execute the matching rule and print the elements and also changed the ECL execution to get one of the rules of ""program.ecl"" and execute it using the custom function. The code is not applicable in real situations, but it highlights the problem I mentioned in my original message.

```java
package org.eclipse.epsilon.examples;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.emfatic.core.EmfaticResourceFactory;
import org.eclipse.epsilon.common.parse.problem.ParseProblem;
import org.eclipse.epsilon.ecl.EclModule;
import org.eclipse.epsilon.ecl.dom.MatchRule;
import org.eclipse.epsilon.ecl.execute.EclOperationFactory;
import org.eclipse.epsilon.ecl.execute.context.IEclContext;
import org.eclipse.epsilon.ecl.trace.Match;
import org.eclipse.epsilon.emc.emf.EmfModel;
import org.eclipse.epsilon.eml.EmlModule;
import org.eclipse.epsilon.eol.dom.ExecutableBlock;
import org.eclipse.epsilon.eol.dom.Parameter;
import org.eclipse.epsilon.eol.exceptions.EolRuntimeException;
import org.eclipse.epsilon.flexmi.FlexmiResourceFactory;

public class Example {

	// CHANGES = CUSTOM FUNCTION
	static interface Lambda {
		Object exec(Object... args) throws EolRuntimeException;
	}

	static Lambda compileMatchRule(MatchRule m, IEclContext context) {
		Parameter left;
		Parameter right;
		ExecutableBlock<?> block;
		try {

			Field fl = m.getClass().getDeclaredField(""leftParameter"");
			fl.setAccessible(true);
			left = (Parameter) fl.get(m);

			Field fr = m.getClass().getDeclaredField(""rightParameter"");
			fr.setAccessible(true);
			right = (Parameter) fr.get(m);

			Field fb = m.getClass().getDeclaredField(""compareBlock"");
			fb.setAccessible(true);
			block = (ExecutableBlock<?>) fb.get(m);

		} catch (NoSuchFieldException | IllegalAccessException ex) {
			throw new RuntimeException(""Failed to access non-API field"", ex);
		}

		System.out.println(left.getName());
		System.out.println(right.getName());
		System.out.println(block.getBody());

		return args -> m.match(args[0], args[1], context, null, false).isMatching();
	}
	// END CHANGES = CUSTOM FUNCTION

	@SuppressWarnings(""resource"")
	public static void main(String[] args) throws Exception {

		// Register the Flexmi and Emfatic parsers with EMF
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(""flexmi"", new FlexmiResourceFactory());
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(""emf"", new EmfaticResourceFactory());

		// Parse the ECL matching rules
		EclModule eclModule = new EclModule();

		// MINOR CHANGE - The parse was not working properly with the standard file, so
		// I changed it to check the problem in the parse
		try {
			File f;
			f = new File(""program.ecl"");
			eclModule.parse(f);
			if (eclModule.getParseProblems().size() > 0) {
				System.err.println(""Parse errors occured..."");
				for (ParseProblem problem : eclModule.getParseProblems()) {
					System.err.println(problem.toString());
				}
				throw new RuntimeException(""Error in parsing ECL file.  See stderr for details"");
			}
		} catch (Exception ex) {
			throw new RuntimeException(""Error in parsing ECL file"", ex);
		}
		// END MINOR CHANGE

		// Parse the EML merging rules
		EmlModule emlModule = new EmlModule();
		emlModule.parse(new File(""program.eml""));

		// Load the left model from left.flexmi using left.emf as its metamodel
		EmfModel left = new EmfModel();
		left.setName(""Left"");
		left.getAliases().add(""Source"");
		left.setModelFile(""left.flexmi"");
		left.setMetamodelFile(""left.emf"");
		left.setReadOnLoad(true);
		left.setStoredOnDisposal(false);
		left.load();

		// Load the left model from left.flexmi using left.emf as its metamodel
		EmfModel right = new EmfModel();
		right.setName(""Right"");
		right.getAliases().add(""Source"");
		right.setModelFile(""right.flexmi"");
		right.setMetamodelFile(""right.emf"");
		right.setReadOnLoad(true);
		right.setStoredOnDisposal(false);
		right.load();

		// Configure the merged model using target.emf as its metamodel
		EmfModel merged = new EmfModel();
		merged.setName(""Merged"");
		merged.getAliases().add(""Target"");
		// We use XMI instead of Flexmi as the format of the merged model as Flexmi is a
		// read-only format
		merged.setModelFile(""merged.xmi"");
		merged.setMetamodelFile(""target.emf"");
		merged.setReadOnLoad(false);
		merged.setStoredOnDisposal(true);
		merged.load();

		// MAJOR CHANGES - Creating a custom interpreter for the ECL rule named
		// ""PersonWithPerson"" that prints the elements of the rule into the console

		eclModule.getContext().setOperationFactory(new EclOperationFactory());

		// Make the left and right models available to the comparison rules
		eclModule.getContext().getModelRepository().addModels(left, right);

		// Execute the comparison
		// eclModule.execute();

		// Find the rule
		String ruleName = ""PersonWithPerson"";
		Optional<MatchRule> ruleOpt = eclModule.getMatchRules().stream().filter(r -> ruleName.equals(r.getName()))
				.findFirst();

		if (!ruleOpt.isPresent()) {
			throw new Exception(""Rule don't found"");
		}

		// get the context of the module that is used in the custom function
		MatchRule rule = ruleOpt.get();
		IEclContext context = eclModule.getContext();

		// This is the workaround to deal with epsilon 2.4. This line was not necessary
		// in previous versions
		context.setModule(eclModule); // PROBLEMATIC LINE - COMMENT TO THROW THE EXCEPTION

		// compile the rule using the custom function, sending the rule and the context
		Lambda compiledRule = compileMatchRule(rule, context);

		List<Match> matches = new ArrayList<>();

		//get the parameters
		Parameter leftParam = (Parameter) rule.getChildren().get(1);
		Parameter rightParam = (Parameter) rule.getChildren().get(2);

		Object leftMember = rule.getAllInstances(leftParam, context, false);
		Object rightMember = rule.getAllInstances(rightParam, context, false);

		//execute the custom compilation
		if ((boolean) compiledRule.exec(leftMember, rightMember)) {
			matches.add(new Match(leftMember, rightMember, true, null));
		}
		
		//print the matches
		System.out.println(matches.toString());
		//END MAJOR CHANGES

		// Pass the match trace, which records matches found by ECL
		// to the merging program
		emlModule.getContext().setMatchTrace(eclModule.getContext().getMatchTrace().getReduced());

		// Make all models available to the merging rules
		// Make the left and right models available to the comparison rules
		emlModule.getContext().getModelRepository().addModels(left, right, merged);

		// Execute the EML merging rules
		emlModule.execute();

		// Save the target model and dispose of both models
		emlModule.getContext().getModelRepository().dispose();
	}
}
```

The rule ""PersonWithPerson"" elements will be printed into the Eclipse console if you run this code. Commenting the line `context.setModule(eclModule);` causes the Exception: ""Exception in thread ""main"" Cannot invoke ""org.eclipse.epsilon.eol.IEolModule.getContext()"" because ""this.module"" is null""

As I said in my first message, maybe this is expected, and I'm misusing the IEclContext. If it is the case, please let me know.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5WtsjN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/30,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Wus3v,epsilon,1455082991,30,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-03-05T12:51:00Z,2023-03-05T12:51:00Z,Thanks for taking the time to produce a minimal example. This has been fixed in https://github.com/eclipse/epsilon/commit/abe00d7fb190cffd3df1c91e4b3ee2817b859bd8.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Wus3v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31,epsilon,1633826134,31,Add Ant task for Pinset,alfonsodelavega,6605332,Alfonso de la Vega,,CLOSED,2023-03-21T12:35:17Z,2023-11-28T16:12:20Z,There is currently no way to run Pinset programs from Ant.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y04J_,epsilon,1490256511,31,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-03-30T12:55:33Z,2023-03-30T12:55:33Z,"Thanks for doing this. Could you please also add a paragraph about the new task under https://www.eclipse.org/epsilon/doc/workflow/#model-management-tasks?

I've also posted a suggestion regarding the type of `outputFolder` [here](https://github.com/eclipse/epsilon/commit/2d65114e650f3d274eefb5edc962e37e26fd722b#diff-0cad052867b014cbfb525545b72d7d879df66dd6f1e17b2aa4ccffc26c257685R14).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y04J_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y1C9j,epsilon,1490300771,31,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2023-03-30T13:24:42Z,2023-03-30T13:24:42Z,"Documented in https://github.com/eclipse/epsilon-website/commit/7edae779fc718839c5cb65456369788f31ad4fad

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y1C9j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/31,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y5wsb,epsilon,1491536667,31,NA,jgsuess,782737,Jörn Guy Süß,,NA,2023-03-31T08:39:54Z,2023-03-31T08:39:54Z,That is awesome!,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5Y5wsb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/34,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/34,epsilon,1649671779,34,Ambiguous types within a model are not reported,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-03-31T16:26:53Z,2023-04-12T11:17:43Z,"I wrote an EVL script meant to be used within a Sirius diagram, and noticed it wasn't producing the expected errors. I turns out that I had an ambiguous `NamedElement` type reference in the script, which was being resolved to the Edapt `NamedElement` instead of my own `NamedElement` for a toy `flowcharts` metamodel. We should have issued a warning about this, instead of blindly going on with the first option.

We already have some code to detect ambiguous type references, but they only cover the case where different models have a match for the same name. They don't cover the case where a single model has multiple matches for the same name (quite common when running EVL scripts from Sirius, as the resource set has the full Eclipse package registry).

One issue is that the EMC API right now only has `hasType(typeName)`: there's no `checkAmbiguity(typeName)` like what we have for the `ModelRepository` class. We need to extend that API to have its own version of this method for when the type name is ambiguous within a single model. We can provide a default implementation to ensure that existing EMC drivers continue to work without changes.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/34,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ZtfFQ,epsilon,1505096016,34,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-04-12T11:17:43Z,2023-04-12T11:17:43Z,This was fixed with PR #35 .,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ZtfFQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/36,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/36,epsilon,1678832559,36,Marker comments produce excess whitespace,kolovos,3584136,Dimitris Kolovos,,CLOSED,2023-04-21T17:03:13Z,2023-11-28T16:11:58Z,"EGL supports a special [marker comment](https://www.eclipse.org/epsilon/doc/egl/#comments-and-markers) that starts with `[*-` instead of `[*`. Currently, marker comments produce excess whitespace. For example

```
[*-Marker*]
[%=""test""%]
```

produces

```

test
```

while the regular comment version

```
[*Marker*]
[%=""test""%]
```

produces (the expected)

```
test
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/39,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/39,epsilon,1775416208,39,Improve performance in ECL MatchTrace,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-06-26T19:07:36Z,2023-06-30T13:40:57Z,"I am using an ECL script as part of the reference implementation for a [TTC 2023 case](https://github.com/agarciadom/benchmarx/blob/main/examples/containerstominiyaml/implementationArtefacts/epsilon/uk.ac.york.ttc.containers.epsilon.tx/src/uk/ac/york/ttc/containers/transformations/compareMiniyaml.ecl).

I have noticed two things:

* Before I moved away from using `compare` to decide if there was a match (using a `guard`) instead, ECL was storing all matches (whether passing or failing) in its trace. This was significantly slowing it down as it uses the `getMatch` method to find if a match was already computed or not, and for a model with 50 containers I was getting 61k matches in total. This may be intended ECL behaviour, but it's an easy trap to fall into: in the end, I left `compare` as just `true` and used the guard for the actual check.
* While looking at `getMatch`, I notice that it loops over all matches, repeatedly testing if the match is for those two exact objects (`Match#contains` compares object identities directly). It'd be much faster to use two levels of `IdentityHashMap`s for this.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/41,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/41,epsilon,1785851559,41,Add support for ATL-style partial enumeration literals,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-07-03T10:17:08Z,2023-07-07T19:30:38Z,"I have been working on an Epsilon solution to the [TTC 2023 KMEHR to FHIR case](https://github.com/dwagelaar/ttc2023-kmehr2fhir), and while porting their ATL transformation to ETL, I noticed that they had these nice `#enum` literals which did not require fully specifying the model and type (E*L would normally need `Model!Type#enum`).

We had discussed two approaches:

1. Treat it in the same way as type references, where we can give a warning if the partial reference is ambiguous.
1. Make property setters smarter, by having them check these partially-specified enum literals against the type of the field being set.

I thought option 2 would result in fewer risks of ambiguous references, but @kolovos raised the issue wouldn't translate well to multi-valued enum-typed fields. Looks like option 1 would be best for now.

This will need adding some acceptance tests, tweaking the E*L grammar, and changing how those enum literals are evaluated.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/41,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ggDlN,epsilon,1619016013,41,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-07-03T19:01:22Z,2023-07-03T19:01:22Z,"I've got it to *almost* work, except for two HUTN tests where an internal EVL script is oddly parsed incorrectly.

There seems to be some parsing ambiguity between `featureCall`, `pathName` and the new `enumLiteral` rule. I've been trying various ways to tweak the parsing, but I haven't been able to get it to work yet.

I've added an EVL unparser test which reproduces the issue. This minimal EVL script is parsed like this:

![image](https://github.com/eclipse/epsilon/assets/46504/33385b40-1984-426a-a429-974e12436809)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ggDlN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/41,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ggTbV,epsilon,1619080917,41,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-07-03T20:07:05Z,2023-07-03T20:07:05Z,"I got this to work after a *lot* of debugging :-D. Turns out the parser was barreling into the `enumLiteral` rule and couldn't quite backtrack correctly if it hit a `.` instead of a `#`. I have used a bit of custom lookahead in the `primitiveExpression`, and now it is passing all tests:

```
primitiveExpression 
	:	literalSequentialCollection | literalMapCollection | literal
		| ((NAME '!')? packagedType? '#') => enumLiteral
		| featureCall | collectionType |
		pathName | specialType | logicalExpressionInBrackets | newExpression | variableDeclarationExpression
	;
```

I'll submit a PR for it now.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ggTbV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/43,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/43,epsilon,1787635192,43,getTransformationTargets() in TransformationTrace needs optimising,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-07-04T10:19:02Z,2023-11-28T16:11:42Z,"I'm working on an Epsilon solution for the TTC 2023 KMEHR to FHIR case, and I've noticed that our execution times increase very significantly from the second-to-last to the largest model:

![image](https://github.com/eclipse/epsilon/assets/46504/89c21560-0ee8-417d-b9ac-b7851e265eab)

A quick check with VisualVM shows we're spending 139s in the TransformationTrace.getTransformationTargets() method:

![image](https://github.com/eclipse/epsilon/assets/46504/a3fab43f-ceaf-4013-994e-aa8f9e32f156)

Looking at the [method](https://github.com/eclipse/epsilon/blob/83e638b2a6ac37eb2fe8e2b19eae40866f0dc3a6/plugins/org.eclipse.epsilon.etl.engine/src/org/eclipse/epsilon/etl/trace/TransformationTrace.java#L57C34-L57C34), it seems to have a similar issue to ECL's old MatchTrace, where it was using a simple loop over a list rather than a data structure which would scale better as models get larger.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,epsilon,1789907779,45,Unexpected performance hit when switching from EmfModel to InMemoryEmfModel,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2023-07-05T16:33:27Z,2024-10-18T19:12:01Z,"Working on the TTC KMEHR to FHIR case today, I noticed that the benchmark driver in its reference solution, transforms a File into a Resource, rather than a File to a File. This is done so the ""Run"" phase of the measurements does not include the time used in saving the model.

To make results comparable, I decided to make the same change, and have the ETL transformation go from an `EmfModel` to an `InMemoryEmfModel`. When I did that, however, I noticed it significantly slowed down. VisualVM points to the maintenance of the allContents cache:

![image](https://github.com/eclipse/epsilon/assets/46504/0acbe152-d498-4e05-a856-e8f79d9b9b43)

This wasn't an issue with `EmfModel`. It turns out that [at some point](https://github.com/eclipse/epsilon/commit/699896d4c8e89908f7ab0138fda52ca6cd446b99), I added some code to register `CachedContentsAdapter`s automatically in the initialisation of `InMemoryEmfModel`. I wonder why I didn't check whether caching was enabled or not at that time - I can't remember at the moment.

Later on, Sina [changed the code to just use setCachingEnabled(true)](https://github.com/eclipse/epsilon/commit/92d035a1c7271e1af2c9314e6b6119fc190a12a3), which performs the same work but is also consistent with the `cached` flag. This is after a [commit](https://github.com/eclipse/epsilon/commit/5391f6c24731824a2905ef1edded99ed3a185452) where he fixed `EmfModel::setCachingEnabled` to add/remove the `CachedContentsAdapter` itself (as it should have).

Looking at this again, I wonder if we should drop this altogether from `InMemoryEmfModel`, and just let users decide if they want to turn on caching or not by themselves:

```
  // Since 1.6, having CachedContentsAdapter implies cached=true, otherwise it's inconsistent.
  setCachingEnabled(true);
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5o5f7z,epsilon,1759903475,45,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2023-10-12T15:56:03Z,2023-10-12T15:56:03Z,"I think the user should always decide. If not, users will see/perceive the performance/memory hit and be confused if they are not selecting the cached option.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5o5f7z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FSr-r,epsilon,2236268459,45,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-07-18T11:28:18Z,2024-07-18T11:28:18Z,So is the issue that caching is disabled by default for instances of `EmfModel` but enabled by default for instances of `InMemoryEmfModel`?,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FSr-r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FckWl,epsilon,2238858661,45,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-07-19T10:27:54Z,2024-07-19T10:27:54Z,"Actually, it might be better to just drop the `allContents` cache - I don't see how it improves performance in most scenarios, as we would normally be traversing the whole model anyway.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FckWl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FrZC9,epsilon,2242744509,45,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-07-22T11:37:19Z,2024-07-22T11:37:19Z,"> So is the issue that caching is disabled by default for instances of `EmfModel` but enabled by default for instances of `InMemoryEmfModel`?

We may reduce the impact of this default by dropping the `allContents` cache, yes, but it's still an inconsistency anyway. At the very least, we should document this default.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FrZC9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/45,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Fu7VM,epsilon,2243671372,45,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-07-22T19:32:09Z,2024-07-22T19:32:09Z,I think I'd set the default value of `expand` to `true` in `AbstractEmfModel` for consistency.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Fu7VM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/47,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/47,epsilon,1836314610,47,Some Picto HTML views appear Blank in Windows 10 instances,alfonsodelavega,6605332,Alfonso de la Vega,,CLOSED,2023-08-04T08:32:36Z,2023-11-28T16:10:53Z,"I have found an issue (and a potential solution) with Picto in Windows that I want to test further.

To reproduce:

1. In an Eclipse instance with Epsilon installed, import `org.eclipse.epsilon.examples.picto.ecore` , open any `.ecore` file and the Picto window
2. A visualisation should appear, if the `Stats` view is selected in the tree, it might appear blank
3. (same with `3D inheritance`)

The current solution I found: add `-Dorg.eclipse.swt.browser.DefaultType=edge` to the `eclipse.ini` file of your Eclipse instance.

Another solution could be to detect if Windows is the OS in use and then instantiate the Browser in Picto with the `SWT.EDGE` option (similar `SWT.WEBKIT` exists for Os X, and other deprecated options as well). Info: https://github.com/eclipse-platform/eclipse.platform.swt/blob/19c5bc83ae72e7d31767a1b4575511d148975794/bundles/org.eclipse.swt/Eclipse%20SWT/common/org/eclipse/swt/SWT.java#L2572
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/47,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5jWJJ4,epsilon,1666749048,47,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-08-06T07:03:27Z,2023-08-06T07:03:27Z,"Archi seems to also be setting the browser to Edge on Windows by default, but this can be changed through a preference: https://github.com/archimatetool/archi/blob/278259bb117c64f347e120844a017384c6de83ab/com.archimatetool.editor/src/com/archimatetool/editor/ArchiWorkbenchAdvisor.java#L55","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5jWJJ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/51,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/51,epsilon,1891042414,51,"""Rules"" section in profiler empty for ETL scripts",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2023-09-11T18:31:58Z,2024-06-05T08:35:18Z,"I tried using the profiler on an ETL script through the Java API, and found that the rule information was not being populated as expected. I could see the various profile targets in the tree,  but noticed that no `TransformationRule`s were being listed, only their guards and `StatementBlock`s.

Thinking it may be my use of the Java API, I tried running the example Flowchart2HTML transformation via the usual Eclipse launch configurations with profiling on (including the fine-grained profiling), and found it left the Rules tab empty as well.

I have found one possible fix, but I'm not sure the approach I followed is the best one in terms of design. I'll share it via a PR.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53,epsilon,1905416227,53,ETL Special Assignment Operator semantics not respected by imported EOL scripts,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2023-09-20T17:14:27Z,2023-09-21T10:39:13Z,"**Description**

When importing an EOL script into ETL, the Special Assignment Operator semantics are not respected when executing the code in the EOL script.

**Example**
```
// ETL
import ""helper.eol""
rule AB
  transform a:A
  to b:B {
  b.ref = createC(a); 
} 
----

// helper.eol
operation createC(a:A) return C {
  var c = new C;
  c.other ::= a;
  return a;
}
```
**Current Behavior**

The statement `c.other ::= a`, will try to assign `a` to `c.other`, resulting in a cast error.

**Expected Behavior**
The statement `c.other ::= a`, will assign `a`'s equivalent to `c.other`.

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEh3n,epsilon,1729240551,53,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-09-21T09:53:09Z,2023-09-21T09:53:09Z,"Thanks for reporting this Horacio. I've attached a [minimal working example](https://github.com/eclipse/epsilon/files/12683135/issue-53-minimal-example.zip) that demonstrates the issue.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEh3n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEixD,epsilon,1729244227,53,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-09-21T09:55:25Z,2023-09-21T09:55:25Z,"Until this gets fixed, you can use `.equivalent()` instead of `::=` as a workaround, i.e. `c.other = a.equivalent();` in your example.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEixD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/53,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEyvz,epsilon,1729309683,53,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-09-21T10:39:13Z,2023-09-21T10:39:13Z,Fixed in https://github.com/eclipse/epsilon/commit/f5fc8db2d6c907b0875ef8f9e2b2a41a40a1c809.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5nEyvz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/54,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/54,epsilon,1914066403,54,EMF Model Dialog 'Add URI' support multi-select,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2023-09-26T18:26:21Z,2023-09-26T19:10:47Z,"When adding a new EMF model with multiple URIs, it is tedious to have to add one. It would be good if multiple URIs could be selected and added.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/54,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ne1vH,epsilon,1736137671,54,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-09-26T19:10:46Z,2023-09-26T19:10:46Z,Fixed in https://github.com/eclipse/epsilon/commit/abcdc20c5bff3a13684810527a5bfb105ac24e02,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ne1vH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,epsilon,1921504724,55,Unable to install Epsilon,sblommers,927616,,,CLOSED,2023-10-02T08:52:17Z,2025-01-03T08:40:25Z,"I keep getting a repository is not found, seems like GMF tooling is removed?

[2023-10-02 10:51:22] ERROR: org.eclipse.equinox.p2.metadata.repository code=1000 No repository found at http://download.eclipse.org/modeling/gmp/gmf-tooling/updates/releases.
  at org.eclipse.equinox.internal.p2.repository.helpers.AbstractRepositoryManager.fail(AbstractRepositoryManager.java:405)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
  at org.eclipse.oomph.util.ReflectUtil.invokeMethod(ReflectUtil.java:119)
  at org.eclipse.oomph.p2.internal.core.CachingRepositoryManager.fail(CachingRepositoryManager.java:388)
  at org.eclipse.oomph.p2.internal.core.CachingRepositoryManager.loadRepository(CachingRepositoryManager.java:279)
  at org.eclipse.oomph.p2.internal.core.CachingRepositoryManager$Metadata.loadRepository(CachingRepositoryManager.java:520)
  at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:110)
  at org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager.loadRepository(MetadataRepositoryManager.java:105)
  at org.eclipse.oomph.p2.internal.core.ProfileTransactionImpl$RepositoryLoader$Worker.perform(ProfileTransactionImpl.java:1759)
  at org.eclipse.oomph.util.WorkerPool$Worker.run(WorkerPool.java:437)
  at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3tR_,epsilon,1742656639,55,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-10-02T09:06:53Z,2023-10-02T09:06:53Z,"Yes, this seems to be the case. I've added a request to keep the GMF Tooling update site despite terminating the project here: https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/593","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3tR_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3t_Z,epsilon,1742659545,55,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-10-02T09:08:46Z,2023-10-02T09:08:46Z,"In the meantime, you can install Epsilon from its update site if you omit the `Epsilon GMF Integration` feature.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3t_Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3v94,epsilon,1742667640,55,NA,sblommers,927616,,,NA,2023-10-02T09:14:08Z,2023-10-02T09:14:08Z,"Hi there, thanks for your quick response. It's actually the GMF Integration that I need for Eugenia.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n3v94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n30Xb,epsilon,1742685659,55,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-10-02T09:26:44Z,2023-10-02T09:26:44Z,"Until this gets fixed, I've [added a warning](https://github.com/eclipse/epsilon-website/commit/24a6e2b364a6a6abf144be916c53726076848f74) to the download page.

<img width=""803"" alt=""image"" src=""https://github.com/eclipse/epsilon/assets/3584136/8e0e01d0-8f8a-496d-a03c-e01d25ce02f0"">
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5n30Xb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5oJe5C,epsilon,1747316290,55,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-10-04T17:10:34Z,2023-10-04T17:10:34Z,"We've had to remove Eugenia itself from Epsilon, as the GMF Tooling update site is no longer available, which was also breaking our continuous integration builds.

We're waiting to see the response from the termination review issue, with the intent to provide some mechanism to make it possible to install older versions of Epsilon with Eugenia in compatible Eclipse releases (before 2022).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5oJe5C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/55,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5olPnH,epsilon,1754593735,55,NA,kolovos,3584136,Dimitris Kolovos,,NA,2023-10-10T07:39:33Z,2023-10-10T07:39:33Z,The GMF Tooling update site has been temporarily restored until a longer-term solution can be found.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5olPnH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/56,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/56,epsilon,1927267821,56,`ExecutableModuleTask` doesn't fail on parse error,Arkaedan,29588649,Sam Harris,,CLOSED,2023-10-05T02:25:33Z,2023-11-28T16:10:16Z,"https://github.com/eclipse/epsilon/blob/273ae8e27c8afa7c947526d043ea18ad2b9f6845/plugins/org.eclipse.epsilon.workflow/ant/org/eclipse/epsilon/workflow/tasks/ExecutableModuleTask.java#L299C4-L299C4

During parsing, the `ExecutableModuleTask` will log any parse errors but then continue on without failing or throwing an exception. This happens even if `failOnErrors` is set to true.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/60,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/60,epsilon,1947481548,60,Installing the latest interim version on a clean Eclipse 2023-09 fails,kolovos,3584136,Dimitris Kolovos,,CLOSED,2023-10-17T13:47:56Z,2025-01-03T08:40:26Z,"Installing the latest interim version on a clean Eclipse 2023-09 fails with the following error message

```
Cannot complete the install because one or more required items could not be found.
  Software being installed: Picto 2.5.0.202310161253 (org.eclipse.epsilon.picto.feature.feature.group 2.5.0.202310161253)
  Missing requirement: Picto 2.5.0.202310161253 (org.eclipse.epsilon.picto 2.5.0.202310161253) requires 'osgi.bundle; wrapped.net.sourceforge.plantuml.plantuml-epl 1.2023.11' but it could not be found
  Cannot satisfy dependency:
    From: Picto 2.5.0.202310161253 (org.eclipse.epsilon.picto.feature.feature.group 2.5.0.202310161253)
    To: org.eclipse.equinox.p2.iu; org.eclipse.epsilon.picto [2.5.0.202310161253,2.5.0.202310161253]
```

@alfonsodelavega can you reproduce this?

_Originally posted by @kolovos in https://github.com/eclipse/epsilon/issues/59#issuecomment-1766455695_
            ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/60,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pTyOQ,epsilon,1766794128,60,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2023-10-17T16:42:45Z,2023-10-17T16:42:45Z,"Yes, I can reproduce the same issue (both from the interim url and from a local update site)

The issue can be fixed by including the feature that is generated with PlantUML's maven dependency into Picto's feature:

```diff
diff --git a/features/org.eclipse.epsilon.picto.feature/feature.xml b/features/org.eclipse.epsilon.picto.feature/feature.xml
index 3a8c232f7..c3d5431f3 100644
--- a/features/org.eclipse.epsilon.picto.feature/feature.xml
+++ b/features/org.eclipse.epsilon.picto.feature/feature.xml
@@ -22,6 +22,10 @@
          id=""org.eclipse.epsilon.flexmi.dt.feature""
          version=""2.5.0.qualifier""/>
 
+   <includes
+         id=""net.sourceforge.plantuml""
+         version=""0.0.0""/>
+
    <plugin
          id=""org.eclipse.epsilon.picto""
          download-size=""0""
```

However I'm not sure if that is what we want to do with every dependency that we pull from Maven in the future. For the time being, I've reverted the PlantUML bump, so that the installer works again. The installation issue can be tested offline with the local updatesite.

I guess the ideal situation would be for Maven dependencies to be usable as wrapped plugins *and* automatically detected and fetched when installing features. Any thoughts? Maybe @agarciadom or @arcanefoam have faced a similar thing before.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pTyOQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/60,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pZyDr,epsilon,1768366315,60,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2023-10-18T12:39:15Z,2023-10-18T12:39:15Z,"Issue fixed by adding necessary plugins to the feature directly. This is needed at the moment for dependencies pulled directly from Maven (which are automatically wrapped as plugins).

Described also at the [commit message](https://github.com/eclipse/epsilon/commit/84e1663f846ab9e336366ed628a445a8d8fcf401)","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5pZyDr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/61,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/61,epsilon,1965131682,61,Issues writing epsilon to calculator.,Increedible,108118527,Increedible,,CLOSED,2023-10-27T09:30:45Z,2025-01-03T08:40:26Z,"I have been trying to write an up-to-date clone if this repo to my machine on wsl, and I got it to run on simulation. Following the tutorial at https://www.numworks.com/resources/engineering/software/build/ I gave up on wsys2 with too much errors, but now on linux I got it running with `make PLATFORM=simulator epsilon_run`. The issue rn is when I try to write to my calculator like the article says with `python3 build/device/dfu.py -s 0x90010000:leave -D output/release/device/n0110/userland/userland.A.dfu`, it says I'm missing the dfu which is obvious, so I tried to build it with `make userland.A.dfu`, but that gave me the error of:
`make userland.A.dfu
QSTRDAT python/port/genhdr/qstrdefs.generated.h
HOSTCC  kandinsky/fonts/rasterizer
RASTER  kandinsky/fonts/SmallFont.cpp
RASTER  kandinsky/fonts/LargeFont.cpp
HOSTCC  escher/image/inliner
APPSLYT apps/home/apps_layout.h
I18N    apps/i18n.h
CXX     apps/apps_container.o
CXX     apps/apps_container_helper.o
CXX     apps/apps_container_launch_default.o
CXX     apps/apps_container_prompt_none.o
apps/apps_container_prompt_none.cpp: In static member function 'static void AppsContainer::__static_initialization_and_destruction_0(int, int)':
apps/apps_container_prompt_none.cpp:5:15: warning: statement has no effect [-Wunused-value]
    5 | const KDColor AppsContainer::k_promptColors[] = {};
      |               ^~~~~~~~~~~~~
CXX     apps/apps_container_storage.o
CXX     apps/apps_window.o
...
CC      python/src/py/unicode.o
CC      python/src/py/vm.o
CC      python/src/py/vstr.o
CC      python/src/py/warning.o
LD      userland.A.elf
arm-none-eabi-gcc: error: ASSERTIONS=0: No such file or directory
make: *** [build/rules.mk:83: output/release/device/n0110/userland/userland.A.elf] Error 1
` the file is just plainly missing, and I have no idea what to do after googeling away.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/61,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5qU8GS,epsilon,1783873938,61,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-10-28T17:13:22Z,2023-10-28T17:13:22Z,"Sorry, but it seems you have filed this issue to the wrong repository. Were you thinking about this project, perhaps?

https://github.com/numworks/epsilon

Closing as the issue is unrelated to this repository. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5qU8GS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/62,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/62,epsilon,2007838595,62,Add GUI/properties support for customising EMF load/save options,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2023-11-23T09:51:50Z,2023-11-23T09:51:50Z,"We had a question today from a user on how to customise the EMF load and save options for their EmfModel. Our website [says this cannot be done](https://eclipse.dev/epsilon/doc/articles/epsilon-emf/#how-can-i-use-custom-loadsave-options-for-my-emf-model), but we do have methods for it in `EmfModel` since version 2.3.0.

The issue is that this functionality is not exposed from the developer tools, and it cannot be used via typical string properties as we do for other options. This would need to be exposed in some way, but we'd have to find some way to encode the map of options (which may have non-string values) into the StringProperties we normally use.

Once this is corrected, we should also update the Epsilon website, specifically these two articles:

https://eclipse.dev/epsilon/doc/articles/epsilon-emf/
https://eclipse.dev/epsilon/doc/articles/in-memory-emf-model/","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/62/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/63,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/63,epsilon,2010393310,63,Add support for JSON models,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-11-25T00:47:36Z,2023-11-25T09:15:07Z,"I have completed the development of `emc-json`, so it can now both write and read JSON files, and has options to specify HTTP headers when using an `http://` or `https://` URI. It would be good to port over the driver to the project.

The driver depends on a `json-simple` library which is rather old, but it hasn't really needed any fixes all this year as it is very simple. It has a ClearlyDefined score of 80 and it is Apache-licensed, so it should be OK to include. All its other dependencies were already in our target platform.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/65,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/65,epsilon,2022035715,65,Include PictoTests in EpsilonPluggedInTestSuite,kolovos,3584136,Dimitris Kolovos,,CLOSED,2023-12-02T13:11:28Z,2025-01-03T08:40:26Z,"Currently `PictoTests` passes when launched as a plugged-in test but fails when it is included in the `SuiteClasses` of `EpsilonPluggedInTestSuite`, as `SocialNetworkTests.testSocialNetwork()` uses a relative file path to load `ecore/socialnetwork.picto`.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/65/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/66,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/66,epsilon,2030249084,66,"Flexmi models with EUnit results in an ""Premature end of file",micfort,6042490,Michiel,,CLOSED,2023-12-07T09:09:35Z,2025-01-03T08:40:26Z,,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/66,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5t-B5y,epsilon,1844977266,66,NA,micfort,6042490,Michiel,,NA,2023-12-07T09:20:12Z,2023-12-07T09:20:12Z,"sorry accidentally opened this ticket, it should be #67 ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5t-B5y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,epsilon,2030264950,67,"Flexmi models with EUnit results in an ""Premature end of file""",micfort,6042490,Michiel,,CLOSED,2023-12-07T09:18:45Z,2025-01-03T08:40:27Z,"There seems to be a problem in loading models when loading flexmi models in a EUnit task. When I do that I get a `Test test1 {} failed with status ERROR: Premature end of file.` error. When I convert the models to xmi, the problem dissapears. I have made a small example where it happens. I'm using epsilon 2.4.0.

build.xml:
```Ant Build System
<project default=""main"" xmlns:ivy=""antlib:org.apache.ivy.ant"">
	<target name=""main"">
		<!-- test that the model is actually working -->
		<epsilon.emf.loadModel name=""ModelA""
			    			modelFile=""TestModel.flexmi"" 
			    			metamodelFile=""metamodel.emf"" 
			    			read=""true"" store=""false"" />
		<epsilon.eol>
			<model ref=""ModelA""/>
			ModelA!Element.all.first().Message.println();
		</epsilon.eol>
		<epsilon.disposeModel model=""ModelA""/>
		
		<!-- does not work with flexmi files -->
		<epsilon.eunit src=""test.eunit"">
			<modelTasks>
	    		<epsilon.emf.loadModel name=""ModelA""
	    			modelFile=""TestModel.flexmi"" 
	    			metamodelFile=""metamodel.emf"" 
	    			read=""true"" store=""false"" />
	    		<epsilon.emf.loadModel name=""ModelB""
	    			modelFile=""TestModel.flexmi"" 
	    			metamodelFile=""metamodel.emf"" 
	    			read=""true"" store=""false"" />
			</modelTasks>
		</epsilon.eunit>
	</target>
</project>
```

Metamodel.emf:
```java
@namespace(uri=""NS"", prefix="""")
package NS;

class Element {
	attr String Message;
}
```

TestModel.flexmi:
```xml
<?nsuri NS?>
<Element Message=""Some Message""/>
```

test.eunit:
```java
@test
operation test1() {
  assertEqualModels(""ModelA"", ""ModelB"");
}
```
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uI3xi,epsilon,1847819362,67,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-12-08T20:41:14Z,2023-12-08T20:41:14Z,"I have not been able to reproduce this while running from the latest version of Epsilon. Can you confirm if you were running this build.xml from inside Eclipse, and could you try again with the latest interim version of Epsilon?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uI3xi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uK-N7,epsilon,1848370043,67,NA,micfort,6042490,Michiel,,NA,2023-12-09T10:54:41Z,2023-12-09T10:54:41Z,"I have just downloaded Epsilon (from https://eclipse.dev/epsilon/download/) on my personal pc, made a copy of all the files, registered the EPackages and ran ANT. Where ANT is run in the same JRE as the workspace.

Then I get the following output
```

Buildfile: /home/michiel/eclipse/epsilon-2-4/workspace/test/build.xml

main:
 [epsilon.eol] Some Message
Test test1 {} failed with status ERROR: Premature end of file.
Test root {} failed with status ERROR: Premature end of file.
Global result: ERROR

BUILD FAILED
/home/michiel/eclipse/epsilon-2-4/workspace/test/build.xml:15: At least one test case had a failure or an error: Premature end of file.
	at (/home/michiel/eclipse/epsilon-2-4/workspace/test/test.eunit@3:2-3:40)
	at (/home/michiel/eclipse/epsilon-2-4/workspace/test/test.eunit@3:2-3:40)
	at (/home/michiel/eclipse/epsilon-2-4/workspace/test/test.eunit@2:18-4:1)
	at (/home/michiel/eclipse/epsilon-2-4/workspace/test/test.eunit@0:0-4:1)


Total time: 150 milliseconds
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uK-N7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKnf9,epsilon,1898608637,67,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-18T14:40:49Z,2024-01-18T14:40:49Z,"Sorry for the late reply. Which version did you download? Was it the interim version, or the stable one? I could not reproduce your issue with the latest interim version.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKnf9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKvEB,epsilon,1898639617,67,NA,micfort,6042490,Michiel,,NA,2024-01-18T14:57:42Z,2024-01-18T14:57:42Z,"The latest stable one, but for people that come across this issue in the future it is as follows:
- Eclipse: 2021-12 (4.22)
- Epsilon: 2.4.0","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xKvEB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/67,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xgWI8,epsilon,1904304700,67,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-01-22T15:57:20Z,2024-01-22T15:57:20Z,"I have reproduced this issue with 2.4.0, but it appears to have been fixed in 2.5.0.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5xgWI8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68,epsilon,2033300116,68,Loading the same model twice and then disposing all models causes an error,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2023-12-08T20:53:34Z,2023-12-13T09:58:47Z,"While trying to reproduce #67, I noticed that running this simple `build.xml` produced an error message:

```xml
<project default=""main"" xmlns:ivy=""antlib:org.apache.ivy.ant"">
  <target name=""main"">
    <epsilon.emf.loadModel name=""ModelA""
      modelFile=""TestModel.flexmi"" 
      metamodelFile=""metamodel.emf"" 
      read=""true"" store=""false"" />
  <epsilon.emf.loadModel name=""ModelB""
    modelFile=""TestModel.flexmi"" 
    metamodelFile=""metamodel.emf"" 
    read=""true"" store=""false"" />
  <epsilon.disposeModels />
</target>
</project>
```

The error message is as follows:

```
main:
[epsilon.disposeModels] Cannot find meta-class 'Element' in model 'ModelA'
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.AbstractEmfModel.classForName(AbstractEmfModel.java:268)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.AbstractEmfModel.getCacheKeyForType(AbstractEmfModel.java:253)
[epsilon.disposeModels] 	at org.eclipse.epsilon.eol.models.CachedModel.removeFromCache(CachedModel.java:187)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.EmfModel.forceRemoveFromCache(EmfModel.java:318)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.EmfModel$CachedContentsAdapter.handle(EmfModel.java:243)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.EmfModel$CachedContentsAdapter.notifyChanged(EmfModel.java:186)
[epsilon.disposeModels] 	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
[epsilon.disposeModels] 	at org.eclipse.emf.common.notify.impl.NotifyingListImpl.dispatchNotification(NotifyingListImpl.java:261)
[epsilon.disposeModels] 	at org.eclipse.emf.common.notify.impl.NotifyingListImpl.clear(NotifyingListImpl.java:1099)
[epsilon.disposeModels] 	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.doUnload(ResourceImpl.java:1699)
[epsilon.disposeModels] 	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.unload(ResourceImpl.java:1721)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.CachedResourceSet$Cache.returnResource(CachedResourceSet.java:123)
[epsilon.disposeModels] 	at org.eclipse.epsilon.emc.emf.AbstractEmfModel.disposeModel(AbstractEmfModel.java:404)
[epsilon.disposeModels] 	at org.eclipse.epsilon.eol.models.CachedModel.dispose(CachedModel.java:312)
[epsilon.disposeModels] 	at org.eclipse.epsilon.workflow.tasks.DisposeModelsTask.executeImpl(DisposeModelsTask.java:20)
[epsilon.disposeModels] 	at org.eclipse.epsilon.workflow.tasks.EpsilonTask.execute(EpsilonTask.java:42)
[epsilon.disposeModels] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:299)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[epsilon.disposeModels] 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[epsilon.disposeModels] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)
[epsilon.disposeModels] 	at org.apache.tools.ant.Task.perform(Task.java:350)
[epsilon.disposeModels] 	at org.apache.tools.ant.Target.execute(Target.java:449)
[epsilon.disposeModels] 	at org.apache.tools.ant.Target.performTasks(Target.java:470)
[epsilon.disposeModels] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1401)
[epsilon.disposeModels] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1374)
[epsilon.disposeModels] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
[epsilon.disposeModels] 	at org.eclipse.ant.internal.core.ant.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:34)
[epsilon.disposeModels] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1264)
[epsilon.disposeModels] 	at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:712)
[epsilon.disposeModels] 	at org.eclipse.ant.internal.core.ant.InternalAntRunner.run(InternalAntRunner.java:532)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[epsilon.disposeModels] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[epsilon.disposeModels] 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[epsilon.disposeModels] 	at org.eclipse.ant.core.AntRunner.run(AntRunner.java:369)
[epsilon.disposeModels] 	at org.eclipse.ant.internal.launching.launchConfigurations.AntLaunchDelegate.lambda$0(AntLaunchDelegate.java:271)
[epsilon.disposeModels] 	at java.base/java.lang.Thread.run(Thread.java:829)
```

The build still passes, but it really should not be raising this error.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uI74Y,epsilon,1847836184,68,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-12-08T20:59:00Z,2023-12-08T20:59:00Z,"Weirdly enough, this build passes because we simply print out the exception but continue regardless:

https://github.com/eclipse/epsilon/blob/5e0f131407ea7875766a852ebef77e193129226d/plugins/org.eclipse.epsilon.emc.emf/src/org/eclipse/epsilon/emc/emf/EmfModel.java#L250C2-L252C2","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uI74Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uK-FP,epsilon,1848369487,68,NA,micfort,6042490,Michiel,,NA,2023-12-09T10:51:56Z,2023-12-09T10:51:56Z,I solved this problem by registering the EPackages of the metamodel.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5uK-FP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/68,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ue7d8,epsilon,1853601660,68,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2023-12-13T09:56:35Z,2023-12-13T09:56:35Z,"> I solved this problem by registering the EPackages of the metamodel.

That's more of a workaround, but I'm working on a fix :-). We do a bit of setup to cache Type.all, and we should undo that setup while clearing the cache. It's hard to get caching right on the first try!","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5ue7d8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/69,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/69,epsilon,2054187387,69,Issue with EMF supertypes in Picto,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2023-12-22T16:43:36Z,2025-01-03T08:40:27Z,"I have two metamodels MMA and MMB. MMB extends all EClasses in MMA (MMB is a wrapper for MMA).  I have a generic Picto egl->graphviz template that uses dynamic EMF to draw a containment hierarchy tree of models. When loading models that conform to MMA or MMB the tree is not being built.

The issue is that `eObject.eClass.eAllReferences` is retruning emtpy for the root element of each model. However, in MMA this should be 4 and in MMB 5 EReferences. I added the statement `self.eClass.eSuperTypes.size().println(""sts: "")` to the template and it produces unexpected results (Epsilon console):

- Normal mode:
`no parent true
eClass: Gateway
sts: 0
no parent true
eClass: Gateway_fgm
sts: 1
no parent true
eClass: Gateway
sts: 0
no parent true
eClass: Gateway_fgm
sts: 1
no parent true
eClass: Gateway
sts: 0
no parent true
eClass: Gateway_fgm
sts: 1
allRefs: 1`

- Standalone mode:
`no parent true
eClass: Gateway
sts: 0
allRefs: 0
`

My gut feeling is that it is a caching issue and/or the way the java property getter resolves the methods.


I have added a [MWE ](https://github.com/eclipse/epsilon/files/13754388/mwe.zip)
with three projects. Two with the metamodels (ca.mcmaster.workbench.deep.dsl and ca.mcmaster.workbench.fgm.deep) and one with the models and picto files. To reproduce load the metamodels in a ws and the models in a nested ws. 

I also added a junit test that checks the eclass supertypes and eAllReferences sizes that shows that Epsilon is acting up.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/69/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/69,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wIel8,epsilon,1881270652,69,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2024-01-08T15:42:35Z,2024-01-08T15:42:35Z,"Not actually a bug, just an issue with my implemetation","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wIel8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,epsilon,2072670252,70,Please update the setup to use the appropriate GitHub URIs.,merks,208716,Ed Merks,,CLOSED,2024-01-09T16:00:16Z,2024-01-13T12:54:17Z,"The builds are failing which made me notice:

https://ci.eclipse.org/oomph/job/setup-archiver/lastBuild/

I expect these git clone tasks don't work properly either:

![image](https://github.com/eclipse/epsilon/assets/208716/a0927931-4dcb-4a2f-adb8-652f90201649)

They should look more like this:

![image](https://github.com/eclipse/epsilon/assets/208716/4651acbd-032c-41c2-aeee-ff5278c5bcbc)

Generally it's a good idea to change the id of each git clone tasks so that the old/out-dated recorded values in the user.setup are not reused.   Make sure you change all the reference to that ID via induced variable if you do that.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wpJvZ,epsilon,1889835993,70,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-12T19:27:04Z,2024-01-12T19:27:04Z,"I updated the `epsilonDev.setup` file to use Github URLs, and also fixed a few other things (activating the right update site, and setting up the workspaces). Could you confirm it works now from the Oomph CI?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wpJvZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wpluu,epsilon,1889950638,70,NA,merks,208716,Ed Merks,,NA,2024-01-12T21:08:11Z,2024-01-12T21:08:11Z,"The build at the link runs every 15 minutes. It still fails with this image reference 

> FAILED to load https://git.eclipse.org/c/www.eclipse.org/epsilon.git/plain/mkdocs/docs/assets/images/epsilon-eclipse-installer.png

Search for that.  In the editor ctrl-F works too. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wpluu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wraSA,epsilon,1890428032,70,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-13T11:46:09Z,2024-01-13T11:46:09Z,"I cannot find that string anymore in our epsilonDev.setup file. The CI build log says this:

```
Mirroring https://raw.githubusercontent.com/eclipse/epsilon/main/releng/org.eclipse.epsilon.releng/epsilonDev.setup
```

If I load [that URL](https://raw.githubusercontent.com/eclipse/epsilon/main/releng/org.eclipse.epsilon.releng/epsilonDev.setup), our only reference to the `epsilon-eclipse-installer.png` file now has a new URL which points to our website:

```
      <value>https://eclipse.dev/epsilon/assets/images/epsilon-eclipse-installer.png</value>
```

You can check this in our repository:

https://github.com/eclipse/epsilon/blob/c1ef36508c4beead5d0d0d3e17b2818911245b19/releng/org.eclipse.epsilon.releng/epsilonDev.setup#L22

Could there be some kind of caching on the CI side which is causing this issue to persist even after we fixed our file?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wraSA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wra7n,epsilon,1890430695,70,NA,merks,208716,Ed Merks,,NA,2024-01-13T11:57:24Z,2024-01-13T11:57:24Z,"I see that value is here:

https://github.com/eclipse/epsilon/blob/a94d632ec75dbac156abded06a48c88e5230dbe2/releng/org.eclipse.epsilon.releng/epsilonUse.setup#L22","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wra7n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wreH8,epsilon,1890443772,70,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-01-13T12:43:09Z,2024-01-13T12:43:09Z,"Oh, I missed that file. I've just pushed a fix - hopefully the next CI build will complete.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wreH8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/70,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wre8K,epsilon,1890447114,70,NA,merks,208716,Ed Merks,,NA,2024-01-13T12:54:17Z,2024-01-13T12:54:17Z,"Yes, this build is clean and promoted the change:

https://ci.eclipse.org/oomph/job/setup-archiver/74396/

Thanks.  😄 ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5wre8K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/71,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/71,epsilon,2088890330,71,Picto can hang up the Eclipse UI if view takes some time to render,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-01-18T19:05:12Z,2024-01-18T19:24:46Z,"A user reported that Picto would block the Eclipse UI while rendering the view. This is usually not a problem in most cases, as the local neighbourhoods that Picto usually displays shouldn't take long to render, but it can be an issue if the rendering uses an external tool which renders complex images (e.g. by calling the PlantUML libraries, which in turn spawns Graphviz processes).

I was able to reproduce the issue with this EGL script with a Thread.sleep:

```
[%
  // Simulates a slow EGL script
  var thread = new Native('java.lang.Thread');
  thread.currentThread().sleep(20000);
%]

<ol>
[% for (i in 1.to(10)) { %]
<li>line [%=i%]</li>
[% } %]
</ol>
```

We should refactor the code so the view rendering takes place mostly in a background job, and we only dip into the UI thread to show the rendered content. We already something like this for the EGX script which computes the tree, but not for EGL: any call to `view.getContent()` will trigger the execution of the EGL script if it hasn't been run already.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/74,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/74,epsilon,2115664199,74,Introduce EolParametricType,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-02-02T19:53:12Z,2025-01-03T08:40:27Z,"We could introduce an `EolParametricType` subclass of `EolType` (with a collection of `parameterTypes`) and make `EolCollectionType` and `EolMapType` its subclasses. We could also make Tuples typed by modifying the following line of the EOL grammar and by making `EolTupleType` also a subclass of `EolParametricType`.

`: (CollectionTypeName | MapTypeName)^`","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/74/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/74,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5zkn_b,epsilon,1938980827,74,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-02-12T15:58:58Z,2024-02-12T15:58:58Z,Closing until more progress is made with static analysis,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5zkn_b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79,epsilon,2132327710,79,Add export functionality to the Profiler view,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-02-13T13:29:14Z,2024-04-24T02:33:12Z,"It would be good to add Export/Import buttons to the [Profiler view](https://eclipse.dev/epsilon/doc/articles/profiling/#inspecting-profiling-information) that we have in Eclipse. At this point, once a profiling run has completed, there is no way to get the results out in a way that would support further data analysis, or explore the results from a previous run.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57PHNJ,epsilon,2067559241,79,NA,kavyabala23,54107817,Kavyabala,,NA,2024-04-20T05:20:33Z,2024-04-20T05:20:33Z,"Can I work on this?
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57PHNJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57fqex,epsilon,2071898033,79,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-04-23T09:56:22Z,2024-04-23T09:56:22Z,"> Can I work on this?

Sure! Feel free to send a pull request and we will review it. Please keep in mind that contributors to Eclipse projects need to accept the Eclipse Contributor Agreement:

https://github.com/eclipse/epsilon/blob/main/CONTRIBUTING.md#eclipse-contributor-agreement","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57fqex/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/79,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57i-ax,epsilon,2072766129,79,NA,kavyabala23,54107817,Kavyabala,,NA,2024-04-23T15:43:17Z,2024-04-23T15:43:17Z,"ok sure. I am new to open source contribution. Can i get some more resource?
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57i-ax/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/80,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/80,epsilon,2136678343,80,Support for custom icons in Exeed,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2024-02-15T14:30:13Z,2025-01-03T08:40:28Z,"This bug was originally reported in https://bugs.eclipse.org/bugs/show_bug.cgi?id=460540.

A patch was submitted but never merged.

> In order to add arbitrary icons the icon annotation now accepts platform URIs for icon location. Thus, you can reference any icon in the worksapce or installation.
> 
> I have only tested with workspace references. The specficaion would be as follows (in emfatic):
> @exeed(icon=""return 'platform:/resource/my.plugin/some/path/icon.gif';"")
class MyIconClass  {

}
>
> Note that as opposed to the Exeed default icons the image extension has to be inlcuded. 

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/80/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/82,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/82,epsilon,2149997081,82,EmfModel Adapters not removed when model disposed,arcanefoam,2157165,Horacio Hoyos,,CLOSED,2024-02-22T21:47:57Z,2025-01-03T08:40:28Z,"After an InMemoryEmfModel is disposed, the adapter(s) used to keep the cache updated are not removed. As a result, if the Resource used for the InMemoryEmfModel is modified, the model still receives notifications.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/82,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM507dkj,epsilon,1961744675,82,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2024-02-23T17:45:56Z,2024-02-23T17:45:56Z,This seems to have been addressed in the upcoming release,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM507dkj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/83,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/83,epsilon,2188332742,83,"Add alternative LRU-based mode for @cached, with support for parameterised operations",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-03-15T11:46:36Z,2024-03-15T11:48:20Z,"Currently, `@cached` only supports 0-argument context operations, as the cache key only has the context object and the operation name. This is also done to limit the size of the cache: the current `@cache` is just a Java Map with no eviction policy (which guarantees that a `@cached` operation is only ever run once). Without an eviction policy, adding parameters to the cache key could dramatically increase the size of the cache if we are not careful.

It would be good to introduce an alternative configuration where `@cached` is backed by a Guava [Cache](https://github.com/google/guava/wiki/CachesExplained) instead of a Java Map, with a configurable bounded size and with an LRU eviction policy. This new approach could support operations with parameters, but would drop the guarantee that a `@cached` operation is only ever run once (as a less-used entry may be evicted at some point and may need to be recomputed).

To preserve backwards compatibility in Epsilon 2.x, we should keep the old no-eviction cache as the default behaviour. We may want to reconsider this default in a future 3.x release.

This issue would need both changing the EOL code, as well as extending the `.dt` plugins to allow for setting whether we want the old no-eviction cache (which only supports 0-arg operations), or the new LRU cache (which supports all operations).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/84,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/84,epsilon,2229201637,84,Plugged-in test dependency errror in Maven,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-04-06T11:29:42Z,2025-01-03T08:40:28Z,"Running Epsilon's plugged-in tests from Maven using 

```
mvn -f tests/org.eclipse.epsilon.test verify -P plugged
```

produces the following error, which seems to be related to the new JSON driver

```
[ERROR] Cannot resolve project dependencies:
[ERROR]   Software being installed: org.eclipse.epsilon.test 2.5.0.qualifier
[ERROR]   Missing requirement: org.eclipse.epsilon.test 2.5.0.qualifier requires 'osgi.bundle; org.eclipse.epsilon.emc.json.test 0.0.0' but it could not be found
```

I'm using Maven 3.9.5 to match the version we use in the CI build.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/84/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/84,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55qChY,epsilon,2041063512,84,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-04-06T12:03:04Z,2024-04-06T12:03:04Z,My bad; I forgot to run `mvn -T 1C clean install` first,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55qChY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85,epsilon,2229626542,85,Problems detected during plugin validation,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-04-07T08:19:38Z,2025-01-03T08:40:28Z,"Trying to run a nested Eclipse instance with the latest version of our target platform produces several plugin validation issues (see below).

![image](https://github.com/eclipse/epsilon/assets/3584136/f9017c58-9b45-401a-951a-9c72c6c4a738)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55u6gq,epsilon,2042341418,85,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-04-08T09:59:02Z,2024-04-08T09:59:02Z,"I'm not getting any such errors, though. This is from c91e7e4e6d865f660ab2994c69085e3080fb07b2:

![image](https://github.com/eclipse/epsilon/assets/46504/c5d22338-4af9-4b87-8828-c2bee5521e22)

See my ""Main"" tab:

![image](https://github.com/eclipse/epsilon/assets/46504/693089d7-09a9-4608-a58a-664d62a0251b)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55u6gq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55u8aY,epsilon,2042349208,85,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-04-08T10:03:10Z,2024-04-08T10:03:10Z,Just to be sure - can you double check you are using Java 17? I think recent versions of Eclipse require it.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55u8aY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/85,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55vCUg,epsilon,2042373408,85,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-04-08T10:15:52Z,2024-04-08T10:15:52Z,Apologies - this was due to some non-Epsilon projects I had forgotten to close in my workspace.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM55vCUg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/86,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/86,epsilon,2238524200,86,Empty view trees trigger exceptions in Picto,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-04-11T20:19:36Z,2024-04-12T05:50:09Z,"To reproduce this issue:
- Check out the `org.eclipse.epsilon.examples.picto.socialnetwork` example
- Comment out the `Network2Graphviz` rule in `socialnetwork.egx`
- Open `socialnetwork.flexmi`
- Select the `Social Network` tree item in the Picto view
- The following exception is produced

![image](https://github.com/eclipse/epsilon/assets/3584136/8bcf367e-2458-467e-b38b-820fe56cae89)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/86/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/87,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/87,epsilon,2238532515,87,Exception in Picto when closing editor,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-04-11T20:23:31Z,2024-04-12T05:50:16Z,"To reproduce this issue:
- Check out the `org.eclipse.epsilon.examples.picto.socialnetwork` example
- Copy the `socialnetwork.flexmi` model into a `socialnetwork2.flexmi`
- Open `socialnetwork.flexmi` followed by `socialnetwork2.flexmi`
- Select the `Alice` view in Picto
- Close `socialnetwork2.flexmi`
- The following exception appears

![image](https://github.com/eclipse/epsilon/assets/3584136/da26d437-59b2-46d1-92ca-ebd892cb4e93)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/88,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/88,epsilon,2241610479,88,EGL template execution clears extended properties in EGX,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-04-13T15:18:46Z,2024-04-13T15:26:20Z,"Changing the EGX program of https://eclipse.dev/epsilon/playground/?egx as follows

```
pre {
    for (p in Person.all) {
        p.~index = loopCount;
        p.~index.println();
    }
}

rule Person2TaskList
    transform p : Person {

    template: ""template.egl""
    target : ""gen/"" + p.~index.println() + "".html""
}

post {
    for (p in Person.all) {
        p.~index.println();
    }
}
```

Should print

```
1
2
1
2
1
2
```

however it prints 

```
1
2
1



```

This is because after `template.egl` is executed for the first time, it clears the extended properties passed to it from its parent EGX module.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/88/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/89,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/89,epsilon,2254562501,89,[Excel] Numeric cell value takes precedence over configured column datatype,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-04-20T13:54:57Z,2024-04-23T15:17:59Z,"Kostas and I were today puzzling over some odd behaviour while using the Excel driver. We noticed that a column with numeric IDs (e.g. `123456`) was being parsed by the driver as having floating-point numbers, even though we had indicated in the `config.xml` that its datatype was `string`. We had to instead use `integer` as its `datatype`, so we'd get all digits properly and we could do appropriate ID matching.

Looking at the code in `ExcelRow`, it seems it checks the type detected by POI first, and then it checks the declared datatype:

https://github.com/eclipse/epsilon/blob/428c241941979819d7fe3d133d387cd306fe2e4e/plugins/org.eclipse.epsilon.emc.spreadsheets.excel/src/org/eclipse/epsilon/emc/spreadsheets/excel/ExcelRow.java#L38-L58

This means that even if someone says that a column should be treated as text, we'll still treat it as a numeric if POI considers it to be a numeric value. Is this the expected behaviour? I think it may confuse users if we do not honour their declared preference. On the other hand, I'm aware that by flipping the order of the checks (first declared datatype then POI type) we may be breaking some scripts, as the default datatype is actually `string`.

Any thoughts?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/89,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57PwNh,epsilon,2067727201,89,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-04-20T16:49:32Z,2024-04-20T16:49:32Z,I agree - the declared type should trump the auto-detected one.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57PwNh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/89,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57il8U,epsilon,2072665876,89,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-04-23T15:17:58Z,2024-04-23T15:17:58Z,"I've pushed a fix for this. Initially I tried changing the logic to always use the declared type, but that did not handle many-valued columns well, so instead I've made it so cells with NUMERIC values take into account properly the situation where the column is declared as having a string type.

For the sake of completeness, I also handle the case where the cell has a NUMERIC value but the declared datatype is `boolean`: in this case, zero values are treated as `false`, and non-zero values are treated as `true`.

I had to change the expected values for two tests here, based on the updated behaviour. I also added a few tests which all try to load the same minimal spreadsheet, but with a different declared datatype.

I'll update the documentation now.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM57il8U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/90,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/90,epsilon,2255532382,90,EGL: Outdented TemplateOperation causes StringIndexOutOfBoundsException,Arkaedan,29588649,Sam Harris,,CLOSED,2024-04-22T04:08:02Z,2024-04-23T10:24:21Z,"Outdented TemplateOperation causes StringIndexOutOfBoundsException when used in a file that has other outdented sections.

Example:
```
[%for (f in Sequence{1}) {-%]
	[%=f%]
[%}%]
[%=t()%]
[%
@template
operation t(){-%]
	[%=1%]
[%}%]
```
Which causes this error:
```
begin 4, end 8, length 4
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:6)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:2-4:18)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:0-14:1)

	Cause: begin 4, end 8, length 4
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:6)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:2-4:18)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:0-14:1)

	at org.eclipse.epsilon.egl.internal.EglModule.execute(EglModule.java:181)
	at org.eclipse.epsilon.egl.EglTemplate.process(EglTemplate.java:94)
	at org.eclipse.epsilon.egl.test.acceptance.AcceptanceTestUtil.run(AcceptanceTestUtil.java:77)
	at org.eclipse.epsilon.egl.test.acceptance.AcceptanceTestUtil.run(AcceptanceTestUtil.java:64)
	at org.eclipse.epsilon.egl.test.acceptance.AcceptanceTestUtil.run(AcceptanceTestUtil.java:50)
	at org.eclipse.epsilon.egl.test.acceptance.AcceptanceTestUtil.test(AcceptanceTestUtil.java:45)
	at org.eclipse.epsilon.egl.test.acceptance.AcceptanceTestUtil.test(AcceptanceTestUtil.java:37)
	at org.eclipse.epsilon.egl.test.acceptance.outdentation.OutdentationTests.test(OutdentationTests.java:66)
	at org.eclipse.epsilon.egl.test.acceptance.outdentation.OutdentationTests.testTemplateOperation(OutdentationTests.java:47)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:757)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: begin 4, end 8, length 4
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:6)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@4:3-4:8)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:2-4:18)
	at (C:\Users\harr01\AppData\Local\Temp\epsilon\TemplateOperation.egl@1:0-14:1)

	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4606)
	at java.base/java.lang.String.substring(String.java:2709)
	at org.eclipse.epsilon.egl.output.OutdentationFormatter.format(OutdentationFormatter.java:61)
	at org.eclipse.epsilon.egl.dom.TemplateOperation.executeBody(TemplateOperation.java:67)
	at org.eclipse.epsilon.egl.dom.TemplateOperation.executeBody(TemplateOperation.java:1)
	at org.eclipse.epsilon.eol.dom.Operation.execute(Operation.java:173)
	at org.eclipse.epsilon.eol.dom.Operation.execute(Operation.java:148)
	at org.eclipse.epsilon.eol.dom.OperationCallExpression.execute(OperationCallExpression.java:157)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.OperationCallExpression.execute(OperationCallExpression.java:148)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.ExpressionStatement.execute(ExpressionStatement.java:31)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.StatementBlock.execute(StatementBlock.java:68)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.EolModule.executeImpl(EolModule.java:480)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:207)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.EolModule.execute(EolModule.java:475)
	at org.eclipse.epsilon.egl.internal.EglModule.execute(EglModule.java:170)
	... 34 more
Caused by: java.lang.StringIndexOutOfBoundsException: begin 4, end 8, length 4
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/90/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/93,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/93,epsilon,2318152890,93,Some tests fail when run on Windows,leomylonas,671045,Leo Mylonas,,CLOSED,2024-05-27T03:32:22Z,2025-01-03T08:37:34Z,I've fixed this and will submit a PR shortly.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/93/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/93,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5_HeX_,epsilon,2132665855,93,NA,leomylonas,671045,Leo Mylonas,,NA,2024-05-27T05:23:57Z,2024-05-27T05:23:57Z,Closing in favor of the PR #96 ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5_HeX_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/94,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/94,epsilon,2318253155,94,Protected region regex incorrectly matching any region IDs that contain ` end` ,leomylonas,671045,Leo Mylonas,,CLOSED,2024-05-27T05:18:05Z,2025-01-03T08:37:34Z,,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/94,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5_Heen,epsilon,2132666279,94,NA,leomylonas,671045,Leo Mylonas,,NA,2024-05-27T05:24:24Z,2024-05-27T05:24:24Z,Closing issue in favour of PR #95 ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM5_Heen/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/97,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/97,epsilon,2325838434,97,Investigate raising the source level to Java 17,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-05-30T14:35:29Z,2024-06-17T15:05:04Z,"We should try to increase the source level of the codebase to Java 17, to gain access to features like `var`, [text blocks](https://docs.oracle.com/en/java/javase/15/text-blocks/index.html), and other Java 11+ niceties. This must not impact the target level, to avoid affecting users.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/97,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Bj2-f,epsilon,2173661087,97,NA,alfonsodelavega,6605332,Alfonso de la Vega,,NA,2024-06-17T15:05:03Z,2024-06-17T15:05:03Z,"I just got bit by trying to set a `source` level of 17 and a `target` level of 11 in a maven project. It seems the compiler would not handle that for you (as one would expect given the option to set `source` and `target` individually), resulting in the error `source release 17 requires target release 17`.

[JEP 247](https://openjdk.org/jeps/247) elaborates on this, basically recommending to use `release` instead of `source` and `target`. The `release` option adds a ""documented APIs"" parameter when used with ""modern"" java versions (>=9) and sets `source` and `target` to the same value. I wonder if by setting the correct value of this extra parameter a correct backwards compilation could be achieved.

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Bj2-f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,epsilon,2330696663,99,[DAP] Add tests for other Epsilon languages,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-06-03T09:55:49Z,2024-06-23T19:06:08Z,"It'd be useful to have tests ensuring that the DAP support works as intended from other languages besides EOL.

- [x] EGL 
- [x] EGX + EGL
- [x] EVL
- [x] ETL
- [x] EML
- [x] ECL
- [x] EPL
- [x] EMG
- [x] Flock
- [x] Pinset","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CL8Fv,epsilon,2184167791,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-22T19:46:09Z,2024-06-22T19:46:09Z,"EGX + EGL is now working as well. This one required redesigning the adapter quite a bit, as the old assumption that we were only tracking one thread of execution didn't quite hold. I'll continue looking at the other Epsilon languages.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CL8Fv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPKJC,epsilon,2185011778,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T14:28:16Z,2024-06-23T14:28:16Z,EVL tests have been added in d09184583. These did not require any changes in the adapter.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPKJC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPLnY,epsilon,2185017816,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T14:43:51Z,2024-06-23T14:43:51Z,ETL tests have been added in 14a3737ce. No changes needed in the adapter.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPLnY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPPnU,epsilon,2185034196,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T15:07:09Z,2024-06-23T15:07:09Z,ECL tests have been added in 1dc3ca2e0. No changes needed in the adapter.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPPnU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPXSl,epsilon,2185065637,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T15:34:39Z,2024-06-23T15:34:39Z,EML tests have been added in 0c42b33d8. No changes needed in the adapter.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CPXSl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CP70-,epsilon,2185215294,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T17:31:45Z,2024-06-23T17:31:45Z,"EPL tests have been added in 5961dba56. I noticed we weren't setting end line+column values in the stack traces, so we're doing that now. I also noticed that Epsilon is 1-based for lines and 0-based for columns, so I tweaked the column number conversion in the adapter as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CP70-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CP9A2,epsilon,2185220150,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T17:38:39Z,2024-06-23T17:38:39Z,An EMG test has been added in d786f5eda. It's a very small test: it assumes imports are tested from the EOL side of things.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CP9A2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQGZ9,epsilon,2185258621,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T18:12:08Z,2024-06-23T18:12:08Z,Pinset tests were added in eccab2986. I found a subtle bug in how we reused object references in `SuspendedState` while writing the tests of this class. There was also a problem in `PinsetDebugger` where it wouldn't let you stop at the expression of a column.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQGZ9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQIij,epsilon,2185267363,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T18:46:07Z,2024-06-23T18:46:07Z,Flock tests were added in f10e37ab6. No changes to the debug adapter.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQIij/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/99,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQJzH,epsilon,2185272519,99,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-23T19:06:08Z,2024-06-23T19:06:08Z,"Forgot to mention EUnit: tests have been added for it in c4c6720b1. Had to make a few fixes to protect against several possible NPEs. With this, we cover everything except EWL, which would need some additional UI tweaks to flip it to DAP-based debugging anyway: that's for another issue.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CQJzH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/100,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/100,epsilon,2332797712,100,[EGX] Execution does not stop at breakpoints in EGL files,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-06-04T07:45:33Z,2024-06-22T19:45:02Z,"For the DAP tests (#99), I tried creating an example EGX script which invokes an EGL script, which then imports an EOL file. Testing with the previous Eclipse-based debugger, I noticed some issues with stopping at breakpoints when debugging the EGX script:

* EGX breakpoints work as expected (both EOL-style operations and inside rules).
* EGL breakpoints do not work.
* EOL breakpoints do not work, either.

It sounds like the debugger object in the EgxModule is not being reused for the EGL executions, which then causes issues with breakpoints in the imported EOL modules as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/100,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6BciYa,epsilon,2171741722,100,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-16T15:23:42Z,2024-06-16T15:23:42Z,"3192b482e provides an initial fix for file-based executions, where we are running an EGX script from a filesystem file. It will need more work for classpath-based executions, as the URI-path mapping will need to trigger when loading an EGL file as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6BciYa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/100,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CL8Aw,epsilon,2184167472,100,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-22T19:44:39Z,2024-06-22T19:44:39Z,"Proper support has required generalising the debug adapter so it can keep track of multiple running Epsilon scripts, which may be invoking each other. This implied significant changes to the design of the adapter.

Breakpoints on EGX files and on EGL/EOL files they invoke should work well from 0223979b5, including breakpoints on EGL scripts being executed from EGX orchestrations that are loaded from the classpath (with the appropriate URI-path mappings).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CL8Aw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/102,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/102,epsilon,2368834026,102,Add debug support to EWL,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-06-23T19:07:35Z,2024-06-23T19:07:35Z,"At the moment, EWL is the only Epsilon language which is not usable via the new Debug Adapter Protocol server, as it is run through Eclipse plugins. It'd be useful at some point to investigate what would be the ideal UX to turn on debugging for EWL scripts.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,epsilon,2373014876,103,Migrate Eclipse-based debuggers to LSP4E,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-06-25T15:40:06Z,2024-07-04T15:32:32Z,"After adding the DAP-based debugging, we've ended up with two codebases for debugging: the old Eclipse-based debugger (which is tightly tied to Eclipse APIs and lacks automated tests), and the new DAP-based debugger.

To avoid maintaining two competing codebases, we should migrate the Epsilon debug configurations to use the new DAP-based debugging through LSP4E, and retire the old codebase.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cic6X,epsilon,2190069399,103,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-06-25T22:17:58Z,2024-06-25T22:17:58Z,"I've given this a go by changing the behaviour of the ""debug"" branch of `EpsilonLaunchConfigurationDelegate`s `launch` method to launch an `EpsilonDebugServer` followed by an LSP4E debug client as shown below. I've tried this with an EGX/EGL example and the debugger seems to be stopping at the right places, but clicking on tree elements in the `Debug` view doesn't highlight the respective lines in the EGX/EGL files.

```patch
diff --git a/plugins/org.eclipse.epsilon.eol.dt/META-INF/MANIFEST.MF b/plugins/org.eclipse.epsilon.eol.dt/META-INF/MANIFEST.MF
index 62555d0..1639d3e 100644
--- a/plugins/org.eclipse.epsilon.eol.dt/META-INF/MANIFEST.MF
+++ b/plugins/org.eclipse.epsilon.eol.dt/META-INF/MANIFEST.MF
@@ -9,7 +9,12 @@
  org.eclipse.ui.console,
  org.eclipse.ui.workbench.texteditor,
  org.eclipse.ui.ide,
- org.eclipse.epsilon.common.dt
+ org.eclipse.epsilon.common.dt,
+ org.eclipse.lsp4e.debug,
+ org.eclipse.lsp4j.jsonrpc,
+ org.eclipse.lsp4j.jsonrpc.debug,
+ org.eclipse.lsp4j.debug,
+ org.eclipse.epsilon.eol.dap
 Bundle-ActivationPolicy: lazy
 Export-Package: org.eclipse.epsilon.eol.dt,
  org.eclipse.epsilon.eol.dt.debug,
diff --git a/plugins/org.eclipse.epsilon.eol.dt/src/org/eclipse/epsilon/eol/dt/launching/EpsilonLaunchConfigurationDelegate.java b/plugins/org.eclipse.epsilon.eol.dt/src/org/eclipse/epsilon/eol/dt/launching/EpsilonLaunchConfigurationDelegate.java
index cc9e3f0..d8acbac 100644
--- a/plugins/org.eclipse.epsilon.eol.dt/src/org/eclipse/epsilon/eol/dt/launching/EpsilonLaunchConfigurationDelegate.java
+++ b/plugins/org.eclipse.epsilon.eol.dt/src/org/eclipse/epsilon/eol/dt/launching/EpsilonLaunchConfigurationDelegate.java
@@ -11,8 +11,11 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.Timer;
+import java.util.TimerTask;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
@@ -37,10 +40,17 @@
 import org.eclipse.epsilon.common.module.IModule;
 import org.eclipse.epsilon.common.parse.problem.ParseProblem;
 import org.eclipse.epsilon.eol.IEolModule;
+import org.eclipse.epsilon.eol.dap.EpsilonDebugServer;
 import org.eclipse.epsilon.eol.debug.EolDebugger;
 import org.eclipse.epsilon.eol.dt.debug.EolDebugTarget;
 import org.eclipse.epsilon.eol.exceptions.EolRuntimeException;
 import org.eclipse.epsilon.eol.execute.context.IEolContext;
+import org.eclipse.lsp4e.debug.debugmodel.DSPDebugTarget;
+import org.eclipse.lsp4e.debug.launcher.DSPLaunchDelegate;
+import org.eclipse.lsp4e.debug.launcher.DSPLaunchDelegate.DSPLaunchDelegateLaunchBuilder;
+import org.eclipse.lsp4j.debug.services.IDebugProtocolServer;
+import org.eclipse.lsp4j.jsonrpc.Launcher;
+import org.eclipse.lsp4j.jsonrpc.MessageConsumer;
 
 public abstract class EpsilonLaunchConfigurationDelegate extends LaunchConfigurationDelegate implements EpsilonLaunchConfigurationDelegateListener {
 	
@@ -115,12 +125,30 @@
 				for (Map.Entry<?, ?> entry : configuration.getAttributes().entrySet()) {
 					launch.setAttribute(entry.getKey() + """", entry.getValue() + """");
 				}
-
-				final String name = launch.getAttribute(lauchConfigurationSourceAttribute);
-				target = new EolDebugTarget(launch, module, debugger, name);
-				debugger.setTarget(target);
-				launch.addDebugTarget(target);
-				result = target.debug();
+				
+				// Schedule the debug client to start in a second
+				// to give the debug server enough time to start running
+				new Timer().schedule(new TimerTask() {
+					
+					@Override
+					public void run() {
+						final DSPLaunchDelegateLaunchBuilder builder = new DSPLaunchDelegateLaunchBuilder(configuration, mode, launch, progressMonitor);
+						builder.setAttachDebugAdapter(""127.0.0.1"", 4040);
+						HashMap<String, Object> parameters = new HashMap<String, Object>();
+						parameters.put(""request"", ""attach"");
+						builder.setDspParameters(parameters);
+						DSPLaunchDelegate delegate = new DSPLaunchDelegate();
+						try {
+							delegate.launch(builder);
+						} catch (CoreException e) {
+							LogUtil.log(e);
+						}
+					}
+				}, 1000);
+				
+				// Start a debug server for the module
+				EpsilonDebugServer debugServer = new EpsilonDebugServer(module, 4040);
+				debugServer.run();
 			}
 			
 			executed(configuration, mode, launch, progressMonitor, module, result);
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cic6X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CmmVZ,epsilon,2191156569,103,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-06-26T08:47:58Z,2024-06-26T08:47:58Z,"Some thoughts for further down the line:
- When we get this to work it may be useful to add another `EpsilonDebugServer` constructor that also accepts a callback object (e.g. a `Runnable`) that it runs as soon as the server is ready. We could then provide a callback object to start the debug client instead of using an arbitrary delay.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6CmmVZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cnq--,epsilon,2191437758,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-26T11:14:06Z,2024-06-26T11:14:06Z,"I've just pushed a new `lsp4e-debuggers` branch that should address the above issues:

* The launch configurations needed to be given a source locator in order to highlight the relevant lines. I've changed all our launch configuration types to do this.
* The timer-based approach is no longer needed, after adding an `onStart` hook to `EpsilonDebugServer` to have a bit of code run in a separate thread

I've tried it with EOL and it works as expected. If we're happy with this, we could move on to removing our custom debug UI code in this branch.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cnq--/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cns2X,epsilon,2191445399,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-26T11:18:37Z,2024-06-26T11:18:37Z,On another note - we would also need to do something about the Eclipse-based debugging from Ant tasks. I'm not sure if it's enough to have reworked the EpsilonLaunchConfigurationDelegate.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cns2X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cr2aS,epsilon,2192533138,103,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-06-26T20:04:54Z,2024-06-26T20:04:54Z,"When a runtime error occurs in debug mode, it is not reported in the console. For example, running the following program which attempts to print the undefined `x` variable produces an error message in the console when executed in ""run"" mode but not when executed in ""debug"" mode.

```
x.println();
```

On a related note, when a runtime error occurs, the `launch` method of `EpsilonLaunchConfigurationDelegate` should return `false`. This return value is used in e.g. `EmlLaunchConfigurationDelegate` so that the EML program is not executed if the ECL program has failed.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Cr2aS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C2lPv,epsilon,2195346415,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-27T18:05:06Z,2024-06-27T18:05:06Z,"Thanks for the catches! The old version of the code relied on whatever Epsilon printed to its own console, but I see that printing out the exception produced by a module was left up to the launch delegate. I can't rely on a launch delegate doing that for VS Code, so instead I've given the responsibility to the debug adapter - if a module completes its execution with an exception, it will print it out to the module's standard error stream (which will then be sent to the DAP client).

The second issue reminded me that users of `EpsilonDebugServer` should be able to retrieve the result of calling `module.execute()`, whether it was a regular return value, or an exception. I have added a `getResult()` method that returns a `Future<Object>` which can resolve into any of those two. This means we can now replace this:

```
Object result = module.execute();
```

With this, which should return the same value and throw the same exceptions if the module crashes:

```java
EpsilonDebugServer server = new EpsilonDebugServer(module, port);
server.run();
Object result = server.getResult().get();
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C2lPv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C22q8,epsilon,2195417788,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-27T18:25:56Z,2024-06-27T18:25:56Z,"I have just double checked, and `EclipseHost` (used for running Ant tasks from inside the Eclipse JVM) still uses the old debuggers (it hooks directly to them). I'll change it to start the server and then use LSP4E debug launch delegate, much like our current Epsilon launch delegate in ""debug"" mode.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C22q8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C3w6o,epsilon,2195656360,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-27T20:58:49Z,2024-06-27T20:58:49Z,"I've pushed changes to `lsp4e-debuggers` so that the `EclipseHost` creates and launches an LSP4E launch configuration on the fly, based on the port assigned to the EpsilonDebugServer (which supports leaving `debugPort` unset to use any available port).

Dimitris: with this, we cover both debugging from an Epsilon launch configuration, and from an Ant launch. Shall I start deleting the old code we had for debugging, or am I missing something?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C3w6o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C7Ehk,epsilon,2196523108,103,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-06-28T09:43:54Z,2024-06-28T09:43:54Z,"Thanks for all your hard work! Everything I've tried so far works well except for the following:

- Running the stored launch configuration in the [attached project](https://github.com/user-attachments/files/16027569/eml-psl-example.zip) in ""debug"" mode, doesn't throw the expected exception.
- Running a simple EOL program with an error e.g. `x.println();` in ""debug"" mode produces an exception in the console but after a few seconds, when the launch configuration finishes, the console is cleared and the exception text disappears.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C7Ehk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C-Xkw,epsilon,2197387568,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-28T17:44:27Z,2024-06-28T17:44:27Z,"Thanks the the report!

I'll investigate the first item ASAP and let you know what I find.

For the second behaviour, it seems like a case of ""it's a feature, not a bug"". When our EpsilonLaunchConfigurationDelegate notices that a run/debug configuration crashes with an exception, it calls `progressMonitor.setCanceled(true)`. Ths is understood by the debug UI in Eclipse as wanting to remove the launch, which triggers the ProcessConsoleManager in org.eclipse.debug.internal.ui to remove the console for it as well.

The odd thing is that the same cancellation behaviour doesn't do anything when the program crashes from ""run"" mode. This appears to be because the launch in this case does not have any `IProcess` objects, unlike in the debug mode where the DAP side of LSP4E will add one for us. I wonder if this difference in behaviour may be a reason for the odd behaviour in #104: maybe recent versions of Eclipse require having an IProcess associated to a running program?

Would it make sense to just change the behaviour so crashing out of an Epsilon program won't consider the execution to be cancelled (it did complete, it just didn't complete successfully)?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C-Xkw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C-btF,epsilon,2197404485,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-28T17:59:47Z,2024-06-28T17:59:47Z,I've pushed a change removing the call to `progressMonitor.setCanceled(true)` and the terminal stays open with its output after the launch completes.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C-btF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6DBNXX,epsilon,2198132183,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-29T12:18:50Z,2024-06-29T12:18:50Z,"The first item was due to a NullPointerException in `EpsilonDebugAdapter#sendOutput` while trying to send out the error line, as it was relying on the frame having set a current statement and it didn't have the fallback to entrypoint + module that the `stackTrace()` method had. I've unified the way in which we resolve the current location across both places, and now I see the same error being reported in the ECL+EML launch configuration you provided.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6DBNXX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/103,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6DBpPW,epsilon,2198246358,103,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-29T16:06:26Z,2024-06-29T16:06:26Z,"I have fixed the debugging of EML launch configurations from LSP4E: it is now possible to stop on breakpoints both in the ECL and the EML scripts. I had to use a ""combo module"" approach, as the old approach of running the ECL delegate and then the regular EML delegate didn't work well with LSP4E.

I have also noted that in this case, finishing the execution of the program in ""debug"" mode may sometimes leave ""hanging"" threads despite our DAP server having sent the ""thread ended"" event, as you reported before. From what I see, this appears to be a timing issue, and a limitation in how LSP4E processes the `terminated` event, where it will immediately shut down the debugging session without processing the `exited` event that indicates a successful execution of the program:

https://github.com/eclipse/lsp4e/issues/266

When I have tried setting a breakpoint before we send the `terminated` message (to force LSP4E to process the thread events before we send the `terminated` event), it has worked fine. This sounds like it may be an LSP4E issue and not on our side.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6DBpPW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/104,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/104,epsilon,2376180954,104,Unremovable launch configurations in the Debug view,kolovos,3584136,Dimitris Kolovos,,OPEN,2024-06-26T20:12:04Z,2024-07-24T08:15:24Z,"When an Epsilon program is executed in ""run"" mode through a launch configuration, after the execution has finished, an entry for the launch configuration remains in the Debug view and cannot be removed using the ""Remove All Terminated Launches"" button (see below)

<img width=""377"" alt=""image"" src=""https://github.com/eclipse/epsilon/assets/3584136/25cab88a-f415-4269-8334-5fb5e59f592c"">
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/104/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/104,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C2RQ1,epsilon,2195264565,104,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-06-27T17:22:23Z,2024-06-27T17:22:23Z,"I have tried to reproduce this by running a small EOL file with no models (in ""run"" mode), and the entry in the Debug view is being automatically removed. I'm using the Eclipse 2013-12 distribution that we have in our target platform, on Linux.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C2RQ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/104,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C7Lp7,epsilon,2196552315,104,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-06-28T10:01:52Z,2024-06-28T10:01:52Z,How odd! I'm also using 2023-12 and I can reproduce this issue consistently.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6C7Lp7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/105,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/105,epsilon,2389367752,105,Retire the org.eclipse.epsilon.sirius.widget plugin,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-07-03T20:01:57Z,2024-07-12T08:21:09Z,We don't have any documentation or tests for this plugin and given that it contains more peripheral functionality (extending Sirius editors with embedded Xtext-based expressions) it's probably better to move it under `examples`.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/105/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/107,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/107,epsilon,2390302933,107,"Create a new ""Remote Epsilon Program"" debug configuration",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-07-04T08:47:02Z,2024-07-05T11:42:29Z,"Currently, remote debugging of an Epsilon program requires using a generic LSP4E remote debugging configuration, which exposes more options than we want, and doesn't benefit from the hyperlinks we can produce in the Epsilon console.

It would be good to create our own specialisation of the LSP4E configuration, called ""Remote Epsilon Program"" (a mix of the existing ""Remote Java application"" and ""EOL Program"" names), which only asks for a port number and uses the EpsilonConsole just like the local debuggers from #106 do. We could reuse this debug configuration from the Ant tasks when they run from inside Eclipse as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/107/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/108,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/108,epsilon,2390334252,108,DAP: add inspection of maps and Java objects,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-07-04T09:01:57Z,2024-07-11T10:04:26Z,"The current DAP codebase doesn't have code for inspecting Maps and arbitrary Java objects. We should add the appropriate `IVariableReference` implementations (most likely subclasses of `IdentifiableReference`) for these, plus the appropriate tests.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/108,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6EZGbx,epsilon,2221172465,108,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-07-10T18:27:17Z,2024-07-10T18:27:17Z,"Inspection of maps is done, as of fa718d994. The next bit is inspecting Java objects which do not correspond to Epsilon types, using our existing Java property getter.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6EZGbx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/110,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/110,epsilon,2409194319,110,Upgrade LSP4E to 0.26.3 or later,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-07-15T16:52:33Z,2024-07-24T08:15:08Z,LSP4E released a new patch version (0.26.3) which includes the fix to avoid listing terminated launches as resumable. We should upgrade our target platform and our plain Maven build before releasing 2.6.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/111,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/111,epsilon,2411367483,111,EvlParallelOperationsTests crashes under Apple Silicon,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-07-16T14:50:28Z,2024-07-22T11:57:31Z,"In an Apple Silicon system (particularly, an M3 Pro-based laptop), `EvlParallelOperationsTests` (executed by our `build-and-run.sh` script) crashes with this trace:

```
java.lang.OutOfMemoryError: unable to create new native thread
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:719)
	at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:957)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1367)
	at java.util.concurrent.AbstractExecutorService.invokeAll(AbstractExecutorService.java:238)
	at org.eclipse.epsilon.eol.execute.context.concurrent.IEolContextParallel.executeAll(IEolContextParallel.java:149)
	at org.eclipse.epsilon.eol.execute.operations.declarative.concurrent.ParallelSelectOperation.execute(ParallelSelectOperation.java:61)
	at org.eclipse.epsilon.eol.execute.operations.declarative.ExistsOperation.execute(ExistsOperation.java:24)
	at org.eclipse.epsilon.eol.execute.operations.declarative.ExistsOperation.execute(ExistsOperation.java:1)
	at org.eclipse.epsilon.eol.dom.FirstOrderOperationCallExpression.execute(FirstOrderOperationCallExpression.java:118)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.ReturnStatement.execute(ReturnStatement.java:39)
	at org.eclipse.epsilon.eol.dom.ReturnStatement.execute(ReturnStatement.java:1)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.StatementBlock.execute(StatementBlock.java:68)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.Operation.executeBody(Operation.java:191)
	at org.eclipse.epsilon.eol.dom.Operation.execute(Operation.java:173)
	at org.eclipse.epsilon.eol.dom.Operation.execute(Operation.java:148)
	at org.eclipse.epsilon.eol.dom.OperationCallExpression.execute(OperationCallExpression.java:157)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.AssignmentStatement.execute(AssignmentStatement.java:97)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.StatementBlock.execute(StatementBlock.java:68)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.ExecutableBlock.executeBlockOrExpressionAst(ExecutableBlock.java:103)
	at org.eclipse.epsilon.eol.dom.ExecutableBlock.executeBody(ExecutableBlock.java:177)
	at org.eclipse.epsilon.eol.dom.ExecutableBlock.execute(ExecutableBlock.java:128)
	at org.eclipse.epsilon.eol.dom.ExecutableBlock.execute(ExecutableBlock.java:181)
	at org.eclipse.epsilon.evl.dom.Constraint.executeCheckBlock(Constraint.java:153)
	at org.eclipse.epsilon.evl.dom.Constraint.check(Constraint.java:123)
	at org.eclipse.epsilon.evl.dom.Constraint.execute(Constraint.java:80)
	at org.eclipse.epsilon.evl.dom.Constraint.execute(Constraint.java:1)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:222)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:263)
	at org.eclipse.epsilon.evl.dom.ConstraintContext.execute(ConstraintContext.java:201)
	at org.eclipse.epsilon.evl.EvlModule.checkConstraints(EvlModule.java:278)
	at org.eclipse.epsilon.evl.EvlModule.processRules(EvlModule.java:266)
	at org.eclipse.epsilon.evl.EvlModule.processRules(EvlModule.java:1)
	at org.eclipse.epsilon.erl.ErlModule.executeImpl(ErlModule.java:174)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:207)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.EolModule.execute(EolModule.java:476)
	at org.eclipse.epsilon.evl.EvlModule.execute(EvlModule.java:300)
	at org.eclipse.epsilon.evl.EvlModule.execute(EvlModule.java:1)
	at org.eclipse.epsilon.eol.launch.EolRunConfiguration.execute(EolRunConfiguration.java:195)
	at org.eclipse.epsilon.evl.launch.EvlRunConfiguration.execute(EvlRunConfiguration.java:128)
	at org.eclipse.epsilon.evl.launch.EvlRunConfiguration.execute(EvlRunConfiguration.java:1)
	at org.eclipse.epsilon.common.launch.ProfilableRunConfiguration.call(ProfilableRunConfiguration.java:234)
	at org.eclipse.epsilon.common.launch.ProfilableRunConfiguration.run(ProfilableRunConfiguration.java:265)
	at org.eclipse.epsilon.eol.engine.test.acceptance.util.EolEquivalenceTests.setUpEquivalenceTest(EolEquivalenceTests.java:106)
	at org.eclipse.epsilon.evl.engine.test.acceptance.equivalence.EvlParallelOperationsTests.setUpBeforeClass(EvlParallelOperationsTests.java:88)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.RunBefores.invokeMethod(RunBefores.java:33)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:757)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
```

This is happening at test setup time - using `jstack`, it appears this is creating 4000+ threads before any tests run and without disposing any previously used threads, which is hitting the OS limits set in recent versions of MacOS for Apple Silicon.

The test suite should be restructured so it doesn't spin up all these threads in advance, but rather run EVL programs, obtain their results, and then shut down those threads.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/111,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FrL9d,epsilon,2242690909,111,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-07-22T11:05:44Z,2024-07-22T11:05:44Z,"Turns out that we did have a thread leak inside Epsilon's parallel tasks. When we begin a parallel task and start a new EolContextParallel in a non-""short circuiting"" piece of work (basically, one we cannot interrupt), we weren't shutting down the executor appropriately (which means the threads were never being freed after everything was done).

The fix is to always shut down the executor - if we must interrupt then we use `shutdownNow` as before (which sends an interrupt to all tasks), and if we shouldn't interrupt then we just do `shutdown` (which tells the Executor we won't be scheduling any more tasks, so it can free up the threads once they are all done).

I'll submit a PR with the fix, as well as a rewrite of the module equivalence tests in Epsilon.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6FrL9d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,epsilon,2412976454,112,Structurizr EMC Driver,kolovos,3584136,Dimitris Kolovos,,OPEN,2024-07-17T08:20:11Z,2024-10-07T09:41:13Z,[Structurizr](https://docs.structurizr.com/) is a textual DSL for software architecture diagrams that appears to be gaining momentum. It would be nice to develop [an EMC driver](https://eclipse.dev/epsilon/doc/articles/developing-a-new-emc-driver/) for it on top of its [Java API](https://github.com/structurizr/java).,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6KxjfP,epsilon,2328246223,112,NA,dandelion-lowcode,93224318,Dandelion Lowcode,,NA,2024-09-04T08:32:52Z,2024-09-04T08:32:52Z,"I have created [a first draft](https://github.com/dandelion-lowcode/emc-structurizr) with tests and code coverage (~90%). I will improve it during these weeks.

If this is valuable, I may also need some guidance regarding the project format (Maven, packages...) towards a potential PR.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6KxjfP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6K8fpz,epsilon,2331114099,112,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-09-05T10:00:28Z,2024-09-05T10:00:28Z,Wow - this is amazing! It'd be nice to also include a [.dt plugin](https://eclipse.dev/epsilon/doc/articles/developing-a-new-emc-driver/) in the PR for consistency with the rest of the drivers. Please let me know if there's anything I can help with!,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6K8fpz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6LCML1,epsilon,2332607221,112,NA,dandelion-lowcode,93224318,Dandelion Lowcode,,NA,2024-09-05T20:50:17Z,2024-09-05T20:50:17Z,"Thanks. I have created the .dt plugin and uploaded the tests. 

Required stuff:
- [ ] Fixing the feature and updatesite plugins - I don't recall how to do it. At the moment they are just placeholder folders.
- [ ] Fixing the tests:
  - ~they use resources that I have put [on a folder](https://github.com/dandelion-lowcode/emc-structurizr/tree/main/org.eclipse.epsilon.emc.structurizr.test/src/resources) and, although they ""work on my machine"" :) in a Maven build, but I couldn't get them to work in a plugin scenario.~ 
  - Created [StructurizrTestSuite](https://github.com/dandelion-lowcode/emc-structurizr/blob/main/org.eclipse.epsilon.emc.structurizr.test/src/org/eclipse/epsilon/emc/structurizr/test/StructurizrTestSuite.java) and [StructurizrTests](https://github.com/dandelion-lowcode/emc-structurizr/blob/main/org.eclipse.epsilon.emc.structurizr.test/src/org/eclipse/epsilon/emc/structurizr/test/StructurizrTests.java) classes and now resources are gathered using `FileUtil.getFileStandalone`. Still, I get compilation problems.

Finer stuff:
- [ ] An implementation which differentiates between `getAllOfType` and `getAllOfKind`
- [x] Right now the property getter/setter acts upon a limited set of properties (i.e., name, description, tag). While these may be sufficient, perhaps this could be improved by allowing to access _all_ the existing getters and setters. (JavaPropertyS/Getter?)
- [ ] There are probably too many dependencies. I have been adding JARs until there were no more ClassNotFound exceptions. I may have messed up re-exports in the plugins or something.
- [ ] Probably writing a blog entry (?)","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6LCML1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OST6i,epsilon,2387164834,112,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-01T22:10:57Z,2024-10-01T22:10:57Z,"> Fixing the feature and updatesite plugins - I don't recall how to do it. At the moment they are just placeholder folders.

If you're considering contributing the driver to Epsilon, it may make sense to fork Epsilon and edit its update site, target platform etc. If you'd like to keep it in a separate repo for a while until it becomes more mature, you could check out the features and update site plugins from the [Cameo driver](https://github.com/epsilonlabs/emc-cameo)

> Right now the property getter/setter acts upon a limited set of properties (i.e., name, description, tag).

Interpeting `foo.x` as `foo.getX()/foo.setX()` is something that the existing [JavaPropertyGetter/JavaPropertySetter](https://github.com/eclipse/epsilon/tree/7783fc872ccdb19c6d1e4bdebb6b59c98157c640/plugins/org.eclipse.epsilon.eol.engine/src/org/eclipse/epsilon/eol/execute/introspection/java) classes already do for all objects in an Epsilon program, so the Structurizr property getters/setters shouldn't need to deal with such properties in a special way.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OST6i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6O1jDO,epsilon,2396401870,112,NA,dandelion-lowcode,93224318,Dandelion Lowcode,,NA,2024-10-07T09:29:51Z,2024-10-07T09:29:51Z,"Thanks, Dimitris. I think it is sensible to leave it in a separate repository for now. Also, do you think it makes sense to transfer it to epsilonlabs? I would need permissions for that, though.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6O1jDO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/112,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6O1pPS,epsilon,2396427218,112,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-07T09:41:11Z,2024-10-07T09:41:11Z,You're more than welcome to move the repo to epsilonlabs! I've just invited you to the organisation.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6O1pPS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/114,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/114,epsilon,2422647722,114,Fix EPL equivalence tests,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-07-22T11:35:18Z,2024-10-18T19:11:51Z,"While rewriting the module equivalence tests for #111, I noticed this bit of code in `EplAcceptanceTestUtil`:

https://github.com/eclipse/epsilon/blob/770435007e72764041d6d8d12cca006a3aedb747/tests/org.eclipse.epsilon.epl.engine.test.acceptance/src/org/eclipse/epsilon/epl/engine/test/acceptance/EplAcceptanceTestUtil.java#L50-L53

It looks like the EPL tests broke at some point, and we stubbed them out for now instead of fixing them.

@SMadani any thoughts on what might be the issue? Do you recall if these worked in previous Epsilon versions?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/115,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/115,epsilon,2444493833,115,Add ability to measure coverage to EUnit,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-08-02T09:15:33Z,2024-08-02T09:15:33Z,An industrial partner has expressed interest in EUnit having coverage metrics of the exercised Epsilon sources. We would need to set up an execution listener for this and some reporting UI and exporting facilities.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/117,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/117,epsilon,2511587878,117,Picto doesn't work with Graphviz installed using Homebrew on Mac Apple Silicon,kolovos,3584136,Dimitris Kolovos,,CLOSED,2024-09-07T10:37:07Z,2024-09-07T11:20:52Z,"On Mac Apple Silicon, Homebrew installs Graphviz to `/opt/homebrew/bin` instead of `/usr/local/bin/` and therefore Picto cannot find `dot` etc and produces errror messages like this: `Cannot run program ""/usr/local/bin/dot"": error=2, No such file or directory`","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/118,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/118,epsilon,2511602162,118,"[EMF] Misleading ""ambiguous type"" warnings when the same EClass is accessible through multiple paths",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-09-07T11:19:49Z,2024-09-07T12:52:46Z,"If a module is configured with multiple EMF `EPackage`s, where some of them are subpackages of others, trying to access one of the subpackages' types (e.g. if we list the Sirius description package + one of its subpackages) will produce a warning of this form:

```
Ambiguous type X: candidates were ""X"" ""X"" (picked ""X"")
```

While it's true that the reference is somewhat ambiguous due to the multiple paths in which the type can be accessible, there wouldn't actually be a risk of picking the wrong X as all those paths lead to the same exact EClass instance. This is more of a slight misconfiguration from the user, who should have only picked the main `EPackage` that contains the others. It would be better to change the warning to something like:

```
The type X is accessible from both ""nsURI1"" and ""nsURI2"" (e.g. through sub-package relationships).
It is recommended to only list one of these metamodels in the module configuration.
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/118,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6LL-ko,epsilon,2335172904,118,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-09-07T12:30:35Z,2024-09-07T12:30:35Z,"On second thought, it may not be a good idea to raise a warning in this scenario: an Epsilon script running under the default EPackage registry in an Eclipse IDE that had Sirius installed could potentially raise this warning about multiple paths existing for a given type, without there really being any ambiguity.

It may be best to just reduce the EClass candidates to a set, and only report ambiguity if we really had different EClass instances.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6LL-ko/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/119,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/119,epsilon,2513561366,119,println(): cannot tell apart empty sequence from sequence with an empty string,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-09-09T10:26:58Z,2024-09-09T10:43:47Z,"If we run this EOL program:

```
Sequence {}.println('Empty sequence: ');
Sequence {""""}.println('Sequence with empty string: ');
```

We will get this misleading output:

```
Empty sequence: Sequence {}
Sequence with empty string: Sequence {}
```

We should instead get something like:

```
Empty sequence: Sequence {}
Sequence with empty string: Sequence {""""}
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/121,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/121,epsilon,2547740564,121,Add support for conditional breakpoints,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-09-25T11:35:51Z,2025-01-03T08:37:34Z,"It would be nice to allow for specifying EOL expressions as a condition for a breakpoint. The Debug Adapter Protocol does have ways to communicate these breakpoints. We'd have to check how to report syntactically invalid EOL expressions, and how to report evaluation errors as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/122,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/122,epsilon,2548041435,122,Add support for inline breakpoints,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-09-25T13:42:56Z,2025-01-03T08:37:34Z,"It's possible to specify a column while setting a breakpoint (DAP allows for this). This may be good when setting a breakpoint in a language such as EGL, as otherwise we may break more times than we'd normally expect at that line (e.g. here):

```
foo[%=bar%]xyz[%=abc%]
```

Someone may want to only break inside `[%=bar%]`, for instance.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/122/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/122,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6QjIxB,epsilon,2425130049,122,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-10-20T17:09:04Z,2024-10-20T17:09:04Z,"This is now implemented, as of a9a5b8901.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6QjIxB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,epsilon,2553784475,123,[ETL] Native support for 1:m..n rules,arcanefoam,2157165,Horacio Hoyos,,OPEN,2024-09-27T21:48:53Z,2024-10-09T14:56:51Z,"ETL natively supports `1:n` transformation rules. However, in some cases we can need `1:m..n` rules, which I call runtime multiplicity, in which the actual number of output elements can not be determined until runtime.

An example is a `port -> implements` relation between Ports and Interfaces, where the interface needs to be transformed `m` times, where `m` is the number of ports that use the interface.
Dimitris has provided an alternative:

```
rule OperationInInterface
	transform sOp:SysML!Operation
	to runbls: Sequence {
	
	var aClntSrvOp = sOp.equivalents().selectOne(eq | ...));
	for (p in portsUsingTheInterface(sOp.owner)) {
		var aSrvComSpec = new AUTOSAR!ServerComSpec();
		aSrvComSpec.`operation` = aClntSrvOp;
		p.equivalent().providedComSpec.add(aSrvComSpec);
		runbls.add(aSrvComSpec);	
	}
	
}

```  

This workaround works, but using the equivalents operation is uselss unless you define the rule as lazy.
The execution time of the lazy algorithm is much worse than the base one.

My prosal is to support 1:m..n rules natively.
The porposed syntax change adds a `foreach` keyword in which you specify a sequence statement.
The size of the returned sequence (m) will be be used to instantiate m Tuples, each containg on set of target parameters.

## CST Addiiton
```
(@abstract)?
(@lazy)?
(@primary)?
rule <name>
    transform <sourceParameterName>:<sourceParameterType>
    to (<targetParameterName>:<targetParameterType>
        ,<targetParameterName>:<targetParameterType>)*
	  (foreach <sequence>)?
    (extends <ruleName> (, <ruleName>*)? {

    (guard (:expression)|({statementBlock}))?

    statement+
	
}
```

With this the previous example would be

```
rule OperationInInterface
	transform sOp:SysML!Operation
	to runbls: aSrvComSpec: AUTOSAR!ServerComSpec()
			foreach portsUsingTheInterface(sOp.owner)
	{
	
	var aClntSrvOp = sOp.equivalents().selectOne(eq | ...));
	
	aSrvComSpec.`operation` = aClntSrvOp;
	loopVar.equivalent().providedComSpec.add(aSrvComSpec);
	runbls.add(aSrvComSpec);	
	
	
}

```  

Note that the use of the for each keyword would result in a stack variable called loopVar that can be used in the rule.

When using the `equivalent(s)` operation you would get a `List<Tuple<>>` .  The tuple will contain all the targetPrams + the loopVar.

## In the ETL implementation

Since ETL already creates the output elements in a first pass, I think implementing this shuold not be to complex.
We would execute the foreach statement and create the list of tuples. When we get to the body we repeat it m times, replacing the stack variables as needed.


For more complex scenarios, the foreach could be a block, instead of a keyword:
```
rule <name>
    transform <sourceParameterName>:<sourceParameterType>
    to (<targetParameterName>:<targetParameterType>
        ,<targetParameterName>:<targetParameterType>)*
    (foreach (:expression)|({statementBlock}))?
```

This would allow to breakdown the sequence statement or collect elements from various places.

If something of interest, we can discuss more details and I can work on this (if @agarciadom  is not too eager to jump and do it :) ).


","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6N8FXb,epsilon,2381338075,123,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-09-29T12:27:03Z,2024-09-29T12:27:03Z,"> This workaround works, but using the equivalents operation is uselss unless you define the rule as lazy.

I thought the same off the top of my head but this doesn't seem to be the case. Calling `.equivalent()` actually causes the body of the target rule to be executed as shown in https://eclipse.dev/epsilon/playground/?notes2coins","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6N8FXb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OGb3i,epsilon,2384051682,123,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2024-09-30T20:05:40Z,2024-09-30T20:05:40Z,"Sadly in my case it seems I get non-deterministic results, as in, the results of the transformation change between runs. Might be caused by other rules and the complexity of my case . However I am unable to get a minimal example to highlight the issue.

Although I state the equivalents as a motivation, I also think that the syntax provides a better description of the rule's intent, and simplifies part of the rule body. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OGb3i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OKApm,epsilon,2384988774,123,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-01T07:21:44Z,2024-10-01T07:21:44Z,"I think that the issue might be that in line 4 of your rule you are calling `.equivalents()` on the element under transformation (`sOp`). Perhaps refactoring the transformation so that you don't need to do this might help?

```
rule OperationInInterface
	transform sOp:SysML!Operation
	to runbls: Sequence {
	
	var aClntSrvOp = sOp.equivalents().selectOne(eq | ...));
```

I agree that adding some dedicated syntax would be useful (ATL provides the [distinct keyword](https://github.com/eclipse-atl/atl/wiki/User_Guide_-_The_ATL_Language#iterative-target-pattern-element) for this) however I would avoid introducing a new keyword and would favour `for` instead of `foreach` i.e.

```
rule WalletToPouch
    transform wallet : Source!Wallet
    to pouch : Target!Pouch {
    
    pouch.coins ::= wallet.notes;
}

rule NoteToCoins
    transform note : Source!Note
    to coins : Sequence<Target!Coin>
        for : 1.`to`(note.value) {
    
    guard: note.value > 0
    
    for (coin in coins) {
        coin.value = 1;
        coins.add(coin);
    }
}
```

Also, we should support these `for` statements for each output parameter i.e. 

```
rule <name>
    transform <sourceParameterName>:<sourceParameterType>
    to (<targetParameterName>:<targetParameterType> (for (:expression)|({statementBlock}))?
        ,<targetParameterName>:<targetParameterType> (for (:expression)|({statementBlock}))?)*
```

Thoughts?

","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OKApm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQHAu,epsilon,2386587694,123,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-10-01T17:37:22Z,2024-10-01T17:37:22Z,"I like the use of the `for` keyword, but I'm not a big fan of having `Sequence<T>`s that we `add()` to. It'd be far too easy for someone to say they're going to create `n` elements but then have a bug in the rule body which results in `n-1` elements or `n+1` elements being added to that collection. There wouldn't be much point in providing that expression then.

I'd change the semantics slightly, so the rule populates the `Sequence<Coin>` in advance, then we just loop over it. We could wrap the `coins` sequence in an UnmodifiableList so any attempt to change it from the body would raise an exception. In addition, if the `for` will always be a sequence of numbers, it wouldn't even have to be a list, just an integer representing multiplicity:

```
rule NoteToCoins
    transform note : Source!Note
    to coins : Sequence<Target!Coin> for : note.value
{
    guard: note.value > 0
    for (coin in coins) {
        coin.value = 1;
    }
}
```

Another option could be something like this, which reuses the for loop syntax of EOL and exposes the collection element as a variable for use within the body and guard (assuming it runs once per `(note, i)` pair):

```
rule NoteToCoins
    transform note : Source!Note
    to coin : Target!Coin
    for (i : Integer in 1.`to`(note.value))
{
    guard: note.value > 0
    coin.value = 1;
}
```

The above option would not allow for different counts for each target type, though.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQHAu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQhWY,epsilon,2386695576,123,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2024-10-01T18:32:35Z,2024-10-01T18:32:35Z,"My idea is more like the second case in Antonio's post. If you look at my initial post, by moving the 'for' to the rule definition the idea is to remove the for loop from the rule's body. Additionally, there is no 'Sequence' type in the 'to' definition. One set of 'to' elements will be created for each iteration. This means that you always get the same number of elements of each 'to' (I would not allow a sperate collection for each 'to' element as it would complicate the semantics). Perhaps the coin example is too simple to demonstrate the idea. 

This is another one: https://eclipse.dev/epsilon/playground/?0c4cef86

The intention of the change is that the second rule can be changed from this:
``` 
rule ClassroomToPC
    transform c : Source!Classroom
    to assets : Sequence {
    
    for (s in c.students) {
        var u = new Target!User;
        u.name = s.name;
        var f = new Target!Folder;
        f.path = ""home/"" + s.name.toLowerCase();
    }
}
``` 

to this:
``` 
rule ClassroomToPC
    transform c : Source!Classroom
    to u:Target!User, f:Target!Folder
    for c.students {
     
        u.name = loopVar.name;
        f.path = ""home/"" + loopVar.name.toLowerCase();
    }
}
``` 
In my head, the two main benefits is the ability to explicitly state what type of elements are created and to simplify the rule body.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQhWY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQyXK,epsilon,2386765258,123,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-01T19:13:13Z,2024-10-01T19:13:13Z,"> This is another one: https://eclipse.dev/epsilon/playground/?0c4cef86

@arcanefoam: Wouldn't the following be a more sensible way to implement this transformation?

```
// Transforms a class room, into a PC
// with 1 account+folder per student
rule ClassroomToPC
    transform c : Source!Classroom
    to pc : Target!PC {
    
    pc.users.addAll(c.students.equivalent()
        .select(e | e.isTypeOf(Target!User)));
    pc.folders.addAll(c.students.equivalent()
        .select(e | e.isTypeOf(Target!Folder)));
}

rule StudentToUserAndFolder
    transform s : Source!Student
    to u : Target!User, f : Target!Folder {
    
    u.name = s.name;
    f.path = ""home/"" + s.name.toLowerCase();
}
```

@agarciadom: The call to the `add()` function should not have been there. What I meant to write was:

```
rule WalletToPouch
    transform wallet : Source!Wallet
    to pouch : Target!Pouch {
    
    pouch.coins ::= wallet.notes;
}

rule NoteToCoins
    transform note : Source!Note
    to coins : Sequence<Target!Coin> for : 1.`to`(note.value) {
    
    guard: note.value > 0
    
    for (coin in coins) {
        coin.value = 1;
    }
}
```

My thinking was that the `for` expression would return a collection and for every item of the collection, we'd create a `Coin` and add it to `coins` (we could even trace the target elements back to the source elements). 

A limitation with this solution is e.g. that we could not fill the `coins` sequence with instances of different sub-types of `Coin` if we wanted to. To provide more control to the user, in addition to the `for` iterator, we could support initialiser expressions i.e.

```
rule WalletToPouch
    transform wallet : Source!Wallet
    to pouch : Target!Pouch {
    
    pouch.coins ::= wallet.notes;
}

rule NoteToCoins
    transform note : Source!Note
    to coins : Sequence<Target!Coin> = 1.`to`(note.value).collect(i | new Target!Coin(value = 1)) {
    
    guard: note.value > 0
    
}
```

Initialiser expressions could also be useful for single-valued targets e.g.

```
rule WalletToPouch
    transform wallet : Source!Wallet
    to pouch : Target!Pouch = wallet.notes.value.sum() > 10 ? new Target!LeatherPouch : new Target!FabricPouch {
    
    pouch.coins ::= wallet.notes;
}
```

Of course, users should avoid calling `equivalent()` in initialiser expressions and we could even look into detecting such calls and throwing an exception.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OQyXK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OReNA,epsilon,2386944832,123,NA,arcanefoam,2157165,Horacio Hoyos,,NA,2024-10-01T19:58:56Z,2024-10-01T19:58:56Z,"@kolovos 
I was just trying to exemplify my idea. 

I think you are focusing on getting the count of expected elements in the sequence, that would not work for my case... and I don't see the added value vs what is available atm. 

My grudge is with the Sequence as a 'to' type. It makes the rule specification unclear (i.e. you need to read the code to know what is going into the sequence - the coin example with a single 'to' is not a good example to drive the discussion) . At least from what I need and perceive as improved syntax/semantics just giving the number of instances beforehand is not much of an improvement.

 ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OReNA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OSL5N,epsilon,2387131981,123,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-01T21:45:09Z,2024-10-01T21:45:09Z,"ETL's default execution algorithm, which is used when there are no lazy rules, works in two phases. In the first phase, it goes through all the rules and creates empty target model elements from source elmenents, and in the second phase it executes the bodies of rules to populate the contents of target elements. 

> I think you are focusing on getting the count of expected elements in the sequence, that would not work for my case... and I don't see the added value vs what is available atm.

At the moment, after the first phase, the `coins`/`assets` sequences are empty - which is presumably what causes the issues with `equivalents()` that you described in your original message. With the proposed extension, the `coins`/`assets` sequences would be populated in the first phase.

> I was just trying to exemplify my idea.
> ... the coin example with a single 'to' is not a good example to drive the discussion

It'd be useful to come up with an example that cannot be expressed concisely enough using the current syntax of ETL so that we can use it to discuss different solutions.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OSL5N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/123,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6PNHFG,epsilon,2402578758,123,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-10-09T14:56:50Z,2024-10-09T14:56:50Z,"We had a chat about this today, and we agree that initalizers on `to` parameters would simplify some common scenarios, so we have filed a separate issue about adding these to ETL:

https://github.com/eclipse/epsilon/issues/125

However, these would necessarily help with this 1:m..n scenario. Horacio has agreed to produce a minimal working example that illustrates the problem, that we can use to draft proposals to revise ETL to make those scenarios easier to work with.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6PNHFG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/124,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/124,epsilon,2568588935,124,EolMap is not a map,micfort,6042490,Michiel,,CLOSED,2024-10-06T10:38:04Z,2024-10-06T11:28:17Z,"so a very interesting issue showed up today for me with the following code:
```
var test = Map{""a"" = 1, ""b"" = 2};
test[""a""].println();
```

I got the following error `EolMap {a=1, b=2} is not a collection or a map.`
So the error is definitely wrong, because EolMap is a map, but the question is more is the following syntax allowed: `test[""a""]` ?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/124,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OxtCG,epsilon,2395394182,124,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-06T11:00:45Z,2024-10-06T11:00:45Z,Thanks for reporting this issue. It is a bug and it will be fixed in 2.6.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OxtCG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/124,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OxvBt,epsilon,2395402349,124,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-10-06T11:28:16Z,2024-10-06T11:28:16Z,"This now works as expected. Also, item selector expressions can now be used to set/put values in collections/maps as shown in the [tests](https://github.com/eclipse/epsilon/blob/main/tests/org.eclipse.epsilon.eol.engine.test.acceptance/src/org/eclipse/epsilon/eol/engine/test/acceptance/ItemSelectorTests.eol).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6OxvBt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/125,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/125,epsilon,2576182399,125,"[ETL] Add support for ""to"" initializers",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-10-09T14:54:57Z,2025-01-03T08:36:13Z,"In some scenarios, we may want to be able to initialise a `to` parameter in an ETL rule. For example, if we have an abstract supertype `Coin` and two concrete subtypes `GoldCoin` and `SilverCoin`, we may want to have one rule that transforms a `Score` into a `GoldCoin` or a `SilverCoin` depending on the information of the `Score`.

# Current behaviour

At the moment, doing this would require using at least two rules:

```
rule Score2GoldCoin from s: Source!Score to c: Target!GoldCoin {
  guard: /* condition to create a gold coin */
  /* set details of c */
}

rule Score2SilverCoin from s: Source!Score to c: Target!SilverCoin {
  guard: /* condition to create a silver coin */
  /* set details of c */
}
```

We might have common information to set for all coins, so this might be further expanded to three rules with inheritance:

```
@abstract
rule Score2Coin from s: Source!Score to c: Target!Coin {
  /* set common Coin details of c */
}

rule Score2GoldCoin from s: Source!Score to c: Target!GoldCoin extends Score2Coin {
  guard: /* condition to create a gold coin */
  /* set GoldCoin-specific details of c */
}

rule Score2SilverCoin from s: Source!Score to c: Target!SilverCoin extends Score2Coin {
  guard: /* condition to create a silver coin */
  /* set SilverCoin-specific details of c */
}
```

# Desired behaviour

It would be good to support a syntax like this:

```
rule Score2Coin
  from s: Source!Score
  to c: Target!Coin = condition ? new Target!GoldCoin : new Target!SilverCoin
{
  /* set common Coin details of c */
  if (c.isKindOf(Target!GoldCoin)) {
    /* set GoldCoin-specific details of c */
  } else {
    /* set SilverCoin-specific details of c */
  }
}
```

In general, we would extend each element of the `to` list with the ability to have an optional initializing expression, which would be executed during the first phase of the default ETL algorithm, before rule bodies are run.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/126,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/126,epsilon,2589466804,126,[EGL] Reported column numbers are sometimes off,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-10-15T17:47:24Z,2024-10-18T19:09:57Z,"While testing the debugging of EGL code, I noticed that VS Code would sometimes highlight the wrong column ranges. These come from EGL itself, and it looks like the `Preprocessor` may have some issues around reporting accurate columns.

This is a blocker for #122, as we cannot reliably do inline breakpoints without getting accurate column numbers from the EGL AST. ","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/126/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/126,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6QbURo,epsilon,2423080040,126,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-10-18T19:09:57Z,2024-10-18T19:09:57Z,This was fixed by #127.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6QbURo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/128,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/128,epsilon,2593986186,128,Outdentation breaks trace links,kolovos,3584136,Dimitris Kolovos,,OPEN,2024-10-17T08:17:34Z,2025-01-03T08:36:13Z,"EGL's recently-introduced [outdentation feature](https://eclipse.dev/epsilon/doc/egl/#outdentation), breaks traceability links. For example, if the template from the [EGX playground example](https://eclipse.dev/epsilon/playground/?egx) is modified as follows (outdentation added in line 6) 

```
[*Generate a <h1> with the name of the person*]
<h1>[%=p.name%]'s Tasks</h1> 
[*Generate a table for the person's tasks*]
<table>
[*For every task*]
[%for (t in p.getTasks()){-%]
[*Generate a row with the title of the task*]
    <tr>
        <td>[%=t.title%]</td>
    </tr>
[%}%]
</table>

[%
// Returns the tasks of a person
operation Person getTasks() {
    return Task.all.select(
        t|t.effort.exists(e|e.person = self));
}
%]
```

the reported trace links for task titles are broken (see below)

![image](https://github.com/user-attachments/assets/258ae59a-19e1-49e5-aaf8-81488064e16a)

This is because outdentation is implemented partly using a post-transformation formatter, and formatters are expected to deal with updating traceability themselves (which the [outdentation formatter](https://github.com/eclipse/epsilon/blob/main/plugins/org.eclipse.epsilon.egl.engine/src/org/eclipse/epsilon/egl/output/OutdentationFormatter.java) doesn't).

Given that most formatters only add/remove whitespace, we could introduce an abstract e.g. `TraceabilityPreservingFormatter` class that updates trace links given only the original and the formatted text and make EGL's `OutdentationFormatter`, as well as other formatters, extend it. To deal with cases where formatters actually do more than adding/removing whitespace, `TraceabilityPreservingFormatter` could actually check that the original/formatted text only differ in whitespace and fail or report a warning otherwise.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/128,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6UWdxt,epsilon,2488917101,128,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-11-20T15:37:57Z,2024-11-20T15:37:57Z,"Below is some code we could use to map offsets of formatted code back to the original code assuming the formatter has only added/removed whitespace (which is the case for the outdentation formatter)

```java
package org.eclipse.epsilon.egl.formatter;

import java.util.ArrayList;
import java.util.List;

public class PositionMapper {

    public static List<Integer> mapOffsets(String original, String formatted) {
        
        // Helper variables to track the current index in both strings
        int originalIndex = 0, formattedIndex = 0;

        // Create an array to store the mapped offsets of each character in the original string
        int[] mappedOffsets = new int[original.length()];
        
        // Process both strings simultaneously
        while (originalIndex < original.length() && formattedIndex < formatted.length()) {
        	
            char originalChar = original.charAt(originalIndex);
            char formattedChar = formatted.charAt(formattedIndex);

            // If characters match, map the current formatted index to the original index
            if (formattedIndex < formatted.length() && originalChar == formattedChar) {
                mappedOffsets[originalIndex] = formattedIndex;
                originalIndex++;
                formattedIndex++;
            } else if (Character.isWhitespace(originalChar)) {
                // Handle cases where the characters differ by continuing through the original string
            	mappedOffsets[originalIndex] = -1;
            	originalIndex++;
            } else if (Character.isWhitespace(formattedChar)) {
            	formattedIndex++;
            }
        }

        // If there are remaining characters in the original string that weren't mapped yet
        while (originalIndex < original.length()) {
            mappedOffsets[originalIndex] = formattedIndex;  // Remaining original chars map to end of formatted
            originalIndex++;
        }
        
        ArrayList<Integer> mappedOffsetsList = new ArrayList<Integer>();
        for (int mappedOffset : mappedOffsets) mappedOffsetsList.add(mappedOffset);
        return mappedOffsetsList;
    }

    public static void main(String[] args) {
        // Example usage
        String original = ""Hello\t\n\nWorld!"";
        String formatted = ""Hello\n\t\t World!"";
        List<Integer> originalOffsets = new ArrayList<>();
        originalOffsets.add(0);  // H
        originalOffsets.add(6);  // W

        List<Integer> formattedOffsets = mapOffsets(original, formatted);

        int originalOffset = 0;
        for (Integer mappedOffset : formattedOffsets) {
        	char mappedChar = mappedOffset >= 0 ? formatted.charAt(mappedOffset) : ' ';
            System.out.println(originalOffset + ""->"" + mappedOffset + "" / "" + original.charAt(originalOffset) + ""->"" + mappedChar);
            originalOffset++;
        }
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6UWdxt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/130,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/130,epsilon,2598213224,130,Review provider/plugin names in metadata,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-10-18T19:11:29Z,2024-11-04T19:15:44Z,"While talking to Simos today, I noticed that we were missing Provider strings in some plugins, and we also have some inconsistent plugin names as well. We should review the plugins, and we might want to add some automated check over CI as well.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/130/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/131,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/131,epsilon,2601763400,131,Support custom tags in EGL,kolovos,3584136,Dimitris Kolovos,,OPEN,2024-10-21T08:27:07Z,2024-10-21T08:27:07Z,"It would be useful to allow users to change the default EGL tags, like [Jinja does](https://jinja.palletsprojects.com/en/3.1.x/api/). For example, users could change the start/end dynamic section tags from `[%` and `%]` to `<%` and `%>` and write EGL templates like this:

```
<%for (i in 1.to(2)){%>
Number <%=i%>
<%}%>
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/132,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/132,epsilon,2603146458,132,[DAP] Add an option to stop at all statements on a line breakpoint,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-10-21T16:54:32Z,2024-11-04T18:55:54Z,"Since we added support for inline breakpoints, we changed how line breakpoints work to match their behaviour in traditional programming languages, which stop right before the first statement on that line, and no more.

This poses a problem for people who may want to debug the second statement on a line and who are using an IDE that doesn't support inline breakpoints yet (like Eclipse via LSP4E).

We could add a ""Line breakpoints stop on all statements"" option that we could pass at `initialize()` time, which would return to the original behaviour of stopping at every statement on a given line.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/132/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/132,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SW4HE,epsilon,2455470532,132,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-04T18:55:50Z,2024-11-04T18:55:50Z,This is implemented as of 4b3f2f5b9.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SW4HE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,epsilon,2630657996,133,java.util.ConcurrentModificationException on parallel execution of EVL/ETL/EOL when Enum value is used,robertcsakany,434398,Robert Csakany,csakany.robert@gmail.com,CLOSED,2024-11-02T17:48:20Z,2024-11-04T18:52:24Z,"`Caused by: org.eclipse.epsilon.eol.exceptions.EolInternalException: java.util.ConcurrentModificationException

	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1221)
	at org.eclipse.epsilon.emc.emf.AbstractEmfModel.getEnumerationValue(AbstractEmfModel.java:156)
	at org.eclipse.epsilon.eol.models.ModelReference.getEnumerationValue(ModelReference.java:94)
	at org.eclipse.epsilon.eol.models.ModelRepository.getEnumerationValue(ModelRepository.java:200)
	at org.eclipse.epsilon.eol.dom.EnumerationLiteralExpression.execute(EnumerationLiteralExpression.java:34)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.EagerOperatorExpression.execute(EagerOperatorExpression.java:31)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:34)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:1)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:27)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:1)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:27)
	at org.eclipse.epsilon.eol.dom.AndOperatorExpression.execute(AndOperatorExpression.java:1)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.executeImpl(ExecutorFactory.java:204)
	at org.eclipse.epsilon.eol.execute.ExecutorFactory.execute(ExecutorFactory.java:233)
	at org.eclipse.epsilon.eol.function.EolLambdaFactory.executeExpression(EolLambdaFactory.java:107)
	at org.eclipse.epsilon.eol.function.EolLambdaFactory.lambda$4(EolLambdaFactory.java:66)
	at org.eclipse.epsilon.eol.execute.operations.declarative.concurrent.ParallelSelectOperation.lambda$0(ParallelSelectOperation.java:51)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
	at org.eclipse.epsilon.eol.execute.concurrent.EolExecutorThread.run(EolExecutorThread.java:36)
Caused by: java.util.ConcurrentModificationException: null
`
Example:

`@cahced
operation JUDOPSM!TransferObjectType isGetRangeInputType() : Boolean {
    return JUDOPSM!TransferOperation.all()
        .exists(o | o.behaviour.isDefined() and o.behaviour.behaviourType == JUDOPSM!TransferOperationBehaviourType#GET_RANGE and
                    o.input.isDefined() and o.input.type == self);
}
`

It can be reproduced with any metamodel (3 of them have the same error)

EvlModuleParallelElements is used. When EvlModule it works fine.



","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SN6g-,epsilon,2453121086,133,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-11-02T20:39:46Z,2024-11-02T20:39:46Z,"Thanks for reporting this. I've been able to reproduce the problem with [the attached minimal example](https://github.com/user-attachments/files/17608321/issue-113.zip) using both 2.5 and 2.6.
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SN6g-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWB6s,epsilon,2455248556,133,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-04T17:05:36Z,2024-11-04T17:05:36Z,Thank you for the report. I'll have a look now.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWB6s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWhLw,epsilon,2455376624,133,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-04T18:05:27Z,2024-11-04T18:05:27Z,"I tried adding this example to our the equivalence tests we use to compare parallel and non-parallel implementations of EVL, and I did not run into this error. When I compared the example from Dimitris with what our equivalence tests do, I noted that in concurrent environments, you should set the `concurrent` flag of the model to true, like this:

```java
model.setConcurrent(true);
```

This will instruct the model to use a number of concurrency-friendly data structures internally, which would impose unnecessary synchronisation overhead in a non-concurrent environment.

I'll double check if we have this properly explained in our documentation and if the concurrent flag is exposed from our UI.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWhLw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWkdc,epsilon,2455390044,133,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-04T18:12:13Z,2024-11-04T18:12:13Z,"Yes, this is documented in the Epsilon website and exposed from our UI:

https://eclipse.dev/epsilon/doc/articles/parallel-execution/

Ticking the ""Thread-safe cache"" box is equivalent to the `model.setConcurrent(true)` call needed when invoking Epsilon directly from Java.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SWkdc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/133,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SW2oK,epsilon,2455464458,133,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-04T18:52:24Z,2024-11-04T18:52:24Z,"I have just pushed a number of tweaks to our documentation, indicating more clearly what has to be done when using multi-threaded implementations of the Epsilon languages from Java and from Ant:

https://eclipse.dev/epsilon/doc/articles/parallel-execution/

I'll close the issue as so far this seems to have been a gap in our documentation, but feel free to reopen if problems persist after adding `model.setConcurrent(true)` before you load your models.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6SW2oK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/134,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/134,epsilon,2634981599,134,Mention how to populate environment:/ URIs in Sirius example,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,OPEN,2024-11-05T09:58:43Z,2024-11-05T10:02:05Z,"In the example for working with Sirius models from Epsilon through a plain Java program, we should mention how to register the `Environment.odesign` into the URIConverter.URI_MAP manually (which is needed to provide some standard values, like the default color palette). It's something of this sort:

```java
URIConverter.URI_MAP.put(
  URI.createURI(""environment:/viewpoint""),
  URI.createURI(DescriptionPackage.class.getResource(""/model/Environment.odesign"").toURI().toString())
);
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/134/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/135,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/135,epsilon,2637338768,135,Update Eclipse Installer links to new repositories,alfonsodelavega,6605332,Alfonso de la Vega,,OPEN,2024-11-06T08:08:12Z,2024-11-06T08:08:13Z,"As part of the migration of the `epsilon` and `epsilon-website` repositories to the new `eclipse-epsilon` organization, we should update the repository pointers that are in use in the Eclipse installer `.setup` files.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/135/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/136,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/136,epsilon,2668527987,136,Include Simulink tests in CI,kolovos,3584136,Dimitris Kolovos,,OPEN,2024-11-18T13:20:06Z,2024-11-18T13:20:07Z,"Currently, we only run Simulink tests locally as they need a Simulink installation. I've come across https://github.com/matlab-actions which could help include these tests to our CI builds.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/136/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/137,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/137,epsilon,2698334967,137,"Issues with EVL's ""Advanced"" launch configuration tab",kolovos,3584136,Dimitris Kolovos,,OPEN,2024-11-27T12:06:26Z,2024-11-27T12:07:06Z,"Switching between execution engines causes the ""Options"" panel to disappear as shown below.

![2024-11-27 11 54 43](https://github.com/user-attachments/assets/e88702f2-c440-4c8b-8db6-4db570641930)

Also, the string ""Optimize Constraints to Select Operations"" appears in two classes: `EvlModuleConfiguration` and `EvlAdvancedOptionsTab` which suggests that there's a missed opportunity for reuse. This is also suggested by the fact that `EvlAdvancedOptionsTab` doesn't extend `AbstractAdvancedConfigurationTab` like `EglAdvancedConfigurationTab` does but instead extends the more basic `AbstractLaunchConfigurationTab` class.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/137/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/139,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/139,epsilon,2698915538,139,[DAP] Broken link in documentation,dandelion-lowcode,93224318,Dandelion Lowcode,,CLOSED,2024-11-27T15:25:26Z,2025-01-03T08:37:35Z,https://github.com/eclipse-epsilon/epsilon/blob/fafe0ffeabb8c692792c3b750903643a8f300117/examples/org.eclipse.epsilon.examples.eol.dap/epsilon/README.md?plain=1#L17 ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/139/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/139,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6VSN93,epsilon,2504580983,139,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2024-11-27T18:48:38Z,2024-11-27T18:48:38Z,"Thank you for the catch! I forgot to update the README: I have just done that. This feature is now available from the official release of the vscode-epsilon extension in the Marketplace:

https://marketplace.visualstudio.com/items?itemName=SamHarris.eclipse-epsilon-languages","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6VSN93/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/140,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/140,epsilon,2710397778,140,[EVL] Some syntax errors don't get reported as parse problems,Arkaedan,29588649,Sam Harris,,CLOSED,2024-12-02T04:11:18Z,2025-01-03T08:36:38Z,"Consider the following EVL examples.
```
// Example 1
context Milestone {
    constraint ShouldFail {
        checks : false
        message : ""This constraint should fail for every Milestone.""
    }
}
```
```
// Example 2
context Milestone {
    constraint ShouldFail {\
        check : false
        message : ""This constraint should fail for every Milestone.""
    }
}
```

In the first example, the error is the keyword `checks` should actually be `check`. This results in a parse problem being reported as expected.

In the second example, the error is the extra backslash (`\`) character after the open bracket. This does not cause any parse problem to be reported. Instead, the message `line 2:29 no viable alternative at character '\'` is printed to the console.

As far as I can tell, the main difference between the two is that the first error is detected inside the `Evl_EvlParserRules` class which extends the `EpsilonParser` class. The EpsilonParser class has an override of the `displayRecognitionError` method in which the ParseProblem is created. Whereas, the second error is detected inside the `EvlLexer` class which does not have an override for the `displayRecognitionError` method and therefore the default implementation is called which simply prints the message to console.

I don't understand the parsing system well enough to troubleshoot further. Although I am happy to keep working on this issue if someone can point me in the right direction.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/140,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6WpcuA,epsilon,2527447936,140,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-12-09T09:55:30Z,2024-12-09T09:55:30Z,"Thanks for reporting this! I haven't been able to find a way to set a custom superclass for generated lexers yet. If this doesn't turn out to be possible in ANTLR3, as a workaround we could add the following snippet to all Epsilon grammars

```
@lexer::members {
public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
	org.eclipse.epsilon.common.parse.EpsilonParseProblemManager.INSTANCE.reportException(e.line, e.charPositionInLine, getErrorMessage(e, getTokenNames()));
}
}
```

We'll also need to move the first `EpsilonParseProblemManager.INSTANCE.reset();` from `AbstractModule.invokeMainRule` to just before where we create the lexer in the private `parse` method (i.e. `final Lexer lexer ...`).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6WpcuA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/140,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6WqIVv,epsilon,2527626607,140,NA,kolovos,3584136,Dimitris Kolovos,,NA,2024-12-09T11:13:34Z,2024-12-09T11:13:34Z,Fixed in https://github.com/eclipse-epsilon/epsilon/commit/04d36dbf89ddb5d969f9485a32f978e484aed7f3 ... https://github.com/eclipse-epsilon/epsilon/commit/6f0ac0e385cbb1f02c0794cb359aa2b0e66859b5 ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6WqIVv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/141,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/141,epsilon,2712005028,141,[EMG] Should not always store the models,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2024-12-02T13:47:20Z,2024-12-09T11:16:14Z,"EMG seems to be different to all other Epsilon languages, in that it will always call the `.store()` method of the model, regardless of whether the user selected the ""store on disposal"" option or not:

https://github.com/eclipse-epsilon/epsilon/blob/1616fbe1c1542efb7e310c3f3b387ebaeb2fa2d0/plugins/org.eclipse.epsilon.emg.engine/src/org/eclipse/epsilon/emg/EmgModule.java#L163

This looks odd - we should leave it up to the user to decide what to do on disposal of the model. We may not want to store it: for instance, we may only be interested in its in-memory representation (e.g. to send it over the network in a Playground function).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,epsilon,2752352606,144,Epsilon and 2024-12: problems with commonmark,LorenzoBettini,1202254,Lorenzo Bettini,,CLOSED,2024-12-20T09:49:10Z,2025-01-22T17:46:53Z,"After switching to 2024-12 (at least in the target platform), Epsilon picto has problem starting (e.g., when running another Eclipse instance or Plug-in JUnit tests), due to the commonmark package:

here's an example of the error reported (note that due to this, the Eclipse started takes more than 1 minute to start):

```
  Unresolved requirement: Require-Bundle: org.eclipse.epsilon.picto; bundle-version=""2.3.0""; visibility:=""reexport""
    -> Bundle-SymbolicName: org.eclipse.epsilon.picto; bundle-version=""2.5.0.202404150823""; singleton:=""true""
       org.eclipse.epsilon.picto [332]
         Unresolved requirement: Require-Bundle: org.eclipse.emf.emfatic.ui; resolution:=""optional""
         Unresolved requirement: Require-Bundle: org.eclipse.gymnast.runtime.ui; resolution:=""optional""
         Unresolved requirement: Require-Bundle: org.eclipse.emf.emfatic.core; resolution:=""optional""
         Unresolved requirement: Require-Bundle: org.eclipse.gymnast.runtime.core; resolution:=""optional""
  Bundle was not resolved because of a uses constraint violation.
  org.apache.felix.resolver.reason.ReasonException: Uses constraint violation. Unable to resolve resource org.eclipse.epsilon.picto [osgi.identity; type=""osgi.bundle""; version:Version=""2.5.0.202404150823""; osgi.identity=""org.eclipse.epsilon.picto""; singleton:=""true""] because it is exposed to package 'org.commonmark.renderer.html' from resources com.atlassian.commonmark [osgi.identity; type=""osgi.bundle""; version:Version=""0.15.1.v20200707-1444""; osgi.identity=""com.atlassian.commonmark""] and org.commonmark [osgi.identity; type=""osgi.bundle""; version:Version=""0.24.0.v20241021-1700""; osgi.identity=""org.commonmark""] via two dependency chains.

Chain 1:
  org.eclipse.epsilon.picto [osgi.identity; type=""osgi.bundle""; version:Version=""2.5.0.202404150823""; osgi.identity=""org.eclipse.epsilon.picto""; singleton:=""true""]
    require: (osgi.wiring.bundle=com.atlassian.commonmark)
     |
    provide: osgi.wiring.bundle: com.atlassian.commonmark
  com.atlassian.commonmark [osgi.identity; type=""osgi.bundle""; version:Version=""0.15.1.v20200707-1444""; osgi.identity=""com.atlassian.commonmark""]

Chain 2:
  org.eclipse.epsilon.picto [osgi.identity; type=""osgi.bundle""; version:Version=""2.5.0.202404150823""; osgi.identity=""org.eclipse.epsilon.picto""; singleton:=""true""]
    require: (osgi.wiring.bundle=com.atlassian.commonmark-gfm-strikethrough)
     |
    provide: osgi.wiring.bundle; bundle-version:Version=""0.15.1.v20200707-1444""; osgi.wiring.bundle=""com.atlassian.commonmark-gfm-strikethrough""
  com.atlassian.commonmark-gfm-strikethrough [osgi.identity; type=""osgi.bundle""; version:Version=""0.15.1.v20200707-1444""; osgi.identity=""com.atlassian.commonmark-gfm-strikethrough""]
    import: (osgi.wiring.package=org.commonmark.renderer.html)
     |
    export: osgi.wiring.package: org.commonmark.renderer.html
  org.commonmark [osgi.identity; type=""osgi.bundle""; version:Version=""0.24.0.v20241021-1700""; osgi.identity=""org.commonmark""]
	at org.eclipse.osgi.container.Module.start(Module.java:493)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel$2.run(ModuleContainer.java:2102)
	at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor$1$1.execute(EquinoxContainerAdaptor.java:143)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:2093)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:2033)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1996)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1912)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:341)
```

I seem to understand that's due to both the bundles `com.atlassian.commonmark` and `org.commonmark` are installed. The former probably taken through a p2 reference to an old Orbit version (the Epsilon p2 site has site references) and the latter taken from the standard Eclipse 2024-12 p2 site (but also available in the 2024-12 Orbit).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6YZGLL,epsilon,2556715723,144,NA,LorenzoBettini,1202254,Lorenzo Bettini,,NA,2024-12-20T10:28:45Z,2024-12-20T10:28:45Z,"Note that in 2024-12 jdt.core.manipulation requires org.commonmark and gfm-tables at least 0.22.0, so excluding the new bundles `org.commonmark` will not make JDT work...

since picto ""requires"" the `com.atlassian.commonmark` bundles, instead of ""importing"" org.commonmark packages, I seem to understand that Picto will simply not work in 2024-12 (unless you do without JDT).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6YZGLL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZB-ZW,epsilon,2567431766,144,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-02T08:40:11Z,2025-01-02T08:40:11Z,Thank you for reporting this! I'll have a look at this now.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZB-ZW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZCtqz,epsilon,2567625395,144,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-02T11:23:07Z,2025-01-02T11:23:07Z,"We have typically avoided Import-Package as it tends to be quite fragile in our experience. I was able to fix the problem by upgrading to the same CommonMark 0.24.0 release that is used in Eclipse 2024-12, getting it from the Orbit SimRel 2024-12 update site instead of that old Orbit site from 2021 (see the above #145 PR).

I have been able to start Eclipse 2024-12 from the Epsilon sources, and use the Markdown page of the `org.eclipse.epsilon.examples.picto.ecore` project without issues.

If you notice any new issues, please let us know. Thank you again for your report!","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZCtqz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZC6oL,epsilon,2567678475,144,NA,LorenzoBettini,1202254,Lorenzo Bettini,,NA,2025-01-02T12:08:04Z,2025-01-02T12:08:04Z,"@agarciadom thanks.

Will you do a new release as well?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZC6oL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZEv3K,epsilon,2568158666,144,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-02T18:00:03Z,2025-01-02T18:00:03Z,"We have another two issues listed for the 2.6.0 release at the moment:

https://github.com/eclipse-epsilon/epsilon/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.6.0

I'll have to check with the project lead if we want to wait until those are dealt with, or if we can postpone some of them to 2.7.0 and do a stable release for 2.6.0.

For the time being, you should be able to use the latest version of our interim update site, which should already have these corrections:

http://download.eclipse.org/epsilon/interim/","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZEv3K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZH2wh,epsilon,2568973345,144,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-03T10:01:38Z,2025-01-03T10:01:38Z,"We have postponed those two issues to a future 2.7.0 release, and we are now preparing the 2.6.0 release.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZH2wh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZJTUZ,epsilon,2569352473,144,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-03T14:54:19Z,2025-01-03T14:54:19Z,"We have published a new version (2.6). The update site is here:

http://download.eclipse.org/epsilon/updates/2.6/

We will post an announcement about this soon, but the full release notes are here:

https://projects.eclipse.org/projects/modeling.epsilon/releases/2.6/plan","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZJTUZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/144,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bcSTk,epsilon,2607883492,144,NA,LorenzoBettini,1202254,Lorenzo Bettini,,NA,2025-01-22T17:46:52Z,2025-01-22T17:46:52Z,Thanks for fixing this.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bcSTk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,epsilon,2767913284,146,Cannot use HTTP functionality in JSON driver installed from 2.6 update site after Xtext is installed,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2025-01-03T17:17:02Z,2025-01-09T19:09:01Z,"When I tried installing the version of Xtext in the 2024-12 simrel, I notice that the HttpClient 4 dependency in the EMC JSON driver requires a version of Commons Logging (`[1.1.0,1.3.0)`) which is incompatible with the version of Commons Logging used by Xtext (1.3.4).

The Excel driver (which requires Commons Logging and usually installs Commons Logging 1.2 by itself) resolves correctly against Commons Logging 1.3.4 as well: it is the strict version range in the HttpClient 4 bundle which is causing the problem.

We should note a warning around this incompatibility in the website, and look at upgrading the HttpClient 4 dependency to one without this issue for 2.7.0.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZKHtB,epsilon,2569567041,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-03T17:19:34Z,2025-01-03T17:19:34Z,I've jotted down some notes about this in the commit message of dc4d9272f05b562ee6411b31c9c399c2c92c511e.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZKHtB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZKL1R,epsilon,2569583953,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-03T17:33:40Z,2025-01-03T17:33:40Z,"There is some discussion around this problem here:

https://github.com/eclipse-xtext/xtext/issues/3279","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ZKL1R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z1J3s,epsilon,2580848108,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-09T17:13:12Z,2025-01-09T17:13:12Z,"Since the Epsilon 2.6 update site refers to an old Orbit site, any attempts to install things from the Epsilon 2.6 update site will result in Eclipse ""upgrading"" the Commons Logging 1.2.0 plugin to the old Orbit `1.2.0.v20180409-1502` version, which will cause issues in the JSON driver when using its HTTP support if Xtext is then installed.

This problem has been fixed in the 2.7 interim update site since c23d79d63cf807a6ce7b0952a7fe99468004766f, by having the features which depend directly or indirectly on `org.apache.commons.logging` (the JSON and Excel drivers) require a perfect 1.2.0 version match, which prevents Eclipse from doing that ""upgrade"" and instead using the version from the 2024-12 simrel update site.

In summary, the JSON HTTP functionality is available in Epsilon 2.6 only if Epsilon is installed via the Eclipse Installer and not via the update site, but managing local JSON files would work as usual. Epsilon 2.7 interims do not have this problem.

I have also noted that when using the `Epsilon` option in the Eclipse Installer, I have to untick the ""Bundle Pool"" option, or the target platform will stop working if I manually install more features (e.g. Xtext). This is not the case when installing the Modeling Tools, so I will compare their Oomph recipe with ours.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z1J3s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z1lrZ,epsilon,2580962009,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-09T18:12:39Z,2025-01-09T18:12:39Z,"Commit d8790b66df61f50df64791861b2a40c1311aa377 fixes the  ""Bundle Pool"" option in the Eclipse Installer for our Epsilon configurations, so now it's just the Epsilon 2.6 update site causing trouble with the HTTP functionality in the JSON driver if Xtext is installed.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z1lrZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z13h4,epsilon,2581035128,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-09T18:53:45Z,2025-01-09T18:53:45Z,"I've narrowed down the scope of this issue to just the HTTP functionality in the JSON driver. That's the only bit that breaks if you install Epsilon from the 2.6 update site, then install Xtext. It will still work if you install Epsilon 2.6 via the Eclipse Installer.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z13h4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/146,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z19Vv,epsilon,2581058927,146,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-09T19:08:03Z,2025-01-09T19:08:03Z,"Closing for now as it has been fixed in the 2.7 interims, and there is a workaround for 2.6 (using the Eclipse Installer).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6Z19Vv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/148,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/148,epsilon,2809584133,148,[DAP] Document support for evaluating expressions in 2.7,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2025-01-24T14:24:10Z,2025-01-25T12:25:57Z,"We've just added support for evaluating expressions in DAP, but we haven't documented it yet on the website. We should do this at some point within the work on 2.7.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/148,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bzbVL,epsilon,2613949771,148,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-25T12:25:56Z,2025-01-25T12:25:56Z,"This is now done as of this commit:

https://github.com/eclipse-epsilon/epsilon-website/commit/3e0ef39743dade48ab4ea1f9a040d04f3ad6b16c","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bzbVL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/149,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/149,epsilon,2809607713,149,[DAP] Support evaluation of expressions from frames other than the top one,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2025-01-24T14:34:48Z,2025-02-12T12:25:36Z,"Currently, when the DAP debugger evaluates an expression, it does so by adding a temporary stack frame at the top and evaluating from there. This creates a limitation, in that we can't really evaluate an expression from the context of a stack frame that is not the top one - this may be an issue when we want to see the value of a symbol that was shadowed further up in the stack.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/149,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6eKjIC,epsilon,2653565442,149,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-02-12T12:24:52Z,2025-02-12T12:24:52Z,"Closing as we now use a copy of the original module (since fixing #153), rather than the original stack.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6eKjIC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/150,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/150,epsilon,2810028245,150,[DAP] Disable breakpoints while evaluating expressions,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2025-01-24T17:48:24Z,2025-01-25T12:11:50Z,"We do not disable breakpoints while evaluating expressions at the moment. This will cause issues if our expression triggers a breakpoint, as we will end up nesting these evaluations and breakpoints indefinitely.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/150,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bzaaj,epsilon,2613946019,150,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-25T12:11:49Z,2025-01-25T12:11:49Z,Note that this same issue appeared in conditional breakpoints as well. It has been fixed and covered with a test in the same commit.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6bzaaj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/151,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/151,epsilon,2814289886,151,Exceptions thrown during model loading are not reported,kolovos,3584136,Dimitris Kolovos,,CLOSED,2025-01-27T23:36:26Z,2025-02-12T12:25:18Z,"To reproduce this, create a launch configuration that runs an EOL program which accesses an EMF model with the read-on-load option selected and a model file that doesn't exist. Nothing is printed in the console, likely because exceptions raised [here](https://github.com/eclipse-epsilon/epsilon/blob/b0223dda10fd128fa52f7815977d4dbd0223f449/plugins/org.eclipse.epsilon.eol.dt/src/org/eclipse/epsilon/eol/dt/launching/EpsilonLaunchConfigurationDelegate.java#L106) are ignored.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/151/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152,epsilon,2814760430,152,[DAP] Breakpoints ignored in VS Code on Windows,Arkaedan,29588649,Sam Harris,,CLOSED,2025-01-28T06:34:35Z,2025-01-28T14:42:37Z,"This is the `setBreakpoints` command that gets sent from my VS Code to the Epsilon debugger
```json
{
  ""command"": ""setBreakpoints"",
  ""arguments"": {
    ""source"": {
      ""name"": ""01-hello.eol"",
      ""path"": ""c:\\Users\\harr01\\repos\\epsilon-main\\git\\epsilon\\examples\\org.eclipse.epsilon.examples.eol.dap\\epsilon\\01-hello.eol""
    },
    ""lines"": [
      8
    ],
    ""breakpoints"": [
      {
        ""line"": 8
      }
    ],
    ""sourceModified"": false
  },
  ""type"": ""request"",
  ""seq"": 2
}
```
For reasons unknown to me, the path starts with `c:` (lowercase c) instead of the conventional `C:` (uppercase C).

This causes an issue on [line 258 of EolDebugger.java](https://github.com/eclipse-epsilon/epsilon/blob/b0223dda10fd128fa52f7815977d4dbd0223f449/plugins/org.eclipse.epsilon.eol.engine/src/org/eclipse/epsilon/eol/debug/EolDebugger.java#L258) where `argsSourceFileURI` starts with ""file:/c:/..."" but the module in the `uriToModule` map has a key that starts with ""file:/C:/..."" which causes the module to not be resolved. Which means that breakpoints fail to set.

I have confirmed this issue happens on multiple computers.

I am not sure what the best way to handle this is. One possible solution would be to change line 257 to:
```java
final String argsSourceFileURI = argsSourceFile.getCannonicalFile().toURI().toString();
```

@agarciadom do you have any thoughts?","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cENp3,epsilon,2618350199,152,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-28T09:01:56Z,2025-01-28T09:01:56Z,"Huh - that's interesting. I do all my VS Code testing on UNIX systems (Linux/Mac) so this has raised yet another example of how things can differ from OS to OS. We even run our tests on Windows but we didn't have a test for this scenario.

We could try your suggestion, but I'd like to cover it with a test that breaks on our current version, so it stays fixed in the future. I agree with your suggestion to ""canonicalize"" `file:/` URIs before we check them on the `uriToModule` map.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cENp3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cHVip,epsilon,2619168937,152,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-28T14:31:42Z,2025-01-28T14:31:42Z,"I have created a test specifically for case-insensitive filesystems, which tries to set breakpoints using an all-uppercase version of the original file path. As you suggested, using the canonical version of the file addresses all the possible ways in which the `setBreakpoints` request could be representing the same file. We already do this when populating the `uriToModule` map, but we forgot to sanitize what was coming via `setBreakpoints`.

I'll try this now from VS Code in my Windows machine and close the issue if it fixes the problem.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cHVip/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/152,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cHdLU,epsilon,2619200212,152,NA,agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,NA,2025-01-28T14:42:35Z,2025-01-28T14:42:35Z,"This is working now from my Windows installation of VS Code:

![Image](https://github.com/user-attachments/assets/425c9e0a-3a9f-4ddf-9161-c222786238aa)

I've also noted that the case-insensitivity test appears to be Windows-specific, as the Github Actions runs for the commit with this fix show that the Linux and Mac runners are skipping it. I wasn't sure if the Mac runner would be running in a case-sensitive or case-insensitive filesystem by default, but it seems to be working on a case-sensitive one.

I'll close the issue as the problem is fixed - the fix should be available via the interim update site and the SNAPSHOT Maven artifacts in a few hours (need to wait for our CI, and then for the Eclipse mirrors to update).","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6cHdLU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/153,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/153,epsilon,2815447010,153,"[DAP] Evaluation of expressions breaks ""Step Over""",agarciadom,46504,Antonio García-Domínguez,a.garcia-dominguez@york.ac.uk,CLOSED,2025-01-28T11:59:52Z,2025-01-28T12:03:57Z,"We reuse the same `IEolModule` object for evaluating expressions, so we can take advantage of all the models and configured operation factories. However, this creates a risk in isolating the evaluation of the expression from the regular state of the program and the debugger. In fact, we have detected that evaluating an expression will modify the `currentStatement` reference inside the `EolDebugger`, and will cause ""Step Over"" and other similar features to stop working.

We should change this to use a separate module object, with its own context. The context could mostly delegate on the original module's context, but it should have its own separate copy of the FrameStack, and it should use the regular (non-debugging) execution controller so it does not affect the state of the debugger's execution controller.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/154,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/154,epsilon,2826077579,154,Ant execution example and launch example for Excel driver,jgsuess,782737,Jörn Guy Süß,,CLOSED,2025-02-02T23:09:21Z,2025-02-11T08:12:51Z,"The Excel driver's is described as functionality is described using a [gradle build](https://eclipse.dev/epsilon/doc/articles/running-epsilon-ant-tasks-from-command-line/#excel) that includes stand-alone ant tasks.

The equivalent ant build to run in Eclipse is:


```xml
<project default=""load"">

    <!-- - - - - - - - - - - - - - - - - - 
          target: load                      
         - - - - - - - - - - - - - - - - - -->
    <target name=""load"">
        <epsilon.loadModel>
            <parameter name=""SPREADSHEET_FILE"" file=""\org.eclipse.epsilon.examples.excel\spreadsheet.xlsx"" />
            <parameter name=""CONFIGURATION_FILE"" file=""\org.eclipse.epsilon.examples.excel\mapping.xml"" />
        </epsilon.loadModel>
    </target>
</project>
```

This fails with 

```sh
Buildfile: ...\org.eclipse.epsilon.examples.excel\build.ant

load:

BUILD FAILED
C:\Users\sue005\git\epsilon\examples\org.eclipse.epsilon.examples.excel\build.ant:7: java.lang.NullPointerException: Cannot invoke ""org.eclipse.epsilon.common.dt.launching.extensions.ModelTypeExtension.createModel()"" because the return value of ""org.eclipse.epsilon.common.dt.launching.extensions.ModelTypeExtension.forType(String)"" is null

Total time: 81 milliseconds
```

The parameter `type=""ExcelModel""` has to be added, and the path adjusted as shown below.

```xml
<project default=""load"">

    <!-- - - - - - - - - - - - - - - - - - 
          target: load                      
         - - - - - - - - - - - - - - - - - -->
    <target name=""load"">
        <epsilon.loadModel type=""ExcelModel"">
            <parameter name=""SPREADSHEET_FILE"" file=""spreadsheet.xlsx"" />
            <parameter name=""CONFIGURATION_FILE"" file=""mapping.xml"" />
        </epsilon.loadModel>
    </target>
</project>
```

It would be great if that could be added to the documentation and updated in the example file.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/154,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6d9Qnd,epsilon,2650081757,154,NA,kolovos,3584136,Dimitris Kolovos,,NA,2025-02-11T08:12:50Z,2025-02-11T08:12:50Z,Thanks for reporting this! I've added a [new section](https://eclipse.dev/epsilon/doc/articles/excel/#ant-workflows) to the Excel driver documentation in https://github.com/eclipse-epsilon/epsilon-website/commit/8e42d6ca93adac3ddfac70761a6d335ac7aef8aa.,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6d9Qnd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/155,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/155,epsilon,2840775345,155,Strange 'var' bug in for loops,micfort,6042490,Michiel,,CLOSED,2025-02-09T16:04:27Z,2025-02-12T12:26:10Z,"Hi, 

I made an error in the following code:
```
var col : Sequence = Sequence{""a"", 1, 2, 2.5, ""b""};

for(var a in col) {
  a.println();
}

""---"".println();

if(false) {
  for(var a in col) {
    a.println();
  }
} else {
  for(var a in col) {
    a.println();
  }
}
```
The error is specificaly the `var` in the for loops.
Only the funny thing is that the first and second var is actually accepted when executing this small piece of EOL, but it fails on the third for loop with the var.
Epsilon can't execute it with the following error: Line: 13, Column: 2, Reason: missing EOF at 'else'

It's not really a big issue for me and when you remove the var it simple runs, but this does sound like a bug. 

Epsilon version 2.6.0.202501031142","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/155/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/155,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6dv3Ob,epsilon,2646569883,155,NA,kolovos,3584136,Dimitris Kolovos,,NA,2025-02-09T20:21:41Z,2025-02-09T20:21:41Z,"Many thanks for reporting this. It looks like you are encountering a regression which was [fixed](https://github.com/eclipse-epsilon/epsilon/commit/8d71031f49e3b0b1a46cbe075e622ddaa4cce96b) a couple of weeks ago. With the latest interim version the editor reports three syntax errors in your code and running the program fails early as expected (see below).

![Image](https://github.com/user-attachments/assets/4c87bb2f-b036-4df4-8a2b-4760b39e0e1b)
","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6dv3Ob/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/156,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/156,epsilon,2842266086,156,Regression in stack trace ranges,kolovos,3584136,Dimitris Kolovos,,CLOSED,2025-02-10T12:28:23Z,2025-02-12T12:24:33Z,"A regression seems to have been introduced at some point after 2.5 in how we calculate stack trace ranges. For example, running the following EOL program

```
if (""b"".bar()) {

}
```

produces the expected stack trace ranges in 2.5

```
Method 'bar' not found for: b
	at (/.../demo.eol@1:4-1:13)
	at (/...demo.eol@1:0-3:1)
	at (.../demo.eol@1:0-3:1)
	at (/.../demo.eol@1:0-3:1)
```

but not in 2.6

```
Method 'bar' not found for: b
	at (/.../demo.eol@1:4-1:11)
	at (/.../demo.eol@1:0-1:11)
	at (/.../demo.eol@1:0-1:11)
	at (/.../demo.eol@1:0-1:11)
```","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158,epsilon,2849907948,158,Memory leak introduced in commit 8d71031,Arkaedan,29588649,Sam Harris,,CLOSED,2025-02-13T04:16:09Z,2025-02-14T06:19:44Z,"Commit: https://github.com/eclipse-epsilon/epsilon/commit/8d71031f49e3b0b1a46cbe075e622ddaa4cce96b by @kolovos 

```java
protected static WeakHashMap<TokenStream, EpsilonParser> tokenStreamParsers = new WeakHashMap<TokenStream, EpsilonParser>();
```
From https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html
> Implementation note: The value objects in a WeakHashMap are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded.

Unfortunately, the `EpsilonParser` has a strong reference to the `TokenStream` via the parent `org.antlr.runtime.Parser` class. This means that none of the entries are removed, and the map just keeps growing forever.

Recently, we started seeing `java.lang.OutOfMemoryError: Java heap space` and `Gradle build daemon has been stopped: since the JVM garbage collector is thrashing` errors. This issue was not occurring prior to the 2nd of January. When looking at the heap memory at the time of the OutOfMemoryError, there are millions of instances of `org.antlr.runtime.CommonToken` so I believe the above issue is the culprit.","{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6eSwe2,epsilon,2655717302,158,NA,kolovos,3584136,Dimitris Kolovos,,NA,2025-02-13T07:14:04Z,2025-02-13T07:14:04Z,Many thanks for reporting this and apologies for the oversight - you're absolutely right. I've fixed this in https://github.com/eclipse-epsilon/epsilon/commit/0928d7dbd0c735037c910002ae23d29bb5f2a4a5 by caching token streams by ID so that garbage collection doesn't get blocked. ,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6eSwe2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ebYVQ,epsilon,2657977680,158,NA,Arkaedan,29588649,Sam Harris,,NA,2025-02-14T00:18:33Z,2025-02-14T00:18:33Z,Thanks @kolovos it was a fun challenge to track down this issue and I'm glad we caught it quickly. Also thanks for the quick fix!,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ebYVQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/158,https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ec6TT,epsilon,2658378963,158,NA,kolovos,3584136,Dimitris Kolovos,,NA,2025-02-14T06:19:43Z,2025-02-14T06:19:43Z,You're welcome and thanks for the thorough investigation!,"{""url"": ""https://api.github.com/repos/eclipse-epsilon/epsilon/issues/comments/IC_kwDOIEeNFM6ec6TT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
