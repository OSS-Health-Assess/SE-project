type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-archived/unide/issues/1,https://api.github.com/repos/eclipse-archived/unide/issues/1,unide,211243882,1,Small inaccuracy in Unide specification,ChristianRinn,10540226,,,CLOSED,2017-03-01T23:38:20Z,2017-10-09T12:31:15Z,"While working on a simple PPMP application in Go, I realized that the 
specification at http://www.eclipse.org/unide/specification/#__time
has a small inaccuracy. The spec says that the array of time offsets (""$_time"") 
is optional (""Required: no"").
To me this does not make sense because without the time offsets you can not 
have any values referenced to the timestamp and thus the whole series object 
is useless. Furthermore the UML diagram for MeasurementPayload marks the 
$_time-Field as required and I assume that this is correct.

By the way: I first tried to send this directly via e-mail to unide-inbox@eclipse.org but my mail got rejected with the notice ""Recipient address rejected: User unknown in local recipient table"".

Edit:
Found one more thing: All ""limits"" fields are obviously of type ""number"" but the UML diagram says they were strings.

Edit 2:
One more minor thing: The example for the ""series"" field
`""series"": {
  ""$_time"": [0, 22, 24, 27],
  ""temperature"": [33, 34, 33, 32],
  ""pressure"": [1, 1.001. 2.52. 3.2]
}`
is not valid JSON because the dots in the pressure array which separate the values should obviously be commas.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/1,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDY0NDU2Mw==,unide,284644563,1,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-03-07T07:35:07Z,2017-03-07T07:35:07Z,"Hi @ChristianRinn,
good observations! Indead, the $_time field was a long discussion, since we wanted to support other relations (force-displacement etc.) that you can find in process quality monitoring as well. Nevertheless, I think such scenarios would maybe be better addressed by a separate process interface. Then, we can include process steps, phases and so on.

So I agree with both of your findings: for this purpose, we'll make $_time mandatory and fix the dots in the array.
Thanks,
Axel","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NDY0NDU2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/2,https://api.github.com/repos/eclipse-archived/unide/issues/2,unide,227970494,2,Provide a C binding for PPMP,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,OPEN,2017-05-11T12:12:41Z,2018-03-29T09:52:29Z,"It would be useful to have a C library that people can use to serialize/unserialize PPMP message, and therefore use the protocol on microcontrollers, etc.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/2,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODEyMjgwMQ==,unide,328122801,2,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-09-08T14:45:39Z,2017-09-08T14:45:39Z,"If we can restrict the C implementation to one direction (sending), we would not need a JSON parser, and it would be straightforward to do an implementation in C.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODEyMjgwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/2,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5NDA2Mw==,unide,347494063,2,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-28T11:24:29Z,2017-11-28T11:24:29Z,@azoitl: would you provide a C binding?,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5NDA2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/5,https://api.github.com/repos/eclipse-archived/unide/issues/5,unide,231549470,5,JSON Schema for Measurement is not aligned with Java binding unit tests and spec on website,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-05-26T07:38:32Z,2017-05-29T06:14:55Z,"In the JUnit tests and in the spec on Unide website, a Measurement has ts, series, limits, as well as **result** and **code**.
Those two last properties don't seem to be part of the measurement_schema_v2.json.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/5,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDY0MQ==,unide,304580641,5,NA,muelsen,24450403,Henryk Fischer,,NA,2017-05-29T06:14:55Z,2017-05-29T06:14:55Z,FIXED: d02d50f86758993b6c56bc4e9ac47ea56d873ff9,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDY0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/6,https://api.github.com/repos/eclipse-archived/unide/issues/6,unide,231550336,6,Result should be an enum?,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-05-26T07:42:44Z,2017-05-29T06:14:44Z,"In Measurement and Process schemas, 'result' is defined as a simple string, whereas the spec says it's an enum { OK, NOK, UNKNOWN }

Therefore it should be defined as follows in the JSON schemas:
``` 
 ""result"": {
    ""enum"": [ ""OK"", ""NOK"", ""UNKNOWN"" ]
  },
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/6,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDYxNg==,unide,304580616,6,NA,muelsen,24450403,Henryk Fischer,,NA,2017-05-29T06:14:44Z,2017-05-29T06:14:44Z,FIXED: d02d50f86758993b6c56bc4e9ac47ea56d873ff9,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDYxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/7,https://api.github.com/repos/eclipse-archived/unide/issues/7,unide,231550746,7,Severity should be an enum,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-05-26T07:44:48Z,2017-05-29T06:14:24Z,"Severity in message schema should be an enum:
""HIGH""
""MEDIUM""
""LOW""
""UNKNOWN""","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/7,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDU0OA==,unide,304580548,7,NA,muelsen,24450403,Henryk Fischer,,NA,2017-05-29T06:14:24Z,2017-05-29T06:14:24Z,FIXED: dab4b0f723efe6df5efb2b8fd7d8c34ad9842346,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDU0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/8,https://api.github.com/repos/eclipse-archived/unide/issues/8,unide,231551085,8,Type in Message schema should be an enum,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-05-26T07:46:31Z,2017-05-29T06:14:06Z,"In the schema for Message, type should be defined as an enum:
""DEVICE""
""TECHNICAL_INFO""","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/8,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDUwNw==,unide,304580507,8,NA,muelsen,24450403,Henryk Fischer,,NA,2017-05-29T06:14:06Z,2017-05-29T06:14:06Z,FIXED: dab4b0f723efe6df5efb2b8fd7d8c34ad9842346,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDU4MDUwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/9,https://api.github.com/repos/eclipse-archived/unide/issues/9,unide,253975341,9,Should unit tests validate test JSON files against schemas?,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-08-30T12:08:25Z,2018-03-16T15:43:53Z,"The ""measurement.json"" file is not valid as per the json schema (i.e force and pressure measurements series do not have the $_time field set), which is very confusing since, well, it sounds like it is a reference document :-) Trying to POST it to the HTTP endpoint will fail with following error if validation is enabled:
```
{
    ""measurements[1].series.$_time"": ""is missing but it is required""
}
```

This issue might need to be splitted in several as you see fit:
* the measurement.json test file should certainly be valid as per the schema
* maybe part of each unit test should be a @Test that performs a JSON Schema validation?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/9,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5OTczNA==,unide,347499734,9,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-28T11:49:48Z,2017-11-28T11:49:48Z,"with suggested fixes in #21, also process.json needs an update (of specialValues section)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5OTczNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/9,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc0NzQ0Nw==,unide,373747447,9,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-03-16T15:22:57Z,2018-03-16T15:22:57Z,"Hi, I guess this should be either closed or moved to the unide.java repo (unide.python already does this)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc0NzQ0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/9,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc1NDM1NA==,unide,373754354,9,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-16T15:43:53Z,2018-03-16T15:43:53Z,"the [testfiles in unide.java](https://github.com/eclipse/unide.java/tree/master/src/test/resources) are now validated against [the schemas](https://github.com/eclipse/unide/tree/a19c21274ff6935f5bf30042ce72e9221349cc73/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v2). An additional automated validation would only makes sense if one of both frequently changes, which shouldn't be the case.
For a next v3 of schemas, the validation should again take place, of course","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc1NDM1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/10,unide,254263230,10,Provide a Python binding for PPMP,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-08-31T08:57:40Z,2018-03-16T15:20:31Z,It would be useful to have a Python library that people can use to serialize/unserialize PPMP objects.,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjIzNDYyOA==,unide,326234628,10,NA,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,NA,2017-08-31T08:58:31Z,2017-08-31T08:58:31Z,"something for @fpatz, maybe 😊 ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjIzNDYyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjIzNjUyMg==,unide,326236522,10,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-08-31T09:05:58Z,2017-08-31T09:05:58Z,"Yes, indeed. We are working on that.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjIzNjUyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjI5MTkyOA==,unide,326291928,10,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-08-31T13:16:18Z,2017-08-31T13:16:18Z,"Thanks, @kartben for bringing this up here. I wonder how the Unide team looks at this. Should a Python library for PPMP live here or in a separate project? It would be useful to publish a Python library using the standard channels like PyPI, which suggests a separate project, at least a separate repo etc.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjI5MTkyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjM1NTYzOA==,unide,326355638,10,NA,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,NA,2017-08-31T16:48:09Z,2017-08-31T16:48:09Z,"I briefly spoke with @muelsen this morning so I will let him correct me if I'm wrong. I think the Eclipse Unide team would be happy to have the code hosted on the ""official"" Unide repo - *distributing* through PyPi certainly sounds like a good idea. ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjM1NTYzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjM3Nzg2NA==,unide,326377864,10,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-08-31T18:10:29Z,2017-08-31T18:10:29Z,"I'd be ok with that if we find ways to handle the tooling issues:

- we'd have tightly coupled release life cycles, even for e.g. bugfix releases
- AFAIK, it is not easy to use Travis CI (or other CI/automation services) with multiple languages/subprojects in one Github repo
- top-level Maven would also have to drive the Python project automation or be moved down into the Java subproject

That's just what comes off the top of my head right now. The problems will only become harder when more programming language bindings start to appear. I'd assume, that one repo for each supported language will be easier to maintain long-term. The project page at eclipse.org could link to all those projects, and the repos can link back to the project page.

OTOH, there may be also pros: we can share test data, and interoperability testing with the server may be easier.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjM3Nzg2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/10,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5MDg5OQ==,unide,347490899,10,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-28T11:11:09Z,2017-11-28T11:11:09Z,"seems like the contribution questionnaire [has been approved](https://dev.eclipse.org/ipzilla/show_bug.cgi?id=14478), but there is [no progress on creating seperate repos for the bindings](https://bugs.eclipse.org/bugs/show_bug.cgi?id=525920). @kartben, any advice?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzQ5MDg5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/11,https://api.github.com/repos/eclipse-archived/unide/issues/11,unide,254265540,11,Bogus timestamp management in DAOs,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-08-31T09:06:15Z,2017-10-12T10:07:34Z,"Timestamps should be ""UTC'd"" when stored in influxDB. Right now they're converted to server's local time +1 hour (or something like that 😆 ).
I will send a pull request.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/13,https://api.github.com/repos/eclipse-archived/unide/issues/13,unide,254351607,13,[website] PPMP specification reference commercial product,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,CLOSED,2017-08-31T14:21:05Z,2017-10-09T12:30:54Z,"In https://www.eclipse.org/unide/specification/, the doc for ""operationStatus"" attribute of Process payload says:

```
The operationalStatus describes the status of a device. It is a string matching a definition in the Production Performance Manager.
```

Please fix so that the doc (and PPMP itself) does not require on commercial solutions.

","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/13,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTEzNDQxMA==,unide,335134410,13,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-10-09T11:46:43Z,2017-10-09T11:46:43Z,"Hi @kartben,
this should be resolved with [commit 72196cb2148f3d024639ac7629ef972ae7c8a1d2](https://git.eclipse.org/r/plugins/gitiles/www.eclipse.org/unide/+/72196cb2148f3d024639ac7629ef972ae7c8a1d2). Unfortunately, I cannot edit this issue in github (yet?!).","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTEzNDQxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/15,https://api.github.com/repos/eclipse-archived/unide/issues/15,unide,270641791,15,Meassurements: difference between spec and validation service: part,jwende,3383864,Joerg,,CLOSED,2017-11-02T12:51:27Z,2017-11-02T18:34:44Z,"response from validation service: ""part"":""is not defined in the schema and the schema does not allow additional properties""","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/15,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTUxODE2MQ==,unide,341518161,15,NA,jwende,3383864,Joerg,,NA,2017-11-02T18:34:43Z,2017-11-02T18:34:43Z,Double check my environment first,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTUxODE2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/16,https://api.github.com/repos/eclipse-archived/unide/issues/16,unide,270642316,16,Online Validation - Meassurement: difference between spec and validation service: meassurements or messages ?,jwende,3383864,Joerg,,CLOSED,2017-11-02T12:53:18Z,2018-02-01T14:14:50Z,"Invoking the validation service with a meassuremtns message returns the following error: 
""meassurements"":""is not defined in the schema and the schema does not allow additional properties"",""messages"":""is missing but it is required""","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/16,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTUxODQwOA==,unide,341518408,16,NA,jwende,3383864,Joerg,,NA,2017-11-02T18:35:34Z,2017-11-02T18:35:34Z,Double check my environment first ,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTUxODQwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/16,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTY0MjgwMQ==,unide,341642801,16,NA,jwende,3383864,Joerg,,NA,2017-11-03T08:17:40Z,2017-11-03T08:17:40Z,"The reason for this error message was:
- endpoint used for validating meassurement messages (https://unide.eclipse.org/rest/v2/measurement?validate=true)
- content-spec set for machine-messages  (urn:spec://eclipse.org/unide/machine-message#v2)

Re-opening the issue as I would expect other error messages if using the wrong endpoint.

Cheers
J.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTY0MjgwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/16,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2NTQwOA==,unide,341965408,16,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-05T11:16:08Z,2017-11-05T11:16:08Z,good suggestion. I'll have a look at that for the next release,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2NTQwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/16,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NzgzMQ==,unide,362277831,16,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T14:14:49Z,2018-02-01T14:14:49Z,"in the recently committed code, there a seperate validation endpoint now:
/rest/v2/validate. The message is determined by the content-spec. See:
[documentation - REST Endpoints](https://github.com/eclipse/unide/blob/d0cba44ac7528df58ffc2632e8daa1684901373c/servers/rest/src/main/docs/asciidoc/documentation.adoc#rest-endpoints)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NzgzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/17,https://api.github.com/repos/eclipse-archived/unide/issues/17,unide,270642995,17,change request: meassurements.series.$_time,jwende,3383864,Joerg,,OPEN,2017-11-02T12:55:38Z,2024-12-14T10:37:22Z,"Change request: please change the field name to something that can be used for a XML Binding too.
Thanks.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/17,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2NTI0MA==,unide,341965240,17,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-05T11:12:45Z,2017-11-05T11:12:45Z,"Transforming json keys directly to xml element names might e.g. also not work for arbitrary measurement names. These names are key ([specification](https://www.eclipse.org/unide/specification/#series)) and could be e.g. ""min pressure"" with blanks.
You could use a more verbose transformation like ([net.sf.json.xml.XMLSerializer](http://json-lib.sourceforge.net/apidocs/jdk15/net/sf/json/xml/XMLSerializer.html)). So I think there's no need to adapt the time field nor would that alone help.
What's the objective of transforming json to xml in that case and not directly bind to your native implementation (c, python, etc.)?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2NTI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/17,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk4MTk1Ng==,unide,341981956,17,NA,jwende,3383864,Joerg,,NA,2017-11-05T15:36:05Z,2017-11-05T15:36:05Z,"I'm using a tool currently that's xml-ish - e.g. it uses XPath for navigation and it expects that the format definition follows the XSD rules ...

Thanks
Joerg","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk4MTk1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/18,https://api.github.com/repos/eclipse-archived/unide/issues/18,unide,270646289,18,What is normative ?,jwende,3383864,Joerg,,CLOSED,2017-11-02T13:06:39Z,2018-02-01T14:10:07Z,"Just wondering - what is the normative reference for Unide ?
- the spec on the eclipse web side (https://www.eclipse.org/unide/proposal/)
or
- the validation service and the embedded json schema files ?

Thanks for clarification 
J.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/18,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2MzcxMg==,unide,341963712,18,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-11-05T10:44:49Z,2017-11-05T10:44:49Z,"Hi @jwende ,
both should be in sync. If you find deviations, let me now, so we can make sure they are aligned.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk2MzcxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/18,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NjUzNw==,unide,362276537,18,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T14:10:07Z,2018-02-01T14:10:07Z,"The validation service uses json schema. The website specification is now also generated from these very json schema files.
I'm still looking for a way to enforce that two arrays should have the same length. Unfortunately, json-schema or json-path are not powerful enough, in my opinion.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NjUzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/19,https://api.github.com/repos/eclipse-archived/unide/issues/19,unide,271736965,19,activate DB: document or set default,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2017-11-07T07:43:44Z,2018-02-01T14:07:18Z,"it's not obvious that the REST server needs to activate persistency after boot.
This test show how:
 https://github.com/eclipse/unide/blob/master/servers/rest/src/test/java/server/RestEndpointTests.java#L135

Expected:
* Either document this switch properly or enable persistency by default","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/19,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NTc5MA==,unide,362275790,19,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T14:07:17Z,2018-02-01T14:07:17Z,"it doesn't anymore. Persistence is defined via setting ""persistence.enable"": true/false, see
https://github.com/eclipse/unide/blob/fd9c7b956797ac749e129b176c4619195fbffab2/servers/rest/src/main/resources/application_conf.json#L3","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NTc5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/20,https://api.github.com/repos/eclipse-archived/unide/issues/20,unide,276956285,20,REST Server db index,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2017-11-27T09:47:36Z,2018-02-01T14:05:41Z,"In order to save measurements with identical deviceId and timestamp but different device property names, add such tag()
https://github.com/eclipse/unide/blob/2a12a7b94215ac795c7222cc82671e476eb69cba/servers/rest/src/main/java/server/persistency/dao/MeasurementDAO.java#L102-L103

also for process shutoffvalues:
https://github.com/eclipse/unide/blob/2a12a7b94215ac795c7222cc82671e476eb69cba/servers/rest/src/main/java/server/persistency/dao/ProcessDAO.java#L182-L186
and special values:
https://github.com/eclipse/unide/blob/2a12a7b94215ac795c7222cc82671e476eb69cba/servers/rest/src/main/java/server/persistency/dao/ProcessDAO.java#L229-L232

if measurements() always hold the deviceId, do we need another tag deviceId?
in [ProcessDao](https://github.com/eclipse/unide/blob/eec10c6d75a374df84a598f73d0321c5e9d004f4/servers/rest/src/main/java/server/persistency/dao/ProcessDAO.java#L368), [MachineMessageDao](https://github.com/eclipse/unide/blob/eec10c6d75a374df84a598f73d0321c5e9d004f4/servers/rest/src/main/java/server/persistency/dao/MachineMessageDAO.java#L111) and [MeasurementDao](https://github.com/eclipse/unide/blob/2a12a7b94215ac795c7222cc82671e476eb69cba/servers/rest/src/main/java/server/persistency/dao/MeasurementDAO.java#L166)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/20,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzYyODI5Mg==,unide,347628292,20,NA,davidgs,2071898,David G. Simmons,,NA,2017-11-28T19:00:31Z,2017-11-28T19:00:31Z,"The Device ID should not be the Measurement, but a Tag on the measurement. ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzYyODI5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/20,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NTM0Ng==,unide,362275346,20,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T14:05:40Z,2018-02-01T14:05:40Z,"@davidgs: thanks, that's how we did it now!
The *DAOs are now called [*Comsumer](https://github.com/eclipse/unide/tree/master/servers/rest/src/main/java/server/receiver/influxdb).
The documentation for the influx mapping has been documented in [documentation - InfluxDB Schema Design](https://github.com/eclipse/unide/blob/master/servers/rest/src/main/docs/asciidoc/documentation.adoc#influxdb-schema-design)
Example:
https://github.com/eclipse/unide/blob/d0cba44ac7528df58ffc2632e8daa1684901373c/servers/rest/src/main/java/server/receiver/influxdb/MachineMessageConsumer.java#L50-L53","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3NTM0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/21,unide,277355211,21,Fix json schemas,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2017-11-28T11:45:47Z,2018-02-01T13:53:10Z,"There are a few inconsistencies between json schema and [online specification](https://www.eclipse.org/unide/specification/). I suggest to
* general
  * make schema draft-06 compliant
  * add 'id' and 'descriptions' where applicable
  * add 'type' and 'default' for enums
  * add 'required' fields where necessary
  * make 'additionalProperties': true explicit for 'metaData'
* measurement_schema
  * complete 'limits' specification
  * add 'patternProperties' and minProperties detail to 'series'
* process_schema
  * make 'process' and 'name' of a 'program' mandatory
  * fix 'shutoffValues', having properties not items
  * fix 'limits', having properties not items and number values rather than object values as limits
  * fix 'specialValues' to be an array of specialValue items with 'name' for indicating the nature, rather than one single object with its keys. Offering optional '$_time' tag to be consistent with measurements.
  * complete 'series' definition","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTkxMTE0Mw==,unide,349911143,21,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-12-07T09:27:10Z,2017-12-07T09:27:10Z,"limits currently have one entry per lower/upper warn/error per measurement point. In the example of 
https://www.eclipse.org/unide/specification/#limits_process
it shows an array. So should limits in measurement and process messages be arrays or single values?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTkxMTE0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTk2MzUyNw==,unide,349963527,21,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-12-07T13:15:18Z,2017-12-07T13:15:18Z,I think limits should be single-valued. Do you have use cases that demand multiple limits?,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTk2MzUyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTk4MzU5NA==,unide,351983594,21,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-12-15T11:30:08Z,2017-12-15T11:30:08Z,"for processes, there might be a different limit in the heating-up phase than for later production phase.
Maybe we keep a limits array as an alternative to one constant value. The former has to be equal length to the corresponding measurements, though. That cannot be checked with schema, but maybe we could cover that with json path or other methods?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTk4MzU5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjY2MTkyNQ==,unide,352661925,21,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2017-12-19T07:29:40Z,2017-12-19T07:29:40Z,"No idea, honestly. It *feels* quite complex. My domain expertise is too limited to assess this properly.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjY2MTkyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1Nzg3ODU1MQ==,unide,357878551,21,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-01-16T07:47:20Z,2018-01-16T07:47:20Z,"while reviewing the schemas, I also
* sorted the properties for improved readability
* added minItems: 1 to measurement payload / measurements and message payload / messages","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1Nzg3ODU1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/21,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3MTkzNQ==,unide,362271935,21,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T13:53:10Z,2018-02-01T13:53:10Z,schemas updated and refactored to seperate folder: [/ppmp/ppmp-schema](https://github.com/eclipse/unide/tree/master/ppmp/ppmp-schema),"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjI3MTkzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/22,https://api.github.com/repos/eclipse-archived/unide/issues/22,unide,279067864,22,Release artifacts location,sophokles73,5682135,Kai Hudalla,,CLOSED,2017-12-04T16:53:05Z,2017-12-15T11:25:51Z,"Hi,
I have seen that you have created an 0.1.0 release. I haven't been able to find the artifacts on Maven Central, though. Is this intentional, i.e. are you not planning to make the artifacts available from there?
If so, is there another Maven repository that I can get the artifacts from?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/22,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTk4MjcxOQ==,unide,351982719,22,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2017-12-15T11:25:50Z,2017-12-15T11:25:50Z,"Please find the current snapshot here: https://repo.eclipse.org/content/repositories/unide-snapshots/
and the (future) releases here: https://repo.eclipse.org/content/repositories/unide-releases/","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTk4MjcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/23,unide,293049813,23,Set UTF-8 as string encoding format for all PPMP message types,muelsen,24450403,Henryk Fischer,,CLOSED,2018-01-31T06:54:21Z,2018-02-02T13:11:43Z,"In order to avoid incompatibilities of PPMP messages because the message receiver is using a different format than the sender, we should set UTF-8 as standard for PPMP.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTg1NTgyMw==,unide,361855823,23,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2018-01-31T08:13:36Z,2018-01-31T08:13:36Z,"Shouldn't we simply rely on existing JSON's standards? According to https://www.ietf.org/rfc/rfc4627.txt, JSON is ok with any UTF encoding. Most people probably use UTF-8 anyway, but to me enforcing the encoding on the schema level on top of JSON itself feels like the wrong layer.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTg1NTgyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTg1OTU4Nw==,unide,361859587,23,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-01-31T08:30:37Z,2018-01-31T08:30:37Z,"@muelsen: did you mean UTF **-8** in particular or just UTF?
[rfc4627](https://www.ietf.org/rfc/rfc4627.txt) defines Unicode encoding and favors UTF-8. Could json even be encoded in [CESU](https://en.wikipedia.org/wiki/CESU-8)? Maybe we can ignore that. I have never seen that.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTg1OTU4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM2MTg5OA==,unide,362361898,23,NA,muelsen,24450403,Henryk Fischer,,NA,2018-02-01T18:41:46Z,2018-02-01T18:41:46Z,"Hi @ameinhardt , @fpatz ,
Currently we are expecting UTF-8 in our interface. How can I determine wether it is UTF-8 or -16 or... when I receive a message?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM2MTg5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM4NjE3OA==,unide,362386178,23,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-01T20:07:06Z,2018-02-01T20:07:06Z,"@muelsen: have you checked [rfc4627](https://www.ietf.org/rfc/rfc4627.txt), section 3? The first two characters of a json string are always ASCII, so the first 4 bytes max would tell. Jackson should be able to handle that for you.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjM4NjE3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjQ5NjAzOA==,unide,362496038,23,NA,muelsen,24450403,Henryk Fischer,,NA,2018-02-02T06:10:05Z,2018-02-02T06:10:05Z,"@ameinhardt I checked that, but how does it look like? Are these characters placed in front of the JSON-object? Do you have an example for that?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjQ5NjAzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxNTI5MA==,unide,362515290,23,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-02T08:10:12Z,2018-02-02T08:10:12Z,"Because of the json grammar the first two characters, part of the JSON String. Roughly:
JSON-text = object / array
value = false / null / true / object / array / number / string
object = {\s* string ...
array = [\s* value ...

so the first two characters would always be bracket + something that is in ascii range.
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxNTI5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxNjkwMQ==,unide,362516901,23,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-02-02T08:18:31Z,2018-02-02T08:18:31Z,"@muelsen if we stick to `rfc4627`, the first two chars must be ASCII (in our case, `{""`, but beware of whitespaces) so you can test the first 4 bytes of the stream and see if it is `utf-8`, `utf-16` or `utf-32`.

As a side note, there are unfortunately many JSON specifications, and according to some, the rule of the first two characters being ASCII does not hold true (e.g. `""ñaaa""` is valid JSON according to  `rfc7158`). But since our payload has an object as a root node, we won't be running into that issue. 

I would suggest that we define in the spec the standard of JSON we are using, and optionally mentioning  which encodings are allowed by this standard.

The first chapter of this article is an interesting read: http://seriot.ch/parsing_json.php","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxNjkwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxOTg0OQ==,unide,362519849,23,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-02-02T08:32:34Z,2018-02-02T08:32:34Z,"BTW @muelsen, I think you shouldn't care about these details unless you are building your own JSON parser...","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjUxOTg0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU0Njg4OQ==,unide,362546889,23,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-02T10:22:15Z,2018-02-02T10:22:15Z,"I think we should stick to the most recent json definition. RFC8259 obsoletes the other rfcs above. It's true that it doesn't have the JSON-text = object /array restriction, but JSON-text can be all values. Nevertheless, all PPMP documents are objects, so the first 4 bytes should still identify the UTF encoding.
One issue could be bom. I suggest we also handle that according to the above RFC:

> Implementations MUST NOT add a byte order mark (U+FEFF) to the beginning of a networked-transmitted JSON text.  In the interests of interoperability, implementations that parse JSON texts MAY ignore the presence of a byte order mark rather than treating it as an error.

In short: PPMP is JSON (as currently defined in RFC8259). For best interoperability, UTF-8 without bom is preferred.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU0Njg4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU3ODE1MA==,unide,362578150,23,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-02-02T12:51:46Z,2018-02-02T12:51:46Z,"@ameinhardt, 

> [ameinhardt] I think we should stick to the most recent json definition

Right, but to be concise: to the most recent RFC JSON Specs, since there are at least 3 non-RFC JSON specifications. 

> [ameinhardt] For best interoperability, UTF-8 without bom is preferred.

It is not preferred, it is actually mandatory. Maybe this is a German-English lost in translation, but `MUST NOT` means that it is not allowed to happen. JSON encoded in UTF-8-BOM is broken JSON. If some parsers want to accept it, it's up to them.

Then.... actually, the `RFC8259` is pretty strict about the encoding. From the RFC doc:
> JSON text exchanged between systems that are not part of a closed
> ecosystem MUST be encoded using UTF-8.

In short: we state that we stick to RFC8259, which means: UTF-8. No UTF-8-BOM, no UTF-16, no UTF-32. 

","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU3ODE1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/23,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU4MjMzMA==,unide,362582330,23,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-02T13:11:33Z,2018-02-02T13:11:33Z,"even better, thanks for the clarification @bgusach! I'll put that into the [faq](https://www.eclipse.org/unide/faq)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MjU4MjMzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/26,https://api.github.com/repos/eclipse-archived/unide/issues/26,unide,294141230,26,Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT,VolITSol,25952404,VolITSol,christian@volitsol.at,CLOSED,2018-02-03T20:11:28Z,2018-02-05T08:09:27Z,"Hi,

I want to build unide but always get:
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] ppmp-schema ........................................ SUCCESS [  9.562 s]
[INFO] Unide .............................................. SUCCESS [  0.842 s]
[INFO] unide-servers ...................................... SUCCESS [  0.856 s]
[INFO] unide-server ....................................... FAILURE [  5.429 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17.035 s
[INFO] Finished at: 2018-02-03T21:06:27+01:00
[INFO] Final Memory: 13M/245M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal on project ppmp-server: Could not resolve dependencies for project org.eclipse.iot.unide.ppmp:ppmp-server:jar:0.2.0-SNAPSHOT: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project ppmp-server: Could not resolve dependencies for project org.eclipse.iot.unide.ppmp:ppmp-server:jar:0.2.0-SNAPSHOT: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:221)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:127)
        at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:245)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:199)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.project.DependencyResolutionException: Could not resolve dependencies for project org.eclipse.iot.unide.ppmp:ppmp-server:jar:0.2.0-SNAPSHOT: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT
        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:211)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:195)
        ... 23 more
Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT
        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:384)
        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:205)
        ... 24 more
Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT
        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:444)
        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:246)
        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:367)
        ... 25 more
Caused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT
        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:434)
        ... 27 more
[ERROR]
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :ppmp-server","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/26,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Mjg1NDM2OA==,unide,362854368,26,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-02-03T21:06:52Z,2018-02-03T21:06:52Z,"Hi @VolITSol,
thanks for pointing that out! Indeed there's a mistake [in the documentation for the server](https://github.com/eclipse/unide/blob/a85e6a10e2a359c82712932dd8714aa45a95f428/servers/rest/src/main/docs/asciidoc/documentation.adoc#getting-started): the first necessary dependency is now located in the [unide.java repository](https://github.com/eclipse/unide.java). The second one (ppmp-schemas) will remain in this main repository. You would have to `mvn install` both first. Once we finalize a release they shall be available on maven central and you don't have to manually build the repositories.
You should be able to successfully build the REST server after, can you?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Mjg1NDM2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/27,https://api.github.com/repos/eclipse-archived/unide/issues/27,unide,294305624,27,Cannot Install/Compile Client nor website with npm install,VolITSol,25952404,VolITSol,christian@volitsol.at,CLOSED,2018-02-05T08:15:38Z,2018-03-29T08:52:05Z,"Hi,

Tried do install client and website but get this error... Using Win 10 and Powershell...
Is this a Win-Problem? 

Thanks a lot for any help!!!

PS C:\development\unide\website> npm version
{ unide: '1.0.0',
  npm: '3.10.10',
  ares: '1.10.1-DEV',
  http_parser: '2.7.0',
  icu: '58.2',
  modules: '48',
  node: '6.11.4',
  openssl: '1.0.2l',
  uv: '1.11.0',
  v8: '5.1.281.108',
  zlib: '1.2.11' }

PS C:\development\unide\website> npm install

[npm-debug.log](https://github.com/eclipse/unide/files/1694304/npm-debug.log)
> unide@1.0.0 postinstall C:\development\unide\website
> npm run generate


> unide@1.0.0 generate C:\development\unide\website
> nuxt generate

C:\development\unide\website\node_modules\nuxt\lib\core\module.js:14
  async ready() {
        ^^^^^

SyntaxError: Unexpected identifier
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (C:\development\unide\website\node_modules\nuxt\lib\core\index.js:2:16)

npm ERR! Windows_NT 10.0.10586
npm ERR! argv ""C:\\development\\nodejs\\node.exe"" ""C:\\development\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""run"" ""generate""
npm ERR! node v6.11.4
npm ERR! npm  v3.10.10
npm ERR! code ELIFECYCLE
npm ERR! unide@1.0.0 generate: `nuxt generate`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the unide@1.0.0 generate script 'nuxt generate'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the unide package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     nuxt generate
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs unide
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls unide
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\development\unide\website\npm-debug.log

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""win32"",""arch"":""x64""})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\watchpack\node_modules\chokidar\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""win32"",""arch"":""x64""})
npm WARN eslint-config-vue@2.0.2 requires a peer of eslint@^2.0.0 || ^3.0.0 but none was installed.
npm ERR! Windows_NT 10.0.10586
npm ERR! argv ""C:\\development\\nodejs\\node.exe"" ""C:\\development\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install""
npm ERR! node v6.11.4
npm ERR! npm  v3.10.10
npm ERR! code ELIFECYCLE
npm ERR! unide@1.0.0 postinstall: `npm run generate`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the unide@1.0.0 postinstall script 'npm run generate'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the unide package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     npm run generate
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs unide
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls unide
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\development\unide\website\npm-debug.log","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/27,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIxODQzNA==,unide,370218434,27,NA,he99,19685501,,,NA,2018-03-04T10:33:36Z,2018-03-04T10:33:36Z,Maybe [nuxt issue #6212](https://github.com/nuxt/nuxt.js/issues/2612)?,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIxODQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/27,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDQ0MjIyMQ==,unide,370442221,27,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-05T14:48:11Z,2018-03-05T14:48:11Z,"Sorry for the late reply, @VolITSol.
I think async/await was introduced with node.js 7.6 or so. Therefore, Nuxt.js requires [>=8](https://github.com/nuxt/nuxt.js/blob/a6b8fe565a168784dd851c1299d5e9725cca0f97/package.json#L56) and the [html5 client as well](https://github.com/eclipse/unide/blob/be901263d95bb82a75f0f4fa73de1d123f78d907/clients/binsa/package.json#L104).
If you upgrade your node.js, do you still get the problem?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDQ0MjIyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/31,unide,303653412,31,ppmp-server: Could not resolve dependencies,davidgs,2071898,David G. Simmons,,CLOSED,2018-03-08T22:19:42Z,2018-03-29T09:13:16Z,"Trying to install and run the united server on Mac OS X ... 

`[INFO] Building unide-server 0.2.0-SNAPSHOT`
`[INFO] ------------------------------------------------------------------------`
`[WARNING] The POM for org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT is missing, no dependency information available`
`[INFO] ------------------------------------------------------------------------`
`[INFO] Reactor Summary:`
`[INFO]`
`[INFO] ppmp-schema ........................................ SUCCESS [  1.843 s]`
`[INFO] Unide .............................................. SUCCESS [  0.027 s]`
`[INFO] unide-servers ...................................... SUCCESS [  0.023 s]`
`[INFO] unide-server ....................................... FAILURE [  0.844 s]`
`[INFO] ------------------------------------------------------------------------`
`[INFO] BUILD FAILURE`
`[INFO] ------------------------------------------------------------------------`
`[INFO] Total time: 2.939 s`
`[INFO] Finished at: 2018-03-08T17:14:40-05:00`
`[INFO] Final Memory: 13M/245M`
`[INFO] ------------------------------------------------------------------------`
`[ERROR] Failed to execute goal on project ppmp-server: Could not resolve dependencies for project org.eclipse.iot.unide.ppmp:ppmp-server:jar:0.2.0-SNAPSHOT: Could not find artifact org.eclipse.iot.unide.ppmp:ppmp-java-binding:jar:0.2.0-SNAPSHOT -> [Help 1]`
`[ERROR]`
`[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.`
`[ERROR] Re-run Maven using the -X switch to enable full debug logging.`
`[ERROR]`
`[ERROR] For more information about the errors and possible solutions, please read the following articles:`
`[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException`
`[ERROR]`
`[ERROR] After correcting the problems, you can resume the build with the command`
`[ERROR]   mvn <goals> -rf :ppmp-server`","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MTczNDA5MQ==,unide,371734091,31,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-09T07:22:17Z,2018-03-09T07:22:17Z,"Hi David,
If you git clone and mvn install the java binding first:
https://github.com/eclipse/unide.java
Does it work after?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MTczNDA5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MTgxMjYwOA==,unide,371812608,31,NA,davidgs,2071898,David G. Simmons,,NA,2018-03-09T13:32:06Z,2018-03-09T13:32:06Z,"Sadly, no. 
`[INFO] ------------------------------------------------------------------------`
`[INFO] Reactor Summary:`
[org.eclipse.iot.unide.server.jdbc.JdbcMockFactoryTest.txt](https://github.com/eclipse/unide/files/1797023/org.eclipse.iot.unide.server.jdbc.JdbcMockFactoryTest.txt)
[org.eclipse.iot.unide.server.web.RestEndpointPostgresTest.txt](https://github.com/eclipse/unide/files/1797024/org.eclipse.iot.unide.server.web.RestEndpointPostgresTest.txt)
[org.eclipse.iot.unide.server.web.RestEndpointValidationTest.txt](https://github.com/eclipse/unide/files/1797025/org.eclipse.iot.unide.server.web.RestEndpointValidationTest.txt)
[org.eclipse.iot.unide.server.web.RestEndpointInfluxTest.txt](https://github.com/eclipse/unide/files/1797026/org.eclipse.iot.unide.server.web.RestEndpointInfluxTest.txt)




`[INFO]`
`[INFO] unide-servers ...................................... SUCCESS [  0.429 s]`
`[INFO] unide-server ....................................... FAILURE [ 42.398 s]`
`[INFO] ------------------------------------------------------------------------`
`[INFO] BUILD FAILURE`
`[INFO] ------------------------------------------------------------------------`
`[INFO] Total time: 43.121 s`
`[INFO] Finished at: 2018-03-09T08:28:03-05:00`
`[INFO] Final Memory: 90M/702M`
`[INFO] ------------------------------------------------------------------------
`[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project ppmp-server: There are test failures.`
`[ERROR]`
`[ERROR] Please refer to /Users/davidgs/EclipseIoT/unide/servers/rest/target/surefire-reports for the individual test results.`
`[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project ppmp-server: There are test failures.`
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MTgxMjYwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc1ODY2MA==,unide,373758660,31,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-16T15:56:30Z,2018-03-16T15:56:30Z,"Hi @davidgs,
sorry for the inconvenience! Before, I had problems with the tests on the eclipse jenkins because of timezone issues. It's hard to tell if that happens here again, based on the infos.
For your purpose, you might also want to just use an automatic build directly from the [eclipse repo](https://repo.eclipse.org/#nexus-search;quick~ppmp-server)  like [ppmp-server-0.2.0-20180315.235004-19.jar](https://repo.eclipse.org/service/local/repositories/unide-snapshots/content/org/eclipse/iot/unide/ppmp/ppmp-server/0.2.0-SNAPSHOT/ppmp-server-0.2.0-20180315.235004-19.jar) and start it with an [appropriate configuration](https://github.com/eclipse/unide/blob/master/servers/rest/src/main/docs/asciidoc/documentation.adoc#configuration).","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3Mzc1ODY2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2ODI4OQ==,unide,377168289,31,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-29T08:51:41Z,2018-03-29T08:51:41Z,"Hi @davidgs ,
I added a description on how to quickly get started with the REST Server here:
https://github.com/eclipse/unide/blob/master/website/blog/Release-0.2.0.md

Also I saw from your logs:
```
java.lang.RuntimeException: No stub for url: 'http://localhost:8080/sqlStub' body: '<html>
<head><title>404 Not Found</title></head>
<body bgcolor=""white"">
<center><h1>404 Not Found</h1></center>
<hr><center>nginx/1.13.9</center>
```
It seems that there's an nginx running on that port, so the tests possibly can't spawn the test interface.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2ODI4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/31,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE3NDEyMQ==,unide,377174121,31,NA,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,NA,2018-03-29T09:13:15Z,2018-03-29T09:13:15Z,"> It seems that there's an nginx running on that port, so the tests possibly can't spawn the test interface.

It is probably not so uncommon to have services running on the build machine on port 8080 - maybe worth updating the tests to use a random port and/or try 8081, 8082, etc. automatically?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE3NDEyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/32,https://api.github.com/repos/eclipse-archived/unide/issues/32,unide,305457072,32,Unable to read data from persistance DB,karthigaChell,36759603,,,CLOSED,2018-03-15T08:32:33Z,2018-05-02T09:04:18Z,"Hi, 
I have downloaded and installed  master(0661bbc) on windows 7. 
I have configured ""persistence.system"" : ""InfluxDB"". When I run ppmp server, the databases Messages, Measurements and Processes were created in Influxdb. But ppmp_messages,  ppmp_measurements and ppmp_processes tables were not created by ppmp server.

Thanks, 
Karthiga Rajendran","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/32,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2NzE1NA==,unide,377167154,32,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-29T08:47:15Z,2018-03-29T08:47:15Z,"Hi @karthigaChell,
I can not reproduce that based on your information. Can you try version 0.2.0 of the REST server [as described in the blog entry](https://github.com/eclipse/unide/blob/master/website/blog/Release-0.2.0.md) and trace the (http-) communication from REST Server to influxDB?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2NzE1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/33,unide,305984667,33,Suggestions for the specification,bgusach,1668296,Bor González Usach,bgusach@gmail.com,CLOSED,2018-03-16T16:01:24Z,2019-03-02T11:36:35Z,"Hi there,

I think there are a few corners of the specification that could be improved or explained better. Maybe some of them have a documented explanation somewhere, but I could not find it. Well, there we go: 

- Naming should be consistent. Some parts refer to machine messages as `Machine Message` while others do as `Machine Message Payload` or `Message Payload` (this last one is especially confusing, since ""message"" is used everywhere). Same goes for Measurement and Process messages.
- There are two classes called `Measurement`, one part of the `MeasurementPayload` and the other part of `ProcessPayload`. Naming is confusing, and the classes are very overlapping. Maybe they could be combined and reused?
- Related to previous point, there are two `Series` classes, one belonging to `ProcessPayload.Measurement` and the other one  to `MeasurementPayload.Measurement`. One requires offsets while the other one does not. Is this meant to be so? if so, could anybody give an example? I can't think of a meaningful series without a time offset...
- How are the two possibilities of `ProcessPayload.Measurement.Limits` to be understood? How can a physic dimension have multiple limits at the same point in time?
- The `ProcessPayload` class is too thin, and (at least in my limited understanding) conceptually pretty much the same thing as the `ProcessPayload.Process`. Maybe they could be conflated?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NTIwOTEwNQ==,unide,375209105,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-22T07:55:39Z,2018-03-22T07:55:39Z,"Hi @bgusach ,
I agree with you. Furthermore, I think the idea of PPMP, to me a one-way communication stream and to be simple, should remain. I see PPMP as format structure in between transport protocol and further semantic.
As discussed with @fpatz , we want to
* clean up the syntax like you suggest
* add reasonable lengths to all fields
* add minor improvements like splitting ""operationalStatus"" into ""deviceStatus"" and ""operationalMode""
* add the possibility to **link** PPMP to further semantic description that seldomly or never change (e.g. the value of measurement point ""temperature"" indicates heat in Celsius and should be between 36° and 42°). See also #35 
A context sections that has the same intention should not be included in every payload
* add examples / recommendations / tutorials / howto use the format, including architecture blueprint or ways to shrink it (protobuf)

What do you think?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NTIwOTEwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NjE2OTY2Mw==,unide,376169663,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-03-26T13:41:23Z,2018-03-26T13:41:23Z,"@ameinhardt sounds pretty good. 

How do you want to proceed? are those points already discussed and agreed to a certain level of detail? or they rather need to be further discussed?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NjE2OTY2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2NTkzNQ==,unide,377165935,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-29T08:42:41Z,2018-03-29T08:42:41Z,"Since the unide version 0.2.0 was finalized, we could use the current 0.3.0-SNAPSHOT to create a new ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3 with improvements.
* Cleanup and operationalStatus could be rather straightforward,
* length of fields might be subject of discussion,
* context (unit etc.) link is controversion and needs design (redundancy for simplicity vs. avoiding that via link or allow both). See also #35 
* architecture, blueprint, tutorials are to dos

@bgusach: where could you support?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE2NTkzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzUxMDg5OA==,unide,383510898,33,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-04-23T09:21:48Z,2018-04-23T09:21:48Z,"Hi,

I'd like to suggest a field length change to `code` - see [`$​.messages[*]​.code`](http://www.eclipse.org/unide/specification/machine-message#p-12) in machine messages.  It's currently limited to 36 characters.

We use the machine messages to send events, with structured codes in the form `com/domain/app-name/event-name`, so 36 ends up being really tight.  A max length of 128 would alleviate the situation.

If this field is altered, the field `$​.part​.code` (in both measurement messages and process messages) should be altered to match.
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzUxMDg5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDY2NjI1OA==,unide,384666258,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-04-26T14:42:50Z,2018-04-26T14:42:50Z,"@bgusach: I didn't understand your last point. Did you mean ""program"" vs ""process""?
limits can vary during the run of a process (in the process of driving from Bremen to Berlin, there are different speed limits along the way).
Regarding time in measurements, we wanted to give the option to express non-time relations like pressure over distance. Maybe that's only a view aspect, though.
What do you think, @bf-bryants, is there always a time component in measurement data?
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDY2NjI1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDcwNDk1OQ==,unide,384704959,33,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-04-26T16:28:10Z,2018-04-26T16:28:10Z,"Having a primary axis other than time is quite a conceptual shift from the current view of what measurement data is - as it is currently gathered in real time.  We would be moving away from data gathering to a more general data transport format.  The pressure/distance example sounds more like a rule set if there's no time component.  Should we be looking at a new PPMP message type for such things?

How would we deal with data split over multiple messages?  At the moment, the time component is mandatory.  Everything can be ordered correctly.  Moving to an alternate (and therefore non-mandatory) axis could be a source of problems.

Note that a system that measures both pressure and distance over time will use the current model; the receiving end can choose to ignore the time component.  Do we have an explicit need to transport measurement data without a time component?

Our use cases for collecting sensor data all require timestamps as part of the data qualification, but I would be interested to hear about other use cases.

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDcwNDk1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDkxNTcyOQ==,unide,384915729,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-04-27T09:21:30Z,2018-04-27T09:21:30Z,"I have created draft schemas for v3. You can find them at [ppmp-schema.../v3](https://github.com/eclipse/unide/tree/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3)

Note that
* there is a file for common definitions
* a context in measurement.series including limit and (data-) type
* id/Id/ID corrections
* renaming of redundant names (""part.partId"" -> ""part.id"")
* mode / state instead of operationalStatus
* no complete length definitions yet

The website and diagrams are also updated, but only reachable via direct links:
* https://www.eclipse.org/unide/specification/v3/machine-message/
* https://www.eclipse.org/unide/specification/v3/measurement-message/
* https://www.eclipse.org/unide/specification/v3/process-message/
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDkxNTcyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTM1MjUxNw==,unide,385352517,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-30T09:40:14Z,2018-04-30T09:40:14Z,"Hi @ameinhardt 

> @bgusach: I didn't understand your last point. Did you mean ""program"" vs ""process""?

No, I meant `ProcessPayload`. I have the feeling that the info contained in the classes `ProcessPayload` and `Process` semantically belongs together and could be merged into one. (In general I think there are too many classes with similar names, and some of them could be merged, like these two).

> limits can vary during the run of a process (in the process of driving from Bremen to Berlin, there are different speed limits along the way).

That is true, but still feels unclear to me. Let's use the Bremen-Berlin example. Say:
* There are two speed limits (`lim1`, `lim2`) in the route
* You produce a single `Measurement` for the whole trip
* This `Measurement` has a `Series` with hundreds of velocity values: `$_time=[0, 100, 200, ...], speed=[80, 100, 120, ...]`

How do we know that at the time of the 507th element, the limit `lim1` was active? I think we can't.

 I would find it more elegant if each `Measurement` had `0..1` `Limits`, and if the car moves from `lim1` to `lim2`, the measurement has to be stopped, and a new one created. This way you would be univocally defining a limit for a given time point.

> Regarding time in measurements, we wanted to give the option to express non-time relations like pressure over distance. Maybe that's only a view aspect, though.

I agree with @bf-bryants , moving from time to another unit is a huge shift in the semantics. And the pressure-distance distribution still needs IMHO a time component in the context of machine performance management: that happened at a given moment and you most probably want to know when. 

On top of that, these distributions must be discrete, right? for instance you have 100 pressure sensors over your 100 meter pipe, you could still have 100 dimensions in the `Series` for each offset. Something like: `$_time=[0, ...], press_0=[80, ...], press_1=[40, ...], ... press_99=[120, ...]` and thus you could somehow represent pressure over space.

Does it make sense? :)
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTM1MjUxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTM3NjQ5MA==,unide,385376490,33,NA,muelsen,24450403,Henryk Fischer,,NA,2018-04-30T11:51:16Z,2018-04-30T11:51:16Z,"Hi @ameinhardt ,
in the proposal $_time is replaced by simply time. Is that right? 
For me $_time was a specific time value that indicates a timestamp by adding an offset to a start timestamp. ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTM3NjQ5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQwNzMxMw==,unide,385407313,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-30T14:03:09Z,2018-04-30T14:03:09Z,"Hi @muelsen 

> in the proposal $_time is replaced by simply time. Is that right?

Looks like `$_time` has been renamed to `time` but the meaning is the same: milliseconds on top of `ts`.  ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQwNzMxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkwNzk2MQ==,unide,385907961,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-02T08:49:02Z,2018-05-02T08:49:02Z,"Thanks for the input & active discussion, @bgusach, @bf-bryants, @muelsen!

In that first v3 **draft**/**proposal**, I included the feedback of #17: there's no specific need for '$_'. Before, '$_' should have indicated an array of 'long' instead of 'float'. Yet, now we have the schema which clearly indicates the data type. A parser can treat the keyword 'time' in the same way he would deal with '$_time'.

@bgusach: interesting point to merge classes with 1:1 relation! I always thought it's a good idea to keep the ""shell"" (*Payload) as universal as possible. An implementation could still merge all payload types of one device into one. Maybe ""series"" would be a candidate for merging into measurement instead?!

*measurements[].context.temperature.limits[507]* applies to *measurements[].series.temperature[507]* in the same way as *measurements[].series.time[507]* applies to that as well. If for all context* changes a new measurement has to be created, representation of reference curves (continous increase of temperature in warm-up phase) would be much more redundant.

You guys have a point: time would always be there with a measurement, although the later display of the correlations might not make use of it. @muelsen: do you agree?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkwNzk2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTk3ODM2Mw==,unide,385978363,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-02T13:31:36Z,2018-05-02T13:31:36Z,"Hi @ameinhardt 

> A parser can treat the keyword 'time' in the same way he would deal with '$_time'.

I think that's good. And thus we can remove some exceptional name handling for the `$_time` field from the Python code :)

> interesting point to merge classes with 1:1 relation! I always thought it's a good idea to keep the ""shell"" (*Payload) as universal as possible. 

What do you mean by ""universal"" in this context? I find it hard to think about some reuse cases, if that is what you mean. There is this rule of thumb that says that if `A` needs `B`, and `B` needs `A`, then `A` and `B` are probably the same thing, and I have the feeling it is right here.

> An implementation could still merge all payload types of one device into one. 

Could you provide an example of merging payload types? do you mean reusing the same code classes or something like that?  

> Maybe ""series"" would be a candidate for merging into measurement instead?!

Uhmmm not sure about that one. The `series` entry has the advantage of grouping a set of dimensions, whose name is not known in advance (like `pressure` or `temperature`). If you move everything within `series` into `measurement`, it would be harder to find out what is a dimension, and what is an attribute of `measurement` (like `ts`), although still possible.

> measurements[].context.temperature.limits[507] applies to measurements[].series.temperature[507] in the same way as measurements[].series.time[507] applies to that as well. If for all context* changes a new measurement has to be created, representation of reference curves (continous increase of temperature in warm-up phase) would be much more redundant.

Ah ok, I think I got it. If you don't use exactly zero or one limit, you need one limit object for each entry in the series right?

If that is the case, uhm... it depends on the case, but in general looks to me a tad inefficient. Coming back to the Bremen-Berlin trip, if we measure the speed 10.000 times, but the speed limit changes only 10 times, we are sending something like `{""speed"": {""upperError"": 120}}`, 10.000 times but 9.990 of them were actually irrelevant.

As you say, If those limits change a lot, like in every single datapoint (or just a few of them), it is true that creating a `measurement` object would be less efficient than your approach, but I'd think that is not the most common case... let's think about it, probably we can come up with a good solution :)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTk3ODM2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjY1NzIxMQ==,unide,386657211,33,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-04T16:34:24Z,2018-05-04T16:34:24Z,"Hi,

I'm missing the location for custom data.  In V2, we had `metaData` fields, but I'm not seeing any in V3.  We were using these in the machine messages to pass event specific data.  Losing these kills V3 for us.

Does anybody know why they are gone?

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjY1NzIxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk3NzEzNQ==,unide,386977135,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-07T07:06:01Z,2018-05-07T07:06:01Z,"Hi @bf-bryants: I removed the dedicated metaData, but [additionalProperties: false](http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.5.6) as well.
It means you can add additional properties everywhere now as indicated in the [examples](https://www.eclipse.org/unide/specification/v3/process-message/#messageDetail).
You could even still use the metaData tag, if you want.
Parsers just use the known properties and ignore the others.
Does that work for you?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk3NzEzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzEyMTg0OA==,unide,387121848,33,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-07T16:27:37Z,2018-05-07T16:27:37Z,"Ooops..  I missed that, sorry.  I assume that will work.  Thanks.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzEyMTg0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY4MTg4MQ==,unide,387681881,33,NA,muelsen,24450403,Henryk Fischer,,NA,2018-05-09T09:34:45Z,2018-05-09T09:34:45Z,"Hi everyone,
we discussed internally the new interface. One major point are the missing metaData. Currently it is very simple for use to find out wether a parameter is part of PPMP or not. If not we take the whole metaData object and store it in our database or use it for further processing. When there is no more metaData-object it is more complicated to find those information in the PPMP - we always have to make a diff of the spec and the actual message to find additional information.
So our suggestion would be to keep the metaData-objects in PPMP and set additionalProperties to false.

Another suggestion is to change the name of the time-series to ts_offset in order to have a dedicated coupling with the ts of the measurements-object and to know directly that this means an absolute timestamp. ""time"" would be to not specific enough.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY4MTg4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY5NzUwMQ==,unide,387697501,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-09T10:37:12Z,2018-05-09T10:37:12Z,I agree with @muelsen in both points. I'd just say that a key name like `additionalData` would be more descriptive than v2's `metaData`.,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzY5NzUwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTM2NzQzMQ==,unide,391367431,33,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-23T14:27:05Z,2018-05-23T14:27:05Z,"Hi @ameinhardt, I was thinking about what we discussed on this: 

> @bgusach: interesting point to merge classes with 1:1 relation! I always thought it's a good idea to keep the ""shell"" (*Payload) as universal as possible. An implementation could still merge all payload types of one device into one. Maybe ""series"" would be a candidate for merging into measurement instead?!

Just an idea here. I realized that `MeasurementPayload` has 1..N `Measurement`s and `MachineMessagePayload` has 1..N `Message`s as well. So maybe the `ProcessPayload` should have 1..N `Process`es too, and not the strange 1:1 relship (or my prior suggestion to merge them). Does it make sense to send several process data at once? I guess it does, as with Messages...  ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTM2NzQzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTMyNTY5Mw==,unide,399325693,33,NA,muelsen,24450403,Henryk Fischer,,NA,2018-06-22T05:34:38Z,2018-06-22T05:34:38Z,"Hi all,
my final comment on the current proposal for v3:
- `time` rename to `time_offset`
- All additional properties shall be in an additional field (e.g. `additionalData` as @bgusach mentioned)
- Remove shutoffPhase (can also be part of `additionalData`)
The rest suits us.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTMyNTY5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/33,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODkxMjU3Nw==,unide,468912577,33,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-03-02T11:36:35Z,2019-03-02T11:36:35Z,"@muelsen: with the [current version ](https://github.com/eclipse/unide/tree/e9365443224276359299e3fe360b82e5e3234495), that should be addressed","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODkxMjU3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/34,unide,309665170,34,binary measurement data,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2018-03-29T08:33:12Z,2019-03-01T08:21:29Z,"As a maintenance expert, I want to have pictures alongside my machine messages / measurements / processes, in order to get more insight about this very machine state.

It should be possible to encode digital data in PPMP. Currently, there are multiple approaches on that:
* create a 'context' field for measurements / messages that indicates that ther measurement is encoded in base64 instead of being a number
* add another json key to hold base64 encoded binary data
* create another message type, specifically for sending binary data

This has been asked for by Balluff & Trumpf. Here's the former discussion on the Forum:
https://www.eclipse.org/forums/index.php/t/1084828/","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE3ODg1OQ==,unide,377178859,34,NA,kartben,128251,Benjamin Cabé,benjamin@zephyrproject.org,NA,2018-03-29T09:30:51Z,2018-03-29T09:30:51Z,"Would it be an option to have the image data send out-of-band? Would it make sense to have machine that already captures image data and make those images available e.g on an FTP server or an S3 bucket, and therefore the PPMP message could only contain the URL to an image (that, arguably, the PPMP server would probably need to download to keep a copy?)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE3ODg1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE4MjUwMA==,unide,377182500,34,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-03-29T09:45:03Z,2018-03-29T09:45:03Z,"Hi @kartben,
that works in IoT, but could be a problem in the industry, since not all machines can have internet access.
I would prefer PPMP messages to remain one-way transport protocol neutral communication without the dependency to other systems.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzE4MjUwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODYxMzgzNA==,unide,378613834,34,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-04T14:11:59Z,2018-04-04T14:11:59Z,"Hi @ameinhardt, here just some thoughts from my side...

### Option 1: allow more types in the series.
I think this is good. At the end, data in the series should be data regardless of its type, right? 

Just as thought food: if we allow the standard JSON types (number, string, bool) maybe it is not even necessary to describe the types in a ""context"". We could let the consumer of the data decide what to do with it, (unless we want the bindings to automatically convert from base64 to a number). This may be harder to implement in a statically typed language like Java, however.

### Option 2:  add another json key to hold base64 encoded binary data
Does this mean to have two keys under `series`, one for numeric and one for binary data? something like: 

```
""series"": {
        ""$_time"": [189, 677],
        ""binary"": {
           ""iolProcessData"": [""ASNFZ8KJwqvDjcOv"", ""wonCq8ONw68BI0Vn""]
        },
        ""numeric"": {
            ""temperature"": [12, 94]
        }

```
That would work too, and maybe it makes the implementation for static languages easier. Still, I prefer the first approach. With this one it is more likely to have invalid messages, like having the same dimension (e.g. `temperature`) in both keys. 

### Option 3: another type of message
Creating another message type for binary data looks complicated to me. If your machine is producing floats, binary data and strings at the same time, you would have to create diferent messages with the same timestamp and offsets but different values, and when receiving them, probably conflate them again into a record so that you know the state of your machine at a given time. That feels clunky. And if more types are needed, you would need further message types.
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODYxMzgzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyOTA0Ng==,unide,378829046,34,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2018-04-05T06:02:21Z,2018-04-05T06:02:21Z,I'd prefer option 1.,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyOTA0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Mzk1NTYxNg==,unide,383955616,34,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-04-24T14:35:03Z,2018-04-24T14:35:03Z,"Option 1 seems to be covered by issue #35 when the optional `context` section is used.  Example snippet:

~~~ json
{
    ""ts"": ""2002-05-30T09:30:10.123+02:00"",
    ""series"": {
        ""$_time"": [ 0, 1013, 2026 ],
        ""scanData"": [ ""Zm9vCg=="", ""YmFyCg=="", ""Y2hlZXNlCg=="" ],
        ""otherValue"": [ 4, 5, 6 ]
    },
    ""context"": {
        ""scanData"": {
            ""dataType"": ""BASE64""
        }
    }
}
~~~

This works for small amounts of data.  For large amounts, I would suggest that PPMP is not the correct container type - putting lots of binary data into JSON is best avoided if a more appropriate alternative is available.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Mzk1NTYxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/34,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkxMjAyMA==,unide,385912020,34,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-02T09:03:46Z,2018-05-02T09:03:46Z,"I have also included the data type ""*REF*"" and ""*OTHER*"". REF could be used, e.g. in a multipart/form-data -ish telegram to reference binary data in another (non-standardized) part of the telegram.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkxMjAyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/35,unide,309674729,35,context for measurements,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2018-03-29T09:03:37Z,2019-03-01T08:20:16Z,"As a system integrator, I want to get context information alongside the measurements, in order to facilitate the interpretation of the data.
I'm not so happy about sending redundant information and suggested a manifest/schema -link for that. Nevertheless, I understand also that for simplicity and in case of retooling (Umrüsten) machines, such context might change. In that case inline context does make sense. Maybe we could allow inline or a context reference like json-schema ""$ref""?

This is also a requested by Balluff and Trumpf. Former discussion here:
https://www.eclipse.org/forums/index.php/t/1084951/
Previously discussed example context:
```
""context"": {
    ""temperature"": {
        ""unit"": ""Fahrenheit"", // --> """" default, only label
        ""gradient"": 1.8, // --> 1.0 default, only for NUMBER
        ""offset"": 32, // --> 0 default, only for NUMBER
        ""dataType"": ""NUMBER"" // --> NUMBER default; [BOOLEAN,NUMBER,STRING,BASE64]
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/35/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODYyMjI5MA==,unide,378622290,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-04T14:36:00Z,2018-04-04T14:36:00Z,"Hi @ameinhardt,

Do you mean allowing both possibilities, right? an URL to another description or an inlined description.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODYyMjI5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyODg3NQ==,unide,378828875,35,NA,fpatz,879649,Frank Patz-Brockmann,,NA,2018-04-05T06:01:07Z,2018-04-05T06:01:07Z,"I'd vote for an (optional) external reference. Inlined data is overly redundant. Architecturally, a URL would normally not point to the device itself, as a PPMP source is not a server in most cases. So, this is somewhat outside the domain of a payload protocol. For the metadata we may also have some overlap with Vorto, but I am not an expert with that.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyODg3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODg1MDE1Mw==,unide,378850153,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-05T07:51:45Z,2018-04-05T07:51:45Z,"@fpatz absolutely, it would be weird that the URL points to the device itself. But a URL/any kind of reference to some resource with the description _could_ work, although still clunky in my opinion. I can imagine many scenarios in which the consumer of the messages does not have access to that ""description server"", or the description is missing, outdated, etc. Moreover, for very intensive data transfer scenarios, sending this reference over and over again hundreds of times per second could be undesirable.

And of course, inlining it would be an absolute waste of bandwith. 

At the end this description is something that would be used just for configuring data consumers, which should happen extremely seldom. I don't know... I think this feature doesn't look like a bright idea...","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODg1MDE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODg4OTA4NA==,unide,378889084,35,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-04-05T10:20:42Z,2018-04-05T10:20:42Z,"Retooling (Umrüsten) is not so seldom. In that case, units and especially limits might change. Accuracy of a measurement could vary the more a machine is heated up etc.. I agree with the redundancy problem and architectural preference. On the other hand, in order to avoid complexity, PLCs might just send such information every time.
So I propose to define a `context` field that
* includes the current `limits` content
* includes optional `accuracy` and `offset` as numbers
* includes an optional `unit`. The unit value is not defined, but recommendation is given. E.g. as in [senml, 12.1.  Units Registry](https://tools.ietf.org/html/draft-ietf-core-senml-14#section-12.1)
* each of these fields can be a static value or an array. The static value applies to all elements in measurements series, an array applies one-by-one to the series elements
* can include other, not-standardized fields. See #36

If needed, this `context` should be inlined. In case it is not inlined, it can be referenced. A reference would be similar to [`$ref`](http://json-schema.org/latest/json-schema-core.html#rfc.section.8):
> An object schema with a ""$ref"" property MUST be interpreted as a ""$ref"" reference. The value of the ""$ref"" property MUST be a URI Reference. Resolved against the current URI base, [...] All other properties in a ""$ref"" object MUST be ignored.
The URI is not a network locator, only an identifier. A schema need not be downloadable from the address if it is a network-addressable URL, and implementations SHOULD NOT assume they should perform a network operation when they encounter a network-addressable URI.

It's up to the receiver, if he accepts references. He decides whether to resolve them every time, via a cache or any other registry that is not part of the scope of PPMP (vorto etc.).
Btw., I think vorto doesn't define the metadata, but rather relies on ipso, e.g. [direction object is defined here](https://github.com/IPSO-Alliance/pub/blob/bf95ff43145d3e352e705253d43db052a2b1def5/reg/xml/3336.xml)
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODg4OTA4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODk1MTU2OQ==,unide,378951569,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-05T14:16:19Z,2018-04-05T14:16:19Z,"@ameinhardt I assumed that this description is just a help for humans (the ""integrators""?) to understand the messages. If this is not the case, please correct me. Under this assumption, and regarding your comment:

> Retooling (Umrüsten) is not so seldom

Seldom is actually a very ambiguous term :). What I wanted to say is that this description is only meaningful when the integrator is deciding what to do with this very kind of message. Once that is working, he does not really need at all to know that the unit is e.g. Fahrenheit until the next time the machine is retrofitted or modified. How often could that happen? once after millions of messages?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODk1MTU2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzkwMzEzNA==,unide,383903134,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-04-24T11:52:51Z,2018-04-24T11:52:51Z,"Hi,

Given that I was one of the people who originally requested this change, I'd like to clarify why it's needed.

We often have analog sensors in use, which deliver only unqualified values in the range 0000-FFFF, so there's no obvious way of converting that to a useful value with a unit.  Even IO-Link sensors can differ in their output, depending on the configured mode.

The system that handles collected data is typically managed by completely different people to those who set up the sensors.  The additional coordination effort between groups is considerable, so it is simpler if the data qualification can be included as part of the PPMP message.  It also automatically resolves the problem of how to handle configuration changes - especially with large numbers of sensors.

The additional data bytes are not a consideration in our case, as the local network is nowhere near capacity.  However, external references would be a problem as external access is generally blocked.  Using a reference to a locally available server only works until the message is passed to a different network segment, or even the cloud, where the reference again cannot be accessed.

Our requirement  is to be able to have fully qualified self-contained packets of data, where the data can also be non-numeric.

I should also note that the entire `context` section was defined as optional on purpose.  If left out, you effectively revert to the V2 format. Everybody is free to choose what fits their scenario best, and nobody has to waste any bandwidth they don't want to.

As far as units go: in our discussion (Bosch, Sick, Balluff), we came to the conclusion that treating the unit as a label would be more pragmatic, as use cases often arise where the unit ends up being something domain specific that won't convert to an SI form.  That said, I do like the IETF SenML suggestion.

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzkwMzEzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDk2MzE5Mw==,unide,384963193,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-04-27T13:01:10Z,2018-04-27T13:01:10Z,"About units:

The [SenML IETF draft](https://tools.ietf.org/html/draft-ietf-core-senml-14#section-12.1) says this:

> IANA will create a registry of SenML unit symbols.

To our knowledge, IANA has not yet done this, and it's not clear when this will become available.  Until that time, SenML is effectively unusable unfortunately.

The method used by OPC/UA to define units might be worth looking at.  Here a short overview of their fields from OPC UA Part 8, S. 15-16:

* `namespaceUri` - identifies the organisation
* `unitId` - int32 identifier for programmatic evaluation, -1 means none available 
* `displayName` - localized string
* `description` - localized string

The suggested `unit` field for PPMP is the equivalent of the OPC/UA display name.  I would like that we consider allowing the other three as well.  In particular, the namespace allows us to choose between SenML/IANA or something else.

The unit ID is only relevant when a numbered list of units is referenced by the URI.  For example, the IO-Link consortium does that.

As before, the whole thing must remain optional.  Those who need context should be able to select between either a reference or inline (just not both at the same time).  That covers the use cases that have been mentioned here.

Should we use the same field names from the OPC/UA spec?

Steve

PS. @ameinhardt: I hope I'm not too late with this suggestion!","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NDk2MzE5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQwMTc4OQ==,unide,385401789,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-04-30T13:43:34Z,2018-04-30T13:43:34Z,"Hi @bf-bryants ,

I think the OPC UA approach still has the problem you pointed out before: people managing the receiving part of the system may not be able to get the description/semantics referred by the `namespaceUri`. However, this is as good as it gets IMO. 

I'd suggest a simplified schema:

- `namespace`: optional. If not provided, the consumers can assume it is an ""in-house"" unit.
- `unitID`: a string. It is the actual ID within the namespace (if any). For instance `fahrenheit`. Should be like a variable name, kind of readable for humans, but programming friendly as well. 
- `description`: optional, can provide extra details. This is very important if there is no official documentation of the IDs in the namespace, or if this message is going to be sent to other networks with no access to this documentation.

I would not care at all about the OPC UA displayable names (`displayName`, `description`), especially if they are localized.

Not sure about the `dataType` field. In case of booleans, numbers and string, the JSON format is enough by itself. In case it is a base64 encoded string, maybe would suffice having that in the description? it is not very elegant, but converting automatically a base64 string into a chunk of bytes does not help further if you still don't have a detailed description of what all those bytes mean. And maybe somebody wants to use another encoding.

Then, another details would be how important it is for us to have those gradients and offsets that were suggested at the beginning. My first idea would be that the device sending this information should send the values already corrected instead of sending them along with the correction factors... but I don't know if this is possible in all cases.

What do you guys think?


","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQwMTc4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkxMDM3MQ==,unide,385910371,35,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-02T08:58:06Z,2018-05-02T08:58:06Z,"@bgusach: your suggestions regarding unit makes sense, in my opinion. @bf-bryants: do you agree with the 'in-house' default and simplification of displayName?
In a simple case, all that is left would be the id as in:
```
context: {
  temperature: {
    unit: {
      id: 'C'
    }
  }
}
```
Should we offer either a simplified form of:
```
context: {
  temperature: {
    unit: 'C'
  }
}
```
or a complex object with mandatory id & namespace URI:
```
context: {
  temperature: {
    unit: {
      id: 'C',
      namespace: 'https://eclipse.org/customOrPublicDefinition'
    }
  }
}
```","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTkxMDM3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTk2MDE3Mw==,unide,385960173,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-02T12:25:23Z,2018-05-02T12:25:23Z,"@ameinhardt , that'd work, but what about always having a flat object for each dimension?

No namespace:

```javascript
context: {
  temperature: {
    unitID: ""C"" 
  }
}
```

Namespace and possibly other stuff:
```javascript
context: {
  temperature: {
    unitID: ""C"",
    namespace: ""..."",
    otherStuff: ""...""   
  }
}
```

I think that makes parsing and validating easier.
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTk2MDE3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjA0MDQ5MA==,unide,386040490,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-02T16:34:59Z,2018-05-02T16:34:59Z,"I agree with @bgusach:

* localised texts are not needed.
* unit namespace should be optional (default empty, meaning anonymous/unknown namespace).
* the flatter structure is easier for parsing.

However, the previous two comments have inadvertently made a case for allowing a numeric identifier where the namespace has them (ie: in addition to the label):

You've both named the unit `C` (Coulomb) for a field called ""temperature"" - I guess you meant `°C`.  If a numeric ID is available, this problem can be avoided and the label can be skipped too.

This leaves me with the following per measurement field:

* `unitNamespace` or `unitUri` [string]
* `unit` or `unitName` or similar [string]
* `unitId` or `unitID` [number]

The last two of these could be merged if we allow the unit to be a string or a number - but I don't know if the schema will support that.

While I'm here: would it be sensible to allow a per-message default unit namespace?  If a namespace is used at all, it's likely that multiple fields will use the same namespace, so we could avoid some text duplication.

----

The `dataType` field was primarily created so that small amounts of binary data could be transported.  It is correct that the JS-native types are implicitly handled.  If we assume that strings are just plain strings unless except otherwise marked, then it could indeed be reduced to ""BASE64"" or nothing!

Base 64 was chosen because it's the de facto standard, with MIME et al.  Is there something else that should be included here?

It should still explicitly stated that all of a field's values must be of the same type for implicitly typed values.  Thus you could __never__ have this:

~~~ json
    ""temperature"": [ 1.0, false, ""3"" ]
~~~

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjA0MDQ5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjIwODQzMQ==,unide,386208431,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-03T07:10:05Z,2018-05-03T07:10:05Z,"Hi @bf-bryants ,

> However, the previous two comments have inadvertently made a case for allowing a numeric identifier where the namespace has them (ie: in addition to the label):
You've both named the unit C (Coulomb) for a field called ""temperature"" - I guess you meant °C. If a numeric ID is available, this problem can be avoided and the label can be skipped too.

I didn't think too much about that and copied/modified @ameinhardt's example (that `C`). I agree that something like `celsius` would be way more appropriated as an ID, but at the end of the day, users of this protocol are free to choose within their namespace whether `C` stands for celsius degrees, coulombs or carrots 😄 

I'd say it is a bad idea to have two possible identificators (`unitName`, `unitID`) for the engineering units, because you have to specify (and implementation must follow) what should happen if both IDs available. Not a bit deal, but complexity slowly creeps in this way. We should stick to only one identificator, and in my opinion string IDs win over numbers since they may or may not be descriptive, but numeric values are never very descriptive. If somebody insists on using the number `76` for celsius degrees, that's fine, he or she can use the string `""76""`. I think it is not worth modifying the schema to allow strings and numbers. 

Side note: we should restrict the string ID to something like [a-zA-Z0-9]+ 

> The dataType field was primarily created so that small amounts of binary data could be transported. It is correct that the JS-native types are implicitly handled. If we assume that strings are just plain strings unless except otherwise marked, then it could indeed be reduced to ""BASE64"" or nothing!

I'd say it is not very elegant to have type information both in the JSON format and within the payload. Moreover from my limited point of view, binary data is not very useful if you don't have a proper description of what it is (e.g. ""it is a jpeg"", or ""the first byte means this, the second one that"", etc) , so I'd personally stick to using the description (either inlined or in the namespace documentation) and saying something like `base64 encoded bytes, meaning blablabla...`. 

However, I don't really know all the use cases from the real world, and if it is a must for you that base64 strings are automatically converted to binary data on the consumer side, I guess there is no way around using an extra field (or maybe using some kind of prefix like `base64:i2uk2398ah89f9h8qw4...` ??... but meh...). It's your call.

> Base 64 was chosen because it's the de facto standard, with MIME et al. Is there something else that should be included here?

Technically other encodings could be used to embed binary data in JSON, as base85 or base91 (which are more bandwith efficient), but you are right there: base64 is the de facto standard and the improvements of other encodings are probably not worth the hassle.

> While I'm here: would it be sensible to allow a per-message default unit namespace? If a namespace is used at all, it's likely that multiple fields will use the same namespace, so we could avoid some text duplication.

That's a good idea. Default, and if some units want to use another namespace, they're free to override the default one. Probably the context object is the right place to define this default.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NjIwODQzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzQwNjA2NA==,unide,387406064,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-08T13:41:33Z,2018-05-08T13:41:33Z,"Hi,

After letting it bounce about in my head for a couple of days, I think you're right about using only one field for a unit.  As you point out, putting a number into a string is an option; it's easy to detect.

I'm not so sure about restricting content.  I feel that it should be possible to specify at least SI units directly, which means you'd also need superscript numbers, the degree and slash symbols, eg: it should be possible to write ""km/h"" etc.

---

Here's an example of a binary data use case: sending a current tag ID from an RFID reader along with other measurement data such as conveyor speed etc.  There's no format or meaning to the data, other than that it's an ID.  We know it's a tag ID from the combination of the field name and the PPMP message's device ID (we use UUIDs); we use that to look up configuration information.

Note that the conversion to PPMP/JSON is often done by a little embedded field device (eg: IO-Link master), with limited context and resources.  While it can read configuration information about its connected devices, interpretation of data is generally not possible.

My suggestion would be to use an additional property (which is outside of the standard's scope).  An alternative would be to add an optional field for the MIME type to the context.  Neither is suitable for complex data descriptions though.  As it's not far how far we should go with data description details, I am inclined not do do it at all; I therefore expect that the receiver either ignores such fields, or they know how to deal with the data somehow.

---

I think it would be good to omit explicit type information if it's implicitly and non-ambiguously available.  Whether something is a number or a string is clear, but interpreting string content can be a source of problems.  I would avoid using prefixes inside string data, as we then have a lot more effort to ensure that we're not looking at a string that happened to start with the same characters.  The same problem occurs if a string happens to start with the same characters that base64 uses (or bases 85, 91 or 122).  I must assume a string is just a string unless explicitly marked as being something else.

Note that this can be optional (in my opinion).  If we can mark a specific string field as using a certain encoding by using out-of-band configuration, then the PPMP message can omit that information.  As above, anybody who can't interpret the string content can ignore it.

BTW: the only reason for this is because JSON has no binary data type of its own. :-(

---

TL;DR:

* Units: use a text ID and a namespace (default empty).  Alternative unit namespace default can be set in `context`.
* Binary data content: content type outside of spec.
* Data types (excluding binary data in strings): use JSON type, no need for explicit context.
* Encoding binary data in strings: explicitly name encoding type, otherwise it's a non-binary string!

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NzQwNjA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTM4NjM3MA==,unide,391386370,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-23T15:17:47Z,2018-05-23T15:17:47Z,"Hi @bf-bryants 

>I'm not so sure about restricting content. I feel that it should be possible to specify at least SI units directly, which means you'd also need superscript numbers, the degree and slash symbols, eg: it should be possible to write ""km/h"" etc.

I think the unit IDs should analog to variable names in a programming language, among others they should be readable and hard to confuse. You suggested using numbers as IDs for the engineering units, and it makes sense to be from the ""hard to confuse"" point of view, `11` (although not very readable). If we allow any character, we may end up with things like  `° C` and `°C` which are nice and readable, but very easy to confuse. I'd go for a very restricted ASCII set, where slash could be allowed like in `km/h`, but only lower case (or upper, I don't mind at all), and no white spaces.

> My suggestion would be to use an additional property (which is outside of the standard's scope). An alternative would be to add an optional field for the MIME type to the context. Neither is suitable for complex data descriptions though. As it's not far how far we should go with data description details, I am inclined not do do it at all; I therefore expect that the receiver either ignores such fields, or they know how to deal with the data somehow.

I'm not sure I understand what you meant in that paragraph. Could you try to explain it in another way and maybe give examples? 

> I think it would be good to omit explicit type information if it's implicitly and non-ambiguously available. Whether something is a number or a string is clear, but interpreting string content can be a source of problems. I would avoid using prefixes inside string data, as we then have a lot more effort to ensure that we're not looking at a string that happened to start with the same characters. 
The same problem occurs if a string happens to start with the same characters that base64 uses (or bases 85, 91 or 122). I must assume a string is just a string unless explicitly marked as being something else.

Yup, that with the prefixes was rather a dummy ""brainstormy"" idea. Could work, but to make it fast we should prefix all the strings to know if they are strings, base-xx  or some other exotic stuff. Meh... :)

> BTW: the only reason for this is because JSON has no binary data type of its own. :-(

That is true. In the [FAQ ](https://www.eclipse.org/unide/faq) it is stated that PPMP happens to be JSON, but could be changed to something else if necessary. Although that was said regarding size, this problem could be a reason to move to some other standard (something like messagepack, protobuf, BSON, ...?). What do you think @ameinhardt ?

Thanks,
Bor","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTM4NjM3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTc2NjYzOQ==,unide,391766639,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-24T15:55:11Z,2018-05-24T15:55:11Z,"Hi,

> I'd go for a very restricted ASCII set, where slash could be allowed like in km/h, but only lower case (or upper, I don't mind at all), and no white spaces.

That won't work because SI units are case sensitive - for example with mega (M) and milli (m).  I see only two choices here - either we use a correct set of rules for validating the content, or we don't validate it and live with the fact some people will put rubbish in that field.  I am currently leaning towards the second, as getting the first one right will delay the V3 release too long. :-)

> I'm not sure I understand what you meant in that paragraph.

That was about how to describe binary content sent with measurement data.  Short answer: ""Don't!""

It's also possible to use an ""additional property"" (aka custom field), but such a field is not part of the PPMP spec by virtue of it being a custom field.  If the receiver doesn't know what's in the binary data field, they should ignore it.

> [...] this problem could be a reason to move to some other standard (something like messagepack, protobuf, BSON, ...?)

We're currently looking at binary formats for lower-level direct data exchanging where performance is more important.  I like how protobuf has an explicit definition layer.  We're also looking at [CBOR](http://cbor.io), which is a strict JSON superset but explicitly supports various number types and binary data.

However, as a general interchange format, JSON is very widely accepted and is human readable.  I would actually be surprised if PPMP starts using something else.

Best regards,

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MTc2NjYzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjA5NjUwOA==,unide,392096508,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-25T15:34:52Z,2018-05-25T15:34:52Z,"Hi, 

> That won't work because SI units are case sensitive - for example with mega (M) and milli (m). I see only two choices here - either we use a correct set of rules for validating the content, or we don't validate it and live with the fact some people will put rubbish in that field. I am currently leaning towards the second, as getting the first one right will delay the V3 release too long. :-)

You suggested using `unitID` as an integer because it would be easy to programmatically identify engineering units, which I also think is an important thing. However, if we allow for something more than a small boring set of lowercase plus underscore chars or similar, you start getting messy IDs like `coolIdea` or ` meters per  second   ` (add a tab there), which are very error prone. I don't see any problem writing `mili_amper` instead of `mA`.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjA5NjUwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjE3NjAzNQ==,unide,392176035,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-25T20:35:31Z,2018-05-25T20:35:31Z,"Yes - that was an idea from the OPC/UA spec.  A namespace URI gives us a complete enumerated set of possibilities, and the unit ID refers to one of them.  It seemed likely that devices will already have this information (eg: for OPC/UA, IO-link etc), so re-using it for PPMP would make life easier for them.

The problem is what to do when no namespace is used, as the numeric ID has no meaning.  A string allows at least _something_ to be set - but as you quite rightly point out, people will put all sorts of rubbish in there.  If we're going to go with a strict validation, I'd prefer a numeric ID from a specific namespace.

> I don't see any problem writing `mili_amper` instead of `mA`.

You may find that other people do have a problem with that, given that the symbol `mA` is part of an international standard, whereas `mili_amper` is not.  I would prefer to use the existing standard rather than invent a new one.

As I mentioned previously, I'd prefer not to validate strings at all.  A numeric ID from an external namespace can't get messy.  My opinion is that we are either very strict (namespace+number) or we leave it open (unvalidated string).

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjE3NjAzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ1OTY1MA==,unide,392459650,35,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-28T08:34:42Z,2018-05-28T08:34:42Z,"Hi @bf-bryants, @bgusach,
thanks for the valuable discussion! I would like to finalize the v3 proposal by end of this month, so we should find a conclusion. Keep in mind that v3 is supposed to be a sound basis (for extensions) and doens't need to be an all-defined-standard.
I keep proposing: The unit id is a not-clearly defined label if no namespace is defined. If a namespace is given, it shall be treated as nonambiguous id in that namespace. Basically as outline in
https://github.com/eclipse/unide/issues/35#issuecomment-385910371
I understand that flat maps could be easier to parse by computers. I prefer to keep a grouping, though. Parsers need to handle blocks in other areas as well. We should be consistent. Instead, if someone doesn't want to transfer objects, he could flatten with some kind of dot notation (costs some 10 ms to flatten/unflatten)
```javascript
flatten({
  ""content-spec"": ""urn:spec://eclipse.org/unide/measurement-message#v3"",
  ""device"": {
    ""id"": ""a4927dad-58d4-4580-b460-79cefd56775b""
  },
  ""measurements"": [
    {
      ""ts"": ""2018-05-28T07:41:31.603Z"",
      ""series"": {
        ""time"": [
          0,
          23,
          24
        ],
        ""temp.1"": [
          45.4231,
          46.4222,
          44.2432
        ],
        ""temp.2"": [
          42
        ]
      }
    }
  ]
})
```
results in 
```json
{
  ""content-spec"": ""urn:spec://eclipse.org/unide/measurement-message#v3"",
  ""device.id"": ""a4927dad-58d4-4580-b460-79cefd56775b"",
  ""measurements.0.ts"": ""2018-05-28T07:41:31.603Z"",
  ""measurements.0.series.time.0"": 0,
  ""measurements.0.series.time.1"": 23,
  ""measurements.0.series.time.2"": 24,
  ""measurements.0.series.temp\\.1.0"": 45.4231,
  ""measurements.0.series.temp\\.1.1"": 46.4222,
  ""measurements.0.series.temp\\.1.2"": 44.2432,
  ""measurements.0.series.temp\\.2.0"": 42
}
```
In the same way, one could apply additional transformation like [cbor](http://cbor.io/), gzip or other to the standard payload.

@bf-bryants, @bgusach, can you give a (preferably final) example, taking the discussion into account?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ1OTY1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2MjQ3MQ==,unide,392462471,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-28T08:45:40Z,2018-05-28T08:45:40Z,"@bf-bryants  I stand by my opinion:  a restricted string has the same reliability as an integer, and offers ""good enough"" readability. A free string offers great readability but loses all reliability for programming purposes. Just an example, the following two strings are different:
- [µA](https://www.fileformat.info/info/unicode/char/00b5/index.htm)
- [μA](https://www.fileformat.info/info/unicode/char/03bc/index.htm)

And I still think something like `milli_ampere` or `micro_ampere` is perfectly readable for everybody. 

That's my opinion, I guess it's up to our BDFL @ameinhardt to decide 😄 ","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2MjQ3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NDc2MA==,unide,392464760,35,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-28T08:54:39Z,2018-05-28T08:54:39Z,"in my opinion that's up to the namespace. The ids in a custom namespace could be numbers as well as clearly defined strings.
If no namespace is given, it's a ""free string"" which merely serves as a label or needs additional (outside PPMP payload) agreements between sender & receiver.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NDc2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NzE4Nw==,unide,392467187,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-28T09:04:07Z,2018-05-28T09:04:07Z,"@ameinhardt 

> I understand that flat maps could be easier to parse by computers. I prefer to keep a grouping, though. Parsers need to handle blocks in other areas as well. We should be consistent.

The most important aspect for me is not about grouping or not, but having a *variable schema*, i.e. having either an string or an object for the `unit` key. I think it is unnecessary complexity. 

Then, almost as a taste thing, I don't see the benefit of the grouping. Having `unit` and `namespace` directly under `context.temperature` looks good enough to me. But having it grouped in a subobject is also ok. I think is not worth arguing that little detail :)

In other words, my first choice would be:

```
context: {
  temperature: {
    unitID: ""C"", 
    namespace: ""cool-namespace""  // optional
  }
}
```

And then this:

```
context: {
  temperature: {
    unit: { 
        id: ""C"", 
        namespace: ""cool-namespace""  // optional
    } 
....
```

But I'm against allowing both a string or an object under the `unit` key, depending on whether there is a namespace or not.
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NzE4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NzkyOQ==,unide,392467929,35,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2018-05-28T09:07:03Z,2018-05-28T09:07:03Z,"> in my opinion that's up to the namespace. The ids in a custom namespace could be numbers as well as clearly defined strings.
If no namespace is given, it's a ""free string"" which merely serves as a label or needs additional (outside PPMP payload) agreements between sender & receiver.

I don't agree with that. If you allow a ""free string"", you allow it for every case: with or without namespace. And free strings are terrible IDs.

","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjQ2NzkyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjYwOTk5NA==,unide,392609994,35,NA,bf-bryants,38646756,Stephen Bryant,,NA,2018-05-28T22:07:02Z,2018-05-28T22:07:02Z,"Hi,

I'll combine my replies into one message.

> I understand that flat maps could be easier to parse by computers.

I'm not aware of JSON parsers having this problem.  On the contrary, the structure (as in V2) allowed us to directly reference sub-elements as complete objects.  I also prefer the grouped structure.

Transformations such as flattening, CBOR, Gzip etc would be better left separate from V3 in my opinion - so that we can get the V3 content field definitions concluded in the very close future!

It would, however, be an interesting discussion point for V3.1 or V4.

> I keep proposing: The unit id is a not-clearly defined label if no namespace is defined. If a namespace is given, it shall be treated as nonambiguous id in that namespace.

This is still my position.

It doesn't matter that the key is a free string, as it must still exactly match a key in the namespace.  We use 'free strings' as key names in other places in PPMP, and that's not causing any problems.

A unit ID without a namespace is not a useful definition, and is at best only of use as an advisory label; I see no point in adding restrictions to it.


BTW: I have no preference as to whether a unit definition is in its own object or flat.

Steve","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MjYwOTk5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/35,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODU4Mjc1Mg==,unide,468582752,35,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-03-01T08:20:13Z,2019-03-01T08:20:13Z,"Probably this discussion is not yet concluded, so I would second
> It would, however, be an interesting discussion point for V3.1 or V4.
For v3, the current context object is some progress though","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODU4Mjc1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/36,https://api.github.com/repos/eclipse-archived/unide/issues/36,unide,309677590,36,PPMP extensibility / dialect,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2018-03-29T09:12:38Z,2019-01-28T09:39:34Z,"As an machine integrator, I want to extend the current PPMP specification with further information, in order to cover my specific use-case.

Currently, v2 of the json schema makes use of `additionalProperties: false`, so adding custom attributes is not possible. I'm looking for a way to add custom attributes, that don't interfere or cause a reinterpretation of the ones in the standard. That is, technically but also the organizational process of it which might be oriented at other standardization processes (first draft, later included in standadard)

I understand that we should also pay attention to compatibility with compression libs, like protobuf.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/36,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1ODQ1OQ==,unide,458058459,36,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T09:39:34Z,2019-01-28T09:39:34Z,v3 draft doesn't specify `additionalProperties: false` anymore,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1ODQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/38,https://api.github.com/repos/eclipse-archived/unide/issues/38,unide,324398882,38,unide installation issues,pankeshpatel,1482917,Pankesh Patel,,OPEN,2018-05-18T12:52:44Z,2019-11-22T08:29:29Z,"I have been installing unide first time. I have first  `mvn install clean` command and getting the following error.  What does it indicate? how can this be fixed.  I feel that we should write a ""getting started guide"" for beginners. 
![img](https://user-images.githubusercontent.com/1482917/40235561-ac0d7adc-5a78-11e8-8037-70e32d6d26a9.PNG)
","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/38,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDI0MDI1Mw==,unide,390240253,38,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2018-05-18T15:16:15Z,2018-05-18T15:16:15Z,"Hi @pankeshlinux ,
if you want to use the server or client, you could follow the instructions described in the blog: https://www.eclipse.org/unide/blog/2018/3/26/Release-0.2.0

If you want to contribute and have java skills, you would need to install the indicated dependencies via maven first. That is, you first go into the ppmp/ppmp-schema directory and execute a ```mvn install``` there. After, you checkout [unide.java](https://github.com/eclipse/unide.java) and ```mvn install``` there as well.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDI0MDI1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/38,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDI0MzIyMw==,unide,390243223,38,NA,pankeshpatel,1482917,Pankesh Patel,,NA,2018-05-18T15:26:31Z,2018-05-18T15:26:31Z,"@ameinhardt : Thanks for the response. I had already given the try yesterday to the link you have suggested.  But, I did not succeed much. 

I feel that this guide is little bit abstract to me and we may need to write the guide for beginners.  In my lab, I have seen a good enthusiasm to use this software because of its potential, but people has given up , because they could not succeed in the installation. 

I can write a complete beginners guide for Unide Java, once I install it successfully in my computer. Would you willing to help me to resolve each baby steps? An extension of this idea, we can prepare a short installation video for beginners. Any thoughts?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDM5MDI0MzIyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/38,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTM2ODI1MQ==,unide,529368251,38,NA,amarun22,31470812,ArunKumar Amarnath (Arun),,NA,2019-09-09T08:57:16Z,2019-09-09T08:57:16Z,"@pankeshpatel, @ameinhardt  , any luck with the above installation issue? I tried & got the same error. Any help is appreciated. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUyOTM2ODI1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/38,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzQ0MDE4MQ==,unide,557440181,38,NA,aleksandarkovacevic30,10630509,Aleksandar Kovacevic,,NA,2019-11-22T08:29:29Z,2019-11-22T08:29:29Z,"above issue is solved by simply 
```
git clone https://github.com/eclipse/unide.java
cd unide.java
mvn install

```
then go back to your unide github and try again

","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NzQ0MDE4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/40,unide,401662301,40,$_time precision fixed to milliseconds - limits sampling rate to 1kHz,alaendle,969523,Andreas Ländle,,CLOSED,2019-01-22T09:05:37Z,2019-03-02T10:44:57Z,"The fixed precision of $_time to milliseconds in the specification clearly limits the sampling rate for sensors to 1kHz (for practical reasons and to avoid rounding effects even a much lower sampling rate might be advisable). So I might suggest that this artificial limitation will be removed somehow in upcoming releases of the spec.

For now I have no concrete suggestion how a solution should look like - e.g. just a higher precision; or allowing a floating point number; or add a optional scaling factor. But a very similar discussion can be found here - maybe we can find some useful approaches: https://github.com/elastic/elasticsearch/issues/10005","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzMjM1Nw==,unide,458032357,40,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T08:09:10Z,2019-01-28T08:09:10Z,"The limit is due to the possible precision of a number of 32 bit.
Assuming a 32 bit value, we could decide for integer or float. If my math is correct, a float has an unsigned precision up to 2^24 ms = ~4.5 hours. A signed integer offset allows ~25 days.
Shall we assume 64 bit double for the offset?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzMjM1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODE2OTc0NQ==,unide,458169745,40,NA,alaendle,969523,Andreas Ländle,,NA,2019-01-28T15:13:23Z,2019-01-28T15:13:23Z,"Well personally I prefer integers over floating-point numbers in such cases; mainly because with floating-point numbers you always wonder about the amount of significant digits and you couldn't present decimal fractions like 0.1 exactly. As we have JSON as an interchange format - which for sure doesn't specify any precision, but refers to 64-bit IEEE754 and suggests that interoperability is given by not demanding more precision (rfc7159), we could (or should?) assume that we have 64bit floating-points (with 15 significant numbers) or 64bit integers available. That means that regardless of the choice of a base unit for timestamps we can caught a wide enough time-range. 

However the more I think about it, the more I get the feeling that we should not treat the time series in anyway special. Maybe this is even more related to how we think about the Unide format - should it be a format that allows a common and standardized way to communicate with a 3rd-party system (like PPM) that evaluates and interprets (by adding context information) the telegrams. Or should a Unide-telegram stand for its own, and so be useful without any further context? I really like the second opinion, if unide sees itself as a generic format for industrial communication of machine events. I believe that this is the claim that unide makes, but please correct my if I'm wrong (because if this is not the case some other issues I've recorded might get obsolete).

So in accordance with https://github.com/eclipse/unide/issues/44 and https://github.com/eclipse/unide/issues/41 I think (at least for now) that there shouldn't be an ""outstanding"" series (like ""$_time"") - and so I would shift the discussion to the more general question how units of series values should be represented in the unide format. 
@ameinhardt: Please take this comment/input with a grain of salt, because I haven't read through your answers on the other issues until now; I promise I will take a look on them during next days.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODE2OTc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ0MzczMg==,unide,461443732,40,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-07T14:33:50Z,2019-02-07T14:33:50Z,Addendum: We indeed have a sensor in place that yields data at a 800ns interval.,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ0MzczMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjMyNzYzOQ==,unide,462327639,40,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-11T13:30:45Z,2019-02-11T13:30:45Z,"So a general note in the spec should state that, according to [rfc7159](https://tools.ietf.org/html/rfc7159#page-7), we assume 64 bit double (IEEE 754) precision for all numbers. That includes time offsets, which would cover your initial concern, right?
Note that JSON Schema [doesn't enforce that precision](https://json-schema.org/latest/json-schema-validation.html#rfc.section.4.2). Since ""multipleOf"" or other v7 keywords wouldn't be sufficient to validate the double precision of number, validation can't really differentiate from [decimal floating point](https://en.wikipedia.org/wiki/Decimal_floating_point). It's just a textual recommendation.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjMyNzYzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjM1ODAzNA==,unide,462358034,40,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-11T14:59:09Z,2019-02-11T14:59:09Z,"I guess we have the same understanding of rfc7159 and its implications. To narrow down the discussion: Would it be a possible solution to just widen the schema and allow floating point values for the time series? My understanding is that this is the direction you (@ameinhardt) are pointing, right? I think this might cover all our current requirements - we will be able to correctly express 800ns sampling rates :smirk:. Also if we keep milliseconds as base unit (which seems to be advisable for compatibility) - we have precision up to attoseconds (which should be more than enough).","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjM1ODAzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY4NTI4NQ==,unide,462685285,40,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-12T09:32:07Z,2019-02-12T09:32:07Z,"With https://github.com/eclipse/unide/commit/54482bfd23d5b677d94efd95f525f60f9a8e5cfc, time changed from Integer to Number, thus allowing sub millisecond offsets.
Any objections?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY4NTI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/40,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjczMDM0Mg==,unide,462730342,40,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-12T11:50:40Z,2019-02-12T11:50:40Z,Perfect match :star2: !,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjczMDM0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/41,https://api.github.com/repos/eclipse-archived/unide/issues/41,unide,401753257,41,"v3 - process schema - mandatory ""time"" field",alaendle,969523,Andreas Ländle,,CLOSED,2019-01-22T12:59:30Z,2019-03-02T10:45:14Z,"For a process depending on a time is just unnecessary - e.g. we have process results that represent a force-distance characteristics. So I just need two series (one for force and one for distance) to represent the process - even if the process/measurement is chronological, we have no timestamps for the concrete force/distance pairs.

And I guess we can imagine a lot of other processes where their is no direct time reference. So please reconsider if it is useful for a generic format to force a time reference for every measurement (maybe there was a reason why this field was optional in v2?).","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/41,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzNDQ5OA==,unide,458034498,41,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T08:18:08Z,2019-01-28T08:18:08Z,"Hi @alaendle ,
Please see the discussion from @bf-bryants https://github.com/eclipse/unide/issues/33#issuecomment-384704959 and @bgusach https://github.com/eclipse/unide/issues/33#issuecomment-385352517 who argued that your force and distance would have a time measure to it. Otherwise, it's not a real measurement, but rather a statistic. What do you think?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzNDQ5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/41,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODQ3ODc4OA==,unide,458478788,41,NA,alaendle,969523,Andreas Ländle,,NA,2019-01-29T09:57:25Z,2019-01-29T09:57:25Z,"Well I agree about the conceptional shift of the unide format (see also @bf-bryants comment and my statement on the referenced issue #40); however I like to disagree that this is not real measurement - for me a measurement is simple a quantitative proposition of a characteristic of something to a unit. The time of the measurement might or might not be interesting/relevant - e.g. the measurement is constant; or I'm just interested in the relationship to another measurement. 

O.k. this was more a theoretical viewpoint, to be pragmatic and delivery an explanation why I've created this issue. We really have implementations of measurements where we couldn't provide a real exact timestamps. Let me explain: While sensor cards for sure deliver qualified timestamps, we also have implementations on (rather slow/imprecise) control systems which just watch a specific value - and if that value changes more than a specific amount another measured values is taken and both values are written to the log. This way we collect some displacement/force tuples. 

If we are forced to provide a timestamp - which is unneeded here anyway - we may produce more trouble than value. Chances are good that totally absurd values will be written to the unide telegram to just fulfil the format specification - e.g. just the enumeration of the tuples like 0, 1, 2, 3, 4 - because a change to the control systems to just produce an needless timestamp value series is unlikely to happen. But even if the control system is changed to provide a timestamp it might produce more harm than good, because the resolution/synchronization of the time on the system might be too imprecise. Also since the timestamps are not equidistant chances are higher on 3rd party systems that the other series are somehow normalized on time based rates and so additional numerical problems might occur - but this is speculation.

To turn it the other way around - what are the use cases where a mandatory time field has an advantage? 
Because the same argument of the 100 meter pipe (see https://github.com/eclipse/unide/issues/33#issuecomment-385352517) is true for time stretched measurements - you could have different telegrams if another systems is really forced to create a conjunction between the measured series and the timestamp of the measurement. Lets think of a meteorological station that transmits the outside temperature every second - and we want to support a continuous analysis. So would we like to represent this as a huge telegram every hour? Or do we expect a telegram with a single value every second? Or do we need to support both use cases? If we have no special series representing the time we are forced to send a single telegram every second - which is fine from a streaming or latency standpoint, nut might be unwanted because of the huge redundancy. But if we submit multiple temperatures in a single telegram we need a special series representing the time (in the meaning of Wallclock - we also might also have other timestamps - maybe because I'm a computer scientist CPUtime comes to my mind ;-) ).

So I think the smallest compromise could be to declare an optional special time series (maybe just by naming convention) - which means basically no change to v2. 

A more crafty solution could try to map the requirement on a optional Wallclock time to the general unit problem #44 - but I fear this needs additional brainpower, because it would extend the already huge problem of unit specification (which is at least somehow standardized and (at least partially) solved at other systems we can look at) to the much wider uncertainty of semantic interpretation measured metrics.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODQ3ODc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/41,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY4NDMxNg==,unide,462684316,41,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-12T09:29:24Z,2019-02-12T09:29:24Z,"With https://github.com/eclipse/unide/commit/54482bfd23d5b677d94efd95f525f60f9a8e5cfc, the 'time' offset for process messages should be optional, for measurements it's still mandatory.
That would also be reflected in [process payload diagram](https://www.eclipse.org/unide/images/specification/v3/processPayload.svg) and the [measurement payload diagram](https://www.eclipse.org/unide/images/specification/v3/measurementPayload.svg).
Any objections?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjY4NDMxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/41,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjczNDk5Ng==,unide,462734996,41,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-12T12:07:06Z,2019-02-12T12:07:06Z,"This would be sufficient for our immediate requirements, thanks. 

In general I still believe that a measurement (series) is not necessarily is time dependent - e.g. a measurement of a colour gradient (might have a position/length-dimension and an axis specifying the colour saturation). So I would still vote for a complete optional time series in process and also in (pure) measurement telegrams.

In addition to this this I couldn't find a good explanation why a time series in a process is optional while it is mandatory for a measurement event.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjczNDk5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/42,unide,401823841,42,v3 - include context (& maybe specialValue) in series?,alaendle,969523,Andreas Ländle,,OPEN,2019-01-22T15:39:40Z,2019-03-01T08:09:30Z,"The schema should enforce the semantic of an telegram as good as possible - so I stumble over the context design where the key of a context ""...shall be the name of a measurement point (element of series element)"". This leaves room for interpretation - first a simple check of the schema could no longer determine if the content of a telegram is valid; second how should a recipient handle invalid context references - just ignore them or discard the whole message, or just store/forward them in/to 3rd party systems. So I wonder why you haven't created a series object that includes an optional context? My guess is that you want to be as much as possible backwards compatible with v2 - but since you introduce breaking changes anyway (e.g. mandatory/renamed time field) maybe it's time to reconsider this design decision. The same is true for special values - and maybe even things like data types could/should be encoded in a way that a schema check really validates a PPMP telegram.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzOTM0NQ==,unide,458039345,42,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T08:37:14Z,2019-01-28T08:37:14Z,"The series is a merely an additional json structure. I don't see a value add of putting the context into the series rather than directly into the (Process-)Measurement. Also, the Special Values are in that scope as well. So the a custom context could apply to them as well.
PPMP enforces the syntax but does not aim to validate the semantics of the content. By providing the freetext context namespace, you can provide further links to an elaborate custom semantic model.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAzOTM0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODk5OTc0MA==,unide,458999740,42,NA,alaendle,969523,Andreas Ländle,,NA,2019-01-30T16:02:12Z,2019-01-30T16:02:12Z,"Hmmm --- obviously I didn't got the concept behind it. From the standpoint of a sender or receiver - is any telegram that passes the schema valid? Or is the schema definition really only a syntactical thing without any additional significance? And it is part of the shared assumptions of a sender/receiver pair to define some kind of ""grammar"" how naming of series/specialValues/etc relates to each other? Or is this rule-set part of the unide specification, but not represented in the schema (e.g. as textual comments)? I tend to believe it could be useful to have something stricter than a pure naming convention - so the idea was to avoid the references by just putting the annotations into the series element (because there seems to be a 0..1-relationship anyway).

Attention! Only guesswork:
Can it be the case that this is more a design than a modelling problem? I guess what bothers you is the reference from the series to a context (in an object oriented sense). And I would agree - because the series is interpreted in a context and not ""has a"" context. But from a document oriented point of view a context without a series doesn't exist (or is at best useless) - so why should the document model allow to define absurd/invalid documents?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODk5OTc0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDU0NzA1MQ==,unide,460547051,42,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-05T08:07:58Z,2019-02-05T08:07:58Z,"Hi @alaendle,
PPMP doesn't prevent meaningless content as much as (x)html allows meaningless content and wrong/dead links on a webpage. Yet, html was a basic structure that greatly facilitated information sharing.
Do you want to propose any reasonably simple, polyglott way to validate constraints in ppmp messages any better rather than JSON schema?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MDU0NzA1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ0MDk2NA==,unide,461440964,42,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-07T14:27:37Z,2019-02-07T14:27:37Z,"Hello @ameinhardt, sorry if you got me wrong, I'm certainly not arguing against JSON schema. The idea was only to evolve the schema in a way that if a message is valid the chances it's also reasonable are high.

With this mindset I wondered if it would be advisable to simplify the schema by avoiding the references from context-elements to a series-element by including the context-object in the series-object. E.g.:

`""context: { ""<NAME>"": { ...variousLimitsUnitsEtc... }, ... }, ""series"": { ""<NAME>"": [...values...], ... }`

might be changed to a structure like the following to avoid name mismatches/inconsistencies:

`""series"": { ""<NAME>"": { ""context"": { ...variousLimitsUnitsEtc... }, ""values"": [...values...] }, ... }`

Since I now have recognized that specialValues are special to the process telegram and might include different series lets just focus on context for now. I'm aware of the trade-off to introduce an additional series-Object - on the other hand we avoid the redundant naming of the series (but since the context is optional this benefit not always takes effect).

I just wanted to convey the idea. I hope I could clarify my intention now; if the proposal is conflicts with the PPMP design principles please close this issue.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQ0MDk2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjI4NTEyNg==,unide,462285126,42,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-11T10:47:41Z,2019-02-11T10:47:41Z,"@alaendle,
so there would be different context possible for each measurement point? Is that likely in reality?
At first, it seems very redundant","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjI4NTEyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjM3NDQ5MQ==,unide,462374491,42,NA,alaendle,969523,Andreas Ländle,,NA,2019-02-11T15:41:36Z,2019-02-11T15:41:36Z,"@ameinhardt I didn't get the redundancy argument - the current draft collects all context fields under an object with a series name - so where is redundancy created if this objects moves into the series (it will still be optional). The only redundancy I encounter is the overhead of the series object.

To build up an example:

v3-style:
```
    {
      ""code"": ""0000 EE01"",
      ""name"": ""heating up"",
      ""phase"": ""phase 1"",
      ""result"": ""OK"",
      ""ts"": ""2019-02-11T14:41:28.593Z"",
      ""context"": {
        ""pressure"": {
          ""namespace"": ""https://mycompany.com/productvariants/5986"",
          ""unit"": ""Pa"",
          ""limits"": {
            ""upperError"": 103000,
            ""lowerError"": 99000,
            ""upperWarn"": 102000,
            ""lowerWarn"": 100000,
            ""target"": 100950
          }
        },
        ""force"": {
          ""limits"": {
            ""upperError"": [
              29,
              27,
              26
            ],
            ""lowerError"": [
              23,
              21,
              20
            ],
            ""upperWarn"": [
              28.5,
              26.5,
              25.5
            ],
            ""lowerWarn"": [
              23.5,
              21.5,
              20.5
            ],
            ""target"": [
              26,
              24,
              23
            ]
          }
        }
      },
      ""series"": {
        ""force"": [
          26,
          23,
          24
        ],
        ""pressure"": [
          100952.4,
          100946.32,
          100944.2432
        ],
        ""temperature"": [
          45.4243,
          46.42342,
          44.2432
        ]
      }
    }
```

proposal:

```
    {
      ""code"": ""0000 EE01"",
      ""name"": ""heating up"",
      ""phase"": ""phase 1"",
      ""result"": ""OK"",
      ""ts"": ""2019-02-11T14:41:28.593Z"",
      ""series"": {
        ""force"": {
          ""context"": {
            ""limits"": {
              ""upperError"": [
                29,
                27,
                26
              ],
              ""lowerError"": [
                23,
                21,
                20
              ],
              ""upperWarn"": [
                28.5,
                26.5,
                25.5
              ],
              ""lowerWarn"": [
                23.5,
                21.5,
                20.5
              ],
              ""target"": [
                26,
                24,
                23
              ]
            }
          },
          ""values"": [
            26,
            23,
            24
          ]
        },
        ""pressure"": {
          ""context"": {
            ""namespace"": ""https://mycompany.com/productvariants/5986"",
            ""unit"": ""Pa"",
            ""limits"": {
              ""upperError"": 103000,
              ""lowerError"": 99000,
              ""upperWarn"": 102000,
              ""lowerWarn"": 100000,
              ""target"": 100950
            }
          },
          ""values: [
            100952.4,
            100946.32,
            100944.2432
          ]
        },
        ""temperature"": {
          values: [
            45.4243,
            46.42342,
            44.2432
          ]
        }
      }
    }
```","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjM3NDQ5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/42,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODU4MDA3NQ==,unide,468580075,42,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-03-01T08:09:30Z,2019-03-01T08:09:30Z,In my opinion that is too much flexibility to allow different namespaces even in different measurement points. I'd rather move it a level up to telegram level,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2ODU4MDA3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/43,https://api.github.com/repos/eclipse-archived/unide/issues/43,unide,403019711,43,"v3 - series can contain numbes, strings and bools - but specialValues are just numbers",alaendle,969523,Andreas Ländle,,CLOSED,2019-01-25T06:12:08Z,2019-03-02T10:45:52Z,"If a measurement series is allowed to contain strings/bools as values, the same should be true for special values.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/43,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1MjYzNw==,unide,458052637,43,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T09:23:33Z,2019-01-28T09:23:33Z,"that makes sense. Thanks for pointing it out.
https://github.com/eclipse/unide/commit/0c289b85c4d374d9b8af9db6429fee4501fcb055#diff-2be9ddf6492c3e09782c5f22aba8b1d6","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1MjYzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/44,https://api.github.com/repos/eclipse-archived/unide/issues/44,unide,403025652,44,v3 - unit as string is insufficent,alaendle,969523,Andreas Ländle,,CLOSED,2019-01-25T06:40:47Z,2019-03-02T10:46:06Z,"I really like the idea to be more specific about the measuring units and also the reference to https://tools.ietf.org/html/draft-ietf-core-senml-14#section-12.1, but I fear that to really have some a general semantic on measurements a simple string representation of units isn't enough.

For example in some context millimetres could be a a useful unit for some measurement; and it wouldn't make sense to convert to meters just for unide (also it wouldn't make sense to display the translated values in systems like Nexeed PPM). So we will face different units (mm, cm, m, inch) for the same measured without any connection.

So I believe that the protocol should expand it's unit representation at least  by two optional fields.
- base unit: maybe even more aligned to the SI unit system than SenML
- conversion factor: To be able to translate from the used unit to the base unit","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/44,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1NzYzMw==,unide,458057633,44,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-01-28T09:37:30Z,2019-01-28T09:37:30Z,"This is very redundant to be transmitted in every payload. And how to specifiy non-trivial calculations, like cartesian to polar coordinates?
We couldn't agree on a fixed unit norm, so context>unit would be the custom indicator. The sender / receiver of the telegram should have an understanding of how to process this. If in doubt, they can use context>namespace as an additional clarification.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA1NzYzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/44,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODk4MjA0NQ==,unide,458982045,44,NA,alaendle,969523,Andreas Ländle,,NA,2019-01-30T15:18:12Z,2019-01-30T15:18:12Z,O.k. if unide assumes that sender/receiver shares a vision about the meaning of data the current draft allows a adequate representation of units. And thanks for noting the namespace - if needed this allows a reference to a semantic specification of the unit (e.g. http://data.nasa.gov/qudt/owl/unit#Centimeter) - however still sender/receiver need to agree on this (it's nothing the unide format supports natively; but I think it's also not the goal of unide to allow a complete semantic specification of its telegrams).,"{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODk4MjA0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/45,https://api.github.com/repos/eclipse-archived/unide/issues/45,unide,407294173,45,Difference in metaData type,ameinhardt,26243798,Axel Meinhardt,,CLOSED,2019-02-06T15:37:49Z,2019-02-07T13:28:08Z,"https://www.eclipse.org/unide/images/specification/v2/processPayload.svg suggests, that metaData contains values of type String. Yet, the json schema doesn't enforce that. metaData is just of type: Object.
Let's clarify","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/45,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQwOTkwMA==,unide,461409900,45,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-02-07T13:02:17Z,2019-02-07T13:02:17Z,"I have fixed the mismatch in the v2 schema with commit https://github.com/eclipse/unide/commit/747377d758f2ff850c6e1b204e0de07e10cec513.
The validation interface at https://unide.eclipse.org/rest/v2/validate would now respond with:
```
{""device.metaData.test"":""array found, string expected""}
```
The website also [lists the field](https://www.eclipse.org/unide/specification/v2/measurement-message#p-111)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTQwOTkwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/46,unide,465567619,46,"Machine-message v3, add ""state"" field to Message properties",joeyphant,11751282,Johannes Herter,,CLOSED,2019-07-09T04:49:42Z,2019-10-11T15:40:06Z,"An additional field should be added to determine the state of each individual message in the payload.

suggested name: `state`
suggested type: `enumeration`
suggested values: `NEW`, `ACKNOWLEDGED`, `CONFIRMED`

Especially when talking about machine errors different states are required:
- NEW, the error has just occurred
- ACKNOWLEDGED, the error was acknowledged (someone is working on it an trying to fix it)
- CONFIRMED, the error was fixed and the problem resolved","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTUxMzg1Mw==,unide,509513853,46,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-07-09T06:52:03Z,2019-07-09T06:52:03Z,"Hi @joeyphant,
I like that idea. Is the message itself in a `state` or would it be a `cause` or `trigger`? I understand that a state that is reported appears and disapears (binary). If we use an enum, how do we come to a complete list? E.g. wouldn't we than also have to discuss many other options like `ABORTED`, `REVIVED`, `REJECTED`...","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTUxMzg1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTY0Mzk3MQ==,unide,509643971,46,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-09T13:33:10Z,2019-07-09T13:33:10Z,"Hi @ameinhardt,
I would say the message itself is in a `state` and has different transitions from one state to another. So a state only disappears if another state is set.

While you are right about the discussion on other options, I am not sure what the alternative to an enum would be. Using a string field?
Should we not rather start with a first set of options and extend that in the future if additional options are required/requested by someone?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTY0Mzk3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUyNzYwMg==,unide,510527602,46,NA,muelsen,24450403,Henryk Fischer,,NA,2019-07-11T15:11:35Z,2019-07-11T15:11:35Z,"Hi @joeyphant , @ameinhardt ,
 for me it would be sufficient to have to START/STOP or ON/OFF information as @ameinhardt mentioned by the binary option. There will be also other states depending on individual use cases and manufacturing types, but covering them all won't be possible. So let us start with the binary version (e.g. START/STOP)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUyNzYwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUzMDQyMw==,unide,510530423,46,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-07-11T15:18:44Z,2019-07-11T15:18:44Z,"@muelsen: state already [has a meaning](https://www.eclipse.org/unide/specification/v3/process-message#p-90). I would prefer to coin a different key for this attribute like `cause`, `trigger` or `side`. What do you think?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUzMDQyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDc1MTE4MQ==,unide,510751181,46,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-12T05:31:36Z,2019-07-12T05:31:36Z,"@ameinhardt , @muelsen : we had a very similar discussion internally before actually making this request. While a binary ""start/stop"" option would be enough for our **current** usecase, we did not want to limit others (and ourselves) to only use those two options.
A binary option could still be introduced following my original request (only allowing `NEW` and `CONFIRMED`), but would still allow us to extend it later.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDc1MTE4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQwMDE0Ng==,unide,511400146,46,NA,muelsen,24450403,Henryk Fischer,,NA,2019-07-15T13:23:53Z,2019-07-15T13:23:53Z,"@ameinhardt ,
I thought state is only OK, WARN, INFO, ERROR or UNKNOWN, not?
@joeyphant , 
NEW would be also OK from my side, but with CONFIRMED I assume an action (e.g. by the operator). In some case maybe there is not action, just end of the failure. Is there maybe a synonym for this?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQwMDE0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQxOTA2Nw==,unide,511419067,46,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-15T14:11:58Z,2019-07-15T14:11:58Z,"OK, WARN, INFO, ERROR and UNKNOWN are possible states of the device (device.state with enum type DeviceState). I don't think we should use a different word if we want to describe the state of a message.

Possible synonym for CONFIRMED: ENDED, FINISHED","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQxOTA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTc4NTgxMA==,unide,511785810,46,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-07-16T11:59:33Z,2019-07-16T11:59:33Z,"Hi @joeyphant,
I would like that there is no synonyms but well-defined states.
Can you propose a finite-state machine for messages with clearly defnined names and description?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTc4NTgxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTk0NTkwNQ==,unide,511945905,46,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-16T19:06:46Z,2019-07-16T19:06:46Z,"@ameinhardt,
Considering my initial idea, your input and @muelsen doubt about the word ""confirmed"" I would recommend the following states:

Name | Description
------------ | -------------
NEW | Indicates a new occurrence of this message (e.g. the error is active)
ENDED | Indicates that the message was confirmed/resolved by an operator or ""just ended"" without an explicit action by an operator (e.g. the error is inactive)

Transitions are only allowed from NEW to ENDED and from ENDED to NEW. This also covers the binary usecase mentioned by @muelsen and can still be extended by additional intermediate states.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTk0NTkwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/46,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTExNTY2MQ==,unide,541115661,46,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-10-11T15:40:05Z,2019-10-11T15:40:05Z,"hi @joeyphant,
I added your suggestion in the schema.
Thanks for the patience","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTExNTY2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/47,unide,465572039,47,"Machine-message v3, extend possible values for Type enumeration",joeyphant,11751282,Johannes Herter,,CLOSED,2019-07-09T05:09:25Z,2019-10-11T15:40:26Z,"In order to determine the actual type of the message which was sent by the device, the possible values for the `Type` enumeration should be extended.

Current values: `DEVICE`, `TECHNICAL_INFO`
Additional values: `DEVICE_INFO`, `DEVICE_WARNING`, `DEVICE_ERROR`

A device might sent a list of messages where only one is an error and the others only contain informational content","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTUxMDkxMQ==,unide,509510911,47,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-07-09T06:41:11Z,2019-07-09T06:41:11Z,"Hi @joeyphant ,
can [severity](https://www.eclipse.org/unide/specification/v2/machine-message#p-18) (HIGH, MEDIUM, LOW) not cover that for you? Or is there a DEVICE_ERROR with severity low and a DEVICE_INFO with severity high in your scenario?
The `type` field does indicated the type of origin (from a device or somewhere in the infrastructure)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTUxMDkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTY0NDc2NA==,unide,509644764,47,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-09T13:35:20Z,2019-07-09T13:35:20Z,"Hi @ameinhardt,
Severity could cover that, yes. But I don't like the idea of having an implicit meaning behind the severity. Different solutions/services using PPMP might have different implicit meanings behind the severity.

Currently our scenario does not support a DEVICE_ERROR with severity low or a DEVICE_INFO with severity high. However, there might be scenarios in the future where this needs to be supported.

Thanks for the clarification of the current usage of the `type` field. While the usage does not fit my requested changes, the name of the field certainly does. That's why I also included `DEVICE_` prefix in all new values.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUwOTY0NDc2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUyNDU1MA==,unide,510524550,47,NA,muelsen,24450403,Henryk Fischer,,NA,2019-07-11T15:04:10Z,2019-07-11T15:04:10Z,"Hi @joeyphant , @ameinhardt ,
I think if we don't have the specific requirement currently we shouldn't add fields we don't need. Better to keep it as simple as needed instead of adding to many options to the enum.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDUyNDU1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQyMDI3Mg==,unide,511420272,47,NA,joeyphant,11751282,Johannes Herter,,NA,2019-07-15T14:15:02Z,2019-07-15T14:15:02Z,"@ameinhardt , @muelsen ,
After clarifying again, there are errors with different severities in our scenario.","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTQyMDI3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTc5MTczNA==,unide,511791734,47,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-07-16T12:18:37Z,2019-07-16T12:18:37Z,"Maybe we could rename `type` to `source`. Then, `type` is free for identifying the message type as in ['INFO', 'WARNING', 'ERROR']. `severity` would still remain.
Any objections?","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMTc5MTczNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/unide/issues/47,https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTExNTc3NA==,unide,541115774,47,NA,ameinhardt,26243798,Axel Meinhardt,,NA,2019-10-11T15:40:26Z,2019-10-11T15:40:26Z,"hi @joeyphant,
I added your suggestion in the schema.
Thanks for the patience","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTExNTc3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/unide/issues/58,https://api.github.com/repos/eclipse-archived/unide/issues/58,unide,1016356412,58,v3 - Special Values to explicitly model limits,kfkloos,63441743,,,OPEN,2021-10-05T13:49:52Z,2021-10-05T13:49:52Z,"Hi, I am trying to understand Special Values for a case where I want to trasmit distinct single measurments via PPMP.

In the example it says:
          
```
          {""name"": ""turning point"",
          ""value"": {
            ""pressure"": 101530,
            ""force"": 50
          }
        },
        {
          ""name"": ""shutoffForce"",
          ""time"": 24,
          ""value"": {
            ""force"": 24,
            ""upperError"": 26,
            ""lowerError"": 22,
            ""upperWarn"": 25,
            ""lowerWarn"": 23,
            ""target"": 24
            }
        },
        {
          ""name"": ""shutoffPressure"",
          ""time"": 24,
          ""value"": {
            ""pressure"": 100950,
            ""upperError"": 103000,
            ""lowerError"": 99000
          }
        }
```

In shutoffForce we have the ""upperWarn"", ""target"" etc. corresponding to limts for this point value. However, it is not explicitly expressend, that the limits & target belong to the paramter force. This is very limiting for analytics cases. Hence I suggest to modify the special values in the give example as follows:
```
        {
          ""name"": ""shutoffForce"",
          ""time"": 24,
          ""singleValues"": {
            ""force"": {""value"": 24,
            ""upperError"": 26,
            ""lowerError"": 22,
            ""upperWarn"": 25,
            ""lowerWarn"": 23,
            ""target"": 24},

          }
```
This way it would be explicitly modelled that the limits belongs to the force tag. Even more, it would allow to combine ""shutoffForce"" and ""shutoffPressure"" into a single special value ""shuttoff"" and making int multi-dimensional.

With this change, PPMP process messages would also support single point measurments as well as they support series. (When doing that, please also consider making the series element optional for cases, where a device only measures single points.)","{""url"": ""https://api.github.com/repos/eclipse-archived/unide/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
