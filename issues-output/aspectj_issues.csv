type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,aspectj,679439701,9,Review/port performance enhancements proposed in bugzilla issue,aclement,226298,Andy Clement,aclement@vmware.com,CLOSED,2020-08-14T22:52:42Z,2022-12-29T23:13:06Z,See https://bugs.eclipse.org/bugs/show_bug.cgi?id=565450 which includes the patch.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NDg4MTk0Ng==,aspectj,774881946,9,NA,LifeIsStrange,12934716,,,NA,2021-02-08T05:38:58Z,2021-02-08T05:38:58Z,Any update? This seems like a potentially big improvement ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NDg4MTk0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTU1MTA4NA==,aspectj,775551084,9,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-02-09T00:09:58Z,2021-02-09T00:09:58Z,"Unfortunately haven't had time to do it, but if someone wants to turn it into a PR with maybe a system property to control the behaviour, that would be a likely way for it to go in with limited testing (so by default you get todays behaviour, but switch on a property and this feature could be tested out). ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTU1MTA4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48XgoO,aspectj,1012795918,9,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-14T05:51:23Z,2022-01-14T05:51:23Z,"Because the commits were directly on master and do not come from PR #37, let me mention for reference that @aclement added these changes: https://github.com/eclipse/org.aspectj/compare/1b3cead1715c...3227aad604f0 which are probably going to superseed the PR and eventuall close this issue. Andy was also so kind to add basic tests. 😊","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48XgoO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48XhD-,aspectj,1012797694,9,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-14T05:56:28Z,2022-01-14T05:56:28Z,**To do:** Mention the new options in the 1.9.8 release notes and wherever else it might make sense to integrate them into existing documentation.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48XhD-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48Z3tZ,aspectj,1013414745,9,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-14T19:34:09Z,2022-01-14T19:34:09Z,"I think yes to release notes, obviously, but also it needs its own post on the mailing list to raise awareness for anyone that wants to try this out and see if it helps them. I'm not sure where else we could publicize it - [my AspectJ blog](http://andrewclement.blogspot.com) is rather long in the tooth now. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48Z3tZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/9,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gC5p,aspectj,1015033449,9,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-18T03:11:35Z,2022-01-18T03:11:35Z,"@aclement: Release notes done, see #116.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gC5p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,aspectj,698705631,20,Compilation errors for native AspectJ keywords enclosed in parentheses,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2020-09-11T01:41:07Z,2023-01-04T23:43:43Z,"I found this at https://stackoverflow.com/q/63804177/1082681.

Trying to compile

```java
package de.scrum_master.app;

public class Application {
  public void runRule(boolean before) {
    String str = (before) ? ""before"" : ""after"";
  }
}
```

leads to a compilation error in AJ 1.9.6:

```none
.../Application.java:5 [error] Syntax error, insert ""|| Expression"" to complete Expression
String str = (before) ? ""before"" : ""after"";
```

Removing the redundant braces around `(before)` fixes the problem. The same sample code compiles fine with Javac. I am not sure if this is an Ejc or Ajc problem, I did not double-check.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MTI1NDUyMg==,aspectj,691254522,20,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2020-09-11T18:43:37Z,2020-09-11T18:43:37Z,"Yeah, there are some nuances in how variables named after AspectJ keywords are handled and we don't have the test coverage.  Place to look at the issue is the java.g in here: https://github.com/eclipse/org.aspectj.shadows/blob/aj_19/org.eclipse.jdt.core/grammar/java.g (so not in this project).

It will be incorrect use of the NameOrAj or SimpleNameOrAj entries I think.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MTI1NDUyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MTM1OTIxOQ==,aspectj,691359219,20,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2020-09-12T00:00:29Z,2020-09-12T00:00:29Z,"Oh right, `before` is a keyword in native AspectJ syntax! _clicking sound in my mind_

This repository must be really old, mentioning difficult 3-way merges with CVS. 😉 Thanks to Git 3-way merges should be much less painful now, at least I hope so for you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MTM1OTIxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RjN8L,aspectj,1368186635,20,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-31T08:51:30Z,2022-12-31T08:51:30Z,"AspectJ's variant of JDT Core has long since been moved to GitHub, i.e. the new location of the _java.g_ grammar file is https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/aspectj/org.eclipse.jdt.core.compiler.batch/grammar/java.g.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RjN8L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RjSqD,aspectj,1368205955,20,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-31T11:56:13Z,2022-12-31T11:56:13Z,"> Yeah, there are some nuances in how variables named after AspectJ keywords are handled and we don't have the test coverage. Place to look at the issue is the java.g in (...)
> 
> It will be incorrect use of the NameOrAj or SimpleNameOrAj entries I think.

I do not know how to exactly read that grammar. I tried to trace some clues there, but did not find anything and need your help, @aclement.

What I do know is that this issue is not limited to ternary expressions but to parentesised patterns containing native AspectJ keywords in general, i.e. something like `boolean foo = (before)` where a parenthesised expression should be allowed. Unaffected are cases in which parentheses do not belong to the expression as such, e.g. `switch (before)`. But then again, `switch ((before))` contains a parenthesised expression and triggers a compiler error.

Only with some Java 17 changes, the grammar got a separate `ParenthesizedPattern` symbol, see [this section]( https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/83dca9f647436187c69f839a9eff59c13365c0e3/org.eclipse.jdt.core.compiler.batch/grammar/java.g#L1918-L1926). But that did not introduce the problem. I tried compiling sample code with AJC as old as 1.8.12, and the issue is the same there, i.e. it is an old bug.

There is also this whole long section ""Duplicate rules to remove ambiguity for (x)"" starting [here](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/83dca9f647436187c69f839a9eff59c13365c0e3/org.eclipse.jdt.core.compiler.batch/grammar/java.g#L3406-L3408), but also in there I did not find anything out of the ordinary. I am guessing, however, that I am missing something here, which Andy might easily spot.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RjSqD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Rt3pD,aspectj,1370978883,20,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-04T14:12:12Z,2023-01-04T14:12:12Z,"For the record (CC @aclement): Actually, the problem was in another part of the grammar. I was able to find the right spot by compiling a JDT Core version with `org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTParserClass#DEBUG` set to `true` and compiling a simplified version of the [new regression test](https://github.com/eclipse/org.aspectj/pull/207/files#diff-4f3af45b23825295333f484b3bbf63feeec66bdabb928a47f2e9fddb607f0271) with AJC, inspecting the parser's debug log. A similar approach might help in the future.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Rt3pD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/20,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RwDTt,aspectj,1371550957,20,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-01-04T23:43:43Z,2023-01-04T23:43:43Z,"That's good digging, if possible it'd be worth capturing that debugging approach somewhere more visible in project docs for anyone in future that wants to look at errors in this area.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RwDTt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,aspectj,724188856,24,Array type reference not working when aspect is compiled separately from referenced type,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2020-10-19T01:10:53Z,2023-01-15T13:44:26Z,"I have found [StackOverflow question #64416863](https://stackoverflow.com/q/64416863/1082681) and can reproduce the author's problem with AspectJ 1.9.6. I further simplified the code a bit to now read:

```java
public aspect MyAspect {
  after() : execution(public MaybeMissingClass MaybeMissingClass.*()) {
    System.out.println(thisJoinPoint);
  }

  after() : execution(public MaybeMissingClass[] MaybeMissingClass.*()) {
    System.out.println(thisJoinPoint);
  }
}
```

```java
public class MaybeMissingClass {
  public static void main(String[] args) {
    f1();
    f2();
  }

  public static MaybeMissingClass f1() {
    System.out.println(""MaybeMissingClass.f1"");
    return null;
  }

  public static MaybeMissingClass[] f2() {
    System.out.println(""MaybeMissingClass.f2"");
    return null;
  }
}
```

When compiling everything together, it works as expected:
```text
foo> ajc -cp aspectjrt.jar -1.8 MyAspect.aj MaybeMissingClass.java

foo> java -cp .;aspectjrt.jar MaybeMissingClass
MaybeMissingClass.f1
execution(MaybeMissingClass MaybeMissingClass.f1())
MaybeMissingClass.f2
execution(MaybeMissingClass[] MaybeMissingClass.f2())
```

When compiling the aspect separately however, the second advice unexpectedly intercepts target method `f1`:
```text
foo> ajc -cp aspectjrt.jar -1.8 -outjar aspect.jar MyAspect.aj
foo\MyAspect.aj:11 [warning] no match for this type name: MaybeMissingClass [Xlint:invalidAbsoluteTypeName]
after() : execution(public MaybeMissingClass MaybeMissingClass.*()) {
                           ^^^^^^^^^^^^^^
        [Xlint:invalidAbsoluteTypeName]
foo\MyAspect.aj:11 [warning] no match for this type name: MaybeMissingClass [Xlint:invalidAbsoluteTypeName]
after() : execution(public MaybeMissingClass MaybeMissingClass.*()) {
                                             ^^^^^^^^^^^^^^^^
        [Xlint:invalidAbsoluteTypeName]
foo\MyAspect.aj:15 [warning] no match for this type name: MaybeMissingClass [Xlint:invalidAbsoluteTypeName]
after() : execution(public MaybeMissingClass[] MaybeMissingClass.*()) {
                           ^^^^^^^^^^^^^^^^
        [Xlint:invalidAbsoluteTypeName]
foo\MyAspect.aj:15 [warning] no match for this type name: MaybeMissingClass [Xlint:invalidAbsoluteTypeName]
after() : execution(public MaybeMissingClass[] MaybeMissingClass.*()) {
                                               ^^^^^^^^^^^^^^^^
        [Xlint:invalidAbsoluteTypeName]
foo\MyAspect.aj:15 [warning] advice defined in MyAspect has not been applied [Xlint:adviceDidNotMatch]

foo\MyAspect.aj:11 [warning] advice defined in MyAspect has not been applied [Xlint:adviceDidNotMatch]


6 warnings

foo> ajc -cp aspectjrt.jar -1.8 -aspectpath aspect.jar MaybeMissingClass.java

foo> java -cp .;aspect.jar;aspectjrt.jar MaybeMissingClass
MaybeMissingClass.f1
execution(MaybeMissingClass MaybeMissingClass.f1())
execution(MaybeMissingClass MaybeMissingClass.f1())
MaybeMissingClass.f2
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMTQ1ODg1MA==,aspectj,711458850,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2020-10-19T01:20:16Z,2020-10-19T01:20:16Z,"BTW, when modifying the aspect like this experimentally

```java
public aspect MyAspect {
  after() : execution(public MaybeMissing* MaybeMissing*.*()) {
    System.out.println(thisJoinPoint);
  }

  after() : execution(public MaybeMissing*[] MaybeMissing*.*()) {
    System.out.println(thisJoinPoint);
  }
}
```

now both advices match both methods, i.e. the absolute type name as such does not seem to be the (only) problem. This is true for both compiling the aspect separately or together with the target class. The program output will be:

```text
MaybeMissingClass.f1
execution(MaybeMissingClass MaybeMissingClass.f1())
execution(MaybeMissingClass MaybeMissingClass.f1())
MaybeMissingClass.f2
execution(MaybeMissingClass[] MaybeMissingClass.f2())
execution(MaybeMissingClass[] MaybeMissingClass.f2())
```

There seems to be some imprecision with pointcut parsing in this case.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMTQ1ODg1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MjU0NDM1Nw==,aspectj,762544357,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-01-19T01:28:32Z,2021-01-19T01:28:32Z,Some feedback from a maintainer would be welcome. Thank you.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MjU0NDM1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MzIwODU4OQ==,aspectj,763208589,24,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-01-19T23:26:21Z,2021-01-19T23:26:21Z,"Not sure what I can say, looks like a bug as you say. Maybe in parsing of point cuts (`PatternParser`), maybe in how array information is remembered (`TypePattern` hierarchy), maybe how matching of type patterns is done (`TypePattern.matches*`).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MzIwODU4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8YD6,aspectj,1374781690,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-08T09:52:19Z,2023-01-08T09:52:19Z,"I started adding tests reproducing both the currently working and failing cases to the code base in a branch. For the second case with the fuzzy pointcuts - return types `MaybeMissing*` and `MaybeMissing*[]` - I noticed that matching is also wrong (too broad) when aspect and target class are compiled together, not just in the separate compilation case. I.e., there are two distinct types of bugs, even though they might be related.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8YD6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8hKM,aspectj,1374818956,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-08T12:00:53Z,2023-01-08T12:00:53Z,"For the first case with the exact type names, I compared `javap -v` output for the aspects generated when compiled together with the target class or separately. FWIW,
  * the executable byte code looks exactly identical,
  * the separately compiled aspect's embedded binary `org.aspectj.weaver.Advice` and `org.aspectj.weaver.WeaverState` data are larger than the other one's,
  * the aspect compiled together with the target class contains some constant table data which the other aspect does not:
    ```text
    #34 = Utf8               LMaybeMissingClass;
    ...
    #51 = Utf8               [LMaybeMissingClass;
    ```
    It is not a big surprise that this type information is not available in the separately compiled aspect, I am just collecting data at thios point.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8hKM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8jct,aspectj,1374828333,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-08T12:47:49Z,2023-01-08T12:47:49Z,"> Not sure what I can say, looks like a bug as you say. Maybe in parsing of point cuts (`PatternParser`), maybe in how array information is remembered (`TypePattern` hierarchy), maybe how matching of type patterns is done (`TypePattern.matches*`).

Pointcut parsing and array information storage seem to be OK. In both cases (exact and fuzzy/wildcard type patterns), `TypePattern.dim` equals 1 after parsing the pointcuts. I need to debug more, but it looks as if it might actually be a matching rather than a parsing or storage problem.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R8jct/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R89ag,aspectj,1374934688,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-08T21:45:27Z,2023-01-08T21:45:27Z,"I managed to locally fix the matcher for one-dimensional array return types. For multi-dimensional ones like `MaybeMissingClass[][]` however, currently it only works when compiling aspect and target class together. When creating a separate aspect library, the resulting aspect somehow only contains 2 instead of 3 advice methods for this configuration:

```java
public aspect ExactlyMatchingAspect {
  after() : execution(public MaybeMissingClass MaybeMissingClass.*()) {
    System.out.println(thisJoinPoint);
  }

  after() : execution(public MaybeMissingClass[] MaybeMissingClass.*()) {
    System.out.println(thisJoinPoint);
  }

  after() : execution(public MaybeMissingClass[][] MaybeMissingClass.*()) {
    System.out.println(thisJoinPoint);
  }
}
```

Maybe there is something wrong in `equals` and/or `hashCode` methods. I am documenting this for myself, because I will be very busy during the next few weeks starting tomorrow. Maybe I will not get around to continuing the debug session in a while, so I am documenting the status quo for now.

---

**Update:** I have a local prototype working with multi-dimensional array return types, but it needs to be verified, tidied up and checked. E.g., so far I only tried with arrays of reference types, not of primitive types yet. While I am at it, I also want to look into array type matching for method parameter and field types, not just return types.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R89ag/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/24,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ScUKL,aspectj,1383154315,24,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-15T13:44:26Z,2023-01-15T13:44:26Z,"If you look at the merged PR, this issue became considerably bigger than I thought, because along the way I also improved the syntax for array matching. So, this was not just a simple bugfix.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ScUKL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/25,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/25,aspectj,733861187,25,Advice precedence within a single aspect,kriegaex,1537384,Alexander Kriegisch,,OPEN,2020-11-01T04:06:57Z,2023-03-20T15:34:46Z,"Lately I was dealing with an [SO question about precedence](https://stackoverflow.com/q/64593940/1082681). When reviewing the [corresponding AspectJ manual section](http://www.eclipse.org/aspectj/doc/next/progguide/semantics-advice.html#d0e6257) in order to improve my [extensive answer](https://stackoverflow.com/a/40071281/1082681) (please read) to [this older SO question](https://stackoverflow.com/q/39978586/108268), I noticed once more that understanding and explaining the consequences of intra-aspect precedence rules is quite difficult, even though describing those rules is quite simple. As a matter of fact, when looking at a relatively simple aspect with several types of aspects, it is by no means trivial to predict what is going to happen and, when intuitive or ""naive"" expectations are not met, to understand why that is so. This is especially the case if around advices also modify method arguments and/or return values.

Just look at this simple application:

```java
package de.scrum_master.app;

public class Application {
  public int doSomething(int i) {
    System.out.println(""Doing something with "" + i + "", returning "" + (i - 10));
    return i - 10;
  }

  public static void main(String[] arg) {
    Application application = new Application();
    System.out.println(application.doSomething(99));
  }
}
```

Then there is a relatively simple aspect:

```java
package de.scrum_master.aspect;

import de.scrum_master.app.Application;

public aspect IntraAspectPrecedence {

  pointcut methodCall(int i) :
    call(int Application.doSomething(int)) && args(i);

  after(int i) returning (int result): methodCall(i) {
    System.out.println(""after1 -> "" + i + "", result = "" + result);
  }

  int around(int i): methodCall(i) {
    System.out.println(""around1 (pre-proceed) -> "" + i);
    int result = proceed(11) * 5;
    System.out.println(""around1 (post-proceed) -> "" + i + "", result = "" + result);
    return result;
  }

  int around(int i): methodCall(i) {
    System.out.println(""around2 (pre-proceed) -> "" + i);
    int result = proceed(22) / 2;
    System.out.println(""around2 (post-proceed) -> "" + i + "", result = "" + result);
    return result;
  }

  before(int i): methodCall(i) {
    System.out.println(""before1 -> "" + i);
  }

  before(int i): methodCall(i) {
    System.out.println(""before2 -> "" + i);
  }

  after(int i) returning (int result): methodCall(i) {
    System.out.println(""after2 -> "" + i + "", result = "" + result);
  }

}
```

The console log is:

```text
around1 (pre-proceed) -> 99
around2 (pre-proceed) -> 11
before1 -> 22
before2 -> 22
Doing something with 22, returning 12
after1 -> 22, result = 12
around2 (post-proceed) -> 11, result = 6
around1 (post-proceed) -> 99, result = 30
after2 -> 99, result = 30
30
```

After I had refreshed my rusty knowledge of intra-aspect precedence rules, I understood it, but I am not sure this would apply to more than 5% of all AspectJ users.

I thought about why the behaviour seems so ""unpredictable"" or difficult to understand in the first place. I also thought about why this sample code (also from the AspectJ manual, I just removed the syntax errors from there) would lead to precedence circularity and consequently to compiler errors:

```java
aspect A {
  before(): execution(void main(String[])) {}
  after():  execution(void main(String[])) {}
  before(): execution(void main(String[])) {}
}
```

The reason for both the circularity and the issue being so hard to understand is the first of these two precedence rules (quoted from the manual):

> If the two pieces of advice are defined in the same aspect, then there are two cases:
>   * If either are `after` advice, then the one that appears later in the aspect has precedence over the one that appears earlier.
>   * Otherwise, then the one that appears earlier in the aspect has precedence over the one that appears later.

I played around with the graph library [JGraphT](https://jgrapht.org/) and also used the related [JGraphX](https://github.com/vlsi/jgraphx-publish) graph visualisation module in order to get a deeper understanding of precedence rules and circularity situations, e.g. it is easy to create circularity in my own sample aspect by just moving the first `after` advice in between the two `around` advices.

I successfully reproduced the preference rules and the resulting circularities and tried two different approaches to determine precedence. Actually, the simplest one by far is to just use the chronological order of advices within the aspect to determine precedence. This not only eliminates all circularity issues but also did not ring any alarm bells concerning unpredictable behaviour or whatever during my thought experiments. Precedence rules would be easy to explain and understand. Aspect behaviour would still be the same in most situations or, where different, definitely more like what the user expects. Why would `after` advice #1 have a lower precedence than `after` advice #2, as it is defined now? The user only needs to understand that higher precedence in combination with ""delegate first"" in `after` advices means that higher precedence ""comes later"" with regard to aspect side effects such as logging. The same is true for the code coming after `proceed()` in `around` advices already. Why artificially make `after` advices different?

I recommend to simplify the intra-aspect precedence rules, just making the precedence chronological according to the source code. I know it would be a breaking change, so maybe we could keep the existing rules and make the new ones optional or making the new ones default and clearly documenting how to switch AspectJ to legacy mode (both the compiler and the runtime weaver). I think it was a design error to do it the current way in the first place.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/25,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMTU3OTM1MA==,aspectj,721579350,25,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2020-11-04T08:12:12Z,2020-11-04T08:12:12Z,"Andy, I have published my little [simulator toy](https://github.com/kriegaex/AJ_AdvicePrecedenceGraph). Just clone it and play with it.

It already simulates three different aspects, each with 3 different sets of precedence rules. In `AspectJAdvicePrecedenceSimulator.main` just change the variable `boolean visualiseGraph` in order to use the graphical mode or not in addition to the console log. By editing `List<List<Advice>> demoAspects` in the same method you can easily add more aspect configurations to simulate or edit existing ones. I find the output quite instructive, especially when trying to find out how behaviour would change when changing the precedence rules.

Looking forward to your feedback.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMTU3OTM1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/25,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNTA4OTkzNg==,aspectj,725089936,25,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2020-11-11T02:33:49Z,2020-11-11T02:33:49Z,"@aclement, according to our agreement I am posting parts of our private conversation here for the record:

Andy Clement wrote:

> Yes, let's not lose the conversation, keeping it in github would be good. You know I imagine this is something not too difficult to hack up and run the existing suite against - what does break? Does it break for an unexpected side effort or not? I would be super nervous about making the new mode the default. I wonder if there were some way to recognize in the code when there is a situation that is getting a bit complicated in this space and get folks to try out the new mode (so some debug warning that comes out when doing a build indicating there is maybe a more intuitive mode, can they try it out and provide feedback on some particular github issue).
> 
> 
> Alexander Kriegisch wrote:
> 
> Spring GraalVM Native, wow. Sounds like a time-consuming project.
> 
>> I guess the problem is, like it took you a bit of time to get back to grips the rules, I’ll be the same before I can offer a coherent answer. (Which in itself backs up the thinking that it needs simplification
> 
> We are on the same page there. The fact that it is so hard to understand is a smell. The fact that there even is a circularity problem is another. In ""graph speak"" we are talking about cycles in a directed graph which with my suggested approach would just go away, leaving behind a directed acyclic graph (think Git commits, branches and merges) which, using corresponding algorithms, even can be simplified to a ""straight line"", i.e. a beautifully simple graph without any branches. I played with JGraphT and JGraphX, which seem to confirm this claim.
> 
>> the current way of working was in place way before I came along
> 
> I feared as much.
> 
>> I don’t like offering an alternative scheme but I am even more nervous about breaking existing code, so offering an option to switch maybe is the way to go
> 
> As the existing rules IMO were mainly contrived in order to make after advices' actions appear chronological according to lexical order in the source code, this is the main change you would see. Two after advices logging something would then log in reverse order of their order in the source file. But I would like that, because it would be consistent with what we already see in around advices logging/doing something after 'proceed()'. We would have a beautifully consistent and easy to understand ""onion skin"" scheme: outside-in before proceeding, inside-out after proceeding. Crystal-clear precedence rules, no cycles, no compile or load-time weaving errors. It believe it would be worth the price of a breaking change.
> 
>> but it’s more code to maintain
> 
> True - at first. I would make the simplified rules the default, deprecate the existing rules and announce when they will be removed from AspectJ altogether. The time span for keeping both would be up to you as a maintainer. It could be anything from two minor releases up to 10 years, if that part of the code base does not need much maintenance. After that you would have significantly *less* code to maintain.
> 
> You would need extra tests, though, maybe cloning existing ones which break due to the change and let them run in both scenarios with different expectations plus new ones to explicitly test aspect precedence and its results.
> 
> BTW, would you like me to copy this conversation into the GitHub issue and continue talking there in order to document this discussion outside of our private inboxes? Up to you.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNTA4OTkzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/26,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/26,aspectj,734215535,26,LinkageError runtime weaving hotswap agent,cdalexndr,22418250,,,CLOSED,2020-11-02T06:11:55Z,2023-01-06T09:05:56Z,"On hotswap I get some linkage errors like:
```
INFO: (Enh120375):  AspectJ attempting reweave of 'myapp/web/search/SearchController'
java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.defineClass(ClassLoaderWeavingAdaptor.java:1103)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.access$300(ClassLoaderWeavingAdaptor.java:66)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor$SimpleGeneratedClassHandler.acceptClass(ClassLoaderWeavingAdaptor.java:150)
	at org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider$1.acceptResult(WeavingAdaptor.java:920)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1434)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1195)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:551)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:387)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:116)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:246)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:563)
Caused by: java.lang.LinkageError: loader 'app' attempted duplicate class definition for myapp.web.search.SearchController$AjcClosure1. (myapp.web.search.SearchController$AjcClosure1 is in unnamed module of loader 'app')
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017)
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:710)
	... 16 more
java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.defineClass(ClassLoaderWeavingAdaptor.java:1103)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.access$300(ClassLoaderWeavingAdaptor.java:66)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor$SimpleGeneratedClassHandler.acceptClass(ClassLoaderWeavingAdaptor.java:150)
	at org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider$1.acceptResult(WeavingAdaptor.java:920)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1434)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1195)
	at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:551)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:387)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:116)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
	at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:246)
	at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:563)
Caused by: java.lang.LinkageError: loader 'app' attempted duplicate class definition for myapp.web.search.SearchController$AjcClosure3. (myapp.web.search.SearchController$AjcClosure3 is in unnamed module of loader 'app')
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017)
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:710)
	... 16 more
```

DCEVM 11.0.9
Hotswap agent 1.4.1
Aspectj 1.9.6","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/26,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_-3ss,aspectj,1073445676,26,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-21T03:21:17Z,2022-03-21T03:21:17Z,"Sorry to let this one rot for so long. I am just cleaning up issues here a bit and noticed this one. Is this still relevant with 1.9.8? If so, please provide an [MCVE](https://stackoverflow.com/help/mcve), so we can reproduce and look into it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_-3ss/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/26,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R2_vZ,aspectj,1373371353,26,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-06T09:05:27Z,2023-01-06T09:05:27Z,"No reproducer → no way to verify this. @cdalexndr, I really cannot understand why at first you take the trouble to raise an issue and then fall silent for two full years. So, with regret, I am closing this issue as invalid. We can reopen it, if you ever deign to provide a reproducer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5R2_vZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/28,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/28,aspectj,772189407,28,Improvement : avoiding Exception catching on BasicTokenSource,jdgenerix,5065891,,,OPEN,2020-12-21T13:57:15Z,2022-03-21T03:19:56Z,"Hi,
I've noticed that org.aspectj.weaver.patterns.BasicTokenSource is using try catch(ArrayIndexOutOfBoundsException) to handle the end of the token list. Creating an exception is known as a costly operation. I suggest to test the index first.

Regards,
Julien

```java
         public IToken next() {
                if (index+1 >= tokens.length) {
                    return IToken.EOF;
                }
		try {
		    return tokens[index++];
		} catch (ArrayIndexOutOfBoundsException e) {
			return IToken.EOF;
		}
	}

	public IToken peek() {
                if (index >= tokens.length) {
                    return IToken.EOF;
                }

		try {
		    return tokens[index];
		} catch (ArrayIndexOutOfBoundsException e) {
			return IToken.EOF;
		}
	}

	public IToken peek(int offset) {
                int indexAtOffset = index+offset;
                if (indexAtOffset  >= tokens.length) {
                    return IToken.EOF;
                }

		try {
		    return tokens[indexAtOffset];
		} catch (ArrayIndexOutOfBoundsException e) {
			return IToken.EOF;
		}
	}
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/28,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NjE4ODE2MQ==,aspectj,796188161,28,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-03-10T21:55:30Z,2021-03-10T21:55:30Z,Want to submit a PR for that?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5NjE4ODE2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/30,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/30,aspectj,809430590,30,AspectJ does not compile when Immutables are used,temirov,1078274,Vadym Tyemirov,,CLOSED,2021-02-16T15:54:45Z,2022-03-21T03:01:06Z,"I was unable to use [Immutables](https://github.com/immutables) and AspectJ's aspectj-maven-plugin in a single module. I have tried on-time and binary weaving but with no luck.

I have created a repo to demonstrate the issue: https://github.com/temirov/aspectj-immutables

When trying to compile, there is first a warning and then an NPE error:

```
[WARNING] The version of the Immutables annotation on the classpath has incompatible differences from the Immutables annotation processor used. Various problems might occur, like this one: java.lang.NullPointerException
        <unknown source file>:<no line information>

[ERROR] org.immutables.value.internal.$processor$.$Processor threw java.lang.NullPointerException
```

I have also opened an [issue](https://github.com/immutables/immutables/issues/1267) in Immutables repo for the sake of completeness.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/30,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTQ1MDQ5Ng==,aspectj,781450496,30,NA,temirov,1078274,Vadym Tyemirov,,NA,2021-02-18T16:04:36Z,2021-02-18T16:04:36Z,"The way to fix it is to exclude immutables sources, see [this PR](https://github.com/temirov/aspectj-immutables/pull/1) for the details","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MTQ1MDQ5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/31,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/31,aspectj,818184622,31,Java 15 support and v1.9.7 release date,eli-fin,29652985,,,CLOSED,2021-02-28T11:30:19Z,2022-03-21T02:59:56Z,"Hi,

1. As of now, the latest release is 1.9.6, which supports Java 14. When will support for Java 15 be available?
2. In general, how long does it take AspectJ to support a new Java version?
3. When is the release of 1.9.7 planned for?

Thanks","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/31,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MTc0OTc0OQ==,aspectj,791749749,31,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-03-05T22:22:17Z,2021-03-05T22:22:17Z,"Hey,

I'm not sure on the timeframe for Java 15 - do you need something specific out of Java15? Or just generally want to be on the latest? Given the rapid speed of Java releases now it is hard to keep up.

The timeframe following a version can vary a lot. Someone right now is trying to help automate the process to speed it up - currently it is very manual, when it could really be within hours/days of JDT supporting it (as long as the language did not change too much). But even if the result of the attempt to automate is actually writing down the process clearly, I think that would be a massive assist and enable anyone to contribute an upgrade PR. 

I don't have a date scheduled for 1.9.7. I've been wondering about just supporting LTS versions because of the work involved, which would mean Java17 due later in 2021. As far as I'm aware you are the first person to ask for Java15. Right now with 16 due this month, it's hard to justify doing 15 now then repeating it all for 16.



","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MTc0OTc0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/31,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MjgxNTM0Ng==,aspectj,792815346,31,NA,eli-fin,29652985,,,NA,2021-03-08T15:04:06Z,2021-03-08T15:04:06Z,"Was just asking in general. I haven't found anything specific not supported in Java 15.
Thanks for the answer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MjgxNTM0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,aspectj,841641618,40,Eliminate binaries from Git repository,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2021-03-26T06:40:51Z,2022-03-21T02:59:35Z,"**Situation:** In AspectJ we have the `lib` folder with several binary and source JARs (mostly old legacy versions) and a full (unpacked) Ant 1.6.3 installation. Futhermore there is the modified version of JDT Core, created in the separate ""shadows"" project and copied into the AspectJ folder by an Ant script from there. 

**Goal:** We should get rid of those binaries and instead modify the Maven build in such a way that
  * it downloads them from Maven Central if they prove to be existing artifacts available from there,
  * it downloads them from other official sources (e.g. Apache download server for Ant binary and source distributions),
  * if unavailable, deploy them to a Maven repository - not necessarily Maven Central but something we (e.g. @aclement, @kriegaex, an Eclipse admin) control and let Maven get them from there.
  * After download, the build (unpacks and) copies them to the exact location in `libs` where several scripts expect them to be.
  * If any binaries are not used by scripts but only as Maven dependencies, replace the existing system-scoped dependencies with hard-coded paths by normal Maven dependencies, fixing the transitivity problem and warnings presently caused by system dependencies, forcing us to redundantly add those dependencies to modules which normally should get them as transitive dependencies of other AspectJ modules.

I am planning to implement this myself step by step in my fork - probably on top of the existing Java 15+16 branch - and then make them part of PR #39. The reason for not doing it separately is that said branch contains many fixed tests and the build is currently green on Java 8, 11, 16. So if I break anything, it is easy to notice.

I am going to document my findings concerning ""project archeology"" here in additional comments, so if one day Andy or someone from Eclipse conducts a review about what seem to be new dependencies, it is clear that we had them before and just explanted them from the SCM (where they did not belong in the first place) to external sources.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwNzk4MDU0OA==,aspectj,807980548,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-03-26T06:45:42Z,2021-03-26T06:45:42Z,"The first thing I did was to create SHA-1 checksums of all JAR and ZIP files in 'libs' and then use the Maven Central search API in order to search for existing artifacts matching those checksums. Any match would prove that the corresponding artifact is available on Maven Central.

This is the script I used:

```bash
#!/usr/bin/bash

curl -s https://search.maven.org/solrsearch/select?q=1:72abc87d5f8063e74ee0cf6ae77f07ed906aeb47&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:670b30f2f251fbf566c6a66d46f892e83aff75f6&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:43a7344b27e5249c7bc896489b90ba6db0dca7b6&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:54beaa506f15126e6e2efcd202237f70d6d575b7&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:f91b166c2d4b8298b859920bb6967b25b3752734&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:0a696ad41efc75c2940b54a3e011e90ac336ab47&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:4187c036fa132781d3a7e796ba66cac55052a616&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:89cd7f7a7f026f147688627b3d4a8090990703e7&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a712e37b7d94d1ccf4b402482afd13bd02c239fd&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a366dd627e2803c531143d3d4d4b510ee1f90333&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:acb55eec3de47497483d80fdf0e5ed190adf2b5f&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:d37eb8033633af8a7c25afe633e9cad2cdd85f56&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:3f167cfe43245c2770d50b7069c8e3ab48919f80&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:b493bb12a8a4a8024e3771918a1ea2af1e8dcb82&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:7fc394c203e61a7981cfc71829c2e65c59229477&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:af986a1ac68c7b6c3b8320db80cc71fe044e0552&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:7ea420bdd4416ffe7d02591c17b0a2db29a828f1&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:78e3ccd9069b214c47515b5a8f04d237dab29803&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:3f1d7bfc3c05727faaed473530f5be81e4fd7258&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:7ede67c1681c144e11ab2c7041f8dcb2adfa70f9&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a55eca413bf47f0b09b2a8a6e1dac2013ad2706c&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:0db180b2e539e9d6405383683fd0155b75aa5799&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:3e1b0f10979f62af2f439ca5fb3f6f120db90d6f&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:632615e017d035d282fa61df94bc5984274de4f1&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:b0303b04d9154365066049cdc407a2d1ef2e1e09&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:c51db8584d7cb05adcc5b0d6b4aa8207bb0e735a&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a1300c3f922d6f24245cd19410840c57c66c1387&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:81a2e6d017b59f53ae35143c5a9b27a507500143&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:b7c953dd67e01c952d792224c6f2e281e4c1bbc7&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:99129f16442844f6a4a11ae22fbbee40b14d774f&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:897bcb56d6b7fe2070a5f561bfc78968ecdd3851&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:065acede1e5305bd2b92213d7b5761328c6f4fd9&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:0dd87297b99530431040c097f8d03764cabf08f7&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a99500cf6eea30535eeac6be73899d048f8d12a8&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:fb6d4c045903b4d8507e9df63ae0e71aa29293fa&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:4ddaac58e669196a45ccace4a707839d04bc6771&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:45004072ea16d12d67b63d89a042a1b742c6a793&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:4e5dd843bc95657e5a7f0f4d6600a8cfeeeab4dd&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:649faa0951853ee63f8bbf5edd571d04c81c4e96&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:ba32d6d67b316bc293fe18739e5ce9306ffea1e3&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:dc3b43638c0727d0d2f77a8b8628e7f960b5d051&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:3567c76a25f49b3b733fe99d4b3482c7768840bc&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a55eca35cc4176a1b49440b7e754ca471b614221&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a8858b7a59beb82e7157adb668919996f59e2434&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:da817cd56c360d3f52737092ec1b54adf59f855f&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:d842ab2b81170ac5ed0051b06967ca8852530e62&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:70be878c3e948a75de1ccb20ba3b8f28c1dee9fa&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:2a645c72c70e7fd9dd4f518025b1c0ceb827ff02&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:ffa9d8eb84897746aa196d3f3336d034ddb26f59&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:7a01e7a84869e2135c0804644ddd3250b382cf0a&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:9d7d9fb3530ad2cb60517e1c22090ece4915f277&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:8190696d33f4cdc1b2f8f5821a7e9881cc27edb5&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:b81c2719c63fa8e6f3eca5b11b8e9b5ad79463db&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:4fe9ee7e627f456a4d668fa1237cb39d411d79b8&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:99129f16442844f6a4a11ae22fbbee40b14d774f&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:1a48518889a7efc4b34ebce7103d40e3b72b0965&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:1ef2d52fc0c52ab09a213d1c61f9c4072597ba1a&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:dca0bac6e2561f6ecda51ac5e4d14bb87041474e&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:6382cd1b0c4eb7693fe99ec77da106e3ea597f48&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:61c56d0847619fb955ce1a6ee30566d0579b54d5&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:3f74b24c0dcae08ee8810abb27ff59ba2fc96756&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:0525753763e53f6f76da052b316d0f2e3bfa4d73&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:183bd266951f7af52716f258de0d7d7b3d9a36ce&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:42cb1d4de348c490fff5ae37c29737b752bdb451&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:472043dc2ec6b2623c7eb1785f90663ada181df7&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:6b450d1a9a239c0f934f8c36d235277c67be9008&rows=20
curl -s https://search.maven.org/solrsearch/select?q=1:a1a0de8eaa907a12f3c0bf47e46727fd1a1d1c6d&rows=20
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwNzk4MDU0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwNzk4NzM4Ng==,aspectj,807987386,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-03-26T07:00:20Z,2021-03-26T07:00:20Z,"Here is the compiled result (I shortened the output in order to just contain the information we are interested in here):

```text
lib/ant/ant-src.zip                               | 
lib/ant/etc/ant-bootstrap.jar                     | 
lib/ant/lib/ant-antlr.jar                         | ant:ant-antlr:1.6.3 
lib/ant/lib/ant-apache-bcel.jar                   | ant:ant-apache-bcel:1.6.3 
lib/ant/lib/ant-apache-bsf.jar                    | ant:ant-apache-bsf:1.6.3 
lib/ant/lib/ant-apache-log4j.jar                  | ant:ant-apache-log4j:1.6.3 
lib/ant/lib/ant-apache-oro.jar                    | ant:ant-apache-oro:1.6.3 
lib/ant/lib/ant-apache-regexp.jar                 | ant:ant-apache-regexp:1.6.3 
lib/ant/lib/ant-apache-resolver.jar               | ant:ant-apache-resolver:1.6.3 
lib/ant/lib/ant-commons-logging.jar               | ant:ant-commons-logging:1.6.3 
lib/ant/lib/ant-commons-net.jar                   | ant:ant-commons-net:1.6.3 
lib/ant/lib/ant-icontract.jar                     | ant:ant-icontract:1.6.3 
lib/ant/lib/ant-jai.jar                           | ant:ant-jai:1.6.3 
lib/ant/lib/ant-javamail.jar                      | ant:ant-javamail:1.6.3 
lib/ant/lib/ant-jdepend.jar                       | ant:ant-jdepend:1.6.3 
lib/ant/lib/ant-jmf.jar                           | ant:ant-jmf:1.6.3 
lib/ant/lib/ant-jsch.jar                          | ant:ant-jsch:1.6.3 
lib/ant/lib/ant-junit.jar                         | ant:ant-junit:1.6.3 
lib/ant/lib/ant-launcher.jar                      | ant:ant-launcher:1.6.3 
lib/ant/lib/ant-netrexx.jar                       | ant:ant-netrexx:1.6.3 
lib/ant/lib/ant-nodeps.jar                        | ant:ant-nodeps:1.6.3 
lib/ant/lib/ant-starteam.jar                      | ant:ant-starteam:1.6.3 
lib/ant/lib/ant-stylebook.jar                     | ant:ant-stylebook:1.6.3 
lib/ant/lib/ant-swing.jar                         | ant:ant-swing:1.6.3 
lib/ant/lib/ant-trax.jar                          | ant:ant-trax:1.6.3 
lib/ant/lib/ant-vaj.jar                           | ant:ant-vaj:1.6.3 
lib/ant/lib/ant-weblogic.jar                      | ant:ant-weblogic:1.6.3 
lib/ant/lib/ant-xalan1.jar                        | ant:ant-xalan1:1.6.3 
lib/ant/lib/ant-xslp.jar                          | ant:ant-xslp:1.6.3 
lib/ant/lib/ant.jar                               | ant:ant:1.6.3 
lib/ant/lib/junit.jar                             | junit:junit:3.8.1 
lib/ant/lib/xercesImpl.jar                        | xerces:xercesImpl:2.6.2 
lib/ant/lib/xml-apis.jar                          | xerces:xmlParserAPIs:2.6.2 
lib/asm/asm-2.0.jar                               | 
lib/asm/asm-9.1.jar                               | org.ow2.asm:asm:9.1 
lib/asm/asm-9.1.renamed.jar                       | 
lib/aspectj/lib/aspectjrt.jar                     | 
lib/aspectj/lib/aspectjrt121.jar                  | aspectj:aspectjrt:1.2.1 
lib/aspectj/lib/aspectjtools.jar                  | 
lib/bcel/bcel-src.zip                             | 
lib/bcel/bcel-verifier-src.zip                    | 
lib/bcel/bcel-verifier.jar                        | 
lib/bcel/bcel.jar                                 | 
lib/build/build.jar                               | 
lib/build/build.old.jar                           | 
lib/commons/commons-src.zip                       | 
lib/commons/commons.jar                           | 
lib/docbook/docbook-xsl/extensions/saxon642.jar   | 
lib/docbook/docbook-xsl/extensions/saxon643.jar   | 
lib/docbook/docbook-xsl/extensions/xalan2.jar     | 
lib/docbook/fop/avalon-framework-cvs-20020806.jar | 
lib/docbook/fop/batik.jar                         | batik:batik-1.5-fop:0.20-5 
lib/docbook/fop/fop.jar                           | fop:fop:0.20.5 
lib/docbook/fop/xalan.jar                         | xalan:xalan:2.4.1 
lib/ext/jrockit/jrockit-src.zip                   | 
lib/ext/jrockit/jrockit.jar                       | 
lib/ext/jrockit/managementapi-jrockit81.jar       | 
lib/jarjar/jarjar-1.3.jar                         | com.googlecode.jarjar:jarjar:1.3 
lib/jdiff/jdiff.jar                               | 
lib/junit/junit-src.zip                           | junit:junit:3.8.1 
lib/junit/junit.jar                               | junit:junit:3.8.1 
lib/jython/jython.jar                             | jython:jython:2.1 
lib/regexp/jakarta-regexp-1.2.jar                 | regexp:regexp:1.2 
lib/saxon/saxon.jar                               | 
lib/test/aspectjrt.jar                            | 
lib/test/loadtime5.jar                            | 
lib/test/testing-client.jar                       | 
```

We see many artifacts available on Maven Central, but also quite a few missing ones. Let us talk about them step by step as I find out more.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwNzk4NzM4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODAwMTI0OA==,aspectj,808001248,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-03-26T07:26:08Z,2021-03-26T07:26:08Z,"When searching the code base for all POMs containing something like

```xml
<scope>system</scope>
<systemPath>${project.basedir}/../<some_path>/<some_artifact>.jar</systemPath>
```

I find the following unique ones:

```none
$ find -name 'pom.xml' | xargs grep -E '<systemPath>' | sed -E 's#.*[.][.]/((.*)[.]jar).*#\1#' | sort | uniq
lib/ant/lib/ant-launcher.jar
lib/ant/lib/ant.jar
lib/ant/lib/xercesImpl.jar
lib/ant/lib/xml-apis.jar
lib/asm/asm-9.1.renamed.jar
lib/commons/commons.jar
lib/ext/jrockit/jrockit.jar
lib/jdiff/jdiff.jar
lib/regexp/jakarta-regexp-1.2.jar
org.eclipse.jdt.core/jdtcore-for-aspectj.jar
```

I.e. we see Maven dependencies on
  * 4 libraries from the Ant distribution (more about Ant in the next comment, stay tuned) which are all available on Maven Central,
  * a version of ASM also available on Maven Central with package names relocated to `aj.org.objectweb`, which we could easily recreate using Maven Shade plugin, because that plugin knows how to relocate both binary and source JARs,
  * a probably home-brew version of some old Apache Commons libraries (Beanutils, Collections, Digester, Logging), zipped into one,
  * home-brew archives of some JRockit 8.1 libraries,
  * an old version of a diffing tool called JDiff we use to compare test console output to what we expect to see,
  * Jakarta Regexp 1.2
  * and of course JDT Core for AspectJ, which currently is deployed by AspectJ itself instead of by the JDT Core ""shadows"" project, as it should be. Then the AspectJ build could just use it as a normal dependency.

So we need to find out more about if and where to find download sources for libraries containing
  * the original versions of the 4 tools contained in the Apache Commons compilation,
  * the JRockit binaries (if JRockit support is still relevant in AspectJ, I have no idea),
  * JDiff.

The origins of the rest are clear. The worst case would be to deploy the missing ones as separate artifacts somewhere, so the Maven build finds them and we can eliminate them from the Git repository.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODAwMTI0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODAyMTY0OA==,aspectj,808021648,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-03-26T08:04:51Z,2021-03-26T08:04:51Z,"The `libs/ant` directory is special insofar as it contains a full Ant installation consisting of binaries, shell scripts, text files and JARs. More precisely, it contains Ant 1.6.3.

In addition to that, the directory contains
  * a home-brew source ZIP for Ant,
  * an AspectJ-specific read-me file,
  * a copy of the JUnit 3.8.1 named `lib/junit/junit.jar` which is absolutely identical to `lib/junit/junit.jar` (if you search for the SHA-1 checksum 99129f16442844f6a4a11ae22fbbee40b14d774f in the curl script above, you will notice that it actually checks for the same binary on Maven Central twice, exactly this one).

Now I have good news and bad news:
  * The good news is that both Ant 1.6.3 binaries and sources are available as downloads.
  * The bad news is that those downloads are on an Apache web server, not on Maven Central.

This is not a big problem because we can use [Maven Download Plugin](https://github.com/maven-download-plugin/maven-download-plugin) and its WGet goal in order to download those files. The plugin even has an option to compare each download to an expected checksum. I do not think the latter is necessary, but it would be easy enough to add as an option.

The download sources are:
  * [Ant 1.6.3 binary distribution](https://archive.apache.org/dist/ant/binaries/apache-ant-1.6.3-bin.zip), as found on the [Ant binaries download page](https://ant.apache.org/bindownload.cgi), then click on ""Old Ant Releases"".
  * [Ant 1.6.3 source code](https://archive.apache.org/dist/ant/source/apache-ant-1.6.3-src.zip), as found on the [Ant sources download page](https://ant.apache.org/srcdownload.cgi), then click on ""Old Ant Releases"".

Now for the anatomy of those two download archives, compared to the content stored in the AspectJ SCM under `lib/ant`. I did a full directory tree compare and found out the following:
  * The contents of the binary distribution are identical to `lib/ant`, with these exceptions:
    * the zip folder `docs` does not exist in `lib/ant` → no problem (we never committed the docs)
    * `lib/ant/aspectj-ant-readme.txt` → no problem (additional AspectJ read-me, see above)
    * `lib/ant/ant-src.zip` → no problem, we got that covered (see below)
    * `lib/ant/lib/junit.jar` → no problem (is `junit:junit:3.8.1`, see above)
    * The only differences I saw while diffing complete directory trees, were CRLF vs LF line break differences, probably because I checked out on Windows. After a `dos2unix` on all the text files (except for Windows batch files *.bat, *.cmd), they were exactly identical to the zip contents.
  * The source distribution contains a superset of information compared to the source zip stored in AspectJ. When comparing just the zip subfolder `apache-ant-1.6.3/src/main` to `lib/ant/ant-src.zip`, the contents are exactly identical.

What this means is that
  * we have a way to completely recreate the 'lib/ant' folder with content downloaded from official sources, (**update:**) without the need to define all 33 sub-libraries contained in the binary distribution separately,
  * plus we replace the 4 Ant libraries used as Maven system dependencies mentioned a while ago by normal Maven dependencies. That the same 4 files also exist in `lib/ant` after unpacking the binary distribution, does not matter. Ant called in batch mode can still use them from there.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODAyMTY0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODgxNzY3Ng==,aspectj,808817676,40,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-03-27T23:35:03Z,2021-03-27T23:35:03Z,How about we get rid of ant,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODgxNzY3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4NjY5Mg==,aspectj,817086692,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-10T06:17:33Z,2021-04-10T06:17:33Z,"> How about we get rid of ant

That is a bigger job, because many tests run Ant builds and we would have to replace `AntSpec` by a new `MavenSpec` and then refactor all test specifications using `<ant />` to use the hypothetical `<maven/ >` instead. But that is not all, because each of those tests refers to an actual Ant _build.xml_ which would also have to be replaced.

Right now I do not feel so inclined to do that on my own. Furthermore, I managed to get rid of the committed `lib/ant` and several other committed third-party dependencies and download them dynamically from Maven Central, GitHub Packages or other websites (Apache, SourceForge) already. See next message.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4NjY5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4ODUzNw==,aspectj,817088537,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-10T06:36:46Z,2021-04-10T06:36:46Z,"I think I have reached a stage in #41 where we could think about merging. I managed to get rid of all system-scoped dependencies and several `lib` subdirectories:
  * `lib/ant`: Downloaded incl. source code and unzipped exactly to the state it was in before, even copying over the redundant JUnit library from `lib/junit`.
  * `lib/asm`: Transformed into a separate Maven module which has the AspectJ parent as its parent, too, but is not a `<module>`. It builds separately, dynamically relocating the **ASM** classes to the AspectJ package name space, and can also deploy the result (including relocated sources) to GitHub Packages. The main AspectJ build just uses it as a normal dependency, using an additional `<repository>` entry for my GitHub Packages repository. If necessary, this can be migrated to an Eclipse-owned repo in the future.
  * `lib/commons`: Was a mix of 4 different vintage Apache Commons libraries, all zipped into one, of which only 2 are actively used in the AspectJ test code. So I replaced this system dependency by fine-granular ones where they are needed, but also recreated the compound JAR and even the sources JAR by the actual versions used in AspectJ. Finding those and all the other matching versions was quite difficult, because I had to search project archives and look into SCMs.
  * `lib/jarjar`: Downloaded and copied over, similar to Ant, just less complicated.
  * `lib/jdtcore-aj`: This new subdirectory replaces the former submodule `org.aspectj:org.eclipse.jdt.core` which I deleted completely in favour of a new Maven build in **JDT Core Shadows**, which also deploys to GitHub Packages, similar to our ASM artifact. The Ant script building JDT Core Shadows and copying it over into the AspectJ project directory is obsolete now (but the script still exists).
  * `lib/junit`: Downloaded and copied over, similar to Ant, just less complicated.
  * `lib/jython`: Completely removed because it was not used anywhere in AspectJ builds or tests.
  * `lib/regexp`: Downloaded and copied over, similar to Ant, just less complicated.
  * `lib/saxon`: Downloaded and copied over, similar to Ant, just less complicated.

One more system-scoped dependency I got rid of was **JRockit**, see https://github.com/eclipse/org.aspectj/pull/41/commits/f3ff0752.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4ODUzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4OTI3NA==,aspectj,817089274,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-10T06:43:55Z,2021-04-10T06:43:55Z,"The new `lib/pom.xml` is a separate Maven module which has the AspectJ parent as its parent, too, but is not a `<module>`. It builds separately. After cloning a fresh copy of AspectJ, this module has to be built once via `cd lib && mvn compile`. It will download and install all missing files expected to be in the `lib` folder. After that, can be built AspectJ normally. In case a developer forgets this step, a Maven Enforcer rule in the main project will check for the existence of several files and fail the build if they are missing, also explaining to the user how to prepare the project. I hope that this is quite fool-proof.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzA4OTI3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzEzODAzNw==,aspectj,817138037,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-10T13:36:49Z,2021-04-10T13:36:49Z,"Update:
  * `lib/docbooks`: Two libraries as well as docbooks-xsl and docbooks-dtd distributions - all needed to generate AspectJ HTML documentation from DocBook sources - are now downloaded dynamically, i.e. the whole folder is completely obsolete in the SCM and was deleted.

I.e. as of now only these folders are still remaining and to be investigated with regard to being needed (at all and where exactly) and how to replace the contained binaries by downloads:
  * `lib/aspectj/lib`
  * `lib/bcel`
  * `lib/build`
  * `lib/test`

@aclement, I would appreciate some background information about the remaining folders. Especially the various AspectJ libraries in `lib/aspectj/lib` and `lib/test` would be interesting. There even exist almost identical `aspectjrt.jar` versions in both folders, one from 1.8.2 and one 1.9.3 or so. Furthermore, an old `aspectjrt121.jar` exists, too. Do we really need them all? Same goes for the other libraries. I would like to know their exact purposes, if we can get rid of some or download them instead etc.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNzEzODAzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/40,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNjQ5NzE1Mg==,aspectj,826497152,40,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-26T04:47:08Z,2021-04-26T04:47:08Z,"The stuff mentioned in my previous comment is still in the SCM due to lack of feedback. So there is still some work left, eliminating stuff which we pssibly do not need in the SCM. Maybe I am going to fork off another issue for it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNjQ5NzE1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/43,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/43,aspectj,867250932,43,Eliminate remaining binaries from Git repository,kriegaex,1537384,Alexander Kriegisch,,OPEN,2021-04-26T04:50:22Z,2022-03-21T03:18:34Z,"This is a follow-up on #40. Status quo, copied from https://github.com/eclipse/org.aspectj/issues/40#issuecomment-817138037:

After #41 was merged, only these folders are still remaining and to be investigated with regard to being needed (at all and where exactly) and how to replace the contained binaries by downloads:
  * `lib/aspectj/lib`
  * `lib/bcel`
  * `lib/build`
  * `lib/test`

@aclement, I would appreciate some background information about the remaining folders. Especially the various AspectJ libraries in `lib/aspectj/lib` and `lib/test` would be interesting. There even exist almost identical `aspectjrt.jar` versions in both folders, one from 1.8.2 and one 1.9.3 or so. Furthermore, an old `aspectjrt121.jar` exists, too. Do we really need them all? Same goes for the other libraries. I would like to know their exact purposes, if we can get rid of some or download them instead etc.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/43,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NjMzMjc1NA==,aspectj,856332754,43,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-07T23:46:07Z,2021-06-07T23:46:07Z,"This is probably redundant now but:

- the bcel jar was there because sometimes when debugging it was useful to run the verifier over created code to verify the correctness. The kind of messages it produced could be more friendly than just a crash. However, I haven't used it in a few years.

- the aspectj121.jar was there to test compatibility. For anyone using the latest AspectJ there are various techniques used to generate code that is backwards compatible with an old AspectJ runtime.  This is probably not as important as it used to be (when we needed to check 1.5/1.6 were usable with a 1.2 runtime).  There are customer environments where they could pickup the new AspectJ but they couldn't upgrade the runtime. That said, 1.2.1 is a long time ago and the runtime hasn't changed a in many years so probably ok to get rid.

- one of the aspectj jars was simply there for testing purposes, maybe I'm thinking lead-time weaving related where the tests were written in xml that was driven by some kind of ant runner, they couldn't access (easily) the classes built by the runtime project so referred to this embedded version of the runtime (it didn't matter really what the version of the runtime was because that is not what they were testing). memory a bit hazy on this.  Similarly the other ones in test, as I recall they were used by tests written in such a significantly complicated way that they couldn't access the output of the individual modules of the real build. If loadtime5 and testing-client can be deleted and tests all still run fine, its all good, maybe the infra overhaul has removed the need.

- build - I think related to the old infrastructure around building projects, pre maven, when it would process .classpath files generated by eclipse. Probably safe to delete as long as not still required by the code that produces the installer.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NjMzMjc1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/43,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NjM5NjQ3Nw==,aspectj,856396477,43,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-08T02:49:33Z,2021-06-08T02:49:33Z,"Thanks for looking into it, this is helpful. The information is not redundant at all, because I did not touch those files, waiting for your feedback.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NjM5NjQ3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,aspectj,870835759,45,Support for java 16 / asm 9.1,frode-carlsen,237255,Frode Carlsen,,CLOSED,2021-04-29T09:58:40Z,2022-03-21T02:58:49Z,"Any chance there'll be a new release soon that supports java 16?  Because asm is bundled inside the aspectjweaver jar, tools that rely on aspectjweaver for instrumentation fails, and there's no easy way to replace. 

(we're in the process of migrating numerous applications and micro-services forward from 11->16 in preparation for the LTS release coming soon, and this is our final hurdle.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyOTUyNzkxMg==,aspectj,829527912,45,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-04-29T19:29:16Z,2021-04-29T19:29:16Z,I believe there are snapshots available for Java16 (@kriegaex can give you the snippet of maven for where). The release based on this is due quite soon (not months).,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyOTUyNzkxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyOTcwNTI3OQ==,aspectj,829705279,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-30T00:00:19Z,2021-04-30T00:00:19Z,"* http://aspectj.2085585.n4.nabble.com/AspectJ-AJDT-AspectJ-Maven-development-versions-for-Java-16-available-td4652803.html
* https://github.com/eclipse/org.aspectj/pull/41#issuecomment-826066012","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgyOTcwNTI3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDA3OTgwNg==,aspectj,830079806,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-04-30T13:03:14Z,2021-04-30T13:03:14Z,😃 Great! Think I'll hold off until the release then,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDA3OTgwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDA4NTk4Ng==,aspectj,830085986,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-04-30T13:13:34Z,2021-04-30T13:13:34Z,"Why is that? Feedback before the release would be much more helpful than afterwards, and then you either have to wait for a bugfix release that might take a while, depending on how busy we are with our daytime jobs, or live with a bug. Please help us help you. If this is about your internal releases being unable to include snapshots, I can prepare a fixed version number, something containing beta, release candidate or whatever.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDA4NTk4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzNDA4ODQyOA==,aspectj,834088428,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-07T05:56:10Z,2021-05-07T05:56:10Z,"a fixed beta would be useful, we can try that out
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzNDA4ODQyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzQ5NDg4NA==,aspectj,847494884,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-25T03:08:21Z,2021-05-25T03:08:21Z,"> a fixed beta would be useful, we can try that out

I just remembered your request. Sorry to reply late, but just in case you are not subscribed to the AspectJ users mailing list: We have a milestone release out on Maven Central:

https://www.eclipse.org/lists/aspectj-users/msg15508.html

@frode-carlsen, I hope this serves your purpose. Please be so kind as to close the issue, I do not have the necessary rights here (yet).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzQ5NDg4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzU4ODc1NQ==,aspectj,847588755,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-25T06:42:42Z,2021-05-25T06:42:42Z,"Great, thanks!

I've tried it out.
Not quite there yet- we're using htis with the Allure Framework (https://docs.qameta.io/allure/#_junit_5) and upgrading from Java15/Aspectjweaver1.9.6 to Java16/Aspectjweaver1.9.7.M2 it fails to run properly.

Not sure if ths is due to a problem with backwards compatibility or a problem in the allure imlementation, but I've opened an issue there https://github.com/allure-framework/allure-java/issues/589","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzU4ODc1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzU5NjM2OA==,aspectj,847596368,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-25T06:53:46Z,2021-05-25T06:53:46Z,"Actually, AspectJ 1.9.6 does not support Java 15, only 14. Only 1.9.7 supports both 15 and 16. Actually, your Allure issue suffers from lack of reproducibility. If you can create an [MCVE](https://stackoverflow.com/help/mcve), I will take a look. Maybe there is a dependency management glitch, maybe you hit a real error. But the AspectJ part looks good, because your ASM error is gone, i.e. the ASM 9.1 contained in AspectJ actually recognises Java 16 class file major 16.

I never used Allure before, so I do not know which dependencies it might have itself.

**Edit:** What happens if you use AspectJ 1.9.7.M2, but stick with Java 15 for the moment? Changing two things at once makes it difficult to reason about possible root causes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzU5NjM2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzkwNDk5MA==,aspectj,847904990,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-25T14:12:15Z,2021-05-25T14:12:15Z,"Ok, here are my results
* 1.9.6 + Java 15 + Allure 2.14.0 ->OK
* 1.9.7.M2 + Java 15 + Allure 2.14.0 -> OK
* 1.9.7.M2 + Java 16 + Allure 2.14.0 -> fails to discover tests. 
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NzkwNDk5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzk5NTc0NQ==,aspectj,847995745,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-25T16:00:42Z,2021-05-25T16:00:42Z,"Are you seeing any exceptions anywhere? BTW, I almost forgot, there is an aspect weaving issue when running on JDK 16, see the commit comment at https://github.com/eclipse/org.aspectj/commit/79e44360cd95b14fa255daaac069f9b76c488451. We activated JVM command line parameter `--add-opens java.base/java.lang=ALL-UNNAMED` when running on Java 16. This happens automatically in our build, so I forgot about it already. AspectJ needs access to a now protected internal Java API. Andy did not have time to investigate if there is a workaround which does not require it, but for now you should use it. Maybe it causes an exception which is somehow swallowed by JUnit or Allure.

Give it a spin, would you please? Then report back. It is just a guess, but maybe it helps.

P.S.: I am still waiting for that [MCVE](https://stackoverflow.com/help/mcve). It would be very helpful. Just something minimal, reproducing the problem. A single test is enough, just a Maven project with JUnit 5, Allure and Java 15 vs. 16, succeeding and failing in the same way.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0Nzk5NTc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODIxNTMyMQ==,aspectj,848215321,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-25T19:51:31Z,2021-05-25T19:51:31Z,"The above JVM command line parameter  doesn't make any difference.

It seems to happen when a module compiled for java 16 imports records compiled under java 15 and it tries to add an aspect around a method invocation (see MyTest).

I've managed to create a smaller MVCE. but it's a bit tricky to run.
To reproduce, the ""dto"" module in the following must be compiled with jdk 15, and the mvce module compiled and run with java 16. The MyTest will then fail to run with a` ""TestEngine with ID 'junit-jupiter' failed to discover tests""` message

If changing everything to java 16 (see java.version in dto module) it will work.
If changing java.version in root to 15, and aspectjweaver to 1.9.6 it will should work.  

A workaround is then to avoid mixing java 15 dependencies into java 16 projects

[aspectjweaver-issue45.zip](https://github.com/eclipse/org.aspectj/files/6541926/aspectjweaver-issue45.zip)

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODIxNTMyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODM3NTA4Nw==,aspectj,848375087,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-26T00:45:14Z,2021-05-26T00:45:14Z,"I did not try your MCVE, because from your description I can tell you that probably you do not have an AspectJ problem at all, it is simply how **JDK preview features** work. You cannot run code compiled on a JDK using preview features on a JDK version other than the one used for compilation. Records were in preview on JDK 15, then final on 16. Here is some proof, simply using _javac_, no _ajc_ involved at all, no JUnit or Allure:

```text
$ cat MyRecord.java
public record MyRecord(int id, String name) {}

$ cat App.java
public class App {
  public static void main(String[] args) {
    new MyRecord(11, ""John Doe"");
  }
}

$ . ~/set-jdk.sh 15
New JDK directory: jdk-15.0.2
Saving old variable values to __PATH and __JAVA_HOME

$ javac --enable-preview --source 15 MyRecord.java App.java
Note: MyRecord.java uses preview language features.
Note: Recompile with -Xlint:preview for details.

$ java --enable-preview App

$ . ~/set-jdk.sh 16
New JDK directory: jdk-16
Saving old variable values to __PATH and __JAVA_HOME

$ java --enable-preview App
Error: LinkageError occurred while loading main class App
        java.lang.UnsupportedClassVersionError: App (class file version 59.65535) was compiled with preview features that are unsupported. This version of the Java Runtime only recognizes preview features for class file version 60.65535

$ java App
Error: LinkageError occurred while loading main class App
        java.lang.UnsupportedClassVersionError: App (class file version 59.65535) was compiled with preview features that are unsupported. This version of the Java Runtime only recognizes preview features for class file version 60.65535

$ javac MyRecord.java App.java

$ java App
```

So if you please recompile your code using Java <16 preview features on JDK 16, it should work.

In the AspectJ test suite, we also had to implement new logic for tests using preview features to only be run if the JDK exactly matches. Before, we would simply run all tests requiring new JDK features on any JVM >= the minimum version required. Then came `--enable-preview`, and we had to take special precautions for those types of tests. Some JDK features are in preview for more than one JDK major version, and you cannot even run the same JDK(n) preview feature on JDK(n+1) if it is in the next preview iteration there. So this is something a Java developer needs to remember, when experimenting with preview features, with or without AspectJ.

That you see no stack trace in your LTW situation (i.e. byte code is being created during runtime, not in a static compilation situation), could be a problem with the project setup or a catch block not logging the exception, of maybe there is none. I never tested that before. Actually, I am wondering why the JVM even starts without errors, loading your Java 15 preview class. Maybe it is loaded later, when spawning the test JVM.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODM3NTA4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODM4MzE0MQ==,aspectj,848383141,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-26T01:11:17Z,2021-05-26T01:11:17Z,"OK, I tried your MCVE. After having built `dto` on JDK 15, switch to JDK 16 and simply run Maven with `-e` in order to display stack traces:

```text
$ mvn -e -pl mvce clean install

...
[ERROR] TestEngine with ID 'junit-jupiter' failed to discover tests
[ERROR] org.junit.platform.commons.JUnitException: TestEngine with ID 'junit-jupiter' failed to discover tests
[ERROR] 	at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discoverEngineRoot(EngineDiscoveryOrchestrator.java:111)
...
[ERROR] Caused by: org.junit.platform.commons.JUnitException: ClassSelector [className = 'aspectjweaver.issue45.MyTest'] resolution failed
[ERROR] 	at org.junit.platform.launcher.listeners.discovery.AbortOnFailureLauncherDiscoveryListener.selectorProcessed(AbortOnFailureLauncherDiscoveryListener.java:39)
...
[ERROR] Caused by: java.lang.UnsupportedClassVersionError: aspectjweaver/issue45/MyRecord (class file version 59.65535) was compiled with preview features that are unsupported. This version of the Java Runtime only recognizes preview features for class file version 60.65535
[ERROR] 	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
...
```

There you have it. Just like in my _javac_ example before. Quod erat demonstrandum. 😉

---

P.S.: When trying to build module `dto` on JDK 16, trying to use JDK 15 target + preview features, Maven actually tells you that this is a ""no-no"":

```text
$ mvn -pl dto clean install

...
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR :
[INFO] -------------------------------------------------------------
[ERROR] invalid source release 15 with --enable-preview
  (preview language features are only supported for release 16)
...
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODM4MzE0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0MzI4NQ==,aspectj,848443285,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-26T04:25:29Z,2021-05-26T04:25:29Z,"Great, thanks for all help.  Learnt something new

The Java 15 with preview came from a library, so did not trigger the compilation error, but the JRE perhaps could have done at runtime?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0MzI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0Mzc5Mw==,aspectj,848443793,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-26T04:27:09Z,2021-05-26T04:27:09Z,"> the JRE perhaps could have done at runtime?

It does, see my previous comment. Just Maven did not display the full stack trace by default.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0Mzc5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0NDIyNg==,aspectj,848444226,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-26T04:28:34Z,2021-05-26T04:28:34Z,👍 Should've known. It was staring us in the face the whole time.  The build hadn't enabled the -e switch,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0NDIyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0NTU1Nw==,aspectj,848445557,45,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-26T04:32:50Z,2021-05-26T04:32:50Z,"Don't worry, I am happy to help. An [MCVE](https://stackoverflow.com/help/mcve) is always useful, BTW. I stopped counting how many dozen times I said that to people on StackOverflow already. So thanks for providing one. That made it super easy to confirm the root cause. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ0NTU1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/45,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ4NzI3NA==,aspectj,848487274,45,NA,frode-carlsen,237255,Frode Carlsen,,NA,2021-05-26T06:05:12Z,2021-05-26T06:05:12Z,"🙂 Thanks again for your help and time.  Now everything works like a charm with the latest beta.


","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODQ4NzI3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/47,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/47,aspectj,877910884,47,pointcut on the If() statements,abolfazl-sh,11244186,abolfazl,,CLOSED,2021-05-06T19:24:16Z,2022-03-21T02:58:18Z,"Hi.
does it possible pointcut on If() statements?
for example we have below code : 

```
package paj;
public class a {
	private static final String FILE_PATH = "".\\Code Data\\calday.java"";
	
	public static void main(String[] args) {
			int z = 2;
                        int j = 20;
			if(z == 22) {
                          //do something
                        }

                        if(j  == 20){
                          //do another thing
                       }
     }
}
```


as we can see always second( if(j==20)) run.
does it possible to write an aspect which every time any condition was true do something(in this example the second condition(if(j==20)) is true so print the line of code.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/47,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMzkxODgzMA==,aspectj,833918830,47,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-05-06T22:36:28Z,2021-05-06T22:36:28Z,"That kind of setup is unfortunately not a join point upon which you can match with a point cut. If it were more like:

```
public static void main(String []argv) {
if (j.equals(20)) {
...
}
}
```
then that is a call to the method equals which can be identified (something like `call(* equals(..)) && withincode(* main(..))`). Or if it was:
```
if (isEqual(j,20)) {
```
A similar call point cut could catch it, but the pure `==` is hard to identify and match based on how it manifests in the bytecode. We don't have a way to describe how these expressions manifest in the source.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMzkxODgzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/54,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/54,aspectj,893097116,54,Unable to load class 'org.aspectj.bridge.MessageHandler' when creating a gradle plugin,Yuganka,11292338,Yuganka Sharan,yugankasharan@gmail.com,CLOSED,2021-05-17T08:44:42Z,2022-03-21T02:57:45Z,"I'm using `aspectjtools` and `aspectjrt` to create an AOP library for android - [Bernoulli.](https://github.com/Yuganka/Bernoulli) The library is working as expected. 

I then decided to create my own plugin to hide the following from my end user - 

```groovy
final def variants = project.android.applicationVariants
        
 variants.all { variant ->
        
       variant.javaCompile.doLast {
        
            String[] args = [""-showWeaveInfo"",
                             ""-1.5"",
                             ""-inpath"", javaCompile.destinationDir.toString(),
                             ""-aspectpath"", javaCompile.classpath.asPath,
                             ""-d"", javaCompile.destinationDir.toString(),
                             ""-classpath"", javaCompile.classpath.asPath,
                             ""-bootclasspath"", project.android.bootClasspath.join(File.pathSeparator)]
        
            new Main().run(args, new MessageHandler(true));
       }
}
```

The `build.gradle` of the plugin - 

```groovy
plugins {
    id 'signing'
    id 'maven-publish'
    id 'kotlin'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {

    implementation gradleApi()
    implementation localGroovy()

    implementation 'com.android.tools.build:gradle:4.1.3'

    api 'org.aspectj:aspectjrt:1.9.6'
    api 'org.aspectj:aspectjtools:1.9.6'
}

task sourceJar(type: Jar) {

    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {

        ""$project.name""(MavenPublication) {
           artifact ""$buildDir/libs/$project.name-"" + ARTIFACT_VERSION_NAME + "".jar""
        }
    }
}
```
The code compiles, the jar is created and I am able to publish it to `mavenLocal`.

Then, when I use it in my new project, it can detect the plugin and throws no build error. Here is the `build.gradle` of the project - 

```groovy
plugins {
    id 'com.android.application'
}

// being fetched from mavenLocal
apply plugin: 'com.yugankasharan.bernoulli'

android {
    compileSdkVersion 30
    buildToolsVersion ""30.0.2""

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

   // some android dependencies
   
    // my Bernoulli library, being fetched from mavenCentral
    implementation 'com.yugankasharan.bernoulli:bernoulli:0.2.1'
}
```


But when I run it, I get this error - 

```groovy
Unable to load class 'org.aspectj.bridge.MessageHandler'. 

This is an unexpected error.
```
My logging has told me that this is happening in the `javaCompile.doLast` section of my plugin code, and I am unable to understand why this should happen. 

1. I thought this could be linked with the Java version, but i'm explicitly using version 8 in all my projects and modules.
2. I then thought this could be a Gradle issue but i'm using the latest (and same versions) in both my library and new project. 

Since my library is properly working, but my plugin isn't, I'm pretty sure I've messed up my plugin setup somewhere. But I can't figure out where.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/57,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/57,aspectj,899154796,57,Publish AspectJ such that it is installable via sdkman,aclement,226298,Andy Clement,aclement@vmware.com,OPEN,2021-05-24T00:51:37Z,2022-03-21T03:15:49Z,,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/60,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/60,aspectj,901713630,60,Binary weaving option to avoid writing unwoven classes to target directory,kriegaex,1537384,Alexander Kriegisch,,OPEN,2021-05-26T03:52:50Z,2022-03-21T03:15:35Z,"As a developer using post-compile weaving (a.k.a. binary weaving), I want to optionally only write aspect-woven classes to the output directory, not unmodified ones.

Use cases:
  * Modifying a (small) subset of third-party library classes, I simply want to see in the output directory, which classes were actually affected (hence changed) by aspect weaving, e.g. if I use ITD on classes implementing interfaces, `call()` pointcuts or whatever. This is hard to identify without activating verbose weaver logging and then sifting through the build log. This option would also give me the option to build a slim JAR and prepend it to the original on the classpath or put it on the boot classpath in order to shadow the original classes. In the case of debugging aspects, I could always have the original JAR on the classpath and use the woven delta on demand in situations where it is easier to change the class path than to activate LTW.
  * A similar scenario is to weave a subset of JDK classes, also prepending the delta to the boot classpath (JDK 8-) or using `--patch-module` (JDK 9+), replacing JDK classes in a minimally invasive way instead of having to build a full tools.jar (JDK 8-) or equivalent on JDK 9+.

I have met this question/problem more than once on StackOverflow and I think also on the AspectJ users mailing list. Speaking for myself, I also would like to have this.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/61,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/61,aspectj,903470043,61,Test on Eclipse OpenJ9 JVM,bmarwell,1413391,Benjamin Marwell,bmarwell@apache.org,OPEN,2021-05-27T09:34:41Z,2022-03-21T03:14:50Z,"Hi,

the current build matrix does not include [your own JVM implementation ""OpenJ9""](https://www.eclipse.org/openj9/): https://github.com/eclipse/org.aspectj/blob/520ed7b623263927b30fe1898b36f411490ba34d/.github/workflows/maven.yml#L18-L19

Eclipse OpenJ9 is a great VM and differs in some details, while still being certified. I suggest to add at least the OpenJ9 VM to the build matrix like so:

https://github.com/bmarwell/aspectj-maven-plugin/commit/e7e8300647bb61d410eabdf133ca62755762d4db#diff-5dbf1a803ecc13ff945a08ed3eb09149a83615e83f15320550af8e3a91976446R41-R89

You can leave out Zulu, one Hotspot JVM is probably enough. Both Hotspot variants do not differ as much as Hotspot and OpenJ9 do.
You will need `actions/setup-java@v2.1.0` or greater.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/63,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/63,aspectj,906704328,63,AspectJ annotations are not working in JAVA maven project (Not spring project),chandru-kumar,26222838,Chandru Kumar R,chandru.dec26@gmail.com,CLOSED,2021-05-30T10:07:03Z,2022-03-21T02:57:00Z,"I'm trying to implement AspectJ annotations in JAVA maven project without spring. I have added Aspects and create annotation. But its not invoking the Aspects where i have added as Annotation to the method..Below is my code..

I have added aspectj maven plugin as well..But its not getting invoked..Can you pls help..? Not sure what I'm missing.
I haven't found any example without Spring project..

Pom.xml
```<project xmlns=""http://maven.apache.org/POM/4.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>
	<groupId>aop.example</groupId>
	<artifactId>aopexmaple</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<java.version>1.8</java.version>
	</properties>
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.7.M3</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjtools</artifactId>
		    <version>1.9.7.M3</version>
		</dependency>
		
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjrt</artifactId>
		    <version>1.9.7.M3</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.18.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.14.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.14.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.20</version>
			<scope>provided</scope>
		</dependency>




	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.8</version>
				<configuration>
					<complianceLevel>1.8</complianceLevel>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			
			<!-- <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <complianceLevel>1.8</complianceLevel>
                            <source>1.8</source>
                            <target>1.8</target>
                        </configuration>
                    </execution>
                </executions>
			</plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<archive>
								<manifest>
									<mainClass>
										io.test.example.Test
									</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>```

JAVA - Aspects - Advice

```import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;


@Aspect
public class ExportTrace {
	
	@Around(""@annotation(io.aop.example.Sysout)"")
	public Object exportTrace(ProceedingJoinPoint proceedingJoinPint) throws Throwable {
		System.out.println(""AOP Around..."");
		Object object = proceedingJoinPint.proceed();
		System.out.println(""AOP Around...Done"");
		return object;
		
	}
}
```

JAVA - Annotation

```import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

@Retention(RUNTIME)
@Target(METHOD)
public @interface Sysout{

}```



","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/63,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MDk3NTM2Ng==,aspectj,850975366,63,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-05-30T10:16:28Z,2021-05-30T10:16:28Z,"Please ask questions about how to use AspectJ on StackOverflow, adding an `aspectj` tag. I or someone else will find them there. GitHub issues are not for user support but for AspectJ bugs or feature requests. Please delete or close this question. Thank you.

P.S.: Your code formatting is incorrect. For multi-line code blocks, you use 3x backtick, see [formatting help, section ""examples"", click on ""Code""](https://guides.github.com/features/mastering-markdown/#examples). You are also going to find information about syntax highlighting options there.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MDk3NTM2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,aspectj,915574902,68, JaCoCo 0.8.4 and Java 11 Agent Conflict,vladimir-mhl,3671468,Volodymyr Mykhailov,vladimir.mhl@gmail.com,CLOSED,2021-06-08T22:04:14Z,2022-08-18T13:37:44Z,"This is copy of https://bugs.eclipse.org/bugs/show_bug.cgi?id=549438

```
Matthew Pearsall CLA Friend 2019-07-20 07:55:16 EDT

See https://github.com/jacoco/jacoco/issues/909

After updating to JDK 11 the Maven Surefire plugin fails to run when both Jacoco agent and AspectJ weaver agent present.

Steps to reproduce

JaCoCo version: 0.8.4
Operating system: Windows 10
JDK: open-jdk-11.0.1
Tool integration: Maven
aspectjweaver: 1.9.4

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-surefire-plugin.version}</version>
    <configuration>
        <argLine>
            @{argLine} -javaagent:${user.home}/.m2/repository/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar
        </argLine>
        <trimStackTrace>false</trimStackTrace>
    </configuration>
</plugin>
<plugin>
    <groupId>org.jacoco</groupId>
    <artifactId>jacoco-maven-plugin</artifactId>
    <version>0.8.4</version>
    <configuration>
        <skip>false</skip>
        <includes>
            ...
        </includes>
        <excludes>
            ...
        </excludes>
    </configuration>
    <executions>
        <execution>
            <goals>
                <goal>prepare-agent</goal>
            </goals>
        </execution>
        <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
                <goal>report</goal>
            </goals>
        </execution>
    </executions>
</plugin>
Expected behaviour

Tests to run as they did in JDK 8.

Actual behaviour

[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
AspectJ Internal Error: unable to add stackmap attributes. null
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 30.903 s
[INFO] Finished at: 2019-07-19T15:04:42+01:00
[INFO] Final Memory: 79M/280M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project ***: There are test failures.
[ERROR] 
[ERROR] Please refer to C:\Users\#\IdeaProjects\#\services\target\surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
[ERROR] There was an error in the forked process
[ERROR] Method ""$jacocoData"" in class #/function/bank/BankFeedRuleFunctionTest has illegal signature ""Ljava/lang/Object;""
[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: There was an error in the forked process
[ERROR] Method ""$jacocoData"" in class #/function/bank/BankFeedRuleFunctionTest has illegal signature ""Ljava/lang/Object;""
[ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:656)
[ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:282)
[ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:245)
[ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1183)
[ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1011)
[ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:857)
[ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
[ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
[ERROR] at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
[ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
[ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
[ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
[ERROR] at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
[ERROR] at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
[ERROR] at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
[ERROR] at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
[ERROR] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[ERROR] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR] at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
[ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[ERROR] at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
```

```
Pierre-Yves Bigourdan CLA Friend 2020-08-06 08:33:13 EDT
Can confirm, facing the same problem with Java 11, JaCoCo 0.8.5 and AspectJ 1.9.5.
```

```
BRANISLAV KALAS CLA Friend 2021-02-03 02:46:57 EST

Confirming same problem , jacoco > 0.8.3 , JDK11, aspectJ >=1.9.5 we are getting error java.lang.ClassFormatError: Method ""$jacocoData"" in class xxx has illegal signature ""Ljava/lang/Object;""
```

from myself it is reproducible on
- openjdk 11
- jacoco 0.8.4 (and later)
- aspectj 1.9.6 (also tried 1.9.7 milestones)

this issue is pretty well described (with sample project) in https://github.com/jacoco/jacoco/issues/909
see comment https://github.com/jacoco/jacoco/issues/909#issuecomment-513409050

**current workaround: downgrade jacoco to 0.8.3**
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzI3MDMwNg==,aspectj,857270306,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-08T23:59:05Z,2021-06-08T23:59:05Z,"I read that before commenting in Bugzilla. There is only the same incomplete POM as here, I see no sample project. I told you in my comment, which information I need. Please read again and edit the question. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzI3MDMwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzI5OTI0OA==,aspectj,857299248,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-09T01:21:14Z,2021-06-09T01:21:14Z,"I quickly added an application class + JUnit 4 test to my sample project based on your POM snippet. The build runs fine and creates a correct coverage report with JaCoco 0.8.4 on JDK 8, 11, 16. Same with JaCoCo 0.8.7. So if you want me to reproduce your problem, I need a full example project with classes, AspectJ and JaCoCo configuration.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzI5OTI0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzMxMTYyMQ==,aspectj,857311621,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-09T01:58:36Z,2021-06-09T01:58:36Z,"OK, I did your job for you and created a sample project:
https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438

Running `mvn clean test jacoco:report` on branch `master` reproduces the problem. Did you notice this message in the log (added extra line breaks)?

```text
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[WARNING] Corrupted STDOUT by directly writing to native stream in forked JVM 1.
  See FAQ web page and the dump file
  ...\target\surefire-reports\2021-06-09T08-36-25_795-jvmRun1.dumpstream
```

The dump file thing is unrelated to this issue, because Surefire has problems with correctly displaying console output created by the JVM itself or by Java agents in general. Anyway, if you open the `*jvmRun1.dumpstream` file, you will see lots of joinpoints matched by your aspect, if you use a simple pointcut like `execution(* *(..)) && !within(MyAspect)`. Due to LTW, AspectJ weaves into
  * Surefire,
  * JUnit,
  * JaCoCo (uh-oh),
  * JDK proxies created by JaCoCo.

This in the end is what makes the build fail. Therefore, the root cause of your problem are simply pointcuts which are too broad, there is no problem in JaCoCo or AspectJ as such. The problem sits in front of the keyboard. 😉

There are at least three ways to solve this:

1. Narrow the scope of your pointcut: Add something like `&& within(de.scrum_master..*)` to your pointcut, see [here](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438/blob/c95f26426ca262dd0c7f42c28e91260ec8122670/src/main/java/de/scrum_master/app/MyAspect.java#L9-L15) in the example project.

2. Narrow the scope of aspect weaving by adding something like `<include within=""de.scrum_master..*""/>` to the `<weaver>` section of `aop.xml`, see [here](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438/blob/c95f26426ca262dd0c7f42c28e91260ec8122670/src/main/resources/META-INF/aop.xml#L9-L10) in the example project.

3. If you are in the unfortunate situation that you provide an aspect library used in a big variety of cases and it is impossible to predict target application package names, you can go the other way and explicitly **exclude** packages known to cause problems from your pointcut or in the LTW configuration, see [here](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438/blob/c95f26426ca262dd0c7f42c28e91260ec8122670/src/main/resources/META-INF/aop.xml#L12-L18) in the example project.

BTW, in this specific case, excluding `org.apache.maven.surefire..*` already kept the build from failing, but the aspect kept printing executions of the other unwanted packages to the console, so you really should exclude all of them - or simply only include what you need, which is always a good idea in AspectJ.

@aclement, I think this one can be closed and categorised as ""won't fix"", ""question"" and/or whatever tags you deem appropriate.

---

**Update:** Like I said, _at least_ three ways to solve it. One more way would be:

4. Use an abstract pointcut, e.g. named `targetScope()`, for the application target package(s) in your aspect and tell your aspect library users to specify it in `aop.xml`, customising it to their needs. That way you avoid having to exclude all possible known tool packages which could cause problems during testing or running the application. I mean something like this, as described in the [AspectJ manual](https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html):
    ```xml
    <!-- define a concrete aspect inline -->
    <concrete-aspect name=""org.acme.MyAspect"" extends=""de.scrum_master.app.MyAbstractAspect"">
      <pointcut name=""targetScope"" expression=""within(org.acme..*)""/>
    </concrete-aspect>
    ```
    The full pointcut would be a combination of the XML-defined one and the original pointcut, something like this in your abstract aspect: `execution(* *(..)) && !within(MyAspect) && targetScope()`","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NzMxMTYyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477DUe,aspectj,1005335838,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-05T02:48:04Z,2022-01-05T02:48:04Z,"@aclement, please reopen this bug. I have reason to believe my assessment was premature and the problem still persists.

While limiting the aspect scope is necessary and should be kept in order to avoid weaving JaCoCo, JUnit and Surefire classes, like I suggested, the problems caused by that were merely covering up another problem. That problem is related to [JEP 309 (Dynamic Class-File Constants)](https://openjdk.java.net/jeps/309) being used by JaCoCo and the AspectJ Weaver seemingly to be unable to deal with the generated bytecode, causing `Method ""$jacocoData"" in class ... has illegal signature ...` errors.

See [my comment here](https://github.com/jacoco/jacoco/issues/909#issuecomment-1005329968) and the [reproducer project here](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438). Andy, could you please look into that and implement a fix? If this is really an AspectJ problem, we probably have it since Java 11 (AspectJ 1.9.2). I am not sure which of JaCoCo or AspectJ is doing something wrong there, but chances are that it might be AspectJ, so please take a look.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477DUe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477F-O,aspectj,1005346702,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-05T03:15:12Z,2022-01-05T03:15:12Z,"**Update:** When running Maven with debug logging, I see (with added line breaks and comments):

```none
[DEBUG] Forking command line: cmd.exe /X /C ""
  ""C:\Program Files\Java\jdk-17\bin\java""

    # JaCoCo agent
    -javaagent:C:\\Users\\alexa\\.m2\\repository\\org\\jacoco\\org.jacoco.agent\\0.8.7\\org.jacoco.agent-0.8.7-runtime.jar=destfile=C:\\Users\\alexa\\Documents\\java-src\\AJ_LTWJacocoWeavingProblem_549438\\target\\jacoco.exec

    # AspectJ weaver needs access to java.base/java.lang on JDK 16+
    --add-opens java.base/java.lang=ALL-UNNAMED

    # AspectJ weaving agent
    -javaagent:C:\Users\alexa/.m2/repository/org/aspectj/aspectjweaver/1.9.8.RC3/aspectjweaver-1.9.8.RC3.jar

    # Maven Surefire executable booter
    -jar C:\Users\alexa\AppData\Local\Temp\surefire15834133402369997443\surefirebooter962938972777004100.jar

      # Maven Surefire parameters
      C:\Users\alexa\AppData\Local\Temp\surefire15834133402369997443
      2022-01-05T09-56-23_778-jvmRun1
      surefire11151023191849343689tmp
      surefire_08147447903974074624tmp
""
```

I.e., the JaCoCo agent is applied first and then the AspectJ weaver needs to deal with JaCoCo-instrumented byte code, whereas it should be the other way around: JaCoCo should create a coverage report for AspectJ-enhanced classes. So I added [commit 487552b8](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438/commit/487552b87c449f27d1acbce7c30bcf39c811399a), simply reversing the order of agents on the Surefire command line. This fixes the problem. But it would still be interesting to know why AspectJ cannot deal with JaCoCo-generated byte code. @aclement, you can still reproduce the problem by checking out branch `reproduce-original-problem`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477F-O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477Tma,aspectj,1005402522,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-05T05:52:59Z,2022-01-05T05:52:59Z,"> please reopen this bug
It's still open isn't it? 

> to know why AspectJ cannot deal with JaCoCo-generated byte code
AspectJ, in places, recognizes (relies upon even...) patterns of how compilers (javac/jdt) produce bytecode for given constructs - if 'something else' modifies bytecode even if in a perfectly valid way it can trip up a part of AspectJ that has never seen that arrangement of code before. It is indeed an AspectJ bug when this happens.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477Tma/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477VS9,aspectj,1005409469,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-05T06:10:09Z,2022-01-05T06:10:09Z,"> > please reopen this bug
>
> It's still open isn't it?

![Screenshot_20220105-130714_Chrome](https://user-images.githubusercontent.com/1537384/148168753-23607a68-aee9-4db6-a588-d0550eb3f8ae.jpg)

Yes, of course. I misinterpreted the above as being related to this issue instead of merely mentioning the other one. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns477VS9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns478AUW,aspectj,1005585686,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-05T10:59:53Z,2022-01-05T10:59:53Z,"@aclement, I created a branch [`dump-class-files`](https://github.com/kriegaex/AJ_LTWJacocoWeavingProblem_549438/tree/dump-class-files) which configures Maven and `aop.xml` to dump class files during the weaving process. I also reversed the agent order again in order to apply JaCoCo transformations first, making the AspectJ weaver fail.

Therefore, when running `mvn clean test` on that Git branch, you should find a file `_ajdump/_before/de/scrum_master/app/ShapeTest.class` containing the JaCoCo-enhanced byte code which LTW trips over. It looks like this:

```text
$ javap -c -v _ajdump/de/scrum_master/app/ShapeTest.class

Classfile /C:/Users/alexa/Documents/java-src/AJ_LTWJacocoWeavingProblem_549438/_ajdump/de/scrum_master/app/ShapeTest.class
  Last modified 05.01.2022; size 2839 bytes
  SHA-256 checksum 09b92b6d066d035f1be413af7aa69f86b523c51275aae4ec70226f233b7c5b48
  Compiled from ""ShapeTest.java""
public class de.scrum_master.app.ShapeTest
  minor version: 0
  major version: 61
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #37                         // de/scrum_master/app/ShapeTest
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 2, methods: 5, attributes: 4
Constant pool:
    #1 = Methodref          #2.#3         // java/lang/Object.""<init>"":()V
    #2 = Class              #4            // java/lang/Object
    #3 = NameAndType        #5:#6         // ""<init>"":()V
    #4 = Utf8               java/lang/Object
    #5 = Utf8               <init>
    #6 = Utf8               ()V
    #7 = Class              #8            // java/lang/Math
    #8 = Utf8               java/lang/Math
    #9 = Double             78.53981633974483d
   #11 = Class              #12           // de/scrum_master/app/Circle
   #12 = Utf8               de/scrum_master/app/Circle
   #13 = Double             5.0d
   #15 = Methodref          #11.#16       // de/scrum_master/app/Circle.""<init>"":(D)V
   #16 = NameAndType        #5:#17        // ""<init>"":(D)V
   #17 = Utf8               (D)V
   #18 = Methodref          #11.#19       // de/scrum_master/app/Circle.getArea:()D
   #19 = NameAndType        #20:#21       // getArea:()D
   #20 = Utf8               getArea
   #21 = Utf8               ()D
   #22 = Double             1.0E-6d
   #24 = Methodref          #25.#26       // org/junit/Assert.assertEquals:(DDD)V
   #25 = Class              #27           // org/junit/Assert
   #26 = NameAndType        #28:#29       // assertEquals:(DDD)V
   #27 = Utf8               org/junit/Assert
   #28 = Utf8               assertEquals
   #29 = Utf8               (DDD)V
   #30 = Double             43.982297150257104d
   #32 = Double             7.0d
   #34 = Methodref          #11.#35       // de/scrum_master/app/Circle.getCircumference:()D
   #35 = NameAndType        #36:#21       // getCircumference:()D
   #36 = Utf8               getCircumference
   #37 = Class              #38           // de/scrum_master/app/ShapeTest
   #38 = Utf8               de/scrum_master/app/ShapeTest
   #39 = Utf8               Code
   #40 = Utf8               LineNumberTable
   #41 = Utf8               LocalVariableTable
   #42 = Utf8               this
   #43 = Utf8               Lde/scrum_master/app/ShapeTest;
   #44 = Utf8               testCircle
   #45 = Utf8               RuntimeVisibleAnnotations
   #46 = Utf8               Lorg/junit/Test;
   #47 = Utf8               SourceFile
   #48 = Utf8               ShapeTest.java
   #49 = Utf8               $jacocoInit
   #50 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;)[Z
   #51 = NameAndType        #49:#50       // $jacocoInit:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;)[Z
   #52 = Methodref          #37.#51       // de/scrum_master/app/ShapeTest.$jacocoInit:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;)[Z
   #53 = MethodHandle       6:#52         // REF_invokeStatic de/scrum_master/app/ShapeTest.$jacocoInit:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;)[Z
   #54 = Utf8               $jacocoData
   #55 = Utf8               Ljava/lang/Object;
   #56 = NameAndType        #54:#55       // $jacocoData:Ljava/lang/Object;
   #57 = InvokeDynamic      #0:#56        // #0:$jacocoData:Ljava/lang/Object;
   #58 = Utf8               [Z
   #59 = Class              #58           // ""[Z""
   #60 = Utf8               java/lang/$JaCoCo
   #61 = Class              #60           // java/lang/$JaCoCo
   #62 = Utf8               data
   #63 = NameAndType        #62:#55       // data:Ljava/lang/Object;
   #64 = Fieldref           #61.#63       // java/lang/$JaCoCo.data:Ljava/lang/Object;
   #65 = Long               6977707943242498764l
   #67 = Utf8               java/lang/Long
   #68 = Class              #67           // java/lang/Long
   #69 = Utf8               valueOf
   #70 = Utf8               (J)Ljava/lang/Long;
   #71 = NameAndType        #69:#70       // valueOf:(J)Ljava/lang/Long;
   #72 = Methodref          #68.#71       // java/lang/Long.valueOf:(J)Ljava/lang/Long;
   #73 = String             #38           // de/scrum_master/app/ShapeTest
   #74 = Utf8               java/lang/Integer
   #75 = Class              #74           // java/lang/Integer
   #76 = Utf8               (I)Ljava/lang/Integer;
   #77 = NameAndType        #69:#76       // valueOf:(I)Ljava/lang/Integer;
   #78 = Methodref          #75.#77       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
   #79 = Utf8               equals
   #80 = Utf8               (Ljava/lang/Object;)Z
   #81 = NameAndType        #79:#80       // equals:(Ljava/lang/Object;)Z
   #82 = Methodref          #2.#81        // java/lang/Object.equals:(Ljava/lang/Object;)Z
   #83 = Utf8               BootstrapMethods
   #84 = Utf8               Synthetic
   #85 = Utf8               ajc$tjp_0
   #86 = Utf8               Lorg/aspectj/lang/JoinPoint$StaticPart;
   #87 = NameAndType        #85:#86       // ajc$tjp_0:Lorg/aspectj/lang/JoinPoint$StaticPart;
   #88 = Fieldref           #37.#87       // de/scrum_master/app/ShapeTest.ajc$tjp_0:Lorg/aspectj/lang/JoinPoint$StaticPart;
   #89 = Utf8               makeJP
   #90 = Utf8               (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
   #91 = NameAndType        #89:#90       // makeJP:(Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
   #92 = Utf8               org/aspectj/runtime/reflect/Factory
   #93 = Class              #92           // org/aspectj/runtime/reflect/Factory
   #94 = Methodref          #93.#91       // org/aspectj/runtime/reflect/Factory.makeJP:(Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
   #95 = Utf8               aspectOf
   #96 = Utf8               ()Lde/scrum_master/app/MyAspect;
   #97 = NameAndType        #95:#96       // aspectOf:()Lde/scrum_master/app/MyAspect;
   #98 = Utf8               de/scrum_master/app/MyAspect
   #99 = Class              #98           // de/scrum_master/app/MyAspect
  #100 = Methodref          #99.#97       // de/scrum_master/app/MyAspect.aspectOf:()Lde/scrum_master/app/MyAspect;
  #101 = Utf8               myAdvice
  #102 = Utf8               (Lorg/aspectj/lang/JoinPoint;)V
  #103 = NameAndType        #101:#102     // myAdvice:(Lorg/aspectj/lang/JoinPoint;)V
  #104 = Methodref          #99.#103      // de/scrum_master/app/MyAspect.myAdvice:(Lorg/aspectj/lang/JoinPoint;)V
  #105 = Utf8               ajc$tjp_1
  #106 = NameAndType        #105:#86      // ajc$tjp_1:Lorg/aspectj/lang/JoinPoint$StaticPart;
  #107 = Fieldref           #37.#106      // de/scrum_master/app/ShapeTest.ajc$tjp_1:Lorg/aspectj/lang/JoinPoint$StaticPart;
  #108 = Utf8               (Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
  #109 = NameAndType        #89:#108      // makeJP:(Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
  #110 = Methodref          #93.#109      // org/aspectj/runtime/reflect/Factory.makeJP:(Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
  #111 = Utf8               org.aspectj.weaver.WeaverVersion
  #112 = Utf8               org.aspectj.weaver.WeaverState
  #113 = String             #48           // ShapeTest.java
  #114 = Utf8               (Ljava/lang/String;Ljava/lang/Class;)V
  #115 = NameAndType        #5:#114       // ""<init>"":(Ljava/lang/String;Ljava/lang/Class;)V
  #116 = Methodref          #93.#115      // org/aspectj/runtime/reflect/Factory.""<init>"":(Ljava/lang/String;Ljava/lang/Class;)V
  #117 = Utf8               method-execution
  #118 = String             #117          // method-execution
  #119 = Utf8               1
  #120 = String             #119          // 1
  #121 = String             #44           // testCircle
  #122 = Utf8               de.scrum_master.app.ShapeTest
  #123 = String             #122          // de.scrum_master.app.ShapeTest
  #124 = Utf8
  #125 = String             #124          //
  #126 = Utf8               void
  #127 = String             #126          // void
  #128 = Utf8               makeMethodSig
  #129 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
  #130 = NameAndType        #128:#129     // makeMethodSig:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
  #131 = Methodref          #93.#130      // org/aspectj/runtime/reflect/Factory.makeMethodSig:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/aspectj/lang/reflect/MethodSignature;
  #132 = Utf8               makeSJP
  #133 = Utf8               (Ljava/lang/String;Lorg/aspectj/lang/Signature;I)Lorg/aspectj/lang/JoinPoint$StaticPart;
  #134 = NameAndType        #132:#133     // makeSJP:(Ljava/lang/String;Lorg/aspectj/lang/Signature;I)Lorg/aspectj/lang/JoinPoint$StaticPart;
  #135 = Methodref          #93.#134      // org/aspectj/runtime/reflect/Factory.makeSJP:(Ljava/lang/String;Lorg/aspectj/lang/Signature;I)Lorg/aspectj/lang/JoinPoint$StaticPart;
  #136 = Utf8               100a
  #137 = String             #136          // 100a
  #138 = String             #49           // $jacocoInit
  #139 = Utf8               java.lang.invoke.MethodHandles$Lookup:java.lang.String:java.lang.Class
  #140 = String             #139          // java.lang.invoke.MethodHandles$Lookup:java.lang.String:java.lang.Class
  #141 = Utf8               arg0:arg1:arg2
  #142 = String             #141          // arg0:arg1:arg2
  #143 = String             #58           // [Z
  #144 = Utf8               ajc$preClinit
  #145 = NameAndType        #144:#6       // ajc$preClinit:()V
  #146 = Methodref          #37.#145      // de/scrum_master/app/ShapeTest.ajc$preClinit:()V
  #147 = Utf8               arg0
  #148 = Utf8               Ljava/lang/invoke/MethodHandles$Lookup;
  #149 = Utf8               arg1
  #150 = Utf8               Ljava/lang/String;
  #151 = Utf8               arg2
  #152 = Utf8               Ljava/lang/Class;
  #153 = Utf8               <clinit>
{
  public de.scrum_master.app.ShapeTest();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: ldc           #57                 // InvokeDynamic #0:$jacocoData:Ljava/lang/Object;
         2: checkcast     #59                 // class ""[Z""
         5: astore_1
         6: aload_0
         7: invokespecial #1                  // Method java/lang/Object.""<init>"":()V
        10: aload_1
        11: iconst_0
        12: iconst_1
        13: bastore
        14: return
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lde/scrum_master/app/ShapeTest;
      LineNumberTable:
        line 6: 6

  public void testCircle();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=3, args_size=1
         0: getstatic     #88                 // Field ajc$tjp_0:Lorg/aspectj/lang/JoinPoint$StaticPart;
         3: aload_0
         4: aload_0
         5: invokestatic  #94                 // Method org/aspectj/runtime/reflect/Factory.makeJP:(Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object;)Lorg/aspectj/lang/JoinPoint;
         8: astore_2
         9: invokestatic  #100                // Method de/scrum_master/app/MyAspect.aspectOf:()Lde/scrum_master/app/MyAspect;
        12: aload_2
        13: invokevirtual #104                // Method de/scrum_master/app/MyAspect.myAdvice:(Lorg/aspectj/lang/JoinPoint;)V
        16: ldc           #57                 // InvokeDynamic #0:$jacocoData:Ljava/lang/Object;
        18: checkcast     #59                 // class ""[Z""
        21: astore_1
        22: ldc2_w        #9                  // double 78.53981633974483d
        25: new           #11                 // class de/scrum_master/app/Circle
        28: dup
        29: ldc2_w        #13                 // double 5.0d
        32: invokespecial #15                 // Method de/scrum_master/app/Circle.""<init>"":(D)V
        35: invokevirtual #18                 // Method de/scrum_master/app/Circle.getArea:()D
        38: ldc2_w        #22                 // double 1.0E-6d
        41: invokestatic  #24                 // Method org/junit/Assert.assertEquals:(DDD)V
        44: aload_1
        45: iconst_1
        46: iconst_1
        47: bastore
        48: ldc2_w        #30                 // double 43.982297150257104d
        51: new           #11                 // class de/scrum_master/app/Circle
        54: dup
        55: ldc2_w        #32                 // double 7.0d
        58: invokespecial #15                 // Method de/scrum_master/app/Circle.""<init>"":(D)V
        61: invokevirtual #34                 // Method de/scrum_master/app/Circle.getCircumference:()D
        64: ldc2_w        #22                 // double 1.0E-6d
        67: invokestatic  #24                 // Method org/junit/Assert.assertEquals:(DDD)V
        70: aload_1
        71: iconst_2
        72: iconst_1
        73: bastore
        74: return
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      75     0  this   Lde/scrum_master/app/ShapeTest;
      LineNumberTable:
        line 9: 9
        line 10: 48
        line 11: 70
    RuntimeVisibleAnnotations:
      0: #46()
        org.junit.Test

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=0, locals=0, args_size=0
         0: invokestatic  #146                // Method ajc$preClinit:()V
         3: return
      LineNumberTable:
        line 1: 0
}
SourceFile: ""ShapeTest.java""
BootstrapMethods:
  0: #53 REF_invokeStatic de/scrum_master/app/ShapeTest.$jacocoInit:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;)[Z
    Method arguments:
  org.aspectj.weaver.WeaverVersion: length = 0xC (unknown attribute)
   00 07 00 00 00 00 00 00 00 00 00 00
  org.aspectj.weaver.WeaverState: length = 0x4 (unknown attribute)
   03 00 00 00
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns478AUW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CBJt,aspectj,1007161965,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-07T06:01:14Z,2022-01-07T06:01:14Z,"I guess that project is missing some repositories that you have locally configured or something:

```mvn clean test
[INFO] Scanning for projects...
[INFO]
[INFO] -----------< org.example:AJ_LTWJacocoWeavingProblem_549438 >------------
[INFO] Building AJ_LTWJacocoWeavingProblem_549438 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[WARNING] The POM for org.apache.maven.plugins:maven-surefire-plugin:jar:3.0.0-M6-SNAPSHOT is missing, no dependency information available
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.171 s
[INFO] Finished at: 2022-01-06T22:00:17-08:00
[INFO] ------------------------------------------------------------------------
[ERROR] Plugin org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M6-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.apache.maven.plugins:maven-surefire-plugin:jar:3.0.0-M6-SNAPSHOT -> [Help 1]
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CBJt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CBUW,aspectj,1007162646,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-07T06:02:56Z,2022-01-07T06:02:56Z,I switched it to M5 instead.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CBUW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CEZg,aspectj,1007175264,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-07T06:35:51Z,2022-01-07T06:35:51Z,"> I switched it to M5 instead.

Ah yes, of course. Well, in M5 there is a bug which makes the console output of Java agents hang. Lucky you, if with M5 that did not happen. Actually, you can also build with a previous release 2.2.x, but then you do not see the agent output on the console, only in a dump file. I helped the Surefire people fix that by testing and providing reproducer projects.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CEZg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CEmL,aspectj,1007176075,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-07T06:38:09Z,2022-01-07T06:38:09Z,"Thanks for the fix in 92779d08. If I have an idea how to do that, I can add a test for it. @aclement, should I simply build 1.9.8 (or should we call it 1.9.17?) soon and publish it on Maven Central, or is there anything you need to do with regard to the Eclipse website etc.?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48CEmL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48ELRi,aspectj,1007727714,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-07T20:43:03Z,2022-01-07T20:43:03Z,I see no reason to delay on 1.9.8 if you are happy. I do the website updates after it is available.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48ELRi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48ELqd,aspectj,1007729309,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-07T20:45:46Z,2022-01-07T20:45:46Z,"Given that I don't know of a java language construct that would cause the compiler to generate bytecode containing `Dynamic`, you'll have to construct the bytecode yourself if you want to write a test (at least a test that isn't bringing in jacoco and getting all complicated). Certainly doable, but a bunch of work. The need for a test seems less urgent given this is such a silly mistake and that same thing shouldn't regress in the future.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48ELqd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48E6cw,aspectj,1007920944,68,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-08T09:15:54Z,2022-01-08T09:15:54Z,"@aclement, I modified code by @raphw found in [this blog post](https://mydailyjava.blogspot.com/2018/08/hands-on-constantdynamic-class-file.html), ASM-ified it, stored the generator code beside the actual test classes, but also committed a JAR containing the generated class file, similar to how it was done for the [indy (invokedynamic) tests](https://github.com/eclipse/org.aspectj/tree/master/tests/indy). That is not nice, but I did not want to make a big change in order to be able to refer to ASM from XML test configs via something like `$asm`, similar to `$sandbox`.

If we ever see more widespread adoption of condy in JVM languages, we can move the test to its own `condy` subdirectory and add others, maybe dumping the test classes generated by these [Byte Buddy tests](https://github.com/raphw/byte-buddy/blob/4d02893830a844b53431260cc6bff2a6551e728d/byte-buddy-dep/src/test/java/net/bytebuddy/utility/JavaConstantDynamicTest.java) and ASM-ifying them in order to have generators without the need to add Byte Buddy itself as a dependency.

BTW, like I thought, this bug has existed ever since Java 11 and condy support were added to AspectJ 1.9.2.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48E6cw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/68,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48JMxV,aspectj,1009044565,68,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-10T16:20:15Z,2022-01-10T16:20:15Z,"Nice test case and nice work on the original maven repro sample, made my life much easier.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48JMxV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,aspectj,924486011,70,AJC compilation with `--release` is not working,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2021-06-18T02:36:00Z,2022-03-21T02:53:56Z,"Inherited by ECJ, the AspectJ batch compiler accepts the `--release` argument in order to compile not only to a byte code target, say Java 8, but actually to the corresponding JRE's API, ensuring that the code is actually going to run on the target platform instead of running into API compatibility issues.

Unfortunately, compiling to e.g. `--release 8` is not working as expected. I think that since Java 9 adoption in 1.9.0 nobody ever tested that, at least I cannot find any test cases. Compilation passes, but later runtime issues ensue. I noticed by chance when simply trying after reading [JDT Core issue 574181](https://bugs.eclipse.org/bugs/show_bug.cgi?id=574181), using the sample project there, manually compiling with
  * Javac (working),
  * ECJ 3.25.0 (working),
  * AJC 1.9.7.M3 (compiling, but runtime error when running the JUnit test on JDK 8).

When compiling something like this on JDK 11+ (I tried on JDK 16) with `--release 8`
```java
ByteBuffer buffer = ByteBuffer.allocate(10);
Buffer flipped = buffer.flip();
```
and then running the code on JDK 8, it should work. Instead, with AJC we see something like
```text
java.lang.NoSuchMethodError: java.nio.ByteBuffer.flip()Ljava/nio/ByteBuffer;
        at jdktest.Buffers.dummy(Buffers.java:14)
        at jdktest.BuffersTest.testBuffer(BuffersTest.java:11)
```
because in JDK 8 there simply was not `ByteBuffer.flip()`, only `Buffer.flip()`. I.e., in this case compiling with `-source 8 -target 8` is insufficient. BTW, the combination of `-8 --release 8` is illegal, if anyone wanted to suggest trying that.

I have not investigated yet, why it is not working. Maybe a parameter is not passed on as it should, maybe we do not forward to the actual batch compiler but talking to ECJ's JSR-199 API, running into the same bug 574181. This is pure speculation. I am just creating this issue, because I think it should be fixed before the 1.9.7 release, because it is a major issue IMO.

@aclement, do you agree that we should fix it before the release, or does it mean that Eclipse needs to re-approve?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzc2MjU3OA==,aspectj,863762578,70,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-18T05:16:41Z,2021-06-18T05:16:41Z,"If it didn't work in 1.9.6 that drastically lessens the urgency for me. However, there would be no need to re-approve anything if you want to dig into it. I suspect you are right about options passing through given it works on ECJ.

Just to indicate where my level is - issues that tend to be urgent for me are the red ones on https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&f0=OP&f1=OP&f3=CP&f4=CP&j1=OR&list_id=20738136&product=AspectJ&query_format=advanced - blockers that are preventing folks from getting their work done.

Unfortunately on GitHub we don't have that kind of severity indicator setup yet. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzc2MjU3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzc2NjE5OQ==,aspectj,863766199,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-18T05:26:05Z,2021-06-18T05:26:05Z,"> If it didn't work in 1.9.6 that drastically lessens the urgency for me.

It never worked before, I guess. I just tried 1.9.4 and 1.9.6 in order to be sure.

> Just to indicate where my level is (...) blockers that are preventing folks from getting their work done.

I see, thanks.

> Unfortunately on GitHub we don't have that kind of severity indicator setup yet.

How far are we with
  * getting me more privileges both here (GitHub, i.e. AspectJ and JDT Core repos) and on Bugzilla, so I can help with configuration, bug management, merging PRs?
  * migrating AJDT to GitHub + access rights for me?

I wish to be able to support you more in these regards, hopefully in exchange for your support in other areas with what little time you might win with me unburdening you a bit.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2Mzc2NjE5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDM0MTk3NQ==,aspectj,864341975,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-19T02:17:35Z,2021-06-19T02:17:35Z,"What I have found out so far is
  * `--release N` is handled as an unparsed option and added to the option string passed on to the JDT Core args parser, where it is recognised and handled correctly.
  * But henceforth, AspectJ ignores it.
  * According to [JEP-247](http://openjdk.java.net/jeps/247) and the nice explanation [here](https://stackoverflow.com/a/43103038/1082681), basically the `--release N` option is semantically equivalent with `-source N -target N -bootclasspath <bootclasspath-from-N>`. But AJC simply sets the bootclasspath from the current JDK, which is wrong.
  * The bootclasspath issue is not trivial, though, because the compiler needs to look into `$JDK_ROOT/lib/ct.sym`, which is a ZIP file containing API information about previous JDKs, where differences to the current one exist. In JDT Core, this is abstracted into classes like [`CtSym`](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/aspectj/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CtSym.java), but also [`ClasspathJrtWithReleaseOption`](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/aspectj/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJrtWithReleaseOption.java) and [`JRTUtil.JrtFileSystemWithOlderRelease`](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/99751e023e9df6a1707c2c86d5a5cbfdd0a15bae/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JRTUtil.java#L231).
  * If you want to know more about `$JDK_ROOT/lib/ct.sym`, please read [this article](https://www.morling.dev/blog/the-anatomy-of-ct-sym-how-javac-ensures-backwards-compatibility/). I found out about the details by myself, but the article (which I found later) is a convenient shortcut. The gist of it is that the `*.sig` files are simply class files which only contain class skeletons with empty methods, as can be seen when decompiling or disassembling those files using `javap`.

Probably somehow we need to make sure that delegation to those JDT Core classes occurs, which currently is not the case, because the AJC batch compiler does not extend the ECJ batch compiler, but only uses a subclass of it for argument parsing, then doing its own thing. So possibly we need to replicate something from there into our batch compiler, which does not sound so nice, but is the current state of affairs. I am afraid that this might be above my current pay grade, and I know you are busy, @aclement. But nevertheless it is kind of a glaring hole in our compiler since 1.9.0. I do see the priority way higher than you. For me this would be red in Bugzilla, because it is a major feature in any Javac-compatible Java compiler since Java 9.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDM0MTk3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDQ4ODAxMQ==,aspectj,864488011,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-20T02:00:02Z,2021-06-20T02:00:02Z,"I had a few minutes to conduct another little experiment: compiling with the regular ECJ batch compiler, packaged inside `aspectjtools` as the relocated class `org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main`. In this case `--release N` works, so at least we know that the AspectJ modifications did not destroy any existing functionality, but that
  * either we are hitting [JDT bug 574181](https://bugs.eclipse.org/bugs/show_bug.cgi?id=574181), as mentioned in the issue description,
  * or somewthing is wrong about the way we handle the boot classpath,
  * or maybe both.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDQ4ODAxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDcyNjMyMQ==,aspectj,864726321,70,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-21T04:55:03Z,2021-06-21T04:55:03Z,"As far as I can see, the option gets through just fine. Breakpoint on the `--release` handling in JDT Core `Main.java` we see it handled and the compliance value set. Subsequently in `CompilerOptions.set(Map)` we see `OPTION_Compliance`being processed and it being set into the map correctly. 

My suspicions then fall on `MessageSend.resolveType()` where the actual receiver type is computed for the flip call. I worry one of the aspects is perhaps interfering but what I'd be doing next is probably running JDT core alongside AspectJ JDT Core, stepping through each in MessageSend type resolution and seeing where the mistake is made. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NDcyNjMyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQwMjc4Mw==,aspectj,865402783,70,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-21T23:09:57Z,2021-06-21T23:09:57Z,"I wasn't totally happy with that train of thought when I woke up this morning. Dug around a little more. The problem is in here I would suspect: `AjBuildManager.getLibraryAccess` where you can see we create `FileSystem` objects without supplying the final parameter which would be the release. I haven't built the solution to test it, but it looks like it will be that. There is a build config options object that hopefully has the `OPTION_Compliance` value set.  How did I get to that point? I grepped the git history for the JDT Core project for `--release` to see how it was first implemented, that pointed me to some classes to dig around in. Kinded ended up with where you were looking `ClasspathJrtWithReleaseOption`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQwMjc4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQyMTIwMQ==,aspectj,865421201,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-21T23:52:16Z,2021-06-21T23:52:16Z,"I was quite busy and did not do too much digging. At the same time, I was watching and commenting on [JDT bug 574181](https://bugs.eclipse.org/bugs/show_bug.cgi?id=574181) in order to maybe cherry-pick from the bugfix (in progress) there, so as to avoid that we indirectly run into the same problem, if for some reason we might end up on one of the execution paths not setting the compiler options correctly.

Why cherry-pick? Because I want to avoid a big JDT 4.19 to 4.20 upgrade merge before the AspectJ 1.9.7 release. My last merge point was after the initial Java 16 merge onto master there, so I think we have what we need. Not sure how much has changed there since the last merge, but 4.20 now features Java 16 support which came shortly after 4.19 and had to be installed in Eclipse via Marketplace. So I guess, if there is anything new, it is bugfixes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQyMTIwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQzNDcyNA==,aspectj,865434724,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-22T00:30:51Z,2021-06-22T00:30:51Z,"Do you think that maybe https://github.com/eclipse/org.aspectj/blob/d17189c430a7ffd1ec966759a93b3ed348766650/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/ajc/BuildArgParser.java#L204

is too simple and

https://github.com/eclipse/org.aspectj/blob/d17189c430a7ffd1ec966759a93b3ed348766650/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/ajc/BuildArgParser.java#L349

needs to handle the boot classpath specially, using `ClasspathJrtWithReleaseOption` or so? Or is this the wrong place and should be handled by JDT Core internally? I am really just speculating. But having the notion in my mind that `--release N` actually means to use the boot classpath from another JDK (which in this case means, reading information from `ct.sym`), I know that at some point this needs to be done.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQzNDcyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ1MDgyMQ==,aspectj,865450821,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-22T01:22:15Z,2021-06-22T01:22:15Z,"OK, debugging in parallel through AJC vs. ECJ batch compilers, shows a difference in method parameter `Classpath[] paths`:

AJC:
![image](https://user-images.githubusercontent.com/1537384/122847611-3e2e9d80-d332-11eb-9620-388a4f201ead.png)

ECJ:
![image](https://user-images.githubusercontent.com/1537384/122847631-48509c00-d332-11eb-8e2a-926b03e3461b.png)

Both times, the methods is called by a method `getLibraryAccess`, which in turn is called my a method `performCompilation`, but those method pairs are in different classes:
  * ECJ: `org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main`
  * AJC: `org.aspectj.ajdt.internal.core.builder.AjBuildManager`

Either the naming is a coincidence or AJC `AjBuildManager` is actually mimicking ECJ `Main`. Not knowing the project history, I am assuming the latter.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ1MDgyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ1NDY5MA==,aspectj,865454690,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-22T01:34:51Z,2021-06-22T01:34:51Z,"I think, this is what we need to emulate in AJC, possibly in `AjBuildConfig.computeCheckedClasspath()`:

![image](https://user-images.githubusercontent.com/1537384/122848927-b26a4080-d334-11eb-9787-94c5c80b003c.png)

https://github.com/eclipse/org.aspectj/blob/d17189c430a7ffd1ec966759a93b3ed348766650/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java#L924","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ1NDY5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ5NjE4Mg==,aspectj,865496182,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-22T03:16:46Z,2021-06-22T03:16:46Z,"I noticed that member `BuildArgParser.checkedClasspaths` actually contains a `ClasspathJep247` instance, i.e. the upstream build config is created correctly, handling `--release N` as expected. I exploited that fact for a quick & dirty proof-of-concept (PoC) hack, just in order to see if the compilation result is correct. I simply added a getter for the protected member and used this ugly hack in order to check for `ClasspathJep247` elements:

```patch
--- a/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/ajc/BuildArgParser.java	(revision HEAD)
+++ b/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/ajc/BuildArgParser.java	(revision Staged)
@@ -415,6 +415,10 @@
 		return ret;
 	}
 
+	public FileSystem.Classpath[] getCheckedClasspaths() {
+		return checkedClasspaths;
+	}
+
 	private void addExtDirs(String extdirs, List classpathCollector) {
 		StringTokenizer tokenizer = new StringTokenizer(extdirs, File.pathSeparator);
 		while (tokenizer.hasMoreTokens()) {
--- a/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java	(revision HEAD)
+++ b/org.aspectj.ajdt.core/src/main/java/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java	(revision Staged)
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.FileFilter;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -27,9 +28,11 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.StringTokenizer;
+import java.util.stream.Collectors;
 
 import org.aspectj.ajdt.ajc.BuildArgParser;
 import org.aspectj.ajdt.internal.compiler.CompilationResultDestinationManager;
+import org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJep247;
 import org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathLocation;
 import org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem;
 import org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
@@ -930,7 +933,10 @@
 
 		// ArrayList<Classpath> allPaths = handleBootclasspath(bootclasspaths, customEncoding);
 		ArrayList<FileSystem.Classpath> allPaths = new ArrayList<>();
-	 	allPaths.addAll(processStringPath(bootclasspath, encoding));
+		if (Arrays.stream(buildArgParser.getCheckedClasspaths()).anyMatch(cp -> cp instanceof ClasspathJep247))
+			allPaths.addAll(Arrays.stream(buildArgParser.getCheckedClasspaths()).filter(cp -> cp instanceof ClasspathJep247).collect(Collectors.toList()));
+		else
+			allPaths.addAll(processStringPath(bootclasspath, encoding));
 		allPaths.addAll(processFilePath(inJars, encoding));
 	 	allPaths.addAll(processFilePath(inPath, encoding));
 	 	allPaths.addAll(processFilePath(aspectpath, encoding));
```

Rationale: I simply use the existence of a `ClasspathJep247` classpath member as a proxy marker for [this condition](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/99751e023e9df6a1707c2c86d5a5cbfdd0a15bae/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java#L5355) in ECJ:

```java
	if (this.releaseVersion != null && this.complianceLevel < jdkLevel) {
```

This is of course not beautiful, hence me posting it in a comment rather than a PR. But what can I say? The compilation result is correct, the subsequent test on JDK 8 passes, proving that the correct API was used for compilation.

Now we have a clue what could be done and a PoC that in theory it can be done without changing anything in JDT Core. @aclement, maybe you can take it from here and advise what to do next and how you would like it to be implemented.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTQ5NjE4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTU0MDU5Mg==,aspectj,865540592,70,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-22T04:46:56Z,2021-06-22T04:46:56Z,"some good digging there, you know this bit of the code better than me now.  Really I did the absolute bare minimum to support the Java repackaging that occurred when modules arrived in 9, so yes, anything that goes beyond the test cases we have (like testing release level) is bound to be missing.

Where you are fiddling there with the path, the options are available
```
		String optionCompliance = options.getMap().get(CompilerOptions.OPTION_Compliance);
		long complianceLevel = options.complianceLevel;
```

just not quite sure the jdk level is accessible there currently, will have to have a look around.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2NTU0MDU5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODEyMTQ1MA==,aspectj,868121450,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-25T01:30:58Z,2021-06-25T01:30:58Z,"> Where you are fiddling there with the path, the options are available

Yes, I had noticed that.

> just not quite sure the jdk level is accessible there currently, will have to have a look around.

I had not found it when looking around, which is why I used the trick to directly use the path already detected by ECJ, which not only saved me the effort to re-create and re-evaluate the same conditions ECJ already must have evaluated, but also directly gave me the classpath type needed to deal with the `ct.sym` layer instead of having to also re-create that, mimicking ECJ. Cheap trick, but it works.

I would like to hand over to you to devise a better solution, if mine is too hacky. I am also unsure, if mine covers all possible cases or just works in my simple test case. But the idea to use more existing information and infrastructure from ECJ instead of re-building it in AJC is a good one, of course not necessarily the way I did it for the PoC.

---

**Update:** Because 1.9.7 is out already, I guess we should assign this to the 1.9.8 milestone.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODEyMTQ1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns408qJR,aspectj,888316497,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-28T13:38:13Z,2021-07-28T13:38:13Z,"@aclement, the PR was merged, so unless you wish to revise the simple solution I implemented, we could close this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns408qJR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40904L,aspectj,888622603,70,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-07-28T21:08:38Z,2021-07-28T21:08:38Z,needs assigning to a release but I don't believe we've decided on that being 1.9.8 or not...,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40904L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/70,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40-Ytp,aspectj,888769385,70,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-29T03:18:54Z,2021-07-29T03:18:54Z,"Given the fact that is has been merged after the 1.9.7 release, just like #77, I thought it was a no-brainer to assign it to 1.9.8. Both PRs are already contained in 1.9.8.M1, too. So unless you want to create an extra milestone for 1.9.8.M1, I think 1.9.8 it is.

If however you are referring to our conversation about adjusting the AspectJ release numbers to the corresponding JDK releases, e.g. the next release being something like 1.17, we can always change that later, if we decide to go that way instead of 1.9.8.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40-Ytp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71,aspectj,929660657,71,Missing guidance in release instructions,aclement,226298,Andy Clement,aclement@vmware.com,CLOSED,2021-06-24T22:33:49Z,2022-03-21T02:54:40Z,"- it doesn't tell you how to setup your sonatype creds for publishing snapshots

- I don't know how to consume where it is publishing the snapshot, what maven repo would I setup in a project to test it?
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODEwNTg1OA==,aspectj,868105858,71,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-25T01:01:46Z,2021-06-25T01:01:46Z,"Actually, I thought that was common knowledge or can be easily obtained from other sources, but it is good to have it in the guide, too. But why did you add the `pluginRepository` section? In order to consume AspectJ, it is not necessary. It would help to consume an AspectJ Maven Plugin snapshot, though. Was that the rationale?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODEwNTg1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODg1MjE4OA==,aspectj,868852188,71,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-25T21:53:42Z,2021-06-25T21:53:42Z,I still seem to need it in my Spring Roo sample that I have used for many years.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODg1MjE4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/71,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODkyNDMwNw==,aspectj,868924307,71,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-06-26T01:42:25Z,2021-06-26T01:42:25Z,"If you need it there, then not for AspectJ but in order to use the snapshot of a plugin outside of the AspectJ realm. If you cannot find out or are too busy to, I can help you with that, if you can give me access to your sample project. AspectJ is not a Maven plugin, therefore this setting is unnecessary. Besides, since Sonatype introduced a new snapshot URL for new group IDs a while ago, depending on what you want to consume, there are two possible URLs. E.g.
  * `org.aspectj` → `https://oss.sonatype.org/content/repositories/snapshots`
  * `dev.aspectj` → `https://s01.oss.sonatype.org/content/repositories/snapshots`

I have no idea why Sonatype did that instead of solving the problem with a load balancer or so, but they did. So nowadays you need to add different snapshot repositories, depending on what you want to deploy or consume, see for example [my AspectJ Maven fork](https://github.com/dev-aspectj/aspectj-maven-plugin/blob/1f2cf3881662d194e651ba00af4114aa89b91fe2/pom.xml#L64-L67).

Anyway, we should not irritate users and remove the plugin repository section again. I am going to prepare a little PR containing some cosmetic stuff.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg2ODkyNDMwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/72,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/72,aspectj,929742038,72,Re-evaluate versioning scheme,kriegaex,1537384,Alexander Kriegisch,,OPEN,2021-06-25T01:20:26Z,2022-03-21T03:12:05Z,"Do we want to continue with the minor-minor versioning since 1.9.x?

How about making AspectJ follow the Java major in its minor, i.e. the next release could be AspectJ 1.17 (not even 1.17.0, only after that 1.17.1, if a maintenance release is necessary).

If we ever upgrade to 2.x whenever it is justified (not now), we could simply skip 2.0 and continue with e.g. 2.x for Java release x, the major only signifying a major update of AspectJ as such.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,aspectj,930865550,76,"Convert documentation to AsciiDoc, publish to GitHub Pages or eclipse.dev",kriegaex,1537384,Alexander Kriegisch,,OPEN,2021-06-27T07:07:06Z,2024-03-24T08:24:03Z,"Why?
  * Easier to read and maintain than DocBook XML and HTML
  * GitHub automatically displays it correctly
  * More formatting and structuring options than Markdown
  * Get rid of ancient DocBook dependencies in `lib` module

How?
- [x] Use CLI tool like [Pandoc](https://pandoc.org/) for initial conversion
- [x] Manually fix the rest
- [x] Add Maven build step for Asciidoc generation
- [x] Update Maven build step for integrating generated docs incl. javadocs into installer package
- [x] Get rid of DocBook build steps and dependencies
- [x] Decide where and how to publish
  - [Eclipse AspectJ project page](https://eclipse.dev/aspectj/docs.php)
    - :+1: Uses existing infrastructure (Eclipse server, [website repo](https://github.com/eclipse-aspectj/aspectj-website))
    - :+1: Seamless integration into Eclipse project page
    - :+1: Least disruptive change for users
  - GitHub Pages
    - :+1: Independent of Eclipse infrastructure and PHP-driven templates like Hugo Solstice theme
    - :-1: No seamless integration into Eclipse project page
    - :-1: No Eclipse infra team support
    - :+1: Docs are just a GH branch or separate repo
    - :-1: If docs are a branch and we want per-version docs, the repo size might grow quickly
  - No docs website at all, rely on GitHub asciidoc and/or markdown formatting. Provide links to the most important docs sources on the main read-me and let users browse directly from the repository.
    - :+1: No extra build and post-build manual steps
    - :+1: Browsing docs by branch or tag after the cut-over comes for free
    - :-1: Asciidoc includes do not work on GH, i.e. one-page versions of multi-page docs are impossible
    - :-1: Publishing docs in other formats like PDF would require extra GH pages or Eclipse storage space, because we do not want to commit them to the Git repository
- [x] Perform initial upload manually
- [ ] After publication, arrange with Eclipse infra team to create redirects for either variant, because even if we stick with the existing Eclipse server and only one (current) docs version published, URLs and intra-document HTML anchors will change
- [x] ~~#276~~ (optional)
- [x] ~~Publish via GitHub action on master merge or release tag~~ (optional)
- [x] ~~Integrate Javadoc into publishing process~~ (optional)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41I7fu,aspectj,891533294,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-08-03T05:13:30Z,2021-08-03T05:13:30Z,"@aclement, I have been working on and off on this during the last 4 weeks. I am not done yet and have no HTML generation step for it yet, but first wanted to focus on making the documents readable and navigable directly from the GitHub repo. I would appreciate some feedback. Here are some entry points:
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/dist/doc/index.adoc \
    (still several links to fix, but click on the release notes per version)
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/adk15ProgGuideDB/adk15notebook.adoc \
    Locally, I use include statements in order to get it rendered as a single document with a table of contents, but GitHub does not do that automatically, they block it and convert the includes into an ugly list of naked document links.
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/devGuideDB/devguide.adoc \
    Same limitation for includes applies.
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/pdGuideDB/pdguide.adoc \
    Same limitation for includes applies.
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/progGuideDB/progguide.adoc \
    Same limitation for includes applies.
  * https://github.com/kriegaex/org.aspectj/blob/docs-to-asciidoc/docs/developer/index.adoc \
    Same limitation for includes applies.

There are some more documents I converted, but this should give you a good first impression of what the AsciiDoc looks like (no apecific styling applied, all using defaults).

Ideally, the links should just work on GitHub, so we have a living documentation. We can of course add an AsciiDoctor conversion step and regularly upload generated HTMLs for a static documentation website, similar to what we have now.

P.S.: Sample code in the documentation (e.g. Java, AspectJ, XML) has syntax highlighting now.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41I7fu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Xa29I,aspectj,1466658632,76,NA,edyda99,76707194,Edy Daher,edydaherz@gmail.com,NA,2023-03-13T18:10:02Z,2023-03-13T18:10:02Z,"Hi, is it possible to split this issue into multiple sub-issues and label them as ideal for contribution, new people (like me) will get the opportunity to contribute and will get to know more about this amazing library?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Xa29I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Z7KjE,aspectj,1508681924,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-04-14T14:42:49Z,2023-04-14T14:42:49Z,"> Hi, is it possible to split this issue into multiple sub-issues

Actually, I am 95% done and simply deprioritised this issue in favour of others. Part of it was laziness, too, I admit to that. One of these days, I should kick my own ass and finish it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Z7KjE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5wCHIN,aspectj,1879601677,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-01-06T09:11:58Z,2024-01-06T09:11:58Z,"Reopening, because even though the PR as such is done and merged, the website still has not been updated. Open questions for how exactly to do it, see [Eclipse help desk issue 4123](https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/4123).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5wCHIN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z0OZH,aspectj,1943070279,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-14T04:38:06Z,2024-02-14T04:38:06Z,"For now, I made the decision to publish on https://eclipse.dev/aspectj/, but cannot do anything there at the moment, because the website seems to have problems, see [GitLab issue 4287](https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/4287).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z0OZH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z87wn,aspectj,1945353255,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-15T04:40:58Z,2024-02-15T04:40:58Z,"We reached the next milestone: I updated the old PHP website, at least as much as necessary for now. For example:

* Removed old news from main index page
* Restructured downloads page
* Updated link to Git repository
* FAQ and docs now point to asciidoc-generated content (old content is still around, because the redirects are still an open to-do) ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z87wn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50Fydn,aspectj,1947674471,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-16T02:45:39Z,2024-02-16T02:45:39Z,I created a URL mapping table from old to new documentation URLs and opened helpdesk issue https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/4304.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50Fydn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/76,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50F016,aspectj,1947684218,76,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-16T03:00:28Z,2024-02-16T03:00:28Z,The 3 optional steps will not be done as part of this issue. I want to close it after the URL mapping and tend to other issues after expending considerable effort on this one.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50F016/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/78,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/78,aspectj,933257428,78,Optionally search parent classes/interfaces when matching annotations,kriegaex,1537384,Alexander Kriegisch,,OPEN,2021-06-30T02:55:10Z,2022-03-21T03:11:04Z,"In Java, there is no such thing as annotation inheritance
  * from interfaces to implementing classes,
  * from interface methods to implementing methods,
  * from parent class methods to overriding methods.

The only exception is inheritance from classes to subclasses, if and only if the annotation uses `@Inherited`. See also my aspect-based workaround at https://stackoverflow.com/q/42607015/1082681.

This is kind of an FAQ, I answered related questions many times on SO already. Of course, it is not really an AspectJ problem but a misconception about how the JVM as such works on the user's part, if she thinks it should work out of the box. But OTOH, it would be a nice feature to optionally expand the search for matching annotations in both classes and methods up the parent hierarchy. See also the corresponding recent question in a user comment [here](https://stackoverflow.com/q/68138913/1082681).

@aclement, would this be something worth keeping in the backlog? Would it be difficult to implement, if for a second we assume you would even have the time to do it?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/78,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MTY0MzQ4Mw==,aspectj,871643483,78,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-06-30T18:45:12Z,2021-06-30T18:45:12Z,The team have often thought about this. Not necessarily hard to implement but you have to consider all the code out there that may be working based on this not happening by default. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MTY0MzQ4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/78,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MTgwMzk2MA==,aspectj,871803960,78,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-01T00:03:46Z,2021-07-01T00:03:46Z,"Hence the ""optionally"" in the subject. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MTgwMzk2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,aspectj,951545479,79,Support JDK 17,krzyk,105730,Krzysztof Krasoń,Krzysztof.Krason@gmail.com,CLOSED,2021-07-23T12:41:52Z,2022-03-21T02:50:01Z,"JDK17 is already in rampdown phase 2, RC will be available in 2 weeks, no major changes are planned, only P1 and P2 bugs.

I think it would be good to start supporting it, so it won't be any delay after the JDK release, so projects can upgrade on day 1.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40ymQ4,aspectj,885679160,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-23T14:28:36Z,2021-07-23T14:28:36Z,"Hello again. You could have mentioned, that we started talking about this in https://github.com/dev-aspectj/aspectj-maven-plugin/issues/22. Same question, same answer for now. Thanks for opening this issue, though. The AspectJ team will update you here, as soon as there is a development snapshot ready for test.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns40ymQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407dpQ,aspectj,888003152,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-28T04:37:58Z,2021-07-28T04:37:58Z,"I have a first development version running on JDK 17-EA, see [build report](https://github.com/kriegaex/org.aspectj/actions/runs/1073587712).

I also added Java-17-specific tests for the new preview feature [JEP 406: Pattern Matching for switch](https://openjdk.java.net/jeps/406). They do not pass yet with the latest Eclipse JDT Core from the BETA_JAVA17 branch, simply because the Eclipse compiler folks are still in the middle of development, see umbrella ticket [Bugzilla #571398](https://bugs.eclipse.org/bugs/show_bug.cgi?id=571398) and its sub-tickets.

Other than that, it is looking OK for now. I could upload a snapshot to Sonatype OSSRH (the snapshot repository for Maven Central) and also a corresponding AspectJ Maven version accepting the ""17"" source/target version. But I will only do so, if you are willing to test snapshot versions of both. How about that?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407dpQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407d1J,aspectj,888003913,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-28T04:40:29Z,2021-07-28T04:40:29Z,"@aclement, currently I am pushing to my fork and starting builds (including 17-EA) manually, because I have not opened a PR for branch [java-17](https://github.com/kriegaex/org.aspectj/tree/java-17) yet. If you would like to take a look and start reviewing, I can create one. I make that up to you for now.

BTW, with regard to the Jikes grammar, I am always happy to get everything running after the merge, but I am not confident at all that I did everything right. This statement also applies to 1.9.7. I cannot say that I spent time, trying to understand how to read/write language grammars. There might be oversights and bugs. Same goes for classes `Scanner` and `Parser` and their subclasses. In a way, I am always amazed that somehow I can make the test suite pass at all with some tweaks after each JDT Core merge, not fully understanding what I am doing.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407d1J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407oCM,aspectj,888045708,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-28T06:23:58Z,2021-07-28T06:23:58Z,"FWIW, I just ran the Maven builds for both AspectJ and AspectJ Maven Plugin while drinking tea, deploying the snapshot artifacts on OSSRH. Please note, that you need to add snapshot repositories for both normal artifacts and plugins to your POM.

With this sample POM, you should be able to use snapshots for both AspectJ and AspectJ Maven:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.scrum-master</groupId>
  <artifactId>aj-maven-test-compiler-options</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <aspectj.version>1.9.8-SNAPSHOT</aspectj.version>
    <aspectj-maven.version>1.13-SNAPSHOT</aspectj-maven.version>
  </properties>

  <repositories>
    <!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
    <repository>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
    <repository>
      <id>ossrh-snapshots</id>
      <name>Sonatype OSSRH snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
  </repositories>

  <pluginRepositories>
    <!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
    <pluginRepository>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </pluginRepository>
    <pluginRepository>
      <id>ossrh-snapshots</id>
      <name>Sonatype OSSRH snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </pluginRepository>
  </pluginRepositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <!-- Let the AspectJ compiler do the work -->
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${aspectj-maven.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-compile</goal>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <showWeaveInfo>true</showWeaveInfo>
          <verbose>true</verbose>
          <complianceLevel>17</complianceLevel>
          <!-- Set to true in order to compile with preview features -->
          <enablePreview>false</enablePreview>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${aspectj.version}</version>
    </dependency>
  </dependencies>

</project>
```

I verified that using that POM, the resulting byte code was class file version 61.0, e.g. Java 17. If you want to use any JEP 406 preview stuff - at your own risk, because Eclipse is not done with it yet, see above - you need to set `--enable-preview` for both compilation and code execution. For compilation, my version of AspectJ Maven has a new `enablePreview`  option. Please also note that I made the plugin a bit smarter than before with regard to language level options, see [AspectJ Maven commit #d3e5108e](https://github.com/dev-aspectj/aspectj-maven-plugin/commit/d3e5108ec71cc0e507335ad7c9f0a449683ba53a) for details.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns407oCM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns408iap,aspectj,888284841,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-07-28T12:54:17Z,2021-07-28T12:54:17Z,"**Update:** I have created AspectJ Maven Plugin final release 1.13, which I wanted to do for a while already, sinced AspectJ 1.9.7 and then 1.9.8.M1 were released. So now you no longer need so many snapshot repositories in your POM, only the one for AspectJ, no longer the ones for the plugin. You can simplify your POM to:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.scrum-master</groupId>
  <artifactId>aj-maven-test-compiler-options</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <aspectj.version>1.9.8-SNAPSHOT</aspectj.version>
    <aspectj-maven.version>1.13</aspectj-maven.version>
  </properties>

  <repositories>
    <!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
    <repository>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
    <repository>
      <id>ossrh-snapshots</id>
      <name>Sonatype OSSRH snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <!-- Let the AspectJ compiler do the work -->
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${aspectj-maven.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-compile</goal>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <showWeaveInfo>true</showWeaveInfo>
          <verbose>true</verbose>
          <complianceLevel>17</complianceLevel>
          <!-- Set to true in order to compile with preview features -->
          <enablePreview>false</enablePreview>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${aspectj.version}</version>
    </dependency>
  </dependencies>

</project>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns408iap/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41qdrG,aspectj,900324038,79,NA,jcsf,9212455,"João ""Pisco"" Fernandes",jcsf_1995@hotmail.com,NA,2021-08-17T14:00:24Z,2021-08-17T14:00:24Z,"Hi, I tested this in a project with JDK 17 but the tests that use AspectJ are failing. It seems that the method calls are not being intercepted as they were previously. Any idea?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41qdrG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41qeER,aspectj,900325649,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-08-17T14:02:24Z,2021-08-17T14:02:24Z,I cannot extract any useful information from your message. Please provide a sample project and instructions how to build it and how to reproduce your problem. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41qeER/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Il0M,aspectj,908221708,79,NA,jcsf,9212455,"João ""Pisco"" Fernandes",jcsf_1995@hotmail.com,NA,2021-08-30T10:15:31Z,2021-08-30T10:15:31Z,"Sorry for the delay reply. I can't share the code because it is confidential from my company. But imagine the following example:
```
@Aspect
public class RunCallableRegisterAspect extends RunCallableAspect {

    @Pointcut(""call(* java.nio.file.Path.register(..))"")
    @Override
    public void pointCutCall() {}
}
```
This is expected to intercept the calls to Path.register(...). While in Java 8 and 11 it works perfectly, on Java 17 it isn't working.
We then have another `Aspect` that intercepts the calls to `pointCutCall()` to perform some validations.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Il0M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Isi6,aspectj,908249274,79,NA,jcsf,9212455,"João ""Pisco"" Fernandes",jcsf_1995@hotmail.com,NA,2021-08-30T11:04:03Z,2021-08-30T11:04:03Z,"I found these logs in the compiler:
```
[WARNING] advice defined in *.*.aspect.RunCallableAspect has not been applied [Xlint:adviceDidNotMatch]
[WARNING] advice defined in *.*.aspect.RunCallableAspect has not been applied [Xlint:adviceDidNotMatch]
[WARNING] advice defined in *.*.aspect.RunCallableAddSnapshotAspect has not been applied [Xlint:adviceDidNotMatch]
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Isi6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Ivm5,aspectj,908261817,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-08-30T11:22:51Z,2021-08-30T11:22:51Z,"> Sorry for the delay reply. I can't share the code because it is confidential from my company.

Please forgive me for being so blunt, but that is a lame excuse unworthy of a software developer. I did not ask for your confidential, original code, but for a minimal version of it, reproducing the problem. Please learn what an [MCVE](https://stackoverflow.com/help/mcve) is. I cannot debug what I cannot see. You want help? Please contribute by being part of the solution, not part of the problem.

I tried your incomplete code snippet, creating a base aspect with an advice and a sample application calling `Path.register(..)`. It works beautifully on JDK 17. So please understand that unless you make the problem reproducible, I cannot take your problem report very seriously. If something is wrong with AspectJ and the problem is not sitting in front of the computer, I need some more proof. Thanks very much in advance. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Ivm5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42JR63,aspectj,908402359,79,NA,jcsf,9212455,"João ""Pisco"" Fernandes",jcsf_1995@hotmail.com,NA,2021-08-30T14:43:14Z,2021-08-30T14:43:14Z,"Was able to fix the issue, by reverting all the changes that I did to support Java 17 and just upgrading the aspectj version to one compiled from your branch. Thanks for the assistance.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42JR63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43j4Dv,aspectj,932151535,79,NA,martinaldrin,3080866,,,NA,2021-10-01T11:35:12Z,2021-10-01T11:35:12Z,"I testing Java 17 with aspectj version 1.9.8.M1 together with aspectj maven plugin 1.13 groupid dev.aspectj
I don't fully understand the error message

I have also posted the same issue here: https://github.com/mojohaus/aspectj-maven-plugin/issues/113




[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal dev.aspectj:aspectj-maven-plugin:1.13:compile (compile_with_aspectj) on project x: AJC compiler errors:
[ERROR] error unrecognized single argument: ""-17""
[ERROR] error no sources specified
[ERROR]
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal dev.aspectj:aspectj-maven-plugin:1.13:compile (compile_with_aspectj) on project x: AJC compiler errors:
error unrecognized single argument: ""-17""
error no sources specified at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
at org.apache.maven.cli.MavenCli.execute (MavenCli.java:972)
at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:293)
at org.apache.maven.cli.MavenCli.main (MavenCli.java:196)
at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:77)
at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke (Method.java:568)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.codehaus.mojo.aspectj.CompilationFailedException: AJC compiler errors:
error unrecognized single argument: ""-17""
error no sources specified at org.codehaus.mojo.aspectj.CompilationFailedException.create (CompilationFailedException.java:35)
at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute (AbstractAjcCompiler.java:625)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
at org.apache.maven.cli.MavenCli.execute (MavenCli.java:972)
at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:293)
at org.apache.maven.cli.MavenCli.main (MavenCli.java:196)
at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:77)
at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke (Method.java:568)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
[ERROR]
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR] mvn -rf :x
MojoExecutionException - Apache Maven - Apache Software Foundation

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43j4Dv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43j5zK,aspectj,932158666,79,NA,krzyk,105730,Krzysztof Krasoń,Krzysztof.Krason@gmail.com,NA,2021-10-01T11:47:46Z,2021-10-01T11:47:46Z,"@martinaldrin 1.9.8M1 doesn't support JDK 17, you need to wait for newer version","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43j5zK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43koPs,aspectj,932348908,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-01T15:53:26Z,2021-10-01T15:53:26Z,"@martinaldrin, don't just post here without reading what was written before. That is not helpful and just spamming the issue. Was anything unclean about the 3 comments I posted on July 28th, beginning with https://github.com/eclipse/org.aspectj/issues/79#issuecomment-888003152?

BTW, if you post code, build logs or other console output, please use code formatting. Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43koPs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43kpO8,aspectj,932352956,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-01T15:58:27Z,2021-10-01T15:58:27Z,"To everyone: Since lately Eclipse 4.21 (still without Java 17 support out of the box!) and and and extra package for Java 17 support (on the Eclipse Marketplace) were published, I was way too busy to upgrade the developer version published on July 28th, refreshing final JDK 17 support in the compiler from ECJ. Whenever I have time to do that, I can publish a release candidate or even a final release, if @aclement agrees and has time for that, because he is the official maintainer and has to take care of all the Eclipse bureaucracy. Sorry for not having done it yet, but like I said, I was and still am quite busy at present.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43kpO8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns438F1B,aspectj,938499393,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-08T09:39:02Z,2021-10-08T09:39:02Z,"Release candidate [1.9.8.RC1 is available on Maven Central](https://repo1.maven.org/maven2/org/aspectj/aspectjtools/1.9.8.RC1/). 

The corresponding [installer is available on AspectJ.dev](https://aspectj.dev/maven/org/aspectj/installer/1.9.8.RC1/).

Preliminary [release notes are here](https://htmlpreview.github.io/?https://github.com/eclipse/org.aspectj/blob/29b024efe4cb4db803103aa099d60b9bc85bac6c/docs/dist/doc/README-198.html).

To everyone: Please test it in as many projects as possible. Your feedback is welcome.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns438F1B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43-_ne,aspectj,939260382,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-09T08:58:57Z,2021-10-09T08:58:57Z,"Due to the newly published release candidate, you no longer need to depend on a snapshot version and on snapshot repositories, i.e. your Maven configuration gets simpler again:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.scrum-master</groupId>
  <artifactId>aj-maven-test-compiler-options</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <aspectj.version>1.9.8.RC1</aspectj.version>
    <aspectj-maven.version>1.13</aspectj-maven.version>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <!-- Let the AspectJ compiler do the work -->
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${aspectj-maven.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-compile</goal>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <showWeaveInfo>true</showWeaveInfo>
          <verbose>true</verbose>
          <complianceLevel>17</complianceLevel>
          <!-- Set to true in order to compile with preview features -->
          <enablePreview>false</enablePreview>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${aspectj.version}</version>
    </dependency>
  </dependencies>

</project>
```

**Please note:** The Eclipse Java Compiler (ECJ) 3.2.7 supporting Java 17 now needs JDK 11+ as a build environment, because Eclipse migrated the code base to Java 11. Because the AspectJ Compiler (AJC) is an ECJ fork, using a Java-17-enabled AJC version (1.9.8.RC1 and higher) also means that you need to run your Maven build on JDK 11+. You can still compile to goals as low as Java 1.3, don't worry. It is only about the build environment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns43-_ne/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns44E_0O,aspectj,940834062,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-12T09:28:40Z,2021-10-12T09:28:40Z,Another update: I released [AspectJ Maven Plugin](https://github.com/dev-aspectj/aspectj-maven-plugin) 1.13.1 which depends on `org.aspectj:aspectjtools:1.9.8.RC1` by default.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns44E_0O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45heN5,aspectj,965075833,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-10T12:16:38Z,2021-11-10T12:16:38Z,Please also note the upstream bugfix for JDT Core (Eclipse Java Compiler) contained in 1.9.8.RC2. See https://github.com/eclipse/org.aspectj/issues/95.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45heN5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47UgpC,aspectj,995232322,79,NA,arturmkr,14920279,Artur,,NA,2021-12-15T21:36:15Z,2021-12-15T21:36:15Z,"@kriegaex , could you please tell, when is going to be stable release of 1.9.8?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47UgpC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47VNlO,aspectj,995416398,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-12-16T03:55:51Z,2021-12-16T03:55:51Z,"I recommend to use 1.9.8.RC3. For all intents and purposes, it is stable, and it is on Maven Central.

### Background information

The thing is that while I can publish releases to Maven Central (where you can also find RC3), I am not allowed to do official Eclipse releases (AspectJ being an Eclipse project and me not having been made an official committer). Project lead Andy Clement is very, very busy and has been for a long time. Lately, I have been the only active contributor to the project, except for some recent code clean-up PRs by another nice guy.

Even if I had the privilege to create Eclipse releases, it usually is a hassle to do so, because releases entail internal code reviews and other procedural steps which neither Andy nor me have time for. This is also the main reason why we keep enumerating minor-minor 1.9.x releases instead of, say, naming the next release 1.17 or even 17, following the supported JDK version. Why? Because a minor-minor version number change entails less ceremony at Eclipse than a minor or even major version number change. We simply cannot afford to spend so much time on these things, the team is too small in order to fulfill all the procedural requirements which in theory make a lot of sense, because they ensure standardisation and quality in Eclipse projects.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47VNlO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47hNg8,aspectj,998561852,79,NA,mpern,1476131,Markus Perndorfer,,NA,2021-12-21T08:13:25Z,2021-12-21T08:13:25Z,Any chance we can get 1.9.8 (non RC) released in the next few months?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns47hNg8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/79,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns49vIKU,aspectj,1035764372,79,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-11T02:17:47Z,2022-02-11T02:17:47Z,"Release 1.9.8 is out, see also #121 and the [release announcement](https://www.eclipse.org/lists/aspectj-users/msg15534.html) I sent to the AspectJ users mailing list. Quote:

> Dear AspectJ users,
> 
> we have just released 1.9.8 (yes, finally). It is [available on Maven Central](https://repo1.maven.org/maven2/org/aspectj/aspectjtools/1.9.8/) already. The AspectJ installer can be found on [Aspectj.dev](https://aspectj.dev/maven/org/aspectj/installer/1.9.8/).
> 
> For more information, please read the [release notes](https://htmlpreview.github.io/?https://github.com/kriegaex/org.aspectj/blob/4b9d86acd096e5ee9e108ff0a450c420c880b6ea/docs/dist/doc/README-198.html).
> 
> See [AspectJ GitHub issue #95](https://github.com/eclipse/org.aspectj/issues/95) for more information and for an example project showing how to upgrade to the latest AspectJ version when using [dev.aspectj:aspectj-maven-plugin:1.13.1](https://github.com/dev-aspectj/aspectj-maven-plugin).
> 
> Enjoy AspectJ!
> 
> The AspectJ team","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns49vIKU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,aspectj,956911065,81,Support AspectJ annotations as meta-annotations,sbrannen,104798,Sam Brannen,,OPEN,2021-07-30T16:41:20Z,2022-03-21T03:10:27Z,"Many projects in the Java ecosystem support the use of their annotations as meta-annotations (Spring Framework, JUnit 5, etc.); however, AspectJ currently does not support the use of annotations such as `@Aspect` as a meta-annotation.

AspectJ internals such as  `org.aspectj.internal.lang.reflect.AjTypeImpl.isAspect()` use standard JDK algorithms like `java.lang.Class.getAnnotation()` to find annotations; however, it would be relatively simple to modify AspectJ's annotation lookups to also find AspectJ annotations when used as meta-annotations.

See also: https://github.com/spring-projects/spring-framework/issues/27221","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41DOAC,aspectj,890036226,81,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-07-30T17:14:16Z,2021-07-30T17:14:16Z,"I think we should do that. Might be slightly wider scope though because I *think* AjTypeImpl and the reflective type infrastructure is for the load-time weaving, we would want consistency with build time weaving too. So I'm just saying other avenues through the code recognizing aspects may need to recognize the meta usage.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41DOAC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41MiON,aspectj,892478349,81,NA,quaff,143040,Yanming Zhou,zhouyanming@gmail.com,NA,2021-08-04T08:41:55Z,2021-08-04T08:41:55Z,"why not using `isAnnotationPresent` here
https://github.com/eclipse/org.aspectj/blob/67b1c353a02c335074a736ebf76a49bf24eefb19/runtime/src/main/java/org/aspectj/internal/lang/reflect/AjTypeImpl.java#L1059-L1061
 like
https://github.com/eclipse/org.aspectj/blob/67b1c353a02c335074a736ebf76a49bf24eefb19/runtime/src/main/java/org/aspectj/internal/lang/reflect/AjTypeImpl.java#L1067-L1069","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41MiON/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41Msaf,aspectj,892520095,81,NA,sbrannen,104798,Sam Brannen,,NA,2021-08-04T09:46:18Z,2021-08-04T09:46:18Z,"@quaff, `clazz.getAnnotation(annotationType) != null` is logically equivalent to `clazz.isAnnotationPresent(annotationType)`.

They both check if the annotation type is _present_ (i.e., directly present or `@Inherited`).

So switching to `isAnnotationPresent()` would simplify the current implementation, but it does not add meta-annotation support.

In order to support finding AspectJ annotations when used as meta-annotations, custom annotation search algorithms have to be implemented, similar to those in the Spring Framework and JUnit 5. However, AspectJ does not need algorithms as complicated as those in Spring and JUnit.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41Msaf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/81,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41Mv1K,aspectj,892534090,81,NA,quaff,143040,Yanming Zhou,zhouyanming@gmail.com,NA,2021-08-04T10:07:23Z,2021-08-04T10:07:23Z,"> @quaff, `clazz.getAnnotation(annotationType) != null` is logically equivalent to `clazz.isAnnotationPresent(annotationType)`.
> 
> They both check if the annotation type is _present_ (i.e., directly present or `@Inherited`).
> 
> So switching to `isAnnotationPresent()` would simplify the current implementation, but it does not add meta-annotation support.
> 
> In order to support finding AspectJ annotations when used as meta-annotations, custom annotation search algorithms have to be implemented, similar to those in the Spring Framework and JUnit 5. However, AspectJ does not need algorithms as complicated as those in Spring and JUnit.

@sbrannen , my point is the inconsistent code style in the same source file, not address this issue, thanks for your attention.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns41Mv1K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/83,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/83,aspectj,961560618,83,Stabilise flaky test in Ajc1612Tests,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2021-08-05T08:08:19Z,2022-03-21T02:49:37Z,"Test `Ajc1612Tests.testAnnotationFieldBindingOptimization_356612` comparing performance [sometimes fails](https://github.com/eclipse/org.aspectj/runs/3248846359?check_suite_focus=true#step:6:13911). The comparison is done in https://github.com/eclipse/org.aspectj/blob/cec3fc86cb886165d049ff242d7abdf7c8608e61/tests/bugs1612/pr356612/AnnoBinding.java#L12-L32

I experimented in looping 100,000 or even 1,000,000 times instead of just 10,000 times. While this clearly decreases the probability of a failing test, still failures can happen even with 1,000,000 looping rounds. When repeating that test 100x, in my very first local run I managed to make it fail after 70 rounds. The second and third times, it did not fail anymore. So for now, I can simply increase to looping 1 million times, but still this is just a probabilistic improvement. @aclement, if you have a better idea to performance-test this old [bug #356612](https://bugs.eclipse.org/bugs/show_bug.cgi?id=356612), let me know.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,aspectj,986782838,85,Among multiple aspects only last one is being applied.,ksiczek,20601713,,,CLOSED,2021-09-02T14:09:02Z,2022-03-21T02:48:33Z,"Hello guys,

I have a quite large code base with multiple projects being built by Gradle and `io.freefair.aspectj.post-compile-weaving` plugin together with aspectj 1.9.7. We organized our aspects as separate modules or libraries with the intention to include what you need. One use case is to have `@MonitoredMethod` marker on methods to add some monitoring, another one `@Cachable` to add caching etc. Quite recently I have added another aspect that aimed to collect invocations of public methods and I noticed that even though ajc says
```
Join point 'method-execution(de.telekom.phoenix.common.login.model.LoginResult de.telekom.phoenix.common.login.AuthenticationManager.processLogin(atg.servlet.DynamoHttpServletRequest, de.telekom.integration.telcobusinesssuite.RedirectUrl, de.telekom.phoenix.common.login.ATGAuthentication, de.telekom.integration.telcobusinesssuite.ITbsClient))' in Type 'de.telekom.phoenix.common.login.AuthenticationManager' (AuthenticationManager.java:86) advised by before advice from 'pl.hycom.aop.PublicMethodCollectingAspect' (DeadCodeCollector-1.1.2-SNAPSHOT.jar!PublicMethodCollectingAspect.class(from PublicMethodCollectingAspect.java))
	
Join point 'method-execution(de.telekom.phoenix.common.login.model.LoginResult de.telekom.phoenix.common.login.AuthenticationManager.processLogin(atg.servlet.DynamoHttpServletRequest, de.telekom.integration.telcobusinesssuite.RedirectUrl, de.telekom.phoenix.common.login.ATGAuthentication, de.telekom.integration.telcobusinesssuite.ITbsClient))' in Type 'de.telekom.phoenix.common.login.AuthenticationManager' (AuthenticationManager.java:86) advised by around advice from 'de.telekom.phoenix.aspect.common.PerformanceMonitorSupport' (Commons-AOP-AspectJ-RC203.20200701.1.jar!PerformanceMonitorSupport.class:19(from PerformanceMonitorSupport.aj))
``` 
only the last aspect is being applied. In the above case was the `PerformanceMonitorSupport` connected to `@MonitoredMethod`. I decompiled the code and it was 
```
@MonitoredMethod
/*     */    public LoginResult processLogin(DynamoHttpServletRequest req, RedirectUrl redirectUrl, ATGAuthentication atgAuthentication, ITbsClient tbsClient) throws LoginSecurityException {
/*     */       StaticPart var10000 = ajc$tjp_0;
/*     */       Object[] var11 = new Object[]{req, redirectUrl, atgAuthentication, tbsClient};
/*     */       JoinPoint var6 = Factory.makeJP(var10000, this, this, var11);
/*  86 */       PerformanceMonitorSupport var13 = PerformanceMonitorSupport.aspectOf();
/*     */       Object[] var12 = new Object[]{this, req, redirectUrl, atgAuthentication, tbsClient, var6};
/*     */       return (LoginResult)var13.ajc$around$de_telekom_phoenix_aspect_common_PerformanceMonitorSupport$1$5333d83b(new AjcClosure1(var12), ajc$tjp_0, var6);
/*     */    }
```
Is AspectJ designed to work that way? Can it be an issue with Gradle, or its plugin? If you feel it is a bug I could try to isolate it but I would like to have a short discussion first :) ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42WiCm,aspectj,911876262,85,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-09-02T16:51:15Z,2021-09-02T16:51:15Z,"In AspectJ, a joinpoint can be advised by multiple advice. So if you are experiencing divergent behaviour, I would definitely like to see a reproducer, ideally an [MCVE](https://stackoverflow.com/help/mcve). Just publish it on GitHub and link to it from here, then I can take a look.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42WiCm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YMJL,aspectj,912310859,85,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-09-03T07:09:36Z,2021-09-03T07:09:36Z,"I forgot to mention that for now, I think you probably rather have a configuration issue in your weaving plugin than in AspectJ, but I cannot say for sure without an example project. I also would not be surprised if, while creating the MCVE, you find out what is wrong, because this is a frequent side effect of condensing problems into MCVEs. Therefore, both of us have a chance to learn and understand something here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YMJL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YPAm,aspectj,912322598,85,NA,ksiczek,20601713,,,NA,2021-09-03T07:31:04Z,2021-09-03T07:31:04Z,"Thank you @kriegaex. I have already created an MCVE but fortunately, or not, I was not able to reproduce the issue. I have also already learned that one of my aspects that is written in Java was not compiled using `ajc` but simply `javac` so it does not contain `aspectOf()` method and I do not know really how it could work at all. Anyway, I should have started with MCVE :) I will try to figure out what is wrong with my project and will get back to you if I find anything interesting.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YPAm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YQ2g,aspectj,912330144,85,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-09-03T07:43:12Z,2021-09-03T07:43:12Z,"An aspect compiled with javac could work when used in a LTW scenario or in a post-compile binary weaving step, if picked up by ajc. Changing the setup of post-compile weaving - things like inpath, aspect path - can influence the behaviour. But as I almost expected, you learned something when creating the MCVE, because it forced you to isolate the problem and inspect your settings. I am happy that you seem to be able to help yourself. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YQ2g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YTKv,aspectj,912339631,85,NA,ksiczek,20601713,,,NA,2021-09-03T07:58:23Z,2021-09-03T07:58:23Z,"This is also interesting and mysterious to me because in MCVE I forgot to compile java aspects with `ajc` and, even though they were applied to the target class, I was getting `NoSuchMethodError...aspectOf()` in runtime. The MCVE looks like
```
|-- aspect1
|-- aspect2
|-- impl
```
where `aspect1` and `aspect2` are plain java libraries published to local maven repo and `impl` is a Gradle with `java-application` and `io.freefair.aspectj.post-compile-weaving@4.1.6` plugins. Compilation of `impl` worked fine (aspects are being applied) but during `run` I was getting the error. That is why I added `ajc` to `aspect1` and `aspect2`. It helped for the runtime error, but I think you said that it should not matter, didn't you?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YTKv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YZkL,aspectj,912365835,85,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-09-03T08:37:48Z,2021-09-03T08:37:48Z,"No, I didn't say that. Please let us not talk about your textual description of the MCVE, as we are only wasting our time, you explaining and I speculating. I cannot debug prose, I need to see your project. With Maven, I could help you quickly, because I use it all the time for my AspectJ projects. I never use Gradle. Probably I could help there, too, but I would need to reproduce the problem first.

In general, if you do not want to rely on unfinished aspects (compiled with javac only) to be finished during weaving, you should compile your aspect modules with ajc, properly finishing them. This is optional, you can also finish the aspects during weaving, but it makes things easier. I think that an aspect library should contain finished aspects and not rely on the user to take that step on behalf of the library provider.

Then, you also need ajc for every application module you wish to weave your aspects into, putting the aspect libraries on the aspect path this time.

Having said that, I am not going to answer any more questions without an MCVE. Please understand. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YZkL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YiJ3,aspectj,912401015,85,NA,ksiczek,20601713,,,NA,2021-09-03T09:32:49Z,2021-09-03T09:32:49Z,"Fair enough @kriegaex. I would appreciate it if you could have a look at https://github.com/ksiczek/org.aspectj_85 and tell me what you think about it, especially why the `NoSuchMethodError` is being thrown in that case. It does not mimic the original issue yet but it is rather simple and would help me better understand what should work, what might be a plugin issue, etc.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YiJ3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YxXq,aspectj,912463338,85,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-09-03T11:20:10Z,2021-09-03T11:20:10Z,"The MCVE helps, thank you. Because you did not follow my advice to compile the aspect modules with ajc, it is not enough to put them on the `aspect` path in the Gradle post-compile plugin configuration, because on the aspect path the compiler expects finished aspects in that case. When using unfinished aspects, better put them on the `inpath` instead (or additionally, in order to document your intent). I also recommend to define `aspectjrt` as a `runtime` dependency, because the AspectJ runtime is always needed when using compiled aspects. Your project also works without it, I am not sure why. Maybe the Freefair plugin somehow adds the dependency automatically.

The minimal change to successfully run your application is to change

```java
aspect 'pl.example.aspects:aspect1:1.0.0-SNAPSHOT'
aspect 'pl.example.aspects:aspect2:1.0.0-SNAPSHOT'
```
to

```java
inpath 'pl.example.aspects:aspect1:1.0.0-SNAPSHOT'
inpath 'pl.example.aspects:aspect2:1.0.0-SNAPSHOT'
```

Alternatively, use https://docs.freefair.io/gradle-plugins/5.0.1/reference/#_io_freefair_aspectj in your two aspect modules and leave the aspect on the aspect path. That would be the canonical solution.

Please also read more about the AspectJ compiler options in the AspectJ manual.

@aclement, please close this issue, because it is not really an AspectJ problem but simply a Gradle plugin configuration issue.

@ksiczek, in the future, please ask questions like these on StackOverflow, adding an `aspectj` tag, or on the AspectJ users mailing list. I do prefer SO, though.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42YxXq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/85,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Z_pD,aspectj,912783939,85,NA,ksiczek,20601713,,,NA,2021-09-03T20:10:12Z,2021-09-03T20:10:12Z,"Thank you @kriegaex, I learned enough to analyze the issue further on my own. I will keep in mind the point regarding SO.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns42Z_pD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/94,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/94,aspectj,1033864738,94,Special config for applying aspect to maven dependency?,MarkFullerEB,86125060,,,CLOSED,2021-10-22T18:56:17Z,2022-03-21T02:46:50Z,"Is there any sort of special configuration that needs to happen when applying an aspect to a maven dependency?
I'm trying to add an `@Around` to `@Slf4j` library whenever I call `.info(String)` or `.error(String)`. However nothing I do will call the aspect. The signature of my aspect is the following 

```java
@Aspect
@Component
public class LoggingAspect {

    @Around(""execution(* ch.qos.logback.classic.Logger.*(..))"")
    public Object prependBridgeRunId(ProceedingJoinPoint jp) throws Throwable {
```
I have other aspects working in the project so I know its not some aspectJ library issue. 
Any pointers are welcome. Thank you!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/94,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns44nmeH,aspectj,949905287,94,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-10-22T19:25:20Z,2021-10-22T19:25:20Z,"This is neither a bug report nor a feature request. It is not about AspectJ as such but about AspectJ Maven Plugin, as it seems. Please ask this kind of question on stackoverflow.com and add the `aspectj` and `aspectj-maven-plugin` tags, then I will find it. Please also provide a minimal Maven project with aspect and simple Java application, if possible. I am going to answer your question there. 

Thank you, see you on SO. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns44nmeH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,aspectj,1049563070,95,"""java.lang.VerifyError: Bad type on operand stack""  on switch case with Java 17",keiki61,39191724,,,CLOSED,2021-11-10T09:01:37Z,2022-03-21T02:45:49Z,"Hello,

I hope I'm in the right project as I am not that familiar of aspectj and its structure.

I do not know how the relation to eclipse JDT compiler is. There is a bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=576093 which is stopping me from upgrading to Java 17.
It's the same error. Maybe you already got the bugfix in place. 
I hope to see a RC2 or final version soon which has that fixed.

Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hPEQ,aspectj,965013776,95,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-10T10:53:01Z,2021-11-10T10:53:01Z,"Thanks for the information. I can confirm this problem in AspectJ 1.9.8.RC1.

> I do not know how the relation to eclipse JDT compiler is.

The AspectJ Compiler AJC is a regularly refreshed fork of the Eclipse Java Compiler ECJ, the latter being part of JDT Core. So this is simply an upstream error. Last time I merged the Java 17 support which was published for Eclipse 4.21 (2021-09), i.e. the current release. Therefore, it is no surprise that the same problem exists in AspectJ.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hPEQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hdQq,aspectj,965071914,95,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-10T12:11:15Z,2021-11-10T12:11:15Z,"I just released 1.9.8.RC2, it is already on Maven Central. Try this. There should be no more verify errors when running the program from the console or from your IDE (I tried in IntelliJ IDEA, auto-importing the Maven project):

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>AJ_Issue_GH95</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <aspectj.version>1.9.8.RC2</aspectj.version>
  </properties>

  <build>

    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <!-- IMPORTANT -->
          <useIncrementalCompilation>false</useIncrementalCompilation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>1.13.1</version>
        <configuration>
          <!--<showWeaveInfo>true</showWeaveInfo>-->
          <complianceLevel>${maven.compiler.target}</complianceLevel>
          <Xlint>ignore</Xlint>
          <encoding>${project.build.sourceEncoding}</encoding>
          <!--<verbose>true</verbose>-->
          <!--<warn>constructorName,packageDefaultMethod,deprecation,maskedCatchBlocks,unusedLocals,unusedArguments,unusedImport</warn>-->
        </configuration>
        <executions>
          <execution>
            <!-- IMPORTANT -->
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>

  </build>

  <dependencies>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${aspectj.version}</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

</project>
```

```java
package verifyerror;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class X {

  private static final Map<Z, Object> map = new HashMap<>();

  public static void main(String[] args) {
    crashNow();
  }

  static void crashNow() {
    for (Entry<Z, Object> entry : map.entrySet()) {
      switch (entry.getKey()) {
        case A:
          continue;
        default:
          break;
      }
    }
    System.out.println(""No crash if you see this"");
  }

}

enum Z {
  A, B
}
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hdQq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hdfp,aspectj,965072873,95,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-10T12:12:38Z,2021-11-10T12:12:38Z,"@aclement, I think after merging the two PRs for JDT Core and AspectJ this issue can be closed, if there is positive feedback from @keiki85.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45hdfp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/95,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45lhJ7,aspectj,966136443,95,NA,keiki61,39191724,,,NA,2021-11-11T09:20:42Z,2021-11-11T09:20:42Z,"Thank you very much for the fast reponse.

The bug was fixed with the update to RC2.

Best regards","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45lhJ7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,aspectj,1053474487,97,ajc ant task dos not support JDK16 and JDK17,urferr,12935810,urferr,,CLOSED,2021-11-15T10:20:17Z,2022-03-21T02:42:40Z,"The class org.aspectj.tools.ant.taskdefs.AjcTask contains the 2 static attributes TARGET_INPUTS and SOURCE_INPUTS containing the known JDK version strings. Unfortunately these 2 variables have not been upgraded in aspectj 1.9.7 and not in the current 1.9.8.RC2 with the result that JDK 16 and JDK 17 both are not supported when using the ant task to compile an aspect.

Because we need a gradle plugin based on ant this makes it impossible to build aspectj projects with targetCompatibility =17","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vhLJ,aspectj,968757961,97,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-15T10:39:13Z,2021-11-15T10:39:13Z,"I have never used Ant for building AspectJ projects myself, being a Maven guy. Would you please be so kind as to attach a minimal test project which I can use in order to reproduce the issue? That would speed up things. Thank you.

**Update:** Are you talking about this part? https://github.com/eclipse/org.aspectj/blob/67b1c353a02c335074a736ebf76a49bf24eefb19/taskdefs/src/main/java/org/aspectj/tools/ant/taskdefs/AjcTask.java#L253-L255

Yeah, it seems to be pretty obvious that Java 16 and 17 are missing there.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vhLJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vlvu,aspectj,968776686,97,NA,urferr,12935810,urferr,,NA,2021-11-15T11:00:04Z,2021-11-15T11:00:04Z,"Adding a test project will be hard because the gradle plugin we use is an internal one and you have no access to it.

Yes, i mean these 3 lines, everywhere ""16"", ""17"" is missing and thefore only source/targetCompatibility up to JDK 15 is supported. When i now define JDK 16 or 17 as compatibility version it takes the internal default one which i guest is JDK 1.4 and then the compiler fails whaen annotations are used because they were not supported in Java 1.4

I also guess that in the definition of COMPLIANCE_INPUTS the values should be ""-15"", ""-16"", ""-17""","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vlvu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vut1,aspectj,968813429,97,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-15T11:25:44Z,2021-11-15T11:25:44Z,"I do not need your Gradle project. I was thinking about the AspectJ project you are indirectly building with it, using the AspectJ Ant task. Just an [MCVE](https://stackoverflow.com/help/mcve) version of it to reproduce the error and verify the bugfix, not your original project.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vut1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vyrf,aspectj,968829663,97,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-15T11:46:39Z,2021-11-15T11:46:39Z,"I quickly fixed the static lists of strings and deployed a snapshot to the Sonatype OSSRH snapshot repository. Please temporarily configure your project to use AspectJ 1.9.8-SNAPSHOT and add the equivalent of this Maven setting to your Gradle build:

```xml
<repositories>
  <repository>
    <id>ossrh-snapshots</id>
    <name>Sonatype OSSRH snapshots</name>
    <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    <layout>default</layout>
    <snapshots>
      <enabled>true</enabled>
      <updatePolicy>always</updatePolicy>
    </snapshots>
    <releases>
      <enabled>true</enabled>
      <updatePolicy>never</updatePolicy>
    </releases>
  </repository>
</repositories>
```

Then you can test by yourself and I do not need the MCVE project from you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45vyrf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45v5tU,aspectj,968858452,97,NA,urferr,12935810,urferr,,NA,2021-11-15T12:22:18Z,2021-11-15T12:22:18Z,"[AspectjBug.zip](https://github.com/eclipse/org.aspectj/files/7538601/AspectjBug.zip)

This attachment contains a simple project to reproduce the problem. Currently the source and target version in the build-xml ant script are set to 17 and if you run the build target ""compile"" you get an error. The same error happens if you change source and target version to ""16"".
Everything build fine if you change soource and target to ""15"".

Hope this helps.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45v5tU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45v8Lt,aspectj,968868589,97,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-15T12:35:55Z,2021-11-15T12:35:55Z,"I can confirm that after downloading the snapshots and copying them into your `lib` directory, it works:

```none
$ ant compile
Buildfile: ...\AspectjBug\build.xml

compile:

BUILD SUCCESSFUL
Total time: 1 second

$ javap -v build/compile/ant/*.class | grep major
  major version: 61
  major version: 61
```

The class file major versions also prove that the compiled class files are really Java 17 files.

I hope you can live with the snapshot version until the next release candidate or final release.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns45v8Lt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/97,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZnBu,aspectj,979791982,97,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-26T08:46:42Z,2021-11-26T08:46:42Z,"@urferr: FYI, AspectJ 1.9.8.RC3 is available on Maven Central. It also contains the bugfix for the Ant task.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZnBu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,aspectj,1060739949,105,1.9.7 fails to add an annotation with a required attribute (works on 1.8.1),rebarbora-mckvak,63049725,,,CLOSED,2021-11-23T00:57:35Z,2023-09-28T00:18:47Z,"I have a following annotations and aspect in a library (already compiled):

```java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface BarAnnotation {
    
    // Note the attribute does not have any default value.
    String name();
}
```
```java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface FooAnnotation {
}
```
```java
public aspect FooAspect {
    declare @type:(@FooAnnotation *): @BarAnnotation(name = ""comes_from_FooAspect"");
}
```

Then I compile a source of a class in the main program (using the aspect and annotations from the library):

```java
// FooAspect is supposed to add @BarAnnotation(value = ""comes_from_FooAspect"")
@FooAnnotation
public class MyFoo {
}
```

This works using aspectj 1.8.1, but fails on 1.9.7 with the error *The annotation @BarAnnotation must define the attribute value*. Both versions of ajc do the following:

1. @BarAnnotation() is added to MyFoo - note the name attribute is missing - this is done by AjLookupEnvironment.createAnnotationFromBcelAnnotation
2. the class is compiled into bytecode- succeeds on 1.8.1, fails on 1.9.7 (the annotation is missing an attribute value)
3. AjPipeliningCompilerAdapter.afterProcessing calls queueForWeaving which ""fixes"" the annotation on 1.8.1, 1.9.7 does not call the weaver at all, because the compilation in step 2 failed.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46MMlb,aspectj,976275803,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T08:36:27Z,2021-11-23T08:36:27Z,"I cannot reproduce the problem. I compiled and ran with AspectJ 1.8.1, 1.9.7, 1.9.8.RC2, using `dev.aspectj:aspectj-maven-plugin:1.13.1`, using Java 1.8 compliance level. Can you please explain in more detail how you compiled that code?

BTW, in this comment

```java
// FooAspect is supposed to add @BarAnnotation(value = ""comes_from_FooAspect"")
@FooAnnotation
```

you probably mean `name =`, rather than `value =`, do you not?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46MMlb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Mt82,aspectj,976412470,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-23T11:13:38Z,2021-11-23T11:13:38Z,"I added a test to github:

```bash
git clone https://github.com/rebarbora-mckvak/aspectjtest.git
cd aspectjtest
export JAVA_HOME=/usr/lib/jvm/java-8-jdk
mvn clean compile
...
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] aspect-project
[INFO] aspect-lib
[INFO] aspect-prog
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-project 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-project ---
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-project ---
[WARNING] Not executing aspectJ compiler as the project is not a Java classpath-capable package
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-lib 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-lib ---
[INFO] Deleting /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ aspect-lib ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ aspect-lib ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 2 source files to /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/target/classes
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-lib ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-prog 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-prog ---
[INFO] Deleting /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ aspect-prog ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ aspect-prog ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 1 source file to /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/target/classes
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-prog ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] The annotation @BarAnnotation must define the attribute name
	/fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/src/main/java/MyFoo.java:1
(no source information available)
```
It fails using both JDK 8 and JDK 11. If you use 1.8.1 with JDK 8 (JDK 11 is probably not supported by 1.8.1), it works:

```
mvn -Daspectj.version=1.8.1 clean compile
...
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] aspect-project
[INFO] aspect-lib
[INFO] aspect-prog
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-project 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-project ---
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-project ---
[WARNING] Not executing aspectJ compiler as the project is not a Java classpath-capable package
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-lib 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-lib ---
[INFO] Deleting /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ aspect-lib ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ aspect-lib ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 2 source files to /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-lib/target/classes
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-lib ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building aspect-prog 1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ aspect-prog ---
[INFO] Deleting /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ aspect-prog ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ aspect-prog ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 1 source file to /fast/literatum/source/aspectjtest/x/aspectjtest/aspect-prog/target/classes
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14.0:compile (ajccompile) @ aspect-prog ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[INFO] 'MyFoo' (MyFoo.java:5) is annotated with @BarAnnotation(name = ""comes_from_FooAspect"") type annotation from 'foo.FooAspect' (FooAspect.aj:4)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] aspect-project ..................................... SUCCESS [  0.897 s]
[INFO] aspect-lib ......................................... SUCCESS [  1.426 s]
[INFO] aspect-prog ........................................ SUCCESS [  0.089 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Mt82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46M655,aspectj,976465529,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T12:31:03Z,2021-11-23T12:31:03Z,"Oh, I see. It does not happen if all classes are in the same module, but only if you have a multi-module situation with binary weaving, using a separate aspect library.

I found out that it works until 1.9.4 and started breaking in 1.9.5.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46M655/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NSg3,aspectj,976562231,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-23T13:48:54Z,2021-11-23T13:48:54Z,"The difference is in ASTNode.resolveAnnotations:

1.8.1:

```java
				annotation.recipient = recipient;
				// MERGECONFLICT:
//				// AspectJ Extension - don't re-resolve (pr211052)
//			    // old code:
//			    // annotationTypes[i] = annotation.resolveType(scope);
//			    // new code:
//			    annotationTypes[i] =(annotation.resolvedType==null?annotation.resolveType(scope):annotation.resolvedType);
//			    // End AspectJ Extension
				if (annotation.resolvedType==null) 
				annotation.resolveType(scope);
				// null if receiver is a package binding
				if (annotations != null) {
					annotations[i] = annotation.getCompilerAnnotation();
				}
```

1.9.7:

```java
				annotation.recipient = recipient;
				annotation.resolveType(scope);
				// null if receiver is a package binding
				if (annotations != null) {
					annotations[i] = annotation.getCompilerAnnotation();
				}
```
The older version does not call annotation.resolveType() - which in turn checks attributes and fails.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NSg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NV27,aspectj,976575931,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T13:59:19Z,2021-11-23T13:59:19Z,"@aclement, can you please comment on the above finding and determine whether it is a bug and ought to be reverted or not? That old merge conflict in the comment was before my time as an AspectJ contributor, and so was AspectJ 1.9.5.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NV27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NXg3,aspectj,976582711,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T14:04:33Z,2021-11-23T14:04:33Z,"~~@rebarbora-mckvak, I analysed your Maven module setup and found that `FooAnnotation` is defined in the aspect library, but used in the program module. That means, you explicitly reference something from a library your main application ideally should be oblivious of in your code. While that is not forbidden technically, I had the idea to create a separate module containing `FooAnnotation`, which is used as a dependency by both the aspect library and the application module. Now, with clear separation of concerns, the project compiles and works fine. `BarAnnotation` (which I left in the aspect module, because it is only used there) is introduced correctly into `MyFoo`. If you would use `BarAnnotation` from the application module as well, you would also move it into the annotation module.~~

So you have ~~two~~ one possible workaround for now:
  * ~~Factor out the annotation used by both modules into a separate module, as explained above.~~
  * If you use Java compliance level <= 12, use AspectJ 1.9.4 for the moment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NXg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NoBL,aspectj,976650315,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T14:43:53Z,2021-11-23T14:43:53Z,"> The difference is in ASTNode.resolveAnnotations:

Well, but the behaviour changed between 1.9.4 and 1.9.5, and `ASTNode` did not change in that release cycle, as you can see in the [V1_9_4...V1_9_5 diff](https://github.com/eclipse/org.aspectj/compare/V1_9_4...V1_9_5). Therefore, the root cause must be something different.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46NoBL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Oe8O,aspectj,976875278,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-23T17:17:07Z,2021-11-23T17:17:07Z,"> Now, with clear separation of concerns, the project compiles and works fine. 

@kriegaex, it does not work. The only reason why it works for you is because you added default value to that attribute.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Oe8O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OiOC,aspectj,976888706,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T17:27:04Z,2021-11-23T17:27:04Z,"> it does not work. The only reason why it works for you is because you added default value to that attribute.

Yes, you are right. I accidentally forgot to revert a temporary change and thought that restructuring the modules would solve the problem. I apologise for making a false statement.

So the only current workaround is to use AspectJ 1.9.4 or older.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OiOC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OmS8,aspectj,976905404,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-23T17:35:24Z,2021-11-23T17:35:24Z,"That is al right, I will try to look at 1.9.4 and compare it with the latest version.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OmS8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OyLx,aspectj,976954097,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-23T18:06:57Z,2021-11-23T18:06:57Z,"Oh, OK, now I see that the source code you pasted above was not actually from AspectJ itself but from the JDT Core fork used as a dependency of AspectJ. You did not mention that, so I searched through the wrong project's diff. That one of course has changed before the 1.9.5 release. More precisely, before 1.9.7 the modified JDT Core used to be committed as binary JAR and source ZIP archives right into AspectJ, see commit https://github.com/eclipse/org.aspectj/commit/2704db20ecca12d3bbe514a4f7b84d297937de86. I changed this for 1.9.7 and made it a regular Maven dependency.

The commit in the old `org.aspectj.shadows` repository which changed the source code area you were hinting at is [this one](https://git.eclipse.org/c/aspectj/org.aspectj.shadows.git/diff/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java?h=aj_19&id=9dc0d904ee04d79dc40d2fd7b758c7b9e8a4b822). I just found it in the legacy Git repository. OK, so chances are that reverting the removal of that line of code might actually fix this problem. I have, however, no idea if it might break anything else. I could just build the JDT Core fork and run the AspectJ test suite when depending on it. But that alone would not give me confidence that we are doing the right thing. I still would like to get @aclement's opinion.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46OyLx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46O8nd,aspectj,976996829,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-23T18:39:52Z,2021-11-23T18:39:52Z,"> if it might break anything else.

Yeah, I know the feeling ;-). Thanks for looking at it either way. I will try 1.9.4 for now since we target jdk 11.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46O8nd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Rg3n,aspectj,977669607,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-24T09:00:36Z,2021-11-24T09:00:36Z,"> @aclement, can you please comment on the above finding and determine whether it is a bug and ought to be reverted or not? That old merge conflict in the comment was before my time as an AspectJ contributor, and so was AspectJ 1.9.5.

@aclement, please take a look at JDT Core. In class `org.eclipse.jdt.internal.compiler.ast.ASTNode`, I experimentally reverted the removal of `if (annotation.resolvedType == null)` you did for 1.9.5, but it has no effect on the test case. The same error still occurs. So this piece of code is not the problem or only part of it.

I have added a test case to the AspectJ 1.9.8 test suite, almost identical to the code above. It fails with both JDT Core 1.9.8.RC2 and a local version 1.9.8.RC3 with the change. When the bug is fixed, it should pass, however.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46Rg3n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZWcS,aspectj,979724050,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-26T06:21:51Z,2021-11-26T06:21:51Z,"> In class `org.eclipse.jdt.internal.compiler.ast.ASTNode`, I experimentally reverted the removal of `if (annotation.resolvedType == null)` you did for 1.9.5, but it has no effect on the test case. The same error still occurs.

Good news: I just retested this, and now JDT Core 1.9.8.RC3 fixes the problem while 1.9.8.RC2 does not. For some reason, during my first test somehow the IDE must have missed to pick up the updated dependency version in my POM. Now I am just hoping that the change does not break any other tests. I am going to deploy a JDT Core snapshot to OSSRH first, then run a GitHub CI build against it. If (and only if) it is green, I am going to deploy 1.9.8.RC3 versions of both JDT Core and AspectJ on Maven Central. Stay tuned.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZWcS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZnMc,aspectj,979792668,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-26T08:47:51Z,2021-11-26T08:47:51Z,"AspectJ 1.9.8.RC3 is available on Maven Central. It should fix your problem, please re-test. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46ZnMc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46hgBh,aspectj,981860449,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-29T17:37:13Z,2021-11-29T17:37:13Z,"@rebarbora-mckvak, I would appreciate some feedback. I tried to fix this problem ASAP and do appreciate your initial pointers about the potential root cause. So let us get this off the table, shall we? 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46hgBh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iLBT,aspectj,982036563,105,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2021-11-29T21:24:36Z,2021-11-29T21:24:36Z,Glad you got to the bottom of that. Annotation resolution in JDT can trip up with the way AspectJ stretches things (with features like `declare @`) - it is not uncommon to need guards like this. It is a shame we didn't have a test earlier that verified the need.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iLBT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iLZ1,aspectj,982038133,105,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2021-11-29T21:26:41Z,2021-11-29T21:26:41Z,"> Glad you got to the bottom of that.

Great detective work by @rebarbora-mckvak. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iLZ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/105,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iWf7,aspectj,982083579,105,NA,rebarbora-mckvak,63049725,,,NA,2021-11-29T22:31:13Z,2021-11-29T22:31:13Z,"It seems to work correctly, I will try to compile the real project with 1.9.8.RC3 ASAP and let you know. Our aspect adds some Hibernate's caching-related annotations. One of those, @Cache has mandatory `usage` attribute and caused problems.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns46iWf7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/115,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/115,aspectj,1106357702,115,Annotation style syntax not behaving like docs describe for if(),aclement,226298,Andy Clement,aclement@vmware.com,CLOSED,2022-01-18T00:19:09Z,2022-03-21T02:40:47Z,"Here https://www.eclipse.org/aspectj/doc/released/adk15notebook/ataspectj-pcadvice.html it says 

```
The special forms if(true) and if(false) can be used in a more general way and don't imply that 
the pointcut method must have a body. You can thus write @Before(""somePoincut() && if(false)"") .
```

But you can't, it won't compile. It looks like the validator for annotation style was not finished to cover the special cases","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/115,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gCxU,aspectj,1015032916,115,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-18T03:10:19Z,2022-01-18T03:10:19Z,"Cool! I noticed that before a while ago, but forgot to inquire about it or mention it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gCxU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,aspectj,1106445635,117,Enable LTW in JDK 16+ without `--add-opens`,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-01-18T03:47:55Z,2024-02-09T06:53:35Z,"Since 1.9.7, the AspectJ release notes say:

> ### Use LTW on Java 16+
> Please note that if you want to use load-time weaving on Java 16+, the weaving agent collides with [JEP 396 (Strongly Encapsulate JDK Internals by Default)](https://openjdk.java.net/jeps/396). Therefore, you need to set the JVM parameter `--add-opens java.base/java.lang=ALL-UNNAMED` in order to enable aspect weaving. This is due to the fact that the weaver uses internal APIs for which we have not found an adequate replacement yet when defining classes in different classloaders.

@aclement, do you have any ideas how to solve this?

See also:
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=546305
  * https://bugs.openjdk.java.net/browse/JDK-8200559

Maybe taking a look at how other tools like Byte Buddy or Javassist try to define classes in other class-loaders can be helpful, e.g. https://github.com/jboss-javassist/javassist/blob/master/src/main/javassist/util/proxy/DefineClassHelper.java.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gQmW,aspectj,1015089558,117,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-18T05:44:50Z,2022-01-18T05:44:50Z,"> @aclement, do you have any ideas how to solve this?

nope.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48gQmW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vi8GM,aspectj,1435222412,117,NA,KillerJmc,57487468,,,NA,2023-02-17T20:19:41Z,2023-02-17T20:19:41Z,This is a big issue. I don't want to write this to my vm option.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vi8GM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vkmqo,aspectj,1435658920,117,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-18T12:28:15Z,2023-02-18T12:28:15Z,"> I don't want to write this to my vm option.

@KillerJmc, nobody does. But it is necessary. Feel free to either complain to the OpenJDK team, to suggest a technically viable strategy to solve the problem or provide a pull request. Alternatively, use compile-time instead of load-time weaving.

Hi @mlchung, is [JDK-8200559](https://bugs.openjdk.org/browse/JDK-8200559) still scheduled to be fixed in JDK 21? If so, can you please elaborate on how we could in the future use the corresponding new JDK feature? You were talking about this issue with AspectJ project lead @aclement before in [Bugzilla 546305](https://bugs.eclipse.org/bugs/show_bug.cgi?id=546305). This is still a major issue for byte code engineering tools such as Byte Buddy or AspectJ.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vkmqo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5yEeXw,aspectj,1913775600,117,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-01-29T00:17:06Z,2024-01-29T00:17:06Z,"We finally have a solution for this, and I am actually a little bit proud of the achievement, even though part of the credit goes to Byte Buddy, where I found something to adapt into AspectJ, but using ASM directly instead (which is also used under the hood in BB, even though not so visible in the code there). The relevant code sections in `ClassLoaderWeavingAdaptor` were overhauled and streamlined.

What I am not proud of is that we still need `Unsafe`. But [JDK-8200559](https://bugs.openjdk.org/browse/JDK-8200559) is still open and unsolved since 2018, going on 6 years now. I kicked off some new discussion on GitHub in a related PR, which also led to new mailing list discussion triggered by Rafael Winterhalter (author of Byte Buddy). The solution he originally devised in his PR would have been simple to adapt by AspectJ. The one he suggests now is much more complicated to satisfy module security concerns by the JDK team. I think, it would be quite a nightmare for us to adapt, but on top of that the present solution would still stay in AspectJ for a long time, because the existing JDKs do not have that hypothetical new API.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5yEeXw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5yEeuh,aspectj,1913777057,117,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-01-29T00:20:07Z,2024-01-29T00:20:07Z,"@aclement, what I have no idea about is whether LTW used to work on GraalVM (never tried using it) before and, if so, it would still work after this change. Maybe you or one of your team mates could verify this. It might have an impact on Spring Native too, I have no idea.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5yEeuh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zW_1Q,aspectj,1935408464,117,NA,KillerJmc,57487468,,,NA,2024-02-09T06:39:06Z,2024-02-09T06:39:06Z,**Wow! Awesome! Please notify me when the new version is released.**,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zW_1Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/117,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zXBxW,aspectj,1935416406,117,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-09T06:49:33Z,2024-02-09T06:49:33Z,"You should not expect me to personally notify you of a new release. I already send notifications to the AspectJ users and announcements mailing lists, and you can easily subscribe to GitHub releases using the ""Watch"" button and then customise the notifications of your choice.

![image](https://github.com/eclipse-aspectj/aspectj/assets/1537384/c994149f-c29a-4c69-82e4-f9472240f1f7)
---
![image](https://github.com/eclipse-aspectj/aspectj/assets/1537384/5803fd66-6e32-4fea-9d98-20274b42b8e7)

Please also refrain from needless full quotes. I just edited your post. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zXBxW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118,aspectj,1110062344,118,Compilation in multi-module mode (--module-source-path) not working,kriegaex,1537384,Alexander Kriegisch,,OPEN,2022-01-21T05:07:34Z,2022-03-21T03:08:27Z,"Using the `--module-source-path` compiler switch always results in AJC core dumps like [ajcore.20220121.082827.213.txt](https://github.com/eclipse/org.aspectj/files/7910087/ajcore.20220121.082827.213.txt):

```text
java.lang.NullPointerException: Cannot load from object array because ""this.modNames"" is null
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main.handleModuleSourcepath(Main.java:3741)
	at org.aspectj.ajdt.ajc.BuildArgParser.populateBuildConfig(BuildArgParser.java:203)
	at org.aspectj.ajdt.ajc.BuildArgParser.genBuildConfig(BuildArgParser.java:108)
	at org.aspectj.ajdt.ajc.AjdtCommand.genBuildConfig(AjdtCommand.java:136)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:86)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
	at org.aspectj.tools.ajc.Main.run(Main.java:374)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
	at org.aspectj.tools.ajc.Main.main(Main.java:84)
```

When testing the latest [ECJ 3.28.0 stand-alone](https://search.maven.org/artifact/org.eclipse.jdt/ecj/3.28.0/jar) in comparison with Javac, I also found out that
  * ECJ supports multi-module compilation, so AJC could in principle too,
  * but it looks like the neat `*` module name joker feature for more complicated directory layouts like `--module-source-path ""./modules/*/src""` only works in Javac, not in ECJ. I just created [JDT Core bug #578306](https://bugs.eclipse.org/bugs/show_bug.cgi?id=578306) for that.

What I also noticed is that for AJC, I always have to put `aspectjrt.jar` both on the class-path and the module-path, which feels kind of redundant. In Javac, I do not have to do that when compiling @AspectJ aspects. (Of course, that creates unfinished aspects.)

References:
  * [Project Jigsaw: Module System Quick-Start Guide](https://openjdk.java.net/projects/jigsaw/quick-start#multimodulecompile)
  * [Stack Overflow post describing how to use `*` patterns in multi-module directory names](https://stackoverflow.com/a/53106739/1082681)
  * [Stack Overflow question asking about AJC `--module-source-path` support](https://stackoverflow.com/q/70769899/1082681)
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48sNV2,aspectj,1018221942,118,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-21T06:33:05Z,2022-01-21T06:33:05Z,"Another thing is that AJC has the very comfortable `-sourceroots` option, but no counterpart for (multi) modules, such as  `-modulesourceroots` or `--module-source-roots`. It would be great for users to have an option which unburdens them from having to specify each single file to be compiled, but let the compiler find the files, just like we do it for normal source directories.

See #119.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48sNV2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48uGEn,aspectj,1018716455,118,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-01-21T17:29:35Z,2022-01-21T17:29:35Z,"I think I'd make it separate unless you found codepaths overlapping and could fix the latter whilst doing the former. I still haven't met a person who uses java modules, but I guess they do exist :) ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48uGEn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/118,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48vX8k,aspectj,1019051812,118,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-22T04:54:51Z,2022-01-22T04:54:51Z,"If anyone needs something to play with, here is an [example project ZIP](https://github.com/eclipse/org.aspectj/files/7917658/SO_AJ_ModuleSourcePath_70769899.zip) with two modules, both using AspectJ annotation-based aspects in *.java files (not *.aj). This enables the modules to also be compiled with Javac or ECJ, even though in those cases of course no aspects are woven and the example just runs without AOP.

There is a module `org.acme.first` and another one `org.acme.second`, accessing class from an exported package of the first module. It also tries to access non-exported code, which fails as expected unless compiling for Java 8 or using `--add-opens`.

The example archive also contains two Bash scripts,
  * one compiling with AJC in a two-step process, building each module separately directly into corresponding JARs and
  * another one compiling with Javac, making use of `--module-source-path ""./*/src"" -m org.acme.first,org.acme.second`, i.e. building both modules with a single compiler call. Javac compiles into the `bin` directory in order not to overwrite any compilation results of the AJC version.

Both scripts also run the application after compilation. Commented out are run commands using `--add-opens` in order to show how to overcome JMS restrictions when trying to access non-exported packages.

The scripts run in Git Bash on my Windows 10 system. You might need to adjust tool/library paths and path separators (`;` → `:`) when trying to run them on your system, maybe on a unix-oid OS. But that should non-trivial changes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48vX8k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/119,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/119,aspectj,1111127023,119,"Implement '-m, --module' options from Javac",kriegaex,1537384,Alexander Kriegisch,,OPEN,2022-01-22T00:41:01Z,2025-01-09T09:25:15Z,"AJC has the very comfortable `-sourceroots` option, but no counterpart for (multi) modules, such as  `-modulesourceroots` or `--module-source-roots`. It would be great for users to have an option which unburdens them from having to specify each single file to be compiled, but let the compiler find the files, just like we do it for normal source directories.

Actually, Javac has this option:

```text
--module <module>(,<module>)*, -m <module>(,<module>)*
      Compile only the specified module(s), check timestamps
```

It works like this (added line breaks for readability):
```text
javac
  --release 11
  -d bin
  --module-path ""c:\Program Files\Java\AspectJ\lib\aspectjrt.jar""
  --module-source-path ""modules/*/src""
  --module org.acme.first,org.acme.second
```

But the `--module, -m` options do not exist in ECJ and therefore AJC cannot utilise them either. I have just created [JDT Core bug #578320](https://bugs.eclipse.org/bugs/show_bug.cgi?id=578320), which we can track. Update: Bugzilla bug cloned to https://github.com/eclipse-jdt/eclipse.jdt.core/issues/3541.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/119,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48vYCA,aspectj,1019052160,119,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-01-22T04:56:06Z,2022-01-22T04:56:06Z,"See https://github.com/eclipse/org.aspectj/issues/118#issuecomment-1019051812 and the linked ZIP archive, if you need an example project with two modules to play with.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns48vYCA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/120,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/120,aspectj,1117030584,120,address annotation style if() pointcut binding restrictions that don't affect code style,aclement,226298,Andy Clement,aclement@vmware.com,CLOSED,2022-01-28T05:56:42Z,2022-03-21T02:40:32Z,"annotation style binding is not great when `if()` pointcuts are involved. There is a compiler limitation that requires reference pointcuts to always bind variables that are used in `if()` pointcut support methods. This does not work:

```
@Aspect class Azpect {
  @Pointcut(""this(f) && if()"") public static boolean method(Foo f) { return f.isTrue();}
  @Before(""method(*) && execution(* *.run(..))"") public void beforeAdvice() {}
}
```

You are forced to bind o in the method `beforeAdvice()` - code style does not have this restriction. Compiling the above will give something like:
```
Missing binding for if() pointcut method (method).  Parameter 1 (D d) must be bound - even in reference pointcuts  (compiler limitation)
```

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/120/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/122,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/122,aspectj,1120032262,122,negating an if() with annotation style doesn't work,aclement,226298,Andy Clement,aclement@vmware.com,CLOSED,2022-01-31T23:11:18Z,2022-03-21T02:40:21Z,"Quite surprised by this. This aspect works as expected:

```
@Aspect class Azpect {
	@Pointcut(""bar()"") public static void foo() {}
	@Pointcut(""if()"") public static boolean bar() { return true; }
	@Before(""foo() && execution(* E.run(..))"") public void beforeAdvice() {
		System.out.println(""advice running"");
	}
}
```

Inverting the if() return value and switching it to !bar():
```
@Aspect class Azpect {
	@Pointcut(""!bar()"") public static void foo() {}
	@Pointcut(""if()"") public static boolean bar() { return false; }
	@Before(""foo() && execution(* E.run(..))"") public void beforeAdvice() {
		System.out.println(""advice running"");
	}
}
```
and it doesn't work any more.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/122/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/124,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/124,aspectj,1144309984,124,Aspectj 1.9.8 is not backward compatible with JDK 8 - java.lang.UnsupportedClassVersionError: org/eclipse/core/runtime/OperationCanceledException,rohitgaikwad09,15211056,,rohitgaikwad0907@gmail.com,CLOSED,2022-02-19T04:06:54Z,2022-03-21T02:39:31Z,"Hi Team,

The backward compatibility below issue with JDK 8 occurs only with 1.9.8 version of AspectJ. 

**Steps to reproduce the issue:**
**1)** Set JDK-8 and verify JDK-8 version in cmd.exe.
**2)** Download aspectjtools.jar from maven.
**2)** execute command -> `java -cp aspectjtools.jar org.aspectj.tools.ajc.Main -g -d .`

**Exception stack:**
`D:\new-1.9.8\lib>java -cp aspectjtools.jar org.aspectj.tools.ajc.Main -g -d .`
` Exception in thread ""main"" java.lang.UnsupportedClassVersionError:
  org/eclipse/core/runtime/OperationCanceledException has been compiled by a more recent version of 
  the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file 
  versions up to 52.0`
        `at java.lang.ClassLoader.defineClass1(Native Method)`
        `at java.lang.ClassLoader.defineClass(Unknown Source)`
        `at java.security.SecureClassLoader.defineClass(Unknown Source)`
        `at java.net.URLClassLoader.defineClass(Unknown Source)`
        `at java.net.URLClassLoader.access$100(Unknown Source)`
        `at java.net.URLClassLoader$1.run(Unknown Source)`
        `at java.net.URLClassLoader$1.run(Unknown Source)`
        `at java.security.AccessController.doPrivileged(Native Method)`
        `at java.net.URLClassLoader.findClass(Unknown Source)`
        `at java.lang.ClassLoader.loadClass(Unknown Source)`
        `at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)`
        `at java.lang.ClassLoader.loadClass(Unknown Source)`
        `at org.aspectj.tools.ajc.Main.runMain(Main.java:230)`
        `at org.aspectj.tools.ajc.Main.main(Main.java:84)`

`D:\new-1.9.8\lib>java -version`
`java version ""1.8.0_301""`
`Java(TM) SE Runtime Environment (build 1.8.0_301-b25)`
`Java HotSpot(TM) 64-Bit Server VM (build 25.301-b25, mixed mode)`

**Note:** 

1. The above command does not results into java version compatibility related error with JDK-11 and AspectJ 1.9.**8**.  
2. The above command does not results into java version compatibility related error with JDK-8 and AspectJ 1.9.**7**.

As the class is compiled with Java 11, there is no workaround to use it with Java 8.
Can someone please take a look into this?

Thanks,
            --Rohit","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/124,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-VMzu,aspectj,1045744878,124,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-19T04:39:25Z,2022-02-19T04:39:25Z,"Please refer to the [AspectJ 1.9.8 release notes](https://htmlpreview.github.io/?https://github.com/kriegaex/org.aspectj/blob/4b9d86acd096e5ee9e108ff0a450c420c880b6ea/docs/dist/doc/README-198.html), section ""Other changes and bug fixes"":

> The AspectJ compiler `ajc` (contained in the `aspectjtools` library) no longer works on JDKs 8 to 10. The minimum compile-time requirement is now JDK 11 due to upstream changes in the Eclipse Java Compiler (subset of JDT Core), which AspectJ is a fork of. You can still compile to legacy target versions as low as Java 1.3 when compiling plain Java code or using plain Java ITD constructs which do not require the AspectJ runtime `aspectjrt`, but the compiler itself needs JDK 11+. Just like in previous AspectJ versions, both the runtime `aspectjrt` and the load-time weaver `aspectjweaver` still only require JRE 8+.

Having said that, please understand that in order to run your compiled AspectJ application, you simply need `aspectjrt` on the classpath, not `aspectjtools`. The latter is only needed during build time. So you you can relax: Just compile your aspects on Java 11+, but then happily run them on Java 8. Or if you use LTW in combination with annotation-style aspects, you can compile everything with `javac` (also on JDK 8, if you like) and then finish the aspects with `aspectjweaver`.

@aclement, this issue can be closed as invalid.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-VMzu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,aspectj,1144660675,125,AJC throws NPE when number of classpath entries is over the limit,raimondas67,100023594,,,CLOSED,2022-02-19T11:08:03Z,2022-03-21T02:40:03Z,"1. Java 11 (AdoptOpenJDK jdk-11.0.10.9-hotspot)
2. aspectj-maven-plugin v1.14
3. aspectjtools v1.9.7
4. pom.xml snippet
<plugin>
   <groupId>org.codehaus.mojo</groupId>
   <artifactId>aspectj-maven-plugin</artifactId>
   <version>1.14</version>
   <configuration>
      <complianceLevel>11</complianceLevel>
      <source>11</source>
      <target>11</target>
      <showWeaveInfo>true</showWeaveInfo>
      <verbose>true</verbose>
      <aspectLibraries>
         <aspectLibrary>
            <groupId>xxx.xxx.xxx</groupId>
            <artifactId>xxx-aspects</artifactId>
         </aspectLibrary>
      </aspectLibraries>
      <includes>
         <include>**/*.aj</include>
         <include>**/*.class</include>
      </includes>
      <Xlint>cantFindType=ignore</Xlint>
      <weaveDirectories>
         <weaveDirectory>${project.build.directory}/classesToWeav</weaveDirectory>
      </weaveDirectories>
   </configuration>
   <executions>
      <execution>
         <!-- Compile and weave aspects after all classes compiled by javac -->
         <phase>process-classes</phase>
         <goals>
            <goal>compile</goal>
         </goals>
      </execution>
   </executions>
         <dependencies>
      <dependency>
         <groupId>org.aspectj</groupId>
         <artifactId>aspectjtools</artifactId>
         <version>1.9.7<version>
         <scope>compile</scope>
      </dependency>
   </dependencies>
</plugin>
 
5. Stack trace:
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.14.0:compile (default) on project xxx: AJC compiler errors:
[ERROR] abort ABORT -- (NullPointerException) null
[ERROR] null
[ERROR] java.lang.NullPointerException
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJmod.getModulesDeclaringPackage(ClasspathJmod.java:146)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:184)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJmod.findClass(ClasspathJmod.java:55)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:544)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:464)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:617)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:101)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.StatefulNameEnvironment.findType(StatefulNameEnvironment.java:101)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPlainPackage(LookupEnvironment.java:1151)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:136)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:487)
[ERROR]         at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildTypeBindings(AjLookupEnvironment.java:1471)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:870)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:395)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:449)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1096)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR]         at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR]         at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR]         at org.aspectj.tools.ajc.Main.run(Main.java:372)
[ERROR]         at org.aspectj.tools.ajc.Main.runMain(Main.java:250)
[ERROR]         at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
[ERROR]         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
[ERROR]         at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
[ERROR]         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
[ERROR]         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
[ERROR]         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
[ERROR]         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:956)
[ERROR]         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
[ERROR]         at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[ERROR]

The problem is that ClasspathJmod objects for JMOD files have zipFile=null
 
![image](https://user-images.githubusercontent.com/100023594/154798321-3b1299ba-7d93-4205-9604-f60ef717e76a.png)

Problem can be solved by providing system property -Dorg.aspectj.weaver.openarchives=2000 when running maven build. It turns out due to big number of classpath entries some of these entries are closed during processing:
 
org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJar
 
// AspectJ Extension
private void ensureOpen() throws IOException { //line 403
    if (zipFile != null) return; // If its not null, the zip is already open
    if (openArchives.size()>=maxOpenArchives) {
        closeSomeArchives(openArchives.size()/10); // Close 10% of those open <-- closed and likely not re-initialized so that zipFile remains null
    }
    zipFile = new ZipFile(file);
    openArchives.add(this);
}
 

 ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-bafj,aspectj,1047373795,125,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-02-22T02:47:09Z,2022-02-22T02:47:09Z,The fix here seems relatively straightforward I suspect. The Java Module support added in Java9 probably added new routes that are attempting to access the zipFile object. We should look at those routes and check if they are guarded by a call to `ensureOpen()` - if they are not then it should be added.  Basically all attempts to access that zipFile field need to be guarded in case it has been closed due to too many archives being simultaneously open.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-bafj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-f5l9,aspectj,1048549757,125,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-23T08:35:28Z,2022-02-23T08:35:28Z,"I have done quick local fix, adding `ensureOpen()` to several routes where theoretically there could be access to a closed jar/zip file. This fixes the problem for me in the test scenario I described on the mailing list, i.e. compilation of a simple class with `-Dorg.aspectj.weaver.openarchives=20`, which would otherwise always fail of the (too) small number of open archives. I am going to analyse if maybe I can remove snippet from a few routes where it is done multiple times, but I think better safe than sorry. I also had to make `ensureOpen()` protected to be able to call it from a subclass where it was necessary. I simply added this to most places, ...

```java
// AspectJ Extension
try {
  ensureOpen();
}
catch (IOException e) {
  throw new RuntimeException(e);
}
// End AspectJ Extension
```

... rather than catching the error and logging it or returning `null` or `false`. I think we want compilation to fail if an error happens in that method, don't we, @aclement? In some places I saw that we return values instead or just fold the `ensureOpen()` call into an existing try-catch block. WDYT?

---

**Update:** Andy, shouldn't [this](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/f2da52b87cdc30c1e126d5f1b869bacea7e99afb/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java#L73) be a set rather than a list?

```java
private static List openArchives = new ArrayList();
```

There seems to be the danger of duplicated entries there, especially if `ensureOpen()` is called from many places and looks like [this](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/f2da52b87cdc30c1e126d5f1b869bacea7e99afb/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java#L403-L410)?

```java
private void ensureOpen() throws IOException {
	if (zipFile != null) return; // If its not null, the zip is already open
	if (openArchives.size()>=maxOpenArchives) {
		closeSomeArchives(openArchives.size()/10); // Close 10% of those open
	}
	zipFile = new ZipFile(file);
	openArchives.add(this);
}
```

If `zipFile != null`, it will be added to the list unconditionally, which looks like it will not just bloat the list, but also make it inconsistent.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-f5l9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-gCNL,aspectj,1048585035,125,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-23T09:22:20Z,2022-02-23T09:22:20Z,"@raimondas67, I deployed an AspectJ `1.9.9-SNAPSHOT` to Sonatype OSSRH. Please test if your problem goes away without `-Dorg.aspectj.weaver.openarchives=2000` and maybe even try to stress-test the situation more by setting a lower limit. I know, it is probably going to make compilation slower, but try to experiment first without the setting (defaults to 1000), then with 500, 250, 100 or even 50, if it still continues to work like that. I just want to know if the error is gone.

See https://github.com/eclipse/org.aspectj/issues/95#issuecomment-965071914 for an example project showing how to upgrade to the latest AspectJ version when using [dev.aspectj:aspectj-maven-plugin:1.13.1](https://github.com/dev-aspectj/aspectj-maven-plugin). Just make sure to set the `aspectjtools` snapshot as a plugin dependency.

As for your second problem from the mailing list, I think you still have not created an issue for it. Can you help us to reproduce it?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-gCNL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-hJsB,aspectj,1048877825,125,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-23T15:04:00Z,2022-02-23T15:04:00Z,"@aclement, I inspected the existing logic and think it is safe to continue using the list instead of a set, mainly because it is more predictable and chronological which classpath JARs get closed on cache exhaustion (first in, first out). We would have to use a sorted set or map with a sortable timestamp or so as the key, which would entail more changes than I want to implement now. But I think I was pretty thorough with where to put the safeguards, my checks also encompassing subclasses. I think that for now we are OK, at least no worse than before. If @raimondas67 also re-tests successfully, I think the two PRs for JDT Core and AspectJ are ready to be reviewed and merged, whenever you have cycles to look into them.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-hJsB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-jMWt,aspectj,1049413037,125,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-24T01:49:12Z,2022-02-24T01:49:12Z,"For the record: In addition to the regression test I added, which always runs with `-Dorg.aspectj.weaver.openarchives=20`, I also pushed a private branch with [commit eab7758](https://github.com/kriegaex/org.aspectj/commit/eab77587e6916bd994f1b56beb2736583aefa838?diff=unified), resulting in the full build with hundreds of tests doing AJC compilation also with `-Dorg.aspectj.weaver.openarchives=20`. The [build passed](https://github.com/kriegaex/org.aspectj/actions/runs/1890493915). Because old builds will eventually be deleted on GitHub, here is a screenshot:

![image](https://user-images.githubusercontent.com/1537384/155441755-379378df-6157-4c28-8624-af273269c98d.png)
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-jMWt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-j-oa,aspectj,1049618970,125,NA,raimondas67,100023594,,,NA,2022-02-24T08:43:30Z,2022-02-24T08:43:30Z,"Hi,

Classpath related NPE exception is fixed with this 1.9.9-SNAPSHOT release, however, I’m still getting the same AJC compiler error

[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.14.0:compile (default) on project xxx-app: AJC compiler errors:
[ERROR] error at (no source information available)
[ERROR] C:\Users\....aj:0::0 Type java.lang.Object is indirectly referenced from required .class files but cannot be resolved since the declaring package java.lang exported from module java.base conflicts with a package accessible from module <unnamed>

thus 1.9.4 has to be used.

Regards

From: Alexander Kriegisch 
Sent: Wednesday, February 23, 2022 5:04 PM
To: eclipse/org.aspectj 
Cc: raimondas67 ; Mention 
Subject: Re: [eclipse/org.aspectj] AJC throws NPE when number of classpath entries is over the limit (Issue #125)

@aclement, I inspected the existing logic and think it is safe to continue using the list instead of a set, mainly because it is more predictable and chronological which classpath JARs get closed on cache exhaustion (first in, first out). We would have to use a sorted set or map with a sortable timestamp or so as the key, which would entail more changes than I want to implement now. But I think I was pretty thorough with where to put the safeguards, my checks also encompassing subclasses. I think that for now we are OK, at least no worse than before. If @raimondas67 also re-tests successfully, I think the two PRs for JDT Core and AspectJ are ready to be reviewed and merged, whenever you have cycles to look into them.

—
Reply to this email directly, view it on GitHub, or unsubscribe.
Triage notifications on the go with GitHub Mobile for iOS or Android. 
You are receiving this because you were mentioned.Message ID: ***@***.***>
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-j-oa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/125,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-kLtJ,aspectj,1049672521,125,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-24T09:48:10Z,2022-02-24T09:48:10Z,"@raimondas67, please try not to use full quotes. You could also edit the issue description, using code blocks for better formatting. 

> Classpath related NPE exception is fixed with this 1.9.9-SNAPSHOT release

Thanks for the feedback, good news. 🙂

> however, I’m still getting the same AJC compiler error

Yes, of course. I did not fix it, having too little information to reproduce it. I never thought that the two issues were related anyway, which is why I already asked you twice to create an extra issue with more information for the second issue. Thanks in advance. 
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-kLtJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,aspectj,1150095939,128,"Two Aspect Class,two around,get emptystack error",walt2021,86177693,,,CLOSED,2022-02-25T06:34:45Z,2022-03-23T08:39:14Z,"_Edited by @kriegaex_

When i use the code , i get the error（aspectj is 1.9.6）
```text
java.util.EmptyStackEcxeption
    at java.util.Stack.peek(Stack.java:102)
    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:180)
    .....run()
```

However，i use 1.9.1，it is ok
I need help,thank you.

```java
@Aspect
@DeclarePrecedence(BB,AA)
public class AA{
    @Pointcut
    .....
    
    @Around
    public Object around(){
        Thread{
             point.proceed
        }
    }
}
```

```java
@Aspect
public class BB{
    @Pointcut
    .....
    
    @Around
    public Object around(){
             point.proceed
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-np7A,aspectj,1050582720,128,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-25T07:06:04Z,2022-02-25T07:06:04Z,"Please reformat your question, using code blocks correctly. It is hard to read your code without copying it into an editor. Please also do not post pseudo code. What you posted would not compile (e.g. lower-case annotation names). Post complete classes with package names and imports, then others can at least try to reproduce your problem. If you want to learn how to ask good questions (not just here, but anywhere), please read the [MCVE](https://stackoverflow.com/help/mcve) article. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-np7A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-oBNT,aspectj,1050678099,128,NA,walt2021,86177693,,,NA,2022-02-25T09:20:04Z,2022-02-25T09:20:04Z,"_Edited by @kriegaex_

Thank you very much

I use an android project which use aspectj1.9.6

When i call method testMethod(), i get the error：

```text
2022-02-25 17:01:05.827 14000-14000/com.example.myapplication D/blue: AA before time = 1645779665827
2022-02-25 17:01:05.827 14000-14000/com.example.myapplication D/blue: BB before time = 1645779665827
2022-02-25 17:01:05.827 14000-14000/com.example.myapplication D/blue: AA after time = 1645779665827
2022-02-25 17:01:05.828 14000-16080/com.example.myapplication D/blue: BB 2
2022-02-25 17:01:05.828 14000-16080/com.example.myapplication W/System.err: java.util.EmptyStackException
2022-02-25 17:01:05.829 14000-16080/com.example.myapplication W/System.err:     at java.util.Stack.peek(Stack.java:102)
2022-02-25 17:01:05.829 14000-16080/com.example.myapplication W/System.err:     at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:170)
2022-02-25 17:01:05.829 14000-16080/com.example.myapplication W/System.err:     at com.example.myapplication.BBAspect$1.run(BBAspect.java:25)
2022-02-25 17:01:05.829 14000-16080/com.example.myapplication W/System.err:     at java.lang.Thread.run(Thread.java:923)
```

This is my demo
```java
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface AA {
}
```

```java
@Aspect
@DeclarePrecedence(""com.example.myapplication.AAAspect,com.example.myapplication.BBAspect"")
public class AAAspect {
    @Pointcut(""execution(@com.example.myapplication.AA * *..*(..))"")
    public void allMethod(){

    }

    @Around(""allMethod() && @annotation(param)"")
    public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable{
        Log.d(""blue"", ""AA before time = "" + System.currentTimeMillis());
        Object[] args = point.getArgs();
        Object obj = point.proceed(args);
        Log.d(""blue"", ""AA after time = "" + System.currentTimeMillis());
        return obj;
    }
}
```

```java
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface BB {
}
```

```java
@Aspect
public class BBAspect {
    @Pointcut(""execution(@com.example.myapplication.BB * *..*(..))"")
    public void allMethod(){

    }

    @Around(""allMethod() && @annotation(param)"")
    public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable{
        Log.d(""blue"", ""BB before time = "" + System.currentTimeMillis());
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Log.d(""blue"", ""BB 2"");
                    point.proceed();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                }
            }
        }).start();
        return null;
    }
}
```

```java
public class Test {

    @AA
    @BB
    public void testMethod(){
        Log.d(""blue"", ""testMethod"");
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-oBNT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-ouut,aspectj,1050864557,128,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-25T13:42:31Z,2022-02-25T13:42:31Z,"### Preface

Seriously? I asked you to **edit** your question and add more information, not to post more pseudo code in bogus, unreadable formatting. Sorry for lecturing you, but if you cannot even do that, I have low motivation to read your code and error log, because it simply hurts my eyes. Am I asking too much for you to click on the formatting icons on the top of the input field or learn markdown?

Besides, your code with all the falsely lower-case AspectJ annotations would still not compile and is just pseudo code to me. Both pointcuts also have syntax errors and would never compile with the AspectJ compiler. Do you ever test your own code before posting it?

Let me show you what I mean: correct annotation names starting with upper-case characters like `@Aspect`, `@Retention` (not `@aspect`, `@retention`), one code block per class and per console log snippet. Maybe you even feel like adding syntax highlighting hints, if you want to do it more nicely.

### Fixed, complete example code

```java
package com.example.myapplication;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

@Retention(RUNTIME)
@Target(METHOD)
public @interface AA {}
```

```java
package com.example.myapplication;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

@Retention(RUNTIME)
@Target(METHOD)
public @interface BB {}
```

```java
package com.example.myapplication;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.DeclarePrecedence;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
@DeclarePrecedence(""com.example.myapplication.AAAspect, com.example.myapplication.BBAspect"")
public class AAAspect {
  @Pointcut(""execution(@com.example.myapplication.AA * *(..))"")
  public void allMethod() {}

  @Around(""allMethod() && @annotation(param)"")
  public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable {
    System.out.println(""blue - AA before time = "" + System.currentTimeMillis());
    Object[] args = point.getArgs();
    Object obj = point.proceed(args);
    System.out.println(""blue - AA after time = "" + System.currentTimeMillis());
    return obj;
  }
}
```

```java
package com.example.myapplication;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class BBAspect {
  @Pointcut(""execution(@com.example.myapplication.BB * *(..))"")
  public void allMethod() {}

  @Around(""allMethod() && @annotation(param)"")
  public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable {
    System.out.println(""blue - BB before time = "" + System.currentTimeMillis());
    new Thread(new Runnable() {
      @Override
      public void run() {
        try {
          System.out.println(""blue - BB 2"");
          point.proceed();
        }
        catch (Throwable throwable) {
          throwable.printStackTrace();
        }
      }
    }).start();
    return null;
  }
}
```

```java
package com.example.myapplication;

public class Test {
  @AA
  @BB
  public void testMethod() {
    System.out.println(""blue - testMethod"");
  }

  public static void main(String[] args) {
    new Test().testMethod();
  }
}
```

```text
blue - AA before time = 1645792424231
blue - BB before time = 1645792424234
blue - AA after time = 1645792424235
blue - BB 2
java.util.EmptyStackException
	at java.base/java.util.Stack.peek(Stack.java:102)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:170)
	at com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
	at java.base/java.lang.Thread.run(Thread.java:834)
```

Now I can read the code, compile and execute it as well as reproduce your problem. I also do not need an unknown log framework to the example project.

### Fixing a small bug (not the error root cause, but anyway)

First, please note that there is a bug in `BBAspect`:

```java
public class BBAspect {
  @Pointcut(""execution(@com.example.myapplication.BB * *(..))"")
  public void allMethod() {}

  @Around(""allMethod() && @annotation(param)"")
  public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable {
```

It should be `BB param`. It only happens to work in your example, because the test method carries both annotations. But that is not the error causing the problem.

Let us also add another log line in the same aspect before the `return` statement:

```java
    }).run();
    System.out.println(""blue - BB after time = "" + System.currentTimeMillis());
    return null;
  }
}
```

The console log becomes:

```text
blue - AA before time = 1645793630464
blue - BB before time = 1645793630465
blue - BB after time = 1645793630466
blue - AA after time = 1645793630466
blue - BB 2
java.util.EmptyStackException
	at java.base/java.util.Stack.peek(Stack.java:102)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:170)
	at com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
	at java.base/java.lang.Thread.run(Thread.java:834)
```

So we see that both around-aspects do their jobs and return correctly. What is obviously still missing is the `""blue - testMethod""` output from the target method.

### Experimentally executing without spawning off a new thread

I can already tell you that this is because of your asynchronous `proceed()` in the extra thread. That without multi-threading it would work correctly, we can easily test by changing `.start()` to `.run()`, so we have everything in one thread. The log output changes to:

```text
blue - AA before time = 1645793834174
blue - BB before time = 1645793834176
blue - BB 2
blue - testMethod
blue - BB after time = 1645793834178
blue - AA after time = 1645793834178
```

There we have out  `""blue - testMethod""` and no more exception.

### The root cause

Now why is that? Because in `JoinPointImpl` we have:
https://github.com/eclipse/org.aspectj/blob/0fe9c68ec1aecdd80798b0113bb02325162e2f36/runtime/src/main/java/org/aspectj/runtime/reflect/JoinPointImpl.java#L139-L143

And later we have:
https://github.com/eclipse/org.aspectj/blob/0fe9c68ec1aecdd80798b0113bb02325162e2f36/runtime/src/main/java/org/aspectj/runtime/reflect/JoinPointImpl.java#L161-L172

What does that mean? Because around-advice methods need to be executed onion-skin style, i.e. entered outside-in and exited inside-out, we use a `Stack<AroundClosure>` in order to track the situation. As we can see in the error log above, ...

```text
blue - BB after time = 1645793630466
blue - AA after time = 1645793630466
blue - BB 2
java.util.EmptyStackException
```

... both around-aspects have already finished doing their jobs when suddenly in the new thread you are trying to proceed - but the stack of around-closures is empty already. This is simply a user error. Around advices are not supposed to proceed asynchronously, if there is a nesting situation, i.e. more than one around-advice advising the exact same joinpoint.

If you temporarily comment out the advice annotation in `AAAspect` in order to deactivate it, ...

```java
//  @Around(""allMethod() && @annotation(param)"")
  public Object arounddd(ProceedingJoinPoint point, AA param) throws Throwable {
```

and also add a little waiting time in the main method in order to wait for the asynchronous thread to finish so we can see its log output, ...

```java
  public static void main(String[] args) throws InterruptedException {
    new Test().testMethod();
    Thread.sleep(2000);
  }
```

the program with `proceed()` the extra thread works:

```text
blue - BB before time = 1645795119829
blue - BB after time = 1645795119831
blue - BB 2
blue - testMethod
```

**Lesson learned: Please do not proceed asynchronously in a nested around-advice situation!**

I am sorry to have no better news for you, but you simply cannot make nested around-advices asynchronous. From AspectJ's perspective, both advice methods have terminated already and the closures discarded when suddenly you want to proceed.

Besides, even in the situation where you only have one around-advice per method, you can execute the target method asynchronously, but if the advice already returned a result to the calling method (if the target method has non-void return type), the result of the `proceed()` call would simply vanish into nothingness, unless the executing thread does something with it independently of the target method's original caller, or if the target method happens to have a `Future` return type. Then you could play a smart trick, returning a future without result from the advice first, then set the future's result later in the other thread after proceeding and waiting for the original future's value to become available. But if you are working with futures already, chances are that the program is designed to use multi-threading already and proceeding in an extra thread is not necessary in the first place.

Last, but not least: Questions like this belong on Stack Overflow or the AspectJ users mailing list. GitHub issues are for bugs. I am answering it, because I do believe you that you thought there is a bug in AspectJ.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-ouut/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-ox65,aspectj,1050877625,128,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-25T14:00:33Z,2022-02-25T14:00:33Z,"> i get the error (aspectj is 1.9.6) `java.util.EmptyStackEcxeption` (...)
> 
> However, i use 1.9.1, it is ok

@aclement, this made me think about what has changed between then and now. 1.9.1 was published in April 2018, 1.9.6 in July 2020. Other than you mavenising the project and moving the class to another folder, actually there was only one relevant change: https://github.com/eclipse/org.aspectj/commit/8819fad9f47fe572c45e601d7f321fe4ddf50b9e, see also [Bugzilla #333274](https://bugs.eclipse.org/bugs/show_bug.cgi?id=333274). This is where you introduced the stack in order to be able to handle problems related to proceeding multiple times, e.g. for aspects re-trying things. The change became effective in 1.9.3. Since then, what the OP was trying here no longer works. I did not try, but I believe him when he says that in 1.9.1 he could do this. Do you see a way to fix this without reverting the useful change in the commit I just mentioned?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-ox65/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-rKGO,aspectj,1051500942,128,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-02-26T02:50:00Z,2022-02-26T02:50:00Z,"### Running the program under AspectJ 1.9.2

@aclement, quick update: Like @walt2021 said, this particular scenario works in 1.9.2. I added some stack trace info to the target method, so we see where it was called from:

```java
  @AA
  @BB
  public void testMethod() {
    System.out.println(""blue - testMethod - called by "" + new Exception().getStackTrace()[3]);
  }
```

Like I said, the following logs are all from **AspectJ 1.9.2**.

---

Proceeding exactly once from both aspects like in the example above yields:

```text
blue - AA before time = 1645842700066
blue - BB before time = 1645842700067
blue - BB after time = 1645842700069
blue - AA after time = 1645842700069
blue - BB 2
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
```

---

Proceeding twice in the synchronously proceeding `AAAspect` yields:
```text
blue - AA before time = 1645842785833
blue - BB before time = 1645842785835
blue - BB after time = 1645842785836
blue - BB 2
blue - testMethod - called by com.example.myapplication.AAAspect.arounddd(AAAspect.aj:20)
blue - AA after time = 1645842785837
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
```

I.e. interestingly, only one target method execution comes from ""inner"" of the two nested around-aspects `BBAspect`, the other one from the ""outer"" one `AAAspect`. This might be one of the reasons you introduced the stack in 1.9.3, because you wanted to avoid that. (I am just speculating.)

---

Proceeding twice in the asynchronously proceeding `BBAspect` instead yields:
```text
blue - AA before time = 1645843079117
blue - BB before time = 1645843079119
blue - BB after time = 1645843079120
blue - AA after time = 1645843079120
blue - BB 2
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
```

Here, everything is as expected, i.e. both target method executions are triggered by the ""inner"" asynchronous aspect.

---

Proceeding twice in **both** aspects yields:
```text
blue - AA before time = 1645843174505
blue - BB before time = 1645843174506
blue - BB after time = 1645843174507
blue - BB 2
blue - testMethod - called by com.example.myapplication.AAAspect.arounddd(AAAspect.aj:20)
blue - AA after time = 1645843174508
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
```

Now we do not have anything like 2*2=4 executions, but 2 from the ""inner"" asynchronous aspect plus one more from the ""outer"" synchronous one, all in all 3 executions.

### Running the program under AspectJ 1.9.8 (1.9.3+)

Because of the stack problem, we cannot spawn the extra thread, but if again I am replacing `Thread.start()` by `run()`, we see that in all 4 scenarios, the target method executions **always** originate from the ""inner"" aspect `BBAspect`, i.e. the mixed-up mess from 1.9.2 no longer exists in 1.9.3+ and the stack works. The consequence is also that in the case of both aspects proceeding twice, we now do have 2*2=4 executions, but all coming from the ""inner"" aspect:

```text
blue - AA before time = 1645843459198
blue - BB before time = 1645843459199
blue - BB 2
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
blue - BB after time = 1645843459200
blue - BB before time = 1645843459200
blue - BB 2
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:21)
blue - testMethod - called by com.example.myapplication.BBAspect$1.run(BBAspect.aj:22)
blue - BB after time = 1645843459201
blue - AA after time = 1645843459201
```

This is wonderful, perfect nesting. We see that the ""inner"" aspect is triggered twice completely and each time proceeds twice. The only downside is that this only works synchronously. I am going to play with the source code and see if I can synchronise on the stack object somehow.

Sorry for the lengthy post, but I do want to document my findings for reference.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-rKGO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-5fC4,aspectj,1055256760,128,NA,walt2021,86177693,,,NA,2022-03-01T10:08:33Z,2022-03-01T10:08:33Z,"Thank you very much again.
I have learn much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-5fC4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/128,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-5jhD,aspectj,1055275075,128,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-01T10:26:41Z,2022-03-01T10:26:41Z,"Let me know if you agree to test a snapshot version with the bugfix for your situation  and provide feedback, testing on Android. I can publish it on the Sonatype OSSRH snapshot Maven repository later today when I have some spare time. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4-5jhD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,aspectj,1173953385,139,Seems odd you would drop jdk 8 support in an *.*.* release,mebigfatguy,170161,Dave Brosius,dbrosius@mebigfatguy.com,CLOSED,2022-03-18T19:27:53Z,2022-10-11T08:20:45Z,"too late i guess, but a major upgrade number probably was the thing to do.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_8Lta,aspectj,1072741210,139,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-03-18T19:33:59Z,2022-03-18T19:33:59Z,"Hi, yeah. There are challenges with making a release, and rev'ing the early digits kick off much more elaborate process that sometimes we just don't have cycles to do. So we could either put off a release because of that process, or do it like this and at least get something out. I know it's not ideal. Major releases of 1.X in parallel with Java were easier to deal with when Java was releasing slowly, this new faster Java release schedule is harder to keep up with. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_8Lta/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_89vL,aspectj,1072946123,139,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-19T05:33:27Z,2022-03-19T05:33:27Z,"@mebigfatguy, I feel your pain. Andy and I had long discussions several times, because after I started contributing to AspectJ I urged him to switch to a versioning scheme AspectJ used to have before, i.e. the ""x"" in ""1.x"" would reflect the corresponding Java release. The last time we used that was with AspectJ 1.9.0 and Java 9. After that, only minor-minors were incremented because of the Eclipse ceremony (reviews, IP checks) involved to get even a minor release out, not even to mention a major one.

AspectJ having been basically a one-person project starring @aclement for many years, I understand that he simply could not afford to spend more time on processes than on actual coding. Now the situation is that I do most of the work which does not require Andy's deep expertise, and he occasionally helps to fix or improve something deep in the guts of AspectJ. Because I am also time-constrained and by nature even more repulsed by wasteful processes than Andy is - which is BTW why in my daytime job I have been an agile coach for 15+ years, development just being a little hobby of mine - I have been keeping up the bad practice of releasing minor-minors since I came on board before the 1.9.7 release.

Concerning major releases, I was also thinking about using major version numbers reflecting the Java release, i.e. rather 18 than 1.18, 1.9.18 (or the much more probable, ugly 1.9.9). But I think minors like 1.18 would (in theory, if we were free from Eclipse ceremony) be OK, because there have not been any breaking changes in 1.x.

Specifically, **we did not ""drop JDK 1.8 support"".** Yes, for compile-time weaving you do need JDK 11+ during build time, but that was forced upon AJC by the Eclipse Java Compiler which AJC is a fork of. But still, you can compile 1.8 code or - when compiling pure (non-aspect) Java code - even down to as old as 1.3. Javac does not do that for you, but ECJ and AJC do! Also LTW on 1.8 is no problem. This is all described in the [Aspectj 1.9.8 release notes](https://htmlpreview.github.io/?https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/README-198.html). Just scroll to the first bullet point of section ""Other changes and bug fixes"".","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_89vL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_8_ZC,aspectj,1072952898,139,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-19T06:28:31Z,2022-03-19T06:28:31Z,"@mebigfatguy: In order to make something good from your inquiry, I added an [AspectJ Java version compatibility](https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/JavaVersionCompatibility.md) overview page to our documentation, also linking to it from the main GitHub read-me. I hope you like it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_8_ZC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_-2kC,aspectj,1073441026,139,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-21T03:13:24Z,2022-03-21T03:13:24Z,I just noticed that we even have had issue #72 for this topic. I created it last year. So you see that we are aware of this being a suboptimal situation.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns4_-2kC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/139,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L9CCW,aspectj,1274290326,139,NA,mebigfatguy,170161,Dave Brosius,dbrosius@mebigfatguy.com,NA,2022-10-11T08:20:45Z,2022-10-11T08:20:45Z,"that's good.

water under  the bridge, anyway.

On Sat, Mar 19, 2022 at 2:28 AM Alexander Kriegisch <
***@***.***> wrote:

> @mebigfatguy <https://github.com/mebigfatguy>: In order to make something
> good from your inquiry, I added an AspectJ Java version compatibility
> <https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/JavaVersionCompatibility.md>
> overview page to our documentation, also linking to it from the main GitHub
> read-me. I hope you like it.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/org.aspectj/issues/139#issuecomment-1072952898>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABJRMMVNAA6QUFMIQ47YLLVAVXZTANCNFSM5RCW4ZAQ>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
>
> You are receiving this because you were mentioned.Message ID: <eclipse/org
> .***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L9CCW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/141,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/141,aspectj,1177738951,141,Make asynchronous proceed work for non-child threads in annotation-style aspects,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-03-23T07:48:51Z,2024-03-12T07:22:48Z,"This is work related to, but out of scope of bug #128 and PR #132. See https://github.com/eclipse/org.aspectj/pull/132#issuecomment-1054114608 and subsequent comments for details.

The same scenario works for native-syntax aspects, but not for @<!---->AspectJ-style ones. See the currently deactivated test `Bugs199Tests.testAsyncProceedNestedAroundAdviceThreadPool_gh128`, which simply needs to be un-ignored in order to have a ready-to-use test case for a future implementation.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/141,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52q0Hh,aspectj,1990935009,141,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-12T07:22:48Z,2024-03-12T07:22:48Z,Fixed by #291.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52q0Hh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,aspectj,1179762556,142,LTW verbose to print summary,abelom,575495,,,OPEN,2022-03-24T16:37:40Z,2022-07-31T10:17:30Z,"We are using LTW on a large codebase and even with verbose output we get about two minutes of silence on start-up between last aspectj info message and start of our user space output

It would be nice for AspectJ agent to print some message with timestamp at the end of LTW. Maybe total number of classes weaved and total time spend?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQAAn,aspectj,1077936167,142,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-03-24T18:45:40Z,2022-03-24T18:45:40Z,"> at the end of LTW


It is hard to know the end of LTW as we don't know when you have finished loading classes.

But there is something you can use that periodically can print matching info:
http://andrewclement.blogspot.com/2009/11/aspectj-profiling-pointcut-matching.html

It doesn't quite print number of classes but does present time spent matching point cuts against join points - messages could be extended with types woven in addition to join point match counts. 

I haven't used it in a long time but I don't see why it wouldn't still be working.











","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQAAn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQFFR,aspectj,1077956945,142,NA,abelom,575495,,,NA,2022-03-24T19:08:01Z,2022-03-24T19:08:01Z,"> It is hard to know the end of LTW as we don't know when you have finished loading classes.

Can I access stats from user code? org.aspectj.Stats.getTotalCount() org.aspectj.Stats.getTotalTime() ?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQFFR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AWdcA,aspectj,1079629568,142,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-26T07:22:33Z,2022-03-26T07:22:33Z,"I do not know those AJC options or the code dealing with them, but actually the question is interesting enough to look into it. You cannot easily access the stats, because they are stored in the private static inner class [`org.aspectj.weaver.World.TimeCollector`](https://github.com/eclipse/org.aspectj/blob/5abc2f1dce1e97b92acc5562b3c5fa32cf0abb5d/org.aspectj.matcher/src/main/java/org/aspectj/weaver/World.java#L1883).

Right above that inner class, you see two public methods recording the stats:
https://github.com/eclipse/org.aspectj/blob/5abc2f1dce1e97b92acc5562b3c5fa32cf0abb5d/org.aspectj.matcher/src/main/java/org/aspectj/weaver/World.java#L1868-L1881

In method `TimeCollector.report()`, you can see that the stats are logged into a message handler:
https://github.com/eclipse/org.aspectj/blob/5abc2f1dce1e97b92acc5562b3c5fa32cf0abb5d/org.aspectj.matcher/src/main/java/org/aspectj/weaver/World.java#L1904-L1918

For the message handler, there are public getter and setter methods in `World`:
https://github.com/eclipse/org.aspectj/blob/5abc2f1dce1e97b92acc5562b3c5fa32cf0abb5d/org.aspectj.matcher/src/main/java/org/aspectj/weaver/World.java#L714-L724

So, assuming that you can get hold of a `World` instance, it would in theory be possible to register your own message handler, parse the text messages and create your own stats, doing whatever you please with them and whenever you deem it to be the right time. Like Andy said: Neither the weaver itself nor you can decide for certain when ""weaving is done"", because there is always the possibility that yet another class or JAR is loaded and woven. So in a LTW scenario, you can only talk about ""weaving so far"" rather than ""weaving done"". But if for your purpose you simply say e.g. that when your application reaches a certain point, you want to dump, save, transmit or publish weaving stats, you can in theory do so. I am not sure if you really need that in process or you are better off with simply evaluating log files, parsing the text messages in there and then calculate the stats offline or periodically from a process tailing the log.

If all you wanted is a weaver which is not silent for 2 minutes and see some progress, because that makes you feel better, you can just use the logging option out of the box and maybe lower the logging frequency, if you think the log messages should appear more frequently.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AWdcA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/142,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjJBN,aspectj,1200394317,142,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-31T10:17:30Z,2022-07-31T10:17:30Z,"@abelom, 4 months have passed. Did you try anything along the ideas I sketched here?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjJBN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/143,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/143,aspectj,1179940370,143,Incremental compilation between two invocations,abelom,575495,,,OPEN,2022-03-24T19:15:05Z,2022-03-24T23:14:54Z,"At the moment AJC incremental compilation means ""incremental re-compilation within same JVM process"" but for the huge codebase  at my day job we need ""incremental compilation between two different gradle invocations""


> There is a complex state object that is produced by the first ‘full build’ (so you always get a first full build when you open the IDE) but after that the state object is used to do minimal builds for any changes you make.(the state object could be persisted on disk but that code hasn’t been written…).

https://www.eclipse.org/lists/aspectj-dev/msg03313.html
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/143/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/143,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQKce,aspectj,1077978910,143,NA,abelom,575495,,,NA,2022-03-24T19:17:10Z,2022-03-24T19:17:10Z,I guess there are two ways to accomplish the result - either have AJC to persist state or have gradle daemon keep AJC instance within daemon to reuse the in-memory state at least between dev desktop reboots?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AQKce/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/143,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ASCoO,aspectj,1078471182,143,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-03-24T23:14:54Z,2022-03-24T23:14:54Z,"In addition to that message you reference, some of my findings from attempting this before are [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=269554). Our state is more complex than JDTs, obviously.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ASCoO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/144,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/144,aspectj,1181519797,144,Java 18 support,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-03-26T04:50:52Z,2022-03-26T04:51:29Z,"This mainly encompasses the 2nd review of pattern matching for switch, corresponding compiler updates and tests. After that, incorporate the new AspectJ version in AJDT for Eclipse 4.23 (2022-03).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/145,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/145,aspectj,1181521841,145,Compiler option `--add-exports` not working,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-03-26T04:58:13Z,2022-03-31T07:34:00Z,"See https://github.com/mojohaus/aspectj-maven-plugin/issues/139.

AJC ignores the option, even though the upstream JDT command line parser correctly parses it. It seems as if in AJDT, we need to use the available information and configure the compiler accordingly.

Even though it is a new feature, some (if not most) users might argue that this compiler optionshould have been supported since Java 9 and AJC is incomplete without it. So I am classifying the bug as both a bug and an enhancement.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/145,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AWcEU,aspectj,1079623956,145,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-03-26T06:53:18Z,2022-03-26T06:53:18Z,"@aclement, I need your help with this one. I am debugging my ass off, but simply am too unfamiliar with AJC internals to find out where to tweak what in order to transform the command line option to something that makes AJC actually recognise that it is unnecessary to throw errors when compilation units try to access to exported modules.

BTW, I even think the fix for this might justify an extra release 1.9.9.1.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AWcEU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/148,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/148,aspectj,1189919523,148,Renovate or remove AspectJ Browser,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-04-01T15:00:00Z,2022-04-02T02:58:17Z,"Maybe the AspectJ Browser is or used to be a helpful tool. Never having used it myself, I am not sure if it is worth keeping it around in the AspectJ repository and documentation. If we do want to keep it, I think we have to bring it up to date first. So we need a decision here and then act according to it.

Here is a collage of what it looks like:

![image](https://user-images.githubusercontent.com/1537384/161288724-d7259b45-bf92-4b0f-8111-a5fb229ae241.png)

You see the maximum of Java 1.6 here. That indicates when it might have updated the last time. I have browsed the commit history of folder [ajbrowser](https://github.com/eclipse/org.aspectj/tree/master/ajbrowser). Other than version bumps or Java version syntax upgrades (e.g. using generics or some new JDK API), the last functional changes have been at least a dozen years or so ago.

@aclement, what is your opinion about AJ Browser?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/148,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AwA7a,aspectj,1086328538,148,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-04-01T21:11:46Z,2022-04-01T21:11:46Z,I think it can be retired safely,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5AwA7a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/148,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Awc57,aspectj,1086443131,148,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-02T01:01:28Z,2022-04-02T01:01:28Z,"@aclement, can you please also explain briefly what this AJDE stuff is supposed to be? Was that only for JBuilder and can also be removed, or is it somehow used indirectly by AJDT?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Awc57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/150,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/150,aspectj,1190475976,150,"Improve CI build: create docs, use Maven cache, attach artifacts",kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-04-02T03:05:06Z,2022-04-02T05:38:17Z,"The GitHub CI build should be improved as follows:

- [x] Use a cache for Maven artifacts so as to speed up the build process and also shorten the build logs. Scrolling through download messages is tedious. Exclude `org.aspectj` artifacts from caching.
- [x] Add a build step creating docs, using the `create-docs` profile, which is inactive by default and only used if profile `release` is active.
- [x] Add build steps attaching docs and main artifacts (runtime, weaver, tools) including binaries, sources and javadocs to the build.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/150,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Aw3h4,aspectj,1086552184,150,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-02T05:37:36Z,2022-04-02T05:37:36Z,"Remark: Currently, the build does not create javadocs, so they are not attached either, only sources and binaries. And of course, the extra builds step create and attach docs.

@aclement, do you think we should create javadocs with each build? I think we can still add that later. I am also thinking about future improvements such as segmenting/modularising the build into a little pipeline, simultaneously adding builds for other OS platforms and maybe even other JVMs like Eclipse OpenJ9, see also #61. In order to not make the matrix too big and test all combinations, we could do things like create docs and attach artifacts only once, but run tests on a wider variety of combinations. OTOH, ~14 of ~16 minutes per build are eaten up by the test build step. So we are not saving much time, limiting the matrix for other steps. But the number of attachments will get smaller, see e.g. the list of artifacts in [build run 2080974555](https://github.com/eclipse/org.aspectj/actions/runs/2080974555). Then again, we might want to have just those artifacts, if we ever need to compare them because of hard-to-debug problems.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Aw3h4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/152,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/152,aspectj,1196251108,152,findbugs-maven-plugin:3.0.5:check failed,KinaZhen,10271251,,,CLOSED,2022-04-07T16:01:30Z,2022-04-08T15:27:19Z,"Redundant nullcheck of this, which is known to be non-null  :  RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE

aspectj weaver code :

    if ((this == null || !this.getClass().isAnnotationPresent(Configurable.class) || !AnnotationBeanConfigurerAspect.ajc$if$bb0((Configurable)this.getClass().getAnnotation(Configurable.class))) && this != null && this.getClass().isAnnotationPresent(Configurable.class) && AbstractDependencyInjectionAspect.ajc$if$6f1(var2)) {
      AnnotationBeanConfigurerAspect.aspectOf().ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(this);
    }


how to fix it?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/152,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BFWRG,aspectj,1091920966,152,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-07T16:05:41Z,2022-04-07T16:05:41Z,"What are you talking about? Please explain, like this I don't even understand what you are trying to ask. And if you have a problem, where is your reproducible example? ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BFWRG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/152,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BHXhO,aspectj,1092450382,152,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-08T05:17:23Z,2022-04-08T05:17:23Z,"No feedback → closing issue. Feel free to comment and explain why you think this is an AspectJ issue, then we can re-open it.

By the way: If you are talking about the Spring Framework's [`AnnotationBeanConfigurerAspect`](https://github.com/spring-projects/spring-framework/blob/9adfa5e8b0f0cd65a0b14740e0a0f9832d80edcb/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj), it does not belong to AspectJ. Of course, using it could in theory still trigger an AspectJ weaver bug, but that aspect has been in Spring since 2.0, so if you want me to investigate, please give me a good reason and more information.

If this was just about something Findbugs reported when inspecting your byte code, I think you do not need to worry, because aspect weaving generates byte code which in some corner cases might end up checking something which is always true or always false, but better safe than sorry.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BHXhO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,aspectj,1198559390,153,`NullPointerException` on `BcelWorld.java#L135`,dagyu,23644210,,dagyu95dev@gmail.com,CLOSED,2022-04-09T12:12:16Z,2022-04-11T17:10:53Z,"Hi I'm writing a Language Server for AspectJ and one of the features that I have implemented are the [codeLenses](https://code.visualstudio.com/api/language-extensions/programmatic-language-features#codelens-show-actionable-context-information-within-source-code) that I exploit to show all the weaved points by an advice and viceversa. This GIF is an example on VSCode (I also implemented tthe client for Vim).

![ezgif com-gif-maker](https://user-images.githubusercontent.com/23644210/162567262-2400a463-9491-48de-8a0d-18d0f94f3a9b.gif)

In order to retrieve all the weaved points I set an `ICrossReferenceHandler` on the `BcelWorld` instance, in this way when the [`reportMatch`](https://github.com/eclipse/org.aspectj/blob/master/weaver/src/main/java/org/aspectj/weaver/bcel/BcelWorld.java#L131) method is called I can retrieve all the weaved points. But there are some cases where this solution crash because the method `determineRealKind` can return `null` and on [BcelWorld.java#L135](https://github.com/eclipse/org.aspectj/blob/master/weaver/src/main/java/org/aspectj/weaver/bcel/BcelWorld.java#L135) is never checked the `null` case and a `NullPointerException` is thrown.

I also created a repo to reproduce this bug programmatically https://github.com/dagyu/bcel-world-bug-poc.

This bug is really easy to fix but I didn't do it just because I don't know if the way that I choose to retrieve the weaved points is the best one. If there is a better way could you give me some suggestion? 

If you don't have any suggestion in any case the bug is present, so if you will fix it I'll be really grateful.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN4Ra,aspectj,1094157402,153,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-10T01:55:40Z,2022-04-10T01:55:40Z,"@aclement, a quick fix would be to return `""""` instead of `null` here:
https://github.com/eclipse/org.aspectj/blob/ea43aa5ed8e64ad20672f38864e0d53a5e855e2a/weaver/src/main/java/org/aspectj/weaver/bcel/BcelWorld.java#L119-L125

Another easy alternative would be `determineRelKind(munger) == null ? """" : determineRelKind(munger).getName()` (or using a variable to avoid the duplicate method call) here:
https://github.com/eclipse/org.aspectj/blob/ea43aa5ed8e64ad20672f38864e0d53a5e855e2a/weaver/src/main/java/org/aspectj/weaver/bcel/BcelWorld.java#L133-L137

The call graph for `BcelWorld.determineRelKind` looks like this:

![image](https://user-images.githubusercontent.com/1537384/162597571-cb840970-8065-42bf-8ede-1f24e596e816.png)

BTW, I found no references to `ICrossReferenceHandler` in either AspectJ or AJDT, i.e. no implementing classes relying on a `null` value in `String kind`. If you are not expecting any negative side effects, I could simply add more entries to
https://github.com/eclipse/org.aspectj/blob/ea43aa5ed8e64ad20672f38864e0d53a5e855e2a/asm/src/main/java/org/aspectj/asm/IRelationship.java#L44-L58
which could then be used in `BcelWorld` in order to set the corresponding `ICrossReferenceHandler.kind` to something meaningful. WDYT, @aclement?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN4Ra/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN5r4,aspectj,1094163192,153,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-10T02:43:08Z,2022-04-10T02:43:08Z,"For now and until further feedback, I chose the cheapest fix. Actually, the other kinds, existing or imagined new ones, are not really advice types. Therefore, setting `kind` to `null` is OK, even though not super informative.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN5r4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN7Af,aspectj,1094168607,153,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-10T03:40:33Z,2022-04-10T03:40:33Z,"@dagyu, please give it a spin with the 1.9.10-SNAPSHOT in https://oss.sonatype.org/content/repositories/snapshots and report back. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BN7Af/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOFYJ,aspectj,1094211081,153,NA,dagyu,23644210,,dagyu95dev@gmail.com,NA,2022-04-10T07:55:01Z,2022-04-10T07:55:01Z,"> BTW, I found no references to `ICrossReferenceHandler` in either AspectJ or AJDT, i.e. no implementing classes relying on a `null` value in `String kind`

If `ICrossReferenceHandler` actually isn't used I think that changing the signature of `ICrossReferenceHandler` in particular replacing `String kind` in `AdviceKind kind` could be more informative because in the `null` case I lose some information.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOFYJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOFeE,aspectj,1094211460,153,NA,dagyu,23644210,,dagyu95dev@gmail.com,NA,2022-04-10T07:57:38Z,2022-04-10T07:57:38Z,"> @dagyu, please give it a spin with the 1.9.10-SNAPSHOT in https://oss.sonatype.org/content/repositories/snapshots and report back. Thanks.

I have no permission on the webpage that you shared but I build the package from the source code and this fix is good, but if you could change the signature of `ICrossReferenceHandler.addCrossReference` and passing `AdviceKind` instead of a tring I'll be really grateful.

Thanks for the answet.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOFeE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOGHJ,aspectj,1094214089,153,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-10T08:12:22Z,2022-04-10T08:12:22Z,"Of course you have permission. It is the public Maven Central snapshot repository. If you use Maven or Gradle to build, simply add it as a snapshot repo. You can google how to do that, is is super easy. No need to build AspectJ from source, I did that for you already.

> if you could change the signature of `ICrossReferenceHandler.addCrossReference` and passing `AdviceKind` instead of a `String` I'll be really grateful.

Sorry, I am not going to do a breaking change in an existing interface for you at this point. There might be other users, relying on the current behaviour. I do agree that it might have made more sense to pass a type-safe object instead of a string to begin with, but now the interface is like this and has been for many years. Maybe overloading it incl. a default implementation might be an option. But for now, I simply want to fix the bug you were kind enough to raise here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOGHJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOGeH,aspectj,1094215559,153,NA,dagyu,23644210,,dagyu95dev@gmail.com,NA,2022-04-10T08:17:58Z,2022-04-10T08:17:58Z,Ok thank you,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BOGeH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/153,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BSTEJ,aspectj,1095315721,153,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-04-11T17:10:52Z,2022-04-11T17:10:52Z,"> > BTW, I found no references to `ICrossReferenceHandler` in either AspectJ or AJDT, i.e. no implementing classes relying on a `null` value in `String kind`
> 
> If `ICrossReferenceHandler` actually isn't used I think that changing the signature of `ICrossReferenceHandler` in particular replacing `String kind` in `AdviceKind kind` could be more informative because in the `null` case I lose some information.

I want to be a bit more precise about what I said before: When I talked about not having found any implementing classes for `ICrossReferenceHandler` in AspectJ or AJDT, I was trying to find out if anyone might care about something is `null` or we could introduce new `IRelationship` values for all existing `AdviceKind` values without a counterpart. But actually, all three things describe different things, albeit partly overlapping ones:

* [`org.aspectj.weaver.AdviceKind`](https://github.com/eclipse/org.aspectj/blob/238af52f840946000bf102e7fde72a426de4a402/org.aspectj.matcher/src/main/java/org/aspectj/weaver/AdviceKind.java) has a bad name, actually, because it contains enum values for many things which are not advice types, e.g. `per*` instantiation type descriptors, `cflow*` pointcut designators and others. This is something the weaver uses internally. I am not even sure myself what exactly it does with those values.
* [`org.aspectj.lang.reflect.AdviceKind`](https://github.com/eclipse/org.aspectj/blob/238af52f840946000bf102e7fde72a426de4a402/runtime/src/main/java/org/aspectj/lang/reflect/AdviceKind.java) is actually the closest thing to what we need for the cross references here, because this enum actually describes the actual 5 advice types in AspectJ. This is however not the one used in `BcelWorld`, but the first one is.
* [`org.aspectj.asm.IRelationship`](https://github.com/eclipse/org.aspectj/blob/238af52f840946000bf102e7fde72a426de4a402/asm/src/main/java/org/aspectj/asm/IRelationship.java) describes whatever kind of ""relationships"" are needed in the given context. This class is also a bit fuzzy to me, because it contains a mixture of things: `declare *` language constructs, again the 5 advice types, but also generic ""advice"" and ""declare"" items plus a relationship kind ""uses pointcut"". OMG! (I am also doing some project archeology here, I am unfamiliar with that stuff, not being an AspectJ veteran.)
* [`org.aspectj.weaver.ICrossReferenceHandler`](https://github.com/eclipse/org.aspectj/blob/238af52f840946000bf102e7fde72a426de4a402/org.aspectj.matcher/src/main/java/org/aspectj/weaver/ICrossReferenceHandler.java) is what you are using for your tool. It describes, AFAIK, relationships between  aspects and woven code, specifically relationships which you would use in IDE-type or xref reporting tools. I think the best data type for `kind` would `org.aspectj.lang.reflect.AdviceKind`, but **not** the weaver `AdviceKind`. Probably this is what you wanted. But actually, at least since 14 years ago when the file was created, the field type was `String`, i.e. something you can directly use as a label and do not need to map. If now we would add more string labels for other types of cross-references, which ones would that be? Let us look at them again: https://github.com/eclipse/org.aspectj/blob/ea43aa5ed8e64ad20672f38864e0d53a5e855e2a/weaver/src/main/java/org/aspectj/weaver/bcel/BcelWorld.java#L119-L125 None of these are things you can cross-reference to places in the application source code. Arguably, maybe you could jump from ITDs to target classes and vice versa, but those are not even listed here. So actually, extending something here would not help you with your tool. If you disagree, please explain.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5BSTEJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154,aspectj,1198822530,154,Access to original field value for `set()`,kriegaex,1537384,Alexander Kriegisch,,OPEN,2022-04-10T00:50:46Z,2023-01-15T22:35:45Z,"The original enhancement request [Bugzilla #95716](https://bugs.eclipse.org/bugs/show_bug.cgi?id=95716) exists since 2005. I think it should be implemented. I needed this many times myself, and e.g. it also came up on Stack Overflow [lately](https://stackoverflow.com/a/71809818/1082681) and [last year](https://stackoverflow.com/a/66648599/1082681).

```java
package de.scrum_master.app;

public class Application {
  int number;
  private boolean isActive;
  private boolean isNice;

  public static void main(String[] args) {
    Application app = new Application();

    // Value change -> trigger logging aspect
    app.number = 11;
    // Value change -> trigger logging aspect
    app.isActive = true;
    // No value change
    app.isNice = false;

    // Value change -> trigger logging aspect
    app.number = 22;
    // No value change
    app.isActive = true;
    // Value change -> trigger logging aspect
    app.isNice = true;

    // No value change
    app.number = 22;
    // No value change
    app.isActive = true;
    // No value change
    app.isNice = true;
  }
}
```

Now we want to create an aspect logging something if the write access changes the field value, i.e. we need access to the old value. Another example might be to use the old value in order to calculate something from it for validation, say the new value must be no more than 25% higher than the old one.

The current workaround for `around()` looks like this:

```java
package de.scrum_master.aspect;

import java.lang.reflect.Field;

import org.aspectj.lang.SoftException;
import org.aspectj.lang.reflect.FieldSignature;

public privileged aspect MyAspect {
  void around(Object instance, Object newValue) :
    set(* *) && target(instance) && args(newValue)
  {
    Object oldValue;
    try {
      oldValue = ((FieldSignature) thisJoinPointStaticPart.getSignature()).getField().get(instance);
    } catch (IllegalArgumentException | IllegalAccessException e) {
      throw new SoftException(e);
    }
    if (oldValue == null && newValue != null || oldValue != null && !oldValue.equals(newValue))
      System.out.println(thisJoinPoint + "": "" + oldValue + "" -> "" + newValue);
    proceed(instance, newValue);
  }
}
```

For `before()`, we need an additional `field.setAccessible(true)`, because the code accessing the field is generated in the aspect rather than in the target class:

```java
  before(Object instance, Object newValue) :
    set(* *) && target(instance) && args(newValue)
  {
    Object oldValue;
    try {
      Field field = ((FieldSignature) thisJoinPointStaticPart.getSignature()).getField();
      field.setAccessible(true);
      oldValue = field.get(instance);
    } catch (IllegalArgumentException | IllegalAccessException e) {
      throw new SoftException(e);
    }
    if (oldValue == null && newValue != null || oldValue != null && !oldValue.equals(newValue))
      System.out.println(thisJoinPoint + "": "" + oldValue + "" -> "" + newValue);
  }
```

Of course, in an AspectJ implementation there would be no reflection from the user's perspective, and a privileged aspect would be able to access non-public fields.

Syntax-wise I would keep it simple and **not** use something new like `oldargs(oldValue)`, but instead simply an optional second argument, i.e. `set(* *) && args(newValue, oldValue)`, which would, if present, bind the old value.

BTW, a reminder to myself and whoever else might need it: The way to get the field value in `get()` is to
  * either use `around()`, get the current value via `proceed()` and then either pass it through or return something else,
  * or use `after() returning(Object value)`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbEn2,aspectj,1382828534,154,NA,FedericoBruzzone,99926684,Federico Bruzzone,,NA,2023-01-14T15:55:59Z,2023-01-14T15:55:59Z,"Hi @kriegaex, I am a student attending the master's degree in computer science. I am studying and using `aspectJ` on a daily basis, the idea behind it is brilliant. I have a background in writing reflective code and bytecode engineering as well.

I was wondering if this part was implemented? Taking time away from other things, I wanted to start studying the repo, I saw that you are currently the maintainer, is it right?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbEn2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbLbW,aspectj,1382856406,154,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-14T17:01:52Z,2023-01-14T17:01:52Z,"> I was wondering if this part was implemented?

@FedericoBruzzone: This has not been implemented yet, hence the open issue.

> I saw that you are currently the maintainer, is it right?

Yes, this is basically correct. While not being the official project lead - that would be @aclement - I am currently the most active committer. Do you have any specific questions?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbLbW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/154,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbMnx,aspectj,1382861297,154,NA,FedericoBruzzone,99926684,Federico Bruzzone,,NA,2023-01-14T17:17:53Z,2023-01-14T17:17:53Z,"> Yes, this is basically correct. While not being the official project lead - that would be @aclement - I am currently the most active committer. Do you have any specific questions?

Thanks for your time. @kriegaex 
I have not run into the problem of this issue. But in the next few days I will study the repo and maybe I'll ask you some question if I'm allowed. 

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SbMnx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/162,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/162,aspectj,1206701206,162,Inner aspects of interfaces should be implicitly static,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2022-04-18T06:05:04Z,2023-01-06T00:42:03Z,"If an interface has an inner aspect, the `static` keyword should be redundant, but AJC requires it. For example, in ADTJ interface `IXReferenceProvider` there is an inner aspect [`SafeExecution`]((https://github.com/eclipse/ajdt/blob/84bf2e81bef86218151ee2b47cd640c613c0a1b5/org.eclipse.contribution.xref.core/src/org/eclipse/contribution/xref/core/IXReferenceProvider.aj#L130)). If I remove the `static` keyword there, AJC says (line breaks added manually):

```text
AJC compiler errors:
error at aspect SafeExecution {
       ^^^^^^^^^^
org.eclipse.ajdt\org.eclipse.contribution.xref.core\src\
  org\eclipse\contribution\xref\core\IXReferenceProvider.aj:130:0::0
  inner aspects must be static
```

The [Java 17 Language Specification (JLS)](https://docs.oracle.com/javase/specs/jls/se17/html/jls-9.html#jls-9.5) says:

> Every member class or interface declaration in the body of an interface declaration is implicitly public and static ([§9.1.1.3](https://docs.oracle.com/javase/specs/jls/se17/html/jls-9.html#jls-9.1.1.3)). It is permitted to redundantly specify either or both of these modifiers.

This specification dates back to at least the [Java SE 6 JLS](https://docs.oracle.com/javase/specs/jls/se6/html/interfaces.html#252566).

Because an aspect is a kind of class, it should adhere to this specification.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/168,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/168,aspectj,1244347634,168,Cannot use AspectJ with Eclipse on MacOS ,nguyendviet,30057363,Viet Nguyen,,CLOSED,2022-05-22T19:40:44Z,2022-06-05T07:22:51Z,"I'm trying to add an Aspect class to my Aspect Project. I get this error:
```
An error has occurred. See error log for more details.
class org.eclipse.ajdt.core.javaelements.AJCompilationUnit tried to access private field org.eclipse.jdt.internal.core.JavaElement.parent (org.eclipse.ajdt.core.javaelements.AJCompilationUnit is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @9ae2810; org.eclipse.jdt.internal.core.JavaElement is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @60eb5d5b)
```
I cannot open the *.aj files.

I've tried:

- Creating a new package -> same error.
- Adding simple Java classes and test them. They work without the *.aj files.
- Looking for answers online -> no working solution.
- Using Java 11 and Java 17.
- Uninstalling AspectJ and reinstalled it.
- Installing AspectJ using `.jar` file.

My system:

OSX 12.3.1. M1 chip.
Eclipse Version: 2022-03 (4.23.0)
AspectJ 1.9","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/168/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/168,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5EV0Hv,aspectj,1146569199,168,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-06-04T08:39:11Z,2022-06-04T08:39:11Z,"@nguyendviet, didn't we solve this problem elsewhere already? Was it on any mailing list? On Stack Overflow? In another GitHub project's issue? Please remind me. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5EV0Hv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/168,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5EWZQX,aspectj,1146721303,168,NA,nguyendviet,30057363,Viet Nguyen,,NA,2022-06-05T01:46:37Z,2022-06-05T01:46:37Z,"Hi @kriegaex , yes, you've helped me solved this problem. It's on [StackOverflow](https://stackoverflow.com/questions/72338304/cannot-create-aspect-file-in-eclipse). I'm going to close this ticket.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5EWZQX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/169,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/169,aspectj,1276115913,169,NPE in AjBuildConfig.computeCheckedClasspath,slachiewicz,6705942,Sylwester Lachiewicz,slachiewicz@apache.org,CLOSED,2022-06-19T17:00:10Z,2022-06-25T14:39:53Z,"I'm working to upgrade aspectj to latest version in https://github.com/codehaus-plexus/plexus-compiler 
Unfortunately, starting from version 1.9.8 i got NPE like bellow
```
[ERROR] org.codehaus.plexus.compiler.ajc.AspectJCompilerTest.testCompilingSources  Time elapsed: 0.516 s  <<< ERROR!
java.lang.NullPointerException: Cannot read the array length because ""array"" is null
        at java.base/java.util.Arrays.stream(Arrays.java:5428)
        at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.computeCheckedClasspath(AjBuildConfig.java:937)
        at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.getCheckedClasspaths(AjBuildConfig.java:274)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.getLibraryAccess(AjBuildManager.java:946)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1047)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.codehaus.plexus.compiler.ajc.AspectJCompiler.compileInProcess(AspectJCompiler.java:474)
        at org.codehaus.plexus.compiler.ajc.AspectJCompiler.performCompile(AspectJCompiler.java:329)
```

our code below:
https://github.com/codehaus-plexus/plexus-compiler/blob/master/plexus-compilers/plexus-compiler-aspectj/src/main/java/org/codehaus/plexus/compiler/ajc/AspectJCompiler.java#L343

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/169/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/169,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5FLVuv,aspectj,1160600495,169,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-06-20T15:42:06Z,2022-06-20T15:42:06Z,"Hm, the last substantial commit (disregarding the latest linting commit) in that file was my own. I never looked into Plexus Compiler anymore since then, but hopefully one of these days (maybe not before next weekend) I can spare some private time to take a look. Would that be acceptable?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5FLVuv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/169,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fg9v7,aspectj,1166269435,169,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-06-25T12:07:24Z,2022-06-25T12:07:24Z,"I do not know the AJDT API of AspectJ very well, but I debugged around a bit and sent you a PR in order to fix it in Plexus Compiler. The PR piggy-backs directly on top of your Dependabot PR. Merge it in there, then merge the Dependabot issue, and you should be fine. Or maybe you want to merge my PR directly into master, whatever.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fg9v7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,aspectj,1282090006,170,JaCoCo 0.8.8 with AspectJ,maginseb,12196189,Sebastian Magin,,CLOSED,2022-06-23T09:22:09Z,2022-08-15T08:14:54Z,"I face the following problem when running tests that use both JaCoCo (0.8.8) and AspectJ LTW (1.9.9.1). 

```
java.lang.RuntimeException: Crashed whilst crashing with this exception: java.lang.RuntimeException: Unknown constant type 17
    at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1727)
    at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1650)
    at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1417)
    at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1192)
    at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:549)
    at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:385)
    at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:115)
    at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
    at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:246)
    at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
    at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:563)
    at java.base/java.lang.ClassLoader.defineClass1(Native Method)
    at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017)
    at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174)
    at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:800)
    at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:698)
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:621)
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:579)
    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
    at de.example.Example.sayHello_aroundBody0(Example.java:7)
    at de.example.Example$AjcClosure1.run(Example.java:1)
    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:179)
    at de.example.ExampleAspect.around(ExampleAspect.java:13)
    at de.example.Example.sayHello(Example.java:1)
    at de.example.ExampleTest.testHello(ExampleTest.java:11)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base/java.lang.reflect.Method.invoke(Method.java:566)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
    at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
    at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
    Caused by: java.lang.RuntimeException: Unknown constant type 17
    at org.aspectj.apache.bcel.classfile.ConstantPool.constantToString(ConstantPool.java:232)
    at org.aspectj.weaver.bcel.LazyMethodGen$BodyPrinter.printInstruction(LazyMethodGen.java:777)
    at org.aspectj.weaver.bcel.LazyMethodGen$BodyPrinter.print(LazyMethodGen.java:721)
    at org.aspectj.weaver.bcel.LazyMethodGen$BodyPrinter.run(LazyMethodGen.java:649)
    at org.aspectj.weaver.bcel.LazyMethodGen.print(LazyMethodGen.java:610)
    at org.aspectj.weaver.bcel.LazyClassGen.printOne(LazyClassGen.java:917)
    at org.aspectj.weaver.bcel.LazyClassGen.print(LazyClassGen.java:876)
    at org.aspectj.weaver.bcel.LazyClassGen.toLongString(LazyClassGen.java:864)
    at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1725)
    ... 53 more
```

I found two related bugs on this topic: https://github.com/jacoco/jacoco/issues/909 and https://github.com/eclipse/org.aspectj/issues/68 

https://github.com/jacoco/jacoco/issues/909 recommends a change of order for the JaCoCo and AspectJ Java agents, so that the AspectJ agent is executed first. This, however, will prevent JaCoCo from correctly calculating the coverage for classes that are touched be the AspectJ agent. 

Explanation based on the JaCoCo documentation:
Jacoco uses classIds to connect coverage at runtime with the class files [(JaCoCo-documentation)](https://www.jacoco.org/jacoco/trunk/doc/classids.html).
ClassIds are calculated based on the byte code of classes. 
When the bytecode of a class is modified, JaCoCo calculates an incorrect classId and the coverage of this class cannot be determined.
Therefore, they recommend in their documentation: ""If you use another Java agent make sure the JaCoCo agent is specified at first in the command line. This way the JaCoCo agent should see the original class files.""

#### Example
I have built an example project that easily allows you to reproduce this issue: https://github.com/maginseb/jacoco-aspectj-error

```mvn clean verify``` Order of the Java agents is as recommended by JaCoCo (JaCoCo first, AspectJ second)
The result is the exception regarding the Unknown constant type 17

```mvn clean verify -P switch-order``` Order of the Java agents is as recommended in https://github.com/jacoco/jacoco/issues/909 (AspectJ first, JaCoCo second)
The result is a messed up code coverage. No class is covered based on the report even though the coverage should be close to 100%","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fbjvg,aspectj,1164852192,170,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-06-23T20:39:12Z,2022-06-23T20:39:12Z,"Thanks for opening this issue and for the reproducer project (which I have not tried yet). I might be able to take a closer look during the weekend, but cannot promise. I think I might have spotted something which could be an oversight in an older (1.9.0) version of AspectJ, i.e. a possible bug. But I cannot say for sure yet, I only looked at some source code for 3 minutes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fbjvg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5FgyH0,aspectj,1166221812,170,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-06-25T08:04:54Z,2022-06-25T08:04:54Z,"I have looked into the issue briefly. It seems that there is an issue in BCEL, which we use internally in AspectJ. You may want to track the issue [BCEL-362](https://issues.apache.org/jira/browse/BCEL-362), which I have just created. There is a chance that we are doing something wrong in AspectJ, but at the moment I believe that the issue is upstream.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5FgyH0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fh2sG,aspectj,1166502662,170,NA,maginseb,12196189,Sebastian Magin,,NA,2022-06-26T11:31:55Z,2022-06-26T11:31:55Z,"Makes sense, the issue happens in the BCEL-stack. Thank you, I will track the issue, that you have created!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Fh2sG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IXqlh,aspectj,1214163297,170,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-08-13T13:51:54Z,2022-08-13T13:51:54Z,"@maginseb, I have some news for you:

1. As @aclement told me, AspectJ was forked off of BCEL a very long time ago (more than 15 years ago at least). Several optimisations have been added, and the code was manually upgraded to more recent JDK versions step by step. The AspectJ derivative does not resemble upstream BCEL very much anymore.
2. It is still true that BCEL 6.5.0 is partially lacking support for condy (constant-dynamic), as I verified while using BCEL upon JaCoCo-enhanced files without using AspectJ at all. I might be able to fix this in BCEL, but that would not help you with AspectJ's BCEL fork, only when using upstream BCEL.
3. I also managed to back-port some condy enhancements to my local AspectJ development version, which avoids the `Unknown constant type 17` error.
4. The above fix exposes the next problem, which is actually unrelated to condy support as such but owed to the fact that by default, the AspectJ weaver inlines `@Around` advice. If at the same time you also instrument your aspect code with JaCoCo, the constant-dynamic variables named `$jacocoData` and their initialisation methods `$jacocoInit` created by JaCoCo in both the aspect and target classes clash with each other because of identical names and types, which causes
    * either `ArrayIndexOutOfBoundsException`, if the advice code wants to write coverage data to an index greater than the array size in the target method,
    * or, if you are lucky, only messed up coverage data for coverage indices shared by the advice and the target method.

In order to fix the issue in no. 4, you have two choices, which surprisingly even work with the current AspectJ release, because luckily they both avoid touching the existing JaCoCo condy code:

* Use option `-XnoInline` when using the AspectJ compiler or the load-time weaving agent. This enables you to weave aspects into your JaCoCo-instrumented code and get coverage data for both your aspect and application code. This is the recommended solution.
* If you only need coverage data for your application code and do not care about aspect coverage data, you can exclude your aspects from JaCoCo instrumentation using a Jacoco Maven option like `<excludes><exclude>**/*Aspect.*</exclude></excludes>`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IXqlh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IZ2U5,aspectj,1214735673,170,NA,maginseb,12196189,Sebastian Magin,,NA,2022-08-15T08:10:18Z,2022-08-15T08:10:18Z,"@kriegaex Thank you very much for your help. I greatly appreciate your effort. I have tried both of your recommendations, they work perfectly.

In case someone else stumbles across this issue: 

I have updated my example https://github.com/maginseb/jacoco-aspectj-error  It includes the recommended fixes now.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IZ2U5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/170,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IZ3RO,aspectj,1214739534,170,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-08-15T08:14:54Z,2022-08-15T08:14:54Z,"I locally also tested with a modified version of your original reproducer. Thanks for that, it is always easier to fix something reproducible. Besides, I have also provided a BCEL fix both [in AspectJ](https://github.com/eclipse/org.aspectj/pull/178) and for [BCEL itself](https://github.com/apache/commons-bcel/pull/139), because independently of the solution for this particular problem, both tools had problems parsing condy byte code.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5IZ3RO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,aspectj,1291246172,171,Binary type being null resulting in a NullPointerException,Cibor,5055049,,,CLOSED,2022-07-01T10:50:28Z,2024-02-12T03:39:01Z,"Hi,

In our project based on Java 11 I'm getting this error during compilation

_Internal compiler error: java.lang.Exception: java.lang.IllegalStateException: Error processing configuration meta-data on com.mycomnpany.PrdbProperties at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:172)
[ERROR]_ 

I debugged the compilation and discovered the root cause. In **LookupEnvironment** there is this piece of code (line 1050) inside the method **createBinaryTypeFrom**()

```
	if (cachedType != null && !cachedType.isUnresolvedType()) {
		if (cachedType.isBinaryBinding()) // sanity check... at this point the cache should ONLY contain unresolved types
			return (BinaryTypeBinding) cachedType;
		// it is possible with a large number of source files (exceeding AbstractImageBuilder.MAX_AT_ONCE) that a member type can be in the cache as an UnresolvedType,
		// but because its enclosingType is resolved while its created (call to BinaryTypeBinding constructor), its replaced with a source type
		return null;
	}
```

In my case cachedType is resolved but it isn't binary (whatever that means). So the method returns a null. The consequence is that after returning from this method to AjLookupEnvironment when this line is executed

```
		ContextToken tok = CompilationAndWeavingContext.enteringPhase(CompilationAndWeavingContext.WEAVING_INTERTYPE_DECLARATIONS,
				sourceType.sourceName);

```

the **sourceType** variable is null so a NullPointerException is thrown.

I am not sure what is happening, especially what a binary type is. Is there a quick workaround that I could apply to my project to make this error go away?

There seems to be nothing particular about the PrdbProperties class. A POJO containing the following annotations

```
import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F389U,aspectj,1172295508,171,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-01T12:29:54Z,2022-07-01T12:29:54Z,"Thanks for the detailed error description. What would really help the most, is a reproducer. Maybe a little GitHub project, ideally Maven, but whatever helps me to reproduce this is fine.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F389U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F4CW-,aspectj,1172317630,171,NA,Cibor,5055049,,,NA,2022-07-01T12:56:20Z,2022-07-01T12:56:20Z,"For now through trial and error I discovered that it was connected with this annotation

```java
@ConfigurationProperties(prefix = ""bts-report.prdb"")
```

Removing it fixed the compilation. Digging further I came accross issue [Spring Boot #4825](https://github.com/spring-projects/spring-boot/issues/4825) and found out that in my case indeed adding

```xml
<configuration>
  <sources/>
</configuration>
```

to the Maven config of the aspectj-maven-plugin indeed fixed the problem.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F4CW-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F42fK,aspectj,1172531146,171,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-01T16:44:36Z,2022-07-01T16:44:36Z,"Hm, that bug was fixed 5 years ago in JDT Core (the project containing ECJ), and hence it probably was fixed in AspectJ, too, because AJC forks and regularly refreshes JDT Core. I would really need a reproducer in order to assess whether we have a problem in AspectJ or not. Your XML snippet alone does not help much, because I have no idea what you are excluding from where and what the situation is.

I can only speculate, which I hate to do, because I could be completely wrong in assuming that you might be including an aspect designed for Spring AOP into an AspectJ compiler run, maybe leading to it being woven twice (once by AspectJ, then again by Spring AOP during runtime). I really cannot say.

If you would prepare an [MCVE](https://stackoverflow.com/help/mcve), we could both learn something. I would find out if there is an AspectJ problem, you could get an explanation what the real root cause of your problem is and whether your workaround is actually correct or simply sweeping a problem under the rug for now.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5F42fK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjI3b,aspectj,1200393691,171,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-31T10:14:24Z,2022-07-31T10:14:24Z,"@Cibor, because you did not respond within one full month after I responded the very same day you created the issue, I am closing this issue as invalid. I will consider reopening it, if you provide the MCVE I requested.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjI3b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/171,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg-_S,aspectj,1938026450,171,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-12T03:39:00Z,2024-02-12T03:39:00Z,"Note to myself: This error occurs in the exact same line 172 of `RoundDispatcher::handleProcessor` as #195, which actually is a problem upstream in ECJ, see https://github.com/eclipse-jdt/eclipse.jdt.core/issues/565. The difference is that the other problem is a `StackOverflowError`, while here we see an `IllegalStateException`. So, the issues might be unrelated. But at least, they occur in the in the same part of the JDT Core code and both seem to be related to annotation processing in one way or another.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg-_S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/174,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/174,aspectj,1304872237,174,How do I get all the AOP classes and methods configured for my project,188,3905303,韩天伟,htw315@gmail.com,CLOSED,2022-07-14T14:30:35Z,2022-07-14T20:02:38Z,"Configured in a project

 @Around(""execution(* *(..)) && (cflow(execution(* com.xxx.xx.service.*.*(..))))"""")

The project starts with fetching all classes or methods that require AOP, all classes and methods under the Service package

For example：
com.xxx.xx.service.impl.UserService.getUser
com.xxx.xx.service.impl.UserService.listUser
......
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/174/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/174,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Gn08K,aspectj,1184845578,174,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-14T20:01:58Z,2022-07-14T20:01:58Z,"Hello. This is not a forum to ask usage questions about AspectJ, but a bug tracker. So I am closing this issue. Better ask on Stack Overflow or the AspectJ users mailing list. But please provide an [MCVE](https://stackoverflow.com/help/mcve), i.e. a complete minimal sample reproducing the problem, and ask clear questions. I have no idea what you actually want to know. Like this I would be unable to help, no matter on which platform.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Gn08K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/175,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/175,aspectj,1311580564,175,AspectJ Internal Error: unable to add stackmap attributes. Unsupported class file major version 61,Ashish-Pandey-Imprivata,12154439,Ashish Pandey,,CLOSED,2022-07-20T17:40:36Z,2022-07-31T10:15:04Z,"When trying to use AspectJ version 1.9.9 (or 1.9.9.1) with JDK 17, I am getting below error:

AspectJ Internal Error: unable to add stackmap attributes. Unsupported class file major version 61

I have seen related errors that report issue with ""version 58"" or ""version 60"" etc e.g. https://bytemeta.vip/repo/allure-framework/allure2/issues/1378, but haven't found how to resolve this JDK17 specific issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/175/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/175,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5G9r7P,aspectj,1190575823,175,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-20T17:47:41Z,2022-07-20T17:47:41Z,Please add a link to a project reproducing the problem. Thank you. I cannot debug prose without code. My preliminary working hypothesis is that somehow am older AspectJ compiler version has crept into your build. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5G9r7P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/175,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjIuu,aspectj,1200393134,175,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-31T10:11:14Z,2022-07-31T10:11:14Z,"@Ashish-Pandey-Imprivata, because you did not respond within 11 days after I responded the very same day you created the issue, I am closing this issue as invalid. I will consider reopening it, if you provide the MCVE I requested.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjIuu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,aspectj,1316917442,176,Maven Compiler 3.10.0 creates invalid 'package-info.class' on Windows,turbanoff,741251,Andrey Turbanov,,CLOSED,2022-07-25T14:22:59Z,2022-08-15T19:57:17Z,"Recently we got confusing error from AspectJ maven plugin in our project:
```
[INFO] --- aspectj-maven-plugin:1.12.6:compile (default) @ dxServerFoundation ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] can't determine annotations of missing type com\devexperts\dxcore\api\script\package-info
when processing declare parents com\devexperts\dxcore\api\script\package-info
when weaving intertype declarations com\devexperts\dxcore\api\script\package-info
when batch building BuildConfig[null] #Files=131 AopXmls=#0
 [Xlint:cantFindType]
        <unknown source file>:<no line information>

[ERROR] can't determine implemented interfaces of missing type com\devexperts\dxcore\api\script\package-info
when processing declare parents com\devexperts\dxcore\api\script\package-info
when weaving intertype declarations com\devexperts\dxcore\api\script\package-info
when batch building BuildConfig[null] #Files=131 AopXmls=#0
 [Xlint:cantFindType]
        <unknown source file>:<no line information>

[ERROR] can't determine implemented interfaces of missing type com\devexperts\dxcore\api\script\package-info
when processing declare parents com\devexperts\dxcore\api\script\package-info
when weaving intertype declarations com\devexperts\dxcore\api\script\package-info
when batch building BuildConfig[null] #Files=131 AopXmls=#0
 [Xlint:cantFindType]
        <unknown source file>:<no line information>

[ERROR] can't determine modifiers of missing type com\devexperts\dxcore\api\script\package-info
when weaving intertype declarations com\devexperts\dxcore\api\script\package-info
when batch building BuildConfig[null] #Files=131 AopXmls=#0
 [Xlint:cantFindType]
        <unknown source file>:<no line information>
```
It seems that AspectJ tries to resolve interfaces of `package-info` and fails to do that.
I believe AspectJ shouldn't touch package-info.

How we invoke plugin:
```
<build>
    <plugins>
        <plugin>
            <groupId>com.nickwongdev</groupId>
            <artifactId>aspectj-maven-plugin</artifactId>
            <configuration>
                <aspectLibraries>
                    <aspectLibrary>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-aspects</artifactId>
                    </aspectLibrary>
                </aspectLibraries>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>compile</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HLxVN,aspectj,1194267981,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-25T15:54:39Z,2022-07-25T15:54:39Z,"Andrey, I am very busy. Please help me by providing an [MCVE](https://stackoverflow.com/help/mcve). These days, I do not have the cycles to prepare one by myself. Just post a link to a reproducer here on GitHub. Thank you so much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HLxVN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HPR4e,aspectj,1195187742,176,NA,turbanoff,741251,Andrey Turbanov,,NA,2022-07-26T08:43:52Z,2022-07-26T08:43:52Z,"Attached minimal project. To reproduce just run `mvn clean verify`
[dxcore-temp.zip](https://github.com/eclipse/org.aspectj/files/9188154/dxcore-temp.zip)
Fails for me with
```
INFO] --- aspectj-maven-plugin:1.12.6:compile (default) @ server ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] can't determine modifiers of missing type some\org\client\package-info
when weaving intertype declarations some\org\client\package-info
when processing compilation unit D:\temp\dxcore-temp\server\src\some\org\server\Runner.java
when batch building BuildConfig[null] #Files=1 AopXmls=#0
 [Xlint:cantFindType]
        <unknown source file>:<no line information>
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HPR4e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiPSM,aspectj,1200157836,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-30T13:27:24Z,2022-07-30T13:27:24Z,"Thank you, I briefly looked into this and can reproduce the problem. I am not sure yet if it is a problem is AspectJ proper or in AspectJ Maven. ~~The problem seems to be that somehow AJC thinks that `package-info` is a compilation unit, as if it would see the source file. But the `server` module depends on the `client` module in Maven, so I thought it would only see class files. That is the problem, because your sample package info will never yield a class file.~~ 

If you add an annotation with runtime scope to it, e.g.

```java
@Deprecated
package some.org.client;
```

a weavable class file will actually be generated, and AJC compilation passes. So for now, you can use that as a workaround. I will keep you posted if I find out how to fix this (and if so, in which project).

---

**Edit:** Correcting my previous statement, my directory listing in the IDE was not refreshed. Without the annotation, AJC or Javac also create `package-info.class`, but the decompiled result looks like:

```java
// $FF: synthetic class
interface some\org\client\package-info {
}
```

So, now it is pretty clear that AspectJ Maven is not the actual problem but really the AspectJ compiler or weaver itself, which needs to handle package info classes correctly. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiPSM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiP2U,aspectj,1200160148,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-30T13:42:42Z,2022-07-30T13:42:42Z,"Note to myself:

The annotated package name looks OK in _javap_:

```text
AJ_GH-176\client> javap -c -v target\classes\some\org\client\package-info.class

Classfile AJ_GH-176/client/target/classes/some/org/client/package-info.class
  Last modified 30.07.2022; size 186 bytes
  SHA-256 checksum ad43a307b32f742ad365d80055491bc6f8cb858850d42e691a7375591f905864
  Compiled from ""package-info.java""
interface some.org.client.package-info
  minor version: 0
  major version: 55
  flags: (0x1600) ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC
  this_class: #1                          // ""some/org/client/package-info""
  super_class: #3                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 0, attributes: 2
Constant pool:
  #1 = Class              #2              // ""some/org/client/package-info""
  #2 = Utf8               some/org/client/package-info
  #3 = Class              #4              // java/lang/Object
  #4 = Utf8               java/lang/Object
  #5 = Utf8               SourceFile
  #6 = Utf8               package-info.java
  #7 = Utf8               RuntimeVisibleAnnotations
  #8 = Utf8               Ljava/lang/Deprecated;
{
}
SourceFile: ""package-info.java""
RuntimeVisibleAnnotations:
  0: #8()
    java.lang.Deprecated
```

But somehow, the non-annotated package name looks weird (backslashes instead of dots) when decompiling the class file:

```text
AJ_GH-176\client> javap -c -v target\classes\some\org\client\package-info.class

Classfile AJ_GH-176/client/target/classes/some/org/client/package-info.class
  Last modified 30.07.2022; size 121 bytes
  SHA-256 checksum 94bf246b6c6af2586493b7b56e5fa3c626e15eb1c731949fa6bea459a2bc28ac
  Compiled from ""package-info.java""
interface some\org\client\package-info
  minor version: 0
  major version: 55
  flags: (0x1600) ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC
  this_class: #3                          // ""some\\org\\client\\package-info""
  super_class: #5                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 0, attributes: 1
Constant pool:
  #1 = Utf8               package-info.java
  #2 = Utf8               some\\org\\client\\package-info
  #3 = Class              #2              // ""some\\org\\client\\package-info""
  #4 = Utf8               java/lang/Object
  #5 = Class              #4              // java/lang/Object
  #6 = Utf8               SourceFile
{
}
SourceFile: ""package-info.java""
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiP2U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiRY4,aspectj,1200166456,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-30T14:22:52Z,2022-07-30T14:22:52Z,"Next finding: Javac - weirdly enough - creates a class name with backslash characters for the package info in the non-annotated case, at least under Windows (probably not on other OS platforms), i.e. the class files are platform-dependent(!!!), which I consider to be a bug in Javac:

```text
interface some\org\client\package-info
```

Whereas in the annotated one, the package name in the class file uses forward slashes as expected (_javap_ decompiles them as dots, though).
```text
interface some.org.client.package-info
```

Manually replacing the 3 backslash characters in the class file by forward slashes using a hex editor, fixes the problem for the subsequent server module compilation.

Interestingly, ECJ (and therefore AJC) use forward slashes in both cases, i.e. their byte code is more platform-independent than Javac's. If first we configure the client to be compiled by ECJ and then use AJC for the server, everything is fine. Anyway, because in this case the client module is compiled by Javac, but the server module is compiled by ACJ, the build fails. BTW, using Javac for client and ECJ for server also works. I.e., by exclusion I found out that the problem is only in ACJ, not in ECJ.

| `client` compiler | `server` compiler | works |
|-|-|-|
| Javac | Javac | yes |
| ECJ | Javac | yes |
| Javac | ECJ | yes |
| ECJ | ECJ | yes |
| Javac | AJC | no ⚡ |
| ECJ | AJC | yes |

Having narrowed down the problem to AJC, I hope I shall soon be able to find the root cause and fix it. But I am not sure if I have enough time to search for it this weekend.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HiRY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjF9g,aspectj,1200381792,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-07-31T08:57:59Z,2022-07-31T08:57:59Z,"@turbanoff, please try `1.9.10-SNAPSHOT` from https://oss.sonatype.org/content/repositories/snapshots and report back. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HjF9g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hse2F,aspectj,1202843013,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-08-02T15:35:56Z,2022-08-02T15:35:56Z,"@turbanoff, I would have appreciated some feedback, but I still have news for you: **All my debugging and the workaround in AspectJ were completely unnecessary!**

Just last night I noticed that I could not reproduce the problem with backslash characters in package-info class files when compiling directly with Javac, only with Maven Compiler. That is when I realised, it was totally unrelated to Javac and simply **bug [MCOMPILER-485](https://issues.apache.org/jira/browse/MCOMPILER-485) in plugin version 3.10.0, which is already fixed in 3.10.1.** Simply upgrade the plugin and be happy.

I guess, I can revert the commit in AspectJ. Because I am the only active committer, I might even remove that commit via force-push, even though it probably is going to give @aclement the screaming willies. 😉

I would never have expected the problem to actually be related to the plugin, because the plugin itself normally does not compile anything. But in [MCOMPILER-205](https://issues.apache.org/jira/browse/MCOMPILER-205), someone decided that it was a good idea to actually generate byte code manually in order to create package-info classes instead of simply using `-Xpkginfo:always` on Javac, because by default Javac really does not create those files if there are no runtime annotations on the package, just like I wrote initially, before falsely thinking that I was wrong about it:

> That is the problem, because your sample package info will never yield a class file.

Actually, I was right. By default, Javac does not create one without `-Xpkginfo:always`. The reason Maven Compiler generates it manually is that not all compilers support the option (such as ECJ, but ECJ always generates package info classes by default, unlike Javac). Anyway, Maven Compiler generates the class file via ASM and the initial class file generator had a bug, using the OS default file separator instead of following the JVM spec and always use `/`, also on Windows.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hse2F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HsiU0,aspectj,1202857268,176,NA,turbanoff,741251,Andrey Turbanov,,NA,2022-08-02T15:41:55Z,2022-08-02T15:41:55Z,"Wow. Amazing investigation!
I haven't had time to validate the AspectJ fix. I agree that it's better to revert the fix from AspectJ repo.
Updating maven-compiler-plugins seems helps.

Thanks a lot :)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5HsiU0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hst76,aspectj,1202904826,176,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-08-02T16:02:13Z,2022-08-02T16:02:13Z,"I pushed the obsolete commit to a separate branch for reference, just in case someone wants to look at it again in the future.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hst76/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/176,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hs6Yr,aspectj,1202955819,176,NA,michael-o,573017,Michael Osipov,1983-01-06@gmx.net,NA,2022-08-02T16:27:46Z,2022-08-02T16:27:46Z,I tripped over this as well. Is there a portable solution to this since {{-X}} isn't portable...? Willing to change the plugin for the better.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Hs6Yr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/180,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/180,aspectj,1361603521,180,oss-fuzz integration,aschaich,108736614,,,OPEN,2022-09-05T08:42:56Z,2022-09-05T08:42:56Z,"Hi all,

we have prepared the [Initial Integration](https://github.com/CodeIntelligenceTesting/oss-fuzz/commit/df5d8c2a679839415026c44b0f2b42590f49ed8a) of aspectj into [Google OSS-Fuzz](https://github.com/google/oss-fuzz) which will provide more security for your project.

 

Why do you need Fuzzing?
The Code Intelligence JVM fuzzer [Jazzer](https://github.com/CodeIntelligenceTesting/jazzer) has already found [hundreds of bugs](https://github.com/CodeIntelligenceTesting/jazzer#findings) in open source projects including for example [OpenJDK](https://nvd.nist.gov/vuln/detail/CVE-2022-21360), [Protobuf](https://nvd.nist.gov/vuln/detail/CVE-2021-22569) or [jsoup](https://github.com/jhy/jsoup/security/advisories/GHSA-m72m-mhq2-9p6c). Fuzzing proved to be very effective having no false positives. It provides a crashing input which helps you to reproduce and debug any finding easily. The integration of your project into the OSS-Fuzz platform will enable continuous fuzzing of your project by [Jazzer](https://github.com/CodeIntelligenceTesting/jazzer).

 

What do you need to do?
The integration requires the maintainer or one established project commiter to deal with the bug reports.

You need to create or provide one email address that is associated with a google account as per [here](https://google.github.io/oss-fuzz/getting-started/accepting-new-projects/). When a bug is found, you will receive an email that will provide you with access to ClusterFuzz, crash reports, code coverage reports and fuzzer statistics. More than 1 person can be included.

 

How Code Intelligence can support?
We will continue to add more fuzz targets to improve code coverage over time. Furthermore, we are permanently enhancing fuzzing technologies by developing new fuzzers and more bug detectors.

 

Please let me know if you have any questions regarding fuzzing or the OSS-Fuzz integration.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/180/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183,aspectj,1380226880,183,compile error w/ kotlinx.coroutines,kysantt,5044572,blahblahblah,,CLOSED,2022-09-21T02:42:05Z,2022-11-05T08:20:45Z,"The error happens at the below code when compiling with kotlinx.coroutines.
The current aspectj compiler can't recognize the last parameter on functional interface such as kotlin.jvm.functions.Function3.
In case of  kotlin.jvm.functions.Function3, tvs.length is 4 and typeParameters.length is 3. So, error happens.
Please see the below detailed logs for more information.

```java
if (tvs.length != typeParameters.length) {
  world.getMessageHandler()
    .handleMessage(
      new Message(""Mismatch when building parameterization map. For type '"" + this.signature +
                  ""' expecting ""+tvs.length+"":[""+toString(tvs)+""] type parameters but found ""+typeParameters.length+
                  "":[""+toString(typeParameters)+""]"", """",
        IMessage.ERROR, getSourceLocation(), null,
        new ISourceLocation[] { getSourceLocation() }));
} else {
  for (int i = 0; i < tvs.length; i++) {
    parameterizationMap.put(tvs[i].getName(), typeParameters[i]);
  }
}
```

error log:

```text
java.lang.Exception
        at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:996)
        at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:763)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:644)
        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:650)
        at org.aspectj.weaver.ResolvedType.isTopmostImplementor(ResolvedType.java:2395)
        at org.aspectj.weaver.ResolvedTypeMunger.matches(ResolvedTypeMunger.java:133)
        at org.aspectj.weaver.ConcreteTypeMunger.matches(ConcreteTypeMunger.java:81)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveNormalTypeMungers(BcelWeaver.java:1645)
        at org.aspectj.weaver.bcel.BcelWeaver.addNormalTypeMungers(BcelWeaver.java:1457)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1131)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:446)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:431)
        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:104)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:943)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:576)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:476)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1104)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:374)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
        at org.aspectj.tools.ajc.Main.main(Main.java:84)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5KsmUU,aspectj,1253205268,183,NA,alsu4r,107386296,Jaehoon Kim,,NA,2022-09-21T04:56:49Z,2022-09-21T04:56:49Z,"For simple code test, you can see the ajc compilation errors with the simple kotlin code below.

`    interface ICallerGen<in T> {
        public suspend fun call(value: T)
    }
    val fun3 = ICallerGen<Any?>::call //--> ajc build error Function3`
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5KsmUU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L1Ssm,aspectj,1272261414,183,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-10-08T08:12:30Z,2022-10-08T08:12:30Z,"I do not speak Kotlin. But I created a simple Maven project, compiled yout sample code and manually applied binary weaving to it (without an aspect, because you did not provide one). I did not experience any problems.

There are so many variables here - Java version, AspectJ version, Kotlin version, AspectJ compiler bytecode target version, aspect(s) used and many more - that I cannot say anything intelligent about your problem. So please, make it reproducible by providing me with a minimal, but complete example project. This is called an [MCVE](https://stackoverflow.com/help/mcve). I cannot analyse invisible code.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L1Ssm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/183,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5NwCot,aspectj,1304439341,183,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-05T08:20:28Z,2022-11-05T08:20:28Z,"I am closing this issue as invalid, because I could not reproduce the problem and there was no reaction to my question. Feel free to react and provide more information, then I can reopen it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5NwCot/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,aspectj,1382066331,184,Add support for JDK 19,krzyk,105730,Krzysztof Krasoń,Krzysztof.Krason@gmail.com,CLOSED,2022-09-22T08:42:28Z,2023-03-01T16:22:28Z,"Please add support for JDK 19.

Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K21RI,aspectj,1255887944,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-09-23T07:37:26Z,2022-09-23T07:37:26Z,"Please explain your use case. What in Java 19 is not working with AspectJ 1.9.9.1? Why do you need the AspectJ compiler to create Java 19 class files or the weaver to read them? Other than preview or incubating language features, there is nothing new in Java 19. Please explain, which features you are using and why. I wish to understand your impediment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K21RI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K2_IE,aspectj,1255928324,184,NA,krzyk,105730,Krzysztof Krasoń,Krzysztof.Krason@gmail.com,NA,2022-09-23T08:24:52Z,2022-09-23T08:24:52Z,"I have a project using dev.aspectj:aspectj-maven-plugin and I switched the project to compile for Java 19 and it fails with: 
```
[INFO] --- aspectj-maven-plugin:1.13.1:compile (default) @ fms ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] unrecognized single argument: ""-19""
        <unknown source file>:<no line information>

[ERROR] no sources specified
        <unknown source file>:<no line information>
```

So my use case is that I want to be able to compile with 19 as the target.

My config for the plugin is:
```
            <plugin>
                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.13.1</version>
                <configuration>
                    <showWeaveInfo>true</showWeaveInfo>
                    <source>19</source>
                    <target>19</target>
                    <Xlint>ignore</Xlint>
                    <complianceLevel>19</complianceLevel>
                    <encoding>UTF-8</encoding>
                    <verbose>false</verbose>
                    <sources>
                        <source>
                            <basedir>src/main/java/com/example</basedir>
                        </source>
                    </sources>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-aspects</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                        <version>1.9.9.1</version>
                    </dependency>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>1.9.9.1</version>
                    </dependency>
                </dependencies>
            </plugin>
```

I assumed it is the issue with aspectj part - hence reported it here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K2_IE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3awJ,aspectj,1256041481,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-09-23T10:26:01Z,2022-09-23T10:26:01Z,"Of course I know that AspectJ does not support Java 19 yet, because the upstream Eclipse Java compiler just released its Java 19 version a few days ago. I am working and do not have lots of cycles to work on AspectJ in my spare time, but eventually I will add Java 19 support. Anyway, you did not answer my questions. Please read again and reply accordingly. Thank you. At the moment, your issue description is simply a feature request without any explained reason or benefit.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3awJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3mr-,aspectj,1256090366,184,NA,krzyk,105730,Krzysztof Krasoń,Krzysztof.Krason@gmail.com,NA,2022-09-23T11:22:31Z,2022-09-23T11:22:31Z,"The sole benefit is support current Java version. And yes it is a feature request.
Not sure what you want to see here - what I want to use from Java 19? I want to use the latest security fixes, new classes/methods added, test out preview features.
Java 18 has been obsoleted by 19 release so if a project wants to stay current (e.g. regarding security updates), it needs to upgrade.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3mr-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3orK,aspectj,1256098506,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-09-23T11:32:40Z,2022-09-23T11:32:40Z,"You can use all security fixes by compiling to compliance level 18 or lower while using JDK 19. If you want to test Java preview features, you can also do so without AspectJ for the time being.

What I wanted to find out is if you use AspectJ in any commercial environment and are somehow compelled to upgrade to the new preview language features. Obviously, you are not. You did not give any example of which Java 19 feature you urgently need to work with in AspectJ.

Maybe you can imagine that product maintainers prioritise raised issues. If you want me to prioritise this one, you need to give me a better reason than you simply wishing to play with the new preview features. Otherwise, maybe fixing bugs gets prioritised over upgrading JDK compatibility, given the very limited size of my time budget, not to mention Andy's which is even smaller (basically zero in his case).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5K3orK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LXTgY,aspectj,1264400408,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-10-01T15:36:00Z,2022-10-01T15:36:00Z,"I have a first Java 19 development version of AspectJ, mostly untested. I just quickly compiled an example for JEP 405: Record Patterns (Preview), which worked nicely.

At snapshot repository https://oss.sonatype.org/content/repositories/snapshots, you find version `1.9.10-SNAPSHOT` of AspectJ runtime, weaver, matcher and compiler (tools). If you use `dev.aspectj:aspectj-maven-plugin:1.13.1` and define a plugin dependency on the `org.aspectj:aspectjtools:1.9.10-SNAPSHOT` and use `<enablePreview>true</enablePreview>`, you should be good to go for a first test. You might also need to deactivate Maven Compiler Plugin (MCP) default executions like this, if your MCP version is not capable of building Java 19 code:

```xml
<executions>
  <execution>
    <id>default-compile</id>
    <phase>none</phase>
  </execution>
  <execution>
    <id>default-testCompile</id>
    <phase>none</phase>
  </execution>
</executions>
```

I am not sure if I will have more time this weekend to add proper tests to the AspectJ build, so you might bump into bugs. @krzyk, you asked for this feature somehwat cheekily without giving any good reason for me to invest time, other than ""I want to play with Java 19"". Now I am expecting you to test as much as possible and provide feedback, making this worthwhile for me and also helping yourself to get what you want.

@mdeinum, following up on our e-mails, I am also asking you to give it a spin.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LXTgY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LX93r,aspectj,1264573931,184,NA,mdeinum,606761,Marten Deinum,mdeinum@gmail.com,NA,2022-10-02T07:30:15Z,2022-10-02T07:30:15Z,"Works for my usecase. I use loadtime weaving and compile using Java19 with preview features enabled. Although I don't use them in this part of the project. I now get the expected behavior and no more ASM errors!. 

Thanks for tagging me, I was just about to write you an answer to the email (it worked compiling to Java18 as well as I don't use any preview features in this section). ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LX93r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LYA6A,aspectj,1264586368,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-10-02T08:43:16Z,2022-10-02T08:43:16Z,"Thanks for your feedback, @mdeinum. I am happy it works for you.

Yes, most people should have the same use case: They want to use the latest JDK (more conservative ones maybe the latest LTS) due to security fixes, but it does not necessarily mean that they need to use the latest Java language features, especially not preview ones or even incubating ones. Of course they want to try them, but they would never use them in business or widely used OSS projects, because a preview feature compiled by Java `n` will no longer work in Java `n+1`, not even if the same feature is in the next stage of preview or even final. They will have to recompile.

Anyway, maybe I can add some testing infrastructure to AspectJ and release 1.9.10 soon, even though I am not promising anything. On weekends this can depend not only on how long it takes to write the code, but also on things like weather or whoever of my friends calls me to meet up spontaneously. Sometimes even I have a bit of private life. 😁","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LYA6A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L1RHc,aspectj,1272254940,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-10-08T07:37:16Z,2022-10-08T07:37:16Z,"FYI, I could in principle release a new version of AspectJ, which will be 1.9.19 (not 1.9.10) in order to sync the minor-minor (1.9.x) version to the Java release in the future for users to more easily recognise the latest supported Java version of AspectJ. 1.19 would be even nicer, but minor versions (1.x) require an Eclipse review which I do not have time for.

Anyway, what is blocking the release? There are upstream issues with ECJ, the Eclipse Java Compiler with regard to preview feature implementation. I noticed those problems while creating simple smoke tests for AspectJ:
  * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/450
  * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/455
  * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/398
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=579360 (an older issue, still unsolved). Tracker bug on GitHub is https://github.com/eclipse-jdt/eclipse.jdt.core/issues/587.

I could either release AspectJ with known issues or wait for the upstream problems to be fixed. Let's see if someone from the resource-starved JDT Core team can take time to fix this anytime soon. They are really busy, juggling many balls at once.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5L1RHc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RIsW2,aspectj,1361233334,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-21T12:06:45Z,2022-12-21T12:06:45Z,"I have decided to no longer delay the 1.9.19 (Java 19) release and rather mention the open ECJ bugs in the release notes instead. I have added tests also for the buggy compiler features, but deactivated them for now. We can always activate them after the bugs will have bveen fixed.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RIsW2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WcI5n,aspectj,1450217063,184,NA,barisunsalhn,39624400,Barış,,NA,2023-03-01T14:11:19Z,2023-03-01T14:11:19Z,Is [this](https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/JavaVersionCompatibility.md) missing java 19?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WcI5n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/184,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Wc9WN,aspectj,1450431885,184,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-01T16:22:28Z,2023-03-01T16:22:28Z,"> Is [this](https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/JavaVersionCompatibility.md) missing java 19?

It was, indeed. I just fixed that. Nice catch!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Wc9WN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185,aspectj,1390201492,185,Apache-1.1 license obligations,waynebeaton,555569,Wayne Beaton,wayne.beaton@eclipse-foundation.org,CLOSED,2022-09-29T03:33:22Z,2022-10-01T07:51:45Z,"The project has some content that is under the Apache-1.1 license (see [org.aspectj.apache/bcel/Repository.java](https://github.com/eclipse/org.aspectj/blob/master/bcel-builder/src/main/java/org/aspectj/apache/bcel/Repository.java)).

According to the Apache-1.1 license:

> Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

AFAICT, this means that the license text in its entirety needs to be included in any JAR files that include Apache-1.1 content (e.g., the `aspectjweaver.jar` file).

Further, end user documentation needs to include a statement:

````
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       ""This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/).""
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
````

I believe that including the statement in the README probably gets us there.

Can a committer please make these changes in time for your next release? I do not believe that there is any need to go back and ""fix"" any existing releases.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LOAUw,aspectj,1261962544,185,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-09-29T08:44:17Z,2022-09-29T08:44:17Z,"Thanks for bringing up this issue. The AspectJ project does, however, acknowledge the use of BCEL, also mentioning its licence:

https://github.com/eclipse/org.aspectj/blob/67b1c353a02c335074a736ebf76a49bf24eefb19/docs/dist/LICENSE-AspectJ.html#L41-L46

Would that satisfy your requirement, or is there still a gap?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LOAUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LOEaY,aspectj,1261979288,185,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-09-29T08:57:23Z,2022-09-29T08:57:23Z,"I just checked. This licence file has always been part of the AspectJ installer download until version 1.9.6 (inclusive), which you can verify by downloading and installing AspectJ from https://www.eclipse.org/aspectj/. As of 1.9.7, this is no longer true, because after some Maven-related changes, we no longer build the product in the same way. It is my own oversight that I omitted the licence file as part of the documentation, which I no longer generated into the installer package, because I think that the online documentation is just fine. I am going to make sure that the licence file is going to be part of future releases again. Would it suffice to put the licence file into the installer package, or does it need to be part of all public artifacts, such as AspectJ runtime, weaver and tools?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LOEaY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/185,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LSRCJ,aspectj,1263079561,185,NA,waynebeaton,555569,Wayne Beaton,wayne.beaton@eclipse-foundation.org,NA,2022-09-30T04:11:58Z,2022-09-30T04:11:58Z,"Thanks for your prompt attention.

I'm sorry that I missed the reference in the documentation. So that should cover that.

My interpretation of the license is that it should be in all public artifacts. Ideally, somebody obtaining a JAR file from Maven Central should get the license.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5LSRCJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/188,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/188,aspectj,1411548601,188,Pitest Mutators,sanmibuh,15193703,David Belmez Vicente,sanmibuh@gmail.com,CLOSED,2022-10-17T13:04:56Z,2023-11-11T15:02:37Z,"Hello,
Using AspectJ with pitest, I have a false positive mutator. I think it is because of the null check that inserts AspectJ. At the generated class I see:

```java
public class DemoClass {
  public DemoClass() {
  }

  @MyAspect
  public int init() {
    JoinPoint var1 = Factory.makeJP(ajc$tjp_0, this, this);
    MyAspectImpl var10002 = MyAspectImpl.aspectOf();
    ProceedingJoinPoint var10003 = (ProceedingJoinPoint)var1;
    Annotation var10004 = ajc$anno$0;
    if (var10004 == null) {
      var10004 = ajc$anno$0 = DemoClass.class.getDeclaredMethod(""init"").getAnnotation(MyAspect.class);
    }

    return Conversions.intValue(init_aroundBody1$advice(this, var1, var10002, var10003, (MyAspect)var10004));
  }

  static {
    ajc$preClinit();
  }
}
```

And the report returns:

<img width=""779"" alt=""image"" src=""https://user-images.githubusercontent.com/15193703/196180360-a72cbe61-63c5-4907-8e9a-37d175806238.png"">


I have created this demo repo for check the issue:  https://github.com/sanmibuh/pitest-aspectj
You could check running `./gradlew clean build pitest` 

Im not sure if the problem if on pitest or in aspectj so I have created an issue at Pitest also https://github.com/hcoles/pitest/issues/1097","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/188/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/188,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5MV_gH,aspectj,1280833543,188,NA,sanmibuh,15193703,David Belmez Vicente,sanmibuh@gmail.com,NA,2022-10-17T13:07:56Z,2022-10-17T13:07:56Z,"Maybe if AspectJ adds a `Generated` named annotation in the injected code it could be fixed 🤔 
https://github.com/hcoles/pitest/issues/347#issuecomment-301184718
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5MV_gH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/188,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5rsikJ,aspectj,1806838025,188,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-11T15:00:30Z,2023-11-11T15:00:30Z,"I understand how that would be helpful for you when using pitest, but I do not feel inclined to add extra annotations to AspectJ just to address this. I am and have been the only active developer for a while now, and in addition to simply not having the cycles to implement and thoroughly test this, it also seems to be risky. AspectJ is used in lots of enterprise software, and I want to avoid breaking anything or adding more overhead than necessary to class files, maybe making classes too big for the JVM in the process, just to satisfy the needs of a testing tool. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5rsikJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/189,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/189,aspectj,1411693322,189,@DeclareAnnotation Warning,ameti,6298453,Ardit Meti,arditmeti@gmail.com,CLOSED,2022-10-17T14:33:51Z,2023-01-07T14:00:17Z,"Any idea how to remove the warning:

`<Unknown> [warning] Found @DeclareAnnotation while current release does not support it (see 'org.aspectj.weaver.bcel.AtAjAttributes')
`
I haven't used it anywhere in the code. The only lib that is using it is org.aspectj.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/189/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/189,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhCvK,aspectj,1367616458,189,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-29T22:30:46Z,2022-12-29T22:30:46Z,"Please link to a minimal GitHub project reproducing the problem. Otherwise, I will close the issue as invalid. For now, I am assuming that it is not a bug in AspectJ but a simple usage question, which does not belong here but on Stack Overflow or the AspectJ users mailing list. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhCvK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190,aspectj,1416366038,190,TABLESWITCH throw ArrayIndexOutOfBoundsException when the high value is Integer.MAX_VALUE,wurensen,11225172,LanceWu,wurensen@gmail.com,CLOSED,2022-10-20T10:22:38Z,2022-12-30T09:14:43Z,"the source code will cause ArrayIndexOutOfBoundsException if the `high` value of `tableswitch` is Integer.MAX_VALUE：

```java
	/**
	 * Read needed data (e.g. index) from file.
	 */
	public TABLESWITCH(ByteSequence bytes) throws IOException {
		super(Constants.TABLESWITCH, bytes);

		int low = bytes.readInt();
		int high = bytes.readInt();

		matchLength = high - low + 1;
		fixedLength = (short) (13 + matchLength * 4);
		length = (short) (fixedLength + padding);

		match = new int[matchLength];
		indices = new int[matchLength];
		targets = new InstructionHandle[matchLength];

// if high=Integer.MAX_VALUE, it cause java.lang.ArrayIndexOutOfBoundsException
		for (int i = low; i <= high; i++) {
			match[i - low] = i;
		}

		for (int i = 0; i < matchLength; i++) {
			indices[i] = bytes.readInt();
		}
	}
```
exception like this:
```text
java.lang.RuntimeException: Crashed whilst crashing with this exception: org.aspectj.apache.bcel.generic.ClassGenException: java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1728)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1651)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1418)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1192)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterCompiling(AjPipeliningCompilerAdapter.java:374)
        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.java:69)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:428)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1096)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:374)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.AJXTask.call(AJXTask.kt:137)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.DoAspectProcedure.runAJXTask(DoAspectProcedure.kt:252)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.DoAspectProcedure.processDirectoryInput(DoAspectProcedure.kt:158)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.DoAspectProcedure.access$processDirectoryInput(DoAspectProcedure.kt:12)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.DoAspectProcedure$process$1$1$1.invoke(DoAspectProcedure.kt:32)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.procedure.DoAspectProcedure$process$1$1$1.invoke(DoAspectProcedure.kt:31)
        at com.hujiang.gradle.plugin.android.aspectjx.internal.concurrent.BatchTaskScheduler$schedule$1.call(BatchTaskScheduler.kt:36)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.aspectj.apache.bcel.generic.ClassGenException: java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
        at org.aspectj.apache.bcel.generic.Instruction.readInstruction(Instruction.java:233)
        at org.aspectj.apache.bcel.generic.InstructionList.<init>(InstructionList.java:190)
        at org.aspectj.apache.bcel.generic.MethodGen.<init>(MethodGen.java:211)
        at org.aspectj.weaver.bcel.LazyMethodGen.initialize(LazyMethodGen.java:370)
        at org.aspectj.weaver.bcel.LazyMethodGen.getReturnType(LazyMethodGen.java:917)
        at org.aspectj.weaver.bcel.LazyMethodGen.toShortString(LazyMethodGen.java:560)
        at org.aspectj.weaver.bcel.LazyMethodGen.print(LazyMethodGen.java:601)
        at org.aspectj.weaver.bcel.LazyClassGen.printOne(LazyClassGen.java:918)
        at org.aspectj.weaver.bcel.LazyClassGen.print(LazyClassGen.java:877)
        at org.aspectj.weaver.bcel.LazyClassGen.toLongString(LazyClassGen.java:865)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1726)
        ... 27 more
```
You can reproduce the bug if the weaved source code contain this:
```java
    private static final int CASE_1 = Integer.MAX_VALUE;
    private static final int CASE_2 = Integer.MAX_VALUE - 1;
    private static final int CASE_3 = Integer.MAX_VALUE - 2;

    public String switchTest(int i) {
        String content = """";
        switch (i) {
            case CASE_1:
                content = ""CASE_1"";
                break;
            case CASE_2:
                content = ""CASE_2"";
                break;
            case CASE_3:
                content = ""CASE_3"";
                break;
            default:
                break;
        }
        return content;
    }
```
I fixed it like this:
```java
    /**
     * Read needed data (e.g. index) from file.
     *
     * @param bytes bytes
     * @throws IOException IOException
     */
    public TABLESWITCH(ByteSequence bytes) throws IOException {
        super(Constants.TABLESWITCH, bytes);

        int low = bytes.readInt();
        int high = bytes.readInt();

        matchLength = high - low + 1;
        fixedLength = (short) (13 + matchLength * 4);
        length = (short) (fixedLength + padding);

        match = new int[matchLength];
        indices = new int[matchLength];
        targets = new InstructionHandle[matchLength];

        // bugfix: case使用的值可能是Integer.MAX_VALUE，i++后值溢出变为负数导致数组越界，所以需要重新修改算法
//        for (int i = low; i <= high; i++) {
//            match[i - low] = i;
//        }
        for (int i = 0; i < matchLength; i++) {
            match[i] = low + i;
        }

        for (int i = 0; i < matchLength; i++) {
            indices[i] = bytes.readInt();
        }
    }
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Nxck3,aspectj,1304807735,190,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-06T13:59:31Z,2022-11-06T13:59:31Z,"@wurensen, I cannot reproduce the problem. Please provide more context information about JDK version and flavour, AspectJ version and OS platform used. Ideally, extend the example to be a full [MCVE](https://stackoverflow.com/help/mcve) including Maven build or exact compiler options. If I cannot reproduce it, I cannot fix it either.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Nxck3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhCYn,aspectj,1367615015,190,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-29T22:25:55Z,2022-12-29T22:25:55Z,"@wurensen, because you did not react to my inquiry and failed to help me reproduce the problem, I am assuming that you either cannot reproduce it anymore or simply do not care about the problem enough to get it solved. Therefore, I am closing the issue. We can reopen it, if you make it reproducible for me. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhCYn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/190,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhuzC,aspectj,1367796930,190,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-30T08:45:28Z,2022-12-30T08:45:28Z,"@wurensen: OK, I just had an idea and did your job, preparing a reproducer for this problem. Actually, the problem does not occur if we just have a Java file with that kind of code. Additionally, we need an aspect processing that class. Only then will the BCEL `TABLESWITCH` be used at all, not during normal Java compilation. We actually need to weave something. I.e., the reproducer is:

```java
public class SwitchCaseWith_Integer_MAX_VALUE {
  public static void main(String[] args) {
    System.out.println(switchTest(Integer.MAX_VALUE));
  }

  static String switchTest(int i) {
    switch (i) {
      case Integer.MAX_VALUE:
        return ""CASE_1"";
      default:
        return """";
    }
  }
}
```

```java
aspect MyAspect {
  before() : execution(* switchTest(*)) {
    System.out.println(thisJoinPoint);
  }
}
```

I can also confirm that your suggested fix works. Thanks for that.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RhuzC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/191,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/191,aspectj,1420473839,191,Parsing https://www.eclipse.org/aspectj/dtd/aspectj.dtd file fails,omeraha,43315856,Omer Aharonian,,CLOSED,2022-10-24T08:52:18Z,2022-10-30T10:29:50Z,"Hi all,
Seems like `https://www.eclipse.org/aspectj/dtd/aspectj.dtd` has changed, and now failed to be parsed (see details [here](https://stackoverflow.com/questions/74158534/aop-is-failing-while-build-sbt-assembly))
The actual error is:
```
org.xml.sax.SAXParseExceptionpublicId: -//AspectJ//DTD//EN; systemId: http://www.eclipse.org/aspectj/dtd/aspectj.dtd; lineNumber: 1; columnNumber: 2; The markup declarations contained or pointed to by the document type declaration must be well-formed.
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/191/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/191,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5NQoOi,aspectj,1296204706,191,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-10-30T10:29:26Z,2022-10-30T10:29:26Z,"The DTD has not changed. Maybe the Eclipse website or the parsing tool you use no longer support unencrypted HTTP connections. If I open the file on the browser, I see an HTTPS URL. Maybe your tool does not support redirects or something. Like others said already on Stack Overflow, try HTTPS instead of HTTP. I am closing this issue as invalid, but feel free to comment if you disagree, then I might consider reopening it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5NQoOi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,aspectj,1443598790,192,"Apply fix of BCEL-363 (CVE-2022-42920) to AspectJ's ""own BCEL""",daniel-matheis-vivavis,117902694,Daniel Matheis @ VIVAVIS,,CLOSED,2022-11-10T10:01:39Z,2024-05-01T08:47:58Z,"see BCEL issue https://issues.apache.org/jira/browse/BCEL-363
resp. https://github.com/apache/commons-bcel/pull/147 

It seems that Aspectj's ""own BCEL"" also contains this problem.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OIG6-,aspectj,1310748350,192,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-10T18:45:56Z,2022-11-10T18:45:56Z,"Very well possible, AspectJ's BCEL is derived from an ancient version. Which concrete problem are you running into with AspectJ? Where is a reproducer for that problem?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OIG6-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OKYGC,aspectj,1311342978,192,NA,daniel-matheis-vivavis,117902694,Daniel Matheis @ VIVAVIS,,NA,2022-11-11T07:42:07Z,2022-11-11T07:42:07Z,"The regular user of AspectJ won't have a problem with that security issue I would say, as long as AspectJ does not try to write ""too many"" constant pool entries which would corrput the class file.
It is just that the contained code is (nearly) identical to the one that was fixed elsewhere and thus contains the problem described by the CVE-2022-42920  (which does not tell how to exploit that actually.)

Generally would be interesting to know why this ""AspectJ private BCEL"" is/was necessary.
Wouldn't it be best not to repackage it but to use the ""latest and greatest"" BCEL as external dependency?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OKYGC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OPhuq,aspectj,1312693162,192,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-13T10:10:07Z,2022-11-13T10:10:07Z,"> Generally would be interesting to know why this ""AspectJ private BCEL"" is/was necessary.

That was done many years before I started contributing to AspectJ. I think BCEL was used as a starting point for AspectJ-specific modifications and maybe refreshed from upstream in the olden days, but then it ended up simply being updated manually as the Java language and AspectJ evolved. Now the code bases have diverged so much that it would be a major effort (maybe at the scale of a rewrite) to separate our changes from the original BCEL and keep it in a separate, updateable patch state. BTW, AspectJ also uses ASM, and if AspectJ was to be rewritten today, probably it should use only of of them.

> Wouldn't it be best not to repackage it but to use the ""latest and greatest"" BCEL as external dependency?

Like I said before, it is not just an inlined BCEL version but a heavily modified one.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OPhuq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/192,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PnSBF,aspectj,1335697477,192,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2022-12-02T19:14:24Z,2022-12-02T19:14:24Z,"> Generally would be interesting to know why this ""AspectJ private BCEL"" is/was necessary

Basically we needed to move to a lazier model of unpacking class files for performance/resource-usage reasons (for example, don't unnecessarily unpack the line number table if no-one is asking for line number data or making changes that cause it to need adjustment). If revisiting it now, we'd probably switch to Asm because we also have to use asm to compute stack maps. (unless bcel has added that? maybe it has by now? I seem to recall at the time, many years ago, bcel was in no longer really being maintained).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PnSBF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/194,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/194,aspectj,1456879247,194,LTW classloader lock prevents multi-thread usage,turbanoff,741251,Andrey Turbanov,,OPEN,2022-11-20T12:08:14Z,2022-11-20T12:28:06Z,"Hello.
In our project we use LTW in development process. Recently we improved one of the part of our application to use multiple thread to load classes (to speed up application start). But results of parallelizing is far from idea. Threads were mostly blocked by this lock:
https://github.com/eclipse/org.aspectj/blob/063d3cc59aad88f02bc82bc6e417a828dae9ef2d/loadtime/src/main/java/org/aspectj/weaver/loadtime/Aj.java#L99
![image](https://user-images.githubusercontent.com/741251/202900689-603bd052-1a78-4bef-b728-858eda4426dd.png)
It was added in 2006 in this commit - https://github.com/eclipse/org.aspectj/commit/397a19d441eaf7fdc67e841232b410358b48ba11 in attempt to fix https://bugs.eclipse.org/bugs/show_bug.cgi?id=151182
I wounder if this lock is still required? Or we can drop it to improve LTW performance?. May be it could be replaced with a few different locks instead.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/194/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/194,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OvrHu,aspectj,1321120238,194,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-20T12:28:05Z,2022-11-20T12:28:05Z,"@aclement, can you spare some cycles to take a look?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5OvrHu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195,aspectj,1465399112,195,APT problem: StackOverflowError in RoundDispatcher.handleProcessor,kriegaex,1537384,Alexander Kriegisch,,OPEN,2022-11-27T10:40:31Z,2025-01-10T05:30:14Z,"This issue came up in https://github.com/dev-aspectj/aspectj-maven-plugin/issues/108, but it is not a problem concerning the Maven plugin. Instead, it seems to be related to annotation processing (APT) support for AJC:

There is an annotation processor on the classpath, namely `com.querydsl:querydsl-apt:5.0.0-jakarta`. It contains a file _META-INF/services/javax.annotation.processing.Processor_ with the following content:

```text
com.querydsl.apt.jpa.JPAAnnotationProcessor
```

That annotation processor handles the `@jakarta.persistence.MappedSuperclass` annotations found on two classes in the sample repository.

While Javac (used by Maven Compiler Plugin) can correctly generate code, it seems as if the annotation processor throws off AJC like this (error message with additional line breaks):

```text
...\baz\src\main\java\com\foobar\showme\baz\TimestampedJPADurable.java [error]
Internal compiler error: java.lang.Exception:
java.lang.StackOverflowError at 
  org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:172)
(no source information available)
```

A reproducer is at https://github.com/zenbones/showme. Thanks to @zenbones for reporting the problem.

See also https://github.com/dev-aspectj/aspectj-maven-plugin/issues/108#issuecomment-1328225704 for an AspectJ Maven workaround which can also be applied to the AJC command line: letting Javac take care of annotation processing and then using `-proc:none` for AJC.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PNGky,aspectj,1328834866,195,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-28T10:15:46Z,2022-11-28T10:15:46Z,"I debugged into AJC, because unfortunately the upstream Eclipse Jave Compiler (ACJ) underneath AJC does not log a full stack trace for the stack overflow error. Here it is:

```text
java.lang.StackOverflowError
	at com.querydsl.apt.ExtendedTypeFactory$2.visitBase(ExtendedTypeFactory.java:207)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:252)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:201)
	at org.aspectj.org.eclipse.jdt.internal.compiler.apt.model.TypeVariableImpl.accept(TypeVariableImpl.java:77)
	at java.compiler@19.0.1/javax.lang.model.util.AbstractTypeVisitor6.visit(AbstractTypeVisitor6.java:91)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:254)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:201)
	at org.aspectj.org.eclipse.jdt.internal.compiler.apt.model.TypeVariableImpl.accept(TypeVariableImpl.java:77)
	at java.compiler@19.0.1/javax.lang.model.util.AbstractTypeVisitor6.visit(AbstractTypeVisitor6.java:91)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:254)
	at com.querydsl.apt.ExtendedTypeFactory$2.visitTypeVariable(ExtendedTypeFactory.java:201)
       (and many more repetitions of the last 4 lines)
```

It would be interesting to see if that works in plain vanilla ECJ or is AJC-specific. I will try that next after work.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PNGky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PNe2d,aspectj,1328934301,195,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-11-28T11:39:34Z,2022-11-28T11:39:34Z,"Update (CC @zenbones): I quickly checked during a break, and it definitely is not an AJC problem. The same occurs when compiling the project with plain vanilla ECJ 3.31.0. And also there `-proc:none` makes the project compile, but of course in that case no code generation via APT takes place.

**Update:** Bug ticket https://github.com/eclipse-jdt/eclipse.jdt.core/issues/565 created.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5PNe2d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/195,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Z407Q,aspectj,2581810896,195,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-10T05:30:13Z,2025-01-10T05:30:13Z,"According to https://github.com/eclipse-jdt/eclipse.jdt.core/issues/565#issuecomment-2581809512, the JDT Core issue should be fixed since ECJ 3.39.0 (Eclipse 2024-09). Upgrading the version in the AspectJ fork should fix it in ACJ, too. To do: verify.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Z407Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197,aspectj,1481749408,197,LTW Weaving  a class which qualified name contains a '-' error,KimmingLau,49543702,Kimming Lau,294001791@qq.com,CLOSED,2022-12-07T12:02:50Z,2023-01-05T11:09:07Z,"I had a curator-test dependency and use aop.xml which had a includeTypePattern  
But it always throw the following  exception when my application start:  
It seems that aspectj doesn't support a class which qualified name contain a '-' ?

```text
[2022-12-07 19:52:15.979] [ERROR] [main] [org.aspectj.weaver.loadtime.Aj] >>> [IllegalStateException] msg=org/apache/curator-test/shaded/com/google/common/collect/AbstractMultimap
java.lang.IllegalStateException: Expecting .,<, or ;, but found curatortest while unpacking <K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/curator-test/shaded/com/google/common/collect/Multimap<TK;TV;>;
	at org.aspectj.util.GenericSignatureParser.parseClassTypeSignature(GenericSignatureParser.java:204)
	at org.aspectj.util.GenericSignatureParser.parseAsClassSignature(GenericSignatureParser.java:59)
	at org.aspectj.weaver.UnresolvedType.forGenericTypeSignature(UnresolvedType.java:275)
	at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:516)
	at org.aspectj.weaver.tools.WeavingAdaptor.ensureDelegateInitialized(WeavingAdaptor.java:537)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:846)
	at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:361)
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:116)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.vip.demo.TesstBean.init(TesstBean.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:333)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization_aroundBody2(InitDestroyAnnotationBeanPostProcessor.java:157)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$AjcClosure3.run(InitDestroyAnnotationBeanPostProcessor.java:1)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:167)
	at com.vip.tiger.boot.env.stat.bean.BeanCreationAspect.postProcessBeforeInitialization(BeanCreationAspect.java:219)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:155)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization_aroundBody0(AbstractAutowireCapableBeanFactory.java:440)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AjcClosure1.run(AbstractAutowireCapableBeanFactory.java:1)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:167)
	at com.vip.tiger.boot.env.stat.bean.BeanCreationAspect.applyBeanPostProcessorsBeforeInitialization(BeanCreationAspect.java:208)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:438)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:771)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:763)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:438)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:339)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1329)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1318)
	at com.vip.demo.Application.main(Application.java:12)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5P8XDg,aspectj,1341223136,197,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-07T16:17:47Z,2022-12-07T16:17:47Z,"Please provide a minimal reproducer ([MCVE](https://stackoverflow.com/help/mcve)), ideally a Maven project on GitHub. You cannot expect me to create one by trial & error myself. Please also make sure to use proper markdown formatting for code or error logs, so I do not have to reformat your messages. Thanks in advance.

Besides, hyphens in package names are illegal according to Java [package naming conventions](https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html). Looking at the [Apache Curator API docs](https://curator.apache.org/apidocs/index.html), however, I cannot detect any hyphens there. Maybe there is a bug in the shading procedure for your artifact or for Curator's. At first glance, it does not look like an AspectJ bug.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5P8XDg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RNmJ2,aspectj,1362518646,197,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-22T07:50:15Z,2022-12-22T07:50:15Z,"@KimmingLau, you did not respond for two weeks. If you choose not to provide a reproducer project, I will close the issue eventually. If you want this to be taken care of, please cooperate.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RNmJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/197,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RyEjo,aspectj,1372080360,197,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-05T11:08:52Z,2023-01-05T11:08:52Z,No response for 4 weeks → closing as invalid.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RyEjo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/198,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/198,aspectj,1485274186,198,@DeclareMixin introduces a race condition,zenbones,314404,David Berkman,david.berkman@grenadefish.net,CLOSED,2022-12-08T19:30:33Z,2023-01-04T14:22:05Z,"When using @DeclareMixin you provide a static method for returning a new instance of the mixed in type. Further annotations provide that mixed in instance to methods via 'this(<mixed in type>)' in the point cut. In the methods on which the point cut operates you get code like...

```
public void someAspectedMethod () {

if (injectedFieldReferenceToMixedInType == null) {
  injectedFieldReferenceToMixedInType = callToMixedInGeneratorDeclaredAs@DeclareMixin();
}

  ...
  original code of method which presumable uses the mixed in type
  ...
}
```

This code injects a race condition where 2 different threads calling two point cut methods using the mixed in type can get 2 different instances of the mixed in type. The injected field is overwritten by one of those calls because the setting of the injected field is not synchronized. Properly, the field should not be directly set in the methods the point cut operates on, instead a new synchronized method should be added to the class which checks if the injected field is null and calls the mix in generator, and that is method which should be called in the point cut altered code. Either that or the injected field should be declared volatile, such that the null check is no longer a race condition.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/198/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/198,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLeRl,aspectj,1345184869,198,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-10T08:31:00Z,2022-12-10T08:31:00Z,"@zenbones, Andy as a project lead is basically inactive due to his daytime job, and the situation is not much better on my part. You would help me get started and save some cycles by providing a test which reproduces the race condition. All things related to byte code generation are not my strong suit anyway, so usually I am reluctant to touch that stuff. But a reproducer might encourage me to take a closer look.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLeRl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,aspectj,1485759304,199,'ClassFormatError: Duplicate method name' during runtime when using lambda as ITD field value,cts3,10166998,,,OPEN,2022-12-09T01:35:00Z,2023-01-05T09:33:24Z,"Hi,
I want that two statement(variable, method) including lambda was added Testjava class.
So after code was written as below code, I compiled code.
But when running code, It occur duplicate method runtime error with lambda statement.

There are below error log, source code and build command.

Build environment
```text
java version - openjdk version ""1.8.0_292""
aspectj version - 1.9.9.1
```

**Error log of runtime**
```text
Error: A JNI error has occurred, please check your installation and try again
Exception in thread ""main"" java.lang.ClassFormatError: Duplicate method name ""lambda$0"" with signature ""(Ljava.lang.String;)V"" in class file Testjava
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
        at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:601)
```

**Source code**
Testjava.java
```java
public class Testjava {
  public static void main(String[] argv) {
      Testjava tj = new Testjava();
      tj.testMethod(1);
  }
 
  void testMethod(int a) {
      System.out.println(""call testMethod, "" + a);
  }
}
```

TestjavaAO.aj
```java
import java.util.function.Consumer;

privileged aspect TestjavaAO {
    private Consumer<String> Testjava.sConsumer2 = task -> { System.out.println(""call sConsumer2 "" + task); };

    private void Testjava.assignLambda() {
        Consumer<String> consumer = (String task) -> { System.out.println(""call Testjava.assignLambda""); };
        consumer.accept(""hello world"");
    }

    void logAll() {
        Consumer<String> sConsumer1 = (String task) -> { System.out.println(""call logAll""); };
        sConsumer1.accept(""hello world"");
    }

    void around(Testjava tj, int a):
            execution(* Testjava.testMethod(int)) &&
            within(Testjava) &&
            this(tj) && args(a) {
        proceed(tj, a+1);
        logAll();
        tj.assignLambda();
        tj.sConsumer2.accept(""test"");
    }
}
```

**build command**
```text
$ bin/ajc -inpath lib/aspectjrt.jar Testjava.java TestjavaAO.aj -outjar test.jar -showWeaveInfo -1.8
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLe6w,aspectj,1345187504,199,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-10T08:45:50Z,2022-12-10T08:45:50Z,"Thanks for raising this issue. It really looks like a bug to me at first glance. Like I just said in another issue: Andy as a project lead is basically inactive due to his daytime job. All things related to byte code generation are not my strong suit anyway, so usually I am reluctant to touch that stuff. But I might be able to at least take a look during holiday season, using your reproducer to guide me to the root cause. But that something is wrong with the byte code becomes clear when using _javap_:

```text
$ javap -v bin\Testjava.class

Classfile /C:/Users/Alexander/Documents/java-src/AJ_GH_199_DuplicateMethodErrorLambda/bin/Testjava.class
  Last modified 10.12.2022; size 4205 bytes
  SHA-256 checksum 058ba8cc7573df88330269352aaa19c829a53bc3ae6163fe04ab6971676e7da4
  Compiled from ""Testjava.java""
public class Testjava
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #1                          // Testjava
  super_class: #3                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 10, attributes: 3
Constant pool:
    #1 = Class              #2            // Testjava
    #2 = Utf8               Testjava
    #3 = Class              #4            // java/lang/Object
    #4 = Utf8               java/lang/Object
    #5 = Utf8               <init>
    #6 = Utf8               ()V
    #7 = Utf8               Code
    #8 = Methodref          #3.#9         // java/lang/Object.""<init>"":()V
    #9 = NameAndType        #5:#6         // ""<init>"":()V
   #10 = Utf8               LineNumberTable
   #11 = Utf8               LocalVariableTable
   #12 = Utf8               this
   #13 = Utf8               LTestjava;
   #14 = Utf8               main
   #15 = Utf8               ([Ljava/lang/String;)V
   #16 = Utf8               org.aspectj.weaver.MethodDeclarationLineNumber
   #17 = Methodref          #1.#9         // Testjava.""<init>"":()V
   #18 = Methodref          #1.#19        // Testjava.testMethod:(I)V
   #19 = NameAndType        #20:#21       // testMethod:(I)V
   #20 = Utf8               testMethod
   #21 = Utf8               (I)V
   #22 = Utf8               argv
   #23 = Utf8               [Ljava/lang/String;
   #24 = Utf8               tj
   #25 = Fieldref           #26.#28       // java/lang/System.out:Ljava/io/PrintStream;
   #26 = Class              #27           // java/lang/System
   #27 = Utf8               java/lang/System
   #28 = NameAndType        #29:#30       // out:Ljava/io/PrintStream;
   #29 = Utf8               out
   #30 = Utf8               Ljava/io/PrintStream;
   #31 = Class              #32           // java/lang/StringBuilder
   #32 = Utf8               java/lang/StringBuilder
   #33 = String             #34           // call testMethod,
   #34 = Utf8               call testMethod,
   #35 = Methodref          #31.#36       // java/lang/StringBuilder.""<init>"":(Ljava/lang/String;)V
   #36 = NameAndType        #5:#37        // ""<init>"":(Ljava/lang/String;)V
   #37 = Utf8               (Ljava/lang/String;)V
   #38 = Methodref          #31.#39       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   #39 = NameAndType        #40:#41       // append:(I)Ljava/lang/StringBuilder;
   #40 = Utf8               append
   #41 = Utf8               (I)Ljava/lang/StringBuilder;
   #42 = Methodref          #31.#43       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #43 = NameAndType        #44:#45       // toString:()Ljava/lang/String;
   #44 = Utf8               toString
   #45 = Utf8               ()Ljava/lang/String;
   #46 = Methodref          #47.#49       // java/io/PrintStream.println:(Ljava/lang/String;)V
   #47 = Class              #48           // java/io/PrintStream
   #48 = Utf8               java/io/PrintStream
   #49 = NameAndType        #50:#37       // println:(Ljava/lang/String;)V
   #50 = Utf8               println
   #51 = Utf8               a
   #52 = Utf8               I
   #53 = Utf8               lambda$0
   #54 = String             #55           // call sConsumer2
   #55 = Utf8               call sConsumer2
   #56 = Methodref          #31.#57       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #57 = NameAndType        #40:#58       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #58 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
   #59 = Utf8               task
   #60 = Utf8               Ljava/lang/String;
   #61 = String             #62           // call Testjava.assignLambda
   #62 = Utf8               call Testjava.assignLambda
   #63 = Utf8               SourceFile
   #64 = Utf8               Testjava.java
   #65 = Utf8               Signature
   #66 = Utf8               Ljava/util/function/Consumer<Ljava/lang/String;>;
   #67 = Utf8               sConsumer2
   #68 = Utf8               Ljava/util/function/Consumer;
   #69 = Utf8               ajc$interMethod$TestjavaAO$Testjava$assignLambda
   #70 = Utf8               (LTestjava;)V
   #71 = NameAndType        #69:#70       // ajc$interMethod$TestjavaAO$Testjava$assignLambda:(LTestjava;)V
   #72 = Utf8               TestjavaAO
   #73 = Class              #72           // TestjavaAO
   #74 = Methodref          #73.#71       // TestjavaAO.ajc$interMethod$TestjavaAO$Testjava$assignLambda:(LTestjava;)V
   #75 = Utf8               Synthetic
   #76 = Utf8               ajc$interMethodDispatch2$TestjavaAO$assignLambda
   #77 = NameAndType        #67:#68       // sConsumer2:Ljava/util/function/Consumer;
   #78 = Fieldref           #1.#77        // Testjava.sConsumer2:Ljava/util/function/Consumer;
   #79 = Utf8               ajc$get$sConsumer2
   #80 = Utf8               (LTestjava;)Ljava/util/function/Consumer;
   #81 = Utf8               ajc$set$sConsumer2
   #82 = Utf8               (LTestjava;Ljava/util/function/Consumer;)V
   #83 = Utf8               ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2
   #84 = NameAndType        #83:#70       // ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2:(LTestjava;)V
   #85 = Methodref          #73.#84       // TestjavaAO.ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2:(LTestjava;)V
   #86 = Utf8               testMethod_aroundBody0
   #87 = Utf8               (LTestjava;I)V
   #88 = Utf8               ajc$this
   #89 = Utf8               ajc$around$TestjavaAO$1$1a78e94dproceed
   #90 = Utf8               (LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
   #91 = NameAndType        #89:#90       // ajc$around$TestjavaAO$1$1a78e94dproceed:(LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
   #92 = Methodref          #73.#91       // TestjavaAO.ajc$around$TestjavaAO$1$1a78e94dproceed:(LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
   #93 = Utf8               ajc$inlineAccessMethod$TestjavaAO$TestjavaAO$logAll
   #94 = Utf8               (LTestjavaAO;)V
   #95 = NameAndType        #93:#94       // ajc$inlineAccessMethod$TestjavaAO$TestjavaAO$logAll:(LTestjavaAO;)V
   #96 = Methodref          #73.#95       // TestjavaAO.ajc$inlineAccessMethod$TestjavaAO$TestjavaAO$logAll:(LTestjavaAO;)V
   #97 = Utf8               ajc$interMethodDispatch1$TestjavaAO$Testjava$assignLambda
   #98 = NameAndType        #97:#70       // ajc$interMethodDispatch1$TestjavaAO$Testjava$assignLambda:(LTestjava;)V
   #99 = Methodref          #73.#98       // TestjavaAO.ajc$interMethodDispatch1$TestjavaAO$Testjava$assignLambda:(LTestjava;)V
  #100 = Utf8               ajc$interFieldGetDispatch$TestjavaAO$Testjava$sConsumer2
  #101 = NameAndType        #100:#80      // ajc$interFieldGetDispatch$TestjavaAO$Testjava$sConsumer2:(LTestjava;)Ljava/util/function/Consumer;
  #102 = Methodref          #73.#101      // TestjavaAO.ajc$interFieldGetDispatch$TestjavaAO$Testjava$sConsumer2:(LTestjava;)Ljava/util/function/Consumer;
  #103 = Utf8               test
  #104 = String             #103          // test
  #105 = Utf8               java/util/function/Consumer
  #106 = Class              #105          // java/util/function/Consumer
  #107 = Utf8               accept
  #108 = Utf8               (Ljava/lang/Object;)V
  #109 = NameAndType        #107:#108     // accept:(Ljava/lang/Object;)V
  #110 = InterfaceMethodref #106.#109     // java/util/function/Consumer.accept:(Ljava/lang/Object;)V
  #111 = Utf8               aspectOf
  #112 = Utf8               ()LTestjavaAO;
  #113 = NameAndType        #111:#112     // aspectOf:()LTestjavaAO;
  #114 = Methodref          #73.#113      // TestjavaAO.aspectOf:()LTestjavaAO;
  #115 = Utf8               testMethod_aroundBody1$advice
  #116 = Utf8               (LTestjava;ILTestjavaAO;LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
  #117 = NameAndType        #115:#116     // testMethod_aroundBody1$advice:(LTestjava;ILTestjavaAO;LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
  #118 = Methodref          #1.#117       // Testjava.testMethod_aroundBody1$advice:(LTestjava;ILTestjavaAO;LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
  #119 = NameAndType        #86:#87       // testMethod_aroundBody0:(LTestjava;I)V
  #120 = Methodref          #1.#119       // Testjava.testMethod_aroundBody0:(LTestjava;I)V
  #121 = Utf8               org.aspectj.weaver.WeaverVersion
  #122 = Utf8               org.aspectj.weaver.WeaverState
  #123 = Utf8               ajc$aspectInstance
  #124 = Utf8               LTestjavaAO;
  #125 = Utf8               ajc$aroundClosure
  #126 = Utf8               Lorg/aspectj/runtime/internal/AroundClosure;
{
  public Testjava();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object.""<init>"":()V
         4: aload_0
         5: invokestatic  #85                 // Method TestjavaAO.ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2:(LTestjava;)V
         8: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   LTestjava;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: new           #1                  // class Testjava
         3: dup
         4: invokespecial #17                 // Method ""<init>"":()V
         7: astore_1
         8: aload_1
         9: iconst_1
        10: invokevirtual #18                 // Method testMethod:(I)V
        13: return
      LineNumberTable:
        line 3: 0
        line 4: 8
        line 5: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      14     0  argv   [Ljava/lang/String;
            8       6     1    tj   LTestjava;
      org.aspectj.weaver.MethodDeclarationLineNumber: length = 0x8 (unknown attribute)
       00 00 00 02 00 00 00 2D

  void testMethod(int);
    descriptor: (I)V
    flags: (0x0000)
    Code:
      stack=6, locals=3, args_size=2
         0: iload_1
         1: istore_2
         2: aload_0
         3: iload_2
         4: invokestatic  #114                // Method TestjavaAO.aspectOf:()LTestjavaAO;
         7: aload_0
         8: iload_2
         9: aconst_null
        10: invokestatic  #118                // Method testMethod_aroundBody1$advice:(LTestjava;ILTestjavaAO;LTestjava;ILorg/aspectj/runtime/internal/AroundClosure;)V
        13: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      14     0  this   LTestjava;
            0      14     1     a   I
      org.aspectj.weaver.MethodDeclarationLineNumber: length = 0x8 (unknown attribute)
       00 00 00 07 00 00 00 87

  public static void lambda$0(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=4, locals=1, args_size=1
         0: getstatic     #25                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: new           #31                 // class java/lang/StringBuilder
         6: dup
         7: ldc           #54                 // String call sConsumer2
         9: invokespecial #35                 // Method java/lang/StringBuilder.""<init>"":(Ljava/lang/String;)V
        12: aload_0
        13: invokevirtual #56                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        16: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        19: invokevirtual #46                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        22: return
      LineNumberTable:
        line 7: 0
        line 8: 12
        line 7: 19
        line 8: 22
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  task   Ljava/lang/String;

  public static void lambda$0(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #25                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #61                 // String call Testjava.assignLambda
         5: invokevirtual #46                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 11: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  task   Ljava/lang/String;

  public static java.util.function.Consumer ajc$get$sConsumer2(Testjava);
    descriptor: (LTestjava;)Ljava/util/function/Consumer;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #78                 // Field sConsumer2:Ljava/util/function/Consumer;
         4: areturn
      LineNumberTable:
        line 1: 0

  public static void ajc$set$sConsumer2(Testjava, java.util.function.Consumer);
    descriptor: (LTestjava;Ljava/util/function/Consumer;)V
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #78                 // Field sConsumer2:Ljava/util/function/Consumer;
         5: return
      LineNumberTable:
        line 1: 0

  public void ajc$interMethodDispatch2$TestjavaAO$assignLambda();
    descriptor: ()V
    flags: (0x1001) ACC_PUBLIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #74                 // Method TestjavaAO.ajc$interMethod$TestjavaAO$Testjava$assignLambda:(LTestjava;)V
         4: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LTestjava;
}
SourceFile: ""Testjava.java""
  org.aspectj.weaver.WeaverVersion: length = 0xC (unknown attribute)
   00 07 00 00 00 00 00 00 00 00 00 00
  org.aspectj.weaver.WeaverState: length = 0x4FB (unknown attribute)
   53 00 00 02 00 0C 4C 54 65 73 74 6A 61 76 61 41
   4F 3B 01 02 00 00 0A 4C 54 65 73 74 6A 61 76 61
   3B 00 00 00 02 00 0A 73 43 6F 6E 73 75 6D 65 72
   32 00 1D 4C 6A 61 76 61 2F 75 74 69 6C 2F 66 75
   6E 63 74 69 6F 6E 2F 43 6F 6E 73 75 6D 65 72 3B
   00 00 00 00 00 68 00 00 00 71 00 00 00 00 31 50
   6A 61 76 61 2F 75 74 69 6C 2F 66 75 6E 63 74 69
   6F 6E 2F 43 6F 6E 73 75 6D 65 72 3C 4C 6A 61 76
   61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B 3E 3B
   00 00 AC ED 00 05 73 72 00 11 6A 61 76 61 2E 6C
   61 6E 67 2E 42 6F 6F 6C 65 61 6E CD 20 72 80 D5
   9C FA EE 02 00 01 5A 00 05 76 61 6C 75 65 78 70
   01 73 72 00 0C 6A 61 76 61 2E 69 6F 2E 46 69 6C
   65 04 2D A4 45 0E 0D E4 FF 03 00 01 4C 00 04 70
   61 74 68 74 00 12 4C 6A 61 76 61 2F 6C 61 6E 67
   2F 53 74 72 69 6E 67 3B 78 70 74 00 5C 43 3A 5C
   55 73 65 72 73 5C 41 6C 65 78 61 6E 64 65 72 5C
   44 6F 63 75 6D 65 6E 74 73 5C 6A 61 76 61 2D 73
   72 63 5C 41 4A 5F 47 48 5F 31 39 39 5F 44 75 70
   6C 69 63 61 74 65 4D 65 74 68 6F 64 45 72 72 6F
   72 4C 61 6D 62 64 61 5C 73 72 63 5C 54 65 73 74
   6A 61 76 61 41 4F 2E 61 6A 77 02 00 5C 78 73 72
   00 11 6A 61 76 61 2E 6C 61 6E 67 2E 49 6E 74 65
   67 65 72 12 E2 A0 A4 F7 81 87 38 02 00 01 49 00
   05 76 61 6C 75 65 78 72 00 10 6A 61 76 61 2E 6C
   61 6E 67 2E 4E 75 6D 62 65 72 86 AC 95 1D 0B 94
   E0 8B 02 00 00 78 70 00 00 00 04 73 71 00 7E 00
   06 00 00 00 68 00 00 00 00 02 00 0C 4C 54 65 73
   74 6A 61 76 61 41 4F 3B 02 01 00 00 0A 4C 54 65
   73 74 6A 61 76 61 3B 00 00 00 02 00 0C 61 73 73
   69 67 6E 4C 61 6D 62 64 61 00 03 28 29 56 00 00
   00 00 00 D0 00 00 00 DD 00 00 FF 00 00 AC ED 00
   05 73 72 00 11 6A 61 76 61 2E 6C 61 6E 67 2E 42
   6F 6F 6C 65 61 6E CD 20 72 80 D5 9C FA EE 02 00
   01 5A 00 05 76 61 6C 75 65 78 70 01 73 72 00 0C
   6A 61 76 61 2E 69 6F 2E 46 69 6C 65 04 2D A4 45
   0E 0D E4 FF 03 00 01 4C 00 04 70 61 74 68 74 00
   12 4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69
   6E 67 3B 78 70 74 00 5C 43 3A 5C 55 73 65 72 73
   5C 41 6C 65 78 61 6E 64 65 72 5C 44 6F 63 75 6D
   65 6E 74 73 5C 6A 61 76 61 2D 73 72 63 5C 41 4A
   5F 47 48 5F 31 39 39 5F 44 75 70 6C 69 63 61 74
   65 4D 65 74 68 6F 64 45 72 72 6F 72 4C 61 6D 62
   64 61 5C 73 72 63 5C 54 65 73 74 6A 61 76 61 41
   4F 2E 61 6A 77 02 00 5C 78 73 72 00 11 6A 61 76
   61 2E 6C 61 6E 67 2E 49 6E 74 65 67 65 72 12 E2
   A0 A4 F7 81 87 38 02 00 01 49 00 05 76 61 6C 75
   65 78 72 00 10 6A 61 76 61 2E 6C 61 6E 67 2E 4E
   75 6D 62 65 72 86 AC 95 1D 0B 94 E0 8B 02 00 00
   78 70 00 00 00 08 73 71 00 7E 00 06 00 00 00 D0
   00 00 01 00 0C 4C 54 65 73 74 6A 61 76 61 41 4F
   3B 00 00 01 C6 00 41 00 00 02 F0 00 21 00 01 00
   03 00 00 00 00 00 05 00 01 00 05 00 06 00 01 00
   07 00 00 00 2F 00 01 00 01 00 00 00 05 2A B7 00
   08 B1 00 00 00 02 00 0A 00 00 00 06 00 01 00 00
   00 01 00 0B 00 00 00 0C 00 01 00 00 00 05 00 0C
   00 0D 00 00 00 09 00 0E 00 0F 00 02 00 10 00 00
   00 08 00 00 00 02 00 00 00 2D 00 07 00 00 00 4A
   00 02 00 02 00 00 00 0E BB 00 01 59 B7 00 11 4C
   2B 04 B6 00 12 B1 00 00 00 02 00 0A 00 00 00 0E
   00 03 00 00 00 03 00 08 00 04 00 0D 00 05 00 0B
   00 00 00 16 00 02 00 00 00 0E 00 16 00 17 00 00
   00 08 00 06 00 18 00 0D 00 01 00 00 00 14 00 15
   00 02 00 10 00 00 00 08 00 00 00 07 00 00 00 87
   00 07 00 00 00 4F 00 04 00 02 00 00 00 17 B2 00
   19 BB 00 1F 59 12 21 B7 00 23 1B B6 00 26 B6 00
   2A B6 00 2E B1 00 00 00 02 00 0A 00 00 00 0A 00
   02 00 00 00 08 00 16 00 09 00 0B 00 00 00 16 00
   02 00 00 00 17 00 0C 00 0D 00 00 00 00 00 17 00
   33 00 34 00 01 10 09 00 35 00 25 00 01 00 07 00
   00 00 4D 00 04 00 01 00 00 00 17 B2 00 19 BB 00
   1F 59 12 36 B7 00 23 2A B6 00 38 B6 00 2A B6 00
   2E B1 00 00 00 02 00 0A 00 00 00 12 00 04 00 00
   00 07 00 0C 00 08 00 13 00 07 00 16 00 08 00 0B
   00 00 00 0C 00 01 00 00 00 17 00 3B 00 3C 00 00
   10 09 00 35 00 25 00 01 00 07 00 00 00 33 00 02
   00 01 00 00 00 09 B2 00 19 12 3D B6 00 2E B1 00
   00 00 02 00 0A 00 00 00 06 00 01 00 00 00 0B 00
   0B 00 00 00 0C 00 01 00 00 00 09 00 3B 00 3C 00
   00 00 01 00 3F 00 00 00 02 00 40
```

There we find:

```text
  public static void lambda$0(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=4, locals=1, args_size=1
         0: getstatic     #25                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: new           #31                 // class java/lang/StringBuilder
         6: dup
         7: ldc           #54                 // String call sConsumer2
         9: invokespecial #35                 // Method java/lang/StringBuilder.""<init>"":(Ljava/lang/String;)V
        12: aload_0
        13: invokevirtual #56                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        16: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        19: invokevirtual #46                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        22: return
      LineNumberTable:
        line 7: 0
        line 8: 12
        line 7: 19
        line 8: 22
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  task   Ljava/lang/String;

  public static void lambda$0(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #25                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #61                 // String call Testjava.assignLambda
         5: invokevirtual #46                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 11: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  task   Ljava/lang/String;
```

Uh-oh! Maybe they should not be named the same. @aclement, where would you start looking in order to fix this?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLe6w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLfYZ,aspectj,1345189401,199,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-10T08:57:45Z,2022-12-10T08:57:45Z,"For now, you can refactor the first lambda into a method reference as a workaround:

```java
  private Consumer<String> Testjava.sConsumer2 = TestjavaAO::accept;

  private static void accept(String task) {
    System.out.println(""call sConsumer2 "" + task);
  }
```

Then the code runs fine:

```text
call testMethod, 2
call logAll
call Testjava.assignLambda
call sConsumer2 test
```

That is, of course, not a solution forever, but at least you can continue to work.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QLfYZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QNqAv,aspectj,1345757231,199,NA,cts3,10166998,,,NA,2022-12-12T01:56:16Z,2022-12-12T01:56:16Z,"Thank you for your quick reply.

It seems to be a similar problem, please check below error.
Below case(test_jar + Testjava.aj = test.jar), It occur error that not generated lambda$0 in Testjava.class.

**execute & error log**
```
$ java -cp test.jar Testjava
Picked up _JAVA_OPTIONS: -Xmx4000m
Exception in thread ""main"" java.lang.BootstrapMethodError: java.lang.NoSuchMethodError: Testjava.lambda$0(Ljava/lang/String;)V
        at TestjavaAO.ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2(TestjavaAO.aj:4)
        at Testjava.<init>(Testjava.java:1)
        at Testjava.main(Testjava.java:3)
Caused by: java.lang.NoSuchMethodError: Testjava.lambda$0(Ljava/lang/String;)V
        at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
        at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:975)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1000)
        at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1394)
        at java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:1750)
        at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:477)
        ... 3 more
```

**build command**
```
test_.jar
    $ bin/ajc -inpath lib/aspectjrt.jar Testjava.java -outjar test_.jar -showWeaveInfo -1.8

test.jar
    $ bin/ajc -classpath lib/aspectjrt.jar -inpath test_.jar TestjavaAO.aj -outjar test.jar -showWeaveInfo -1.8
```
**source code**
Testjava.java
```
public class Testjava {
  public static void main(String[] argv) {
      Testjava tj = new Testjava();
      tj.testMethod(1);
  }
 
  void testMethod(int a) {
      System.out.println(""call testMethod, "" + a);
  }
}
```
TestjavaAO.aj
```
import java.util.function.Consumer;

privileged aspect TestjavaAO {
    private Consumer<String> Testjava.sConsumer2 = (String task) -> { System.out.println(""call logAll""); };

    void logAll() {
        Consumer<String> sConsumer1 = (String task) -> { System.out.println(""call logAll""); };
        sConsumer1.accept(""hello world"");
    }

    void around(Testjava tj, int a):
            execution(* Testjava.testMethod(int)) &&
            within(Testjava) &&
            target(tj) && args(a) {
        proceed(tj, a+1);
        logAll();
        //tj.assignLambda();
        tj.sConsumer2.accept(""test"");
    }
}

```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QNqAv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QOXJw,aspectj,1345942128,199,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-12T06:08:00Z,2022-12-12T06:08:00Z,"This is not a support channel, but a bug and feature request tracker. The bug has not been fixed yet, so I am reopening it. The suggested workaround does not fix the problem. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5QOXJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3j_T,aspectj,1356742611,199,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-18T09:04:47Z,2022-12-18T09:04:47Z,"[gh-199-200.zip](https://github.com/eclipse/org.aspectj/files/10253479/gh-199-200.zip) contains reproducers for both #199 and #200. Unpack into an empty directory and run with Git Bash:

```text
$ ./reproduce-gh-199.sh
Compiling and weaving application + aspect
Type 'Testjava' (Testjava.java) has intertyped field from 'TestjavaAO' (TestjavaAO.aj:'java.util.function.Consumer<java.lang.String> Testjava.sConsumer2')

Type 'Testjava' (Testjava.java) has intertyped method from 'TestjavaAO' (TestjavaAO.aj:'void Testjava.assignLambda()')

Join point 'method-execution(void Testjava.testMethod(int))' in Type 'Testjava' (Testjava.java:7) advised by around advice from 'TestjavaAO' (TestjavaAO.aj:24)

Running woven application
Fehler: Beim Laden der Klasse Testjava ist ein LinkageError aufgetreten
        java.lang.ClassFormatError: Duplicate method name ""lambda$0"" with signature ""(Ljava.lang.String;)V"" in class file Testjava

$ ./reproduce-gh-200.sh
Compiling application
Compiling aspect and binary-weaving application
Type 'Testjava' (Testjava.java) has intertyped field from 'TestjavaAO2' (TestjavaAO2.aj:'java.util.function.Consumer<java.lang.String> Testjava.sConsumer3')

Join point 'method-execution(void Testjava.testMethod(int))' in Type 'Testjava' (Testjava.java:7) advised by around advice from 'TestjavaAO2' (TestjavaAO2.aj:19)

Running woven application
Exception in thread ""main"" java.lang.NoSuchMethodError: 'void Testjava.lambda$0(java.lang.String)'
        at TestjavaAO2.ajc$interFieldInit$TestjavaAO2$Testjava$sConsumer3(TestjavaAO2.aj:8)
        at Testjava.<init>(Testjava.java:1)
        at Testjava.main(Testjava.java:3)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3j_T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Rv8w6,aspectj,1371524154,199,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-01-04T23:01:28Z,2023-01-04T23:01:28Z,I'd first look at where the names are generated for lambdas - why is the second one not getting a 1 suffix. I don't recall where that is done though.  My quick thought is whether it is because the intertype scope in use for ITDs is somehow hiding the counter from the parent scope?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Rv8w6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/199,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RxsNZ,aspectj,1371980633,199,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-05T09:33:24Z,2023-01-05T09:33:24Z,"@aclement: Sure, that is what I also thought. But I do not know where to find that part of the code, and debugging without knowing where to start looking can take a lot of time. We discussed my wish to get a proper introduction to the code base from you many times before. I am still waiting for that. At least pointers into the right direction would be better than nothing for the time being. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RxsNZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200,aspectj,1490843495,200,'NoSuchMethodError' during runtime when using lambda as ITD field value with binary weaving,cts3,10166998,,,OPEN,2022-12-12T03:24:31Z,2022-12-18T09:03:53Z,"Thank you for your quick reply.(https://github.com/eclipse/org.aspectj/issues/199)

It seems to be a similar problem, please check below error.
Below case(test_jar + Testjava.aj = test.jar), It occur error that not generated lambda$0 in Testjava.class.

**execute & error log**
```
$ java -cp test.jar Testjava
Picked up _JAVA_OPTIONS: -Xmx4000m
Exception in thread ""main"" java.lang.BootstrapMethodError: java.lang.NoSuchMethodError: Testjava.lambda$0(Ljava/lang/String;)V
        at TestjavaAO.ajc$interFieldInit$TestjavaAO$Testjava$sConsumer2(TestjavaAO.aj:4)
        at Testjava.<init>(Testjava.java:1)
        at Testjava.main(Testjava.java:3)
Caused by: java.lang.NoSuchMethodError: Testjava.lambda$0(Ljava/lang/String;)V
        at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
        at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:975)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1000)
        at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1394)
        at java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:1750)
        at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:477)
        ... 3 more
```

**build command**
```
test_.jar
    $ bin/ajc -inpath lib/aspectjrt.jar Testjava.java -outjar test_.jar -showWeaveInfo -1.8

test.jar
    $ bin/ajc -classpath lib/aspectjrt.jar -inpath test_.jar TestjavaAO.aj -outjar test.jar -showWeaveInfo -1.8
```
**source code**
Testjava.java
```
public class Testjava {
  public static void main(String[] argv) {
      Testjava tj = new Testjava();
      tj.testMethod(1);
  }
 
  void testMethod(int a) {
      System.out.println(""call testMethod, "" + a);
  }
}
```
TestjavaAO.aj
```
import java.util.function.Consumer;

privileged aspect TestjavaAO {
    private Consumer<String> Testjava.sConsumer2 = (String task) -> { System.out.println(""call logAll""); };

    void logAll() {
        Consumer<String> sConsumer1 = (String task) -> { System.out.println(""call logAll""); };
        sConsumer1.accept(""hello world"");
    }

    void around(Testjava tj, int a):
            execution(* Testjava.testMethod(int)) &&
            within(Testjava) &&
            target(tj) && args(a) {
        proceed(tj, a+1);
        logAll();
        //tj.assignLambda();
        tj.sConsumer2.accept(""test"");
    }
}

```

_Originally posted by @cts3 in https://github.com/eclipse/org.aspectj/issues/199#issuecomment-1345757231_
      ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q19_M,aspectj,1356324812,200,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-17T16:25:02Z,2022-12-17T16:25:02Z,"At first I could not reproduce the problem, because accidentally I compiled the aspect from #199 with the same class name instead of overwriting it by the new version. Now the error reproduces. 

Anyway, I have a follow-up question about your somewhat contrived build command with _aspectjrt.jar_ on the inpath instead of the classpath, like it should be. What are you trying to achieve? I can only speculate that you wish to build the core application and an aspect library separately, weaving them together using binary weaving. Or did you put the AspectJ runtime on the inpath in order to create something like a shaded fat JAR? Please explain.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q19_M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3gK_,aspectj,1356726975,200,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-18T08:07:19Z,2022-12-18T08:07:19Z,"One initial finding ist that when compiling aspect and application together from source code, the `public static void lambda$0(java.lang.String)` exists in `Testjava`, and the code works as expected. Only when doing binary weaving, the lambda does not end up in the target class.

However, the workaround from https://github.com/eclipse/org.aspectj/issues/199#issuecomment-1345189401, i.e. replacing the lambda by a method reference, also helps.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3gK_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/200,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3j71,aspectj,1356742389,200,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-18T09:03:52Z,2022-12-18T09:03:52Z,"[gh-199-200.zip](https://github.com/eclipse/org.aspectj/files/10253479/gh-199-200.zip) contains reproducers for both #199 and #200. Unpack into an empty directory and run with Git Bash:

```text
$ ./reproduce-gh-199.sh
Compiling and weaving application + aspect
Type 'Testjava' (Testjava.java) has intertyped field from 'TestjavaAO' (TestjavaAO.aj:'java.util.function.Consumer<java.lang.String> Testjava.sConsumer2')

Type 'Testjava' (Testjava.java) has intertyped method from 'TestjavaAO' (TestjavaAO.aj:'void Testjava.assignLambda()')

Join point 'method-execution(void Testjava.testMethod(int))' in Type 'Testjava' (Testjava.java:7) advised by around advice from 'TestjavaAO' (TestjavaAO.aj:24)

Running woven application
Fehler: Beim Laden der Klasse Testjava ist ein LinkageError aufgetreten
        java.lang.ClassFormatError: Duplicate method name ""lambda$0"" with signature ""(Ljava.lang.String;)V"" in class file Testjava

$ ./reproduce-gh-200.sh
Compiling application
Compiling aspect and binary-weaving application
Type 'Testjava' (Testjava.java) has intertyped field from 'TestjavaAO2' (TestjavaAO2.aj:'java.util.function.Consumer<java.lang.String> Testjava.sConsumer3')

Join point 'method-execution(void Testjava.testMethod(int))' in Type 'Testjava' (Testjava.java:7) advised by around advice from 'TestjavaAO2' (TestjavaAO2.aj:19)

Running woven application
Exception in thread ""main"" java.lang.NoSuchMethodError: 'void Testjava.lambda$0(java.lang.String)'
        at TestjavaAO2.ajc$interFieldInit$TestjavaAO2$Testjava$sConsumer3(TestjavaAO2.aj:8)
        at Testjava.<init>(Testjava.java:1)
        at Testjava.main(Testjava.java:3)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Q3j71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/201,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/201,aspectj,1506292891,201,Print warning when declaring annotations with SOURCE retention via ITD,kriegaex,1537384,Alexander Kriegisch,,OPEN,2022-12-21T13:24:02Z,2022-12-21T13:24:02Z,"This is a follow-up issue for PR #196 and [Bugzilla bug 366085](https://bugs.eclipse.org/bugs/show_bug.cgi?id=366085).

The imperfect workaround for that bug simply ignores declared source-level annotations occurring in the AST. The better way to solve this problem would be to eliminate them from the AST when parsing the aspect at some point after the corresponding annotation type has been resolved and its retention level can be determined with certainty. In each case, a comprehensive weaver or compiler warning should be issued and the AST cleaned up (or not polluted in the first place, whichever method is applicable).

@aclement, like I said, I would need your guidance in order to fix this problem properly, which is why for now I shall leave it at merging the workaround.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/201/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/202,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/202,aspectj,1510172861,202,Looks like the artifact name got changed in the most recent release,chenrui333,1580956,Rui Chen,rui@chenrui.dev,CLOSED,2022-12-24T18:53:31Z,2022-12-25T17:18:32Z,👋  it looks like the artifact name got changed from `aspect-#{version}.jar` into `installer-#{version}.jar`. Wouldn't `aspect-#{version}.jar` be better? Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/202/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/202,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RVij1,aspectj,1364601077,202,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2022-12-25T00:29:35Z,2022-12-25T00:29:35Z,"> `aspect-#{version}.jar`

You probably mean `aspectj-#{version}.jar` with a ""j"" in the middle. Actually, not the (Maven) artifact name has changed, it was always `installer`. What has changed is that I forgot to manually rename it during the upload to the GitHub release. Good catch, though. 👏🙂

I have just renamed the file, it should be OK now. 
 

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RVij1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/202,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RV9vJ,aspectj,1364712393,202,NA,chenrui333,1580956,Rui Chen,rui@chenrui.dev,NA,2022-12-25T17:18:32Z,2022-12-25T17:18:32Z,"> > `aspect-#{version}.jar`
> 
> You probably mean `aspectj-#{version}.jar` with a ""j"" in the middle. Actually, not the (Maven) artifact name has changed, it was always `installer`. What has changed is that I forgot to manually rename it during the upload to the GitHub release. Good catch, though. 👏🙂
> 
> I have just renamed the file, it should be OK now.

yeah, `aspectj` not `aspect`. Thanks for the rename!!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RV9vJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208,aspectj,1519035696,208,Rename & fix or delete 'InterTypeClassHeaderName1' grammar rule,kriegaex,1537384,Alexander Kriegisch,,OPEN,2023-01-04T14:04:17Z,2023-01-05T16:54:09Z,"When fixing another grammar problem, I noticed Jikespg output as follows:

```text
The following Non-Terminal is useless: InterTypeClassHeaderName1
```

Therefore, I added a TODO comment in https://github.com/eclipse/aspectj.eclipse.jdt.core/commit/f2a47a37be1abb5ed7cdc78ff6f896c23c708b92, see also [directly in the file](https://github.com/eclipse/aspectj.eclipse.jdt.core/blob/f2a47a37be1abb5ed7cdc78ff6f896c23c708b92/org.eclipse.jdt.core.compiler.batch/grammar/java.g#L1355-L1362):

```text
-- TODO: Rename 'InterType*' to 'Intertype*'? Without renaming, Jikespg says:
--   The following Non-Terminal is useless: InterTypeClassHeaderName1
-- But after renaming, it says instead:
--   Reduce/reduce conflict on ""LESS"" between rule 410 and 303
--   Reduce/reduce conflict on ""LESS"" between rule 405 and 304
InterTypeClassHeaderName1 ::= Modifiersopt 'class' OnType TypeParametersAsReference '.' JavaIdentifier
/.$putCase consumeIntertypeClassHeaderName(true); $break ./
/:$readableName IntertypeClassHeader:/
```

@aclement, can you please review this portion of the grammar and tell me what is supposed to happen there? Is that rule (production) superfluous or supposed to be fixed?
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RwC6t,aspectj,1371549357,208,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-01-04T23:40:37Z,2023-01-04T23:40:37Z,"I'm afraid I don't speak jikespg. That area of the project is extremely fragile as since the original work X number of years ago (not by me), it has not been touched other than in emergencies and then we rely on (a) can we get a valid file out (whether there are warnings or not) and (b) does it pass all the tests. Another reason to switch to plain java with annotations and away from JDT fork.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RwC6t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RxrUH,aspectj,1371976967,208,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-05T09:29:38Z,2023-01-05T09:29:38Z,"@aclement: Well, if you simply look at the grammar rules, you notice that due to upper vs. lower case spelling (typo?) in the commented rule, it is not being referenced elsewhere. The rule in question is different from the preceding one in that it caters to generics, i.e. something like ITDs like `public class XY<T>.foo`, while the preceding rule `IntertypeClassHeaderName1` (lower-case ""t"" in ""Intertype"") seems to cover the non-generic case `public class XY.foo`. I.e., there might be something not working which is supposed to syntax-wise. I thought that maybe you could shed light on this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RxrUH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/208,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RzkV0,aspectj,1372472692,208,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-01-05T16:54:09Z,2023-01-05T16:54:09Z,"It sounds like you are correct. I don't recall. As I say, the tests are the usual arbiter on whether things are working. We might well not have all the tests we need around generics and ITDs.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5RzkV0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/211,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/211,aspectj,1533825067,211,AJC core dump when mixing type name wildcards with generics,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-01-15T13:53:38Z,2024-04-12T13:33:19Z,"Commit 53837367 contains an inactive test case reproducing a new problem I found by chance when fixing a failing test after the code changes for #24:

https://github.com/eclipse/org.aspectj/blob/53837367b0f04a20aab530741ea7a24a42e309e5/tests/bugs165/pr272233/Iffy2.java#L44-L45

Further up in the same class you see working variations of that syntax.

The corresponding _ajcore.*.txt_ file says:

```text
malformed org.aspectj.weaver.PointcutDeclaration attribute (length:219)
org.aspectj.weaver.BCException: Bad type signature *

org.aspectj.weaver.BCException: malformed org.aspectj.weaver.PointcutDeclaration attribute (length:219)org.aspectj.weaver.BCException: Bad type signature *
  at org.aspectj.weaver.AjAttribute.read(AjAttribute.java:137)
  at org.aspectj.weaver.bcel.Utility.readAjAttributes(Utility.java:102)
  at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes(BcelMethod.java:197)
  at org.aspectj.weaver.bcel.BcelMethod.<init>(BcelMethod.java:91)
  at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods(BcelObjectType.java:290)
  at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:870)
  at org.aspectj.weaver.ResolvedType.getDeclaredAdvice(ResolvedType.java:1028)
  at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers(ResolvedType.java:1068)
  at org.aspectj.weaver.ResolvedType.collectShadowMungers(ResolvedType.java:868)
  at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:794)
  at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:112)
  at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:67)
  at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:512)
  at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized(AjPipeliningCompilerAdapter.java:525)
  at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:505)
  at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:446)
  at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:431)
  at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:104)
  at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:946)
  at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:576)
  at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:476)
  at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
  at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
  at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
  at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
  at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
  at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
  at org.aspectj.tools.ajc.Main.run(Main.java:374)
  at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
  at org.aspectj.tools.ajc.Ajc.compile(Ajc.java:202)
  at org.aspectj.tools.ajc.Ajc.compile(Ajc.java:163)
  at org.aspectj.tools.ajc.AjcTestCase.ajc(AjcTestCase.java:534)
  at org.aspectj.testing.CompileSpec.execute(CompileSpec.java:52)
  at org.aspectj.testing.AjcTest.runTest(AjcTest.java:60)
  at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:157)
  at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:171)
  at org.aspectj.systemtest.ajc165.Ajc165Tests.testFunkyPointcut_pr272233_2(Ajc165Tests.java:80)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/211/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/211,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SfDVh,aspectj,1383871841,211,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-16T11:03:46Z,2023-01-16T11:03:46Z,"BTW, despite not causing any exceptions, patterns like
  * `execution(java.util.Collection<*>[] *(..))`,
  * `execution(*..Collection<java.lang.String>[] *(..))`

are not matching either. I.e., even beyond the problem above there is something fundamentally wrong with generic type parameter matching in connection with array types. For non-array types, pointcuts such as
  * `execution(*..Collection<String> *(..))`,
  * `execution(*..Collection<*> *(..))`

would match a method like `Collection<String> foo()`. But even without the array, 
  * `execution(*..Collection<?> *(..))`

would cause the same `org.aspectj.weaver.BCException` as above.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5SfDVh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/211,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Sj5F9,aspectj,1385140605,211,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-17T10:05:52Z,2023-01-17T10:05:52Z,"This is like a can of worms. I think I am understanding it better now, but there are several issues here:

  * In contrast to exact types, wildcard types store `?` type parameters for generics as `*`, but when reading them again, this is unexpected and cannot be parsed correctly. I.e., `*..Foo<?>` or `a.b.C*<?, String>` cannot be parsed correctly. I fixed this by making the parser in for unresolved types more lenient here, allowing `*`, too. Maybe I can find out how to store them in a different way, but for now I am focusing on the next problem.

  * Wildcard types which are at the same time array reference types and have generic type parameters are not supported at all, e.g. `*..Foo<Integer>[]` or `a.b.C*<String>[][]` are handled incorrectly: The matcher, when trying to handle type paramaters, erroneously looks at the array reference type, but actually it needs to check the component type, because the latter contains the type parameters. I also fixed that.

  * An edge case I found in https://github.com/eclipse/org.aspectj/blob/53837367b0f04a20aab530741ea7a24a42e309e5/tests/bugs165/pr272233/Iffy2.java#L10 actually would match `void myMethod()`. In native syntax, this would not compile, because void arrays `void[]` are not allowed in Java for obvious reasons. I am still pondering how to handle that case. Either we can
    * log a warning and let it match anyway,
    * throw an error which would need to be handled downstream so as not to cause an AJ core dump, or
    * log a lint warning and make sure the pointcut doe not match anything.

    Locally, I have the first solution working. I am still trying to get my bearings and figure out how to implement the third one, which is my favourite.

  * `UnresolvedType.signatureToName` does a bad job displaying generic wildcard types parameters correctly. I also fixed that locally, i.e.
    * instead of `<(A,B)>` we now have `<A,B>`,
    * after a `*` in any type parameter list, sometimes the `*` (which should be converted to `?`) itself and always the subsequent parameters would be missing from the signature:
      * `[Pjava/util/Collection<*>;` yielded `java.util.Collection<>[]`, but should be `java.util.Collection<?>[]`
      * `[Pjava/util/Map<*Pjava/util/List<[Ljava/lang/Integer;>;>;` yielded `java.util.Map<?>[]`, but should be `java.util.Map<?,java.util.List<java.lang.Integer[]>>[]`
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Sj5F9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/214,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/214,aspectj,1551757208,214,ArrayIndexOutOfBoundsException when using '-Xlint:unorderedAdviceAtShadow=warning',kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-01-21T10:12:21Z,2023-01-21T21:57:45Z,"Originally encountered at mojohaus/aspectj-maven-plugin/issues/164, there is a bug in `BcelShadow.prepareForMungers()`:

https://github.com/eclipse/org.aspectj/blob/53837367b0f04a20aab530741ea7a24a42e309e5/weaver/src/main/java/org/aspectj/weaver/bcel/BcelShadow.java#L363-L385

In line 378, `if (sLoc != null)` should actually be `if (sLoc != null && sLoc.getLine() > 0)`, just like in the previous loop. This problem can lead to the `ArrayIndexOutOfBoundsException` seen in the original issue when building with  `-Xlint:warning` or at least with `-Xlint:unorderedAdviceAtShadow=warning`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/214/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/214,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5TZoML,aspectj,1399227147,214,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-21T10:50:02Z,2023-01-21T10:50:02Z,Reproduced and fixed in the two commits linked to this issue.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5TZoML/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/215,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/215,aspectj,1561212780,215,Fix PatternNode.traverse overrides,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-01-29T09:52:40Z,2023-01-29T17:02:24Z,"Currently, `PatternNode.traverse` simply calls `PatternNode.accept`, forcing all subclasses to extend the abstract `accept` method, which is fine for a base class.

https://github.com/eclipse/org.aspectj/blob/dd3177909ec52e89e5e3dc10125c3527ce6e73dc/org.aspectj.matcher/src/main/java/org/aspectj/weaver/patterns/PatternNode.java#L83-L87

Unfortunately, not all subclasses actually override `traverse` correctly. E.g., `KindedPointcut` does not override it at all, which means e.g. that traversing the pointcut does not traverse into its signature. Consequently, all existing `PatternNodeVisitor`s need to consider that in all their corresponding `visit` methods. Moreover, instead of traversing normally, users of those visitor classes need to create instances in several pattern node subclasses, possibly in multiple places there, instantiating the visitors as necessary and making sure to call their `visit` methods appropriately. Not only is this tedious and counter-intuitive, but also does it pollute the source code.

For instance, the status quo for `Pointcut` subclasses is that only `AndPointcut`, `OrPointcut` and `NotPointcut` override `traverse` correctly. No other pointcut classes override it at all, even though some of them have `PatternNode` members such as type patterns, lists of type patterns, signatures, annotation type patterns.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/215/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/216,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/216,aspectj,1561243503,216,Raise errors for void arrays in type patterns,kriegaex,1537384,Alexander Kriegisch,,OPEN,2023-01-29T11:20:00Z,2023-01-29T11:20:12Z,"Implement a `PatternNodeVisitor` finding faulty `void[]`, `void[][]` type patterns in all kinds of signatures and raise errors (maybe just warnings?) for them.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/216/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/217,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/217,aspectj,1561244220,217,Raise errors for primitive annotation type parameters,kriegaex,1537384,Alexander Kriegisch,,OPEN,2023-01-29T11:22:04Z,2023-01-29T11:22:22Z,"Implement a `PatternNodeVisitor` finding faulty primitive annotytion type parameters in all kinds of signatures and raise errors (maybe just warnings?) for them, e.g. `Foo<int>`, `Bar<String, float>`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/217/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,aspectj,1561257392,218,Implement source location matching for weave messages in XML tests,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-01-29T12:06:07Z,2024-04-13T11:03:08Z,"In internal AspectJ integration tests, it is possible to match log messages for file and line number information in error, warning and lint messages. For weave messages, however, matching is not implemented.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5T6Bs2,aspectj,1407720246,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-29T17:16:07Z,2023-01-29T17:16:07Z,"@aclement, the PR review request relates to my recent Slack message, which I am quoting here in order to document my intent and the options we have for implementing this functionality:

> I like to have your opinion: At first, I was wondering why filtering weave messages by line number and/or file name in AJC XML test configs was not working. Then I realised that `WeaveMessage` simply does not have the necessary fields.
> 
> So I extended our infrastructure a bit. My local solution now maps file/line XML values to the woven location and a new pair `aspectFile`, `aspectLine` to the corresponding source location in the aspect (e.g. advice). The information is there anyway everywhere we create instances of `WeaveMessage`. But currently, we only map the corresponding file/line infos into the weaver messages via string concatenation, we do not pass it into `IMessage` as `ISourceLocation`. My current solution does that, passing through the weaving target to the super constructor's (`Message`) `sourceLocation` parameter and the aspect as a 1-element `ISourceLocation[]` to `extraSourceLocations`. This has the effect of both also being displayed during compilation, which previously did not happen. When matching XML parameters, I am fetching file and line infos from those source locations. This works nicely and looks like this on the console:
> 
> ```text
> [weaveInfo 1] weaveinfo at \Application.java:4::67 Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.java:4) advised by around advice from 'SecondAspect' (SecondAspect.java:8)
>   	see also: C:\temp\ajcSandbox\AspectJ\ajcTest11973501710728944725.tmp\SecondAspect.java:8::227
> [weaveInfo 2] weaveinfo at \Application.java:4::67 Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.java:4) advised by before advice from 'FirstAspect' (first-aspect.jar!FirstAspect.class(from FirstAspect.java))
>   	see also: C:\temp\ajcSandbox\AspectJ\ajcTest11973501710728944725.tmp\first-aspect.jar!\FirstAspect.class::0
> ```
> 
> Before my changes, it would have looked like this:
> 
> ```text
> [weaveInfo 1] weaveinfo at Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.java:4) advised by around advice from 'SecondAspect' (SecondAspect.java:8)
> [weaveInfo 2] weaveinfo Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.java:4) advised by before advice from 'FirstAspect' (first-aspect.jar!FirstAspect.class(from FirstAspect.java))
> ```
> 
> The ""see also"" part is the aspect source location in this case.
> 
> Now here are my questions:
>   1. Does this kind of logging (which we get for free, because it works like that for other errors or warnings already) disrupt any IDE tools (AJDT?), or do the latter match on `ISourceLocation` meta data rather than on console log messages anyway?
>   2. Do you think that for weaving messages this kind of output is ""too much"", because the relevant infos, albeit less precise, are already baked into the weaving messages themselves?
> 
> If you think we should keep the current output, I can change the code to rather store the `file`, `aspectFile`, `line`, `aspectLine` meta data in local `Message` members instead of passing on `ISourceLocation`s and access them from `WeaveMessage` for XML test spec matching. Everything would look like before, only matching would be improved at the cost of two extra fields in `Message`.
> 
> WDYT?

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5T6Bs2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5T-0m1,aspectj,1408977333,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-30T16:54:24Z,2023-01-30T16:54:24Z,"Andy said on Slack:

>> Is it weird that the first location is `\Application.java` when the see also location is a full path.

I replied:

> That thing with the first location is a good catch. I will look into it at some point. Actually, I do not like the
> 
> ```text
> first-aspect.jar!\FirstAspect.class::0
> ```
> 
> either for aspects in JARs, while there seems to be more exact info available, see
> 
> ```text
> first-aspect.jar!FirstAspect.class(from FirstAspect.java)
> ```
> 
> right in the weaver message. There might be more precise source code line info available, too. I have to look into the places where the source locations are assembled.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5T-0m1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZsMe,aspectj,2053554974,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-13T07:20:17Z,2024-04-13T07:20:17Z,"> Is it weird that the first location is `\Application.java` when the see also location is a full path.

@aclement, this is because in this example post-compile weaving is used and `Application.java` is actually from a JAR and on the inpath. The backslash character comes from the default (empty) package name.

https://github.com/eclipse-aspectj/aspectj/blob/49cb924f5402c9d24379ae1af62def6fa5892649/org.aspectj.matcher/src/main/java/org/aspectj/weaver/AbstractReferenceTypeDelegate.java#L76-L89

This can be ameliorated by changing `if (pname != null)` to `if (pname != null && !pname.isEmpty())`, yielding `Application.java` for the name and also `first-aspect.jar!FirstAspect.class` instead of `first-aspect.jar!\FirstAspect.class`. I think, this cosmetic change makes sense. I could also here

https://github.com/eclipse-aspectj/aspectj/blob/1c487b2e0f54eeb4c2630940e7d57c279ba5a032/weaver/src/main/java/org/aspectj/weaver/bcel/BcelObjectType.java#L166

simply call `setSourcefilename(javaClass.getFileName());` instead, which would yield something like this:

```text
[weaveInfo 1] weaveinfo at C:\temp\ajcSandbox\AspectJ\ajcTest679061309717043359.tmp\Application.class:4::67 Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.class:4) advised by around advice from 'SecondAspect' (SecondAspect.java:8)
  	see also: C:\temp\ajcSandbox\AspectJ\ajcTest679061309717043359.tmp\SecondAspect.java:8::227
[weaveInfo 2] weaveinfo at C:\temp\ajcSandbox\AspectJ\ajcTest679061309717043359.tmp\Application.class:4::67 Join point 'method-execution(void Application.greet(java.lang.String))' in Type 'Application' (Application.class:4) advised by before advice from 'FirstAspect' (first-aspect.jar!FirstAspect.class(from FirstAspect.class))
  	see also: C:\temp\ajcSandbox\AspectJ\ajcTest679061309717043359.tmp\first-aspect.jar!FirstAspect.class::0
```

On the one hand, it would be a complete path for files from JARs. OTOH, that path might be from another system and also unnecessarily expose file system info from there. OK, the data are in the class file anyway, but I think in this case they provide no added value and might even irritate more than help the user.

Feel free to comment. For now, I think I am going to leave it at the cosmetic change for default package classes, removing the leading (back)slash. For classes and aspects compiled from sources, the full paths are already there in weaving messages.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZsMe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZsxW,aspectj,2053557334,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-13T07:29:43Z,2024-04-13T07:29:43Z,">> when the see also location is a full path

Hm, I am just reconsidering this. You are right, the ""see also"" location is also a path to a class file, even from inside a JAR.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZsxW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZzyQ,aspectj,2053586064,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-13T09:18:04Z,2024-04-13T09:18:04Z,"For the record: I have experimented with variations of code like this:

```java
final String fileName = javaClass.getFileName();
final String sourceFileName = javaClass.getSourceFileName();
if (fileName == null || !fileName.endsWith("".class""))
  setSourcefilename(sourceFileName);
else if (sourceFileName == null || sourceFileName.isEmpty() || sourceFileName.endsWith("".class""))
  setSourcefilename(fileName);
else
  setSourcefilename(fileName + "" (from "" + sourceFileName + "")"");
```

But this leads to unwanted ripple effects with certain types of output. E.g., it could look like this:

```text
... advised by before advice from 'FirstAspect' (first-aspect.jar!FirstAspect.class (from FirstAspect.class (from FirstAspect.class (from FirstAspect.java)))
```

The simple variant

```java
setSourcefilename(javaClass.getFileName())
```

would lead to (single line, line breaks added manually) :

```text
weaveinfo at C:\temp\ajcSandbox\AspectJ\ajcTest4315460611977815268.tmp\Application.class:4::67
  Join point 'method-execution(void Application.greet(java.lang.String))'
  in Type 'Application' (Application.class:4)
  advised by around advice from 'SecondAspect' (SecondAspect.java:8)
```

Things like `Application.class:4::67` or `Application.class:4` also look strange. So for now, I am not going to change source file representation for post-compile weaving `*.class` files, even though in theory it would be possible to synthesise perfect messages everywhere. But that would require more work in different parts of the code, which I am not willing to invest now. We have an improvement already, hopefully good enough to merge.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56ZzyQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/218,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56Z2KS,aspectj,2053595794,218,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-13T09:57:11Z,2024-04-13T09:57:11Z,"It looks as if removing the leading file separator also has unwanted side effects, e.g. it makes `Ajc164Tests::testItdsAspectPathModel_pr265729_1` fail as follows:

```text
<root>  [java source file] 
  demo  [package] 
    Orange.java  [java source file] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Orange.java:1::0
      demo  [package declaration] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Orange.java:1::8
        [import reference] 
      Orange  [class] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Orange.java:3::30
    Strawberry.java  [java source file] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Strawberry.java:1::0
      demo  [package declaration] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Strawberry.java:1::8
        [import reference] 
      Strawberry  [class] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Strawberry.java:3::30
    Fruit.java  [java source file] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Fruit.java:1::0
      demo  [package declaration] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Fruit.java:1::8
        [import reference] 
      Fruit  [class] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\Fruit.java:2::28
  binaries  [source folder] 
      [package] 
      library.jar!Aspect.class  [file] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\library.jar!Aspect.class:1::0
        Aspect  [aspect] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\library.jar!Aspect.class:1::0
          Orange.getColor()  [inter-type method] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\library.jar!Aspect.class:5::0
          Strawberry.color  [inter-type field] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\library.jar!Aspect.class:6::0
          Fruit.Fruit(java.awt.Color,java.lang.String)  [inter-type constructor] C:\temp\ajcSandbox\AspectJ\ajcTest530306528813709598.tmp\library.jar!Aspect.class:7::0

junit.framework.ComparisonFailure: 
Expected :/binaries<(Aspect.class>Aspect°Orange.getColor
Actual   :/binaries<(library.jar!Aspect.class>Aspect°Orange.getColor
```

I do not feel so inclined to investigate how to fix that in AJDT and check for side effects there when working with AJDT in Eclipse. Sigh - I am going to revert the change, and users will have to live with  `\Application.java` style source paths for default package classes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns56Z2KS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/221,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/221,aspectj,1562173136,221,Enable type parameter traversal in exact type patterns,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-01-30T10:35:05Z,2024-04-12T12:19:10Z,"When a `WildTypePattern` in converted into an `ExactTypePattern`, type variables are currently ignored. I.e., the exact type pattern will have no type variable list. The only existing `ExactTypePattern` constructor does not even take a `TypePatternList` parameter and hence also not pass it on to the super constructor.

Consequently, when traversing the corresponding node with a pattern visitor, e.g. in order to also check type parameters for something illegal like `void[]` or primitive types in general - see also #216, #217 - with an empty type pattern list there will be no traversal and therefore no check at all. I would almost consider this a bug.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/221/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/221,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5XVAUf,aspectj,1465124127,221,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-12T08:28:21Z,2023-03-12T08:28:21Z,"I did not look into this for a while, being busy with non-AspectJ stuff. Reminder to myself or anyone else implementing this: Writing additional information into  a `CompressingDataOutputStream` also means that later it must be read from a `VersionedDataInputStream`, i.e. older AspectJ versions would trip over unexpected additional data in the latter. That would mean either of

  * yet another feature toggle for the compiler,
  * a breaking change which existing AspectJ versions cannot handle gracefully, because in case of more recent versions it throws a `BCException`, see e.g. here: https://github.com/eclipse/org.aspectj/blob/a8a2f82fda825b36acade534f876f595b6566919/org.aspectj.matcher/src/main/java/org/aspectj/weaver/patterns/ExactTypePattern.java#L281-L285
  * a new data structure to be written to and read from for the additional data, which older AspectJ versions would be oblivious of but more recent ones aware of, combined with some kind of version check in order to predict what kind of data might be in such a new data structure, if future changes introduce new types of data therein.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5XVAUf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,aspectj,1564562269,223,Eclipse 2022-12 does not recognise '.classpath' format after M2E Maven import,m4urer,3002779,,,CLOSED,2023-01-31T15:41:31Z,2023-03-01T07:26:22Z,"The methods are not weaved/the eclipse 2022-12 (and aspect markers do not show) with an aspectj configured project because the .classpath that a maven project generates for src/main/java is now
```
<classpathentry kind=""src"" output=""target/classes"" path=""src/main/java"">
	<attributes>
		<attribute name=""optional"" value=""true""/>
		<attribute name=""maven.pomderived"" value=""true""/>
	</attributes>
</classpathentry>
```
instead of 
```
<classpathentry kind=""src"" output=""target/classes"" path=""src/main/java""/>
```
I have multiple projects using aspectj, and none of them work in the latest eclipse (the aspects are not weaved) **unless I manually change the .classpath from the new format to the old one**. And every time I update the project from maven, the .classpath is once again changed and the aspects don't work.

The only thing I need to do for it to work is change the .classpath src/main/java entry to
`<classpathentry kind=""src"" output=""target/classes"" path=""src/main/java""/> `
(remove the attributes) and everything works. 
But I can't find a way to avoid the classpath to use that structure so it's very difficult to work like this. 

You can test it with this project
[spring-aop-2](https://github.com/eugenp/tutorials/tree/188201d3247ee57704c3d8b37aa43a9f3147b694/spring-aop-2)
and the same happens.  the aspects are not marked in eclipse unless I manually change the classpath.

Could you please help?
Thanks!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UFIGH,aspectj,1410630023,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-01-31T15:50:34Z,2023-01-31T15:50:34Z,"Thanks for your inquiry.

_**Off-topic situation report:** I actually next to never use AJDT, especially not in combination with Maven. My main IDE is IntelliJ IDEA, even for working on AspectJ itself. When AspectJ Core is understaffed, this is true even more so for AJDT which does not have any active maintainer. I managed to somehow keep it alive, but several things are broken. This one looks severe enough to look into, but I am quite busy with my job Mon-Fri and a few things I am improving in AspectJ on weekends. I am not promising anything about when I can take a look, whether I understand enough to fix it at all and when I might be able to push out a new AJDT version to the corresponding update site._

As soon as there is something testable, I will report back here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UFIGH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UcYJY,aspectj,1416725080,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-04T11:13:24Z,2023-02-04T11:13:24Z,"@m4urer, I just quickly started Eclipse 2022-12 and imported the non-AspectJ project you mentioned. Please note, that Spring AOP is not the same as AspectJ. It works without any problems. Maybe, instead of the _spring-aop-2_ module, you meant to point to the [_spring-aop_](https://github.com/eugenp/tutorials/tree/188201d3247ee57704c3d8b37aa43a9f3147b694/spring-aop) module, which does actually use AspectJ Maven and native AspectJ. For that one, I really do see import problems. The same is true for my local AspectJ Maven projects.

I am not sure if the reason is to be found within AJDT. Maybe it is rather about the [Maven to Eclipse (m2e) connector](https://github.com/eclipse/org.aspectj/blob/master/docs/developer/IDE.md#maven-to-eclipse-m2e-connector) mentioned in the IDE setup guide and which is maintained outside of the AspectJ and AJDT projects. @joker1, what do you think? Can you please take a look and fix the problem in the Maven connector? Somehow, during import the AspectJ nature is not added to the Eclipse project.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UcYJY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UhBS5,aspectj,1417942201,223,NA,m4urer,3002779,,,NA,2023-02-05T14:07:12Z,2023-02-05T14:07:12Z,"Hi @kriegaex , I just made a mistake with the link, it's [spring-aop](https://github.com/eugenp/tutorials/tree/master/spring-aop). There's an **com.baeldung.aspectj** package in that project where you can see the aspect markers are missing (in AccountAspect for example) unless you change the classpath. I noticed the problem in my own projects, just as you did, I just wanted to give a easy/public example just in case it was necessary. I had to add the aspectj nature when I imported the project if I remember correctly, but the .classpath format is still causing the weaving issues.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UhBS5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UhDcv,aspectj,1417951023,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-05T14:13:51Z,2023-02-05T14:13:51Z,"I am currently busy with something else, so I did not try to just reimport the latest JDT Core stuff into AJDT and see if somehow it magically fixes the problem, always hoping that not AJDT itself is parsing the _.classpath_ file. It might be an M2E connector issue, a question of just updating JDT Core in AJDT or even something requiring changes in AJDT itself (which would be the worst case for me, not knowing the code base or Eclipse OSGi plugin programming in general).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5UhDcv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VCRVs,aspectj,1426658668,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-11T08:23:58Z,2023-02-11T08:23:58Z,"Status quo: I just upgraded a few dependencies in AJDT, rebuilt and upgraded AJDT in my local Eclipse 2022-12. It does not help. Here is the corresponding Eclipse error log when importing a multi-module Maven project containing AspectJ Maven Plugin:

```text
!ENTRY org.eclipse.m2e.logback.appender 4 0 2023-02-11 09:18:29.714
!MESSAGE Launch configuration Application (189) references non-existing project application.
!STACK 1
org.eclipse.core.runtime.CoreException: Launch configuration Application (189) references non-existing project application.
	at org.eclipse.jdt.launching.JavaRuntime.abort(JavaRuntime.java:1861)
	at org.eclipse.jdt.launching.JavaRuntime.getJavaProject(JavaRuntime.java:1736)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.updateLaunchConfiguration(MavenLaunchConfigurationListener.java:64)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.launchConfigurationChanged(MavenLaunchConfigurationListener.java:50)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.run(LaunchManager.java:225)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.notify(LaunchManager.java:209)
	at org.eclipse.debug.internal.core.LaunchManager.launchConfigurationChanged(LaunchManager.java:2147)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.writeNewFile(LaunchConfigurationWorkingCopy.java:377)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave0(LaunchConfigurationWorkingCopy.java:259)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave(LaunchConfigurationWorkingCopy.java:229)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave(LaunchConfigurationWorkingCopy.java:187)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.enable(MavenRuntimeClasspathProvider.java:399)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.enable(MavenRuntimeClasspathProvider.java:428)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.mavenProjectChanged(MavenLaunchConfigurationListener.java:132)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.notifyProjectChangeListeners(ProjectRegistryManager.java:832)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.applyMutableProjectRegistry(ProjectRegistryManager.java:985)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.refresh(ProjectRegistryManager.java:315)
	at org.eclipse.m2e.core.internal.project.ProjectConfigurationManager.configureNewMavenProjects(ProjectConfigurationManager.java:256)
	at org.eclipse.m2e.core.internal.project.ProjectConfigurationManager.lambda$1(ProjectConfigurationManager.java:166)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:364)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:274)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:213)
	at org.eclipse.m2e.core.internal.project.ProjectConfigurationManager.importProjects(ProjectConfigurationManager.java:139)
	at org.eclipse.m2e.core.ui.internal.wizards.ImportMavenProjectsJob$1.doCreateMavenProjects(ImportMavenProjectsJob.java:70)
	at org.eclipse.m2e.core.ui.internal.wizards.AbstractCreateMavenProjectsOperation.run(AbstractCreateMavenProjectsOperation.java:56)
	at org.eclipse.m2e.core.ui.internal.wizards.ImportMavenProjectsJob.runInWorkspace(ImportMavenProjectsJob.java:79)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:43)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.jdt.launching 4 107 2023-02-11 09:18:29.714
!MESSAGE Launch configuration Application (189) references non-existing project application.

!ENTRY org.eclipse.m2e.logback.appender 2 0 2023-02-11 09:18:31.963
!MESSAGE CatalogItem org.eclipse.m2e.discovery.lifecyclemapping.m2e-egit does not contain lifecycle mapping metadata
```

@joker1, would you please take a look and tell me if this can be fixed in your project, or if you think it must be fixed in AJDT? I have no clue at all.

During project import there were also warnings about Eclipse not being able to find anything on the Marketplace which maps to AspectJ Maven Plugin.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VCRVs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VD0da,aspectj,1427064666,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-12T15:46:20Z,2023-02-12T15:46:20Z,"@m4urer, because @joker1 has not reacted yet, I upgraded the AJDT M2E Connector to 2022-12, but without really knowing much about what I was doing. It seems to work now, but there are error messages for older AspectJ Maven versions depending on Java 8 _tools.jar_.
* Ideally, you should use `dev.aspectj:aspectj-maven-plugin:1.13.1`. It is capable of accomodating the latest source, target, release versions supported by AspectJ (e.g. Java 19 when used with AspectJ Tools 1.9.19) and in general a bit more feature-rich than the Mojohaus version. (Spoiler: I am the maintainer.)
* The second best choice is `org.codehaus.mojo:aspectj-maven-plugin:1.14.0`.

The new connector version is quite hacky, I might have broken something, even though I did not notice anything yet. It depends on the latest M2E 2.x versions contained in more recent Eclipse versions. I would appreciate some feedback. Please use this preliminary update site:

https://aspectj.dev/eclipse/m2eclipse-ajdt/eclipse-2022-12/

The build is unsigned, just accept that during installation.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VD0da/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VHe4d,aspectj,1428024861,223,NA,m4urer,3002779,,,NA,2023-02-13T14:23:26Z,2023-02-13T14:23:26Z,"Hi @kriegaex , first of all, **THANK YOU SO MUCH** for all your effort!
I'm sorry to report that I've updated the connector, but the .classpath problem persists. Did you tested locally and got it working?

In my projects I'm using JAVA 17 + dev.aspectj 1.13.1 and aspectj 1.9.19.
In the spring-aop project I used as an example, they're using mojo so I've updated to 1.14.0 and kept aspectj 1.9.1, but the error is the same. This project is using java 1.8.

In my eclipse I have JRE 17, which doesn't have tools.jar in the /lib folder anymore (it's embedded, so the jar is not there anymore, I think it's like that since java 11). So what I've noticed with the update, is that the JAVA 1.8 project is now throwing an error since tools.jar is missing (and I guess that's hardcoded in the plugin somehow). So maybe the plugin should be compiled using java 11+ or that part of the code fixed. Could that be causing the issue? 
What I did is update the spring-aop project to java 17, and the tools.jar error was fixed, but the weaving problem it's still there.
But I'm sending the error image just in case is useful somehow
![tools-jar](https://user-images.githubusercontent.com/3002779/218482813-8478ddd5-94ba-4a30-8c00-6082bc6bce5e.png)

Anything else I can try?
Thanks again!
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VHe4d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VHzsA,aspectj,1428110080,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-13T15:12:21Z,2023-02-13T15:12:21Z,"Like I said, do not use old AspectJ Maven versions. Your project uses AJ Maven 1.11. Use the versions I told you to, please. Your screenshot clearly says that Codehaus version 1.11 is being used. Please upgrade, save the POM and then right-click the module and select ""Maven - Update project"" (Alt-F5) from the context menu.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VHzsA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VILAs,aspectj,1428205612,223,NA,m4urer,3002779,,,NA,2023-02-13T16:05:52Z,2023-02-13T16:05:52Z,"I took the screen capture before updating. Like I said, once I updated to
mojo 1.14.0 and java 17 the tools.jar problem disappeared.
But I still need to fix the .classpath manually for eclipse to weave the
classes.
Same for my projects with dev.aspectj

El lun, 13 feb 2023 12:12, Alexander Kriegisch ***@***.***>
escribió:

> Like I said, do not use old AspectJ Maven versions. Your project uses AJ
> Maven 1.11. Use the versions I told you to, please. Your screenshot clearly
> says that Codehaus version 1.11 is being used. Please upgrade, save the POM
> and then right-click the module and select ""Maven - Update project""
> (Alt-F5) from the context menu.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/org.aspectj/issues/223#issuecomment-1428110080>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAW5DGYVD4FH4FN4YZGFAJ3WXJFOBANCNFSM6AAAAAAUMS5W7M>
> .
> You are receiving this because you were mentioned.Message ID: <eclipse/org
> .***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VILAs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VIxw0,aspectj,1428364340,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-13T17:31:53Z,2023-02-13T17:31:53Z,"Hm, actually, before changing the M2E connector, I also built a new local AJDT version. I It did not help, so I did not think it would make a difference. But maybe, it is a combination of AJDT and M2E. Please try my development build of AJDT together with the M2E connector:

https://aspectj.dev/eclipse/ajdt/426/

Sorry for urging you to experiment, but I just did what I could. Actually, I don't ""speak Elcipse OSGi plugins"", so I am just playing around there. Anyway, locally it works for me.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VIxw0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VJtzw,aspectj,1428610288,223,NA,m4urer,3002779,,,NA,2023-02-13T20:10:27Z,2023-02-13T20:10:27Z,"Same problem. I've updated ajdt and m2eclipse-ajdt as requested, but I still have the same problem. I need to manually fix the .classpath for the weaving to work.
![aspect-installed](https://user-images.githubusercontent.com/3002779/218564625-4c4969cd-3d9f-4f43-b883-a0877e886678.png)
I don't know how it's now fixed for you and not for me. could it be the java version somehow? what are you using? I'm using 17. Could you check you eclipse .classpath file? what's the format for src/main/java entry?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VJtzw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VMKP8,aspectj,1429251068,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-14T07:23:38Z,2023-02-14T07:23:38Z,"> I don't know how it's now fixed for you and not for me.

I do not know, either. For me it just works.

> could it be the java version somehow? what are you using? I'm using 17.

Eclipse 2022-12 comes bundled with Java 17, so my M2E importer uses the same. When I first opened the Baeldung Spring sample project with the old AJ Maven version requiring _tools.jar_, I had the same error as you, but after fixing that in the POM, it works fine.

> Could you check you eclipse .classpath file? what's the format for src/main/java entry?

It looks just like yours, e.g.

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<classpath>
	<classpathentry kind=""src"" output=""target/classes"" path=""src/main/java"">
		<attributes>
			<attribute name=""optional"" value=""true""/>
			<attribute name=""maven.pomderived"" value=""true""/>
		</attributes>
	</classpathentry>
	<classpathentry kind=""src"" output=""target/test-classes"" path=""src/test/java"">
		<attributes>
			<attribute name=""optional"" value=""true""/>
			<attribute name=""maven.pomderived"" value=""true""/>
			<attribute name=""test"" value=""true""/>
		</attributes>
	</classpathentry>
	<classpathentry kind=""con"" path=""org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"">
		<attributes>
			<attribute name=""maven.pomderived"" value=""true""/>
		</attributes>
	</classpathentry>
	<classpathentry kind=""con"" path=""org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER"">
		<attributes>
			<attribute name=""maven.pomderived"" value=""true""/>
		</attributes>
	</classpathentry>
	<classpathentry kind=""output"" path=""target/classes""/>
</classpath>
```

My Eclipse installation is from 2019 or so, upgraded again and again using the normal Eclipse update, not reinstalled from scratch. That is the only ""anomaly"" I can think of. Other than actually looking at your local situation via Teamviewer or so, I currently have no new ideas.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VMKP8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VPizV,aspectj,1430138069,223,NA,m4urer,3002779,,,NA,2023-02-14T17:45:37Z,2023-02-14T17:45:37Z,"Please try this out. 
Remove aspectj capacity from the aop-project, then add it again. Then I can see the eclipse markers.
![github1](https://user-images.githubusercontent.com/3002779/218816444-ef0eb387-3e95-467e-ac1c-d46b6fbe55f7.png)
But then, I did a **maven->update** project followed by a **project->clean** (i think even without the clean), and the markers are once again lost, and impossible to get back unless I do the .classpath trick or again remove/add the capability.
Could you check if it happens to you too?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VPizV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VSTD5,aspectj,1430860025,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-15T07:10:40Z,2023-02-15T07:10:40Z,"Oh yeah, that is actually true. Before, I simply checked that the AJ nature was imported and the aspects were being applied when compiling in Eclipse, which both is true. I did not focus on the aspect markers. For those, the classpath XML format really needs to be altered manually. So this might need a fix in AJDT on top of the fix in the M2E connector. Maybe, one of these days after work I can look into that.

But in AJDT much more is broken, e.g. there are errors when opening the ""Aspect Visualization"" view. I have no idea for how long that was broken already (do you?), and I do not feel so inclined to spend my sparetime learning Eclipse plugin development and understand the complex AJDT code. I wish someone who knows how to do that would come along and maintain AJDT, me just giving input concerning AspectJ particulars.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VSTD5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VbsTl,aspectj,1433322725,223,NA,m4urer,3002779,,,NA,2023-02-16T16:02:25Z,2023-02-16T16:02:25Z,"Sorry, I don't know if **aspect visualization** was broken before you compiled the new version.
I'm amazed that I'm the only one with this problem, is nobody using aspectj and maven with eclipse since since the broken version?
For us removing aspectj would be very difficult. Maybe we could consider an IDE switch, but that also have it's learning curve.
Since you said intellij is your main idea, should the same maven project work on intellij? would switching IDEs solve the problem?
Thanks!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VbsTl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vkn50,aspectj,1435663988,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-18T12:55:54Z,2023-02-18T12:55:54Z,"The (still falsely co-called) _spring-aop_ project works nicely with Maven auto-import in IntelliJ. But AspectJ support within the IDE requires the Ultimate Edition, even though probably the Maven build as such would work just fine in the Community Edition.

Unfortunately, AspectJ support in IDEA has not been improved in a long time, merely maintained minimally. E.g., there are no aspect markers like in Eclipse with AJDT. My plea to open-source the AspectJ plugin in order to maybe attract developers to improve it has been ignored several times by JetBrains staff.

I have taken some time earlier today to debug into AJDT, in order to find out how to fix the marker issue, but with my level of knowledge this proves to be just what I expected: searching for a needle in a haystack. If you are lucky, I might find something and figure out a way to solve it, but presently I am still pretty much clueless. JDT Core parses the XML just fine, but somehwere the additional attributes seem to derail AJDT later on anyway, even though AJDT uses attributes for things like inpath and aspectpath, too. Maybe it assumes that there are no other possible attributes, or a relatively new `hashCode` method in JDT Core is the culprit. I shall keep you posted, if there are any good news. I do not feel so inclined to invest much more time, but maybe when I am bored, I look into it again. Probably, a former contributor like @aeisenberg would be able to fix this in no time, but we have to accept that people have moved on from AJDT.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vkn50/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WIvtS,aspectj,1445133138,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-25T14:38:50Z,2023-02-25T14:38:50Z,"> Please try my development build of AJDT together with the M2E connector:
> 
> https://aspectj.dev/eclipse/ajdt/426/

Please try again, @m4urer. For me, the markers are OK now. I spent way more time with this during the last weekends. I hope it is working for you now, too.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WIvtS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WJa5P,aspectj,1445310031,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-26T09:38:50Z,2023-02-26T09:38:50Z,For the record: #226 automatically closed this issue. But the local changes fixing it in AJDT have not been pushed and merged yet.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WJa5P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WNQJC,aspectj,1446314562,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-27T13:19:46Z,2023-02-27T13:19:46Z,"@m4urer, I found the reason for the errors when opening the ""Aspect Visualization"" view. I fixed it, please also retest that after updating to the latest AJDT version for 4.26 (2022-12). Looking forward to your feedback.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WNQJC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WOba0,aspectj,1446622900,223,NA,m4urer,3002779,,,NA,2023-02-27T16:16:18Z,2023-02-27T16:16:18Z,"Hi @kriegaex I can confirm that it looks fixed! I had to update de AJDT version, and then do a maven update and clean on all projects, but it seems to be working. I can also confirm the aspect visualization is working.
I'll start using the upgraded eclipse version probably in the coming weeks so I'll give it a good try, but for now.. this is definitely closed. 
I'm beyond grateful for the work you've put in! Thanks for keeping this alive without any help at all! ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WOba0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WSjVS,aspectj,1447703890,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-28T07:27:19Z,2023-02-28T07:27:19Z,Reopening until there is an AJDT version on an Eclipse update site.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WSjVS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/223,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WTnSr,aspectj,1447982251,223,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-28T11:03:10Z,2023-02-28T11:03:10Z,The new update site https://download.eclipse.org/tools/ajdt/426/dev/update is operational and documented in https://github.com/eclipse/org.aspectj/blob/master/docs/developer/IDE.md#aspectj-development-tools-ajdt.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5WTnSr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,aspectj,1590599127,224,Eclipse Distribution License,sirinath,637415,Suminda Sirinath Salpitikorala Dharmasena,sirinath1978m@gmail.com,OPEN,2023-02-19T07:57:23Z,2024-01-06T09:50:10Z,"Dual license with Eclipse Distribution License (https://www.eclipse.org/org/documents/edl-v10.php).

Since EPLv1 to EPLv2 change has been done making this addition will be easy.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VlnV2,aspectj,1435923830,224,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-19T08:22:18Z,2023-02-19T08:22:18Z,"@sirinath, add to where exactly?

@aclement, you are the project lead, you should be in the loop and ideally comment on this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VlnV2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VloGo,aspectj,1435926952,224,NA,sirinath,637415,Suminda Sirinath Salpitikorala Dharmasena,sirinath1978m@gmail.com,NA,2023-02-19T08:41:53Z,2023-02-19T08:41:53Z,"> add to where exactly?

@kriegaex  The EDL license can be added to the root directory of the project. See: https://github.com/eclipse/eclipse-collections","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VloGo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VloSV,aspectj,1435927701,224,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-02-19T08:46:51Z,2023-02-19T08:46:51Z,"Does it have to be added to binary artifacts (JARs) we publish on Maven Central, too?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VloSV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VlvWr,aspectj,1435956651,224,NA,sirinath,637415,Suminda Sirinath Salpitikorala Dharmasena,sirinath1978m@gmail.com,NA,2023-02-19T10:59:50Z,2023-02-19T10:59:50Z,Yes.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VlvWr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VyMeP,aspectj,1439221647,224,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-02-21T23:23:45Z,2023-02-21T23:23:45Z,This has come up before. I seem to recall it not being trivial to add it and I think it was you who asked for it before Sirinath. Let me try and find where it was discussed.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VyMeP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VyNID,aspectj,1439224323,224,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-02-21T23:28:08Z,2023-02-21T23:28:08Z,"Maybe you were just actually taking the action I recommended for you in this thread : https://www.eclipse.org//lists/aspectj-dev/msg03304.html :) 

I still have no idea how much work it is. If it requires checking with all previous committers of the code that it can be relicensed - bit of a no go. If inclusion of EPL makes EDL a no-op easy thing to do, I am probably ok with it subject to us reviewing what the requirements are for distribution. We would need to ask someone at the eclipse org to confirm, I wouldn't blindly make the change. 

I asked chatgpt :) and it said it would probably be ok but ended with ""you should ask a legal professional"" so back to what I said. I'd raise a question with eclipse to confirm.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5VyNID/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vy7JA,aspectj,1439412800,224,NA,sirinath,637415,Suminda Sirinath Salpitikorala Dharmasena,sirinath1978m@gmail.com,NA,2023-02-22T04:12:53Z,2023-02-22T04:12:53Z,"When the license was changed to EPL 2.0 all the license assignments should have already done and the needed work is complete, hence adding EDL now is a lot simpler than when it was EPL 1.0.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Vy7JA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Wl57_,aspectj,1452777215,224,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2023-03-03T00:47:00Z,2023-03-03T00:47:00Z,"Just to clarify, by:
> I'd raise a question with eclipse to confirm.
I was implying we, the project, would raise that request with legal for confirmation.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Wl57_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/224,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5wCKza,aspectj,1879616730,224,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-01-06T09:50:09Z,2024-01-06T09:50:09Z,"@aclement, has what is the status quo here? Did you talk to legal?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5wCKza/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,aspectj,1630284944,227,Add native runtime hints for weaver-messages,d-eder,43540052,,,CLOSED,2023-03-18T11:29:49Z,2024-06-20T04:35:31Z,"When AOP is failing due to an exception on native applications, an exception is thrown that it cannot find the resources for `org.aspectj.weaver.weaver-messages` (see stacktrace). 

According to my [MR](https://github.com/spring-projects/spring-boot/pull/34568) on spring boot, we should provide native hints directly on the library or on the [GraalVM repo](https://github.com/oracle/graalvm-reachability-metadata).

Testing environment
* spring boot 3.0.4 (which uses org.aspectj:aspectjweaver:1.9.19)
* graal vm 17.0.5
* graal vm gradle plugin: org.graalvm.buildtools.native 0.9.20


```
2023-03-10T06:42:43.871Z ERROR 1 --- [           main] o.s.boot.SpringApplication               : Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'configurationPropertiesBeans': null
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[na:na]
        at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:763) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:568) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:310) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1304) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1293) ~[com.deder.wol.WolApplicationKt:3.0.4]
        at com.deder.wol.WolApplicationKt.main(WolApplication.kt:13) ~[com.deder.wol.WolApplicationKt:na]
Caused by: java.lang.ExceptionInInitializerError: null
        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.verifyIsAnnotationType(ExactAnnotationTypePattern.java:354) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.resolveBindings(ExactAnnotationTypePattern.java:318) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.patterns.AnnotationPointcut.resolveBindings(AnnotationPointcut.java:184) ~[na:na]
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:189) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:331) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.reflect.InternalUseOnlyPointcutParser.resolvePointcutExpression(InternalUseOnlyPointcutParser.java:36) ~[na:na]
        at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts(Java15ReflectionBasedReferenceTypeDelegate.java:307) ~[na:na]
        at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts(ReferenceType.java:890) ~[com.deder.wol.WolApplicationKt:1.9.19]
        at org.aspectj.weaver.ResolvedType$PointcutGetter.get(ResolvedType.java:261) ~[na:na]
        at org.aspectj.weaver.ResolvedType$PointcutGetter.get(ResolvedType.java:258) ~[na:na]
        at org.aspectj.weaver.Iterators$4$1.hasNext(Iterators.java:213) ~[na:na]
        at org.aspectj.weaver.Iterators$4.hasNext(Iterators.java:230) ~[na:na]
        at org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:767) ~[com.deder.wol.WolApplicationKt:1.9.19]
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:148) ~[na:na]
        at org.aspectj.weaver.patterns.OrPointcut.resolveBindings(OrPointcut.java:88) ~[na:na]
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:189) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:331) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:312) ~[com.deder.wol.WolApplicationKt:na]
        at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:222) ~[na:na]
        at org.springframework.aop.aspectj.AspectJExpressionPointcut.obtainPointcutExpression(AspectJExpressionPointcut.java:193) ~[na:na]
        at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:172) ~[na:na]
        at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:226) ~[na:na]
        at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:288) ~[na:na]
        at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:320) ~[na:na]
        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:128) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:97) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:78) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:366) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:318) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:435) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1765) ~[com.deder.wol.WolApplicationKt:6.0.6]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[com.deder.wol.WolApplicationKt:6.0.6]
        ... 15 common frames omitted
Caused by: java.util.MissingResourceException: Can't find bundle for base name org.aspectj.weaver.weaver-messages, locale en_US
        at java.base@17.0.6/java.util.ResourceBundle.throwMissingResourceException(ResourceBundle.java:2045) ~[com.deder.wol.WolApplicationKt:na]
        at java.base@17.0.6/java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1683) ~[com.deder.wol.WolApplicationKt:na]
        at java.base@17.0.6/java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1586) ~[com.deder.wol.WolApplicationKt:na]
        at java.base@17.0.6/java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1549) ~[com.deder.wol.WolApplicationKt:na]
        at java.base@17.0.6/java.util.ResourceBundle.getBundle(ResourceBundle.java:858) ~[com.deder.wol.WolApplicationKt:na]
        at org.aspectj.weaver.WeaverMessages.<clinit>(WeaverMessages.java:19) ~[na:na]
        ... 47 common frames omitted
```


","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5X6Blh,aspectj,1474828641,227,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-18T11:59:37Z,2023-03-18T11:59:37Z,"@aclement, please take a look at this. I know that you are part of the Spring Native team, so you probably know what this is about. I have no idea about GraalVM, never used it before and do not even know what a ""native hint"" is supposed to be.

Pointers:

https://github.com/eclipse/org.aspectj/blob/a8a2f82fda825b36acade534f876f595b6566919/org.aspectj.matcher/src/main/java/org/aspectj/weaver/WeaverMessages.java#L17-L19

This is the corresponding [properties file](https://github.com/eclipse/org.aspectj/blob/master/org.aspectj.matcher/src/main/resources/org/aspectj/weaver/weaver-messages.properties).
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5X6Blh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5rsjuh,aspectj,1806842785,227,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-11T15:21:03Z,2023-11-11T15:21:03Z,"> According to my [MR](https://github.com/spring-projects/spring-boot/pull/34568) on spring boot, we should provide native hints directly on the library or on the [GraalVM repo](https://github.com/oracle/graalvm-reachability-metadata).

@d-eder, AspectJ does not provide any special builds for GraalVM. Can you please explain what a ""native hint"" is meant to be and how AspectJ could be enhanced to provide one? I cannot do anything, if I do not understand what you are even asking of me. The person I assigned this issue to is unresponsive, so I cannot ask him either. Please explain and/or provide a PR. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5rsjuh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52flPI,aspectj,1987990472,227,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-11T09:40:38Z,2024-03-11T09:40:38Z,"@d-eder, CC @mp911de, @Ricard-Kollcaku: I have zero GraalVM experience, like I said before. I asked a question, which I got no response to:

> Can you please explain what a ""native hint"" is meant to be and how AspectJ could be enhanced to provide one? I cannot do anything, if I do not understand what you are even asking of me.

This issue is not going to magically solve itself by throwing something over the fence. Please tell me what exactly you need AspectJ to provide or create a PR. I have no intention of ignoring issues, but if Spring refuses to do something about it, arguing that AspectJ should, nothing will happen if I do not know what is expected from us here. Probably @aclement would know, as he knows GraalVM, but he has not been active in the project for quite a while. Thanks in advance to anyone who can she light on this matter.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52flPI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52fncd,aspectj,1987999517,227,NA,Ricard-Kollcaku,85928772,,,NA,2024-03-11T09:45:40Z,2024-03-11T09:45:40Z,"Hi @kriegaex  regarding my ticket this is resolved by spring boot team. 

Hints are declaration that u do to graalvm when your code uses some classes for reflection (proxy, resources) things that graalvm cant detect in compile time.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52fncd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52hdUc,aspectj,1988482332,227,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-11T13:46:23Z,2024-03-11T13:46:23Z,"Thanks, @Ricard-Kollcaku. That does not help me much with regard to what exactly, if anything, I am expected to add to AspectJ to make it work out of the box. Are you saying, this issue can be closed, or would it be better to solve this in AspectJ to get rid of any Spring workarounds? I really have no clue and also not enough time to study this topic in depth. For a little while, I am going to wait for more feedback from everyone involved here before closing the issue as ""won't fix"", so everybody can speak up.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52hdUc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52wHRB,aspectj,1992324161,227,NA,d-eder,43540052,,,NA,2024-03-12T18:46:38Z,2024-03-12T18:46:38Z,"Sorry for the very late reply. When I find more time, I'll give it another try with updated versions.

You can check [Spring GraalVM Native - Image Support](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html) and/or the [GraalVM Page](https://www.graalvm.org/22.3/reference-manual/native-image/metadata/#resources-and-resource-bundles) itself to get more information and knowledge about that.

What we would need is to inlcude the resource metadata similar to [here](https://www.graalvm.org/22.3/reference-manual/native-image/metadata/#resources-and-resource-bundles).

Afaik we can add this somehow to this project (probably we need to add it somewhere to the classpath) or we can use the [graalvm-reachability-metadata repo](https://github.com/oracle/graalvm-reachability-metadata).

But maybe let's first evaluate, if it's still necessary and try to make it reproduceable.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52wHRB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53BlAW,aspectj,1996902422,227,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-14T08:54:15Z,2024-03-14T08:54:15Z,"@d-eder, like I said, I neither have time not feel much inclined to dig into the GraalVM docs and learn everything from scratch there. So thanks, but I would really appreciate a PR in this case. At the very least, I need whatever config files need to be added to AspectJ and an exact descriptions in which artifacts they are expected to reside where. Then, I can help with any packaging or build integration issues.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53BlAW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/227,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B7Osi,aspectj,2179787554,227,NA,d-eder,43540052,,,NA,2024-06-20T04:35:25Z,2024-06-20T04:35:25Z,"I quickly retested it and it seems to work now:
* org.springframework.boot 3.3.0
* org.graalvm.buildtools.native 0.10.2
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B7Osi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,aspectj,1632166976,228,AspectJ showing circular advice precedence error where it shouldn't,ttho,8222080,Timo Thomas,,CLOSED,2023-03-20T13:55:32Z,2023-03-24T08:21:55Z,"AspectJ complains about my aspect and I don't understand why.

The original aspect is much more complex, I already boiled it down to something rather simple:

```
package de.tt;

import java.util.ArrayList;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class FaultyAspect {

    @Before(""call(* *(..)) && target(java.util.Collection)"")
    public void before1() {
    }

    @After(""call(* *(..)) && target(java.util.Collection)"")
    public void after1() {
    }

    @Before(""call(* *(..)) && !target(java.util.Collection)"")
    public void before2() {
    }

    @After(""call(* *(..)) && !target(java.util.Collection)"")
    public void after2() {
    }

    public static void main(String[] args) {
        new ArrayList().iterator().hasNext();
    }
}
```

The error showing up is (multiple times):

`circular advice precedence: can't determine precedence between two or more pieces of advice that apply to the same join point: method-call(boolean java.util.Iterator.hasNext())
`

I do not understand that error. For me the aspect should be ok. Strangely, the problem goes away when the after1 and after2 advice is removed. The same is true for removing before1 and before2.

Tested with 1.9.19 and 1.9.20-SNAPSHOT (a8a2f82fd)
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YAMsL,aspectj,1476446987,228,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-20T15:29:34Z,2023-03-20T15:29:34Z,"I am too busy to read your inquiry in detail right now, but the basic problem with the current way of determining precedence is described in https://github.com/eclipse/org.aspectj/issues/25. I also have a simple and elegant way to avoid it, introducing new precedence rules which can no longer lead to circularity.

The thing is, it would be a breaking change. I would love to do it, but back in 2020 when I suggested it, I was not an active committer yet, and project lead @aclement neither was convinced that it should be changed nor had any free cycles to look into it. Maybe he and I can discuss this topic again for a future AspectJ release.

For now, just read the other issue I created and try to understand the current precedence rules. I linked to a Stack Overflow answer about this topic and also to the AspectJ manual.

**Update:** As a goodie, you may use the little intra-aspect precedence simulator tool I also linked off of #25. It visualises your own situation for you, if you configure it correspondingly.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YAMsL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWr_N,aspectj,1482342349,228,NA,ttho,8222080,Timo Thomas,,NA,2023-03-24T07:00:01Z,2023-03-24T07:00:01Z,"Hi Alex, thanks for your quick reply! I was able to solve my problem with your hints by re-arranging the advices. However, I am still confused why I see this error. The manual states that there might be circularity if pieces of advice ""advise the same join point"". But this is not the case in my example. I was able to further simplify it to:

```
@Aspect
public class FaultyAspect {

    @Pointcut(""if()"")
    public static boolean _true() {
        return true;
    }

    @Pointcut(""if()"")
    public static boolean _false() {
        return false;
    }

    @Before(""call(* *(..)) && _true()"")
    public void before1() {
    }

    @After(""call(* *(..)) && _true()"")
    public void after1() {
    }

    @Before(""call(* *(..)) && _false()"")
    public void before2() {
    }

    public static void main(String[] args) {
        System.out.println(""hello world"");
    }
}
```

If before2() is removed, the error vanishes. However, advice before2 clearly does not apply to the same join points.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWr_N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWt81,aspectj,1482350389,228,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-24T07:08:12Z,2023-03-24T07:08:12Z,"`call(* *(..))` does apply to the same pointcuts in all your advices. The `if()` pointcuts do not change that fact. They only serve to dynamically decide during runtime whether an advice should be executed or not. An `if()` pointcut could yield different results when called several times, i.e. the advice would be executed or not. But it still matches the same joinpoints.

```java
@Pointcut(""if()"")
public static boolean throwDice() {
  return new Random().nextBoolean();
}
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWt81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWyQr,aspectj,1482368043,228,NA,ttho,8222080,Timo Thomas,,NA,2023-03-24T07:25:24Z,2023-03-24T07:25:24Z,"Oh yes, poorly simplified. I should have done it like this:

```
@Aspect
public class FaultyAspect {

    @Before(""call(* *(..)) && target(java.util.List)"")
    public void before1() {
    }

    @After(""call(* *(..)) && target(java.util.List)"")
    public void after1() {
    }

    @Before(""call(* *(..)) && !target(java.util.List)"")
    public void before2() {
    }

    public static void main(String[] args) {
        System.out.println(""hello world"");
    }
}
``` 

If I replace 'java.util.List' by 'java.util.ArrayList', the error vanishes. So it comes down to that some pointcuts can only by evaluated at runtime, in this case whether the target implements an interface. For classes (inheritance), this can be determined at weave time.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YWyQr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/228,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YW_P4,aspectj,1482421240,228,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-03-24T08:21:47Z,2023-03-24T08:21:47Z,"I think we have clarified everything here. AspectJ behaves as it is supposed to according to the current intra-aspect precedence rules, even though I would also prefer the ones I suggested, in which circularity cannot even occur. But this is not how AspectJ implements them at present.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5YW_P4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/236,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/236,aspectj,1664449459,236,update website on eclipse.org,sellersj,4390,,,CLOSED,2023-04-12T12:14:36Z,2024-02-15T04:32:28Z,"The official (?) website looks out of date with the latest news / releases being from 2021.
https://www.eclipse.org/aspectj/

If this site has more up to date releases / news that people should be using, the site should point here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/236/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/236,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Z7LmD,aspectj,1508686211,236,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-04-14T14:45:02Z,2023-04-14T14:45:02Z,"Yes, that is right. The reason is very simple: Currently, I am the main contributor to AspectJ, but I am not the project lead and do not have write access to all of the project's infrastructure. The project lead, however, does not have any free cycles for AspectJ. I am 95% done migrating all of the existing documentation to AsciiDoc format for it to be readable inline while browsing the repository, see [this branch on my private fork](https://github.com/kriegaex/aspectj/tree/docs-to-asciidoc) and https://github.com/eclipse-aspectj/aspectj/issues/76. Open the issue and click on a few links there in order to inspect the status quo.

@aclement, can you maybe contact me on Slack and tell me how to publish the classical website? Maybe in this case, I have the necesary access rights already, or there is an Eclipse Jenkins job already which I am unaware of. I never really bothered to inquire, because you used to be the person cutting releases and updating the website.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5Z7LmD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/236,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z86A3,aspectj,1945346103,236,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-15T04:32:28Z,2024-02-15T04:32:28Z,The website has been updated.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5z86A3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/237,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/237,aspectj,1677430241,237,Problem running AspectJ Load-Time-Weaving with java command,devbith,90990481,devbith,,CLOSED,2023-04-20T21:05:24Z,2023-04-21T07:22:22Z,"It seems there is some problem with load time weaving 

```
$ java -javaagent:lib/aspectjweaver-1.9.19.jar -cp ""lib/*:classes/"" -Daj.weaving.verbose=true Runner

[AppClassLoader@18b4aac2] info AspectJ Weaver Version 1.9.19 built on Wednesday Dec 21, 2022 at 06:57:22 PST
[AppClassLoader@18b4aac2] info register classloader sun.misc.Launcher$AppClassLoader@18b4aac2
[AppClassLoader@18b4aac2] info no configuration found. Disabling weaver for class loader sun.misc.Launcher$AppClassLoader@18b4aac2
Hello
```

For more info
https://stackoverflow.com/questions/76068204/problem-running-aspectj-load-time-weaving-with-java-command?fbclid=IwAR19WbMwMOUbi9uBtuE1OhrnpiVXM2eSnfdbFD-oJBf5hx_93q88OD8wdnw","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/237,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5acXRH,aspectj,1517384775,237,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-04-21T07:22:22Z,2023-04-21T07:22:22Z,"Hello.

Please understand that this is a bug tracker meant to record and discuss bugs or feature requests. It is not a support forum and certainly not an extension to Stack Overflow. I am going to close this issue and respond on SO.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5acXRH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,aspectj,1681224480,238,Problem with abstract aspects and cflow(within()),ttho,8222080,Timo Thomas,,OPEN,2023-04-24T12:59:23Z,2023-08-08T09:43:47Z,"Given the following abstract and concrete aspect:

```java
package de.tt;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public abstract class AbstractAspect {
    
    @Pointcut
    abstract void myPointcut();

    @Before(""myPointcut()"")
    public void before(JoinPoint jp) {
        System.out.println(""before "" + jp);
    }
}
``` 

```java
package de.tt;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class ConcreteAspect extends AbstractAspect {

    @Pointcut(""cflow(within(de.tt.ConcreteAspect)) || cflow(within(de.tt.AbstractAspect))"") 
    public void self() {
    }
    
    @Pointcut(""!self() && call(* *(..))"")
    public void myPointcut() {
    }

}
``` 

I get the following error when load-time weaving

```java
package de.tt;

public class Main {

    public static void main(String[] args) {
        System.out.println(""hello"");
    }

}
``` 

`Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at de.tt.Main.main(Main.java:6)
Caused by: java.lang.NullPointerException
	at de.tt.AbstractAspect.<clinit>(AbstractAspect.java:1)
	... 1 more`

Why is that? Interestingly, the error goes away when 
* replacing `cflow(within(de.tt.AbstractAspect))` with `within(de.tt.AbstractAspect)`, or
* defining the concrete aspect through XML:
```java
<aspectj>
   <aspects>
       <concrete-aspect name=""de.tt.ConcreteAspect2"" extends=""de.tt.AbstractAspect"">
           <pointcut name=""myPointcut"" expression=""!cflow(within(de.tt.ConcreteAspect)) &amp;&amp; !cflow(within(de.tt.AbstractAspect)) &amp;&amp; call(* *(..))"" />
       </concrete-aspect>
   </aspects>
</aspectj>
``` 
Tested with a8a2f82fd.

Background: I am writing a very general aspect for access tracking and want to exclude any calls from my aspects. Is there a better way to achieve that?

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Dn-,aspectj,1590704638,238,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-14T08:17:43Z,2023-06-14T08:17:43Z,"Sorry for replying so late. Thanks for the problem report. I understand why you might want to use that pointcut. If your tracing aspect is the only one active and there is nothing like nested aspect execution, you could use `!cflow(adviceexecution()) && call(* *(..))` as a workaround. But if you use other aspects _around_ (not _before_ or _after_) the same code you want to trace, the corresponding calls would be excluded.

The problem you are describing originates in the fact that the base aspect constructor wants to use a control flow counter from the sub aspect. That counter is static and should be initialised when the sub aspect is going through static initialisation, i.e. during class-loading. I would have expected that that would have happened already when the base aspect constructor is executing. Why this is not the case, is yet to be investigated. A workaround for now would be not to extend a base aspect but to put everything into a single aspect.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Dn-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Hzb,aspectj,1590721755,238,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-14T08:27:54Z,2023-06-14T08:27:54Z,"A better solution would be, adapted from an example in the [AspectJ Programming Guide](https://www.eclipse.org/aspectj/doc/next/progguide/semantics-pointcuts.html#d0e5320):

```java
pointcut myAdvice():   adviceexecution() && within(AbstractAspect+);
pointcut self():       cflow(myAdvice());
pointcut myPointcut(): !self() && call(* *(..));
```

The addition of `&& within(AbstractAspect+)` makes it more precise. Sorry for the native AspectJ syntax. I guess you know how to convert that to annotation syntax.

You can, of course, also merge the first two pointcuts into one:

```java
pointcut self():       cflow(adviceexecution() && within(AbstractAspect+));
pointcut myPointcut(): !self() && call(* *(..));
```

Unrelated to this issue, but an idea for you: If you also want to trace constructor calls, you could do this:

```java
pointcut myPointcut(): !self() && (call(* *(..)) || call(*.new(..)));
```

The trace would still miss `staticinitialization`, `preinitialization` and `initialization` pointcuts, if these would be of any interest, but your own pointcut is just fine for method calls.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Hzb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Nv3,aspectj,1590746103,238,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-14T08:41:33Z,2023-06-14T08:41:33Z,"I think, I am not going to do anything to cover the corner case you just uncovered, because there is a good, canonical workaround. Generated aspect byte code would get more complex and potentially slower, too. The problem with `within(AbstractAspect+)` is, that it matches many joinpoints, among them static class initialisation, instance pre-initialisation and initialisation. Combining it with `adviceexecution()` is easy and expresses more clearly what you want in this case.

@aclement, do you think this ought to be fixed or improved?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5e0Nv3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/238,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jfz7c,aspectj,1669283548,238,NA,ttho,8222080,Timo Thomas,,NA,2023-08-08T09:43:47Z,2023-08-08T09:43:47Z,"@kriegaex, sorry for late feedback. With your explanations I was able to fix my problem, thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jfz7c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240,aspectj,1737645200,240,Misleading/No error during compile after annotation processing with faulty aj aspect file,warrenc5,3395365,Warren Crossing,warren.crossing@mofokom.biz,CLOSED,2023-06-02T07:52:30Z,2023-06-06T08:42:05Z,"version aspectj 1.9.19
reproducible test case supplied https://github.com/warrenc5/aspectj-bug.git

when I have aspectj maven plugin generate aj files from an annotation processor in that project
and there is an error in the aspect file 
then I get a stacktrace and abort
```
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.14.0:test-compile (test-compile) on project aspectj-bug: AJC compiler errors:
[ERROR] abort ABORT -- (NullPointerException) null
[ERROR] null
[ERROR] java.lang.NullPointerException
[ERROR] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.hasAspectDeclarations(AjLookupEnvironment.java:1475)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildTypeBindings(AjLookupEnvironment.java:1468)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:870)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotationsInternal(Compiler.java:1021)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:947)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:451)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1096)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR] 	at org.aspectj.tools.ajc.Main.run(Main.java:372)
[ERROR] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:250)

```
expected to get an informative error message same as when I run with the .aj file in the src/test/aspect directory.
```
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.14.0:test-compile (test-compile) on project aspectj-bug: AJC compiler errors:
[ERROR] error at BROKEN HERE
[ERROR]        ^^^
[ERROR] /home/wozza/code/aspectj-bug/src/test/aspect/MyTestAspect.aj:26:0::0 Syntax error, insert "";"" to complete aspect member declaration
[ERROR]
```

Please assist.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d54uK,aspectj,1575455626,240,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-04T08:01:54Z,2023-06-04T08:01:54Z,"Thanks for the report. The reproducible test case was essential for me to quickly identify the problem. Keep up the good practice!

I do not have much time, but I think that I fixed the problem. At least, when using the latest AspectJ snapshot, the result looks as expected:

```text
[INFO] --- aspectj-maven-plugin:1.13.1:test-compile (test-compile) @ aspectj-bug ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
my.MyAnnotationProcessor processing 
options: []
root elements :[MyVictim, MyTest]
root elements :[]
creating resource file:AJ_GH-240/target/generated-test-sources/aspectj-maven-plugin/MyTestAspect.aj
[ERROR] Syntax error, insert "";"" to complete aspect member declaration
	AJ_GH-240\target\generated-test-sources\aspectj-maven-plugin\MyTestAspect.aj:26
BROKEN HERE
       ^^^^

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
```

See also the PR  I created for you: https://github.com/warrenc5/aspectj-bug/pull/2.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d54uK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d6JfC,aspectj,1575524290,240,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-04T11:08:51Z,2023-06-04T11:08:51Z,"Probably you know already, but your workaround until the next release would be to use Maven Compiler with `<proc>only</proc>` in combination with AspectJ Maven with `<proc>none</proc>`, letting Javac do the annotation processing instead of Ajc.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d6JfC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/240,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eEWkm,aspectj,1578199334,240,NA,warrenc5,3395365,Warren Crossing,warren.crossing@mofokom.biz,NA,2023-06-06T08:42:04Z,2023-06-06T08:42:04Z,"Thank you, I will. Thanks again.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eEWkm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,aspectj,1741339684,242,JDK 20 snapshot available?,hensan64,51642316,,,CLOSED,2023-06-05T09:11:15Z,2023-06-12T11:42:39Z,"Hi

I need support for JDK20.

aspectj-maven-plugin fails with:

[INFO] 
[INFO] --- aspectj-maven-plugin:1.13.1:compile (compile_with_aspectj) ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] unrecognized single argument: ""-20""
	<unknown source file>:<no line information>
[ERROR] no sources specified
	<unknown source file>:<no line information>","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-J3C,aspectj,1576574402,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-05T10:59:23Z,2023-06-05T10:59:23Z,What exactly from Java 20 do you need? ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-J3C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-nU1,aspectj,1576695093,242,NA,hensan64,51642316,,,NA,2023-06-05T12:29:30Z,2023-06-05T12:29:30Z,"i want it to work with aspectj-maven-plugin that rely on aspectjrt / aspectjtools.

see error message in original message.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-nU1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-3oo,aspectj,1576761896,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-05T13:02:47Z,2023-06-05T13:02:47Z,"AspectJ Maven supports any Java source / target version AspectJ supports. Anyway, you didn't answer my question. Which Java 20 features are you trying to use? What stops you from using compliance level 17 or 19 on JDK 20? Why would you need 20?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-3oo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-6YS,aspectj,1576773138,242,NA,hensan64,51642316,,,NA,2023-06-05T13:08:50Z,2023-06-05T13:08:50Z,"I work corporately, and for security reasons we need to lift Java continuously to get the latest bug fixes. We are using AspectJ in our internal product code and its maven plugin. So we are not looking at features, we are lifting in order not to get stuck on unsupported code. And to provide the latest language features to our users (it is a test framework). And in order to avoid a big bang problem when a new Java LTS is released we are lifting our code continuously to keep pace... And we want to make sure that the latest compliance level works as well...","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d-6YS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d_08z,aspectj,1577013043,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-05T15:23:40Z,2023-06-05T15:23:40Z,"You gave me no reason to prioritise this. You can run the latest JDK and said you don't need any new language features, of which in Java 20 there are only preview features anyway. You didn't mention a single one of them you want to use. Therefore, there is no need to compile with level 20. The big bang argument does not apply either, if you don't upgrade your code to always use the latest preview features.

You really need to give me more than that for me to cut a release just for you. Besides, JDK 20 support has long been fully functional in my developer version. I just want to avoid the overhead to perform and document a release the features of which nobody uses. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5d_08z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eAvPx,aspectj,1577251825,242,NA,hensan64,51642316,,,NA,2023-06-05T18:12:25Z,2023-06-05T18:12:25Z,Ok. You mention a developer version (java-20 branch). Do you make unofficial development releases to Maven ARM:s?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eAvPx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eS5fw,aspectj,1582012400,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-08T07:13:58Z,2023-06-08T07:13:58Z,"Whatever ARM means in this case, I am not sure. But I just pushed a new 1.9.20-SNAPSHOT (exact snapshot version is 1.9.20-20230608.070552-7) from the Java 20 branch to https://oss.sonatype.org/content/repositories/snapshots. You might need the exact snapshot in the future, if I decide to push another snapshot from the main branch without Java 20 stuff. But I will try to remember to always merge other changes into that branch and publish from there. I am working on AspectJ infrequently these days, so it is not going to change a lot, unless I find some free cycles.

Your feedback is welcome.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eS5fw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eTD5o,aspectj,1582055016,242,NA,hensan64,51642316,,,NA,2023-06-08T07:33:24Z,2023-06-08T07:33:24Z,"Thanks for supporting. But I still get this error with 1.9.20-SNAPSHOT using target/source 20:

[INFO] --- aspectj-maven-plugin:1.13.1:compile (compile_with_aspectj) @ abc ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] unrecognized single argument: ""-20""
	<unknown source file>:<no line information>
[ERROR] no sources specified
	<unknown source file>:<no line information>

Do you know where it originates?
When I run the very same with target/source 19 it works...","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eTD5o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eibO4,aspectj,1586082744,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T09:02:20Z,2023-06-11T09:02:20Z,"Then probably something in your Maven POM is wrong. But that is rather an AspectJ Maven than an AspectJ question. Anyway, I can help you if you post a sample project reproducing the problem on GitHub.

**Update:** My guess is, that you simply forgot to add a plugin dependency to _aspectjtools_ in the correct version to AspectJ Maven as described in the [plugin documentation, section ""Usage - Upgrading or downgrading AspectJ""](https://dev-aspectj.github.io/aspectj-maven-plugin/usage.html#:~:text=Upgrading%20or%20downgrading%20AspectJ).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eibO4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eidhr,aspectj,1586092139,242,NA,hensan64,51642316,,,NA,2023-06-11T09:36:36Z,2023-06-11T09:36:36Z,"Both dependencies (rt, tools) are set to 1.9.20-SNAPSHOT in the plugin definition.

Keep ticket open until I have troubleshooted more.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eidhr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eijI3,aspectj,1586115127,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T10:55:50Z,2023-06-11T10:55:50Z,"Just post your POM(s), would you? This is geting tedious. How do you expect anyone to solve your problem with this kind of information hiding? And besides, 1.9.19 is wrong, you need 1.9.20-SNAPSHOT, which I produced for you with Java 20 support. The problem sits in front of the computer. I am closing this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eijI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eilAT,aspectj,1586122771,242,NA,hensan64,51642316,,,NA,2023-06-11T11:26:20Z,2023-06-11T11:26:20Z,"Yes, I have run with 1.9.20-SNAPSHOT you provided as well, but in production we use 1.9.19. Just a typo...

Do not assume people are idiots. I am a senior SW developer, but the problem seems obscure.

The reason i have not posted the POM is that it is corporate and complicated.

Running:

> mvn -e -X clean test -DskipTests

The aspect-maven-plugin produces this log, and the AJC compiler do not like the '-20' argument:
> [DEBUG] Running : ajc -Xajruntimetarget:1.5 -encoding UTF-8 **-20** -classpath ...

I guess it is the maven plugin that produces this AJC call.
Is the problem that the plugin adds the '-20' argument or should AJC take it, but somehow AJC is not the latest version (although set so in the pom)?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eilAT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiogk,aspectj,1586137124,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T12:04:33Z,2023-06-11T12:04:33Z,"I did not say you are an idiot. I said that I need an [MCVE](https://stackoverflow.com/help/mcve) to help you and that information hiding is a bad idea. I also said, the problem sits in front of the computer. That does not mean you are an idiot. It means that you are making a mistake, no more and no less. Can senior developers not make mistakes? BTW, if you are so senior, why don't you know that reproducibility is key to getting better help faster? Why are you ignoring my request to see your POMs or a full MCVE? Give me one, please, or we are done here. If I spend my Sunday afternoon to help you, make it easier for me, would you?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiogk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eipvZ,aspectj,1586142169,242,NA,hensan64,51642316,,,NA,2023-06-11T12:17:12Z,2023-06-11T12:17:12Z,"Yes, I know reproducibility is important. We deal with that in our own code support. I realize it is difficult to do support via a GitHub Issues tab. It is a little tricky for me when i work corporately and can not publish everything so easily without purging every corporate string.
No need to work on Sunday... That is not my expectation.

I will keep on troubleshooting. I have cloned your repos...

But this would help a lot if you can answer during working hours.
In the maven log from the aspectj-maven-plugin executing:
> mvn -e -X clean test -DskipTests

I get the following log, showing what is called internally in the plugin (I think):
> [DEBUG] Running : ajc -Xajruntimetarget:1.5 -encoding UTF-8 -20 -classpath ...

Does AJC support the '-20' argument, or is the version of AJC wrong?

Have a good weekend.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eipvZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiqNe,aspectj,1586144094,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T12:22:55Z,2023-06-11T12:22:55Z,"**MCVE != your original corporate code.**

You obviously did not carefully study the link I sent. What I need is a minimal project to reproduce your problem. That should be very easy to produce. Just strip off as much as you can while still reproducing the problem. You can use dummy classes and packages. Every developer should know that. And again, I want to help you. You are simply making it difficult by stubbornly refusing to follow my simple advice to show me your POM. I could have helped you long ago and within one minute. No matter if it is a working day or a Sunday, it is simply a bad idea to ask like this, because you are wasting your own time first and foremost, and as a side effect also mine.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiqNe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiqTS,aspectj,1586144466,242,NA,hensan64,51642316,,,NA,2023-06-11T12:24:08Z,2023-06-11T12:24:08Z,"${aspectj.version} = 1.9.20-SNAPSHOT

            <plugin>
                <groupId>dev.aspectj</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>${aspectj.maven.plugin.version}</version>
                <configuration>
                    <complianceLevel>${compiler.compliance.java.version}</complianceLevel>
                    <includes>
                        <include>**/*.java</include>
                        <include>**/*.aj</include>
                    </includes>
                    <excludes>
                        <exclude>**/generated-sources/annotations/**</exclude>
                    </excludes>
                    <aspectDirectory>src/main/aspect</aspectDirectory>
                    <testAspectDirectory>src/test/aspect</testAspectDirectory>
                    <XaddSerialVersionUID>false</XaddSerialVersionUID>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>com.xxx</groupId>
                            <artifactId>xxx</artifactId>
                        </aspectLibrary>
                        <aspectLibrary>
                            <groupId>com.xxx</groupId>
                            <artifactId>xxx</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-slf4j-impl</artifactId>
                        <version>${log4j2.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-core</artifactId>
                        <version>${log4j2.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-api</artifactId>
                        <version>${log4j2.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-1.2-api</artifactId>
                        <version>${log4j2.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.xxx</groupId>
                        <artifactId>xxx</artifactId>
                        <version>${xxx.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>compile_with_aspectj</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiqTS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirJZ,aspectj,1586147929,242,NA,hensan64,51642316,,,NA,2023-06-11T12:26:33Z,2023-06-11T12:26:33Z,Sorry for obstructing the process...,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirJZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirbW,aspectj,1586149078,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T12:30:45Z,2023-06-11T12:30:45Z,"See? That was not so painful, copying & pasting a POM, was it?

Two obvious things I canot help noticing at first glance:

1. You did not specify either `complianceLevel` or a combination of `source` and `target`. Without that, the compiler will fall back to ancient versions like 1.5 or even older.

2. I have no idea why you are specifying so many irrelevant plugin dependencies. You really only need to override `org.aspectj:aspectjtools`. Just remove the others, please. They are not helping, the plugin does not need them.

There might be more wrong, but let us do this step by step, shall we? Just fix these two first, then please report back.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirbW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirjP,aspectj,1586149583,242,NA,hensan64,51642316,,,NA,2023-06-11T12:33:02Z,2023-06-11T12:33:02Z,"        <java.version>20</java.version>
        <compiler.source.java.version>${java.version}</compiler.source.java.version>
        <compiler.target.java.version>${java.version}</compiler.target.java.version>
        <compiler.compliance.java.version>${java.version}</compiler.compliance.java.version>

It works with java.version=19 so we are not running with 1.5.

Trying it out...
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eirjP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisFB,aspectj,1586151745,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T12:41:28Z,2023-06-11T12:41:28Z,"Those settings `compiler.*` are just some random Maven properties. In order for them to have any effect, you need to actually **use** them in the plugin configuration, e.g.

```xml
<complianceLevel>${java.version}</complianceLevel>
```
or
```xml
<complianceLevel>${compiler.compliance.java.version}</complianceLevel>
```

Maybe you configured them for Maven Compiler, but forgot to do so for AspectJ Maven.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisFB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisLg,aspectj,1586152160,242,NA,hensan64,51642316,,,NA,2023-06-11T12:43:35Z,2023-06-11T12:43:35Z,"Excuse: It is a big product so this is actually not my code. I am just working on uplift testing of JDK20...

Yes, complianceLevel is already set in the pom.xml code above

Testing your suggestions...","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisLg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisWa,aspectj,1586152858,242,NA,hensan64,51642316,,,NA,2023-06-11T12:47:03Z,2023-06-11T12:47:03Z,"`<complianceLevel>${compiler.compliance.java.version}</complianceLevel>`

Is already set since before","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eisWa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eis0s,aspectj,1586154796,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T12:54:54Z,2023-06-11T12:54:54Z,"Oh, I see. Sorry to have overlooked it before. The plugin config is a bit messy, the compliance level is above the in-/excludes, not grouped with the rest of the actual settings. Then, maybe you have a multi-project situation and one POM overrides some inherited config. Maybe it is something like `pluginManagement` vs. `plugins` situation. Without an MCVE, I can only speculate, but this is not a quiz show. I would much prefer to analyze rather than guess. So please, provide an [MCVE](https://stackoverflow.com/help/mcve). I am 100% sure that if the plugin is configured the way I told you to, it works with Java 20. 

As a developer supporting another one, put yourself in my shoes for a minute: Could you debug a bunch of log statements or an incomplete POM snippet? The problem is most probably in the part of your project I do **not** see. Hence my ""information hiding"" remark. This will be the last time I am asking for it. Not even the POM, which is already way less than an MCVE, was complete. Do yourself a favour, prepare an MCVE, push it to GitHub and be happy that I will be able to easily solve your problem within 5 minutes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eis0s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eis67,aspectj,1586155195,242,NA,hensan64,51642316,,,NA,2023-06-11T12:56:33Z,2023-06-11T12:56:33Z,"I have full sympathy for a difficult support situation 😊.

Yes, we have a multi module maven project and pluginManagement and parents and stuff.

While fixing an MCVE, can you answer my question below, which to me is at the core of things...

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eis67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eitm3,aspectj,1586158007,242,NA,hensan64,51642316,,,NA,2023-06-11T13:00:56Z,2023-06-11T13:00:56Z,"In the maven log from the aspectj-maven-plugin executing:
>mvn -e -X clean test -DskipTests

I get the following log, showing what is called internally in the plugin (I think):
>[DEBUG] Running : ajc -Xajruntimetarget:1.5 -encoding UTF-8 -20 -classpath ...

Does AJC support the '-20' argument, or is the version of AJC wrong?

>[INFO] --- aspectj-maven-plugin:1.13.1:compile (compile_with_aspectj) @ abc ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[ERROR] unrecognized single argument: ""-20""
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eitm3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiu4o,aspectj,1586163240,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-11T13:11:28Z,2023-06-11T13:11:28Z,"> Does AJC support the '-20' argument, or is the version of AJC wrong?

It does. No more questions before posting the MCVE, otherwise I am going to lock this issue. No offence meant.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5eiu4o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ejgCj,aspectj,1586364579,242,NA,hensan64,51642316,,,NA,2023-06-11T22:46:39Z,2023-06-11T22:46:39Z,"Just got back from a party...

First: I understand your urgency to get an MCVE. If I were in your shoes I would have requested the same. But for our project it is a major task that will take a lot of time to create properly (if it shall be executable) since our tool is so large and complex. A maven multi module project with 30 sub modules or so... Possible, but the next step...

**INSTEAD**: I focused on going through your code, both the aspectj-maven-plugin and aspectj and found the following.

<img width=""1604"" alt=""image"" src=""https://github.com/eclipse-aspectj/aspectj/assets/51642316/4ce5db17-6f14-4f28-af1c-a8a23106d9ad"">

<img width=""1262"" alt=""image"" src=""https://github.com/eclipse-aspectj/aspectj/assets/51642316/bec27229-25c8-494f-af1a-477a7a45a71b"">

<img width=""1141"" alt=""image"" src=""https://github.com/eclipse-aspectj/aspectj/assets/51642316/61585bef-3e1d-46a4-b44c-39791799c165"">

In class **org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main**, in which the complianceLevel is checked, working for 19 but not for 20 which is the behavior I have been talking about.

Also, there is more code not prepared for JDK20.

<img width=""1039"" alt=""image"" src=""https://github.com/eclipse-aspectj/aspectj/assets/51642316/f1bb89c3-b67b-416a-9bdc-6972da0dde58"">","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ejgCj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ekgAi,aspectj,1586626594,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T05:50:33Z,2023-06-12T05:50:33Z,"Maybe next time, check the _java-20_ branch.

https://github.com/eclipse-aspectj/eclipse.jdt.core/blob/ad34fa4ba45bfb08403b5f6a0a6af1d4cf13c1dd/org.eclipse.jdt.core.compiler.batch/src/org/eclipse/jdt/internal/compiler/batch/Main.java#L3227-L3229
```java
    case ""20"": //$NON-NLS-1$
    case ""20.0"": //$NON-NLS-1$
      return CompilerOptions.VERSION_20;
```

https://github.com/eclipse-aspectj/eclipse.jdt.core/blob/ad34fa4ba45bfb08403b5f6a0a6af1d4cf13c1dd/org.eclipse.jdt.core.compiler.batch/src/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java#L139-L142
```java
  int MAJOR_VERSION_20 = 64;

  int MAJOR_VERSION_0 = 44;
  int MAJOR_LATEST_VERSION = MAJOR_VERSION_20;
```

The above is what is contained in the snapshot version. If you see something else, you are not using the snapshot. Go fix your POM. Like I said, the problem sits in front of the computer. I suggest you stop wasting your time with fruitless debugging and share either an MCVE or at least a zipped set of full POMs, if you are incapable of creating an MCVE. You can find some private contact channels on [my Stack Overflow profile](https://stackoverflow.com/users/1082681/kriegaex?tab=profile).

```text
$ cat Foo.java
public class Foo {
  public static void main(String[] args) {
    System.out.println(""Hello world"");
  }
}

$ java -cp .m2/repository/org/aspectj/aspectjtools/1.9.20-SNAPSHOT/aspectjtools-1.9.20-SNAPSHOT.jar org.aspectj.tools.ajc.Main -20 Foo.java

$ javap -v Foo.class | grep major
  major version: 64
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ekgAi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5elbNa,aspectj,1586869082,242,NA,hensan64,51642316,,,NA,2023-06-12T08:45:05Z,2023-06-12T08:45:05Z,MCVE: https://github.com/hensan64/aspectj-jdk20-ts.git,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5elbNa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5el9XT,aspectj,1587008979,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T10:04:13Z,2023-06-12T10:04:13Z,"```text
$ mvn verify

...
[INFO] Reactor Summary for aspectj-jdk20-ts 0.0.1-SNAPSHOT:
[INFO] 
[INFO] aspectj-jdk20-ts ................................... SUCCESS [  1.194 s]
[INFO] module1 ............................................ SUCCESS [  4.463 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...
```

So?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5el9XT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emASG,aspectj,1587020934,242,NA,hensan64,51642316,,,NA,2023-06-12T10:10:41Z,2023-06-12T10:10:41Z,"Good information. I do not get this result. I will see what can be different in our environment... Could it be that you have a newer version of the snapshot, then what i get from Nexus/Artifactory?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emASG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emBLq,aspectj,1587024618,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T10:12:50Z,2023-06-12T10:12:50Z,"Maybe. It could be related to its refresh/caching settings, or maybe your local ones. Snapshots should always be checked for updates.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emBLq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emDeh,aspectj,1587034017,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T10:19:22Z,2023-06-12T10:19:22Z,"I am not using any repository managers in my current environment, so I simply added this to your POM:

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emDeh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emE-Q,aspectj,1587040144,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T10:22:57Z,2023-06-12T10:22:57Z,"You also do not need `aspectjrt` as a plugin dependency, only as a regular build dependency. It does not hurt, but is superfluous, because `aspectjtools` is a superset of `aspectjrt`. The compiler contains the weaver classes, the weaver contains the runtime classes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emE-Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emGJl,aspectj,1587044965,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T10:25:20Z,2023-06-12T10:25:20Z,"Maybe building once with `-U` helps, but only if your Nexus/Artifactory is transparent for update requests.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emGJl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emcCF,aspectj,1587134597,242,NA,hensan64,51642316,,,NA,2023-06-12T11:23:51Z,2023-06-12T11:23:51Z,"It works after clearing the "".m2/repositories"" cache... (I have used -U but it did not help)...
A corrupt cache somehow.
It seems the problem was we simply used 2 different versions of 1.9.20-SNAPSHOT which of course confused things...
I apologize for the inconvenience...

MCVE: Lesson learned.

Question: What is your delivery strategy? To only release aspectjtools for Java LTS but not Java STS?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emcCF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/242,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emh9C,aspectj,1587158850,242,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-12T11:39:38Z,2023-06-12T11:39:38Z,"Next time, I suggest to only delete what you wish to refresh. If you have a multi-GB cache like me, it will save a lot of time for **not** having to re-download everything. Just delete the _org/aspectj_ directory or, even more precise, just search for _1.9.20-SNAPSHOT_ subdirectories within and delete those. Normally, it should not be necessary to delete the cache at all, unless something is corrupt. Snapshots should be refreshed automatically, unless you change the default setting in your _settings.xml_ or repository manager.

Since I took over creating AspectJ releases, I released an AJ version for each JDK release. JDK 20 is the first one I skipped, but maybe I will publish a release anyway, even though it is late now. What stopped me was my lack of free cycles. The coding was done long ago, right after JDK 20 was published, but I should also write some short release notes and move add/move a few more tests. On top of working, I was also travelling a lot lately (also mostly work-related). But for JDK 21 latest, there will be a new AJ release.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5emh9C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/243,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/243,aspectj,1754209512,243,NullPointerException in Shadow.getGenericArgTypes causing compiler core dump,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-06-13T07:19:14Z,2023-06-13T07:22:08Z,"See https://stackoverflow.com/q/76450431/1082681.

```text
Cannot invoke ""org.aspectj.weaver.ResolvedMember.getGenericParameterTypes()"" because the return value of ""org.aspectj.weaver.Shadow.getResolvedSignature()"" is null
java.lang.NullPointerException: Cannot invoke ""org.aspectj.weaver.ResolvedMember.getGenericParameterTypes()"" because the return value of ""org.aspectj.weaver.Shadow.getResolvedSignature()"" is null
	at org.aspectj.weaver.Shadow.getGenericArgTypes(Shadow.java:184)
	at org.aspectj.weaver.patterns.ArgsPointcut.getArgumentsToMatchAgainst(ArgsPointcut.java:86)
	at org.aspectj.weaver.patterns.ArgsPointcut.matchInternal(ArgsPointcut.java:75)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:60)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)
	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:56)
	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)
	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:113)
	at org.aspectj.weaver.Advice.match(Advice.java:113)
	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:161)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:3330)
	at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:3278)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2921)
	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2703)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:483)
	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1707)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1651)
	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1418)
	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1192)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:446)
	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:431)
	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:104)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:943)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:576)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:476)
	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1096)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
	at org.aspectj.tools.ajc.Main.run(Main.java:372)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:250)
	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:957)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:289)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:193)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
```

CC @niallrox, @u_m1q4u.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,aspectj,1768889609,245,java.lang.RuntimeException: key not found in wovenClassFile,afathonih,107666842,akhmad.fathonih,akhmad.fathonih@rakuten.com,CLOSED,2023-06-22T04:04:20Z,2023-06-29T05:17:56Z,"My team test project start seeing this issue. I have seen others reported but there's still no solution because there's no reproducibility method. 

The following repo can reproduce it in quite consistent manner:
https://github.com/afathonih/ajcwovenissue

We need to run it around 50 times. And the problem will crop up roughly twice. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ffWTI,aspectj,1602053320,245,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-22T06:00:15Z,2023-06-22T06:00:15Z,"```text
[ERROR] Failed to execute goal on project processor: Could not resolve dependencies for project org.example:processor:jar:1.0-SNAPSHOT: com.rakuten.linkconsumer:rhapsody-framework:pom:0.0.24-SNAPSHOT was not found in https://repo1.maven.org/maven2 during a previous attempt. This failure was cached in the local repository and resolution is not reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]
```

Please either add a snapshot repository definition to the project or let me know which non-snapshot I can use instead.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ffWTI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fkgOI,aspectj,1603404680,245,NA,afathonih,107666842,akhmad.fathonih,akhmad.fathonih@rakuten.com,NA,2023-06-22T22:48:30Z,2023-06-22T22:48:30Z,Sorry. I thought I have cleaned-up this non-dep. I have removed the above dependency and it still still reproducible. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fkgOI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fl0tN,aspectj,1603750733,245,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-23T06:37:43Z,2023-06-23T06:37:43Z,"I was able to reproduce the problem with each run, I did not have to run 50 times. The problem was AspectJ Maven misconfiguration. Aspect libraries should not be declared as plugin dependencies but simply as normal Maven module dependencies.

Also, Surefire and Failsafe should not be declared as module dependencies (your application does not need them on the classpath), only as plugins.

See PR https://github.com/afathonih/ajcwovenissue/pull/1.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fl0tN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fl36E,aspectj,1603763844,245,NA,afathonih,107666842,akhmad.fathonih,akhmad.fathonih@rakuten.com,NA,2023-06-23T06:52:58Z,2023-06-23T06:52:58Z,Thank you for looking into this and also for the enlightenment. I will apply this solution into the actual project and hopefully no more exception triggered.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fl36E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fyJaf,aspectj,1606981279,245,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-26T08:38:25Z,2023-06-26T08:38:25Z,"@afathonih wrote in https://github.com/afathonih/ajcwovenissue/pull/1#issuecomment-1606845237:

> @kriegaex I managed to setup GH action and run your PR there: https://github.com/afathonih/ajcwovenissue/actions/runs/5372836175/jobs/9746611803?pr=1
> 
> It's still reproducible.

Therefore, I am reopening the issue.

Quick link to the GitHub workflow definition running the build multiple times:
https://github.com/afathonih/ajcwovenissue/blob/main/.github/workflows/ci.yml","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fyJaf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5f0IUJ,aspectj,1607501065,245,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-26T13:42:32Z,2023-06-26T13:42:32Z,"@afathonih, locally I noticed that I can reproduce the problem sometimes with your configuration, just like you said. But then I noticed that I had overlooked a few things:

1. The Allure aspects are for test reporting only, i.e. they should be woven only during `test-compile`, not `compile`. The dependencies should also be test-scoped. Correction: `allure-java-commons` is referenced in generated source code, i.e. it must not be test-scoped, only `allure-testng` should be.
2. Only `allure-java-commons` contains aspects and be used as an aspect library, not `allure-testng`. The latter is simply a normal test dependency.
3. Neither of the two dependencies need to be `weaveDependencies`, because they are on the regular test classpath already. When defined as weave dependencies, it means that Allure also sees its own classes and tries to weave into them, if they happen to carry the annotations like `@Step`.

You want to avoid weaving the same stuff multiple times, a library weaving itself or similar things. After I have cleaned up your project accordingly, I locally can no longer reproduce the problem. Let's see if your CI build or your original project can. See commit https://github.com/afathonih/ajcwovenissue/pull/1/commits/6af5ef42b07d7bbf58cda2b2dc7830b2308f6571.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5f0IUJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gGoqA,aspectj,1612352128,245,NA,afathonih,107666842,akhmad.fathonih,akhmad.fathonih@rakuten.com,NA,2023-06-29T02:34:04Z,2023-06-29T02:34:04Z,"@kriegaex 
Awesome. The build finally [pass](https://github.com/afathonih/ajcwovenissue/actions/runs/5398387880/jobs/9805697330).

I saw that you restricted the weaver to run only during `test-compile`. So, I tried it as well on a new branch. With this single change, the the issue actually [no longer reproducible](https://github.com/afathonih/ajcwovenissue/pull/2/files). 🎉 

I looked back into the failing builds. The weaving during `compile` part was passing but the `test-compile` weaving was failing. Probably AspectJ was not expecting a weaved class from the get go (?).

Thank you so much for spending your time on this issue.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gGoqA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/245,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gG9lw,aspectj,1612437872,245,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-29T05:07:11Z,2023-06-29T05:07:11Z,"> I saw that you restricted the weaver to run only during `test-compile`.

Yes, my commit message describes that.

> So, I tried it as well on a new branch. With this single change, the the issue actually [no longer reproducible](https://github.com/afathonih/ajcwovenissue/pull/2/files). 🎉

Anyway, I fixed other things in additional commits, which were not purely cosmetical in nature but some of them real bugs. I strongly suggest to also fix those in your own project. So please, do read my commit messages and evaluate the changes, both in the dependency list and in the AJ Maven plugin configuration. That a single change makes the problem disappear in your project, does not mean that you are not going to run in other problems subsequently.

> The weaving during compile part was passing but the test-compile weaving was failing. Probably AspectJ was not expecting a weaved class from the get go (?).

Re-weaving (or in another usage mod over-weaving) already woven classes should work under normal circumstances, and there might be something that needs improvement in the AJ weaver. But in this case, it was easier to just fix the broken build and not run into the problems in the first place.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gG9lw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,aspectj,1769703639,246,Duplicated annotations when weaving methods with same name and same number of parameters,surli,1478232,Simon Urli,,CLOSED,2023-06-22T13:39:40Z,2023-08-21T10:56:19Z,"Bug originally reported on https://bugs.eclipse.org/bugs/show_bug.cgi?id=582107 but reporting it there too since I'm not sure which channel should be preferred. 

We discovered that apparently weaving two methods with same name and same number of parameters automatically leads to putting annotations of the first method to both the first and second method in the generated class, removing the possible existing annotations for it. We're using AspectJ 1.9.19.

So in our case we have an aspect file containing two methods: 
```java
    @Deprecated(since = ""2.2M2"")
    public void XWikiDocument.rename(String newDocumentName, XWikiContext context) throws XWikiException
    {
        // Do stuff
    }

    @Deprecated(since = ""12.5RC1"")
    public void XWikiDocument.rename(DocumentReference newReference, XWikiContext context) throws XWikiException
    {
        // Do other stuff
    }
```

The obtained bytecode contains:
```java
    @Deprecated(since = ""2.2M2"")
    public void rename(String newDocumentName, XWikiContext context) throws XWikiException
    {
        // Do stuff
    }

    @Deprecated(since = ""2.2M2"")
    public void rename(DocumentReference newReference, XWikiContext context) throws XWikiException
    {
        // Do other stuff
    }
```

When trying to understand the behaviour, I added another annotation to the first method: 
```java
    @Deprecated(since = ""2.2M2"")
    @javax.validation.constraints.Size(message = ""toto"")
    public void XWikiDocument.rename(String newDocumentName, XWikiContext context) throws XWikiException
    {
        // Do stuff
    }

    @Deprecated(since = ""12.5RC1"")
    public void XWikiDocument.rename(DocumentReference newReference, XWikiContext context) throws XWikiException
    {
        // Do other stuff
    }
```

And I obtained:
```java
    @Deprecated(since = ""2.2M2"")
    @javax.validation.constraints.Size(message = ""toto"")
    public void rename(String newDocumentName, XWikiContext context) throws XWikiException
    {
        // Do stuff
    }

    @Deprecated(since = ""2.2M2"")
    @javax.validation.constraints.Size(message = ""toto"")
    public void rename(DocumentReference newReference, XWikiContext context) throws XWikiException
    {
        // Do other stuff
    }
```

Note that we don't have a method called `rename` with 2 parameters in the original `XWikiDocument.java`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fh-Oo,aspectj,1602741160,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-22T14:28:05Z,2023-06-22T14:28:05Z,"@surli, here is the right place to report new issues. I am going to close the Bugzilla one.

> weaving two methods with same name and same number of parameters automatically leads to putting annotations of the first method to both the first and second method in the generated class

Weaving how? What kind of aspect? Please provide a reproducer. Thanks.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fh-Oo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fiPZd,aspectj,1602811485,246,NA,surli,1478232,Simon Urli,,NA,2023-06-22T15:08:50Z,2023-06-22T15:08:50Z,"> Weaving how? What kind of aspect? Please provide a reproducer. Thanks.

I created a toy project reproducing the bug in https://github.com/surli/sandbox/tree/bug-aspectj/aspectjbug
The aspect is defined in https://github.com/surli/sandbox/blob/bug-aspectj/aspectjbug/aspectjbug-legacy/src/main/aspect/org/example/AppCompatibilityAspect.aj and aims at weaving the empty class from the other module: https://github.com/surli/sandbox/blob/bug-aspectj/aspectjbug/aspectjbug-module/src/main/java/org/example/App.java

The configuration for weaving is given in the pom: https://github.com/surli/sandbox/blob/bug-aspectj/aspectjbug/aspectjbug-legacy/pom.xml#L50

I obtain the following binary when executing it: 
```java
public class App {
    public App() {
    }

    public static void main(String[] args) {
        System.out.println(""Hello World!"");
    }

    @Deprecated(
        since = ""2.2M2""
    )
    @Size(
        message = ""toto""
    )
    public void foo(int var1) {
        AppCompatibilityAspect.ajc$interMethod$org_example_AppCompatibilityAspect$org_example_App$foo(this, var1);
    }

    @Deprecated(
        since = ""2.2M2""
    )
    @Size(
        message = ""toto""
    )
    public void foo(String var1) {
        AppCompatibilityAspect.ajc$interMethod$org_example_AppCompatibilityAspect$org_example_App$foo(this, var1);
    }
}
```

There might be an easier way to reproduce but it's the closest we have in our project and easiest for me to have something quickly.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fiPZd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5for-k,aspectj,1604501412,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-23T16:11:21Z,2023-06-23T16:11:21Z,"I am able to reproduce the effect, but am unsure when I will be able to investigate and debug this. I am quite busy these days, but want you to know that your reproducer does what it is supposed to: It reproduces the problem. 👍

It is kind of an exotic edge case for ITD, but of course it should work as you expect.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5for-k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5frnEL,aspectj,1605267723,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-24T04:57:02Z,2023-06-24T04:57:02Z,"Note to myself regarding my own findings:
  * The number of arguments for methods with the same name is indeed important. If multiple ITD methods have the same name and number of arguments, the problem occurs.
  * The method return types can be different, the problem still occurs.
  * The internal (not lexical source code) order of ITD methods in the aspect seems to be important: Always the annotations from the first one found are copied over into the target class. Even if that method contains no annotations and the other ones do contain one or more annotations, the target class methods will not be annotated, i.e. the empty list/set of annotations from the first method found will be copied.
  * The problem occurs during weaving. The compiled aspect itself contains the right methods with the correct annotations, i.e. aspect compilation as such is not the problem.

This feels like some kind of `equals` / `hashCode` problem, but it could also be something else entirely.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5frnEL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fuZ0Y,aspectj,1605999896,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-25T10:01:15Z,2023-06-25T10:01:15Z,"@aclement, while working on [Bugzilla 112105](https://bugs.eclipse.org/bugs/show_bug.cgi?id=112105) back in 2005, you added [this piece of code](https://github.com/eclipse-aspectj/aspectj/commit/51b0f6261c8b20d424bc7d2a69dba17976894caf#diff-402318d5e49c5a0f6ce4521ed2a1326764f30f6a0217e21a158e3217abc4f9f9R904-R926) to `BcelTypeMunger#getRealMemberForITDFromAspect`:

```java
// If not related to a ctor ITD then the name is enough to confirm we have the
// right one.  If it is ctor related we need to check the params all match, although
// only the erasure.
if (isCtorRelated) {
  for (int j = 0; j < memberParams.length && matchOK; j++){
  ResolvedType pMember = memberParams[j].resolve(world);
  ResolvedType pLookingFor = lookingForParams[j].resolve(world); 

  if (pMember.isTypeVariableReference()) 
    pMember = ((TypeVariableReference)pMember).getTypeVariable().getFirstBound().resolve(world);
  if (pMember.isParameterizedType() || pMember.isGenericType()) 
    pMember = pMember.getRawType().resolve(aspectType.getWorld());

  if (pLookingFor.isTypeVariableReference()) 
    pLookingFor = ((TypeVariableReference)pLookingFor).getTypeVariable().getFirstBound().resolve(world);
  if (pLookingFor.isParameterizedType() || pLookingFor.isGenericType()) 
    pLookingFor = pLookingFor.getRawType().resolve(world);

  if (debug) System.err.println(""Comparing parameter ""+j+""   member=""+pMember+""   lookingFor=""+pLookingFor);
  if (!pMember.equals(pLookingFor)){
    matchOK=false;
  }
}
```

I think that `if (isCtorRelated)` and the reasoning in your comment is not quite correct, because it directly leads to the problem seen here: For each ITD method, not just for constructors, the paramater list needs to be checked. If I remove the condition, my test in e8cdb759 passes.

Andy, can you please tell me if you think that eliminating the condition would have any possibly negative side effects? I am going to commit and probably merge it like this as a bugfix, if all other tests continue to pass. I can still revert if you object. But I really would feel better, if you could take a look.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fuZ0Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxJjA,aspectj,1606719680,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-26T06:14:08Z,2023-06-26T06:14:08Z,"Actually, the side effect was rather positive, because two tests started failing, uncovering problems comparing array reference types for equality. A new `equals` method fixes that, see 9cbbb3e5.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxJjA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxnxT,aspectj,1606843475,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-26T07:11:11Z,2023-06-26T07:11:11Z,"@surli, I published a `1.9.20-SNAPSHOT` with the fix. You can try it, adding this to your POM:

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxnxT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxtPC,aspectj,1606865858,246,NA,surli,1478232,Simon Urli,,NA,2023-06-26T07:26:36Z,2023-06-26T07:26:36Z,"> @surli, I published a 1.9.20-SNAPSHOT with the fix.

Well that was fast :) I just checked on the original project where I spotted the bug and apparently it's now running properly, so for me it looks all good :+1: ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxtPC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxyai,aspectj,1606887074,246,NA,surli,1478232,Simon Urli,,NA,2023-06-26T07:39:03Z,2023-06-26T07:39:03Z,@kriegaex any idea when we can expect a release for 1.9.20?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5fxyai/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/246,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5kf-tt,aspectj,1686104941,246,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-21T10:56:19Z,2023-08-21T10:56:19Z,"@surli, the release is out since last week. I have no idea why I got notified about this comment again today. I see no change, and you asked on June 26th already. At the time, I had no answer for you yet. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5kf-tt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,aspectj,1780595352,248,Support wildcards in target(),ttho,8222080,Timo Thomas,,OPEN,2023-06-29T11:05:44Z,2023-08-08T09:49:15Z,"Hi, this is a question and a request for enhancement. Why can't I use wildcards in target() expressions like in

`target(java.util.concurrent..*)`?

This gives me the error message 
`wildcard type pattern not allowed, must use type name`

Background: 
I want to check if threads aren't concurrently accessing thread-unsafe collection classes, and exclude all classes in `java.util.concurrent`. For that, I track access to objects with an aspect and report an error if two threads access it at the same time. If I use the pointcut `call(* java.util.concurrent..*(..))` instead, it does match on all methods defined in this package, but does not match the method calls coming through an interface outside of that package, like `java.util.List.add()` for example.
My workaround is to check the class name of the target object on every call interception, but I would like to have a more efficient way.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gNf4f,aspectj,1614151199,248,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-30T05:33:00Z,2023-06-30T05:33:00Z,"That would indeed be a new Feature. It might make pointcut matching for `target`, `this`, `@target`, `@this` slower and would cause complications when binding to advice parameters. If there is no explicit type, you would need to bind to `Object` and then inspect types via `instanceof` and cast in the advice code.

Due to ""development team"" capacity - currently just me in tiny time slices - I think this is not going to be implemented anytime soon. But often there are ways to achieve what developers want by other means. If you could provide an [MCVE](https://stackoverflow.com/help/mcve) GitHub project and point to it in a Stack Overflow question, I might be able to help you with your workaround. Maybe what you so at present is already the best workaround imaginable, but I have no way of knowing for sure. Are you having performance problems due to your aspect? Did you measure that somehow?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gNf4f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gN1BQ,aspectj,1614237776,248,NA,ttho,8222080,Timo Thomas,,NA,2023-06-30T07:19:56Z,2023-06-30T07:19:56Z,"Thanks for the quick reply. Your answer suggest me that what I am doing now - inspecting the type in the aspect code - is what AspectJ would have to do internally if it implemented this anyway. So the ""more efficient way"" comes down to solely a more efficient way to express this. Still it would be a nice feature. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gN1BQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gN65Y,aspectj,1614261848,248,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-06-30T07:42:46Z,2023-06-30T07:42:46Z,"> Your answer suggest me that what I am doing now - inspecting the type in the aspect code - is what AspectJ would have to do internally if it implemented this anyway.

Yes, basically that is so. The pointcut types I listed above, among others, are always evaluated during runtime. The complexity would just be hidden inside AspectJ.

But like I said, maybe there is a way to do what you want more elegantly with on-board means. I have no way of knowing, only reading your textual description and not seeing the actual code.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5gN65Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/248,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jf2E0,aspectj,1669292340,248,NA,ttho,8222080,Timo Thomas,,NA,2023-08-08T09:49:14Z,2023-08-08T09:49:14Z,"> But like I said, maybe there is a way to do what you want more elegantly with on-board means. I have no way of knowing, only reading your textual description and not seeing the actual code.

Yes, I understand, and your help would be much appreciated. However, the future of this feature I was working on is currently unclear for other reasons. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jf2E0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/249,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/249,aspectj,1799954018,249,Include ajc$ prefix in Around Advice/Shadow Method Name from NameMangeler,warrenc5,3395365,Warren Crossing,warren.crossing@mofokom.biz,CLOSED,2023-07-12T00:23:01Z,2023-08-07T10:58:01Z,"This is a obscure and seemingly inconsequential request, so please allow me to explain.

I encountered this as a conflict with the JAIN SLEE 1.1 specification while working on a large legacy code base.

I have some fields whose natural camel-case name (based on their type) is sbbSomething

The weaver creates around advice/shadow method names starting with the field name.

It's illegal in JAIN SLEE for an Sbb component to have (non standard) method names starting with sbb (section 6.12 - Method Name Restrictions) - So I can't deploy those weaved components into the SLEE.

I can change the field name, but I noticed this discrepancy in the aspect weaver naming and patched the name mangler.

I wanted others advice before I fix the tests and raise a PR. 
Is the omission of PREFIX intentional or otherwise a design pattern/consideration of the aspectj weaver?

The patch would be to add PREFIX + getExtractableName into the two locations in NameMangeler.

Is there any deeper impact of change? Or is it just localized to the generated bytecodes. - The suffix seems to be a use site counter so I can't see any way anyone would rely on these method names for anything else.




","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/249/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/249,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5h7aRi,aspectj,1642964066,249,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-07-20T01:16:22Z,2023-07-20T01:16:22Z,"Hello @warrenc5. I admit, I first had to find out what JAIN SLEE is at all. I found an outdated, fragmentary Wikipedia article from 2012, flagged for not citing sources. Then I found two ancient JSRs from 1999 (released 2004) and 2004 (released 2008), respectively. Next, I found https://github.com/RestComm/jain-slee, which leads me to think that JAIN SLEE is quite exotic and mostly dead. I might be wrong about this, but it is my first impression.

> It's illegal in JAIN SLEE for an Sbb component to have (non standard) method names starting with sbb (section 6.12 - Method Name Restrictions) - So I can't deploy those weaved components into the SLEE.

AspectJ aims to be compatible with the Java Language Specification, not with any specific naming standards enforced by other specifications. But for example, a Java Bean is still a Java Bean, even after AspectJ weaving has taken place.

Anyway, section 6.12 from [JAIN SLEE v1.1](https://download.oracle.com/otndocs/jcp/jain_slee-1_1-final-oth-JSpec/) says:

> ### 6.12 Method name restrictions
> 
> Non-private (such as public, protected, or package private) methods that are declared by the SBB Developer must not begin with `sbb` or `ejb`. A SLEE implementation can use method names that begin with `sbb` when needed without being concerned with possible method name conflicts with SBB Developer declared method names.
>
> This restriction does not apply when the SBB Developer is implementing a required `sbb<XXX>` method
declared by the SLEE, such as the life cycle methods declared in the `javax.slee.Sbb` interface. (Clarified in 1.1)

So that is where your problem originates. AspectJ generates method names starting with `sbb`, because your field names start with `sbb`, and some kind of classfile scanner stumbles across this fact. If there is no way to exclude certain method patterns from scanning, I suggest to simply rename the problematic fields to `_sbb` or something completely different, respecting the method prefix also for fields, if you use byte code instrumentation creating methods for said fields, of which AspectJ is one in this case. Maybe using load-time instead of compile-time weaving could also help, if class scanning is part of the build rather than the runtime process.

I do not feel so inclined to change the AspectJ innards for this specific requirement. Sorry to disappoint you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5h7aRi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/249,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jZjCr,aspectj,1667641515,249,NA,warrenc5,3395365,Warren Crossing,warren.crossing@mofokom.biz,NA,2023-08-07T10:58:00Z,2023-08-07T10:58:00Z,Thank you @kriegaex  for your insight and feedback.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jZjCr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,aspectj,1830170936,250,"NegativeArraySizeException when weaving aspect containing non-public, overloaded methods",ajones239,32377983,,,CLOSED,2023-07-31T23:01:02Z,2023-08-07T05:06:10Z,"I have a Spring Boot app that uses AspectJ. I am building with Maven. My `mvn package` command fails with
```text
AspectJ Internal Error: unable to add stackmap attributes to class 'gov.nasa.drf.auth.accesscontrol.AuthorizationAspect'. -1
java.lang.NegativeArraySizeException: -1
      at aj.org.objectweb.asm.Frame.merge(Frame.java:1222)
      at aj.org.objectweb.asm.MethodWriter.computeAllFrames(MethodWriter.java:1611)
      at aj.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1547)
      at aj.org.objectweb.asm.MethodVisitor.visitMaxs(MethodVisitor.java:786)
      at aj.org.objectweb.asm.ClassReader.readCode(ClassReader.java:2665)
      at aj.org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1514)
      at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:744)
      at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:424)
      at org.aspectj.weaver.bcel.asm.StackMapAdder.addStackMaps(StackMapAdder.java:45)
      at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:762)
      at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1459)
      at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1421)
      at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1161)
      at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
      at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterCompiling(AjPipeliningCompilerAdapter.java:374)
      at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:79)
      at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:428)
      at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
      at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
      at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
      at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
      at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
      at org.aspectj.tools.ajc.Main.run(Main.java:374)
      at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
      at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
      at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
      at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:301)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:211)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:165)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:157)
      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:121)
      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
      at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
      at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:127)
      at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:294)
      at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
      at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
      at org.apache.maven.cli.MavenCli.execute(MavenCli.java:960)
      at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:293)
      at org.apache.maven.cli.MavenCli.main(MavenCli.java:196)
      at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
      at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.base/java.lang.reflect.Method.invoke(Method.java:568)
      at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)
      at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)
      at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)
      at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347)
[INFO] Join point 'method-execution(org.springframework.http.ResponseEntity gov.nasa.drf.auth.controller.HealthController.getDatabaseHealth(java.lang.String))' in Type 'gov.nasa.drf.auth.controller.HealthController' (HealthController.java:41) advised by around advice from 'gov.nasa.drf.auth.accesscontrol.AuthenticationAspect' (AuthenticationAspect.class(from AuthenticationAspect.java))
[ERROR] ABORT
Jul 31, 2023 8:13:42 PM org.aspectj.weaver.tools.Jdk14Trace info
INFO: Dumping to /buildDir/./ajcore.20230731.201342.265.txt
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:17 min
[INFO] Finished at: 2023-07-31T20:13:42Z
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.14.0:compile (default-compile) on project auth: AJC compiler errors:
[ERROR] abort ABORT -- (BCException) Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor) for stackmap generation. Stackmap generation for woven code is required to avoid verify errors on a Java 1.7 or higher runtime.
[ERROR] when weaving classes
[ERROR] when weaving
[ERROR] when batch building BuildConfig[null] #Files=0 AopXmls=#0
[ERROR]
[ERROR] Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor) for stackmap generation. Stackmap generation for woven code is required to avoid verify errors on a Java 1.7 or higher runtime.
[ERROR] when weaving classes
[ERROR] when weaving
[ERROR] when batch building BuildConfig[null] #Files=0 AopXmls=#0
[ERROR]
[ERROR] org.aspectj.weaver.BCException: Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor) for stackmap generation. Stackmap generation for woven code is required to avoid verify errors on a Java 1.7 or higher runtime.
[ERROR] when weaving classes
[ERROR] when weaving
[ERROR] when batch building BuildConfig[null] #Files=0 AopXmls=#0
[ERROR]
[ERROR]       at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:756)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1459)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1421)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1192)
[ERROR]       at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
[ERROR]       at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterCompiling(AjPipeliningCompilerAdapter.java:374)
[ERROR]       at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:79)
[ERROR]       at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:428)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR]       at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR]       at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR]       at org.aspectj.tools.ajc.Main.run(Main.java:374)
[ERROR]       at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[ERROR]       at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
[ERROR]       at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:301)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:211)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:165)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:157)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:121)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
[ERROR]       at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:127)
[ERROR]       at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:294)
[ERROR]       at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
[ERROR]       at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
[ERROR]       at org.apache.maven.cli.MavenCli.execute(MavenCli.java:960)
[ERROR]       at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:293)
[ERROR]       at org.apache.maven.cli.MavenCli.main(MavenCli.java:196)
[ERROR]       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR]       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[ERROR]       at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR]       at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347)
[ERROR] Caused by: java.lang.NegativeArraySizeException: -1
[ERROR] java.lang.NegativeArraySizeException: -1
[ERROR]       at aj.org.objectweb.asm.Frame.merge(Frame.java:1222)
[ERROR]       at aj.org.objectweb.asm.MethodWriter.computeAllFrames(MethodWriter.java:1611)
[ERROR]       at aj.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1547)
[ERROR]       at aj.org.objectweb.asm.MethodVisitor.visitMaxs(MethodVisitor.java:786)
[ERROR]       at aj.org.objectweb.asm.ClassReader.readCode(ClassReader.java:2665)
[ERROR]       at aj.org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1514)
[ERROR]       at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:744)
[ERROR]       at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:424)
[ERROR]       at org.aspectj.weaver.bcel.asm.StackMapAdder.addStackMaps(StackMapAdder.java:45)
[ERROR]       at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:762)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1459)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1421)
[ERROR]       at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1161)
[ERROR]       at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
[ERROR]       at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterCompiling(AjPipeliningCompilerAdapter.java:374)
[ERROR]       at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:79)
[ERROR]       at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:428)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR]       at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR]       at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR]       at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR]       at org.aspectj.tools.ajc.Main.run(Main.java:374)
[ERROR]       at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[ERROR]       at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
[ERROR]       at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:301)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:211)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:165)
[ERROR]       at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:157)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:121)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
[ERROR]       at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
[ERROR]       at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:127)
[ERROR]       at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:294)
[ERROR]       at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
[ERROR]       at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
[ERROR]       at org.apache.maven.cli.MavenCli.execute(MavenCli.java:960)
[ERROR]       at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:293)
[ERROR]       at org.apache.maven.cli.MavenCli.main(MavenCli.java:196)
[ERROR]       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR]       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[ERROR]       at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR]       at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)
[ERROR]       at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347)
```

My pom.xml:
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>gov.nasa.drf</groupId>
    <artifactId>auth</artifactId>
    <version>2.0</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring.version>6.1.0.RELEASE</spring.version>
        <aspectj.version>1.9.8</aspectj.version>
        <log4j2.version>2.17.1</log4j2.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.1</version>
    </parent>

    <repositories>
        <repository>
            <id>data-local</id>
            <name>data</name>
            <url>file://${project.basedir}/repo</url>
        </repository>
    </repositories>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>gov.nasa.drf.auth.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>3.1.2</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <parallel>both</parallel>
                    <threadCount>4</threadCount>
                    <includes>
                        <include>**/*Test</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.14.0</version>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>process-classes</phase>
                        <goals>
                            <!-- use this goal to weave all your main classes -->
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <weaveDirectories>
                                <weaveDirectory>${project.build.directory}/classes</weaveDirectory>
                            </weaveDirectories>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <!-- use this goal to weave all your test classes -->
                            <goal>test-compile</goal>
                        </goals>
                        <configuration>
                            <weaveDirectories>
                                <weaveDirectory>${project.build.directory}/test-classes</weaveDirectory>
                            </weaveDirectories>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <outxml>true</outxml>
                    <verbose>true</verbose>
                    <showWeaveInfo>true</showWeaveInfo>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-aspects</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                    <complianceLevel>17</complianceLevel>
                    <source>17</source>
                    <target>17</target>

                    <excludes>
                        <exclude>**/*.java</exclude>
                    </excludes>
                    <forceAjcCompile>true</forceAjcCompile>
                    <sources/>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.28</version>
                        </path>
                    </annotationProcessorPaths>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>gov.nasa.drf</groupId>
            <artifactId>lib</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.github.joschi.jackson</groupId>
            <artifactId>jackson-datatype-threetenbp</artifactId>
            <version>2.13.0-rc2</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.28</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.6.0</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
    </dependencies>
</project>
```

I do not really understand the error. Is there a way to get my project to build with AspectJ and Maven? It runs in IntelliJ without issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i7H6N,aspectj,1659666061,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-01T06:42:46Z,2023-08-01T06:42:46Z,"@ajones239: Since the AspectJ repositories were transferred into their own GitHub organisation _eclipse-aspectj_, the old connection to our developer Slack channel has no longer been functional. Therefore, I missed this issue and only replied on Stack Overflow. Maybe cross-posting - especially without mentioning it - is not such a great idea. I am going to copy my comments from there to here, so we can continue our discussion in this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i7H6N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i7Iny,aspectj,1659668978,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-01T06:45:27Z,2023-08-01T06:45:27Z,"You do not need to add ASM to the classpath. As you can see from the package names for classes like `aj.org.objectweb.asm.Frame` in your stack trace, AspectJ contains its own, package-relocated version of ASM already. You might experience a clash between Lombok and AspectJ, it is really hard to say without a full, minimal reproducer.

One more thing: What are you using AspectJ Maven Compiler for? Do you really want to use native AspectJ, not Spring AOP? That would be fine, but be aware that Mojohaus version 1.14.0 does not support Java 17+. Please use The AspectJ.dev version instead, as recommended by the [AspectJ development environment guide](https://github.com/eclipse-aspectj/aspectj/blob/master/docs/developer/IDE.md#maven).

What strikes me as odd too: In the error message _""Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor)""_, I would actually have expected relocated class names like **_aj._**_org.objectweb.asm.ClassReader_. How that can be any different, I have no idea about. Please post an [MCVE](https://stackoverflow.com/help/mcve) on GitHub. I want to debug this. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i7Iny/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i_s6i,aspectj,1660866210,250,NA,ajones239,32377983,,,NA,2023-08-01T18:28:46Z,2023-08-01T18:28:46Z,"@kriegaex  Apologies for crossposting. What is the reason this is discouraged? 

In terms of why I am using Aspectj maven compiler instead of Spring AOP, I was simply using what I had experience with. I'm fairly new to both Spring and AOP, but had some experience using Aspectj in a different project. 

I updated the Maven plugin dependency information to
```
<plugin>
<groupId>dev.aspectj</groupId>
<artifactId>aspectj-maven-plugin</artifactId>
<version>1.13.1</version>
...
```
and removed the <complianceLevel> tag as per the link you added. I am using Java 17, so I shouldn't be using the Mojohaus plugin. That did not change the output of the build.

I will create an MVCE and share the code once I get it configured. Thanks for help.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5i_s6i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBbSN,aspectj,1661318285,250,NA,ajones239,32377983,,,NA,2023-08-02T01:16:29Z,2023-08-02T01:16:29Z,"I found the line of code that was causing problems. I am able to fix it so that the project builds now, but I do not understand why my code was breaking.

The original code:
```java
    @Around(""execution(* gov.nasa.drf.auth.controller.UserController.deactivateUser(..))"")
    public ResponseEntity<?> checkIfAllowedToDeactivateUser(ProceedingJoinPoint joinPoint) throws Throwable {
        String did = Jwt.extractIss(((String) joinPoint.getArgs()[0]).split("" "")[1]);
        List<String> roles = Jwt.extractRoles((String) joinPoint.getArgs()[0]);
        String targetDid = (String) joinPoint.getArgs()[1];
        User requester = null, target = null;
        try {
            requester = userService.getUser(did);
            target = userService.getUser(targetDid);
        } catch (NotFoundException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        boolean authorized = false;
        if (requester.getRoles().contains(""DRF_ROOT_ADMIN"") && roles.contains(""DRF_ROOT_ADMIN"")) {
            authorized = true;
        } else if (isValidOrgAdmin(did, targetDid, roles) && !requester.getRoles().contains(""DRF_CORE_SERVICES"")) {
            authorized = true;
        } else if (isValidParent(did, targetDid)) {        //  **** THIS LINE CAUSES ERROR ****
            authorized = true;
        }

        return authorized ? (ResponseEntity<?>) joinPoint.proceed() : new ResponseEntity<>(HttpStatus.FORBIDDEN);
    }

    private boolean isValidParent(String requesterDid, String targetDid) throws IOException {
        User requester;
        DidUriResponse requesterInfo = null, targetInfo = null;
        try {
            requester = userService.getUser(requesterDid);
            requesterInfo = DIDClient.getDidInfo(requesterDid, idm.getKeys().getPrivate(), idm.getDid());
            targetInfo = DIDClient.getDidInfo(targetDid, idm.getKeys().getPrivate(), idm.getDid());
        } catch (NotFoundException e) {
            return false;
        }
        if (!targetInfo.getParentUri().equals(requesterDid) && !targetInfo.getParentUri().equals(requesterInfo.getParentUri())) {
            return false;
        }
        return true;
    }
```
Code that builds:
```java
    @Around(""execution(* gov.nasa.drf.test.controller.UserController.deactivateUser(..))"")
    public ResponseEntity<?> checkIfAllowedToDeactivateUser(ProceedingJoinPoint joinPoint) throws Throwable {
        String did = Jwt.extractIss(((String) joinPoint.getArgs()[0]).split("" "")[1]);
        List<String> roles = Jwt.extractRoles((String) joinPoint.getArgs()[0]);
        String targetDid = (String) joinPoint.getArgs()[1];
        User requester = null, target = null;

        try {
            requester = userService.getUser(did);
            target = userService.getUser(targetDid);
        } catch (NotFoundException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        boolean authorized = false;
        if (requester.getRoles().contains(""DRF_ROOT_ADMIN"") && roles.contains(""DRF_ROOT_ADMIN"")) {
            authorized = true;
        } else if (isValidOrgAdmin(did, targetDid, roles) && !requester.getRoles().contains(""DRF_CORE_SERVICES"")) {
            authorized = true;
        } else {
            DidUriResponse requesterInfo = null, targetInfo = null;
            try {
                requesterInfo = DIDClient.getDidInfo(did, idm.getKeys().getPrivate(), idm.getDid());
                targetInfo = DIDClient.getDidInfo(targetDid, idm.getKeys().getPrivate(), idm.getDid());
            } catch (NotFoundException e) {
                authorized = false;
            }
            if (!targetInfo.getParentUri().equals(did) && !targetInfo.getParentUri().equals(requesterInfo.getParentUri())) {
                authorized = false;
            }
            authorized = true;
        }

        return authorized ? (ResponseEntity<?>) joinPoint.proceed() : new ResponseEntity<>(HttpStatus.FORBIDDEN);
    }
```

The function being called is called in other methods without error.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBbSN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBnRa,aspectj,1661367386,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-02T01:53:42Z,2023-08-02T01:53:42Z,"> @kriegaex Apologies for crossposting. What is the reason this is discouraged?

Stack Overflow is for usage questions. This here is a bug tracker or a place to suggest new features. The reason why I did not close this issue is that at the time of you asking, I could not exclude the possibility that there might be a problem in AspectJ. I have yet to inspect your code and am going to do that next. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBnRa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBo7q,aspectj,1661374186,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-02T02:02:40Z,2023-08-02T02:02:40Z,"> I found the line of code that was causing problems. I am able to fix it so that the project builds now, but I do not understand why my code was breaking.

That is not a fix, it is a workaround. And I am assuming, that it was not a single line of code causing the problem but some problem with the internal method call. All you seem to have changed in your workaround is that you inlined that method. The method should not cause such a problem, which is why - again - I am requesting an [MCVE](https://stackoverflow.com/help/mcve). There might be a real problem in AspectJ. So if it occurred once, it can occur again, if it does not get fixed. But in order to do that, I need a reproducer. So please, give me one. We both already invested time and effort for this issue, so let us get it off the table for good.

Edit: The other tiny change you made between code snippets is that the first one targets <code>gov.nasa.drf.<strong>auth</strong>.controller</code> and the second one <code>gov.nasa.drf.<strong>test</strong>.controller</code>. Without the MCVE, I cannot say if that makes any difference.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jBo7q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jN9vI,aspectj,1664605128,250,NA,ajones239,32377983,,,NA,2023-08-03T20:27:30Z,2023-08-03T20:27:30Z,"MCVE: https://github.com/ajones239/aspectj-issue250-mcve
Requires java 17
I've been building with `mvn clean`, `mvn compile`, and then `mvn package`. It fails on the package.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jN9vI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO47h,aspectj,1664847585,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-04T01:31:48Z,2023-08-04T01:31:48Z,"Thanks for the reproducer. I do not know the exact reason or how to fix it yet, but I see that the overloaded private method `AuthorizationAspect.isValidParent` causes the problem. If either I make both methods public or I remove one of them, compilation passes. Either way, I am classifying this as a bug.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO47h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO5Yv,aspectj,1664849455,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-04T01:34:38Z,2023-08-04T01:34:38Z,"> I've been building with `mvn clean`, `mvn compile`, and then `mvn package`. It fails on the package.

Actually, the only reason that it does not fail in `compile` is that you configured AJ Maven to run in phase `process-classes`, which runs right after `compile`. I.e., `mvn clean process-classes` will also fail the build. It has nothing to do with packaging.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO5Yv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO9yC,aspectj,1664867458,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-04T02:01:00Z,2023-08-04T02:01:00Z,"> What strikes me as odd too: In the error message _""Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor)""_, I would actually have expected relocated class names like **_aj._**_org.objectweb.asm.ClassReader_. How that can be any different, I have no idea about.

For the record: The reason is, that the string constant for the exception message is created during compile time, but package relocation takes place later during JAR packaging. I.e., here

https://github.com/eclipse-aspectj/aspectj/blob/db76c175037c10ce21fc8f7fe681162e31082445/weaver/src/main/java/org/aspectj/weaver/bcel/LazyClassGen.java#L755-L761

constants like `AsmDetector.CLASS_READER` are read before the relocation process moves ASM to package `aj` and during runtime the correctly relocated constants are not being evaluated at all, because they were inlined during compilation already.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jO9yC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jPHFa,aspectj,1664905562,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-04T03:02:16Z,2023-08-04T03:02:16Z,"> It runs in IntelliJ without issue.

I just tried, and for me it is not like you said. IntelliJ IDEA shows the exact same compilation error as Maven. So, it definitely is not a Maven-related problem but purely an AspectJ one.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jPHFa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jQzFV,aspectj,1665347925,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-04T09:55:47Z,2023-08-04T09:55:47Z,"Here is my version of a minimal reproducer:

```java
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

import java.util.Random;

@Aspect
public class MyAspect {
  @Around(""execution(* Application.*(..))"")
  public Object myAdvice1() {
    a(1, ""one"");
    return null;
  }

  @Around(""execution(* Application.*(..))"")
  public Object myAdvice2(ProceedingJoinPoint joinPoint) throws Throwable {
    a(2);
    return new Random().nextBoolean() ? joinPoint.proceed() : null;
  }

  private void a(int i) {}
  private void a(int i, String s) {}
}

class Application {
  public void doSomething() {}
}
```

```text
$ ajc -cp aspectjrt-1.9.19.jar -8 MyAspect.aj

AspectJ Internal Error: unable to add stackmap attributes to class 'MyAspect'. -1
java.lang.NegativeArraySizeException: -1
        at aj.org.objectweb.asm.Frame.merge(Frame.java:1222)
        at aj.org.objectweb.asm.MethodWriter.computeAllFrames(MethodWriter.java:1611)
        at aj.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1547)
        at aj.org.objectweb.asm.MethodVisitor.visitMaxs(MethodVisitor.java:786)
        at aj.org.objectweb.asm.ClassReader.readCode(ClassReader.java:2665)
        at aj.org.objectweb.asm.ClassReader.readMethod(ClassReader.java:1514)
        at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:744)
        at aj.org.objectweb.asm.ClassReader.accept(ClassReader.java:424)
        at org.aspectj.weaver.bcel.asm.StackMapAdder.addStackMaps(StackMapAdder.java:45)
        at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:762)
        at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1459)
        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1421)
        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1161)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:446)
        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:431)
        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:104)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:946)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:576)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:476)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:427)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:374)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
        at org.aspectj.tools.ajc.Main.main(Main.java:84)
(...)
org.aspectj.weaver.BCException: Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor) for stackmap generation. Stackmap generation for woven code is required to avoid verify errors on a Java 1.7 or higher runtime.
(...)
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jQzFV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jTsRV,aspectj,1666106453,250,NA,ajones239,32377983,,,NA,2023-08-04T19:54:02Z,2023-08-04T19:54:02Z,"> Actually, the only reason that it does not fail in compile is that you configured AJ Maven to run in phase process-classes, which runs right after compile. I.e., mvn clean process-classes will also fail the build. It has nothing to do with packaging.

> For the record: The reason is, that the string constant for the exception message is created during compile time, but package relocation takes place later during JAR packaging

Thanks for the information. I was unsure what was happening, but was seeing the error during the `mvn package` step.

> IntelliJ IDEA shows the exact same compilation error as Maven. So, it definitely is not a Maven-related problem but purely an AspectJ one

My IDE must be configured differently. I only started seeing the error building docker images for deployment with Maven. Previously everything seemed to be working in Intellij.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jTsRV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jUm-s,aspectj,1666346924,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-05T01:55:05Z,2023-08-05T01:55:05Z,"Note to myself: Somehow, the weaver creates byte code for a method call to the overloaded method with more parameters, even though it tries to call it with the smaller number of parameters. This makes the JVM try to pop one more parameters off the stack than actually are there. More exactly, the ASM `ClassReader` already stumbles across that inconsistency, causing the `NegativeArraySizeException`. The root cause for that must be eliminated.

Update: In the aspect class file, only one method `ajc$inlineAccessMethod$MyAspect$MyAspect$a` is generated at all, the overloaded method is not found.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jUm-s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jUw8w,aspectj,1666387760,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-05T04:46:14Z,2023-08-05T04:46:14Z,"I managed to identify and fix the problem. Please retest with AspectJ version `1.9.20-SNAPSHOT`, adding this repository to your POM:

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jUw8w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jV3H1,aspectj,1666675189,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-06T01:53:41Z,2023-08-06T01:53:41Z,"My fix broke something else in AspectJ. I noticed yesterday, but was too busy to investigate and improve the bugfix. But now, I think I got it. Still waiting for the PR CI build, though.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jV3H1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jV5ul,aspectj,1666685861,250,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-06T02:40:07Z,2023-08-06T02:40:07Z,Now it is _really_ fixed without breaking existing behaviour. The new snapshot is available for you to test.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jV5ul/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/250,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jX1aR,aspectj,1667192465,250,NA,ajones239,32377983,,,NA,2023-08-07T05:06:09Z,2023-08-07T05:06:09Z,I can confirm that I no longer see the issue with the updated version. Thanks for the help.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jX1aR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/251,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/251,aspectj,1835966777,251,BCException thrown in LazyClassGen displays non-relocated ASM class names,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-08-04T02:26:34Z,2023-08-04T02:32:13Z,"This relates to https://github.com/eclipse-aspectj/aspectj/issues/250#issuecomment-1664867458.

In the error message _""Unable to find ASM classes (org.objectweb.asm.ClassReader, org.objectweb.asm.ClassVisitor)""_, we expect relocated class names like **_aj._**_org.objectweb.asm.ClassReader_.

The reason for AJ using non-relocated ones is, that the string constant for the exception message is created during compile time, but package relocation takes place later during JAR packaging. I.e., here

https://github.com/eclipse-aspectj/aspectj/blob/db76c175037c10ce21fc8f7fe681162e31082445/weaver/src/main/java/org/aspectj/weaver/bcel/LazyClassGen.java#L755-L761

constants like `AsmDetector.CLASS_READER` are read before the relocation process moves ASM to package `aj` and during runtime the correctly relocated constants are not being evaluated at all, because they were inlined during compilation already.

Therefore, we need a workaround to force the Java compiler not to convert the error message to a string constant. Something like `AsmDetector.CLASS_READER.replace('Ä', 'Ö')` with ""Ä"" and ""Ö"" being characters certainly not occurring in those class names, rendering the replace operation a no-op, looks ugly, but should effectively stop the error message to end up in the class constant pool.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/251/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/253,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/253,aspectj,1842300249,253,XML-configured aspect scoping for ITD targets,kriegaex,1537384,Alexander Kriegisch,,OPEN,2023-08-09T01:11:37Z,2023-08-09T06:38:16Z,"As described at the end of my [Stack Overflow answer](https://stackoverflow.com/a/76855840/1082681) and also in my [Bugzilla 455014 comment](https://bugs.eclipse.org/bugs/show_bug.cgi?id=455014#c8), something like

```xml
<aspect name=""de.scrum_master.aspect.MyAspect"" scope=""de.scrum_master.app..*"" />
```

has no effect on ITD, only on regular pointcuts.

Here is a reproducer Eclipse project (created in Eclipse 2023-06), please adjust absolute path to _aop.xml_ in _.settings/org.eclipse.ajdt.core.prefs_:
[SO_AJ_ITDXmlConfigured_76854550.zip](https://github.com/eclipse-aspectj/aspectj/files/12297193/SO_AJ_ITDXmlConfigured_76854550.zip)

Outside Eclipse, just unzip the project, enter the base directory and try this (example for Windows CMD shell):

```text
$ del /s /q bin\*
(...)

$ ajc -cp ""C:\Program Files\Java\AspectJ\lib\aspectjrt.jar"" -8 -d bin -xmlConfigured aop.xml src\org\acme\MyOtherPanel.java src\de\scrum_master\app\Application.java src\de\scrum_master\app\MyTargetPanel.java src\de\scrum_master\aspect\MyAspect.aj
(...)

$ java -ea -cp ""C:\Program Files\Java\AspectJ\lib\aspectjrt.jar;bin"" de.scrum_master.app.Application
Exception in thread ""main"" java.lang.AssertionError: out-of-scope class parent should not have been altered by aspect
        at de.scrum_master.app.Application.main(Application.java:18)
```

The assertion fails, because ITD did have an effect on the out-of-scope class. It would pass after we extend XML config scoping for AJC to respect ITD targets, too.

For reference, here is the complete code:

```java
package de.scrum_master.app;

import javax.swing.JPanel;

public class MyTargetPanel extends JPanel {
  public static int getMeaningOfLife() {
    return 42;
  }
}
```

```java
package org.acme;

import javax.swing.JPanel;

public class MyOtherPanel extends JPanel {
  public static int getMeaningOfLife() {
    return 42;
  }
}
```

```java
package de.scrum_master.aspect;

import java.beans.JavaBean;
import javax.swing.JPanel;

public aspect MyAspect {
  public static class MyPanel extends JPanel {}

  declare parents: (!@JavaBean JPanel+) extends MyPanel;

  int around() : (execution(int getMeaningOfLife())) {
    return 11;
  }
}
```

```xml
<aspectj>
  <aspects>
    <aspect name=""de.scrum_master.aspect.MyAspect"" scope=""de.scrum_master.app..*"" />
    <!-- other aspects go here, with or without scope -->
  </aspects>
</aspectj>
```

```java
package de.scrum_master.app;

import javax.swing.JPanel;
import org.acme.MyOtherPanel;
import de.scrum_master.aspect.MyAspect;

public class Application {
  public static void main(String[] args) {
    assert MyTargetPanel.getMeaningOfLife() != 42
      : ""in-scope class method result should have been altered by aspect"";
    assert MyOtherPanel.getMeaningOfLife() == 42
      : ""out-of-scope class method result should not have been altered by aspect"";
    assert MyTargetPanel.class.getSuperclass().equals(MyAspect.MyPanel.class)
      : ""in-scope class parent should have been altered by aspect"";
    assert MyOtherPanel.class.getSuperclass().equals(JPanel.class)
      : ""out-of-scope class parent should not have been altered by aspect"";
  }
}
```

@aclement, I do not even dare to ask you to implement this, but I would be glad for advice about how to tackle this.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/253/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/253,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jlbjS,aspectj,1670756562,253,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-09T06:38:16Z,2023-08-09T06:38:16Z,Now there is a Maven project with a JUnit test reproducing the problem at https://github.com/kriegaex/SO_AJ_ITDXmlConfigured_76854550.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5jlbjS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/254,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/254,aspectj,1850795800,254,Java 20 support,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-08-15T01:54:16Z,2023-08-15T01:55:04Z,,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/254/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/256,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/256,aspectj,1859068195,256,Bridge methods should be ignored for pointcut matching,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-08-21T10:23:09Z,2023-08-21T10:58:49Z,"This bug is was originally discovered and discussed as a Spring AOP issue. In order for it to be part of the issue list for the next AspectJ release, this tracker issue was created.

Fixes spring-projects/spring-framework#27761.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/256/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257,aspectj,1860869657,257,Regression: `execution(!void get*())` no longer works in AspectJ 1.9.20,sbrannen,104798,Sam Brannen,,CLOSED,2023-08-22T08:07:45Z,2023-09-04T05:30:47Z,"In the test suite for the Spring Framework, we have had the following pointcut for several years.

```java
@Pointcut(""execution(!void get*())"")
void propertyAccess() {}
```

However, once we [upgraded from AspectJ 1.9.19 to 1.9.20](https://github.com/spring-projects/spring-framework/commit/5458e0dccc3a0fb5dbceccb07da5c94d74d46194), our test using that pointcut began to [fail](https://ge.spring.io/s/v2js2afkh3zom/tests/task/:spring-aop:test/details/org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactoryTests/namedPointcutFromAspectLibrary()?top-execution=1).

Specifically, the above pointcut no longer matches a method such as `int getAge();`.

To get our test to pass again, we changed the pointcut to `@Pointcut(""execution(int get*())"")` in https://github.com/spring-projects/spring-framework/commit/c72dd1ff66f841443e864925061d0ff01a1a59be.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5krgWV,aspectj,1689126293,257,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-23T01:25:02Z,2023-08-23T01:25:02Z,"Thank you, @sbrannen. This is indeed a regression, and it affects all negated type patterns, not just `!void`, i.e. also something like `!String` (which then in turn should match void types, among many others). I have created a regression test already. When I can fix that depends on my free cycles outside of work.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5krgWV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5kr7Ku,aspectj,1689236142,257,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-08-23T03:45:20Z,2023-08-23T03:45:20Z,"@sbrannen, the problem should be fixed. Please try the latest `1.9.21-SNAPSHOT` in your Spring build. Without feedback, I am not confident to release 1.9.20.1 anytime soon.

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5kr7Ku/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/257,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lmq3N,aspectj,1704635853,257,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-09-04T05:30:47Z,2023-09-04T05:30:47Z,"I am disappointed that there was no re-testing feedback. That lack of feedback kept me withholding the AspectJ 1.9.20.1 bugfix release for longer than necessary. Anyway, today I released the new version. Enjoy.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lmq3N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,aspectj,1876657306,259,aspectj with logback and springboot deadlock happened,walkertest,49718754,,,CLOSED,2023-09-01T03:33:20Z,2023-09-04T11:47:12Z,"# how to reproduce
* I make a demo to reproduce the problem.
* problem: the spring project may be deadlocked by log info format message and the projcet start failed. This happened online.
* detailInfo: https://github.com/walkertest/springdemo/blob/main/doc/logbackdeadlock.md

# some env 
```
java.version: 1.8.0_361
springboot: 2.7.15
aspectjweaver: 1.9.20
```

I don't know how to avoid this problem, wish your response.
Thanks first.

# more detailInfo
* VirtualMachine attach
![image](https://github.com/eclipse-aspectj/aspectj/assets/49718754/6cc8f16f-f140-48a6-8a6f-81f1e09a29ec)

* a thread which use logback format message
![image](https://github.com/eclipse-aspectj/aspectj/assets/49718754/7217e5bf-b994-4b86-beba-febf089e4b44)

![image](https://github.com/eclipse-aspectj/aspectj/assets/49718754/5cc04fff-bebc-4525-8cf7-87e0dcab356f)


* @Asepect in main thread to do log format message too with logback
![image](https://github.com/eclipse-aspectj/aspectj/assets/49718754/8c4f994d-b4a3-4ebd-8f37-59b03018b857)
![debugpoint](https://github.com/eclipse-aspectj/aspectj/assets/49718754/bb1730ec-9db4-4070-b1cb-9a52b670ff91)

* the deadlock happend through debug and run step over
![deadlockhappened](https://github.com/eclipse-aspectj/aspectj/assets/49718754/e722cb35-8230-4cca-9bc1-18a48539009b)

* some stack info:
```
Found one Java-level deadlock:
=============================
""pool-1-thread-1"":
  waiting to lock monitor 0x000002067dd46e08 (object 0x00000005c221c3c8, a sun.misc.Launcher$AppClassLoader),
  which is held by ""main""
""main"":
  waiting to lock monitor 0x000002067dfc91e8 (object 0x000000071926d5b8, a java.lang.Object),
  which is held by ""pool-1-thread-1""

Java stack information for the threads listed above:
===================================================
""pool-1-thread-1"":
	at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:99)
	- waiting to lock <0x00000005c221c3c8> (a sun.misc.Launcher$AppClassLoader)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	- locked <0x000000071926d5b8> (a java.lang.Object)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at ch.qos.logback.classic.spi.LoggingEvent.getFormattedMessage(LoggingEvent.java:293)
	at ch.qos.logback.classic.spi.LoggingEvent.prepareForDeferredProcessing(LoggingEvent.java:206)
	at ch.qos.logback.core.OutputStreamAppender.subAppend(OutputStreamAppender.java:223)
	at ch.qos.logback.core.OutputStreamAppender.append(OutputStreamAppender.java:102)
	at ch.qos.logback.core.UnsynchronizedAppenderBase.doAppend(UnsynchronizedAppenderBase.java:84)
	at ch.qos.logback.core.spi.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:51)
	at ch.qos.logback.classic.Logger.appendLoopOnAppenders(Logger.java:270)
	at ch.qos.logback.classic.Logger.callAppenders(Logger.java:257)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:421)
	at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:383)
	at ch.qos.logback.classic.Logger.info(Logger.java:591)
	at com.tencent.demo.logbacktest.StartLogTest$NodeStartingHandleThread.run(StartLogTest.java:34)
	at java.lang.Thread.run(Thread.java:750)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:308)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
""main"":
	at java.lang.ClassLoader.loadClass(ClassLoader.java:400)
	- waiting to lock <0x000000071926d5b8> (a java.lang.Object)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at ch.qos.logback.classic.spi.LoggingEvent.getFormattedMessage(LoggingEvent.java:293)
	at ch.qos.logback.classic.spi.LoggingEvent.prepareForDeferredProcessing(LoggingEvent.java:206)
	at ch.qos.logback.core.OutputStreamAppender.subAppend(OutputStreamAppender.java:223)
	at ch.qos.logback.core.OutputStreamAppender.append(OutputStreamAppender.java:102)
	at ch.qos.logback.core.UnsynchronizedAppenderBase.doAppend(UnsynchronizedAppenderBase.java:84)
	at ch.qos.logback.core.spi.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:51)
	at ch.qos.logback.classic.Logger.appendLoopOnAppenders(Logger.java:270)
	at ch.qos.logback.classic.Logger.callAppenders(Logger.java:257)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:421)
	at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:398)
	at ch.qos.logback.classic.Logger.info(Logger.java:583)
	at com.tencent.demo.logbacktest.LogInit.init(LogInit.java:13)
	at com.tencent.demo.logbacktest.ComponentTest.<clinit>(ComponentTest.java:14)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:604)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:363)
	- locked <0x00000005c221c3c8> (a sun.misc.Launcher$AppClassLoader)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419)
	at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:137)
	at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:109)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:447)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:268)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:325)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:147)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:748)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	- locked <0x00000005c2211918> (a java.lang.Object)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292)
	at com.tencent.demo.DemoApplication.main(DemoApplication.java:10)

Found 1 deadlock.
```
[jstackinfo.txt](https://github.com/eclipse-aspectj/aspectj/files/12495160/26220.txt)

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ldI8f,aspectj,1702137631,259,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-09-01T04:24:58Z,2023-09-01T04:24:58Z,"Can you please post some more information, for example a call stack, thread dump etc.? I am on the road and would like to understand this issue first, before having a chance to clone your repository. Thanks. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ldI8f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ldl4E,aspectj,1702256132,259,NA,walkertest,49718754,,,NA,2023-09-01T06:50:02Z,2023-09-01T06:50:02Z,"Hi, I have update the issue with some more info.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ldl4E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ljCvP,aspectj,1703685071,259,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-09-02T04:23:31Z,2023-09-02T04:23:31Z,"Thank you for the [MCVE](https://stackoverflow.com/help/mcve) and its documentation. Great job! 🙂

I can reproduce the problem, but only in debug mode, not when running the application normally. Either way, it looks as if there is no AspectJ issue, but the problem sits in front of the computer. You use Spring AOP incorrectly. Please change the faulty

```java
@Aspect
@Configuration
public class ComponentTest {
```

to

```java
@Aspect
@Component
public class ComponentTest {
```

See PR https://github.com/walkertest/springdemo/pull/1.

I see this error so often and have commented on it on Stack Overflow a lot. It seems there is one faulty source from which everyone copies and pastes their Spring AOP aspects. An aspect is a component, not a configuration class. The types of proxies created for both are different. Correct that, and the problem goes away.

P.S.: Why are you avoiding capital letters where the English language requires them? Orthography is not optional, just because we are computer nerds. It makes reading your text more difficult than necessary.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ljCvP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lnYTX,aspectj,1704821975,259,NA,walkertest,49718754,,,NA,2023-09-04T08:18:49Z,2023-09-04T08:18:49Z,"> 

Thanks your advice!
* It can be reproduced in run mode in our online env. Thats why I ask this question. But it happened by chance.
* I changed @Configuration to @Component , then the problem goes away. This method is good!
* Is there any stackoverflow link? I can see the detail issue info and I have tried to find solution by google , but i did not find any of them.
* My english language  is not very good. Please forgive me.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lnYTX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/259,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lojMW,aspectj,1705128726,259,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-09-04T11:47:12Z,2023-09-04T11:47:12Z,@walkertest: https://stackoverflow.com/a/56919004/1082681,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5lojMW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,aspectj,1912815383,260,Java 21 support,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-09-26T06:58:06Z,2023-12-11T04:20:38Z,"Right after Eclipse 2023-09 was released, as usual the beta branch for the next Java version (21) was merged into the main branch. Java 21 support is now available on Eclipse Marketplace, but according to the [mailing list announcement](https://www.eclipse.org/lists/jdt-dev/msg02289.html), only final features are supported, no preview or incubator features yet. Those are planned to be finished by Eclipse 2023-12:

> We are pleased to announce the Java 21 support for Eclipse 2023-09 (4.29).
>
> The release notably includes the support of the following standard Java 21 features:
> * [21] JEP 440: Record Patterns
> * [21] JEP 441: Pattern Matching for switch
>
> (...) The known issues and the preview features are retargeted to 4.30 timeframe or to the next Java version as appropriate.

With AspectJ being dependent on JDT Core, the first Java 21 release of AspectJ (1.9.21) will only contain what is described above. An update release 1.9.21.x is scheduled to be released, after upstream support for the remaining JDK 21 features has been released.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ngYAQ,aspectj,1736540176,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-09-27T01:42:33Z,2023-09-27T01:42:33Z,"After building the first version of AspectJ with a JDT Core with Java 21 support, the I found out that there are Java 17 class files in several Eclipse JDT Core dependencies, which make their way into `aspectjtools.jar`, i.e. the AspectJ compiler _Ajc_ will need a Java 17 runtime environment (previously Java 11). 🙁

I analysed the situation in detail after unpacking the four main AspectJ JARs into subdirectories and checking on classfile major versions via `javap`. First, let us create lists containing pairs of classfiles and their major versions:

```text
$ find aspectjrt -type f -name '*.class' | xargs javap -v | grep -E '^(  major version:|Classfile)' > aspectjrt.txt
$ find aspectjmatcher -type f -name '*.class' | xargs javap -v | grep -E '^(  major version:|Classfile)' > aspectjmatcher.txt
$ find aspectjweaver -type f -name '*.class' | xargs javap -v | grep -E '^(  major version:|Classfile)' > aspectjweaver.txt
$ find aspectjtools -type f -name '*.class' | xargs javap -v | grep -E '^(  major version:|Classfile)' > aspectjtools.txt
```

Next, let us display some stats:

```text
$ grep -E '^  major version:' aspectjrt.txt | sort | uniq -c
    131   major version: 52

$ grep -E '^  major version:' aspectjmatcher.txt | sort | uniq -c
    434   major version: 52

$ grep -E '^  major version:' aspectjweaver.txt | sort | uniq -c
     37   major version: 49
    935   major version: 52

$ grep -E '^  major version:' aspectjtools.txt | sort | uniq -c
     37   major version: 49
   2050   major version: 52
   2481   major version: 55
    691   major version: 61
```

| Major | Java version |
|-------|--------------|
| 49 | 5 |
| 52 | 8 |
| 55 | 11 |
| 61 | 17 |

I.e., the situation for the upcoming AspectJ 1.9.21 with Java 21 support is as follows:
  * Runtime, matcher and weaver still work under Java 8.
  * Tools (compiler) needs a Java 17+ runtime environment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ngYAQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPL6S,aspectj,1815920274,260,NA,jeromevdl,117538,Jérôme Van Der Linden,,NA,2023-11-17T08:18:48Z,2023-11-17T08:18:48Z,"Hi, is there any ETA for this to be released? We're heavily depending on aspectj and cannot provide a java21-compatible version of our library without this. Thanks for your work!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPL6S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPT85,aspectj,1815953209,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-17T08:47:05Z,2023-11-17T08:47:05Z,"The problem is that Java 21 support in the Eclipse Java Compiler we depend on is still neither officially released nor complete in the current development version. That is the only reason why I did not release AspectJ 1.9.21 shortly after JDK 21 became available.

But there have been 1.9.21 snapshots for quite a while now. Please use that for now and report back problems. If it works for you, I can then maybe release a milestone, if the only problem is that you do not want to depend on a snapshot. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPT85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPe_h,aspectj,1815998433,260,NA,jeromevdl,117538,Jérôme Van Der Linden,,NA,2023-11-17T09:08:17Z,2023-11-17T09:08:17Z,"Thanks for the prompt answer. We cannot rely on a SNAPSHOT, as it's not available in maven central. I can obviously test with a local build of the [java-21 branch](https://github.com/eclipse-aspectj/aspectj/tree/java-21). Will tell you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPe_h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPmm1,aspectj,1816029621,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-17T09:32:03Z,2023-11-17T09:32:03Z,It is available on Maven Central's snapshot repository. No need to build locally. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPmm1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPoOF,aspectj,1816036229,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-17T09:36:58Z,2023-11-17T09:36:58Z,See https://github.com/eclipse-aspectj/aspectj/issues/242#issuecomment-1587034017 for how to add it to your Maven build. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sPoOF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sP9FU,aspectj,1816121684,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-17T10:33:00Z,2023-11-17T10:33:00Z,"Well, are you actually using any Java 21 language features or just compiling to target 21?

**Edit:** This is a reply to the now deleted comment:

> My end-to-end tests are passing with the 1.9.21-SNAPSHOT. I'm not sure to understand what is missing on your side but it's working fine for us.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sP9FU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sT565,aspectj,1817157305,260,NA,jeromevdl,117538,Jérôme Van Der Linden,,NA,2023-11-17T21:54:27Z,2023-11-17T21:54:27Z,"I've deleted because there was actually an error in my E2E tests, wanted to make sure. It was for another reason.

We actually don't use any Java 21 feature, just targeting 21 for the compilation.

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sT565/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU1cu,aspectj,1817401134,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-18T05:39:28Z,2023-11-18T05:39:28Z,"> We actually don't use any Java 21 feature, just targeting 21 for the compilation.

Then IMO you do not need AspectJ 1.9.21 **at all.** There is zero value in creating Java 21 byte code, if you do not use any Java 21 language features. Your previous Java 8, 11, 17 or 20 byte code will still run fine under JDK 21, unless you use e.g. old Java 8 APIs no longer in existence in more recent JDKs like e.g. javadoc taglet stuff from JDK 8.

I even consider it harmful to force compilation to a more recent target unnecessarily. Older byte code can always run on more recent JDKs, but not the other way around. You new library version would require JDK 21 as a minimum runtime environment. You will just unnecessarily piss off your customers.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU1cu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU6xg,aspectj,1817422944,260,NA,jeromevdl,117538,Jérôme Van Der Linden,,NA,2023-11-18T07:22:47Z,2023-11-18T07:22:47Z,"Yes, we know it still runs when compiling with an older version. We're providing a library for AWS Lambda and people will have to weave their code with it, and now than Java 21 is available as a runtime for Lambda, people can use Java 21, and thus need the version 1.9.21...
Plus our build process (end-to-end tests) is based on a matrix composed of all JDK supported by Lambda (LTS: 8, 11, 17, 21)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU6xg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sWOXE,aspectj,1817765316,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-19T06:45:09Z,2023-11-19T06:45:09Z,"FWIW, I released a [milestone 1.9.21.M1](https://repo1.maven.org/maven2/org/aspectj/aspectjtools/1.9.21.M1/) without any release notes. It is available on Maven Central, so you do not have to use a snapshot.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sWOXE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5s2YZw,aspectj,1826195056,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-25T02:47:10Z,2023-11-25T02:47:10Z,"> Yes, we know it still runs when compiling with an older version. We're providing a library for AWS Lambda and people will have to weave their code with it, and now than Java 21 is available as a runtime for Lambda, people can use Java 21, and thus need the version 1.9.21... Plus our build process (end-to-end tests) is based on a matrix composed of all JDK supported by Lambda (LTS: 8, 11, 17, 21)

@jeromevdl, one more time: Using JDK 21 or running code on it does not necessarily mean to compile to target 21 for no good reason. This is harmful! Your library should be compiled to the lowest possible byte code version. That way, it runs on both new and old JDKs. But if compiled to target 21, there is no chance to run in on any JDK below 21. If the users of your library - is the name a secret, BTW? - run their code on JDK 21, that is just fine. What does your library do, and how is it woven into the target code? LTW? CTW? Post-CTW?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5s2YZw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tZj01,aspectj,1835416885,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-01T03:56:48Z,2023-12-01T03:56:48Z,"As you can see [here](https://github.com/eclipse-simrel/.github/blob/main/wiki/SimRel/2023-12.md#release-schedule), Eclipse 2023-12 SimRel (simultaneous release) is scheduled for 2023-12-06. That will also be the official release date for Java 21 support in Eclipse IDE and Eclipse Java Compiler (ECJ). As explained before, ACJ forks and therefore depends on ECJ. I.e., AspectJ 1.9.21 is expected to be released shortly after Eclipse 2023-12. Currently, Eclipse SimRel is in RC2. A few days ago, I merged in some upstream fixes without any new problems, so the situation seems to stabilise. I want to write a few regression tests for Java 21 preview features which were not available in ECJ the first time I merged, but I did not get around to that yet.

Simply use the M1 and be happy. Just because the "".Mx"" suffix will go away, it does not mean that everything is perfect, and its existence does not mean that the release is unstable.

Like I also said before: 99% of users clamoring for a JDK 21 release are not using any JDK 21 features **at all**. So why the hurry?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tZj01/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tZ_dG,aspectj,1835530054,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-01T06:16:36Z,2023-12-01T06:16:36Z,"Please refrain from unnecessary full quotes, I just edited your comment to remove one. No harm done, just be more considerate when quoting in the future. 🙂

> I belong to that 1% 😅. We are using JDK 21 features such as virtual thread

That is the perfect counter-example. Virtual threads are API, not a language feature. An AspectJ compiler or weaver update should not be necessary for your code to use virtual threads. In principle, you should be able to use a very old version, compile to target 8, 11, 17 or whatever, and still be able to use JDK 21 to develop your application and use virtual threads.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tZ_dG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taEID,aspectj,1835549187,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-01T06:37:52Z,2023-12-01T06:37:52Z,"**Update:** I just tried and used a Maven playground project, opened it in my IDE, switched the to build JDK 21, pasted some virtual thread code into the main method, used an old 1.9.8 AspectJ Compiler via AspectJ Maven Plugin, set the source/target levels to 11, and it compiled fine. The code also executes fine, both from the command line and in my IDE. The only suboptimal thing is that the IDE imports language level 11 and squiggly-underlines the new API, suggesting to upgrade to 21. I simply ignored that, and everything compiles and runs the way I expected it to. Like I said, it is just API.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taEID/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taGI6,aspectj,1835557434,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-01T06:46:21Z,2023-12-01T06:46:21Z,"> So what about pattern matching?

Pattern matching for switch **is** a language feature. It should work, because it was previewed several times and previous AspectJ versions always supported the preview feature. The final can only be used with a new AspectJ version, but you have the M1 already. If you are that bleeding-edge, then you either have to use the milestone or wait until the official ECJ for Java 21 is out and followed by a corresponding AspectJ release. Complain to the JDT Core team, not to me. AspectJ depends on them.

IMO, virtual threads are the much more impactful change in JDK 21. This is going to be the future of Java. With virtual threads, IMO reactive frameworks become superfluous and never would have been developed, if virtual threads would have been there earlier. But sorry, I am digressing. Anyway, pattern matching is just syntactic sugar. Either wait for the final release, if you have a problem with M1, or simply do not use that feature yet.

> Also, is there any proper way to integrate the aspectj with lombok

That is a whole new topic. Please search for my answers about that on Stack Overflow.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taGI6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taLXd,aspectj,1835578845,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-01T07:08:49Z,2023-12-01T07:08:49Z,"I very much doubt that for your customer it is important that you use pattern matching for switch and force him to also use JDK 21 if he depends on your library, just because you do. There is no urgent need to use JDK 21 language features, if you just want to reap the benefits of virtual threads, like I said. Try not to make your luxury problem the customer's problem. That way, you get around the question of why you are delivering something with a milestone dependency to him. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5taLXd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tfnc3,aspectj,1837004599,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-02T02:46:50Z,2023-12-02T02:46:50Z,"I have refreshed JDT Core again, adjusted AspectJ to it and released [1.9.21.RC1](https://repo1.maven.org/maven2/org/aspectj/aspectjtools/1.9.21.RC1/) to Maven Central. On GitHub, you can find the corresponding [AspectJ installer](https://github.com/eclipse-aspectj/aspectj/releases/tag/V1_9_21_RC1). The most notable change is that [JEP 430 (String Templates Preview)](https://openjdk.org/jeps/430) is now supported by the compiler. I did not test it, but I saw it in the commit logs. Feel free to test yourself.

I am not expecting any substantial changes in the compiler anymore until the final release, but of course cannot speak on bahalf of the JDT Core developers.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5tfnc3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/260,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5uOhpF,aspectj,1849301573,260,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-11T04:20:38Z,2023-12-11T04:20:38Z,"AspectJ 1.9.21 is available on Maven Central. Please study the [release notes](https://htmlpreview.github.io/?https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/README-1921.html). Currently, I am trying to make AJDT work with the new AspectJ release. Once that is don, I will also announce the release on the AspectJ ""announce"" and ""users"" mailing lists, as usual.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5uOhpF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/262,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/262,aspectj,1949303118,262,aspectjweaver not working properly with jdk17,jvyas24,148332324,,,CLOSED,2023-10-18T09:37:05Z,2023-10-18T09:49:36Z,info deactivating aspect 'org.springframework.cache.aspectj.JCacheCacheAspect' as it requires type 'javax.cache.annotation.CacheResult' which cannot be found on the classpath,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/262,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5pYtiC,aspectj,1768085634,262,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-10-18T09:48:37Z,2023-10-18T09:48:37Z,"What makes you think that this is an AspectJ problem? Where is your reproducer project? We can reopen the issue, if you give me reason to believe that the problem is not sitting in front of the computer in this case. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5pYtiC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/263,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/263,aspectj,1970517811,263,"Syntax error on token ""RestrictedIdentifierWhen""",kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-10-31T13:48:34Z,2023-11-01T02:53:26Z,"This issue was first raised at https://github.com/mojohaus/aspectj-maven-plugin/issues/186, but it is a JDT Core problem:

When using a method name `when`, as is e.g. common in Mockito, ACJ throws an error like:

```text
[ERROR] Syntax error on token ""RestrictedIdentifierWhen"", delete this token
(...)
when((Boolean) model.iterator.hasNext()).thenReturn(true).thenReturn(false);
^^^^
[ERROR] The method thenReturn(boolean) is undefined for the type Boolean
```

Token `RestrictedIdentifierWhen` is related to guard clauses in switch pattern matching. This problem is said to have been fixed already, compare e.g. https://github.com/eclipse-jdt/eclipse.jdt.core/issues/1518. the to-do for AJC is to merge from upstream JDT Core into our fork and then to test if the problem goes away.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/263/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/263,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ql6Q8,aspectj,1788322876,263,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-01T02:53:26Z,2023-11-01T02:53:26Z,Retested and closed by 3bca8528f33a3648f3646aeeb2f0b55576b0fc64.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ql6Q8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264,aspectj,1996476714,264,Issue compiling when using m2e and aspectj but only visible when using 'Maven Project Builder' not when  using 'mvn clean compile',mpet,1445826,,,CLOSED,2023-11-16T09:52:49Z,2024-02-12T03:05:27Z,"Hi,

We are supporting Eclipse usage in our organization for development of our product. I know you know there are issues with aspectj and m2e and I am trying to figure out what is going on.

When we run:

`mvn clean compile`

Here is an excerpt for the log with -X

```
INFO] --- aspectj-maven-plugin:1.13.1:compile (compile_with_aspectj) @ msran-jcat-extension ---
[DEBUG] Configuring mojo dev.aspectj:aspectj-maven-plugin:1.13.1:compile from plugin realm ClassRealm[plugin>dev.aspectj:aspectj-maven-plugin:1.13.1, parent: jdk.internal.loader.ClassLoaders$AppClassLoader@2a139a55]
[DEBUG] Configuring mojo 'dev.aspectj:aspectj-maven-plugin:1.13.1:compile' with basic configurator -->
[DEBUG]   (s) XaddSerialVersionUID = false
[DEBUG]   (s) Xajruntimetarget = 1.5
[DEBUG]   (s) argumentFileName = builddef.lst
[DEBUG]   (f) aspectDirectory = src/main/aspect
[DEBUG]   (s) groupId = com.company.commonlibrary
[DEBUG]   (s) artifactId = statistics-collector-framework
[DEBUG]   (s) groupId = com.company.commonlibrary
[DEBUG]   (s) artifactId = common-utilities
[DEBUG]   (f) aspectLibraries = [com.company.commonlibrary:statistics-collector-framework, com.company.commonlibrary:common-utilities]
[DEBUG]   (f) basedir = C:\Users\eraonel\git\mje\msran-jcat-extension
[DEBUG]   (f) complianceLevel = 17
[DEBUG]   (s) enablePreview = false
[DEBUG]   (s) encoding = UTF-8
[DEBUG]   (f) excludes = [**/generated-sources/annotations/**]
[DEBUG]   (f) forceAjcCompile = false
[DEBUG]   (f) generatedSourcesDirectory = C:\Users\eraonel\git\mje\msran-jcat-extension\target\generated-sources\aspectj-maven-plugin
[DEBUG]   (f) includes = [**/*.java, **/*.aj]
[DEBUG]   (f) outputDirectory = C:\Users\eraonel\git\mje\msran-jcat-extension\target\classes
[DEBUG]   (f) project = MavenProject: com.company.msran.jcat:msran-jcat-extension:1.9.5070-SNAPSHOT @ C:\Users\eraonel\git\mje\msran-jcat-extension\pom.xml
[DEBUG]   (f) skip = false
[DEBUG]   (f) testAspectDirectory = src/test/aspect
[DEBUG] -- end configuration --
[DEBUG] Not adding non-existent or already added aspectSourcePathDir [C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\aspect] to compileSourceRoots.
[DEBUG] Not adding non-existent or already added testAspectSourcePathDir [C:\Users\eraonel\git\mje\msran-jcat-extension\src\test\aspect] to testCompileSourceRoots.
[DEBUG] Adding -aspectpath: C:\repo\eraonel\.m2\repository\com\company\commonlibrary\statistics-collector-framework\0.0.181\statistics-collector-framework-0.0.181.jar;C:\repo\eraonel\.m2\repository\com\company\commonlibrary\common-utilities\9.0.7\common-utilities-9.0.7.jar
[DEBUG] Running : ajc -Xajruntimetarget:1.5 -encoding UTF-8 -17 -classpath <**complete classpath left out due to size**> -d C:\Users\eraonel\git\mje\msran-jcat-extension\target\classes -s C:\Users\eraonel\git\mje\msran-jcat-extension\target\generated-sources\aspectj-maven-plugin C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\GtmsHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\internal\MjeTracer.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\internal\PrintWebLinkSubscriber.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\JcatNGConstants.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\ListenerHandler.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\logging\writers\tr\CompiledTestType.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\logging\writers\tr\ObjectFactory.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\logging\writers\tr\SuiteType.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\logging\writers\tr\Xmlresults.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\LogUtil.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\Mje.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\MjeTestNGContextHolder.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\MsranJcatTestCaseUpdater.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\MsranJcatTestUpdater.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\MsranJcatTroubleshooterIdentificationHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\MsranTestNgListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\NosaRecordWriter.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\TRStatisticsLogWriter.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\VerdictOverridingInvokedMethodListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CcnListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CfiCmdClient.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CfiCommand.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CFITraceListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CosListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\CustomDataReportListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\AlarmData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\JcatResult.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\MethodData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\NodeAlarmData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\SwVersionData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\TestData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\TestFrameworkData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\TestProjectData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\TestSummaryData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\data\mjedatareporting\UpgradePackageData.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\EiffelEventHandlingListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\ElasticSearchListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\EsiListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\FartTraceListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\CustomDataReportHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\MjeDataReportingHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\MjeDataReportingUtils.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\NodeAlarmDataHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\TestSummaryDataHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\helpers\UpgradePackageDataReportHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\InsightListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\MjeDataReportingListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\MjeStatisticsListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\NodeRecoveryListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\NodeSystemConstantListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\NosaEventWarnAndErrorLogger.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\NosaListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\NosaListenerDataProvider.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\OpenSearchListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\Qa.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\ResourceEmulatorListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\TgfSystemConstantListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\TraceAndErrorHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\TraceAndErrorListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\TraceorderListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\TRexCollectFileListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\listeners\UpToIntegerHelper.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\tardb\CurrentUpgradePackage.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\tardb\ResourceFile.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\tardb\TarDbConstants.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\tardb\TarDBListener.java C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\te\TraceAndErrorConfigurationData.java
[DEBUG] Compiling and weaving 67 sources to C:\Users\eraonel\git\mje\msran-jcat-extension\target\classes
[DEBUG] Arguments file written : C:\Users\eraonel\git\mje\msran-jcat-extension\target\classes\builddef.lst
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[DEBUG] Pipelining compilation
[DEBUG] compiling C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\GtmsHelper.java
[DEBUG] Compiler took 6063ms
```
Compilation is successful.

However I am changing code and want to have automatic build.

We have installed in Eclipse 

AspectJ Development Tools	2.2.4.202311040357	org.eclipse.ajdt.feature.group	Eclipse AspectJ Development Tools
M2E - Maven Integration for Eclipse	2.4.100.20230827-1557	org.eclipse.m2e.feature.feature.group	Eclipse.org - m2e  
Maven Integration for AJDT (Optional)	0.14.5	org.maven.ide.eclipse.ajdt.feature.feature.group	Sonatype, Inc.

and in maven pom.xml  

<groupId>dev.aspectj</groupId>
<artifactId>aspectj-maven-plugin</artifactId>
<version>1.13.1</version>


```
org.eclipse.core.runtime.AssertionFailedException: assertion failed: Marker property value is too long: Failed to execute mojo dev.aspectj:aspectj-maven-plugin:1.13.1:compile {execution: compile_with_aspectj} (dev.aspectj:aspectj-maven-plugin:1.13.1:compile:compile_with_aspectj:compile)

org.eclipse.core.runtime.CoreException: Failed to execute mojo dev.aspectj:aspectj-maven-plugin:1.13.1:compile {execution: compile_with_aspectj}
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeMojo(MavenExecutionContext.java:340)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.lambda$0(MavenExecutionContext.java:291)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:394)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:275)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:290)
	at org.eclipse.m2e.core.project.configurator.MojoExecutionBuildParticipant.build(MojoExecutionBuildParticipant.java:57)
	at org.eclipse.m2e.core.internal.builder.MavenBuilderImpl.lambda$2(MavenBuilderImpl.java:153)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.eclipse.m2e.core.internal.builder.MavenBuilderImpl.build(MavenBuilderImpl.java:133)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$1.method(MavenBuilder.java:164)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$1.method(MavenBuilder.java:1)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod.lambda$1(MavenBuilder.java:109)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:394)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:228)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod.lambda$0(MavenBuilder.java:100)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:394)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:275)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:214)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod.execute(MavenBuilder.java:83)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder.build(MavenBuilder.java:192)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:1079)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:296)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:352)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:441)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:444)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:555)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:503)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:585)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:207)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:300)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: org.codehaus.mojo.aspectj.CompilationFailedException: AJC compiler errors:
error at import com.company.msran.helpers.Helpers;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\eraonel\git\mje\msran-jcat-extension\src\main\java\com\company\msran\jcat\internal\PrintWebLinkSubscriber.java:4:0::0 The import com.company.msran.helpers.Helpers cannot be resolved
error at Helpers.util().jcatHtmlReportHelper().printWebLink(event.getFile(), event.getName());
```

so the same code now gives exception when compiling using Maven Project Builder and it get many of these type of errors where classes cannot be resolved even if I can select then in editor ( where the error is visible) and jump to the class that cannot be resolved.

1. Have you seen this kind of problem? 
2. Is there a way to enable debug for m2e?

I not after blaming but trying to find a solution for this problem.

br,

//mikael

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU2ie,aspectj,1817405598,264,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-11-18T05:55:27Z,2023-11-18T05:55:27Z,"You might be surprised to read this, but I do not use the Eclipse IDE a lot, despite AspectJ and AJDT being Eclipse projects. I normally use IntelliJ IDEA, importing Maven projects into that environment. So, I have not experienced this problem before. Can you please provide a minimal, but complete Maven project reproducing this behaviour? Please also tell me your Eclipse version and which exact update sites you installed the plugins you mentioned above from. I assume you know [this page](https://github.com/eclipse-aspectj/aspectj/blob/master/docs/developer/IDE.md#eclipse).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sU2ie/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sj96c,aspectj,1821367964,264,NA,mpet,1445826,,,NA,2023-11-21T17:36:27Z,2023-11-21T17:36:27Z,"Yes I read your https://github.com/eclipse-aspectj/aspectj/blob/master/docs/developer/IDE.md#eclipse and used what you recommend.
I think it is the builders in eclipse that causes the issues. I mean since it is possible to build using mvn clean compile and then it works!
So no ideas how the Eclipse Maven builder works?

I can try to create a simple project and see if we get the same problem.

Yes this basically happens for 4.x.x version s of Eclipse. 



","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5sj96c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/264,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg68f,aspectj,1938009887,264,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-12T03:04:52Z,2024-02-12T03:04:52Z,"After several months without a reproducer, I am closing this issue. Feel free to provide a reproducer, then I can reopen it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg68f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/266,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/266,aspectj,2034190796,266,Set ClassNotFoundException root cause in ExtensibleURLClassLoader::findClass,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2023-12-10T02:28:42Z,2023-12-10T02:50:35Z,"Detected by @euclio, currently `ExtensibleURLClassLoader::findClass` does not set the root cause of the exception thrown in the `catch (IOException ex)` block here:

https://github.com/eclipse-aspectj/aspectj/blob/8bed465e2629faf8180825d33a14ecfa3f2edb8d/weaver/src/main/java/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java#L49-L61

I.e., if an `IOException` occurs in the `getBytes(name)` call, e.g. in a ""too many open files"" situation or for any other reason, the user has no way of finding out why exactly the class was not found.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/266/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/268,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/268,aspectj,2040831451,268,Can WeavingURLClassLoader/ExtensibleURLClassLoader be made parallel-capable?,euclio,1372438,Andy Russell,arussell123@gmail.com,OPEN,2023-12-14T03:20:54Z,2024-02-12T03:01:05Z,"I'm wondering if this is a possibility, or if the class loading procedure can't be parallelized. For projects with large numbers of classes it could result in a performance boost.

https://docs.oracle.com/javase/8/docs/technotes/guides/lang/cl-mt.html","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/268/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/268,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ukrFu,aspectj,1855107438,268,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-14T04:23:59Z,2023-12-14T04:23:59Z,"I do not have much experience in this field. For now, I have no such plans. 

You are _wondering_ if it _could_ boost performance. I.e., you have not tried. How about creating some verifable facts? If you want to take a stab at implementing it, feel free to do so.
  * Create a PR.
  * Make sure not to break any tests (or adjust them to pass again, in case they only fail due to parallel log output that is expected to be serial).
  * Measure performance for some repeatable scenarios (before/after) to have proof of whether and by much it speeds up typical use cases.
  * Add test cases hardening the change for multi-threaded scenarios in danger of breaking if implemented incorrectly. E.g., it might be problematic if classes are loaded in parallel, if weavable target classes are loaded before the corresponding aspects, or if aspect advices are woven before ITDs from the same or another aspect are in place. Methods, fields or implemented interfaces introduced by ITD might be the target of aspects. Probably there are numerous other cases in need to be handled in the correct order.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5ukrFu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/268,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg6hx,aspectj,1938008177,268,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-12T03:01:04Z,2024-02-12T03:01:04Z,"FYI, lately a PR has been merged that improves weaving in a parallel scenario, see #279.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zg6hx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,aspectj,2041111159,269,AJC 1.9.21 on JDK < 17 dumps ajcore file with 'NoSuchFieldError: RELEASE_17',simonpahl,9265536,Simon Pahl,,CLOSED,2023-12-14T07:31:59Z,2023-12-15T08:00:26Z,"Steps to reproduce
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>test-project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.21</version>
        </dependency>
    </dependencies>

   <build>
       <plugins>
           <plugin>
               <groupId>org.codehaus.mojo</groupId>
               <artifactId>aspectj-maven-plugin</artifactId>
               <version>1.15.0</version>
               <executions>
                   <execution>
                       <goals>
                           <goal>compile</goal>       <!-- use this goal to weave all your main classes -->
                           <goal>test-compile</goal>  <!-- use this goal to weave all your test classes -->
                       </goals>
                   </execution>
               </executions>
               <configuration>
                   <source>11</source>
                   <target>11</target>
                   <complianceLevel>11</complianceLevel>
               </configuration>
               <dependencies>
                   <dependency>
                       <groupId>org.aspectj</groupId>
                       <artifactId>aspectjtools</artifactId>
                       <version>1.9.21</version>
                   </dependency>
               </dependencies>
           </plugin>
       </plugins>
   </build>
</project>
```
Java Code (org/example/Main.java):
```java
package org.example;

public class Main {
  public static void main(String[] args) {
    System.out.println(""Hello world!"");
  }
}
```
Maven version
```bash
# mvn --version
Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: /home/xxx/.sdkman/candidates/maven/current
Java version: 11.0.21, vendor: Eclipse Adoptium, runtime: /home/xxx/.sdkman/candidates/java/11.0.21-tem
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""6.5.12-200.fc38.x86_64"", arch: ""amd64"", family: ""unix""
```


`mvn clean install` causes the following Error:
```
[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.15.0:compile (default) on project test-project: AJC compiler errors:
[ERROR] abort ABORT -- (NoSuchFieldError) RELEASE_17
[ERROR] RELEASE_17
[ERROR] java.lang.NoSuchFieldError: RELEASE_17
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl.<clinit>(BaseProcessingEnvImpl.java:49)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:79)
[ERROR]         at org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:4677)
[ERROR]         at org.aspectj.ajdt.ajc.BuildArgParser.initializeAnnotationProcessorManager(BuildArgParser.java:314)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1070)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR]         at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR]         at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR]         at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR]         at org.aspectj.tools.ajc.Main.run(Main.java:374)
[ERROR]         at org.aspectj.tools.ajc.Main.runMain(Main.java:253)
[ERROR]         at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
[ERROR]         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)
[ERROR]         at org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)
[ERROR]         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)
[ERROR]         at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)
[ERROR]         at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)
[ERROR]         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)
[ERROR]         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
[ERROR]         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
[ERROR]         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:906)
[ERROR]         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:283)
[ERROR]         at org.apache.maven.cli.MavenCli.main(MavenCli.java:206)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:283)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:226)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:407)
[ERROR]         at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:348)
[ERROR] 
[ERROR] 
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
```
Changing back to AspectJ 1.9.20.1 or changing to JDK 17 resolves this issue.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umMvT,aspectj,1855507411,269,NA,simonpahl,9265536,Simon Pahl,,NA,2023-12-14T09:40:45Z,2023-12-14T09:40:45Z,"Ok, apparently the issue comes from https://github.com/eclipse-aspectj/eclipse.jdt.core/blob/V1_9_21_RC1/org.eclipse.jdt.core.compiler.batch/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java#L49C36-L49C68 . And it seems like this version of eclipse.jdt.core is built to run only on Java 17 and higher.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umMvT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umVm3,aspectj,1855543735,269,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-14T10:03:36Z,2023-12-14T10:03:36Z,"Yes, sure. Maybe next time, you want to read the [release notes](https://htmlpreview.github.io/?https://github.com/eclipse/org.aspectj/blob/master/docs/dist/doc/README-1921.html) before upgrading AspectJ. 

It also explains the root cause. It is not an AspectJ decision, but we depend on Eclipse JDT Core. It only affects the AspectJ compiler, not the runtime. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umVm3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umvOu,aspectj,1855648686,269,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-14T11:09:45Z,2023-12-14T11:09:45Z,"> ```shell
> # mvn --version
> Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
> Maven home: /home/xxx/.sdkman/candidates/maven/current
> Java version: 11.0.21, vendor: Eclipse Adoptium, runtime: /home/xxx/.sdkman/candidates/java/11.0.21-tem
> ```

Here, I could have seen the problem, but standing in the middle of a crowd in the bus, scrolling on the mobile phone with one hand is not an ideal situation.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5umvOu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/269,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5unSZg,aspectj,1855792736,269,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2023-12-14T12:49:20Z,2023-12-14T12:49:20Z,"I looked into this a bit more. When running ECJ 3.36.0 or 3.37.0-SNAPSHOT stand-alone, the JVM throws a `LinkageError`, caused by `UnsupportedClassVersionError`, which is kind of clear to the user:

```text
$ java -jar ~/.m2/repository/org/eclipse/jdt/ecj/3.37.0-SNAPSHOT/ecj-3.37.0-SNAPSHOT.jar -11 src/main/java/org/example/Main.java
Error: LinkageError occurred while loading main class org.eclipse.jdt.internal.compiler.batch.Main
        java.lang.UnsupportedClassVersionError: org/eclipse/jdt/internal/compiler/batch/Main has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0
```

With ACJ 1.9.21 stand-alone, compilation can even pass for simple cases, but in many cases we will see the error you posted here. The difference is due to the fact that the Eclipse JDT Core is compiled to with source and target level 17, while the forked AspectJ JDT Core is compiled with source 17 and target 11, which today still works (maybe no longer in the future). But in some execution paths, the class `org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl` (just a relocated version of the upstream class without the `org.aspectj` package prefix) is loaded, and that one defines 

```java
import javax.lang.model.SourceVersion;
// (...)

public static final SourceVersion MINIMAL_REQUIRED_RUNTIME_VERSION = SourceVersion.RELEASE_17;
```

`SourceVersion` is a JDK class, more exactly an `enum`, and that enum constant does not exist in JDKs < 17. I.e., on JDK 11 many classes of the AspectJ compiler load normally, until at some point `BaseProcessingEnvImpl` is loaded and tries to use a constant not present in the current JDK, which leads to the exception you have seen.

There are two ways to handle that:
  * Either, we add a try-catch somewhere in the call hierarchy of the compiler, catching this exception and logging a comprehensive error without writing an `ajcore.*.txt` core dump file.
  * Or, we compile future versions of AspectJ JDT Core with target 17 like the upstream version, which would yield the same `LinkageError`, caused by `UnsupportedClassVersionError`, as ECJ.

An `UnsupportedClassVersionError` already occurs, if you run AJC 1.9.21 e.g. on JDK 8, i.e. it would be kind of consistent to yield the same effect on JDKs 11 to 16. It is already documented in the release notes and [Java version compatibility matrix](https://github.com/eclipse-aspectj/aspectj/blob/master/docs/dist/doc/JavaVersionCompatibility.md) that AJC 1.9.21 needs JDK 17 to run, so strictly speaking neither change is necessary. But avoiding AJ core dumps one way or another would still be appropriate.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5unSZg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/270,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/270,aspectj,2066869765,270,AspectJ installer extracts text files with US-ASCII character set,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2024-01-05T07:33:26Z,2024-01-06T09:09:14Z,"When extracting text or HTML files, special characters like German umlauts ""ÄÖÜäöüß"" or copyright symbol ""©"" are destroyed while unpacking the installer archive. As our files in Git SCM are all UTF-8, the installer should also use UTF-8 to read and write text files.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/270/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/271,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/271,aspectj,2068393372,271,Add runtime and weaver API javadocs to installer again,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2024-01-06T05:25:03Z,2024-01-06T09:09:15Z,"In older AspectJ releases, runtime and weaver javadocs were packaged into the AspectJ installer and then consequently installed to the AspectJ documentation subdirectory. Somehow, this build step got lost when transitioning from Ant to Maven.

In the process of implementing #76, make sure that the API docs will once again be part of the binary distribution again. They are already created for Maven Central releases, but missing in the installer.

Notes:
  * The javadocs are huge nowadays, because we also create them for non-essential classes and also add cross-reference (usage) information to all packages and classes.
  * Together with the HTML created from asciidoc sources and the PDFs from #272, the total unpacked installer size will probably shoot up from 20 MB to 65 MB, the compressed, downloadable installer size will go up from 17 MB to 24 MB.
  * I am not sure, if anyone using the AspectJ installer (instead of just Maven or Gradle plugins) actually reads the local docs, or if it would be better to simply point to the website. The improved (and bloated) installer might be of little value. But it is simple enough to copy all the stuff we are creating anyway into the installer distribution, too. A 24 MB download for someone wishing to use a dedicated, locally installed AspectJ probably is OK in the year 2024.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/271/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/272,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/272,aspectj,2068401201,272,Create PDF versions of important documentation,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2024-01-06T05:37:03Z,2024-01-06T09:09:14Z,"As noted in old Ant build files, it was always a goal to also create PDF versions of manuals like
  * AJ5 Developer's Notebook,
  * AJ Programming Guide,
  * AJ Development Environment Guide,
  * AJ Problem Diagnosis Guide,
  * AJ Design Overview (optionally).

As part of #76, we already create two HTML variants from the asciidoc sources, namely HTML multi-page and HTML single-page. This is redundant already, but caters to different user types and documentation usage situations. PDFs would be a third variant. While some users might prefer reading docs in a web browser, others might wish to carry a single file containing all information (incl. images) for a piece of documentation. Using Asciidoctor already because of #76, it would be relatively straightforward to add build steps for PDF generation, even though PDF generation is slow and makes a full build take significantly longer.

Loosely related to #271, it would also be quite easy to add the PDFs to the AspectJ installer, not just to the website.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/272/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/274,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/274,aspectj,2092270027,274,Enforce code formatting style,kriegaex,1537384,Alexander Kriegisch,,OPEN,2024-01-20T23:07:01Z,2024-12-31T07:59:21Z,"Establish a code formatting style and make sure that it is enforced during the build, maybe using tools like Spotless and/or Checkstyle.

I was thinking about this topic for at least two years on and off, always putting it off, as I am basically the only regular committer. OTOH, that would be the perfect opportunity to introduce such tooling without disrupting other developers. If anyone would on-board to AspectJ in the future, the infrastructure would just be in place already, including the infamous **big commit (BC)** reformatting everything.

But that same BC was what I wanted to avoid or put off for a while, because it would mean that `git annotate|blame` would become a bit more tedious in the future. The good news are:
  - [`git blame -w`](https://git-scm.com/docs/git-blame#Documentation/git-blame.txt--w) ignores whitespace changes
  - Git config option [`blame.ignoreRevsFile`](https://git-scm.com/docs/git-blame#Documentation/git-blame.txt-blameignoreRevsFile) can ignore revisions such as the BC. It might be possible to add the option to a config file committed right into the repository, I have not verified that yet. Otherwise, at least locally it could be used.
  - IDEs like IntelliJ IDEA have options to handle certain types of changes (whitespace, moved blocks) intelligently when annotating files:<br>![image](https://github.com/eclipse-aspectj/aspectj/assets/1537384/8c5c14ab-6bab-495b-b667-c6c4d1c2453e)

I am quite opinionated about what code style I like. Being the sole committer would also mean that I would impose that style on future developers. But at least, it would be a clear guideline. I could just use default settings or well-known code styles for Maven plugins or IDE settings, but those are exactly what I sometimes dislike and perceive as ugly in other projects I contribute to. Spotless often just gets on my nerves - not so much, because it forces me to reformat to make a build pass but rather because it tends to destroy carefully crafted code looking good to my own eyes. Each tool has options to deactivate format enforcement for sections of code, and we should allow for that, but not make it a quasi standard to be used as an excuse to get around the formatting check. E.g., the reviewer for PRs would also decide whether or not to accept any exceptions in the PR. That would give some leeway to developers in cases where reformatting woud make the code less readable. The goal, however, should be to find settings covering most code in most situations in an acceptable way. If reformatting displeases me, but not so much that it causes ""eye cancer"" when reading it, it should be OK. Otherwise, a formatting exception in the source code might be the better alternative.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/274/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/274,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Y9WTN,aspectj,2566218957,274,NA,dweiss,199470,Dawid Weiss,dawid.weiss@carrotsearch.com,NA,2024-12-31T07:59:20Z,2024-12-31T07:59:20Z,"Hi @kriegaex . Just poking around and read the mailing list announcement. I hope you'll find a source of funding and I fully sympathize. I've been always very fond of aspectj - I think it's a great tool. Anyway, just noticed this:

> [...] because it would mean that git annotate|blame would become a bit more tedious in the future.

Not necessarily so. There is an option to git blame which you can use to omit those big automated commits [1]. This can also be set in git config so that it's picked up automatically. Hope this helps.

[1] https://git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Y9WTN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/276,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/276,aspectj,2106875505,276,Structure AsciiDoc website with Antora,kriegaex,1537384,Alexander Kriegisch,,OPEN,2024-01-30T03:28:33Z,2024-02-16T02:57:50Z,"After conversion to AsciiDoc and HTML/PDF generation build steps using Asciidoctor have been implemented and merged already as part of #76, comprehensive navigation is still missing. Yes, there is a [landing page](https://github.com/eclipse-aspectj/aspectj/blob/ae9532af0fde0e0ab06d29d2efe660e80f73b417/docs/index.adoc), off of which all documentation is linked, and it would work nicely both locally (unpacked docs from installer) and on the Eclipse website, but in contrast to the multi-page docs created via DocBook, there is no navigation to next or previous page and especially none to the next higher level. I.e., if a user ends up on any docs chapter via a direct link from Google, Stack Overflow or any blog, she has no easy way to navigate up to the main docs landing page or any intermediate overview page.

Therefore, one idea is to use [Antora](https://gitlab.com/antora/antora) via [Antora Maven Plugin](https://gitlab.com/antora/antora-maven-plugin) to generate one integrated docs website with navigation.

This could be done before initial site publication or afterwards. The advantage of doing it before publication is that in case of URL changes caused by Antora documentation module structure, the Eclipse infra team would have to create redirects from legacy docs URLs to new ones only once. The downside would be even later publication.

- [ ] Explore options to use a single vs. several modules
- [ ] Explore options to create versioned docs and select a version via generated navigation","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/276/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/276,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50F0X5,aspectj,1947682297,276,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-16T02:57:40Z,2024-02-16T02:57:40Z,"After some experiments on branch https://github.com/eclipse-aspectj/aspectj/tree/antora, which involed some directory restructuring, I have decided not to pursue this issue further at the moment. Talks with the Antora team about the question how to best include non-asciidoc resources into the website generation process made it clear that I would have to do more than just configure the product, but customise it, i.e. write some own code for an Antora extension. The generated docs look great with the navigation panel for the whole website on the left hand side etc., but IMO it is not worth the effort to maintain yet another piece of code somewhere, just to perfect the website. As it is now, it is OK - not as great as we would like it to be, but we have a working solution and the new docs are online at https://eclipse.dev/aspectj/doc/latest/.

Keeping the issue open for future consideration.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns50F0X5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,aspectj,2117892990,277,Weaver should return null instead of the original bytes for unwoven classes,KimmingLau,49543702,Kimming Lau,294001791@qq.com,CLOSED,2024-02-05T07:52:21Z,2024-02-09T05:45:49Z,"We try to experience dynamic AppCDS which is a new feature from JDK19 [AppCDS](https://docs.oracle.com/en/java/javase/19/docs/specs/man/java.html#application-class-data-sharing) with LTW javaagent.
But we found that jdk core classes cannot be load from the default archive, because when Aj realize a class is loaded by boostrap classloader, it will return the original bytes. This will cause the JVM to think that the class has been modified by ClassFileTransformer, and do not load the class from default CDS archive.  

According to [ClassFileTransformer javadoc](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/ClassFileTransformer.html) , it refer to that return null if no transform is performed. So I think when a class isn't been weaved, Aj should return null instead of the original bytes.
  


","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9x4W,aspectj,1928797718,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T05:12:53Z,2024-02-06T05:12:53Z,"Hello. Thanks for the report. What you say makes sense at first glance, but I would have to check if any consumers of transformed classes might expect non-null results for whatever reasons. Because I am unfamiliar with CDS archives, please provide a full, minimal example with exact steps to reproduce the problem. I want to see for myself what you are doing. Please also explain why you are doing it. I wonder why AspectJ firstly does not skip JDK classes when weaving and secondly tries to instrument code that is not visible to its class loader. There are too many open questions without a reproducer. Currently, I would not even know how to write a regression test for it.

Besides, is there any connection between this issue and #278? It strikes me as a strange coincidence, that two issues concerning class-loading are opened within just 10 minutes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9x4W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9-jF,aspectj,1928849605,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T06:10:18Z,2024-02-06T06:10:18Z,"[AppCdsDemo-1.0-SNAPSHOT-zip.zip](https://github.com/eclipse-aspectj/aspectj/files/14175192/AppCdsDemo-1.0-SNAPSHOT-zip.zip)
Hi. Thanks for your replies. Here is a reproducible demo, unzip it and run the following command with jdk21 runtime
`java -XX:+UnlockDiagnosticVMOptions -XX:+AllowArchivingWithJavaAgent -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -javaagent:aspectjweaver-1.9.5.jar -cp AppCdsDemo-1.0-SNAPSHOT.jar com.vip.demo.Demo`    
You will see a crash when the JVM exits because it try to dump a CDS archive but validation failed. After Spending a lot time reading JVM source code, I found the root cause was that the AspectJ agent returned the original bytes when processing classes loaded by bootstrap classloader, but at the JVM level, as long as the return value of ClassFileTransformer is not null, it will be considered that the class has been modified and the returned byte array will be copied to new memory with a new pointer pointing to it.  
You would say this is a JVM bug about CDS, yes, I think so too. But this phenomenon makes me have to think about that - is Aj#preProcess() method  better to return null instead of the original bytes for classes loaded by bootstrap? Even for all classes that do not need to be woven.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9-jF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9_Nl,aspectj,1928852325,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T06:13:28Z,2024-02-06T06:13:28Z,"By the way, we use CDS to improve the startup speed of the application, and most of us use AspectJ for monitoring and tracking.  That's why we meet this situation.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y9_Nl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-Ke2,aspectj,1928898486,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T07:02:47Z,2024-02-06T07:02:47Z,"1. When I talked about a reproducer, I actually meant a Maven project I can build from scratch.
2. I do not have your `lib` directory and have no idea what is in there.
3. You did not say which error you see on the console and what you expect to happen instead. But I think I found out, see below.
4. What is the reason for using an old AspectJ version instead of 1.9.21? Probably this is not so relevant to the question, 1.9.21 yields an error, too. But I would like to know anyway.

For reference, this is what I see on the console:

```text
[0.398s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
[0.398s][warning][cds] Skipping org/aspectj/weaver/ResolvedType$Missing: Unsupported location
[0.398s][warning][cds] Skipping java/util/HashMap$HashMapSpliterator: Unsupported location
[0.399s][warning][cds] Skipping sun/management/VMManagement: Unsupported location
[0.399s][warning][cds] Skipping java/lang/invoke/GenerateJLIClassesHelper$HolderClassBuilder: Unsupported location
[0.399s][warning][cds] Skipping org/aspectj/apache/bcel/generic/Type$2: Unsupported location
[0.399s][warning][cds] Skipping org/aspectj/apache/bcel/classfile/ClassFormatException: Unsupported location
[0.401s][warning][cds] Skipping java/lang/management/ManagementFactory: Unsupported location
...
[0.402s][warning][cds] Skipping sun/management/VMManagementImpl: Unsupported location
[0.402s][warning][cds] Skipping java/util/TreeMap: Unsupported location
[0.402s][warning][cds] Skipping org/aspectj/apache/bcel/generic/InvokeDynamic: Unsupported location
[0.402s][warning][cds] Skipping java/lang/invoke/GenerateJLIClassesHelper: Unsupported location
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (systemDictionaryShared.cpp:575), pid=17044, tid=8792
#  guarantee(!k->is_shared_unregistered_class()) failed: Class loader type must be set for BUILTIN class java/lang/invoke/BoundMethodHandle$Species_LLJ
#
# JRE version: Java(TM) SE Runtime Environment (21.0+35) (build 21+35-LTS-2513)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21+35-LTS-2513, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#
# An error report file with more information is saved as:
# C:\Users\alexa\Documents\java-src\AJ_GH-277\hs_err_pid17044.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
```

And this is the written error dump:

```text
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (systemDictionaryShared.cpp:575), pid=17044, tid=8792
#  guarantee(!k->is_shared_unregistered_class()) failed: Class loader type must be set for BUILTIN class java/lang/invoke/BoundMethodHandle$Species_LLJ
#
# JRE version: Java(TM) SE Runtime Environment (21.0+35) (build 21+35-LTS-2513)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21+35-LTS-2513, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UnlockDiagnosticVMOptions -XX:+AllowArchivingWithJavaAgent -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -javaagent:aspectjweaver-1.9.21.jar com.vip.demo.Demo

...

Environment Variables:
JAVA_HOME=c:\Program Files\Java\jdk-21
...

---------------  S Y S T E M  ---------------

OS:
 Windows 10 , 64 bit Build 19041 (10.0.19041.3636)
OS uptime: 2 days 20:27 hours
Hyper-V role detected

CPU: total 4 (initial active 4) (2 cores per cpu, 2 threads per core) family 6 model 142 stepping 9 microcode 0xec, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, fma, vzeroupper, clflush, clflushopt, hv, rdtscp, f16c
Processor Information for all 4 processors :
  Max Mhz: 2904, Current Mhz: 2703, Mhz Limit: 2700

Memory: 4k page, system-wide physical 16234M (5319M free)
TotalPageFile size 32469M (AvailPageFile size 15609M)
current process WorkingSet (physical memory assigned to process): 60M, peak: 60M
current process commit charge (""private bytes""): 342M, peak: 342M

vm_info: Java HotSpot(TM) 64-Bit Server VM (21+35-LTS-2513) for windows-amd64 JRE (21+35-LTS-2513), built on 2023-08-09T20:25:10Z by ""mach5one"" with MS VC++ 17.1 (VS2022)

END.
```

* [java.log](https://github.com/eclipse-aspectj/aspectj/files/14175865/java.log)
* [hs_err_pid17044.log](https://github.com/eclipse-aspectj/aspectj/files/14175868/hs_err_pid17044.log)
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-Ke2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-K66,aspectj,1928900282,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T07:04:22Z,2024-02-06T07:04:22Z,"One more question: Do you have a working counter-example with a Java agent transforming your demo class, but returning null for the others? I.e. a proof of concept that in that case, it actually works as expected? Also with source code, please.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-K66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-ONy,aspectj,1928913778,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T07:17:11Z,2024-02-06T07:17:11Z,"Oh sorry, there is a typo in the command, I've fixed it on the comment above.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-ONy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-SAM,aspectj,1928929292,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T07:30:56Z,2024-02-06T07:30:56Z,"I have never used CDS before, so please also tell me how to run the application after creating the archive. After I changed `org.aspectj.weaver.loadtime.Aj::preProcess` to always return `null` where in previously it returned `bytes`, I tried this:

```text
$ java -XX:+UnlockDiagnosticVMOptions -XX:+AllowArchivingWithJavaAgent -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -javaagent:aspectjweaver-1.9.21.1-SNAPSHOT.jar -cp AppCdsDemo-1.0-SNAPSHOT.jar com.vip.demo.Demo

[0.412s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
[0.412s][warning][cds] Skipping org/aspectj/weaver/tools/TraceFactory: Unsupported location
[0.412s][warning][cds] Skipping org/aspectj/weaver/ArrayReferenceType: Unsupported location
[0.412s][warning][cds] Skipping org/aspectj/apache/bcel/classfile/LocalVariableTable: Unsupported location
...
[0.413s][warning][cds] Skipping org/aspectj/apache/bcel/classfile/LineNumberTable: Unsupported location
[0.413s][warning][cds] Skipping aj/org/objectweb/asm/ClassVisitor: Unsupported location

$ ls -l
...
-r--r--r-- 1 alexa 197609 1048576 Feb  6 14:25 demo.jsa

$ java -XX:+UnlockDiagnosticVMOptions -XX:+AllowArchivingWithJavaAgent -XX:SharedArchiveFile=demo.jsa -cp AppCdsDemo-1.0-SNAPSHOT.jar com.vip.demo.Demo -javaagent:aspectjweaver-1.9.21.1-SNAPSHOT.jar
[0.012s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
```

Is that what you would expect? And did I call the program correctly, again with `-javaagent`, or is the result expected to contain the woven files already? Unfortunately, your program does not print anything, no aspects are involved and I do not see, if aspects have been applied correctly.

Decompiling your demo class yields:

```java
package com.vip.demo;

import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
import java.util.List;

public class Demo {
  public Demo() {
  }

  public static void main(String[] args) {
    List<GarbageCollectorMXBean> garbageCollectorMXBeans = ManagementFactory.getGarbageCollectorMXBeans();
  }
}
```

That is not much. A more meaningful reproducer would be helpful. I do not want to do all the work from scratch that you obviously have done already.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-SAM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-TmW,aspectj,1928935830,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T07:36:13Z,2024-02-06T07:36:13Z,"That's it, I met the same core dump error like yours and I've try another version of aspectjweaver but it was failed too.  
 I'm sorry I don't have the POC you expected, but you can try to modify the method `public byte[] preProcess(String className, byte[] bytes, ClassLoader loader, ProtectionDomain protectionDomain)` in Aj.java, and let it return null when the class loaded by bootstrap classloader(i.e. loader == null). Using the new building aspectweaver.jar to replace that in demo, you will find that CDS works as exepected, which means the demo.jsa file generated successfully.  
Here is my source code you can build from scratch.
[AppCdsDemo.zip](https://github.com/eclipse-aspectj/aspectj/files/14176145/AppCdsDemo.zip)

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-TmW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-Wqp,aspectj,1928948393,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T07:46:34Z,2024-02-06T07:46:34Z,"Hi, after generating .jsa file, it means CDS dumping works, and you can the same command to run the application again, and JVM will use .jsa file to load application classes. You can add JVM option `-Xshare:on` to validate the jsa file. The complete command is in the following: 
`java -XX:+UnlockDiagnosticVMOptions -Xshare:on -XX:+AllowArchivingWithJavaAgent -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -javaagent:aspectjweaver-1.9.5.jar -cp AppCdsDemo-1.0-SNAPSHOT.jar com.vip.demo.Demo`  

And here are some information about CDS (the first one would be the quick start): 
https://docs.oracle.com/en/java/javase/19/docs/specs/man/java.html#application-class-data-sharing  
https://openjdk.org/jeps/310  
https://openjdk.org/jeps/341  
https://openjdk.org/jeps/350  
https://dev.java/learn/jvm/cds-appcds  



","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-Wqp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-ehb,aspectj,1928980571,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T08:10:30Z,2024-02-06T08:10:30Z,"Hm, what is the point of creating those optimised files for faster start-up, if then the load-time weaver needs to do its work again? I would have expected you want to create such an archive, because when starting the application again the classes are woven already. Is there any performance gain in doing it like you described? ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-ehb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-fPi,aspectj,1928983522,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-06T08:12:29Z,2024-02-06T08:12:29Z,"BTW, java agents can in principle also instrument JDK bootstrap classes, albeit with certain structural limitations. AspectJ happens not to do that, but it does not mean that it never will in the future. What would you expect to happen in such a case when running the java agent again on the CDS archive?

Sorry for the many questions, but I do not want to blindly change some code, but also understand what the whole purpose is. That has an influence on both my motivation and the prioritisation of this issue. As the saying goes, if you want to pitch an idea or make someone do something for you, you need to be able to sell it. Let us not forget, that I am doing this work for free, unless you decide to hire me or otherwise sponsor the change.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-fPi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-_1w,aspectj,1929117040,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-06T09:34:11Z,2024-02-06T09:34:11Z,"

> Hm, what is the point of creating those optimised files for faster start-up, if then the load-time weaver needs to do its work again? I would have expected you want to create such an archive, because when starting the application again the classes are woven already. Is there any performance gain in doing it like you described?

I think it is a very good question

I can understand your position very well. As CDS is a new feature that few people use. It will inevitably be risky to modify the originally stable code in order to support it. Appreciate for your reply again.

Best wishes!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5y-_1w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zGlmu,aspectj,1931106734,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T01:51:04Z,2024-02-07T01:51:04Z,"I am working on this, because independently of CDS it makes sense to return `null`, if the candidate class is not transformed. But for now, you can just

* either create the CDS archive without `-javaagent` and only use that parameter later during runtime, when you really need it, because the archived classes are not the woven ones anyway,
* or, if you want the aspect code to be archived, use compile-time weaving (CTW) first and then run create the CDS archive on the woven application.

The latter option might be right, if you use production aspects that always should be in place when running the application. If your aspects are rather used temporarily, e.g. for debugging or tracing, and should not be in the byte code permanently, the former option might is better. A hybrid solution would be CTW and aspects with activation flag, e.g. using `if()` pointcuts.

An important open question for me as someone who has never used CDS before, which I kindly request you to answer: Is there a way to dump classes transformed by a Java agent into a CDS file? If there is such a way and you are using it, please let me know and explain how to activate it, so I can test it. [JDK-8213813 (Add the AllowArchivingWithJavaAgent diagnostic vm option to allow the use of the -javaagent option during CDS dumping)](https://bugs.openjdk.org/browse/JDK-8213813) does not explain anything about it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zGlmu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zGuZh,aspectj,1931142753,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T02:29:31Z,2024-02-07T02:29:31Z,"> Is there a way to dump classes transformed by a Java agent into a CDS file?

OK, I think I have found out. My experimental findings, both as a note to myself and information to the audience:

When creating the archive with the agent on the command line, i.e. when using `-javaagent:aspectjweaver.jar -XX:+AllowArchivingWithJavaAgent`, the agent also must be on the classpath, otherwise during the CDS dump yields lots of messages like

```text
...
[0.877s][warning][cds] Skipping org/aspectj/weaver/IWeaveRequestor: Unsupported location
[0.877s][warning][cds] Skipping org/aspectj/apache/bcel/generic/ReturnaddressType: Unsupported location
[0.877s][warning][cds] Skipping org/aspectj/weaver/loadtime/DefaultWeavingContext: Unsupported location
...
```

The dump file is also much smaller than when doing the same with the agent on the classpath, in my test case 2.4M without aspectjweaver on the CP versus 6.9M with. Example:

```text
$ rm -f *.jsa

$ java -XX:+UnlockDiagnosticVMOptions -Xshare:on -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -cp ""AppCdsDemo-1.0-SNAPSHOT.jar;aspectjweaver-1.9.21.1-SNAPSHOT.jar"" -XX:+AllowArchivingWithJavaAgent -javaagent:aspectjweaver-1.9.21.1-SNAPSHOT.jar com.vip.demo.Demo

[AppClassLoader@5a07e868] weaveinfo Join point 'method-execution(void com.vip.demo.Demo.main(java.lang.String[]))' in Type 'com.vip.demo.Demo' (Demo.java:12) advised by before advice from 'com.vip.demo.MyAspect' (MyAspect.java)
execution(void com.vip.demo.Demo.main(String[]))
Hello world
[0.936s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
[0.936s][warning][cds] Skipping aj/org/objectweb/asm/Type: Old class has been linked
[0.936s][warning][cds] Skipping org/aspectj/weaver/bcel/asm/StackMapAdder$AspectJClassVisitor: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/MethodWriter: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/commons/ClassRemapper: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Label: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/ClassReader: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Attribute: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Frame: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/CurrentFrame: super class aj/org/objectweb/asm/Frame is excluded
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/ClassWriter: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/ClassVisitor: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Context: Old class has been linked
[0.937s][warning][cds] Skipping org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor$MethodAndConstructorRemover: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/MethodVisitor: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/commons/MethodRemapper: super class aj/org/objectweb/asm/MethodVisitor is excluded
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/ByteVector: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/AnnotationVisitor: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/commons/AnnotationRemapper: super class aj/org/objectweb/asm/AnnotationVisitor is excluded
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/commons/FieldRemapper: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/FieldVisitor: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/FieldWriter: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Edge: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/SymbolTable$Entry: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/SymbolTable: Old class has been linked
[0.937s][warning][cds] Skipping org/aspectj/weaver/bcel/asm/StackMapAdder$AspectJConnectClassWriter: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/commons/Remapper: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Symbol: Old class has been linked
[0.937s][warning][cds] Skipping org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor$ClassNameRemapper: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/Handler: Old class has been linked
[0.937s][warning][cds] Skipping aj/org/objectweb/asm/AnnotationWriter: Old class has been linked
[0.937s][warning][cds] Skipping org/aspectj/weaver/bcel/asm/StackMapAdder$AspectJClassVisitor$AJMethodVisitor: Old class has been linked

alexa@Xander-UB MINGW64 ~/Documents/java-src/AJ_GH-277
$ ls -lh demo.jsa
-r--r--r-- 1 alexa 197609 6.9M Feb  7 09:17 demo.jsa
```

See? No more `Skipping ... Unsupported location` warnings anymore, only a few `Old class has been linked` ones, which seem to be OK.

Now let us run the application again with the identical command line:

```text
$ java -XX:+UnlockDiagnosticVMOptions -Xshare:on -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -cp ""AppCdsDemo-1.0-SNAPSHOT.jar;aspectjweaver-1.9.21.1-SNAPSHOT.jar"" -XX:+AllowArchivingWithJavaAgent -javaagent:aspectjweaver-1.9.21.1-SNAPSHOT.jar com.vip.demo.Demo

[0.014s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
[AppClassLoader@2626b418] weaveinfo Join point 'method-execution(void com.vip.demo.Demo.main(java.lang.String[]))' in Type 'com.vip.demo.Demo' (Demo.java:12) advised by before advice from 'com.vip.demo.MyAspect' (MyAspect.java)
execution(void com.vip.demo.Demo.main(String[]))
Hello world
```

Please note above:
  * The weaver prints its `weaveinfo Join point` message.
  * The sample aspect logs `execution(void com.vip.demo.Demo.main(String[]))` as expected.

Now, let us go one step further and remove the `-javaagent` option from the command line:

```text
$ java -XX:+UnlockDiagnosticVMOptions -Xshare:on -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=demo.jsa -cp ""AppCdsDemo-1.0-SNAPSHOT.jar;aspectjweaver-1.9.21.1-SNAPSHOT.jar"" -XX:+AllowArchivingWithJavaAgent com.vip.demo.Demo

[0.012s][warning][cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment
execution(void com.vip.demo.Demo.main(String[]))
Hello world
```

Very interesting! There is no more weaver message, but still the aspect does its job, because obviously the application class has been archived in its woven state. I.e., the effect is similar to a ""poor man's compiler-time weaving"". The same log output we would probably see, if we would just build using compile-time weaving and creating the CDS archive while running the woven application with just `aspectjrt.jar` on the classpath. That would yield a smaller CDS archive, because the weaver classes would not be necessary, only the runtime classes. Anyway, it works with the weaver scenario, too, after I locally changed the code to return `null` for unwoven classes.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zGuZh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zG-Gp,aspectj,1931207081,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-07T03:24:56Z,2024-02-07T03:24:56Z,"Good morning kriegaex, I'm so excited that you are so interested in this problem. I was confused by `Skipping ... Unsupported location` warning logs before, and you solved the problem by putting the agent jar on the classpath, amazing! ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zG-Gp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHGlh,aspectj,1931241825,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T04:04:27Z,2024-02-07T04:04:27Z,"@KimmingLau, yes, CDS seems to need a bit of assistance there when creating the archive. For simple weaving, this is unnecessary, but obviously CDS disregards (or rather cannot find) agent classes, if it cannot find them on the CP additionally. According to the [JDK-8213813](https://bugs.openjdk.org/browse/JDK-8213813) description and the warning _""[cds] This archive was created with AllowArchivingWithJavaAgent. It should be used for testing purposes only and should not be used in a production environment""_, running the CDS creator with an agent is not meant to modify byte code for production, i.e. the missing support for adding agent JAR classes to the CP automatically probably cannot be termed a bug. The OpenJDK team would probably reject it, even though it would be convenient to have this automatism. However, I can imagine cases in which the classes are not wanted in the CDS archive, which is why I guess the opt-in solution is acceptable.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHGlh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHVd8,aspectj,1931302780,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T05:17:27Z,2024-02-07T05:17:27Z,"@KimmingLau, the problem should be fixed. Please try the latest `1.9.21.1-SNAPSHOT`.

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```

BTW, the snapshot also contains an improvement which lets you use LTW without `--add-opens java.base/java.lang=ALL-UNNAMED` on JDk 16+. Until 1.9.21, without that option LTW does not work, unless you are lucky not to need around advice or in general anything that needs to define new classes during weaving.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHVd8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHb43,aspectj,1931329079,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T05:43:31Z,2024-02-07T05:43:31Z,"Another note for the record: While creating CDS archives with `-XX:ArchiveClassesAtExit=demo.jsa` and then running them works on JDKs 13-19 even without my fix, it fails on JDKs 20-21. I.e., the fact that the JDK crashes on JDKs 20-21 just because an agent returns identical class bytes for a bootstrap class is to be considered a JDK bug, not one in the AspectJ Weaver or any other java agent. The AspectJ change is simply a case of defensive programming.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zHb43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zH_Cy,aspectj,1931473074,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-07T07:57:06Z,2024-02-07T07:57:06Z,"I created a minimal reproducer as a Maven project with a very simple agent, not AspectJ:
https://github.com/kriegaex/cds-javaagent-bug

Just run `mvn clean verify` to reproduce the error on JDKs 20 or 21. On older JDKs 13-19, there is no error.

As a workaround, edit the line containing

```xml
<argument>-javaagent:${project.basedir}/../cds-javaagent-agent/target/cds-javaagent-agent-1.0-SNAPSHOT.jar=XXXreturnNull</argument>
```

in file _cds-javaagent-test/pom.xml_, removing the ""XXX"". Then, the agent will return `null` instead of the original class bytes.

BTW, the problem does not occur with any program that runs with the agent, but specifically if the program contains `ManagementFactory.getGarbageCollectorMXBeans()`.

The reproducer serves as the input for a new OpenJDK bug I just created. It has the internal review ID 9076545. As soon as the bug is accepted and visible in the public JDK bug database, I will add a link here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zH_Cy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zIRaA,aspectj,1931548288,277,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-07T08:47:33Z,2024-02-07T08:47:33Z,"Yes, because `ManagementFactory.getGarbageCollectorMXBeans()` contains a combined lamba expression, which cause `BoundMethodHandle$Species_LLJ` loading by bootstrap classloader. I've also reported a similar one to JDK bug database, but maybe my reproducer was not completed like yours,. they required me to provide more information. Anyway, It would be nice if they knew it was a bug.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zIRaA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/277,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zW2Ni,aspectj,1935369058,277,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-09T05:45:48Z,2024-02-09T05:45:48Z,"> The reproducer serves as the input for a new OpenJDK bug I just created. It has the internal review ID 9076545. As soon as the bug is accepted and visible in the public JDK bug database, I will add a link here.

https://bugs.openjdk.org/browse/JDK-8325536","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns5zW2Ni/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/279,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/279,aspectj,2121701010,279,LTW sometimes does not work with jboss-modules class loader and around advice,urisimchoni,10113228,Uri Simchoni,,CLOSED,2024-02-06T21:32:45Z,2024-02-08T05:17:57Z,"When trying to apply LTW to DataSource classes on WildFly application server, we see that sometimes weaving silently fails. The two ""ingredients"" for this to happen appear to be:
* More than one datasource of the same driver exists, and
* Using an Around advice on DataSource method

Enabling debugging and weaveInfo shows that the advice is applied, yet the actual advice code does not run, as if weaving did not occur.

After some digging, the root cause appears to be as follows:
* WildFly is using jboss-modules class loading system, which loads classes using org.jboss.modules.ModuleClassLoader class.
* ModuleClassLoader does not lock anything while loading classes. It could very well call defineClass() to load the same class into the same class loader in two threads in parallel. Obviously one of the calls would fail in that case, but it recovers from this.
* With two DataSource instances present, WildFly sets them up in two executor jobs that can run in parallel on different threads, hence causing defineClass() to be called on the DataSource class twice in parallel.
* While defineClass() runs, AspectJ LTW agent is invoked to retransform the loaded class - so in our case it's invoked twice in parallel on the same weaver instance.
* Usually, AspectJ has no problem weaving the class ""twice"", meaning that in each weaving operation AspectJ is receiving the original class bytes and is returning the modified class bytes, and it doesn't care how many times it happens or what happens in other threads.
* However, with Around advice, an inner class is being created. AspectJ would not want to create the inner class twice.
* So AspectJ has a mechanism to guard against weaving a class with an associated generated class twice on the same weaver.
* The bug is that when such a ""collision"" is detected, AspectJ avoids weaving again (to avoid creating the generated class), but is returning the _original_ class bytes and not the woven bytes.
* Because all this is running in parallel in two threads, sometimes the thread that got to weave the class second (and therefore is seeing not-woven class) makes it first to installing the class in the ClassLoader, and so this un-woven class ""wins"".

Tested on versions 29 and 30 with several Java-17 distributions on Linux.

A reproducer project with a mock class loader can be found here: https://gitlab.com/urisimchoni/aspectj-parallel-issue
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,aspectj,2156249372,285,NPE when using LTW cache,KimmingLau,49543702,Kimming Lau,294001791@qq.com,CLOSED,2024-02-27T10:37:46Z,2024-03-13T07:55:58Z,"[ltw-npe-reproducer.zip](https://github.com/eclipse-aspectj/aspectj/files/14418122/ltw-npe-reproducer.zip)
step to reproduce: 
1. `unzip ltw-npe-reproducer.zip`  
2. `mvn clean package`  
3. `cd target; unzip ltw-npe-reproducer-1.0-SNAPSHOT-zip.zip`
4. `java -javaagent:aspectjweaver-1.9.21.1.jar -Daj.weaving.cache.enabled=true -Daj.weaving.cache.impl=shared  -cp ltw-npe-reproducer-1.0-SNAPSHOT.jar com.foo.bar.Demo`","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51Ms6x,aspectj,1966263985,285,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-27T10:40:32Z,2024-02-27T10:40:32Z,"`java.lang.NullPointerException: Cannot read the array length because ""b"" is null
        at java.base/java.io.FileOutputStream.write(FileOutputStream.java:346)
        at org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap.writeToPath(SimpleCache.java:256)
        at org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap.put(SimpleCache.java:194)
        at java.base/java.util.Collections$SynchronizedMap.put(Collections.java:2896)
        at org.aspectj.weaver.tools.cache.SimpleCache.put(SimpleCache.java:104)
        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:126)
        at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:51)
        at java.instrument/java.lang.instrument.ClassFileTransformer.transform(ClassFileTransformer.java:244)
        at java.instrument/sun.instrument.TransformerManager.transform(TransformerManager.java:188)
        at java.instrument/sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:610)
        at java.base/java.lang.ClassLoader.defineClass1(Native Method)
        at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1027)
        at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
        at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:862)
        at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
        at java.base/java.lang.Class.forName0(Native Method)
        at java.base/java.lang.Class.forName(Class.java:534)
        at java.base/java.lang.Class.forName(Class.java:513)
        at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:797)
        at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:692)`","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51Ms6x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51Mtdc,aspectj,1966266204,285,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-02-27T10:41:42Z,2024-02-27T10:41:42Z,Due to code changes in #280 ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51Mtdc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51TRn0,aspectj,1967987188,285,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-02-28T00:52:38Z,2024-02-28T00:52:38Z,"Thanks. I am taking this seriously, but will be very busy with work and intercontinental travel for a few days. So please, forgive me if I get to this later than I actually want to. (I hate regression bugs!)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51TRn0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tTON,aspectj,1974809485,285,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-02T14:25:26Z,2024-03-02T14:25:26Z,"@KimmingLau Can you please test `1.9.22-SNAPSHOT` from this repository? Thank you.

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tTON/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51wFPM,aspectj,1975538636,285,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-03-04T02:21:22Z,2024-03-04T02:21:22Z,"Apreciate to do that, but actually I am confused that if `SimpleCache#getAndInitialize()` return null, how to distinguish between no cache and cache which indicate that the class no need to be woven? That's why I used Optional to express three possible returns from `getAndInitialize()` method.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51wFPM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xPTy,aspectj,1975842034,285,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-04T06:46:11Z,2024-03-04T06:46:11Z,"You got a point there. My focus was to fix your problem, not to add an additional optimisation, given the fact that the problem solved was introduced in an optimisation step doing more than solving the problem you raised before about CDS archives. So, I was more conservative here.

Your PR did not communicate its intent by additional tests for these cases, and my simple fix also did not break any existing tests. So I thought, it was enough. Your point seems to be that the weaver is triggered, even though maybe there are unwoven classes in the cache already, testing again if they need to be woven. Am I understanding you correctly here? Please explain the rationale in more detail. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xPTy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xhQz,aspectj,1975915571,285,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-03-04T07:47:44Z,2024-03-04T07:47:44Z,"> Your point seems to be that the weaver is triggered, even though maybe there are unwoven classes in the cache already, testing again if they need to be woven  

  Yes, that's my point. In the old version `getAndInitialize()` would return the original bytes for class that no need to be woven (which cache bytes are SAME_BYTES), this means the weaving process would not be triggered again. But now it return null in that case, means weaver would be triggered.  

  I feel like the behavior here seems to be different from before. Forgive me for not being very good at English and not being able to express what I mean very well.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xhQz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51yfjT,aspectj,1976170707,285,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-04T09:52:27Z,2024-03-04T09:52:27Z,"I cherry-picked your commits, squashed them into one and modified them a little bit, also adding more tests. See 1f1d429752. Thanks for your valuable contribution and reviewing my own commit.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51yfjT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/285,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51yo03,aspectj,1976208695,285,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-03-04T10:04:44Z,2024-03-04T10:04:44Z,"Thanks for the review and approval, especially the additional testing code. It's my honor to contribute to such an excellent project.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51yo03/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,aspectj,2163745375,288,Inheritable thread-local closure stack in JoinPointImpl causing memory leak in spawned threads (e.g. thread pool),pagrawalgit,161651016,,,CLOSED,2024-03-01T16:27:14Z,2024-03-13T09:52:40Z,"A few of our company production services saw an increase in HeapAfterGCUse metric after upgrading aspectJ from 1.8.14 to 1.9.9.1. We also tried upgrading to aspectj 1.9.21.1 but we are seeing the same behavior. The increase was significant for one of our services 7GB increase (32GB total heap size).

Upon investigation the team found the increase to be related to the AspectJ [commit](https://github.com/eclipse-aspectj/aspectj/commit/3c80a365273b39c299cfdbc80c194cb9508e91a4) which causes AjcClosure objects to retain in heap memory in some scenarios.

For the impacted services, following conditions hold true.

1. You have a method with 2 or more aspect annotations (regardless of what the aspect annotations are).
2. You spawn a new thread after you enter the method (either from the method itself or somewhere later as part of the call stack).
3. The spawned thread is long lived (for e.g. a thread in a Threadpool).

The heap dump showed increase in (retained) AjcClosure objects referenced by Thread objects in inheritableThreadLocals. We came across [this](https://github.com/eclipse-aspectj/aspectj/issues/128) aspectJ commit which introduced InheritableThreadLocalAroundClosureStack.

We do not see this (heap memory increase) issue with 1.9.8 aspectJ version. 

Code imitating our use case (also reproduces the issue):

As you can see below, Demo class spawns a new thread inline. In our use case, joinPoint.proceed() call is NOT async. We use a long living thread in a threadpool which is used to run the inline submitted thread by Demo class. 

The Demo$AjcClosure classes (as part of the AroundClosure stack) are copied into inheritableThreadLocal of the **spawned** thread but never released (as seen in the attached heap snapshot)


```
package com.demoapp;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main {
    public static void main(String[] args) throws Exception {
        //Create a Threadpool
        final ExecutorService executorService = Executors.newFixedThreadPool(1);

        // Go through advice.
        final Demo demo = new Demo(executorService);
        demo.doSomething();

        System.gc(); // Best effort GC
        Thread.sleep(500000); // Sleep to take a Heap dump
    }
}
```

```
package com.demoapp;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

/**
 * Demo class which has a method with 2 aspect annotations. This method also spawns a new Thread.
 * This Thread will copy inheritableThreadLocal value and leak memory.
 */
public class Demo {
    final ExecutorService taskManager;

    /**
     * Constructor.
     *
     * @param executorService - ExecutorService to spawn a new Thread.
     */
    public Demo(final ExecutorService executorService) {
        this.taskManager = executorService;
    }

    /**
     * Method surrounded to spown a new Thread.
     */
    @DemoAspect1.DemoAnnotation1
    @DemoAspect2.DemoAnnotation2
    public void doSomething() throws ExecutionException, InterruptedException {
        final Future future = taskManager.submit(() -> {
            System.out.println(""Hello"");
        });
        future.get();
    }
}
```

```
package com.demoapp;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class DemoAspect1 {

    public DemoAspect1() {
    }

    @Around(""execution(* *(..)) && @annotation(DemoAspect1.DemoAnnotation1)"")
    public Object doAround(ProceedingJoinPoint jointPoint) throws Throwable {
        System.out.println(""DemoAspect1.doAround"");
        return jointPoint.proceed();
    }

    public @interface DemoAnnotation1 {
    }
}
```

```
package com.demoapp;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class DemoAspect2 {
    public DemoAspect2() {
    }

    @Around(""execution(* *(..)) && @annotation(DemoAspect2.DemoAnnotation2)"")
    public Object doAround(ProceedingJoinPoint jointPoint) throws Throwable {
        System.out.println(""DemoAspect2.doAround"");
        return jointPoint.proceed();
    }

    public @interface DemoAnnotation2 {
    }
}
```


# Heap Dump (after Full GC)

<img width=""853"" alt=""Screenshot 2024-02-27 at 3 35 43 PM"" src=""https://github.com/eclipse-aspectj/aspectj/assets/161651016/7c0f740e-e1c4-42fc-aee2-d3d436b031c0"">

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tTAK,aspectj,1974808586,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-02T14:21:36Z,2024-03-02T14:21:36Z,"I made an experimental fix, but I did not find a good way to test this automatically yet. Even for manual tests, there is no easy way. Therefore, I need feedback from you. Please try the latest `1.9.22-SNAPSHOT` (even though probably it is rather going to be in a 1.9.21.2 release, if it works) from this repository:

```xml
<repositories>
    <repository>
        <id>ossrh-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases>
            <enabled>false</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
</repositories>
```

If you or your colleagues can provide a better way to test this, please let me know. I do not have enough free cycles to play with this as long as I would like to.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tTAK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tVk1,aspectj,1974819125,288,NA,pagrawalgit,161651016,,,NA,2024-03-02T14:43:39Z,2024-03-02T14:43:39Z,Thanks @kriegaex for such a quick response and fix. I'll test it today and get back to you. Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tVk1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tZtz,aspectj,1974836083,288,NA,pagrawalgit,161651016,,,NA,2024-03-02T15:55:17Z,2024-03-02T15:55:17Z,"@kriegaex I quickly tested the fix but it does not fix our issue.

<img width=""865"" alt=""Screenshot 2024-03-02 at 10 53 53 AM"" src=""https://github.com/eclipse-aspectj/aspectj/assets/161651016/72b3ac48-7f0b-46cc-b295-7dee8e8e2d96"">

The change that you made would only clear the Stack for the spawning thread but the spawned thread would still hold the copied stack right?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tZtz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tnP1,aspectj,1974891509,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-02T19:47:48Z,2024-03-02T19:47:48Z,"You said, the problem occurs independent of number of threads. I did not have much time for looking into this. I would really appreciate a failing test which would pass with a correct fix in place. So, please provide one or multiple automated tests. Thanks in advance. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tnP1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tnsH,aspectj,1974893319,288,NA,pagrawalgit,161651016,,,NA,2024-03-02T19:56:42Z,2024-03-02T19:56:42Z,"@kriegaex I'll try to write one. Just to be clear, the problem for us is the spawned (spawned from the threadpool) thread holding up the memory in inhertiableThreadLocal.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51tnsH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uTXz,aspectj,1975072243,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-03T07:25:41Z,2024-03-03T07:25:41Z,"Thank you, @pagrawalgit. Whatever I do when running your program with AspectJ 1.9.21.1 on JDK 21 or 1.9.9.1 on JDK 8, in my memory dumps the threads all have `inheritableThreadLocals` values of `null`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uTXz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uW0i,aspectj,1975086370,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-03T08:32:20Z,2024-03-03T08:32:20Z,One more question: Are you using compile-time or load-time weaving? I am trying to reproduce your problem with CTW.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uW0i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51ukA2,aspectj,1975140406,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-03T12:13:02Z,2024-03-03T12:13:02Z,"> Thank you, @pagrawalgit. Whatever I do when running your program with AspectJ 1.9.21.1 on JDK 21 or 1.9.9.1 on JDK 8, in my memory dumps the threads all have `inheritableThreadLocals` values of `null`.

OK, the around advices were inlined automatically in your simple example with default compiler options. I had to use `-XnoInline` to get the relevant method `JoinPointImpl::stack$AroundClosure` called at all. But now, at least I can see the effect you described in the memory dumps. That is a start.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51ukA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uuJP,aspectj,1975181903,288,NA,pagrawalgit,161651016,,,NA,2024-03-03T14:30:32Z,2024-03-03T14:30:32Z,"Thanks @kriegaex . I should have mentioned this earlier, we are using load time weaving. I'll post code with automated tests this afternoon EST.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uuJP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uynE,aspectj,1975200196,288,NA,pagrawalgit,161651016,,,NA,2024-03-03T15:38:03Z,2024-03-03T15:38:03Z,"@kriegaex 

I am using JDK17. I ran tests using IntelliJ with junit 5. I am assuming <=8GB (xmx) of java heap memory allocated in one of the tests.

Command used for LTW:
```text
-ea
-Dorg.aspectj.weaver.loadtime.configuration=META-INF/aop.xml
--add-opens=java.base/java.lang=ALL-UNNAMED
-javaagent:[PATH_TO_ASPECTJWEAVER]
```

*Note: These are a couple of quick and dirty tests I wrote. Both of these pass with 1.9.8 and fail with later versions. If it makes it easier I can push the code to a git repo.*

**Class DemoAspect1 and DemoAspect2 are unchanged. I deleted the Main class.**

```java
package com.demoapp;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

/**
 * Demo class which has a method with 2 aspect annotations. This method also spawns a new Thread.
 * This Thread will copy inheritableThreadLocal value and leak memory.
 */
public class Demo {
    final ExecutorService taskManager;
    final byte[] someBigData = new byte[1024 * 1024 *1024]; //1GB worth of data.

    /**
     * Constructor.
     *
     * @param executorService - ExecutorService to spawn a new Thread.
     */
    public Demo(final ExecutorService executorService) {
        this.taskManager = executorService;
    }

    /**
     * Method surrounded to spown a new Thread.
     */
    @DemoAspect1.DemoAnnotation1
    @DemoAspect2.DemoAnnotation2
    public void doSomething() throws ExecutionException, InterruptedException {
        final Future future = taskManager.submit(() -> {
            System.out.println(""Hello"");
        });
        future.get();
    }
}
```

```java
import com.demoapp.Demo;
import org.junit.jupiter.api.Assertions;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class TestMemoryLeak {

    /**
     *
     * @param executorServiceList - list of threadpools.
     *
     */
    private void testAspectJLeak(final List<ExecutorService> executorServiceList) throws Exception {
        //Create a Threadpool list to keep the Threads alive until completion.

        for (int i = 0; i < executorServiceList.size() ; i++) {
            final Demo demo = new Demo(executorServiceList.get(i));
            demo.doSomething();
        }

        System.gc(); // Best effort GC
        //Thread.sleep(500000); // Sleep to take a Heap dump
        System.out.println(""Done"");
    }

    /**
     *
     * Tests that the inheritableThreadLocals of the spawned threads are either null or contain all null elements.
     */
    @org.junit.jupiter.api.Test
    public void testNoMemoryLeak_InheritableThreadLocalCleared() throws Exception {
        final int numThreadPools = 1;
        // Create a new threadpool for every thread to be spawned, to make sure that the threads gets
        // initialized for the first time. This allows the spawned thread to copy data into inheritableThreadLocals.
        final List<ExecutorService> executorServiceList = getThreadPools(numThreadPools);
        //run test
        testAspectJLeak(executorServiceList);

        // Verify if the spawned threads have null inheritableThreadLocals after completion.
        final Set<Thread> threads  = Thread.getAllStackTraces().keySet();

        threads.stream()
                // Could further disambiguate by adding custom thread naming.
                .filter(thread -> thread.getName().contains(""pool""))
                .forEach(thread -> {
                    try {
                        final Field mapField = Thread.class.getDeclaredField(""inheritableThreadLocals"");
                        mapField.setAccessible(true);
                        final Object o = mapField.get(thread);

                        if (o != null) {
                            final Field tableField = o.getClass().getDeclaredField(""table"");
                            tableField.setAccessible(true);

                            final Object[] inheritableThreadLocalTable = (Object[]) tableField.get(o);
                            if (inheritableThreadLocalTable != null) {
                                for (Object entry : inheritableThreadLocalTable) {
                                    // every entry should be null.
                                    Assertions.assertNull(entry);
                                }
                            }
                        }
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                });

        System.out.println(""Test passed"");
    }

    /**
     *
     * Spawns 10 threads in separate threadpools to make sure each thread when spawned gets initialized for
     * the first time and allocates new inheritableThreadLocals memory.
     *
     * Since each thread will hold up memory (memory leak case), the program will run of memory.
     *
     * The fix would eliminate OOM.
     */
    @org.junit.jupiter.api.Test
    public void testNoMemoryLeak_SystemShouldNotRunOutOfMemory() throws Exception{
        final int numThreadPools = 10;
        final List<ExecutorService> executorServiceList = getThreadPools(numThreadPools);
        testAspectJLeak(executorServiceList);
        System.out.println(""Test passed"");
    }

    /**
     * Creates 1 thread per Threadpool.
     *
     * @param numThreadPools - Number of threadpools to create.
     *
     */
    private List<ExecutorService> getThreadPools(int numThreadPools) {
        final List<ExecutorService> executorServiceList = new ArrayList<>();
        for (int i = 0 ; i < numThreadPools; i++) {
            // Could further disambiguate by adding custom thread naming.
            executorServiceList.add(Executors.newFixedThreadPool(1));
        }
        return executorServiceList;
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51uynE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xSSH,aspectj,1975854215,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-04T06:57:31Z,2024-03-04T06:57:31Z,"> ```java
> final Field mapField = Thread.class.getDeclaredField(""inheritableThreadLocals"");
> mapField.setAccessible(true);
> final Object o = mapField.get(thread);
> ```

This looks quasi identical to the code I was using in my own impromptu test code. 😉 Like I said, where I was stuck until yesterday was that I could not reproduce the problem with CTW, but now I can with the additional compiler switch.

Your test code comes in handy, and I guess that at least part of it might end up in the AspectJ test bed, after I have an idea how to fix the problem. Currently, I do not, but I am also busy with non-AspectJ matters.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns51xSSH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns511HMW,aspectj,1976857366,288,NA,pagrawalgit,161651016,,,NA,2024-03-04T15:34:28Z,2024-03-04T15:34:28Z,Thanks @kriegaex ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns511HMW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns516z_y,aspectj,1978351602,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-05T09:47:40Z,2024-03-05T09:47:40Z,"I still do not have any good idea how to fix this, because non-inlined annotation-style aspects do need to keep around-closure information due to the possibility of multiple proceed calls in the same advice or proceed happening in a spawned thread. For native syntax aspects, it works differently, because the AspectJ compiler generates advice methods that directly take closures as parameters, while annotation-style advices either have no parameters or a proceeding join point instance. I.e., in this case the around closures must be bound and unbound manually. As AspectJ has no way of knowing if a long-lived thread might eventually issue a proceed call and therefore need the closure information, we cannot just discard it.

I could revert 3c80a36527, but then asynchronous nested proceeds would fail to work again. Currently, it looks like a choice between the plague and cholera, as we say in German.

The suggested solution for now is to simply use native syntax aspects and the AspectJ compiler to compile them. Something like this:

```java
public aspect DemoAspect2Native {
  Object around() : execution(* *(..)) && @annotation(DemoAnnotation2) {
    System.out.println(""DemoAspect2Native around"");
    return proceed();
  }

  public @interface DemoAnnotation2 {}
}
```

Then, your problem should go away. I tried with your out-of-memory test, and it passes.

I am keeping this issue open. BTW, it is related to #141. If I have an idea how to solve that one, probably this one would also be solved.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns516z_y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52A7ZM,aspectj,1979954764,288,NA,pagrawalgit,161651016,,,NA,2024-03-06T02:14:35Z,2024-03-06T02:14:35Z,I'll read up on native syntax aspects vs non-inlined annotation-style aspects.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52A7ZM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52CWuq,aspectj,1980328874,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-06T08:30:03Z,2024-03-06T08:30:03Z,"I have just deployed an alternative experimental fix to the snapshot repository. It makes your tests pass and also seems to fix #141 in one shot. The strategy is to use a list instead of a stack and never to pop any around closure elements from it. But at least, it is not thread-local. Instead, what is thread-local is an index for the current element, i.e. what leaks now are only integer values and the stack of around closures, until the joinpoint instance goes out of scope, which I guess is fine. It is not perfect, but hopefully better than the status quo. Please re-test. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52CWuq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F3rv,aspectj,1981250287,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-06T16:19:44Z,2024-03-06T16:19:44Z,"Force-pushed regression tests without fix. I want to see them fail in [this CI build](https://github.com/eclipse-aspectj/aspectj/actions/runs/8175237560) first before pushing the fix on top of them.

Thanks to @pagrawalgit for the code contribution. I adapted the test to instead of a JUnit test, because that better fits the AspectJ integration test structure, but both test cases are basically what you suggested.

---

**Update:** The two regression tests expected to fail actually do fail. Fine. 👍 ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F3rv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F35h,aspectj,1981251169,288,NA,pagrawalgit,161651016,,,NA,2024-03-06T16:20:13Z,2024-03-06T16:20:13Z,Thanks @kriegaex. I'll test this today.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F35h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F6zK,aspectj,1981263050,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-06T16:25:56Z,2024-03-06T16:25:56Z,"[This CI build](https://github.com/eclipse-aspectj/aspectj/actions/runs/8175351748) contains the fix. All tests should pass for it. If they do, I will deploy another snapshot, and if it also works for @pagrawalgit in his application, I can merge it.

---

**Update:** That build passed, including the reactivated test for #141. The fix seems to be a substantial improvement and fix two problems in one shot.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52F6zK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52GJbz,aspectj,1981322995,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-06T16:47:27Z,2024-03-06T16:47:27Z,"If you want to test, I just deployed commit 4414b42e3d with the polished fix.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52GJbz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52NU85,aspectj,1983205177,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-07T10:26:16Z,2024-03-07T10:26:16Z,"@pagrawalgit, sorry for pushing this, but my time window for creating an AspectJ maintenance release is closing. Soon, I will be busy with non-AspectJ stuff again. I would like this to be in, but not without your team's re-test feedback.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52NU85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52PVzL,aspectj,1983732939,288,NA,pagrawalgit,161651016,,,NA,2024-03-07T15:16:37Z,2024-03-07T15:16:37Z,"@kriegaex I tested it locally with the demo application I have. The tests pass.

Testing with the actual service will take me a day or two. Feel free to push the commit. Thanks for getting this out so quickly.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52PVzL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52fmAi,aspectj,1987993634,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-11T09:42:27Z,2024-03-11T09:42:27Z,@pagrawalgit: ping!,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52fmAi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52mYJw,aspectj,1989771888,288,NA,pagrawalgit,161651016,,,NA,2024-03-12T01:52:52Z,2024-03-12T01:52:52Z,It works!! ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52mYJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52v_fx,aspectj,1992292337,288,NA,pagrawalgit,161651016,,,NA,2024-03-12T18:25:40Z,2024-03-12T18:25:40Z,"@kriegaex  Thanks for the commit. So, the fix would be part of [1.9.21.2](https://github.com/eclipse-aspectj/aspectj/milestone/11?closed=1) release? When are you planning to release it?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns52v_fx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/288,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns522cpt,aspectj,1993984621,288,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-13T09:52:39Z,2024-03-13T09:52:39Z,"@pagrawalgit, AspectJ 1.9.21.2 has been released today.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns522cpt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/290,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/290,aspectj,2164732987,290,Cleanup build tooling and avoid in-repo binaries under test,lefou,1321393,Tobias Roeser,,OPEN,2024-03-02T09:40:32Z,2024-03-02T09:41:00Z,"There are some binaries checked-in which can easily get out of date resulting in potential misleading test results. Those may result in regressions like #285.

@kriegaex posted in https://github.com/eclipse-aspectj/aspectj/pull/289#discussion_r1509933676

> I am aware of that. I am simply in a tight spot concerning the time at my disposal. The actual problem is that this stuff was ever checked into the SCM in the first place. I eliminated lots of these relics already since I joined the project. These are a bit difficult, because the tests run before the main AspectJ build artifacts (runtime, matcher, weaver, tools) are being built, i.e. we have a circular dependency there. In the future, I will rather spend time fixing the root cause than automating the workaround.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/290/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,aspectj,2186925637,292,In-process compilation with less than minimal JRE version does not fail after printing warning,philippe-granet,5667657,Philippe GRANET,,CLOSED,2024-03-14T17:41:40Z,2024-03-15T09:42:54Z,"When using https://github.com/mojohaus/aspectj-maven-plugin with an invalid JRE version, aspectj silently return without any error in `MessageHolder`:
https://github.com/eclipse-aspectj/aspectj/blob/d27943749cc35864ff4565a444b21851915307ab/org.aspectj.ajdt.core/src/main/java/org/aspectj/tools/ajc/Main.java#L247-L251

In maven logs:
```
[INFO] --- aspectj:1.15.0:compile (default) @ my-project ---
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
The AspectJ compiler needs at least Java runtime 17
[INFO] --- resources:3.3.1:testResources (default-testResources) @ my-project ---
[INFO] 
...
```
-> build continue and not failing","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53F7qd,aspectj,1998043805,292,NA,philippe-granet,5667657,Philippe GRANET,,NA,2024-03-14T18:07:20Z,2024-03-14T18:07:20Z,MR proposed: https://github.com/eclipse-aspectj/aspectj/pull/293,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53F7qd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53J_gQ,aspectj,1999108112,292,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-15T07:50:35Z,2024-03-15T07:50:35Z,"Thanks for the PR, @philippe-granet. I will review and possibly merge it, with or without modification.

Note to myself: The actual problem is that AJ Maven does not fork but runs AJC in-process, i.e. the exit code -1 which would signal an error is not there in that situation. Before introducing the warning, AJC would just try to start compilation and run into an exception thrown by the JVM due to unknown class file versions or by JDT Core due to missing constants there, whichever would occur first depending on the AspectJ version. By trying to print a more comprehensive error message instead of throwing an exception, AspectJ lost the ability to signal the fatal error in the in-process situation, which I think is what really needs to be fixed. Logging a compiler error instead as proposed here feels wrong, because there was no compilation attempt in the first place. A good old exception like before, just with a clear error message, might be not just the simplest but also the best course of action.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53J_gQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53KL9u,aspectj,1999159150,292,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-15T08:28:44Z,2024-03-15T08:28:44Z,"@philippe-granet, while writing the note to myself - a technique I sometimes use when there is no other ""rubber duck"" to talk to - I realised that I actually prefer to throw an exception, if the minimum JRE requirement is unmet, which is why I created another PR superseding yours.

Having said that, I am still impressed that you created your own PR and managed to get it done with the complex message handling approach. By all means, feel encouraged to contribute more to AspectJ. Your PRs are always welcome, even though this particular one ended up unmerged. But I hope that my alternative fix also works for you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53KL9u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/292,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53Kold,aspectj,1999276381,292,NA,philippe-granet,5667657,Philippe GRANET,,NA,2024-03-15T09:38:52Z,2024-03-15T09:38:52Z,"> But I hope that my alternative fix also works for you.

Yes your alternative is OK for me, thanks!
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53Kold/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/296,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/296,aspectj,2191542864,296,After upgrade to Eclipse 2024-03 AspectJ project stopped compiling under Eclipse :[...]IncompatibleClassChangeError: class [...]AspectJMemberElement overrides final method [...]JavaElement.hashCode()I,daniel-matheis-vivavis,117902694,Daniel Matheis @ VIVAVIS,,CLOSED,2024-03-18T08:35:10Z,2024-03-18T09:13:35Z,"we are affected also by this bug reported here by Dmitry Gorodnitsky on the (deprecated!?) but reporting site https://bugs.eclipse.org/bugs/show_bug.cgi?id=583033
To have quick fixing possible I am cross-linking it to here.

Stacktrace:

```
eclipse.buildId=4.31.0.I20240229-0520
java.version=21.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=de_DE
Command-line arguments:  -os win32 -ws win32 -arch x86_64

This is a continuation of log file D:\workspaces\hlen-dev\.metadata\.bak_0.log
Created Time: 2024-03-18 09:23:29.664

org.eclipse.contribution.weaving.jdt
Error
Mon Mar 18 09:50:28 CET 2024
class org.eclipse.ajdt.core.javaelements.AspectJMemberElement overrides final method org.eclipse.jdt.internal.core.JavaElement.hashCode()I

java.lang.IncompatibleClassChangeError: class org.eclipse.ajdt.core.javaelements.AspectJMemberElement overrides final method org.eclipse.jdt.internal.core.JavaElement.hashCode()I
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1027)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.defineClass(ModuleClassLoader.java:293)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.defineClass(ClasspathManager.java:774)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findClassImpl(ClasspathManager.java:691)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClassImpl(ClasspathManager.java:657)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClassImpl(ClasspathManager.java:637)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:616)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:348)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:414)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:520)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:434)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:174)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1027)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.defineClass(ModuleClassLoader.java:293)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.defineClass(ClasspathManager.java:774)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findClassImpl(ClasspathManager.java:691)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClassImpl(ClasspathManager.java:657)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClassImpl(ClasspathManager.java:637)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:616)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:348)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:414)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:520)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:434)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:174)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnitProvider.create(AJCompilationUnitProvider.java:11)
	at org.eclipse.jdt.internal.core.PackageFragment.init$_aroundBody5$advice(PackageFragment.java:50)
	at org.eclipse.jdt.internal.core.PackageFragment.getCompilationUnit(PackageFragment.java:296)
	at org.eclipse.jdt.internal.core.JavaModelManager.createCompilationUnitFrom(JavaModelManager.java:1156)
	at org.eclipse.jdt.internal.core.JavaModelManager.create(JavaModelManager.java:1062)
	at org.eclipse.jdt.core.JavaCore.create(JavaCore.java:3750)
	at org.sonarlint.eclipse.jdt.internal.JdtUtils.shouldExclude(JdtUtils.java:71)
	at org.sonarlint.eclipse.jdt.internal.JavaProjectConfiguratorExtension.exclude(JavaProjectConfiguratorExtension.java:97)
	at org.sonarlint.eclipse.core.internal.adapter.DefaultSonarLintAdapterFactory.getFileAdapter(DefaultSonarLintAdapterFactory.java:110)
	at org.sonarlint.eclipse.core.internal.adapter.DefaultSonarLintAdapterFactory.getAdapter(DefaultSonarLintAdapterFactory.java:55)
	at org.eclipse.core.internal.runtime.AdapterManager.lambda$13(AdapterManager.java:316)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1685)
	at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)
	at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)
	at org.eclipse.core.internal.runtime.AdapterManager.getAdapter(AdapterManager.java:318)
	at org.eclipse.core.internal.runtime.AdapterManager.loadAdapter(AdapterManager.java:342)
	at org.eclipse.core.runtime.Adapters.queryAdapterManager(Adapters.java:150)
	at org.eclipse.core.runtime.Adapters.adapt(Adapters.java:86)
	at org.eclipse.core.runtime.Adapters.adapt(Adapters.java:115)
	at org.sonarlint.eclipse.ui.internal.SonarLintPostBuildListener.visitDelta(SonarLintPostBuildListener.java:131)
	at org.sonarlint.eclipse.ui.internal.SonarLintPostBuildListener.lambda$0(SonarLintPostBuildListener.java:60)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:77)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:87)
	at org.eclipse.core.internal.events.ResourceDelta.accept(ResourceDelta.java:61)
	at org.sonarlint.eclipse.ui.internal.SonarLintPostBuildListener.resourceChanged(SonarLintPostBuildListener.java:60)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:321)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:311)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:174)
	at org.eclipse.core.internal.resources.Workspace.broadcastBuildEvent(Workspace.java:444)
	at org.eclipse.core.internal.resources.Workspace.buildInternal(Workspace.java:608)
	at org.eclipse.core.internal.resources.Workspace.build(Workspace.java:483)
	at org.eclipse.ui.internal.ide.dialogs.CleanDialog.doClean(CleanDialog.java:355)
	at org.eclipse.ui.internal.ide.dialogs.CleanDialog$1.runInWorkspace(CleanDialog.java:159)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:43)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)


```
And probably related stacktrace:
```
eclipse.buildId=4.31.0.I20240229-0520
java.version=21.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=de_DE
Command-line arguments:  -os win32 -ws win32 -arch x86_64

This is a continuation of log file D:\workspaces\hlen-dev\.metadata\.bak_0.log
Created Time: 2024-03-18 09:23:29.664

org.eclipse.ajdt.ui
Error
Mon Mar 18 09:27:58 CET 2024
Compile error: ClassCastException thrown: class org.eclipse.jdt.internal.core.JavaNature cannot be cast to class org.eclipse.jdt.internal.core.JavaProject (org.eclipse.jdt.internal.core.JavaNature and org.eclipse.jdt.internal.core.JavaProject are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @3f51b3ff)

java.lang.ClassCastException: class org.eclipse.jdt.internal.core.JavaNature cannot be cast to class org.eclipse.jdt.internal.core.JavaProject (org.eclipse.jdt.internal.core.JavaNature and org.eclipse.jdt.internal.core.JavaProject are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @3f51b3ff)
	at org.eclipse.ajdt.internal.core.ajde.CoreCompilerConfiguration.getJavaOptionsMap(CoreCompilerConfiguration.java:102)
	at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.generateAjBuildConfig(AjdeCoreBuildManager.java:325)
	at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:101)
	at org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:91)
	at org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:253)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:1077)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:296)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:352)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:441)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:444)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:555)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:503)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:585)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:207)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:300)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
```

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/296/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/296,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53Z5He,aspectj,2003276254,296,NA,daniel-matheis-vivavis,117902694,Daniel Matheis @ VIVAVIS,,NA,2024-03-18T09:12:52Z,2024-03-18T09:12:52Z,duplicates https://github.com/eclipse-aspectj/ajdt/issues/49,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns53Z5He/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/297,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/297,aspectj,2196921722,297,Java 22 support and release 1.9.22,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2024-03-20T08:16:16Z,2024-03-24T08:03:33Z,"Java 22 was released yesterday, 2024-03-19. As soon as Eclipse JDT Core has merged the beta 22 branch into its main branch, start merging from there into AspectJ JDT Core, from there into AspectJ and from there into AJDT, which hopefully helps to fix https://github.com/eclipse-aspectj/ajdt/issues/49.

Related JDT Core issues:
 * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/1397
 * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/2163
 * https://github.com/eclipse-jdt/eclipse.jdt.core/issues/2167

- [x] Refresh AspectJ JDT Core from Eclipse JDT Core, update dependencies, fix build issues \
      → merged in https://github.com/eclipse-jdt/eclipse.jdt.core/commit/b2705b00e91be7b06d36d75bdd6e052450991021
- [x] Use new AJ JDT Core in AspectJ, fix issues there
- [x] Upgrade `AspectJ_JDK_Update` places throughout the code base to Java 22
- [x] Create tests for Java 22
- [x] Refresh AspectJ libraries in AJDT
- [x] When everything works as expected in all 3 products, release/publish them:
  - [x] Release AspectJ JDT Core 1.9.22
  - [x] Release AspectJ 1.9.22
  - [x] Upload AspectJ installer into a new GitHub release
  - [x] Create Eclipse 2024-03 update site for AJDT and publish a build containing AspectJ 1.9.22 there. Add a link to the new update site to the [IDE guide](https://github.com/eclipse-aspectj/aspectj/blob/master/docs/developer/IDE.md#aspectj-development-tools-ajdt) .
  - [x] Update AspectJ documentation website
  - [x] Send release announcement e-mails to _aspectj-users_ and _aspectj-announce_","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/297/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/297,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54MphL,aspectj,2016581707,297,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-23T19:24:22Z,2024-03-23T19:24:22Z,AJDT update site creation currently blocked due to https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/4465.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54MphL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,aspectj,2212750600,299,Mention project root folder name requirement in README.md,StevanWhite,1576377,Steve White,,CLOSED,2024-03-28T09:30:38Z,2024-03-29T15:14:42Z,"The main README.md file gives the build instructions:

    In the root of a cloned AspectJ simply run
    shell
    ./mvnw clean install

This fails at ""testing-client"", after several minutes of furious output.

In the error messages, a complaint appears, about the ""AspectJ project root folder"" not being named like ""org.aspectj"".

It was not obvious to me what folder this root referred to.  I tried putting a folder within the main directory, named ""org.aspectj"".  I tried putting such a folder within the testing-client/ directory.  I tried putting it within the build/ folder, and launching mvn from within different directories.  The thought that the root directory might be the main distribution folder only occurred to me after an hour or so of failed builds.

SUGGESTION:

Give your users a clue in the README.md file, something like this:

    To build the project, re-name the main directory of the downloaded project ""org.aspectj"", 
    then cd into that directory and execute
    shell
    ./mvnw clean install
    

(BETTER: get rid of the name restriction altogether.)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r4OB,aspectj,2024768385,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-28T09:33:45Z,2024-03-28T09:33:45Z,"Thanks for your inquiry. I never clone and build from scratch, I have used the same directory for years, and it is named `AspectJ`, not `org.aspectj`. I.e., I know of no such restriction. Let me try this in a fresh install and find out what is wrong here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r4OB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r5N1,aspectj,2024772469,299,NA,StevanWhite,1576377,Steve White,,NA,2024-03-28T09:35:57Z,2024-03-28T09:35:57Z,"In fact, I downloaded the tarball.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r5N1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r5tr,aspectj,2024774507,299,NA,StevanWhite,1576377,Steve White,,NA,2024-03-28T09:37:07Z,2024-03-28T09:37:07Z,"Oh, and the error message makes clear, org.aspectj or Aspectj will do as well as directory names.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r5tr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r7fe,aspectj,2024781790,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-28T09:41:19Z,2024-03-28T09:41:19Z,"While my local build is running after the Git clone, may I ask why your wish to build AspectJ from scratch? It would be interesting to know, independently of the problem as such.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r7fe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r_Eg,aspectj,2024796448,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-28T09:49:45Z,2024-03-28T09:49:45Z,"Intermediate result: `./mvnw -DskipTests clean install` works nicely in a directry named `aspectj` or `foobar`. Next, I am going to run the build including tests. If that also works, maybe it is because my local Maven repository already contains artifacts I built previously. Either way, first I need to be able to reproduce the problem before I can (help you) fix it.

I wonder why the GitHub Actions CI builds, which always clone from scratch, work without problems but your build does not. Please attach a build log. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54r_Eg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sD74,aspectj,2024816376,299,NA,StevanWhite,1576377,Steve White,,NA,2024-03-28T09:59:43Z,2024-03-28T09:59:43Z,"First, I tried this on two different Linux systems from different distros, with the same result.

Second, I did not clone, I downloaded the tarball.  When the tarball is un-tarred, it does NOT name its directory ""AspectJ/"", but rather, ""aspectj-1_9_21_1/""

Please try that yourself.  If it still builds for you, I'll do it again here and attach the output.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sD74/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sLtZ,aspectj,2024848217,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-28T10:18:35Z,2024-03-28T10:18:35Z,"I did not use a tar ball, but simply renamed the project folder to `foobar`. It reproduces the problem, but that was harder than necessary. Please learn how to ask good questions and not just describe your problem and mention that there is an error, but also attach a build log, at least the relevant part. For the record:

```text
[INFO] Running org.aspectj.testing.server.TestServerTest
Unable to locate project root folder matching regex '(?i)(org[.])?aspectj' in C:\Users\alexa\Documents\java-src\_base\foobar\testing-client
Unable to locate project root folder matching regex '(?i)(org[.])?aspectj' in C:\Users\alexa\Documents\java-src\_base\foobar\testing-client
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.094 s <<< FAILURE! - in org.aspectj.testing.server.TestServerTest
[ERROR] testFindProjectRootDirectory(org.aspectj.testing.server.TestServerTest)  Time elapsed: 0.017 s  <<< FAILURE!
junit.framework.AssertionFailedError: Cannot find AspectJ project root folder. This will lead to subsequent failures in all tests using class TestServer. Please make sure to name your project root folder 'org.aspectj', 'AspectJ' or something else matching regex '(?i)(org[.])?aspectj'.
        at org.aspectj.testing.server.TestServerTest.testFindProjectRootDirectory(TestServerTest.java:41)
```

Background: When running integration tests, method `TestServer::findProjectRootFolder` walks up the directory hierarchy to heuristically find the root folder, looking for a folder name matching this regex:

https://github.com/eclipse-aspectj/aspectj/blob/49cb924f5402c9d24379ae1af62def6fa5892649/testing-client/src/main/java/org/aspectj/testing/server/TestServer.java#L33

https://github.com/eclipse-aspectj/aspectj/blob/49cb924f5402c9d24379ae1af62def6fa5892649/testing-client/src/main/java/org/aspectj/testing/server/TestServer.java#L117-L130

There is a test named `TestServerTest`, which checks that this requ9irement is fulfilled. If that test fails, it means that many other tests will fail too later on. It also tells you what to do. If you simply clone the project, which is what 90%+ of all developers wishing to build from scratch will do, because they can switch branches and tags, inspect the Git log etc., there will not be any problems, because `aspectj` will be the default name. Your special case of downloading a tar ball yields that problem, so thanks for brining up the issue. I will add a hint to the read-me concerning the naming restriction.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sLtZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sdbS,aspectj,2024920786,299,NA,StevanWhite,1576377,Steve White,,NA,2024-03-28T11:03:02Z,2024-03-28T11:03:02Z,"I will learn that in another life.  
I am an old developer, with more experience in these things than you ever want to have.

As a younger developer, you need to learn to think in terms of the needs of various users, system administrators, and packagers, whose experience will determine the success or failure of your projects.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54sdbS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54ttM_,aspectj,2025247551,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-28T13:55:31Z,2024-03-28T13:55:31Z,"Sorry, you just lost me. You will learn what in another life? To use a state-of-the-art SCM like Git which, by the way, has been around for 18 years? Sorry, I am not catering to the needs of so-called developers who think they can afford to work like 20 years ago. I taught myself programming maybe not as long ago as you, only in 1985, i.e. a humble 39 years ago, but for me it is part of the term ""software developer"" that we keep learning new things at least at a modest pace in order to stay relevant, instead of resting on our laurels and pointing at our respective track records or the lengths thereof.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns54ttM_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns541lLA,aspectj,2027311808,299,NA,StevanWhite,1576377,Steve White,,NA,2024-03-29T14:19:42Z,2024-03-29T14:19:42Z,"Git is primarily for developers.  It's great.

Other users, especially, packagers, and sysadmins might use the tarballs, as offered on your GitHub site.

In my case, I just did what seemed natural for my uses, and your package failed to build.
I was able to determine something about the trigger of the problem, and took the time to report it to you.

You responded by insulting me.  That is... very unfortunate, in several ways.
Some free advice: avoid insulting your bug reporters.  They can be valuable to you.

By the way, I'm a lot older than you are, and have been working in software development much longer.


","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns541lLA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/299,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns541ssL,aspectj,2027342603,299,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-03-29T14:48:45Z,2024-03-29T14:48:45Z,"> Git is primarily for developers.

No-one else but developers will ever need the AspectJ source code. No sysadmins and no packagers. Both binary and source packages are readily available on Maven Central, and anyone who needs the source code is a developer.

> You responded by insulting me.

False. I responded by:

  1. Thanking you for your inquiry.
  2. Asking you kindly what you need the AspectJ source code for any why you want to run the build, which you simply ignored. I still have no clue. Do you want to debug a problem? Create a PR? Learn something about byte code instrumentation? Develop an IDE plugin? Something else? I showed interest in your use case, you did not respond.
  3. Asking for build logs or parts thereof, which you also ignored.
  4. Taking the trouble to try and reproduce your problem without a build log, trying 3-4 different build setups. Had you mentioned the failing test, I would not have had to do that.
  5. Adding a hint according to your suggestion to the read-me the very same day you opened the issue, closing the issue. If that is not a fast and user-oriented response, I do not know what is.
  6. Dealing with your condescending response that you will learn Git ""in another life"", lecturing me about your decades-long development experience and giving it as an excuse not to use Git, which is kind of paradoxical.

It is not an insult to respond to (6) the way I did, trying to motivate you to learn Git basics, mentioning the advantages of a locally cloned repository. Nowhere did I insult you.

You are older than me, I got that. So what? At age 52 and with almost 40 years of programming experience under my belt, I am not exactly a newbie either. Why do you think you need to use your age or number of years of experience as a lame excuse for not using Git? Besides, I never said you must use Git. I just said that a tar ball is an unexpected way to interact with GitHub, but not a forbidden one. Hence, I added the usage hint to the read-me. You got what you wanted, and still you are whining and behaving in a hostile way. What the heck do you even want from me? Stand in awe, because you are my senior? I actually do not care if you have 1 or 101 years of programming experience. I would respect you just as much if you were a complete greenhorn. As developers, we are peers who love the same thing: programming. But if you cannot reciprocate and just be nice, but think you are entitled to lecture everyone with fewer than 50 years of programming experience, you are wrong and I am having none of it.

I am going to lock the conversation here. If you are feeling this is unfair and want to argue more, by all means feel free to contact and curse at me me privately. This issue here is resolved since yesterday, and nobody out there is interested in whether yours or mine is longer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns541ssL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/300,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/300,aspectj,2219060107,300,"This prevents the plugin from working with Java 11, is that intended ?",SamD,321576,Samuel Doyle,,CLOSED,2024-04-01T21:04:33Z,2024-04-02T07:25:05Z,"              This prevents the plugin from working with Java 11, is that intended ?

_Originally posted by @SamD in https://github.com/eclipse-aspectj/aspectj/issues/294#issuecomment-2030551436_
            ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/300/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/300,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55Eofh,aspectj,2031257569,300,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-02T07:25:05Z,2024-04-02T07:25:05Z,"I will answer your question in the comment. This is not a valid bug report or feature request, hence I am closing this issue.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55Eofh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,aspectj,2220385112,302,Potential ThreadLocalMap.Entry accumulation in JoinPointImpl,KimmingLau,49543702,Kimming Lau,294001791@qq.com,CLOSED,2024-04-02T12:23:48Z,2024-04-10T09:23:02Z,"   Our application is trying to upgrade aspectjweaver from 1.9.5 to 1.9.21.2 recently. But after upgradtion we found that memory usage in the old generation grows faster and FGC became more frequently, by the way we use jdk 1.8 and CMS+ParNew.  

   So we had made a heapdump and then found that the size of ThreadLocalMap in our application thread was much larger than before. And I've figured out that the value of growing entry in ThreadLocalMap is from field org.aspectj.runtime.reflect.JoinPointImpl#arcIndex. That's why I tried to review change histroy in JoinPointImpl and issue the following comments https://github.com/eclipse-aspectj/aspectj/commit/43df701a10a80306dd98da8644a9bbfbf5d17089#r140486566    

  Sorry for that I cannot provide more information about problem from which our application is suffering, such as monitor graph or heapdump file. I am trying to make a reproducer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55HQ_g,aspectj,2031947744,302,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-02T12:44:37Z,2024-04-02T12:44:37Z,"`JoinPointImpl.arcIndex` is a `ThreadLocal<Integer>`. It should consume minimal memory. How can it cause a noticeable memory leak? It should definitely be much, much better than the inheritable thread-local stack of around closures we had before. Of course, the list of around closures still exists, but it also has to, as nobody can predict which thread might need any entries from it at any given time.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55HQ_g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55NC8e,aspectj,2033463070,302,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-04-03T03:27:15Z,2024-04-03T03:27:15Z,"Just as what I mentioned in code comments, ThreadLocalMap.Entry is WeakReference. When the JoinPointImpl object is collected by GC, the Entry object is still remain. If the adviced method were called frequently, it would result in accumulation of a lot of Entry object. In our own application, we found tens of thousands of Entry per Thread,  which were almostly from JoinPointImpl.arcIndex.  

The life cycle of `ThreadLocal.Entry` here should be consistent with the JoinPointImpl object, so I think we should proactively call `ThreadLocal.remove()` after using `JoinPointImpl.arcIndex`.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55NC8e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55NIBy,aspectj,2033483890,302,NA,KimmingLau,49543702,Kimming Lau,294001791@qq.com,NA,2024-04-03T03:58:02Z,2024-04-03T03:58:02Z,"Here is a of the mentioned entrys information in heapdump:

![Snipaste_2024-04-03_11-29-03](https://github.com/eclipse-aspectj/aspectj/assets/1537384/3bf51ca3-6f70-407e-b68b-fb9cf8f0adfd)

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55NIBy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55PeXt,aspectj,2034099693,302,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-03T09:49:48Z,2024-04-03T09:49:48Z,"> The life cycle of `ThreadLocal.Entry` here should be consistent with the JoinPointImpl object, so I think we should proactively call `ThreadLocal.remove()` after using `JoinPointImpl.arcIndex`.

Sorry, I am working on something else at the moment, I am too busy to immerse myself into the details here at the moment. Please be more specific and suggest code changes. As for those weak references, should they not be collected as well after the join point impl was collected?

Edit: Please, post screenshots inline, not as zip files. I just fixed that in your comment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55PeXt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/302,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55QhHV,aspectj,2034373077,302,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-03T11:51:52Z,2024-04-03T11:51:52Z,"The problem with releasing the thread-locals is that a live thread could in principle defer proceeding indefinitely or not proceed at all. AspectJ has no way of knowing. Maybe there is a way to at least remove the thread-locals in cases where the last proceed has happened already, i.e. the index is back down to zero. I have not inspected the code yet, I am totally out of context at the moment.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55QhHV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/305,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/305,aspectj,2231043001,305,WeavingAdaptor optimisations cause Equinox weaving problems,kriegaex,1537384,Alexander Kriegisch,,CLOSED,2024-04-08T12:16:23Z,2024-04-08T13:30:29Z,"A contribution by @urisimchoni for AspectJ 1.9.21.1 fixed problem #279, but introduced a new one downstream in Eclipse when using Equinox OSGi weaving via AJDT, see https://github.com/eclipse-aspectj/ajdt/issues/57.

Part of the PR needs to be reverted so as to still keep the AspectJ fix intact while not messing up Equinox weaving.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/305/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/305,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55wYoB,aspectj,2042726913,305,NA,urisimchoni,10113228,Uri Simchoni,,NA,2024-04-08T13:12:48Z,2024-04-08T13:12:48Z,"@kriegaex on first glance it appears like this revert doesn't break #279. I removed the generated class keys because I thought they were not needed, not because they somehow interfere with fixing #279. Do you agree?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55wYoB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/305,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55wiTO,aspectj,2042766542,305,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-08T13:30:28Z,2024-04-08T13:30:28Z,"@urisimchoni, it seems as if you are right. My test results in AspectJ and AJDT are looking good. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns55wiTO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,aspectj,2261657756,306,Performance issue due to repeated attempts to find classes without FQN,harrisric,48761651,,,CLOSED,2024-04-24T16:05:07Z,2024-04-26T08:03:25Z,"Hi, I've been using aspectj with a very large classpath and seeing some performance issues recently. Profiling showed `ClassPathManager.find` as a hotspot.
Further investigation led me to see that we end up repeatedly looking for classes based on an incomplete class name and that this was slow because each jar on the classpath was rechecked each time the class is referenced.
The examples of this that I found were where the aspect would have a simple class name without an import, typically things from the `java.lang` namespace such as `String` or `Object`, or else classes that are in the same package as the aspect.
Implementing a simple cache of class names that weren't found generated a significant speed up.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57s7FN,aspectj,2075373901,306,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-24T16:29:30Z,2024-04-24T16:29:30Z,"Thanks for the PR. Of course, I will look at your contribution benevolently. To convince me that this actually solves a real-world problem and not just take your word for it, even though what you say sounds plausible, please provide a reproducer for the issue, i.e. some kind of sample program and configuration that makes AspectJ slow before and significantly faster after your proposed change.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57s7FN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57uM4b,aspectj,2075708955,306,NA,harrisric,48761651,,,NA,2024-04-24T19:41:22Z,2024-04-24T19:41:22Z,"Hi @kriegaex - thanks for the quick response.
Here is an example of usage, the jar being woven isn't relevant - the performance issue is in the set up.
command line for `org.aspectj.tools.ajc.Main` 
`-inpath commons-lang3-3.14.0.jar  
-classpath lib\aspectjrt-1.9.22.jar;lib\spring-tx-5.3.33.jar;lib\commons-logging-1.3.1.jar;lib\ant-1.10.14.jar;lib\activemq-client-5.15.16.jar
-aspectpath sample-aspect.jar
-outjar target\some.jar
-source 11
-target 11
-encoding UTF-8`

In this case the first three jars are required for the classpath the rest are unnecessary but fulfill the example - the more jars you add the slower you will see the setup to be, the same is true with more aspects that have similar characteristics. With ~1000 jars on the classpath the slowdown is notable
(jar renamed as a zip so that it can be attached)
[sample-aspect.zip](https://github.com/eclipse-aspectj/aspectj/files/15099578/sample-aspect.zip)

EDIT: added commons-logging to the classpath for completeness.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57uM4b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57xcfP,aspectj,2076559311,306,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-25T07:36:13Z,2024-04-25T07:36:13Z,Thank you. Please also attach the source code and ideally also the Maven coordinates for the classpath libraries.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57xcfP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57xmSu,aspectj,2076599470,306,NA,harrisric,48761651,,,NA,2024-04-25T08:00:11Z,2024-04-25T08:00:11Z,"The project to generate the sample jar is below. The maven coordinates for **required** classpath libraries are in the pom for that, other items on the classpath are there to prove the problem and can largely be anything you choose.
[sample-aspect.zip](https://github.com/eclipse-aspectj/aspectj/files/15106194/sample-aspect.zip)

There may be some other improvement mechanism possible that means these incomplete class names are not searched for in the first place. In this example I believe that they originate from the pointcut syntax which contains simple names from either the local namespace or `java.lang`.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57xmSu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57ywZ0,aspectj,2076903028,306,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-25T10:51:44Z,2024-04-25T10:51:44Z,"With this project and the handful of dependencies you suggested I cannot detect any noticeable difference in performance. I need the suggested change to be verifiable and measurable. Are you expecting me to create a project with 1,000 libraries from scratch? Like I said, your PR is welcome, but you need to sell it a bit better to convince me.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57ywZ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57zXMY,aspectj,2077061912,306,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-25T12:26:04Z,2024-04-25T12:26:04Z,"I think I found a simple way to unit-test the performance. The disadvantage of my test approach is a fixed timeout, which might cause tests to be brittle, but unless I keep the old way to search find types and add a toggle to be able to compare both approaches, there is no easy way to verify the PR's effectiveness.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57zXMY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57zdTa,aspectj,2077086938,306,NA,harrisric,48761651,,,NA,2024-04-25T12:40:04Z,2024-04-25T12:40:04Z,"@kriegaex I think that my original profiling may have highlighted this area more due to my usage tipping over the 1000 threshold that is the default for `org.aspectj.weaver.openarchives` (I spotted this later) and therefore the impact is perhaps less than originally expected. It is notably affected by the number of aspects and the number of archives on the classpath.

To see an impact I upped the number of aspects to 10 (by copying) and generated ~1000 further jars for the classpath (copying using a script to get e.g. anyjar00001.jar, ..., anyjar.00995.jar - this kept it below 1000 in total so not triggering the file closing)
In this case I can see by crude timing around the ""setup"" I see times of ~630ms vs ~570ms with my changes, so ~10% improvement.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns57zdTa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/306,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns576K_X,aspectj,2078846935,306,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-26T08:03:24Z,2024-04-26T08:03:24Z,"Merged including my test. Thank you very much for your contribution, @harrisric.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns576K_X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309,aspectj,2265788059,309,Enhancement request - compile time weave multiple jars retaining separate structure,harrisric,48761651,,,OPEN,2024-04-26T13:25:30Z,2024-04-26T13:41:39Z,"My use case is that I have a significant number of jars to weave the same aspects into, using the same classpath, but would like to retain the same distinct jars as output.
At present the compile time weave processing is called per-jar, which means that the set up effort is repeated for each case.
The output options at the moment mean that if provided multiple jars on input either we end up with a single jar or directory containing all consolidated classes. In particular this means that any distinct resources which might be provided on a per-jar basis are lost/overwritten (the existing processing provides a warning of _duplicate resource_ in these cases).","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578R_1,aspectj,2079399925,309,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-26T13:28:57Z,2024-04-26T13:28:57Z,"Thanks for describing your use case. I understand your overhead, but currently a feature like this is not planned.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578R_1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578Tba,aspectj,2079405786,309,NA,harrisric,48761651,,,NA,2024-04-26T13:32:21Z,2024-04-26T13:32:21Z,@kriegaex thanks for the response - if I were to explore an implementation would it be acceptable for the project or is it deemed not required or should be solved in a different manner?,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578Tba/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/309,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578Xg-,aspectj,2079422526,309,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-04-26T13:41:38Z,2024-04-26T13:41:38Z,"I do not want to prematurely judge in either direction. While I am not going to promise to accept such a contribution, I certainly have no intention to reject it right away either. In the end, it will depend on what the code looks like, its impact on the existing code, test coverage, maintainability etc.

Note to myself: #60 is loosely related, because it also touches upon the question what is written to disk under which circumstances. IMO, that would be a more interesting feature, but can be implemented independently of this one here.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns578Xg-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,aspectj,2275675567,310,`StackOverflowError` after converting an aspect from `.aj` to `.java`,lefou,1321393,Tobias Roeser,,CLOSED,2024-05-02T14:23:16Z,2024-05-11T08:34:37Z,"Here is the head of the error message:

```
Exception thrown from AspectJ 1.9.22
...
when batch building BuildConfig[null] #Files=0 AopXmls=#0
null
java.lang.StackOverflowError
	at org.aspectj.weaver.patterns.BasicTokenSource.peek(BasicTokenSource.java:51)
	at org.aspectj.weaver.patterns.PatternParser.maybeEat(PatternParser.java:1875)
	at org.aspectj.weaver.patterns.PatternParser.parseNotOrPointcut(PatternParser.java:363)
	at org.aspectj.weaver.patterns.PatternParser.parseNotOrPointcut(PatternParser.java:364)
	at org.aspectj.weaver.patterns.PatternParser.parseNotOrPointcut(PatternParser.java:364)
	at org.aspectj.weaver.patterns.PatternParser.parsePointcut(PatternParser.java:351)
	at org.aspectj.weaver.bcel.AtAjAttributes.parsePointcut(AtAjAttributes.java:1957)
	at org.aspectj.weaver.bcel.AtAjAttributes.handlePointcutAnnotation(AtAjAttributes.java:1422)
	at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes(AtAjAttributes.java:352)
	at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:394)
	at org.aspectj.weaver.bcel.BcelObjectType.<init>(BcelObjectType.java:161)
	at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:412)
	at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:407)
	at org.aspectj.weaver.World.resolveToReferenceType(World.java:486)
	at org.aspectj.weaver.World.resolve(World.java:321)
...
Mai 02, 2024 4:31:38 PM org.aspectj.weaver.tools.Jdk14Trace info
INFORMATION: Dumping to /home/lefou/..././ajcore.20240502.163138.299.txt

```

In the failing sub-module `accounting`, we use the aspect compiler to weave-compile the classes given via the `-inpath`. The classes itself are built with `kotlinc` and `javac`. This setup used to work before. The only change happened in a upstream sub-module `kernel`, which is consumed via the `-aspectpath`. In that module, we changed one aspect from `.aj` to `.java` using the `@`Aspect 5 annotations. The `kernel` module itself uses the aspect compiler to compile the source code and compiles fine.

I'm also adding the [`ajcore.20240502.112934.013.txt`](https://github.com/eclipse-aspectj/aspectj/files/15189650/ajcore.20240502.112934.013.txt) dump file. The project isn't open source. The build tools used is Mill with the `mill-aspectj` plugin. Therefore I don't have a shareable reproducer yet. I'm reporting the error in the hope, the issue can be analyzed with the already provided information. If not, I'm happy to provide more information and/or create a reproducer. But since this isn't easy on my side, I'm waiting to an explicit request. Maybe, it's not necessary at all?


","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58t1qs,aspectj,2092391084,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-03T06:35:14Z,2024-05-03T06:35:14Z,"It is really difficult to debug invisible code. The stack trace looks as if

* AspectJ is running into some kind of endless loop, causing the stack overflow,
* the last thing it is trying to do before the stack is exhausted is to parse a pointcut containing a pointcut containing some chained `&&` elements, e.g. `pc1() && pc2() && pc3() && pc4()`.

Please make sure I have access to a minimal reproducer. Moreover, does the problem only affect 1.9.22 or also older AspectJ versions, say 1.9.19, 1.9.7, 1.8.14? It would be helpful to limit the search space. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58t1qs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58t3th,aspectj,2092399457,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-03T06:42:51Z,2024-05-03T06:42:51Z,"Note to myself: The _ajcore_ file shows an endless loop (118 occurrences before SOE) of

```text
at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:217)
at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:126)
at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:189)
at org.aspectj.weaver.patterns.PerCflow.resolveBindings(PerCflow.java:77)
at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:189)
at org.aspectj.weaver.AjAttribute$Aspect.reifyFromAtAspectJ(AjAttribute.java:664)
at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:408)
at org.aspectj.weaver.bcel.BcelObjectType.<init>(BcelObjectType.java:161)
at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:412)
at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:407)
at org.aspectj.weaver.World.resolveToReferenceType(World.java:486)
at org.aspectj.weaver.World.resolve(World.java:321)
at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:92)
at org.aspectj.weaver.BindingScope.lookupType(BindingScope.java:66)
at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:745)
at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:733)
at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:662)
```

before topping out at what was posted in the question. I.e., the question is why this happens.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58t3th/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58uvU5,aspectj,2092627257,310,NA,lefou,1321393,Tobias Roeser,,NA,2024-05-03T09:20:56Z,2024-05-03T09:20:56Z,"Thank you @kriegaex ! Since the stack overflow seems to be related to the aspect we changed, I'll try to minimize the issue to come up with a reproducer. Maybe, we either made some mistake when translating from aspect to class notation, or there is indeed a issue. Ideally, I just find the issue while going.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58uvU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58vVGr,aspectj,2092781995,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-03T11:03:05Z,2024-05-03T11:03:05Z,"> Maybe, we either made some mistake when translating from aspect to class notation, or there is indeed a issue. Ideally, I just find the issue while going.

Yes, that is possible. It is one of the beneficial side effects of creating an [MCVE](https://stackoverflow.com/help/mcve) that it helps you to understand the situation better.

If you are in a position to show me the code before/after conversion privately, feel free to find some chat contact data in my Stack Overflow profile (same user name). If you are lucky, I can spot something quickly.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58vVGr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58vjNn,aspectj,2092839783,310,NA,lefou,1321393,Tobias Roeser,,NA,2024-05-03T11:46:05Z,2024-05-03T11:46:05Z,"Nice move. I guess the aspect itself isn't that much of a secret, except being legacy as hell. 😵‍💫

This is just the migrated aspect, which is not the only in the code base, but the only change. See revision 2 of this gist:
https://gist.github.com/lefou/bd625e7e1a00dfeb63546e600ebeed4e/revisions

The idea behind the migration is to get better navigation support in IntelliJ IDEA and rework the code base and finally clean up. AspectJ development was much easier with Eclipse, tbh.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58vjNn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58v7Fe,aspectj,2092937566,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-03T12:40:02Z,2024-05-03T12:40:02Z,"I cannot compile this aspect, because it imports not just lots of Spring classes but also your own classes and uses a pointcut from another aspect. The aspect is a bit too complex to parse only in my head.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58v7Fe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58v-xb,aspectj,2092952667,310,NA,lefou,1321393,Tobias Roeser,,NA,2024-05-03T12:49:32Z,2024-05-03T12:49:32Z,"Understood. I'll try to prepare a reproducer. Does it need to be a Maven project, or would be Mill ok, given some instructions to reproduce?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58v-xb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58wAfn,aspectj,2092959719,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-03T12:54:07Z,2024-05-03T12:54:07Z,"I added some Spring dependencies and the imported application classes and aspects to a sample Maven project, and it compiles fine. Waiting for your reproducer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns58wAfn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns580M9x,aspectj,2094059377,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-04T07:11:51Z,2024-05-04T07:11:51Z,"> Does it need to be a Maven project, or would be Mill ok

I just noticed this part of the question now. I have never used or even seen Mill before, i.e. if you would remove this barrier, it would be nice. But if the build file is comprehensible enough for me to map the dependencies and compiler options to Maven myself, I can give it a try first and complain afterwards, if necessary.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns580M9x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59CaYE,aspectj,2097784324,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-07T08:52:23Z,2024-05-07T08:52:23Z,"Any news here? I am asking, because some people wait for release 1.9.22.1, and if there is a bug that I can fix and include it, I would like it to be part of that release. Otherwise, it would have to wait at least until 1.9.23.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59CaYE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59Du58,aspectj,2098130556,310,NA,lefou,1321393,Tobias Roeser,,NA,2024-05-07T11:03:15Z,2024-05-07T11:03:15Z,"No relevant updates, yet. Please don't hold back your next release. 

Since the issue doesn't occur in the `.aj` version of the aspect, we started to simplify that version instead. I wasn't able to isolate the issue to a reasonable smaller project and currently lack the time to continue that effort. Feel free to close this issue, since I can't  verify that it's a bug in AspectJ. I can comment/reopen, once I find more evidence.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59Du58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/310,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59gXBC,aspectj,2105634882,310,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-11T08:34:37Z,2024-05-11T08:34:37Z,Understood. AspectJ 1.9.22.1 was released without any potential fixes for this issue. Closing as requested.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns59gXBC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311,aspectj,2297123788,311,"Android development environment, using kotlin language, gradle 8.0 or above, how to integrate. I found that it is currently only for java, and there is no integration documentation for it at the moment",fengchenqixia,21195555,Fitz,1055249695@qq.com,CLOSED,2024-05-15T07:44:20Z,2024-05-15T10:18:24Z,Can you give a new version of the Androy De Kotlin integration documentation,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns593-cX,aspectj,2111825687,311,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-15T07:55:19Z,2024-05-15T07:55:19Z,"Sorry, I have no idea what you want. I am closing this issue as invalid. Feel free to edit the issue, providing a comprehensible description and a title summarising the topic. Then, I might reopen it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns593-cX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns594L3g,aspectj,2111880672,311,NA,fengchenqixia,21195555,Fitz,1055249695@qq.com,NA,2024-05-15T08:24:04Z,2024-05-15T08:24:04Z,"Android development environment, using kotlin language, gradle 8.0 or above, how to integrate. I found that it is currently only for java, and there is no integration documentation for it at the moment","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns594L3g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/311,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns595G96,aspectj,2112122746,311,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-05-15T10:16:54Z,2024-05-15T10:16:54Z,"Thanks for the clarification. Please note, that this is an issue tracker for bugs and feature requests, not a support channel. Your question would be better suited on Stack Overflow or the AspectJ users mailing list.

Anyway, the AspectJ source code compiler only understands Java and native AspectJ syntax, because it is derived from the Eclipse Java compiler. But you can use post-compile weaving to instrument byte code created by other JVM languages, such as Kotlin. Please consult the AspectJ documentation. As you are a Gradle user, you might want to use [Freefair plugin's post-compile option](https://docs.freefair.io/gradle-plugins/8.4/reference/#_post_compile_weaving). Good luck.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns595G96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312,aspectj,2364195854,312,Missing files from ASM library,YaroslavRenhevych,41372491,Yaroslav,,CLOSED,2024-06-20T11:23:19Z,2024-06-20T14:05:44Z,Please copy package `org.objectweb.asm.tree` into `aspectjweaver` or remove classes `aj.org.objectweb.asm.commons.TryCatchBlockSorter` and `aj.org.objectweb.asm.commons.JSRInlinerAdapter` that import classes from `aj.org.objectweb.asm.tree` because Veracode scanner determines these imports from `aj.org.objectweb.asm.tree.` as the issue `Missing Supporting Files`,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B-Qcp,aspectj,2180581161,312,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-06-20T12:45:30Z,2024-06-20T12:45:30Z,"Thanks for your inquiry. Please, next time describe the issue a bit better to save me some effort for digging into it. Do not just throw something over the fence.

From AspectJ's perspective, those classes from `asm-tree` are unused and do not cause any issues. Technically, `asm-commons` has a dependency on `asm-tree`, which is why your tool reported it. I have yet to think about whether I really want to shade more classes into AspectJ artifacts, bloating them without any immediate benefit, just to satisfy a reporting tool. For now, I recommend to exclude those classes from being reported. If AspectJ ever uses those tool classes, we can still add them.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B-Qcp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B-6Zx,aspectj,2180753009,312,NA,YaroslavRenhevych,41372491,Yaroslav,,NA,2024-06-20T13:47:04Z,2024-06-20T13:47:04Z,"Hi @kriegaex 
Sorry if I didn't make it clear.
Can we then remove from AspectJ classes that reference to `asm-tree`?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B-6Zx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/312,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B_FM5,aspectj,2180797241,312,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-06-20T14:05:22Z,2024-06-20T14:05:22Z,"No, I want to avoid unnecessarily complex configuration for shaded dependencies. Furthermore, removal might have to be recursive, if the removed classes are also referenced by others.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6B_FM5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/313,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/313,aspectj,2393639921,313,AspectJ breaks reproducible builds w/JDK 22,lprimak,1002484,Lenny Primak,lenny@flowlogix.com,CLOSED,2024-07-06T17:34:52Z,2024-07-07T07:15:27Z,"Hi,

It is no longer possible to build to be reproduced on JDK 22 w/AspectJ.

See https://github.com/apache/shiro/issues/1574 for more details","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/313/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/313,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6D2WMj,aspectj,2212061987,313,NA,lprimak,1002484,Lenny Primak,lenny@flowlogix.com,NA,2024-07-07T00:15:36Z,2024-07-07T00:15:36Z,Unable to reproduce,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6D2WMj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/313,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6D3cp0,aspectj,2212350580,313,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-07T07:14:33Z,2024-07-07T07:14:33Z,"@lprimak, like this, I would have closed the issue anyway. Even the link tells me nothing about how to even begin trying to reproduce the issue. Please, next time make sure you provide a comprehensive issue description and a minimal reproducer, even if in the end the issue might prove not to have been caused by AspectJ. Either way, a well-described issue is more helpful than this one here.

Thanks for following up and closing the issue by yourself. I hope that you will be able to find out what happens in Shiro. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6D3cp0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,aspectj,2414907819,314,Bug? NoClassDefFoundError when using around advice and LTW cache,guan-kevin,20823498,Kevin Guan,,OPEN,2024-07-18T00:43:42Z,2024-11-18T03:38:27Z,"in `src/MyAspect.aj`
```
public aspect MyAspect {
    before() : call(void Foo.bar()) {
        System.out.println(""before bar"");
    }

    void around(): call(void Foo.bar()) {
        System.out.println(""around bar"");
        proceed();
    }
}
```

In `src/foo.java`
```
class Foo {
    public void bar() {
        System.out.println(""inside bar"");
    }
    public static void main(String[] args) {
        Foo f = new Foo();
        f.bar();
    }
}
```

In `classes/META-INF/aop.xml`
```
<aspectj>
    <aspects>
        <aspect name=""MyAspect""/>
    </aspects>
    <weaver options=""-verbose"">
    </weaver>
</aspectj>
```

Running the command 

`java -javaagent:path/to/aspectjweaver.jar -Dorg.aspectj.weaver.showWeaveInfo=true -Daj.weaving.cache.enabled=true -Daj.weaving.cache.dir=/tmp/aspectj-cache/ -cp classes Foo`

twice will lead to the following error

```
Error: Unable to initialize main class Foo
Caused by: java.lang.NoClassDefFoundError: Foo$AjcClosure1
```

However, if I set cache implementation to `shared`, then it will work as expected:

`java -javaagent:path/to/aspectjweaver.jar -Dorg.aspectj.weaver.showWeaveInfo=true -Daj.weaving.cache.enabled=true -Daj.weaving.cache.dir=/tmp/aspectj-cache/ -Daj.weaving.cache.impl=shared -cp classes Foo`

Is this a bug? And what does this `-Daj.weaving.cache.impl=shared` shared implementation option do?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6FQ2y-,aspectj,2235788478,314,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-18T07:11:44Z,2024-07-18T07:11:44Z,"Maybe this is somehow similar or related to #285. I can reproduce this behaviour back until at least 1.8.13, i.e. it is not a new thing and dates back to when I was just a simple AspectJ user, not a contributor to the project yet.

Judging from [this test configuration file](https://github.com/eclipse-aspectj/aspectj/blob/3c6e30bdd9a8cda263dbfc73a529af96f2b01e40/tests/src/test/resources/org/aspectj/systemtest/ajc171/newfeatures-tests.xml), not using `aj.weaving.cache.impl` at all defaults to `aj.weaving.cache.impl=perloader`, which seems to be correct according to my quick experiments. If the cache ever worked for that case when used repeatedly and ""just"" broke a long time ago or if it never worked to begin with, is yet to be established. I admit that I never use the weaving cache myself, so I need to dig into this at some point. This is just my first feedback.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6FQ2y-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0Tu,aspectj,2254128366,314,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-27T11:57:42Z,2024-07-27T11:57:42Z,Please note my [recent message](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0Tu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T3sw7,aspectj,2480852027,314,NA,oakkitten,1710718,,,NA,2024-11-16T23:39:16Z,2024-11-16T23:39:16Z,"Not sure if related, but I'm getting this:

	Caused by: java.lang.NoClassDefFoundError: org.aspectj.runtime.reflect.JoinPointImpl$$ExternalSyntheticLambda0
	    at org.aspectj.runtime.reflect.JoinPointImpl.<init>(JoinPointImpl.java:145)
	    at org.aspectj.runtime.reflect.Factory.makeJP(Factory.java:270)

after upgrading from 1.9.21 to either 1.9.22 or 1.9.22.1, on Android 23 emulator and below. 24+ seems to be alright.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T3sw7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T31Jq,aspectj,2480886378,314,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-11-17T01:51:25Z,2024-11-17T01:51:25Z,"@oakkitten, at first glance, this seems to be unrelated, because an AspectJ class does not seem to be found rather than a generated one. The `$$ExternalSyntheticLambda0` bit seems to be an Android-specific thing, but not being an Android developer I have no idea what it is about. The fact that it seems to work in one version of Android studio but not in another sounds as if it could be a configuration issue, but I have no way to be sure. If you think that this is an AspectJ issue, please prepare a minimal reproducer and attach it to a new issue. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T31Jq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T5ecF,aspectj,2481317637,314,NA,oakkitten,1710718,,,NA,2024-11-17T15:31:56Z,2024-11-17T15:31:56Z,"If I get around to investigating, I will. However, AspectJ on Android seems to very rarely used, especially because of how increasingly hard it has became to plug weaving into the build pipeline. So perhaps it's just not worth the effort. Said that, 1.9.21 works fine, so maybe I can try bisecting at least. Will open a new issue if I find anything.

(P.S. It's not different Android Studio versions, but different Android emulator versions, which run different versions of SDK API and Java API. Android 23 is quite old, from 2015)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T5ecF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/314,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T7nbs,aspectj,2481878764,314,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-11-18T03:37:17Z,2024-11-18T03:37:17Z,"> If I get around to investigating, I will.

If you are interested in a future solution, it would be helpful for you to get around to it. Thanks.

> However, AspectJ on Android seems to very rarely used

I have no idea. All I know is that over the years I have answered multiple questions about related problems on Stack Overflow, and actually the problem was never AspectJ as such but rather its configuration, as far as I remember. Some people do seem to use it.

> especially because of how increasingly hard it has became to plug weaving into the build pipeline.

Is that so? I really have no idea. Is there anything the AspectJ project can or should do about it, or is that rather a problem of complex tooling in the Android build pipeline with Gradle or Maven?

> 1.9.21 works fine, so maybe I can try bisecting at least.

Well, but you also said that 1.9.22.x seems to be problematic on certain emulator versions, not on others, including the latest one. So, the bisection result might point to a related AspectJ change making the emulator run out of whack in v23, but if it works again in v24, maybe it is really an emulator problem rather than an AspectJ one. But this is, of course, speculation.

> Will open a new issue if I find anything.

Thank you so much, I appreciate your future input.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6T7nbs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,aspectj,2431810373,316,`ajc` fails when aspect is annotated with `@Deprecated`,lefou,1321393,Tobias Roeser,,OPEN,2024-07-26T09:22:03Z,2024-07-27T12:12:01Z,"I added a `@Deprecated` annotation to an aspect and saw the following compiler error. Once I removed the annotation, the aspect compiles again.

```
mill module.kernel.compile
[355/355] module.kernel.compile 
Compiling 279 Java sources and 4 AspectJ sources to /home/lefou/work/tototec/iba/2017-Comfis/comfis/out/module/kernel/compile.dest ...
<Unknown> [warning] Found @DeclareAnnotation while current release does not support it (see 'org.aspectj.weaver.bcel.AtAjAttributes')

/home/lefou/work/tototec/iba/2017-Comfis/comfis/module/kernel/src/de/ibacg/cmfs/aspects/AbstractAccessRightsAspect.aj [error] Internal compiler error: java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
(no source information available)
ABORT

Exception thrown from AspectJ 1.9.22

This might be logged as a bug already -- find current bugs at
  https://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler

Bugs for exceptions thrown have titles File:line from the top stack, 
e.g., ""SomeFile.java:243""

If you don't find the exception below in a bug, please add a new bug
at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ
To make the bug a priority, please include a test program
that can reproduce this exception.
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null

when batch building BuildConfig[null] #Files=283 AopXmls=#0
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1992)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.reportDeprecatedType(TypeReference.java:601)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.internalResolveType(TypeReference.java:562)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:637)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:633)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess.resolveType(ClassLiteralAccess.java:86)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:906)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:855)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:227)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1118)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:128)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.IfStatement.resolve(IfStatement.java:311)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:128)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.IfStatement.resolve(IfStatement.java:311)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:720)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:410)
        at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:132)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:618)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1541)
        at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1670)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:666)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:919)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:575)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:385)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
        at de.tobiasroeser.mill.aspectj.worker.impl.AspectjInJvmWorker.internalCompile(AspectjInJvmWorker.scala:79)
        at de.tobiasroeser.mill.aspectj.worker.impl.AspectjInJvmWorker.compile(AspectjInJvmWorker.scala:26)
        at de.tobiasroeser.mill.aspectj.AspectjModule.$anonfun$ajcTask$1(AspectjModule.scala:145)
        at mill.define.Task$TraverseCtx.evaluate(Task.scala:71)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$11(GroupEvaluator.scala:356)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withErr(Console.scala:193)
        at mill.api.SystemStreams$.$anonfun$withStreams$2(SystemStreams.scala:62)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withOut(Console.scala:164)
        at mill.api.SystemStreams$.$anonfun$withStreams$1(SystemStreams.scala:61)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withIn(Console.scala:227)
        at mill.api.SystemStreams$.withStreams(SystemStreams.scala:60)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$8(GroupEvaluator.scala:356)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$8$adapted(GroupEvaluator.scala:325)
        at scala.collection.immutable.Vector.foreach(Vector.scala:2124)
        at mill.eval.GroupEvaluator.computeAll$1(GroupEvaluator.scala:325)
        at mill.eval.GroupEvaluator.evaluateGroup(GroupEvaluator.scala:380)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroupCached$22(GroupEvaluator.scala:247)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroupCached$2(GroupEvaluator.scala:238)
        at mill.eval.GroupEvaluator$synchronizedEval$.$anonfun$apply$1(GroupEvaluator.scala:65)
        at scala.util.Using$.resource(Using.scala:296)
        at mill.eval.GroupEvaluator$synchronizedEval$.apply(GroupEvaluator.scala:64)
        at mill.eval.GroupEvaluator.evaluateGroupCached(GroupEvaluator.scala:83)
        at mill.eval.GroupEvaluator.evaluateGroupCached$(GroupEvaluator.scala:71)
        at mill.eval.EvaluatorImpl.evaluateGroupCached(EvaluatorImpl.scala:15)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$2(EvaluatorCore.scala:116)
        at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
        at mill.eval.ExecutionContexts$RunNow$.execute(ExecutionContexts.scala:14)
        at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
        at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
        at scala.concurrent.impl.Promise$DefaultPromise.dispatchOrAddCallbacks(Promise.scala:312)
        at scala.concurrent.impl.Promise$DefaultPromise.map(Promise.scala:182)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$1(EvaluatorCore.scala:92)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$1$adapted(EvaluatorCore.scala:90)
        at scala.collection.immutable.Vector.foreach(Vector.scala:2124)
        at mill.eval.EvaluatorCore.evaluate0(EvaluatorCore.scala:90)
        at mill.eval.EvaluatorCore.$anonfun$evaluate$1(EvaluatorCore.scala:43)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.eval.EvaluatorCore.evaluate(EvaluatorCore.scala:34)
        at mill.eval.EvaluatorCore.evaluate$(EvaluatorCore.scala:26)
        at mill.eval.EvaluatorImpl.evaluate(EvaluatorImpl.scala:15)
        at mill.main.RunScript$.evaluateNamed(RunScript.scala:38)
        at mill.main.RunScript$.$anonfun$evaluateTasksNamed$2(RunScript.scala:26)
        at scala.util.Either.map(Either.scala:390)
        at mill.main.RunScript$.evaluateTasksNamed(RunScript.scala:26)
        at mill.runner.MillBuildBootstrap$.evaluateWithWatches(MillBuildBootstrap.scala:399)
        at mill.runner.MillBuildBootstrap.$anonfun$processFinalTargets$3(MillBuildBootstrap.scala:308)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.runner.MillBuildBootstrap.processFinalTargets(MillBuildBootstrap.scala:308)
        at mill.runner.MillBuildBootstrap.evaluateRec(MillBuildBootstrap.scala:196)
        at mill.runner.MillBuildBootstrap.$anonfun$evaluate$1(MillBuildBootstrap.scala:49)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)

Juli 26, 2024 11:07:44 AM org.aspectj.weaver.tools.Jdk14Trace info
INFORMATION: Dumping to /home/lefou/work/tototec/iba/2017-Comfis/comfis/./ajcore.20240726.110744.754.txt

1 fail|abort, 1 error, 1 warning
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GP_7m,aspectj,2252340966,316,NA,lefou,1321393,Tobias Roeser,,NA,2024-07-26T09:29:15Z,2024-07-26T09:29:15Z,Same with AspectJ `1.9.22.1`.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GP_7m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GQC6t,aspectj,2252353197,316,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-26T09:35:53Z,2024-07-26T09:35:53Z,"Cannot reproduce. Please provide an [MCVE](https://stackoverflow.com/help/mcve). As you know, I do not use Mill, so please either a batch file for compiling and running the code or, ideally, a Maven project.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GQC6t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GS5dh,aspectj,2253100897,316,NA,lefou,1321393,Tobias Roeser,,NA,2024-07-26T16:29:20Z,2024-07-26T16:29:20Z,"So, this is likely some strange referencing issue, but here are the minimized source files:

```java
// example/AbstractAccessRightsAspect.aj
package example;

/**
 * @deprecated Use {@link AccessRightsHelper} instead.
 */
public abstract aspect AbstractAccessRightsAspect {
}
```

```java
// example/AccessRightsAspect.aj
package example;

@Deprecated
public aspect AccessRightsAspect extends AbstractAccessRightsAspect {
}
```

```java
// example/AccessRightsHelper.java
package example;

public class AccessRightsHelper {
	public void dump () {
		System.err.println(""Replacing Aspect: ""+ AccessRightsAspect.aspectOf());
	}
}
```

Compilation fails with:

```
> mill module.kernel.compile
[357/357] module.kernel.compile 
Compiling 2 Java sources and 2 AspectJ sources to /home/lefou/work/tototec/iba/2017-Comfis/comfis/repro-ajc-deprecated/out/module/kernel/compile.dest ...
<Unknown> [warning] Found @DeclareAnnotation while current release does not support it (see 'org.aspectj.weaver.bcel.AtAjAttributes')

/home/lefou/work/tototec/iba/2017-Comfis/comfis/repro-ajc-deprecated/module/kernel/src/example/AccessRightsHelper.java [error] Internal compiler error: java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
(no source information available)
ABORT

Exception thrown from AspectJ 1.9.22.1

This might be logged as a bug already -- find current bugs at
  https://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler

Bugs for exceptions thrown have titles File:line from the top stack, 
e.g., ""SomeFile.java:243""

If you don't find the exception below in a bug, please add a new bug
at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ
To make the bug a priority, please include a test program
that can reproduce this exception.
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null

when batch building BuildConfig[null] #Files=4 AopXmls=#0
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1992)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1976)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(SingleNameReference.java:1103)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:855)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolveTypeWithBindings(Expression.java:1129)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1840)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:906)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1118)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:720)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:410)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:618)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1541)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1670)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:666)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:919)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:575)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:385)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
        at de.tobiasroeser.mill.aspectj.worker.impl.AspectjInJvmWorker.internalCompile(AspectjInJvmWorker.scala:79)
        at de.tobiasroeser.mill.aspectj.worker.impl.AspectjInJvmWorker.compile(AspectjInJvmWorker.scala:26)
        at de.tobiasroeser.mill.aspectj.AspectjModule.$anonfun$ajcTask$1(AspectjModule.scala:145)
        at mill.define.Task$TraverseCtx.evaluate(Task.scala:71)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$11(GroupEvaluator.scala:356)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withErr(Console.scala:193)
        at mill.api.SystemStreams$.$anonfun$withStreams$2(SystemStreams.scala:62)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withOut(Console.scala:164)
        at mill.api.SystemStreams$.$anonfun$withStreams$1(SystemStreams.scala:61)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withIn(Console.scala:227)
        at mill.api.SystemStreams$.withStreams(SystemStreams.scala:60)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$8(GroupEvaluator.scala:356)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroup$8$adapted(GroupEvaluator.scala:325)
        at scala.collection.immutable.Vector.foreach(Vector.scala:2124)
        at mill.eval.GroupEvaluator.computeAll$1(GroupEvaluator.scala:325)
        at mill.eval.GroupEvaluator.evaluateGroup(GroupEvaluator.scala:380)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroupCached$22(GroupEvaluator.scala:247)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.eval.GroupEvaluator.$anonfun$evaluateGroupCached$2(GroupEvaluator.scala:238)
        at mill.eval.GroupEvaluator$synchronizedEval$.$anonfun$apply$1(GroupEvaluator.scala:65)
        at scala.util.Using$.resource(Using.scala:296)
        at mill.eval.GroupEvaluator$synchronizedEval$.apply(GroupEvaluator.scala:64)
        at mill.eval.GroupEvaluator.evaluateGroupCached(GroupEvaluator.scala:83)
        at mill.eval.GroupEvaluator.evaluateGroupCached$(GroupEvaluator.scala:71)
        at mill.eval.EvaluatorImpl.evaluateGroupCached(EvaluatorImpl.scala:15)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$2(EvaluatorCore.scala:116)
        at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
        at mill.eval.ExecutionContexts$RunNow$.execute(ExecutionContexts.scala:14)
        at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
        at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
        at scala.concurrent.impl.Promise$DefaultPromise.dispatchOrAddCallbacks(Promise.scala:312)
        at scala.concurrent.impl.Promise$DefaultPromise.map(Promise.scala:182)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$1(EvaluatorCore.scala:92)
        at mill.eval.EvaluatorCore.$anonfun$evaluate0$1$adapted(EvaluatorCore.scala:90)
        at scala.collection.immutable.Vector.foreach(Vector.scala:2124)
        at mill.eval.EvaluatorCore.evaluate0(EvaluatorCore.scala:90)
        at mill.eval.EvaluatorCore.$anonfun$evaluate$1(EvaluatorCore.scala:43)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.eval.EvaluatorCore.evaluate(EvaluatorCore.scala:34)
        at mill.eval.EvaluatorCore.evaluate$(EvaluatorCore.scala:26)
        at mill.eval.EvaluatorImpl.evaluate(EvaluatorImpl.scala:15)
        at mill.main.RunScript$.evaluateNamed(RunScript.scala:38)
        at mill.main.RunScript$.$anonfun$evaluateTasksNamed$2(RunScript.scala:26)
        at scala.util.Either.map(Either.scala:390)
        at mill.main.RunScript$.evaluateTasksNamed(RunScript.scala:26)
        at mill.runner.MillBuildBootstrap$.evaluateWithWatches(MillBuildBootstrap.scala:399)
        at mill.runner.MillBuildBootstrap.$anonfun$processFinalTargets$3(MillBuildBootstrap.scala:308)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.runner.MillBuildBootstrap.processFinalTargets(MillBuildBootstrap.scala:308)
        at mill.runner.MillBuildBootstrap.evaluateRec(MillBuildBootstrap.scala:196)
        at mill.runner.MillBuildBootstrap.$anonfun$evaluate$1(MillBuildBootstrap.scala:49)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at mill.runner.MillBuildBootstrap.evaluate(MillBuildBootstrap.scala:48)
        at mill.runner.MillMain$.$anonfun$main0$6(MillMain.scala:234)
        at mill.runner.Watching$.watchLoop(Watching.scala:27)
        at mill.runner.MillMain$.$anonfun$main0$1(MillMain.scala:219)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withErr(Console.scala:193)
        at mill.api.SystemStreams$.$anonfun$withStreams$2(SystemStreams.scala:62)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withOut(Console.scala:164)
        at mill.api.SystemStreams$.$anonfun$withStreams$1(SystemStreams.scala:61)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
        at scala.Console$.withIn(Console.scala:227)
        at mill.api.SystemStreams$.withStreams(SystemStreams.scala:60)
        at mill.runner.MillMain$.main0(MillMain.scala:101)

Juli 26, 2024 6:21:09 PM org.aspectj.weaver.tools.Jdk14Trace info
INFORMATION: Dumping to /home/lefou/work/tototec/iba/2017-Comfis/comfis/repro-ajc-deprecated/./ajcore.20240726.182109.814.txt

1 fail|abort, 1 error, 1 warning
1 targets failed
module.kernel.compile AspectJ compiler failed with 2 errors
Watching for changes to 41 paths and 19 other values... (Enter to re-run, Ctrl-C to exit)

[357/357] module.kernel.compile 
Compiling 2 Java sources and 2 AspectJ sources to /home/lefou/work/tototec/iba/2017-Comfis/comfis/repro-ajc-deprecated/out/module/kernel/compile.dest ...
<Unknown> [warning] Found @DeclareAnnotation while current release does not support it (see 'org.aspectj.weaver.bcel.AtAjAttributes')

/home/lefou/work/tototec/iba/2017-Comfis/comfis/repro-ajc-deprecated/module/kernel/src/example/AccessRightsHelper.java [error] Internal compiler error: java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
(no source information available)
ABORT

Exception thrown from AspectJ 1.9.22.1

This might be logged as a bug already -- find current bugs at
  https://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler

Bugs for exceptions thrown have titles File:line from the top stack, 
e.g., ""SomeFile.java:243""

If you don't find the exception below in a bug, please add a new bug
at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ
To make the bug a priority, please include a test program
that can reproduce this exception.
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null

when batch building BuildConfig[null] #Files=4 AopXmls=#0
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1992)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1976)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(SingleNameReference.java:1103)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:855)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolveTypeWithBindings(Expression.java:1129)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1840)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:906)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1118)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:720)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:410)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:618)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1541)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1670)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:666)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:919)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:575)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:385)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
```

It compiles fine, if I either:

* remove the `@Deprecated` from `AccessRightAspect.aj` line `3`, or
* remove the line `4` in `AbstractAccessRightsAspect.aj` containing `@deprecated`, or
* remove line `6` in `AccessRightsHelper.java` referencing `AccessRightsAspect`
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GS5dh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GS-pj,aspectj,2253122147,316,NA,lefou,1321393,Tobias Roeser,,NA,2024-07-26T16:44:04Z,2024-07-26T16:44:04Z,"Here is the `build.sc` to compile it:

```scala
import mill._
import mill.scalalib._
import mill.define._

import $ivy.`de.tototec::de.tobiasroeser.mill.aspectj::0.5.0`
import de.tobiasroeser.mill.aspectj._

object main extends RootModule with AspectjModule {
  def aspectjVersion = ""1.9.22.1""
  def ajcOptions = Seq(""-17"", ""-proc:none"")
}
```

```
> tree src
src/
└── example
    ├── AbstractAccessRightsAspect.aj
    ├── AccessRightsAspect.aj
    └── AccessRightsHelper.java
```

@kriegaex Do you have some minimal Maven `pom.xml` for a AspectJ module?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GS-pj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GWv7o,aspectj,2254110440,316,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-27T10:43:53Z,2024-07-27T10:43:53Z,"The problem is not the `@Deprecated` annotation but the Javadoc with the `@deprecated` tag. If you remove it, it works. I tried from scratch from the command line:

```text
$ java -version
java version ""22"" 2024-03-19
Java(TM) SE Runtime Environment (build 22+36-2370)
Java HotSpot(TM) 64-Bit Server VM (build 22+36-2370, mixed mode, sharing)

$ ajc -v
AspectJ Compiler 1.9.22.1 - Built: Friday May 10, 2024 at 23:23:16 PDT - Eclipse Compiler b2705b00e91be7 (20Mar2024) - Java22 

$ rm -r target/classes/*

$ find src/main/java/example
src/main/java/example
src/main/java/example/AbstractAccessRightsAspect.aj
src/main/java/example/AccessRightsAspect.aj
src/main/java/example/AccessRightsHelper.java

$ ajc -17 -proc:none -d target/classes -cp ""c:/Program Files/Java/AspectJ/lib/aspectjrt.jar"" src/main/java/example/AbstractAccessRightsAspect.aj src/main/java/example/AccessRightsAspect.aj src/main/java/example/AccessRightsHelper.java 

$ java -cp ""c:/Program Files/Java/AspectJ/lib/aspectjrt.jar;target/classes"" example.AccessRightsHelper
Replacing Aspect: example.AccessRightsAspect@30f39991
```

But as soon as I change

```java
/**
 * Use {@link AccessRightsHelper} instead.
 */
```

to

```java
/**
 * @deprecated Use {@link AccessRightsHelper} instead.
 */
```

I can reproduce the problem:

```text
$ ajc -17 -proc:none -d target/classes -cp ""c:/Program Files/Java/AspectJ/lib/aspectjrt.jar"" src/main/java/example/AbstractAccessRightsAspect.aj src/main/java/example/AccessRightsAspect.aj src/main/java/example/AccessRightsHelper.java 
C:\Users\alexa\Documents\java-src\AspectJ\_maven-test-it\src\main\java\example\AccessRightsHelper.java [error] Internal compiler error: java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
(no source information available)
ABORT

Exception thrown from AspectJ 1.9.22.1

This might be logged as a bug already -- find current bugs at
  https://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler

Bugs for exceptions thrown have titles File:line from the top stack, 
e.g., ""SomeFile.java:243""

If you don't find the exception below in a bug, please add a new bug
at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ
To make the bug a priority, please include a test program
that can reproduce this exception.
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null

when batch building BuildConfig[null] #Files=3 AopXmls=#0
Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding.getAnnotationType()"" because ""annotationBinding"" is null
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedSinceValue(ProblemReporter.java:2033)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1992)
        at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedType(ProblemReporter.java:1976)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(SingleNameReference.java:1103)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:855)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolveTypeWithBindings(Expression.java:1129)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1840)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:906)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1118)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.resolveWithBindings(Statement.java:498)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveStatements(ASTNode.java:726)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:720)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:410)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:618)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1541)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1670)
        at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:666)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:919)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:575)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
        at org.aspectj.tools.ajc.Main.run(Main.java:385)
        at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
        at org.aspectj.tools.ajc.Main.main(Main.java:92)

Juli 27, 2024 12:01:57 PM org.aspectj.weaver.tools.Jdk14Trace info
INFORMATION: Dumping to C:\Users\alexa\Documents\java-src\AspectJ\_maven-test-it\.\ajcore.20240727.120157.978.txt

1 fail|abort, 1 error
```

One more thing I found out is that the problem only occurs in native syntax aspects, not in @AspectJ-style ones.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GWv7o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GWzHp,aspectj,2254123497,316,NA,lefou,1321393,Tobias Roeser,,NA,2024-07-27T11:34:41Z,2024-07-27T11:34:41Z,"Still, the JavaDoc `@deprecated` seems to be no problem, if there is no `@Deprecated` in the other file.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GWzHp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0HS,aspectj,2254127570,316,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-27T11:53:59Z,2024-07-27T11:53:59Z,"I.e., it must be the interplay of both. Honestly, I never used the `@deprecated` tag before, and it yet needs to be verified if similar problems can occur in ECJ or if this issue is specific to AJC.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0HS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0P6,aspectj,2254128122,316,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-07-27T11:56:39Z,2024-07-27T11:56:39Z,Please note my [recent message](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW0P6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/316,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW1SD,aspectj,2254132355,316,NA,lefou,1321393,Tobias Roeser,,NA,2024-07-27T12:12:00Z,2024-07-27T12:12:00Z,"> Honestly, I never used the `@deprecated` tag before

Since the Java `@Deprecated` annotation does not support any description and version parameter (compareted to Scala or Kotlin), I use the older JavaDoc `@deprecated` to add these info. Otherwise, deprecation messages would be non-actionable and frustrating for the user.

> Please note my [recent message](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.

I'm in quite a same situation honestly. Maintaining a portion of tools and libraries and often at the price of not getting things done for my main freelance jobs. So, I totally understand your position. To be clear, I don't expect any commitment on your side to any bug I report, but reporting these bugs and investigating in reproducers, even if I already found workarounds in the originating projects, is just another way of contributing. I wish you the best and really hope that some of the well-paid commercial beneficiaries of the AspectJ ecosystem step up financially and recognize the value, you provide with your contributions and community work.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6GW1SD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,aspectj,2553998147,317,Unsupported class file major version 67,Dosxx,29880348,kekeli Dos,,OPEN,2024-09-28T04:20:28Z,2025-01-23T08:32:29Z,"```text
java.lang.RuntimeException: The aspect weaver cannot determine any valid method to define auxiliary classes in arbitrary class loaders. Aspect weaving will *not* work, and you will see subsequent errors. Please search for corresponding issues at https://github.com/eclipse-aspectj/aspectj/issues. If there are none, please create a new one.
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<clinit>(ClassLoaderWeavingAdaptor.java:1043)
	at org.aspectj.weaver.loadtime.Aj.<clinit>(Aj.java:267)
	at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.<clinit>(ClassPreProcessorAgentAdapter.java:27)
	at org.aspectj.weaver.loadtime.Agent.<clinit>(Agent.java:34)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1161)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(MethodHandleAccessorFactory.java:340)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newMethodAccessor(MethodHandleAccessorFactory.java:71)
	at java.base/jdk.internal.reflect.ReflectionFactory.newMethodAccessor(ReflectionFactory.java:154)
	at java.base/java.lang.reflect.Method.acquireMethodAccessor(Method.java:726)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:560)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:572)
Caused by: java.lang.IllegalArgumentException: Unsupported class file major version 67
	at aj.org.objectweb.asm.ClassReader.<init>(ClassReader.java:200)
	at aj.org.objectweb.asm.ClassReader.<init>(ClassReader.java:180)
	at aj.org.objectweb.asm.ClassReader.<init>(ClassReader.java:166)
	at aj.org.objectweb.asm.ClassReader.<init>(ClassReader.java:288)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.getMirrorClassBytes(ClassLoaderWeavingAdaptor.java:1180)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.getMirrorClass(ClassLoaderWeavingAdaptor.java:1166)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.getAccessibleObjectOverrideOffset(ClassLoaderWeavingAdaptor.java:1128)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.createDefineClassMethodHandle(ClassLoaderWeavingAdaptor.java:1100)
	at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<clinit>(ClassLoaderWeavingAdaptor.java:1040)
	... 12 more
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N4gPC,aspectj,2380399554,317,NA,Dosxx,29880348,kekeli Dos,,NA,2024-09-28T04:22:40Z,2024-09-28T04:22:40Z,Could anyone help with this issue? I am running Spring boot 3.3.4 Amazon-corretto-23 aspectjweaver 1.9.22.1. Thanks in advance,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N4gPC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N4hl0,aspectj,2380405108,317,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-09-28T04:45:26Z,2024-09-28T04:45:26Z,"This simply means that AspectJ 1.9.22.1 does not support class file versions for Java 23+, only up to Java 22.

Please note my [recent message](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N4hl0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N5cBf,aspectj,2380644447,317,NA,Dosxx,29880348,kekeli Dos,,NA,2024-09-28T13:41:57Z,2024-09-28T13:41:57Z,Thank you very much! I really appreciate you taking the time to respond.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N5cBf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N5fyU,aspectj,2380659860,317,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-09-28T14:34:35Z,2024-09-28T14:34:35Z,The issue is valid. Why did you close it? I am reopening it. ,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6N5fyU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bdyBW,aspectj,2608275542,317,NA,alex-sviatenko,6669992,Alex Sviatenko,,NA,2025-01-22T21:09:13Z,2025-01-22T21:09:13Z,"I encountered the same error while using JDK 23 and AspectJ v.1.9.22.1. Changing the JDK to v.21 fixed the issue. =)
If you prefer to use inbuilt Maven/Gradle Runners in IDE, ensure that you have selected the proper Java version in Settings.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bdyBW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/317,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bhIt8,aspectj,2609154940,317,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-23T08:31:22Z,2025-01-23T08:31:22Z,"> Changing the JDK to v.21 fixed the issue.

No, it does not. It is a workaround. What would fix the issue is an AspectJ update supporting Java 23+, hence this open issue until either I find a sponsor and am no longer on hiatus or another committer implements it.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bhIt8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,aspectj,2562933596,318,[Spark On Kubernetes] Aspectj Load-Time Weaving Spark API failure,melin,1145830,melin,libinsong1204@gmail.com,CLOSED,2024-10-03T01:29:41Z,2024-10-17T13:51:17Z,"Verify that the user has read and write permissions on the table. Use Aspectj Load-Time Weaving to block the sparksession.sql method. Gets the sql to execute. Parse the sql and verify permissions(https://github.com/melin/superior-sql-parser)

Spark On Yarn aspectj can successfully weave spark api methods. spark app jar Startup classloader is AppClassLoader.

spark on kuberbernete, spark app jar Startup classloader is MutableURLClassLoader. spark api methods cannot be woven into the spark jar. The Spark JAR is added by the AppClassLoader.

![image](https://github.com/user-attachments/assets/2c241b80-ba74-4059-9450-3c603f9aa451)

```text
[AppClassLoader@18b4aac2] info AspectJ Weaver Version 1.9.22.1 built on Friday May 10, 2024 at 23:23:16 PDT
[AppClassLoader@18b4aac2] info register classloader sun.misc.Launcher$AppClassLoader@18b4aac2
[AppClassLoader@18b4aac2] info using configuration file:/yarn/nm/filecache/3130/spark-jobserver-driver-3.5.0.jar!/META-INF/aop.xml
[AppClassLoader@18b4aac2] info register aspect io.github.melin.jobserver.spark.driver.aspectj.SparkCatalogAspectj
[AppClassLoader@18b4aac2] info register aspect io.github.melin.jobserver.spark.driver.aspectj.SparkDataFrameAspectj
[AppClassLoader@18b4aac2] info register aspect io.github.melin.jobserver.spark.driver.aspectj.SparkSessionAspectj
[AppClassLoader@18b4aac2] info register aspect io.github.melin.jobserver.spark.driver.aspectj.SparkContextAspectj
[AppClassLoader@18b4aac2] info register aspect io.github.melin.jobserver.spark.driver.aspectj.HdfsApiAspectj
```
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6O9BKu,aspectj,2398360238,318,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-10-08T01:03:00Z,2024-10-08T01:03:00Z,"I do not understand the error description, and there is no reproducer. Please improve the issue in these two respects to avoid it getting closed as invalid. Thank you.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6O9BKu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QLl5_,aspectj,2418957951,318,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-10-17T08:56:53Z,2024-10-17T08:56:53Z,"No reaction, closing as invalid. Feel free to add information, then we can consider reopening the issue. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QLl5_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QLsyM,aspectj,2418986124,318,NA,melin,1145830,melin,libinsong1204@gmail.com,NA,2024-10-17T09:09:31Z,2024-10-17T09:09:31Z,"> No reaction, closing as invalid. Feel free to add information, then we can consider reopening the issue.

thank you, Problem solved","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QLsyM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/318,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QOE3X,aspectj,2419609047,318,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-10-17T13:50:45Z,2024-10-17T13:50:45Z,"@melin, then why didn't you say so before? If you create an issue here, causing work for others, please be polite enough to explain what was the root cause of the problem and how exactly you solved it, so everybody can learn about it for future reference, if a similar problem comes up. Thank you. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6QOE3X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,aspectj,2638448418,319,No transactional EntityManager available after upgrading to version 1.9.22.1,smitzkus,9132550,Stefan Mitzkus,,CLOSED,2024-11-06T15:33:39Z,2024-11-13T00:10:50Z,"I configured my maven build as follows to weave aspects of spring-aspects and spring-security-aspects:

```xml
<plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>${aspectj.maven.plugin.version}</version>
        <configuration>
          <proc>none</proc>
          <showWeaveInfo>true</showWeaveInfo>
          <Xlint>ignore</Xlint>
          <complianceLevel>17</complianceLevel>
          <encoding>UTF-8</encoding>
          <verbose>false</verbose>
          <outxml />
          <forceAjcCompile>true</forceAjcCompile>
          <parameters>true</parameters>
          <aspectLibraries>
            <aspectLibrary>
              <groupId>org.springframework</groupId>
              <artifactId>spring-aspects</artifactId>
            </aspectLibrary>
            <aspectLibrary>
              <groupId>org.springframework.security</groupId>
              <artifactId>spring-security-aspects</artifactId>
            </aspectLibrary>
          </aspectLibraries>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>
```
The following code worked fine till version 1.9.19.:
```java
    @PersistenceContext
    protected EntityManager entityManager;
  
    @Async(EXECUTOR)
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    private Future<Boolean> process() {
        SharedSessionContractImplementor session = getSession();
        session.accessTransaction();
        ...
       return CompletableFuture.completedFuture(true);
    }

    protected SharedSessionContractImplementor getSession() {
        return entityManager.unwrap(SharedSessionContractImplementor.class);
    }
```
After upgrading to version 1.9.22.1 calling the method getSession causes the following exception:
```text
java.lang.IllegalStateException: No transactional EntityManager available
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:291)
	at jdk.proxy3/jdk.proxy3.$Proxy180.unwrap(Unknown Source)
```

I use spring 6.1.14 and hibernate 6.6.1.Final. Could anyone help with this issue?
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Ss5mU,aspectj,2461243796,319,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-11-07T03:27:11Z,2024-11-07T03:27:11Z,"First, please note my [message a while ago](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.

Having said that, please document your issue as well as possible, specifically by posting a link to a GitHub project containing a minimal reproducer. Then, as soon as someone else or I wants to dedicate time to the issue, we can dig right in without further ado. Thank you. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6Ss5mU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6S8NjX,aspectj,2465257687,319,NA,smitzkus,9132550,Stefan Mitzkus,,NA,2024-11-08T16:48:55Z,2024-11-08T16:48:55Z,"Hi Alexander, thank you very much for the quick reply! 
Unfortunately I couldn't reproduce the issue in isolation. I created the following spring-boot application including aspectj 1.9.22.1:
https://github.com/smitzkus/spring-boot-aop-transactions

In class ProcessingService you can see the method 'process' annotated with @Transactional and @Async. Within this method i try to obtain the EntityManagerHolder via TransactionSynchronizationManager#getResource. In the demo everything is working fine (including calling entityManager#unwrap(SharedSessionContractImplementor.class which also uses TransactionSynchronizationManager#getResource).

In our production code calling TransactionSynchronizationManager#getResource returns null and calling entityManager#unwrap causes the IllegalStateException described above. 

Meanwhile i was able to figure out, that only the AnnotationAsyncExecutionAspect was weaved in but not the AnnotationTransactionAspect (both from spring-aspect) as you can see in the stacktrace:
![2024-11-08 14_49_36-2024-06 - TUG - kautionen-server_src_main_java_de_hausbank_kautionen_server_serv](https://github.com/user-attachments/assets/819c7eea-b567-46d4-91e6-4c418983379a)

Comparing the stacktrace with aspectj 1.9.19 shows the difference:
![2024-11-08 15_35_20-2024-06 - TUG - kautionen-server_src_main_java_de_hausbank_kautionen_server_serv](https://github.com/user-attachments/assets/cafe9428-2587-4b99-9a57-bd1336db4123)

Strangely, the aspect AnnotationTransactionAspect is listed in the weave-info output for the relevant class:
```
[INFO] Join point 'method-execution(java.util.concurrent.Future de.hausbank.kautionen.server.service.auswertung.AuswertungProcessingService.processDruckAuftragAuswertung(long))' in Type 'de.hausbank.kautionen.server.service.auswertung.AuswertungProcessingService' (AuswertungProcessingService.java:124) advised by around advice from 'org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect' (spring-aspects-6.1.14.jar!AbstractAsyncExecutionAspect.class:65(from AbstractAsyncExecutionAspect.aj))
[INFO] Join point 'method-execution(java.util.concurrent.Future de.hausbank.kautionen.server.service.auswertung.AuswertungProcessingService.processDruckAuftragAuswertung(long))' in Type 'de.hausbank.kautionen.server.service.auswertung.AuswertungProcessingService' (AuswertungProcessingService.java:124) advised by around advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (spring-aspects-6.1.14.jar!AbstractTransactionAspect.class:67(from AbstractTransactionAspect.aj))
```
My hope is that you could give me a hint based on the changes between version 1.9.19 and 1.9.20, when the problem first appeared. Or are there other ways of debugging to find out why the AnnotationTransactionAspect gets not weaved in?

I really would appreciate any help!","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6S8NjX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6S_JNl,aspectj,2466026341,319,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-11-09T03:40:15Z,2024-11-09T03:40:15Z,"> Unfortunately I couldn't reproduce the issue in isolation. I created the following spring-boot application including aspectj 1.9.22.1: https://github.com/smitzkus/spring-boot-aop-transactions

Hm, a sample project which does _not_ reproduce the problem is not super helpful. Your problem seems to be quite specific to Spring aspects. I am not a Spring user, but using `@Transactional` and `@Async` on the same method seems to be discouraged, see e.g.:
* https://dzone.com/articles/mastering-spring-synchronizing-transactional-and-a
* https://dev.to/arashariani/handling-asynchronous-execution-with-transactions-in-spring-a-common-pitfall-and-how-to-solve-it-5ah4
* https://github.com/spring-projects/spring-framework/issues/24309

It looks as if Spring aspects have an undefined execution order by default. Maybe, slightly refactoring your code according to the descriptions there will solve the problem. I recommend trying that. Another workaround would be to add an aspect with `declare precedence` (native syntax) or `@DeclarePrecedence` in it, specifying aspect precedence explicitly, and compiling it together with the rest of your code using AspectJ Maven. But that is only plan B, I would try the simple approach described on the first two linked pages. 

> My hope is that you could give me a hint based on the changes between version 1.9.19 and 1.9.20, when the problem first appeared.

I am not sure it is an AspectJ problem. Did you actually check the class files to verify that one of the the aspects has **not** been woven? The stack trace does not prove anything in this case. It just shows a runtime call stack.

Did you verify that it is actually 1.9.20 in which the change of behaviour happens? You wrote that you use 1.9.22.1. Anyway, you can see the list of changes for each release linked off of the corresponding release notes, e.g. https://github.com/eclipse-aspectj/aspectj/blob/master/docs/release/README-1.9.20.adoc.

I cannot be more specific in helping you, if I have no reproducer.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6S_JNl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6TGeC2,aspectj,2467946678,319,NA,smitzkus,9132550,Stefan Mitzkus,,NA,2024-11-11T11:29:12Z,2024-11-11T11:29:12Z,"Thank you so much for your help, using ""declare precedence"" solved my problem. 
I don't know why but the order of the aspects 'AnnotationAsyncExecutionAspect' and 'AnnotationTransactionAspect' changed after upgrading from version 1.9.19 to 1.9.20 or higher. 
I have to make sure that aspect AnnotationAsyncExecutionAspect is called before AnnotationTransactionAspect. Otherwise no transaction is bound to the executor which then causes the ""No transactional EntityManager available"" exception. 

I updated my demo using @DeclarePrecedence with the wrong order. Now the exception is reproducible.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6TGeC2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/319,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6TV4fM,aspectj,2471987148,319,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-11-13T00:10:50Z,2024-11-13T00:10:50Z,I am happy it works for you now.,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6TV4fM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,aspectj,2742852786,320,Getting NullPointerException with aspectJ 1.9.22.1 and JDK 17,sreedharj,59205843,,,CLOSED,2024-12-16T16:30:15Z,2024-12-17T12:40:32Z,"```text
Caused by: org.codehaus.mojo.aspectj.CompilationFailedException: AJC compiler errors:
abort ABORT -- (NullPointerException) Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
java.lang.NullPointerException: Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.loadModules(ClasspathJrt.java:251)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.initialize(ClasspathJrt.java:206)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:387)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:319)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.processStringPath(AjBuildConfig.java:267)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.computeCheckedClasspath(AjBuildConfig.java:946)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.getCheckedClasspaths(AjBuildConfig.java:274)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.getLibraryAccess(AjBuildManager.java:944)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1045)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
	at org.aspectj.tools.ajc.Main.run(Main.java:385)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)
	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)
	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)
	at org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)
	at org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)
	at org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:906)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:283)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:206)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:574)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:255)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:201)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:361)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:314)
```

What may be the issue?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X1wGQ,aspectj,2547450256,320,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-12-17T03:52:43Z,2024-12-17T03:52:43Z,"Having left my magical crystal globe at home today, I cannot answer your question like this. A complete, minimal reproducer would surely help. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X1wGQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X14iQ,aspectj,2547484816,320,NA,sreedharj,59205843,,,NA,2024-12-17T04:31:28Z,2024-12-17T04:31:28Z,"Thanks for quick response!  ya  sure, will try to create small maven project to reproduce the above issue. In the mean time, if you have some pointers based on the above stacktrace would help","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X14iQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X4ry4,aspectj,2548219064,320,NA,sreedharj,59205843,,,NA,2024-12-17T11:33:36Z,2024-12-17T11:33:36Z,"Here is the complete error stacktrace details.

```text
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
Failed to walk modules for /home/jsreedha/aspectj_issue/jdk-17.0.13+11/lib/jrt-fs.jar
java.io.FileNotFoundException: /home/jsreedha/aspectj_issue/jdk-17.0.13+11/release (No such file or directory)
	at java.base/java.io.FileInputStream.open0(Native Method)
	at java.base/java.io.FileInputStream.open(FileInputStream.java:216)
	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:157)
	at java.base/java.io.FileReader.<init>(FileReader.java:75)
	at org.aspectj.org.eclipse.jdt.internal.compiler.util.Jdk.readJdkReleaseFile(JRTUtil.java:495)
	at org.aspectj.org.eclipse.jdt.internal.compiler.util.Jdk.lambda$0(JRTUtil.java:448)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1716)
	at org.aspectj.org.eclipse.jdt.internal.compiler.util.Jdk.<init>(JRTUtil.java:446)
	at org.aspectj.org.eclipse.jdt.internal.compiler.util.JRTUtil.getJrtSystem(JRTUtil.java:146)
	at org.aspectj.org.eclipse.jdt.internal.compiler.util.JRTUtil.walkModuleImage(JRTUtil.java:242)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.lambda$1(ClasspathJrt.java:213)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1716)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.loadModules(ClasspathJrt.java:210)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.initialize(ClasspathJrt.java:206)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:387)
	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:319)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.processStringPath(AjBuildConfig.java:267)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.computeCheckedClasspath(AjBuildConfig.java:946)
	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.getCheckedClasspaths(AjBuildConfig.java:274)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.getLibraryAccess(AjBuildManager.java:944)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1045)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
	at org.aspectj.tools.ajc.Main.run(Main.java:385)
	at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)
	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)
	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)
	at org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)
	at org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)
	at org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:906)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:283)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:206)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:575)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:255)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:201)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:361)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:314)
[ERROR] ABORT
Dec 17, 2024 4:57:00 PM org.aspectj.weaver.tools.Jdk14Trace info
INFO: Dumping to /home/jsreedha/aspectj_issue/com.ibm.profiler.core/./ajcore.20241217.165700.500.txt


[ERROR] abort ABORT -- (NullPointerException) Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
[ERROR] Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
[ERROR] java.lang.NullPointerException: Cannot invoke ""java.util.Map.keySet()"" because ""cache"" is null
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.loadModules(ClasspathJrt.java:251)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJrt.initialize(ClasspathJrt.java:206)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:387)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem.getClasspath(FileSystem.java:319)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.processStringPath(AjBuildConfig.java:267)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.computeCheckedClasspath(AjBuildConfig.java:946)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildConfig.getCheckedClasspaths(AjBuildConfig.java:274)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.getLibraryAccess(AjBuildManager.java:944)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1045)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR] 	at org.aspectj.tools.ajc.Main.run(Main.java:385)
[ERROR] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
[ERROR] 	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:568)
[ERROR] 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)
[ERROR] 	at org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)
[ERROR] 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)
[ERROR] 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)
[ERROR] 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
[ERROR] 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
[ERROR] 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:906)
[ERROR] 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:283)
[ERROR] 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:206)
[ERROR] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[ERROR] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR] 	at java.base/java.lang.reflect.Method.invoke(Method.java:575)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:255)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:201)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:361)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:314)
[ERROR] 
```

Issue seems to be with JDK17 folder does not have folder called  ""release"" folder. When I downloaded JDK 17 again and which seems to have folder 'release' and the build went fine.  
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X4ry4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X5H9S,aspectj,2548334418,320,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2024-12-17T12:30:34Z,2024-12-17T12:30:34Z,"I am happy for you that your problem is solved. 

Please give your questions some more love in the future, for example always include a minimal reproducer and learn how to use code blocks in markdown format. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X5H9S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/320,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X5NKS,aspectj,2548355730,320,NA,sreedharj,59205843,,,NA,2024-12-17T12:40:31Z,2024-12-17T12:40:31Z,ya sure. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6X5NKS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,aspectj,2795666724,321,Publish Javadoc to well-known location,sbrannen,104798,Sam Brannen,,CLOSED,2025-01-17T14:54:42Z,2025-01-24T14:43:58Z,"The Spring Framework build has recently started reporting the following warning.

```
warning: URL https://eclipse.dev/aspectj/doc/released/aspectj5rt-api/element-list was redirected to https://projects.eclipse.org/projects/tools.aspectj
```

However, https://projects.eclipse.org/projects/tools.aspectj is not the location for the AspectJ Javadoc.

I apologize if I have overlooked something, but I cannot determine where the AspectJ Javadoc is currently published online.

Can you please update the project's README to point to the location where AspectJ's Javadoc is published?

For example, Spring Framework would currently need to link to the Javadoc for AspectJ 1.9.22.1.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6a4vb-,aspectj,2598565630,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-17T15:05:44Z,2025-01-17T15:05:44Z,"@aclement, you have not reacted to my latest e-mail about the PHP migration f***-up which made the complete AspectJ docs (of which the javadocs are but a small part) become unaccessible due to faulty redirection. You told the Eclipse admin team how you wanted it done. Maybe, you can coordinate with them to fix it again. You know that I am on hiatus until I found a sponsor. Thank you very much. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6a4vb-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLRq4,aspectj,2603424440,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T00:57:17Z,2025-01-21T00:57:17Z,"@sbrannen, it looks as if the issue is resolved and the AspectJ documentation accessible again right from the same URLs it used to be before Eclipse deactivated PHP on its pages and a glitch happened with redirection while someone tried to work around it.

When opening https://projects.eclipse.org/projects/tools.aspectj, you find a link named ""Website"", leading to https://eclipse.dev/aspectj/, which is now accessible again without falsely linking back to the project page. There, you find a link ""Docs"", leading to https://eclipse.dev/aspectj/doc/latest/index.html. Finally, there you find links to javadocs:

* https://eclipse.dev/aspectj/doc/latest/runtime-api/index.html
* https://eclipse.dev/aspectj/doc/latest/weaver-api/index.html

![Image](https://github.com/user-attachments/assets/bd0e8c6f-1226-4851-b250-1f508568fe31)

The credit for fixing the problem goes to @aclement. 🙏
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLRq4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLStd,aspectj,2603428701,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T01:02:33Z,2025-01-21T01:02:33Z,"Reopening because the read-me needs an update. It currently contains only GitHub links, but the javadocs are published separately and cannot be accessed inline from GitHub. Links to the Eclipse project page, the AspectJ website and specifically to the docs overview page should be part of the read-me.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLStd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPBba,aspectj,2604406490,321,NA,sbrannen,104798,Sam Brannen,,NA,2025-01-21T11:02:12Z,2025-01-21T11:02:12Z,"> When opening [projects.eclipse.org/projects/tools.aspectj](https://projects.eclipse.org/projects/tools.aspectj), you find a link named ""Website"", leading to [eclipse.dev/aspectj](https://eclipse.dev/aspectj/), which is now accessible again without falsely linking back to the project page. There, you find a link ""Docs"", leading to [eclipse.dev/aspectj/doc/latest/index.html](https://eclipse.dev/aspectj/doc/latest/index.html). Finally, there you find links to javadocs:

Thanks for the details on how to navigate through all of that. Much appreciated. Plus, I discovered the [AspectJ Java version compatibility](https://eclipse.dev/aspectj/doc/latest/release/JavaVersionCompatibility.html) page which is handy.

And thanks for updating the GitHub README as well. 👍 

> The credit for fixing the problem goes to @aclement. 🙏

Indeed it does! Cheers, @aclement. 👏 

FYI: Andy has also published _modern_ Javadoc for AspectJ Runtime types here: https://eclipse.dev/aspectj/doc/released/1.9.22.1/aspectjrt/.

See also: https://github.com/spring-projects/spring-framework/issues/34293","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPBba/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPPTx,aspectj,2604463345,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T11:27:25Z,2025-01-21T11:27:25Z,"> FYI: Andy has also published _modern_ Javadoc for AspectJ Runtime types here: https://eclipse.dev/aspectj/doc/released/1.9.22.1/aspectjrt/.

Sorry, but what about it is different from the https://eclipse.dev/aspectj/doc/latest/runtime-api/ I published long ago? At first glance, it looks identical. Please enlighten me.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPPTx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPRUd,aspectj,2604471581,321,NA,sbrannen,104798,Sam Brannen,,NA,2025-01-21T11:31:25Z,2025-01-21T11:31:25Z,"> Sorry, but what about it is different from the [eclipse.dev/aspectj/doc/latest/runtime-api](https://eclipse.dev/aspectj/doc/latest/runtime-api/) I published long ago? At first glance, it looks identical. Please enlighten me.

As I mentioned in https://github.com/spring-projects/spring-framework/issues/34293, the old Javadoc was for AspectJ 1.6 (2009).

The Javadoc is very different: different style, search box, [`element-list`](https://eclipse.dev/aspectj/doc/latest/runtime-api/element-list) file instead of `package-list` file, and it's based on AspectJ 1.9.22.1.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPRUd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPgbB,aspectj,2604533441,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T12:00:32Z,2025-01-21T12:00:32Z,"@sbrannen Again: I published it long ago like this, your links simply used the old location with the legacy docs that I kept around for a while so as not to disrupt people using old links too much too quickly. The link to the element list you just used is from the version I published. It also has the search box. IMO it was completely unnecessary and redundant to publish it one more time. Just update the link and be happy. Did you compare the two aspectjrt javadocs? What is different about them?

@aclement Can you maybe explain why you re-published something that was already published and linked off of the docs overview page (see my screenshot above) for a long time?","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPgbB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPlFe,aspectj,2604552542,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T12:09:11Z,2025-01-21T12:09:11Z,"To be exact, I added the modern javadocs for both weaver and runtime on Valentine's Day 2024, i.e. almost a year ago, see e.g. [this Git file history](https://github.com/eclipse-aspectj/aspectj-website/commits/master/doc/latest/runtime-api/index.html). Last time I updated everything for 1.9.21.1, since then there have not been any changes in API docs AFAIR, so updates for 1.9.22 or 1.9.22.1 were unnecessary.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bPlFe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bRO4e,aspectj,2604985886,321,NA,sbrannen,104798,Sam Brannen,,NA,2025-01-21T15:06:00Z,2025-01-21T15:06:00Z,"> I published it long ago like this,

I was not aware of what had been published, where, when, or by whom.

> your links simply used the old location with the legacy docs that I kept around for a while so as not to disrupt people using old links too much too quickly.

Makes sense to keep the old stuff around with the `package-list` files, but I assume many people were not aware that there were new locations for AspectJ's Javadoc.

For the Spring Framework, I assume the external link to AspectJ's Javadoc had been configured once and remained in the build, unchanged, for years.

> The link to the element list you just used is from the version I published. It also has the search box. IMO it was completely unnecessary and redundant to publish it one more time. 

If the content is identical, there is of course no reason to publish two identical ""latest"" Javadoc sites.

But having a latest/current publication as well as publications for individual versions can be beneficial if one wants or needs to reference a particular version.

In any case, it would be very beneficial if the AspectJ Javadoc contained the AspectJ version.

For example, the [latest runtime docs](https://eclipse.dev/aspectj/doc/latest/runtime-api/) could be called ""AspectJ Runtime 1.9.22.1 API"" instead of just ""AspectJ Runtime API"", analogous to how the [current Spring Framework docs](https://docs.spring.io/spring-framework/docs/current/javadoc-api/) are called ""Spring Framework 6.2.2 API"".

> Just update the link and be happy. 

If the https://eclipse.dev/aspectj/doc/latest/runtime-api/ site is guaranteed to be stable, that is likely what we will do for the Spring Framework build.

> Did you compare the two aspectjrt javadocs? What is different about them?

I honestly have no idea about the structure of the filesystem on the web server that hosts the AspectJ content. So I don't know who published what or when; I don't know which directories are symbolic links; etc.

So I'll leave it up to the AssertJ maintainers to sort that out.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bRO4e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bSCKe,aspectj,2605195934,321,NA,aclement,226298,Andy Clement,aclement@vmware.com,NA,2025-01-21T16:26:11Z,2025-01-21T16:26:11Z,"> @aclement Can you maybe explain why you re-published something
I wasn't aware or had forgotten.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bSCKe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVXHW,aspectj,2606068182,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-22T01:11:52Z,2025-01-22T01:11:52Z,"No problem, @aclement, that is why I commented. Now we are all on the same page, which is great. 🙂

I suggest you simply revert https://github.com/eclipse-aspectj/aspectj-website/commit/4c5a244ae1efdac2db5309068d736c466b7e559b.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVXHW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVcCt,aspectj,2606088365,321,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-22T01:31:16Z,2025-01-22T01:31:16Z,"@sbrannen 

> Makes sense to keep the old stuff around with the `package-list` files

It was fine for a while, but actually I intended to remove the legacy stuff a few months ago, around the time I decided to go on hiatus, and finally forgot to do it. That is the only reason the old documentation is still on the website. I actually want it to break, so as to encourage users and projects to use the current docs in modern layout - not just javadocs but also Asciidoc-based user and developer docs.

> but I assume many people were not aware that there were new locations for AspectJ's Javadoc.

For most people, probably this was not a problem, because they do not use permanent links to it but find it via the project website and the docs overview page (where the links to the old docs have been replaced by ones to the new ones long ago) or even just read API docs in their respective IDEs. Spring's use case is rare, but of course valid.

> For the Spring Framework, I assume the external link to AspectJ's Javadoc had been configured once and remained in the build, unchanged, for years.

Yes, no problem. Had I been more consequent to delete the old docs completely, this would have broken long ago. As the redirection glitch proves, unavailability made you aware of the change, albeit indirectly in this case. 😉

> In any case, it would be very beneficial if the AspectJ Javadoc contained the AspectJ version.

I made the decision on purpose to not publish APi docs per release but only the latest, as was always the practice even before I started contributing to the problem. But I am not simply continuing an old practice but decided like this simply due to that fact that for the last couple of years I was the sole maintainer of AspectJ, its website, AJDT, AspectJ JDT Core, AspectJ.dev AspectJ Maven Plugin and a few other projects. I also added build steps to strip off some content like timestamps and version numbers from the javadocs to keep the commit diffs small and readable, because I like it that way. I would like to be able to diff javadocs just like normal code and mostly just see changes in content, not in structure or metadata.

> If the https://eclipse.dev/aspectj/doc/latest/runtime-api/ site is guaranteed to be stable, that is likely what we will do for the Spring Framework build.

That was/is indeed the plan.

> I'll leave it up to the AssertJ maintainers to sort that out.

AspectJ, please. AssertJ is a different beast. 😉

","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVcCt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bYRv9,aspectj,2606832637,321,NA,lefou,1321393,Tobias Roeser,,NA,2025-01-22T10:18:37Z,2025-01-22T10:18:37Z,"A project version number is essential in a documentation. A user has no other way to know, which exact version is documented. Of course, timestamps and used tools versions can be stripped since they make built artifacts non-reproducible. ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bYRv9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/321,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6buqB2,aspectj,2612699254,321,NA,sbrannen,104798,Sam Brannen,,NA,2025-01-24T14:43:57Z,2025-01-24T14:43:57Z,"> For most people, probably this was not a problem, because they do not use permanent links to it but find it via the project website and the docs overview page (where the links to the old docs have been replaced by ones to the new ones long ago) or even just read API docs in their respective IDEs. Spring's use case is rare, but of course valid.

Indeed. There probably are not that many projects which publish their Javadoc containing links to AspectJ's javadoc. I suppose most projects just _use_ AspectJ without explicitly referencing AspectJ types in their Javadoc.

> > For the Spring Framework, I assume the external link to AspectJ's Javadoc had been configured once and remained in the build, unchanged, for years.
> 
> Yes, no problem. Had I been more consequent to delete the old docs completely, this would have broken long ago. As the redirection glitch proves, unavailability made you aware of the change, albeit indirectly in this case. 😉

Exactly

> > In any case, it would be very beneficial if the AspectJ Javadoc contained the AspectJ version.
> 
> I made the decision on purpose to not publish APi docs per release but only the latest, as was always the practice even before I started contributing to the problem. [...] I also added build steps to strip off some content like timestamps and version numbers from the javadocs to keep the commit diffs small and readable, because I like it that way. I would like to be able to diff javadocs just like normal code and mostly just see changes in content, not in structure or metadata.

I think those other changes you made are fine, and it's also fine just to publish the ""latest and greatest"" under the `latest` directory.

However, I still think it would benefit the community if the latest Javadocs referenced the AspectJ API version included in those docs. And I don't think that would make diffs unmanageable. 

> > If the [eclipse.dev/aspectj/doc/latest/runtime-api](https://eclipse.dev/aspectj/doc/latest/runtime-api/) site is guaranteed to be stable, that is likely what we will do for the Spring Framework build.
> 
> That was/is indeed the plan.

Thanks for the confirmation.

I just updated Spring Framework's build accordingly: https://github.com/spring-projects/spring-framework/commit/683733a6827276437bc4c9bbc593592f732b2e95

> > I'll leave it up to the AssertJ maintainers to sort that out.
> 
> AspectJ, please. AssertJ is a different beast. 😉

Oh nooooooo.... Can't believe I typed ""AssertJ"". 🤦 

But, to be honest, that's not the first time my brain has switched up AspectJ and AssertJ, AOT and AOP, etc. 😉 ","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6buqB2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/322,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/322,aspectj,2798884441,322,ajc error for particular Pointcut and @Deprecated,zuckel,511574,Florian Lasinger,,OPEN,2025-01-20T10:40:06Z,2025-01-21T00:48:18Z,"I've run into an aspectj compiler problem that only happens in a very specific case. It might be related to https://github.com/eclipse-aspectj/aspectj/issues/316 because it also involves the @Deprecated annotation.

See https://github.com/zuckel/aspectj-nullrecipient-reproducer for a minimal reproducer.

The setup involves
- a `@Deprecated` annotation on a parameter in an interface
- a `@Pointcut` of the form `""execution(* *(@SomeAnnotation (*), ..))""` (the comma being the important part)

The annotation does not have to exist at all or be present on the interface or class.

@kriegaex I am fully aware that you are not currently actively maintaining this, and am not expecting any update. I am merely documenting this issue. Maybe sometime, someone (maybe me?) has time to look into it.

# Environment
Apache Maven 3.9.8 (36645f6c9b5079805ea5009217e36f2cffd34256)
Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: /home/flasinger/jvm/jdk-21.0.5+11
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""6.8.0-51-generic"", arch: ""amd64"", family: ""unix""

It happens on all the latest aspectj versions up to at least 1.9.22.1.

For some of my colleagues it happens every time, while for others it never happens. We haven't been able to figure out why, yet. We are all on the exact same JDK version. (Maven version does differ but is not conclusive.)


# Code
```
public class TheClass implements TheInterface {
    @Override
    public void method(int param) {
    }
}
```

```
public interface TheInterface {
    void method(@Deprecated int param);
}
```

```
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class TheAspect {
    @Around(""execution(* *(@SomeAnnotation (*), ..))"")
    public Object aroundContext(ProceedingJoinPoint pjp) throws Throwable {
        return pjp.proceed();
    }
}
```

# Error
```
[ERROR] Failed to execute goal dev.aspectj:aspectj-maven-plugin:1.14:compile (default) on project aspectj-nullrecipient-reproducer: AJC compiler errors:
[ERROR] abort trouble in: 
[ERROR] public class TheClass extends java.lang.Object implements TheInterface:
[ERROR]   public void <init>():
[ERROR]                     ALOAD_0     // LTheClass; this   (line 1)
[ERROR]                     INVOKESPECIAL java.lang.Object.<init> ()V
[ERROR]     constructor-execution(void TheClass.<init>())
[ERROR]     |               RETURN
[ERROR]     constructor-execution(void TheClass.<init>())
[ERROR]   end public void <init>()
[ERROR] 
[ERROR]   public void method(int)    org.aspectj.weaver.MethodDeclarationLineNumber: 4:79
[ERROR] :
[ERROR]                     RETURN   (line 6)
[ERROR]   end public void method(int)
[ERROR] 
[ERROR] end public class TheClass
[ERROR]  -- (NullPointerException) Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding.setAnnotations(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[], boolean)"" because ""this.recipient"" is null
[ERROR] Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding.setAnnotations(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[], boolean)"" because ""this.recipient"" is null
[ERROR] java.lang.NullPointerException: Cannot invoke ""org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding.setAnnotations(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[], boolean)"" because ""this.recipient"" is null
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:973)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getEclipseParameterAnnotations(EclipseResolvedMember.java:378)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getParameterAnnotationTypes(EclipseResolvedMember.java:253)
[ERROR] 	at org.aspectj.weaver.JoinPointSignature.getParameterAnnotationTypes(JoinPointSignature.java:257)
[ERROR] 	at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyMethod(SignaturePattern.java:532)
[ERROR] 	at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:360)
[ERROR] 	at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:320)
[ERROR] 	at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:202)
[ERROR] 	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)
[ERROR] 	at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:56)
[ERROR] 	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)
[ERROR] 	at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:113)
[ERROR] 	at org.aspectj.weaver.Advice.match(Advice.java:113)
[ERROR] 	at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:161)
[ERROR] 	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:3336)
[ERROR] 	at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2716)
[ERROR] 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:483)
[ERROR] 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)
[ERROR] 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1703)
[ERROR] 	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1647)
[ERROR] 	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1414)
[ERROR] 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1189)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:510)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:446)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:431)
[ERROR] 	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:104)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:945)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:575)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
[ERROR] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1101)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:275)
[ERROR] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:188)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:103)
[ERROR] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:47)
[ERROR] 	at org.aspectj.tools.ajc.Main.run(Main.java:385)
[ERROR] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:274)
[ERROR] 	at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:627)
[ERROR] 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)
[ERROR] 	at org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)
[ERROR] 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)
[ERROR] 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)
[ERROR] 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)
[ERROR] 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)
[ERROR] 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
[ERROR] 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
[ERROR] 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:903)
[ERROR] 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:280)
[ERROR] 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:203)
[ERROR] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
[ERROR] 	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:255)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:201)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:361)
[ERROR] 	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:314)
```","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/322/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/322,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLQBf,aspectj,2603417695,322,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-21T00:47:29Z,2025-01-21T00:47:29Z,"Thank you for raising this issue and creating a reproducer.

> It might be related to [#316](https://github.com/eclipse-aspectj/aspectj/issues/316) because it also involves the [@deprecated](https://github.com/deprecated) annotation.

This issue might even be a duplicate, but I would have to check first to be sure. At first glance, it certainly looks related.

> [@kriegaex](https://github.com/kriegaex) I am fully aware that you are not currently actively maintaining this, and am not expecting any update. I am merely documenting this issue.

This is exactly the right approach. Despite my hope that in the future someone will fund me to continue maintaining this project, any OSS project is greater than a single person, and raising issues is very important for its future, no matter who (hopefully I) analyses, debugs or resolves issues or feature requests. 🙂","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bLQBf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/323,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/323,aspectj,2802797103,323,"UnresolvedType#getDimensions uses uncompiled regex, resulting in 97% of memory allocated in Pattern.compile",sddavis,8451280,Sam Davis,,OPEN,2025-01-21T20:57:43Z,2025-01-22T19:11:00Z,"UnresolvedType#getDimensions introduced in https://github.com/eclipse-aspectj/aspectj/commit/6e79467e0a24c9e903d0d06948615b6fe9250efa uses an uncompiled regex. After upgrading to a version with this change, my test suite allocates 97% of its memory - 98.2GB - in Pattern.compile calls from that method.","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/323,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVWQr,aspectj,2606064683,323,NA,kriegaex,1537384,Alexander Kriegisch,,NA,2025-01-22T01:08:42Z,2025-01-22T01:08:42Z,"Good catch, thank you very much. Without having studied the code in detail, a quick glance at the changeset seems to imply that this might be fixable by compiling the regex. An automated test reproducing and verifying the excessive memory consumption would be nice.

Please note my [July 2024 message](https://www.eclipse.org/lists/aspectj-users/msg15598.html) to the _aspectj-users_ and _aspectj-announce_ mailing lists regarding my situation as an AspectJ maintainer.
","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bVWQr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/323,https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bc9ZN,aspectj,2608059981,323,NA,sddavis,8451280,Sam Davis,,NA,2025-01-22T19:10:59Z,2025-01-22T19:10:59Z,"I'm afraid I won't have time to provide a test. But here's a screenshot of the profiler:

![Image](https://github.com/user-attachments/assets/eed6301d-dea6-4301-8d81-caeae556a4cd)","{""url"": ""https://api.github.com/repos/eclipse-aspectj/aspectj/issues/comments/IC_kwDOEOq1Ns6bc9ZN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
